// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out1;
      _out1 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out1;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), RAST.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> __accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#d"));
        Dafny.ISequence<Dafny.Rune> _in0 = (i).Drop(BigInteger.One);
        i = _in0;
        goto TAIL_CALL_START;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger((i).Count)) >= (new BigInteger(2))) {
          if (((i).Select(BigInteger.One)) == (new Dafny.Rune('_'))) {
            __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
            Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(new BigInteger(2));
            i = _in1;
            goto TAIL_CALL_START;
          } else if (((i).Select(BigInteger.One)) == (new Dafny.Rune('q'))) {
            __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("q#"));
            Dafny.ISequence<Dafny.Rune> _in2 = (i).Drop(new BigInteger(2));
            i = _in2;
            goto TAIL_CALL_START;
          } else if (((i).Select(BigInteger.One)) == (new Dafny.Rune('k'))) {
            __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("k#"));
            Dafny.ISequence<Dafny.Rune> _in3 = (i).Drop(new BigInteger(2));
            i = _in3;
            goto TAIL_CALL_START;
          } else if (((i).Select(BigInteger.One)) == (new Dafny.Rune('b'))) {
            __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("b#"));
            Dafny.ISequence<Dafny.Rune> _in4 = (i).Drop(new BigInteger(2));
            i = _in4;
            goto TAIL_CALL_START;
          } else if (((i).Select(BigInteger.One)) == (new Dafny.Rune('h'))) {
            __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("h#"));
            Dafny.ISequence<Dafny.Rune> _in5 = (i).Drop(new BigInteger(2));
            i = _in5;
            goto TAIL_CALL_START;
          } else {
            __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
            Dafny.ISequence<Dafny.Rune> _in6 = (i).Drop(BigInteger.One);
            i = _in6;
            goto TAIL_CALL_START;
          }
        } else {
          __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in7 = (i).Drop(BigInteger.One);
          i = _in7;
          goto TAIL_CALL_START;
        }
      } else {
        __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in8 = (i).Drop(BigInteger.One);
        i = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> r = RAST.__default.replaceDots(i);
      if ((RAST.__default.reserved__rust).Contains(r)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), r);
      } else {
        return r;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f) {
      Dafny.ISequence<Dafny.Rune> __accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        __accumulator = Dafny.Sequence<Dafny.Rune>.Concat(__accumulator, Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in9 = (s).Drop(BigInteger.One);
        Func<__T, Dafny.ISequence<Dafny.Rune>> _in10 = f;
        s = _in9;
        f = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust {
      get {
        return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
      }
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(RAST.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source0 = this;
      if (_source0.is_Mod) {
        Dafny.ISequence<Dafny.Rune> __mcc_h0 = _source0.dtor_name;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> __mcc_h1 = _source0.dtor_body;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> body = __mcc_h1;
        Dafny.ISequence<Dafny.Rune> _10_name = __mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _10_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_11_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_12_modDecl) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _11_ind), RAST.__default.IND), RAST.ModDecl._ToString(_12_modDecl, Dafny.Sequence<Dafny.Rune>.Concat(_11_ind, RAST.__default.IND)));
        })))(ind))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _13___mcc_h2 = _source0.dtor_name;
        Dafny.ISequence<Dafny.Rune> _14_name = _13___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _14_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_ModDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
  }
  public class ModDecl : _IModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl(Dafny.ISequence<Dafny.Rune> body) {
      this._body = body;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl(body);
    }
    public static _IModDecl create_ModDecl(Dafny.ISequence<Dafny.Rune> body) {
      return create(body);
    }
    public bool is_ModDecl { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        return this._body;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }
} // end of namespace RAST
namespace DCOMP {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _15_body;
      Dafny.ISequence<Dafny.Rune> _out2;
      _out2 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _15_body = _out2;
      RAST._IMod _16_m;
      _16_m = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(RAST.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(RAST.__default.escapeIdent((mod).dtor_name), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_15_body))));
      s = (_16_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _17_i;
      _17_i = BigInteger.Zero;
      while ((_17_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _18_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source1 = (body).Select(_17_i);
        if (_source1.is_Module) {
          DAST._IModule _19___mcc_h0 = _source1.dtor_Module_a0;
          DAST._IModule _20_m = _19___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = DCOMP.COMP.GenModule(_20_m, containingPath);
          _18_generated = _out3;
        } else if (_source1.is_Class) {
          DAST._IClass _21___mcc_h1 = _source1.dtor_Class_a0;
          DAST._IClass _22_c = _21___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out4;
          _out4 = DCOMP.COMP.GenClass(_22_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_22_c).dtor_name)));
          _18_generated = _out4;
        } else if (_source1.is_Trait) {
          DAST._ITrait _23___mcc_h2 = _source1.dtor_Trait_a0;
          DAST._ITrait _24_t = _23___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out5;
          _out5 = DCOMP.COMP.GenTrait(_24_t, containingPath);
          _18_generated = _out5;
        } else if (_source1.is_Newtype) {
          DAST._INewtype _25___mcc_h3 = _source1.dtor_Newtype_a0;
          DAST._INewtype _26_n = _25___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out6;
          _out6 = DCOMP.COMP.GenNewtype(_26_n);
          _18_generated = _out6;
        } else {
          DAST._IDatatype _27___mcc_h4 = _source1.dtor_Datatype_a0;
          DAST._IDatatype _28_d = _27___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out7;
          _out7 = DCOMP.COMP.GenDatatype(_28_d);
          _18_generated = _out7;
        }
        if ((_17_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _18_generated);
        _17_i = (_17_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _29_tpI;
      _29_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_29_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _30_tp;
          _30_tp = (@params).Select(_29_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_30_tp));
          Dafny.ISequence<Dafny.Rune> _31_genTp;
          Dafny.ISequence<Dafny.Rune> _out8;
          _out8 = DCOMP.COMP.GenType(_30_tp, false, false);
          _31_genTp = _out8;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _31_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _32_baseConstraints;
          _32_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _31_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _31_genTp), _32_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _31_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _31_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _31_genTp), _32_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _31_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _31_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _31_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _29_tpI = (_29_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _33_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _34_typeParams;
      Dafny.ISequence<Dafny.Rune> _35_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _36_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _37_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _38_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _39_erasedParams;
      Dafny.ISet<DAST._IType> _out9;
      Dafny.ISequence<Dafny.Rune> _out10;
      Dafny.ISequence<Dafny.Rune> _out11;
      Dafny.ISequence<Dafny.Rune> _out12;
      Dafny.ISequence<Dafny.Rune> _out13;
      Dafny.ISequence<Dafny.Rune> _out14;
      Dafny.ISequence<Dafny.Rune> _out15;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out9, out _out10, out _out11, out _out12, out _out13, out _out14, out _out15);
      _33_typeParamsSet = _out9;
      _34_typeParams = _out10;
      _35_constrainedTypeParams = _out11;
      _36_whereConstraints = _out12;
      _37_constrainedEraseParams = _out13;
      _38_unerasedParams = _out14;
      _39_erasedParams = _out15;
      Dafny.ISequence<Dafny.Rune> _40_fields;
      _40_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _41_fieldInits;
      _41_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _42_fieldI;
      _42_fieldI = BigInteger.Zero;
      while ((_42_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _43_field;
        _43_field = ((c).dtor_fields).Select(_42_fieldI);
        Dafny.ISequence<Dafny.Rune> _44_fieldType;
        Dafny.ISequence<Dafny.Rune> _out16;
        _out16 = DCOMP.COMP.GenType(((_43_field).dtor_formal).dtor_typ, false, false);
        _44_fieldType = _out16;
        _40_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_40_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), RAST.__default.escapeIdent(((_43_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _44_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source2 = (_43_field).dtor_defaultValue;
        if (_source2.is_Some) {
          DAST._IExpression _45___mcc_h0 = _source2.dtor_Some_a0;
          DAST._IExpression _46_e = _45___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _47_eStr;
            bool _48___v2;
            bool _49___v3;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _50___v4;
            Dafny.ISequence<Dafny.Rune> _out17;
            bool _out18;
            bool _out19;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out20;
            DCOMP.COMP.GenExpr(_46_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out17, out _out18, out _out19, out _out20);
            _47_eStr = _out17;
            _48___v2 = _out18;
            _49___v3 = _out19;
            _50___v4 = _out20;
            _41_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_41_fieldInits, RAST.__default.escapeIdent(((_43_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _47_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _41_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_41_fieldInits, RAST.__default.escapeIdent(((_43_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _42_fieldI = (_42_fieldI) + (BigInteger.One);
      }
      BigInteger _51_typeParamI;
      _51_typeParamI = BigInteger.Zero;
      while ((_51_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _52_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out21;
        _out21 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_51_typeParamI), false, false);
        _52_tpeGen = _out21;
        _40_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_40_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), RAST.__default.natToString(_51_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _52_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _41_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_41_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), RAST.__default.natToString(_51_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _51_typeParamI = (_51_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), RAST.__default.escapeIdent((c).dtor_name)), _34_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _40_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _53_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _54_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out22;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out23;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _33_typeParamsSet, out _out22, out _out23);
      _53_implBody = _out22;
      _54_traitBodies = _out23;
      _53_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), RAST.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _41_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _53_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _35_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), RAST.__default.escapeIdent((c).dtor_name)), _34_typeParams), _36_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _53_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _55_i;
        _55_i = BigInteger.Zero;
        while ((_55_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _56_superClass;
          _56_superClass = ((c).dtor_superClasses).Select(_55_i);
          DAST._IType _source3 = _56_superClass;
          if (_source3.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _57___mcc_h1 = _source3.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _58___mcc_h2 = _source3.dtor_typeArgs;
            DAST._IResolvedType _59___mcc_h3 = _source3.dtor_resolved;
            DAST._IResolvedType _source4 = _59___mcc_h3;
            if (_source4.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _60___mcc_h7 = _source4.dtor_path;
            } else if (_source4.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _61___mcc_h9 = _source4.dtor_path;
              Dafny.ISequence<DAST._IType> _62_typeArgs = _58___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _63_traitPath = _57___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _64_pathStr;
                Dafny.ISequence<Dafny.Rune> _out24;
                _out24 = DCOMP.COMP.GenPath(_63_traitPath);
                _64_pathStr = _out24;
                Dafny.ISequence<Dafny.Rune> _65_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out25;
                _out25 = DCOMP.COMP.GenTypeArgs(_62_typeArgs, false, false);
                _65_typeArgs = _out25;
                Dafny.ISequence<Dafny.Rune> _66_body;
                _66_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_54_traitBodies).Contains(_63_traitPath)) {
                  _66_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_54_traitBodies, _63_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _67_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out26;
                _out26 = DCOMP.COMP.GenPath(path);
                _67_genSelfPath = _out26;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _35_constrainedTypeParams), _64_pathStr), _65_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _67_genSelfPath), _34_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _36_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _66_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _68___mcc_h11 = _source4.dtor_Newtype_a0;
            }
          } else if (_source3.is_Nullable) {
            DAST._IType _69___mcc_h13 = _source3.dtor_Nullable_a0;
          } else if (_source3.is_Tuple) {
            Dafny.ISequence<DAST._IType> _70___mcc_h15 = _source3.dtor_Tuple_a0;
          } else if (_source3.is_Array) {
            DAST._IType _71___mcc_h17 = _source3.dtor_element;
            BigInteger _72___mcc_h18 = _source3.dtor_dims;
          } else if (_source3.is_Seq) {
            DAST._IType _73___mcc_h21 = _source3.dtor_element;
          } else if (_source3.is_Set) {
            DAST._IType _74___mcc_h23 = _source3.dtor_element;
          } else if (_source3.is_Multiset) {
            DAST._IType _75___mcc_h25 = _source3.dtor_element;
          } else if (_source3.is_Map) {
            DAST._IType _76___mcc_h27 = _source3.dtor_key;
            DAST._IType _77___mcc_h28 = _source3.dtor_value;
          } else if (_source3.is_Arrow) {
            Dafny.ISequence<DAST._IType> _78___mcc_h31 = _source3.dtor_args;
            DAST._IType _79___mcc_h32 = _source3.dtor_result;
          } else if (_source3.is_Primitive) {
            DAST._IPrimitive _80___mcc_h35 = _source3.dtor_Primitive_a0;
          } else if (_source3.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _81___mcc_h37 = _source3.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _82___mcc_h39 = _source3.dtor_TypeArg_a0;
          }
          _55_i = (_55_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _83_defaultImpl;
      _83_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _35_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), RAST.__default.escapeIdent((c).dtor_name)), _34_typeParams), _36_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _83_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_83_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _83_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_83_defaultImpl, RAST.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _83_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_83_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _83_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_83_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _84_printImpl;
      _84_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _35_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), RAST.__default.escapeIdent((c).dtor_name)), _34_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _84_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_84_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _85_ptrPartialEqImpl;
      _85_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _34_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), RAST.__default.escapeIdent((c).dtor_name)), _34_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _85_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_85_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _85_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_85_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _85_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_85_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _86_identEraseImpls;
      _86_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _35_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), RAST.__default.escapeIdent((c).dtor_name)), _34_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), RAST.__default.escapeIdent((c).dtor_name)), _39_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _86_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_86_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _37_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), RAST.__default.escapeIdent((c).dtor_name)), _38_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), RAST.__default.escapeIdent((c).dtor_name)), _34_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _83_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _84_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _85_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _86_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _87_typeParamsSet;
      _87_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _88_typeParams;
      _88_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _89_tpI;
      _89_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _88_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_89_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _90_tp;
          _90_tp = ((t).dtor_typeParams).Select(_89_tpI);
          _87_typeParamsSet = Dafny.Set<DAST._IType>.Union(_87_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_90_tp));
          Dafny.ISequence<Dafny.Rune> _91_genTp;
          Dafny.ISequence<Dafny.Rune> _out27;
          _out27 = DCOMP.COMP.GenType(_90_tp, false, false);
          _91_genTp = _out27;
          _88_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_88_typeParams, _91_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _89_tpI = (_89_tpI) + (BigInteger.One);
        }
        _88_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_88_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _92_fullPath;
      _92_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _93_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _94___v7;
      Dafny.ISequence<Dafny.Rune> _out28;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out29;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_92_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_92_fullPath)), _87_typeParamsSet, out _out28, out _out29);
      _93_implBody = _out28;
      _94___v7 = _out29;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), RAST.__default.escapeIdent((t).dtor_name)), _88_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _93_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _95_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _96_typeParams;
      Dafny.ISequence<Dafny.Rune> _97_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _98_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _99___v8;
      Dafny.ISequence<Dafny.Rune> _100___v9;
      Dafny.ISequence<Dafny.Rune> _101___v10;
      Dafny.ISet<DAST._IType> _out30;
      Dafny.ISequence<Dafny.Rune> _out31;
      Dafny.ISequence<Dafny.Rune> _out32;
      Dafny.ISequence<Dafny.Rune> _out33;
      Dafny.ISequence<Dafny.Rune> _out34;
      Dafny.ISequence<Dafny.Rune> _out35;
      Dafny.ISequence<Dafny.Rune> _out36;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out30, out _out31, out _out32, out _out33, out _out34, out _out35, out _out36);
      _95_typeParamsSet = _out30;
      _96_typeParams = _out31;
      _97_constrainedTypeParams = _out32;
      _98_whereConstraints = _out33;
      _99___v8 = _out34;
      _100___v9 = _out35;
      _101___v10 = _out36;
      Dafny.ISequence<Dafny.Rune> _102_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out37;
      _out37 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _102_underlyingType = _out37;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), RAST.__default.escapeIdent((c).dtor_name)), _96_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _102_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _97_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), RAST.__default.escapeIdent((c).dtor_name)), _96_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _102_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _97_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _102_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), RAST.__default.escapeIdent((c).dtor_name)), _96_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _97_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), RAST.__default.escapeIdent((c).dtor_name)), _96_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), RAST.__default.escapeIdent((c).dtor_name)), _96_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _97_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), RAST.__default.escapeIdent((c).dtor_name)), _96_typeParams), _98_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source5 = (c).dtor_witnessExpr;
      if (_source5.is_Some) {
        DAST._IExpression _103___mcc_h0 = _source5.dtor_Some_a0;
        DAST._IExpression _104_e = _103___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _105_eStr;
          bool _106___v11;
          bool _107___v12;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _108___v13;
          Dafny.ISequence<Dafny.Rune> _out38;
          bool _out39;
          bool _out40;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out41;
          DCOMP.COMP.GenExpr(_104_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out38, out _out39, out _out40, out _out41);
          _105_eStr = _out38;
          _106___v11 = _out39;
          _107___v12 = _out40;
          _108___v13 = _out41;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _105_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _97_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), RAST.__default.escapeIdent((c).dtor_name)), _96_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _97_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), RAST.__default.escapeIdent((c).dtor_name)), _96_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _102_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _109_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _110_typeParams;
      Dafny.ISequence<Dafny.Rune> _111_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _112_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _113_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _114_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _115_erasedParams;
      Dafny.ISet<DAST._IType> _out42;
      Dafny.ISequence<Dafny.Rune> _out43;
      Dafny.ISequence<Dafny.Rune> _out44;
      Dafny.ISequence<Dafny.Rune> _out45;
      Dafny.ISequence<Dafny.Rune> _out46;
      Dafny.ISequence<Dafny.Rune> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out42, out _out43, out _out44, out _out45, out _out46, out _out47, out _out48);
      _109_typeParamsSet = _out42;
      _110_typeParams = _out43;
      _111_constrainedTypeParams = _out44;
      _112_whereConstraints = _out45;
      _113_constrainedEraseParams = _out46;
      _114_unerasedParams = _out47;
      _115_erasedParams = _out48;
      Dafny.ISequence<Dafny.Rune> _116_ctors;
      _116_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _117_i;
      _117_i = BigInteger.Zero;
      while ((_117_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _118_ctor;
        _118_ctor = ((c).dtor_ctors).Select(_117_i);
        Dafny.ISequence<Dafny.Rune> _119_ctorBody;
        _119_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.escapeIdent((_118_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _120_j;
        _120_j = BigInteger.Zero;
        while ((_120_j) < (new BigInteger(((_118_ctor).dtor_args).Count))) {
          DAST._IFormal _121_formal;
          _121_formal = ((_118_ctor).dtor_args).Select(_120_j);
          Dafny.ISequence<Dafny.Rune> _122_formalType;
          Dafny.ISequence<Dafny.Rune> _out49;
          _out49 = DCOMP.COMP.GenType((_121_formal).dtor_typ, false, false);
          _122_formalType = _out49;
          if ((c).dtor_isCo) {
            _119_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_119_ctorBody, RAST.__default.escapeIdent((_121_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _122_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _119_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_119_ctorBody, RAST.__default.escapeIdent((_121_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _122_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _120_j = (_120_j) + (BigInteger.One);
        }
        _119_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_119_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _116_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_116_ctors, _119_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _117_i = (_117_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _123_selfPath;
      _123_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _124_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _125_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out50;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out51;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_123_selfPath)), _109_typeParamsSet, out _out50, out _out51);
      _124_implBody = _out50;
      _125_traitBodies = _out51;
      _117_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _126_emittedFields;
      _126_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_117_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _127_ctor;
        _127_ctor = ((c).dtor_ctors).Select(_117_i);
        BigInteger _128_j;
        _128_j = BigInteger.Zero;
        while ((_128_j) < (new BigInteger(((_127_ctor).dtor_args).Count))) {
          DAST._IFormal _129_formal;
          _129_formal = ((_127_ctor).dtor_args).Select(_128_j);
          if (!((_126_emittedFields).Contains((_129_formal).dtor_name))) {
            _126_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_126_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_129_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _130_formalType;
            Dafny.ISequence<Dafny.Rune> _out52;
            _out52 = DCOMP.COMP.GenType((_129_formal).dtor_typ, false, false);
            _130_formalType = _out52;
            Dafny.ISequence<Dafny.Rune> _131_methodBody;
            _131_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _132_k;
            _132_k = BigInteger.Zero;
            while ((_132_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _133_ctor2;
              _133_ctor2 = ((c).dtor_ctors).Select(_132_k);
              Dafny.ISequence<Dafny.Rune> _134_ctorMatch;
              _134_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), RAST.__default.escapeIdent((_133_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _135_l;
              _135_l = BigInteger.Zero;
              bool _136_hasMatchingField;
              _136_hasMatchingField = false;
              while ((_135_l) < (new BigInteger(((_133_ctor2).dtor_args).Count))) {
                DAST._IFormal _137_formal2;
                _137_formal2 = ((_133_ctor2).dtor_args).Select(_135_l);
                if (((_129_formal).dtor_name).Equals((_137_formal2).dtor_name)) {
                  _136_hasMatchingField = true;
                }
                _134_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_134_ctorMatch, RAST.__default.escapeIdent((_137_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _135_l = (_135_l) + (BigInteger.One);
              }
              if (_136_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _134_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_134_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), RAST.__default.escapeIdent((_129_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _134_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_134_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), RAST.__default.escapeIdent((_129_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _134_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_134_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _131_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_131_methodBody, _134_ctorMatch);
              _132_k = (_132_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _131_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_131_methodBody, RAST.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _131_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_131_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _124_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_124_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), RAST.__default.escapeIdent((_129_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _130_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _131_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _128_j = (_128_j) + (BigInteger.One);
        }
        _117_i = (_117_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _116_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_116_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _138_typeI;
        _138_typeI = BigInteger.Zero;
        while ((_138_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_138_typeI).Sign == 1) {
            _116_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_116_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _139_genTp;
          Dafny.ISequence<Dafny.Rune> _out53;
          _out53 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_138_typeI), false, false);
          _139_genTp = _out53;
          _116_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_116_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _139_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _138_typeI = (_138_typeI) + (BigInteger.One);
        }
        _116_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_116_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _140_enumBody;
      _140_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), RAST.__default.escapeIdent((c).dtor_name)), _110_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _116_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _111_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), RAST.__default.escapeIdent((c).dtor_name)), _110_typeParams), _112_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _124_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _141_identEraseImpls;
      _141_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _111_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), RAST.__default.escapeIdent((c).dtor_name)), _110_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), RAST.__default.escapeIdent((c).dtor_name)), _115_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _141_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_141_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _113_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), RAST.__default.escapeIdent((c).dtor_name)), _114_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), RAST.__default.escapeIdent((c).dtor_name)), _110_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _142_printImpl;
      _142_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _111_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), RAST.__default.escapeIdent((c).dtor_name)), _110_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _117_i = BigInteger.Zero;
      while ((_117_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _143_ctor;
        _143_ctor = ((c).dtor_ctors).Select(_117_i);
        Dafny.ISequence<Dafny.Rune> _144_ctorMatch;
        _144_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.escapeIdent((_143_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _145_modulePrefix;
        _145_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _146_printRhs;
        _146_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _145_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_143_ctor).dtor_name), (((_143_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _147_j;
        _147_j = BigInteger.Zero;
        while ((_147_j) < (new BigInteger(((_143_ctor).dtor_args).Count))) {
          DAST._IFormal _148_formal;
          _148_formal = ((_143_ctor).dtor_args).Select(_147_j);
          _144_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_144_ctorMatch, RAST.__default.escapeIdent((_148_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_147_j).Sign == 1) {
            _146_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_146_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _146_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_146_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), RAST.__default.escapeIdent((_148_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _147_j = (_147_j) + (BigInteger.One);
        }
        _144_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_144_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_143_ctor).dtor_hasAnyArgs) {
          _146_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_146_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _146_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_146_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _142_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_142_printImpl, RAST.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _144_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _146_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _117_i = (_117_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _142_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_142_printImpl, RAST.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _142_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_142_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _149_defaultImpl;
      _149_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _149_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _111_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), RAST.__default.escapeIdent((c).dtor_name)), _110_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), RAST.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), RAST.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _117_i = BigInteger.Zero;
        while ((_117_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _150_formal;
          _150_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_117_i);
          _149_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_149_defaultImpl, RAST.__default.escapeIdent((_150_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _117_i = (_117_i) + (BigInteger.One);
        }
        _149_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_149_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_140_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _141_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _142_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _149_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _151_i;
        _151_i = BigInteger.Zero;
        while ((_151_i) < (new BigInteger((p).Count))) {
          if ((_151_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.escapeIdent(((p).Select(_151_i))));
          _151_i = (_151_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _152_i;
        _152_i = BigInteger.Zero;
        while ((_152_i) < (new BigInteger((args).Count))) {
          if ((_152_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _153_genTp;
          Dafny.ISequence<Dafny.Rune> _out54;
          _out54 = DCOMP.COMP.GenType((args).Select(_152_i), inBinding, inFn);
          _153_genTp = _out54;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _153_genTp);
          _152_i = (_152_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source6 = c;
      if (_source6.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _154___mcc_h0 = _source6.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _155___mcc_h1 = _source6.dtor_typeArgs;
        DAST._IResolvedType _156___mcc_h2 = _source6.dtor_resolved;
        DAST._IResolvedType _157_resolved = _156___mcc_h2;
        Dafny.ISequence<DAST._IType> _158_args = _155___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _159_p = _154___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out55;
          _out55 = DCOMP.COMP.GenPath(_159_p);
          s = _out55;
          Dafny.ISequence<Dafny.Rune> _160_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out56;
          _out56 = DCOMP.COMP.GenTypeArgs(_158_args, inBinding, inFn);
          _160_typeArgs = _out56;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _160_typeArgs);
          DAST._IResolvedType _source7 = _157_resolved;
          if (_source7.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _161___mcc_h18 = _source7.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source7.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _162___mcc_h20 = _source7.dtor_path;
            {
              if ((_159_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _163___mcc_h22 = _source7.dtor_Newtype_a0;
            DAST._IResolvedType _164_Primitive = _157_resolved;
          }
        }
      } else if (_source6.is_Nullable) {
        DAST._IType _165___mcc_h3 = _source6.dtor_Nullable_a0;
        DAST._IType _166_inner = _165___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _167_innerStr;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenType(_166_inner, inBinding, inFn);
          _167_innerStr = _out57;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _167_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source6.is_Tuple) {
        Dafny.ISequence<DAST._IType> _168___mcc_h4 = _source6.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _169_types = _168___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _170_i;
          _170_i = BigInteger.Zero;
          while ((_170_i) < (new BigInteger((_169_types).Count))) {
            if ((_170_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _171_generated;
            Dafny.ISequence<Dafny.Rune> _out58;
            _out58 = DCOMP.COMP.GenType((_169_types).Select(_170_i), inBinding, inFn);
            _171_generated = _out58;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _171_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _170_i = (_170_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source6.is_Array) {
        DAST._IType _172___mcc_h5 = _source6.dtor_element;
        BigInteger _173___mcc_h6 = _source6.dtor_dims;
        BigInteger _174_dims = _173___mcc_h6;
        DAST._IType _175_element = _172___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _176_elemStr;
          Dafny.ISequence<Dafny.Rune> _out59;
          _out59 = DCOMP.COMP.GenType(_175_element, inBinding, inFn);
          _176_elemStr = _out59;
          s = _176_elemStr;
          BigInteger _177_i;
          _177_i = BigInteger.Zero;
          while ((_177_i) < (_174_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _177_i = (_177_i) + (BigInteger.One);
          }
        }
      } else if (_source6.is_Seq) {
        DAST._IType _178___mcc_h7 = _source6.dtor_element;
        DAST._IType _179_element = _178___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _180_elemStr;
          Dafny.ISequence<Dafny.Rune> _out60;
          _out60 = DCOMP.COMP.GenType(_179_element, inBinding, inFn);
          _180_elemStr = _out60;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _180_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source6.is_Set) {
        DAST._IType _181___mcc_h8 = _source6.dtor_element;
        DAST._IType _182_element = _181___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _183_elemStr;
          Dafny.ISequence<Dafny.Rune> _out61;
          _out61 = DCOMP.COMP.GenType(_182_element, inBinding, inFn);
          _183_elemStr = _out61;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _183_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source6.is_Multiset) {
        DAST._IType _184___mcc_h9 = _source6.dtor_element;
        DAST._IType _185_element = _184___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _186_elemStr;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType(_185_element, inBinding, inFn);
          _186_elemStr = _out62;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _186_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source6.is_Map) {
        DAST._IType _187___mcc_h10 = _source6.dtor_key;
        DAST._IType _188___mcc_h11 = _source6.dtor_value;
        DAST._IType _189_value = _188___mcc_h11;
        DAST._IType _190_key = _187___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _191_keyStr;
          Dafny.ISequence<Dafny.Rune> _out63;
          _out63 = DCOMP.COMP.GenType(_190_key, inBinding, inFn);
          _191_keyStr = _out63;
          Dafny.ISequence<Dafny.Rune> _192_valueStr;
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenType(_189_value, inBinding, inFn);
          _192_valueStr = _out64;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _191_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _192_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source6.is_Arrow) {
        Dafny.ISequence<DAST._IType> _193___mcc_h12 = _source6.dtor_args;
        DAST._IType _194___mcc_h13 = _source6.dtor_result;
        DAST._IType _195_result = _194___mcc_h13;
        Dafny.ISequence<DAST._IType> _196_args = _193___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _197_i;
          _197_i = BigInteger.Zero;
          while ((_197_i) < (new BigInteger((_196_args).Count))) {
            if ((_197_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _198_generated;
            Dafny.ISequence<Dafny.Rune> _out65;
            _out65 = DCOMP.COMP.GenType((_196_args).Select(_197_i), inBinding, true);
            _198_generated = _out65;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _198_generated);
            _197_i = (_197_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _199_resultType;
          Dafny.ISequence<Dafny.Rune> _out66;
          _out66 = DCOMP.COMP.GenType(_195_result, inBinding, (inFn) || (inBinding));
          _199_resultType = _out66;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _199_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source6.is_Primitive) {
        DAST._IPrimitive _200___mcc_h14 = _source6.dtor_Primitive_a0;
        DAST._IPrimitive _201_p = _200___mcc_h14;
        {
          DAST._IPrimitive _source8 = _201_p;
          if (_source8.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source8.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source8.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source8.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source6.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _202___mcc_h15 = _source6.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _203_v = _202___mcc_h15;
        s = _203_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _204___mcc_h16 = _source6.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source9 = _204___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _205___mcc_h17 = _source9;
        Dafny.ISequence<Dafny.Rune> _206_name = _205___mcc_h17;
        s = RAST.__default.escapeIdent(_206_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _207_i;
      _207_i = BigInteger.Zero;
      while ((_207_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source10 = (body).Select(_207_i);
        DAST._IMethod _208___mcc_h0 = _source10;
        DAST._IMethod _209_m = _208___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source11 = (_209_m).dtor_overridingPath;
          if (_source11.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _210___mcc_h1 = _source11.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _211_p = _210___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _212_existing;
              _212_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_211_p)) {
                _212_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _211_p);
              }
              if ((new BigInteger((_212_existing).Count)).Sign == 1) {
                _212_existing = Dafny.Sequence<Dafny.Rune>.Concat(_212_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _213_genMethod;
              Dafny.ISequence<Dafny.Rune> _out67;
              _out67 = DCOMP.COMP.GenMethod(_209_m, true, enclosingType, enclosingTypeParams);
              _213_genMethod = _out67;
              _212_existing = Dafny.Sequence<Dafny.Rune>.Concat(_212_existing, _213_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_211_p, _212_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _214_generated;
              Dafny.ISequence<Dafny.Rune> _out68;
              _out68 = DCOMP.COMP.GenMethod(_209_m, forTrait, enclosingType, enclosingTypeParams);
              _214_generated = _out68;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _214_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _207_i = (_207_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _215_i;
      _215_i = BigInteger.Zero;
      while ((_215_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _216_param;
        _216_param = (@params).Select(_215_i);
        Dafny.ISequence<Dafny.Rune> _217_paramType;
        Dafny.ISequence<Dafny.Rune> _out69;
        _out69 = DCOMP.COMP.GenType((_216_param).dtor_typ, false, false);
        _217_paramType = _out69;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.escapeIdent((_216_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _217_paramType);
        if ((_215_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _215_i = (_215_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _218_params;
      Dafny.ISequence<Dafny.Rune> _out70;
      _out70 = DCOMP.COMP.GenParams((m).dtor_params);
      _218_params = _out70;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _219_paramNames;
      _219_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _220_paramI;
      _220_paramI = BigInteger.Zero;
      while ((_220_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _219_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_219_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_220_paramI)).dtor_name));
        _220_paramI = (_220_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _218_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _218_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _221_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out71;
          _out71 = DCOMP.COMP.GenType(enclosingType, false, false);
          _221_enclosingTypeString = _out71;
          _218_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _221_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _218_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _222_retType;
      _222_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _223_typeI;
      _223_typeI = BigInteger.Zero;
      while ((_223_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_223_typeI).Sign == 1) {
          _222_retType = Dafny.Sequence<Dafny.Rune>.Concat(_222_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _224_typeString;
        Dafny.ISequence<Dafny.Rune> _out72;
        _out72 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_223_typeI), false, false);
        _224_typeString = _out72;
        _222_retType = Dafny.Sequence<Dafny.Rune>.Concat(_222_retType, _224_typeString);
        _223_typeI = (_223_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _222_retType = Dafny.Sequence<Dafny.Rune>.Concat(_222_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), RAST.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), RAST.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _225_typeParamsFiltered;
      _225_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _226_typeParamI;
      _226_typeParamI = BigInteger.Zero;
      while ((_226_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _227_typeParam;
        _227_typeParam = ((m).dtor_typeParams).Select(_226_typeParamI);
        if (!((enclosingTypeParams).Contains(_227_typeParam))) {
          _225_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_225_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_227_typeParam));
        }
        _226_typeParamI = (_226_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _228_whereClauses;
      _228_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_225_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _228_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_228_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _229_i;
        _229_i = BigInteger.Zero;
        while ((_229_i) < (new BigInteger((_225_typeParamsFiltered).Count))) {
          if ((_229_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _228_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_228_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _230_typeString;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenType((_225_typeParamsFiltered).Select(_229_i), false, false);
          _230_typeString = _out73;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _230_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _230_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _228_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_228_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _230_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _229_i = (_229_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _218_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _222_retType), _228_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _231_earlyReturn;
        _231_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source12 = (m).dtor_outVars;
        if (_source12.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _232___mcc_h0 = _source12.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _233_outVars = _232___mcc_h0;
          {
            _231_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _234_outI;
            _234_outI = BigInteger.Zero;
            while ((_234_outI) < (new BigInteger((_233_outVars).Count))) {
              if ((_234_outI).Sign == 1) {
                _231_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_231_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _235_outVar;
              _235_outVar = (_233_outVars).Select(_234_outI);
              _231_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_231_earlyReturn, RAST.__default.escapeIdent((_235_outVar)));
              _234_outI = (_234_outI) + (BigInteger.One);
            }
            _231_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_231_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _236_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _237___v16;
        Dafny.ISequence<Dafny.Rune> _out74;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out75;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _219_paramNames, true, _231_earlyReturn, out _out74, out _out75);
        _236_body = _out74;
        _237___v16 = _out75;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _236_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _238_declarations;
      _238_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _239_i;
      _239_i = BigInteger.Zero;
      while ((_239_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _240_stmt;
        _240_stmt = (stmts).Select(_239_i);
        Dafny.ISequence<Dafny.Rune> _241_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _242_recIdents;
        Dafny.ISequence<Dafny.Rune> _out76;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out77;
        DCOMP.COMP.GenStmt(_240_stmt, selfIdent, @params, (isLast) && ((_239_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out76, out _out77);
        _241_stmtString = _out76;
        _242_recIdents = _out77;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_242_recIdents, _238_declarations));
        DAST._IStatement _source13 = _240_stmt;
        if (_source13.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _243___mcc_h0 = _source13.dtor_name;
          DAST._IType _244___mcc_h1 = _source13.dtor_typ;
          DAST._IOptional<DAST._IExpression> _245___mcc_h2 = _source13.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _246_name = _243___mcc_h0;
          {
            _238_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_238_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_246_name));
          }
        } else if (_source13.is_Assign) {
          DAST._IAssignLhs _247___mcc_h6 = _source13.dtor_lhs;
          DAST._IExpression _248___mcc_h7 = _source13.dtor_value;
        } else if (_source13.is_If) {
          DAST._IExpression _249___mcc_h10 = _source13.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _250___mcc_h11 = _source13.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _251___mcc_h12 = _source13.dtor_els;
        } else if (_source13.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _252___mcc_h16 = _source13.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _253___mcc_h17 = _source13.dtor_body;
        } else if (_source13.is_While) {
          DAST._IExpression _254___mcc_h20 = _source13.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _255___mcc_h21 = _source13.dtor_body;
        } else if (_source13.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _256___mcc_h24 = _source13.dtor_boundName;
          DAST._IType _257___mcc_h25 = _source13.dtor_boundType;
          DAST._IExpression _258___mcc_h26 = _source13.dtor_over;
          Dafny.ISequence<DAST._IStatement> _259___mcc_h27 = _source13.dtor_body;
        } else if (_source13.is_Call) {
          DAST._IExpression _260___mcc_h32 = _source13.dtor_on;
          Dafny.ISequence<Dafny.Rune> _261___mcc_h33 = _source13.dtor_name;
          Dafny.ISequence<DAST._IType> _262___mcc_h34 = _source13.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _263___mcc_h35 = _source13.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _264___mcc_h36 = _source13.dtor_outs;
        } else if (_source13.is_Return) {
          DAST._IExpression _265___mcc_h42 = _source13.dtor_expr;
        } else if (_source13.is_EarlyReturn) {
        } else if (_source13.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _266___mcc_h44 = _source13.dtor_toLabel;
        } else if (_source13.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _267___mcc_h46 = _source13.dtor_body;
        } else if (_source13.is_JumpTailCallStart) {
        } else if (_source13.is_Halt) {
        } else {
          DAST._IExpression _268___mcc_h48 = _source13.dtor_Print_a0;
        }
        if ((_239_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _241_stmtString);
        _239_i = (_239_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source14 = lhs;
      if (_source14.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _269___mcc_h0 = _source14.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source15 = _269___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _270___mcc_h1 = _source15;
        Dafny.ISequence<Dafny.Rune> _271_id = _270___mcc_h1;
        {
          if ((@params).Contains(_271_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), RAST.__default.escapeIdent(_271_id));
          } else {
            generated = RAST.__default.escapeIdent(_271_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_271_id);
          needsIIFE = false;
        }
      } else if (_source14.is_Select) {
        DAST._IExpression _272___mcc_h2 = _source14.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _273___mcc_h3 = _source14.dtor_field;
        Dafny.ISequence<Dafny.Rune> _274_field = _273___mcc_h3;
        DAST._IExpression _275_on = _272___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _276_onExpr;
          bool _277_onOwned;
          bool _278_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _279_recIdents;
          Dafny.ISequence<Dafny.Rune> _out78;
          bool _out79;
          bool _out80;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out81;
          DCOMP.COMP.GenExpr(_275_on, selfIdent, @params, false, out _out78, out _out79, out _out80, out _out81);
          _276_onExpr = _out78;
          _277_onOwned = _out79;
          _278_onErased = _out80;
          _279_recIdents = _out81;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _276_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _274_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _279_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _280___mcc_h4 = _source14.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _281___mcc_h5 = _source14.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _282_indices = _281___mcc_h5;
        DAST._IExpression _283_on = _280___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _284_onExpr;
          bool _285_onOwned;
          bool _286_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _287_recIdents;
          Dafny.ISequence<Dafny.Rune> _out82;
          bool _out83;
          bool _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_283_on, selfIdent, @params, false, out _out82, out _out83, out _out84, out _out85);
          _284_onExpr = _out82;
          _285_onOwned = _out83;
          _286_onErased = _out84;
          _287_recIdents = _out85;
          readIdents = _287_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _288_i;
          _288_i = BigInteger.Zero;
          while ((_288_i) < (new BigInteger((_282_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _289_idx;
            bool _290___v20;
            bool _291_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _292_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out86;
            bool _out87;
            bool _out88;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out89;
            DCOMP.COMP.GenExpr((_282_indices).Select(_288_i), selfIdent, @params, true, out _out86, out _out87, out _out88, out _out89);
            _289_idx = _out86;
            _290___v20 = _out87;
            _291_idxErased = _out88;
            _292_recIdentsIdx = _out89;
            if (!(_291_idxErased)) {
              _289_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _289_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), RAST.__default.natToString(_288_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _289_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _292_recIdentsIdx);
            _288_i = (_288_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _284_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _288_i = BigInteger.Zero;
          while ((_288_i) < (new BigInteger((_282_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), RAST.__default.natToString(_288_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _288_i = (_288_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source16 = stmt;
      if (_source16.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _293___mcc_h0 = _source16.dtor_name;
        DAST._IType _294___mcc_h1 = _source16.dtor_typ;
        DAST._IOptional<DAST._IExpression> _295___mcc_h2 = _source16.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source17 = _295___mcc_h2;
        if (_source17.is_Some) {
          DAST._IExpression _296___mcc_h3 = _source17.dtor_Some_a0;
          DAST._IExpression _297_expression = _296___mcc_h3;
          DAST._IType _298_typ = _294___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _299_name = _293___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _300_typeString;
            Dafny.ISequence<Dafny.Rune> _out90;
            _out90 = DCOMP.COMP.GenType(_298_typ, true, false);
            _300_typeString = _out90;
            Dafny.ISequence<Dafny.Rune> _301_expr;
            bool _302___v21;
            bool _303_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _304_recIdents;
            Dafny.ISequence<Dafny.Rune> _out91;
            bool _out92;
            bool _out93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
            DCOMP.COMP.GenExpr(_297_expression, selfIdent, @params, true, out _out91, out _out92, out _out93, out _out94);
            _301_expr = _out91;
            _302___v21 = _out92;
            _303_recErased = _out93;
            _304_recIdents = _out94;
            if (!(_303_recErased)) {
              _301_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _301_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _301_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _300_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _301_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), RAST.__default.escapeIdent(_299_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _300_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _301_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _304_recIdents;
          }
        } else {
          DAST._IType _305_typ = _294___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _306_name = _293___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _307_typeString;
            Dafny.ISequence<Dafny.Rune> _out95;
            _out95 = DCOMP.COMP.GenType(_305_typ, true, false);
            _307_typeString = _out95;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), RAST.__default.escapeIdent(_306_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _307_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source16.is_Assign) {
        DAST._IAssignLhs _308___mcc_h4 = _source16.dtor_lhs;
        DAST._IExpression _309___mcc_h5 = _source16.dtor_value;
        DAST._IExpression _310_expression = _309___mcc_h5;
        DAST._IAssignLhs _311_lhs = _308___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _312_lhsGen;
          bool _313_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _314_recIdents;
          Dafny.ISequence<Dafny.Rune> _out96;
          bool _out97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
          DCOMP.COMP.GenAssignLhs(_311_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out96, out _out97, out _out98);
          _312_lhsGen = _out96;
          _313_needsIIFE = _out97;
          _314_recIdents = _out98;
          Dafny.ISequence<Dafny.Rune> _315_exprGen;
          bool _316___v22;
          bool _317_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _318_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out99;
          bool _out100;
          bool _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_310_expression, selfIdent, @params, true, out _out99, out _out100, out _out101, out _out102);
          _315_exprGen = _out99;
          _316___v22 = _out100;
          _317_exprErased = _out101;
          _318_exprIdents = _out102;
          if (!(_317_exprErased)) {
            _315_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _315_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _315_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _315_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_313_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _315_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _312_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_312_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _315_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_314_recIdents, _318_exprIdents);
        }
      } else if (_source16.is_If) {
        DAST._IExpression _319___mcc_h6 = _source16.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _320___mcc_h7 = _source16.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _321___mcc_h8 = _source16.dtor_els;
        Dafny.ISequence<DAST._IStatement> _322_els = _321___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _323_thn = _320___mcc_h7;
        DAST._IExpression _324_cond = _319___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _325_condString;
          bool _326___v23;
          bool _327_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _328_recIdents;
          Dafny.ISequence<Dafny.Rune> _out103;
          bool _out104;
          bool _out105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out106;
          DCOMP.COMP.GenExpr(_324_cond, selfIdent, @params, true, out _out103, out _out104, out _out105, out _out106);
          _325_condString = _out103;
          _326___v23 = _out104;
          _327_condErased = _out105;
          _328_recIdents = _out106;
          if (!(_327_condErased)) {
            _325_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _325_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _328_recIdents;
          Dafny.ISequence<Dafny.Rune> _329_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _330_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
          DCOMP.COMP.GenStmts(_323_thn, selfIdent, @params, isLast, earlyReturn, out _out107, out _out108);
          _329_thnString = _out107;
          _330_thnIdents = _out108;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _330_thnIdents);
          Dafny.ISequence<Dafny.Rune> _331_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _332_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out110;
          DCOMP.COMP.GenStmts(_322_els, selfIdent, @params, isLast, earlyReturn, out _out109, out _out110);
          _331_elsString = _out109;
          _332_elsIdents = _out110;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _332_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _325_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _329_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _331_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _333___mcc_h9 = _source16.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _334___mcc_h10 = _source16.dtor_body;
        Dafny.ISequence<DAST._IStatement> _335_body = _334___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _336_lbl = _333___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _337_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _338_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out111;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out112;
          DCOMP.COMP.GenStmts(_335_body, selfIdent, @params, isLast, earlyReturn, out _out111, out _out112);
          _337_bodyString = _out111;
          _338_bodyIdents = _out112;
          readIdents = _338_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _336_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _337_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_While) {
        DAST._IExpression _339___mcc_h11 = _source16.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _340___mcc_h12 = _source16.dtor_body;
        Dafny.ISequence<DAST._IStatement> _341_body = _340___mcc_h12;
        DAST._IExpression _342_cond = _339___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _343_condString;
          bool _344___v24;
          bool _345_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _346_recIdents;
          Dafny.ISequence<Dafny.Rune> _out113;
          bool _out114;
          bool _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenExpr(_342_cond, selfIdent, @params, true, out _out113, out _out114, out _out115, out _out116);
          _343_condString = _out113;
          _344___v24 = _out114;
          _345_condErased = _out115;
          _346_recIdents = _out116;
          if (!(_345_condErased)) {
            _343_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _343_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _346_recIdents;
          Dafny.ISequence<Dafny.Rune> _347_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _348_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out118;
          DCOMP.COMP.GenStmts(_341_body, selfIdent, @params, false, earlyReturn, out _out117, out _out118);
          _347_bodyString = _out117;
          _348_bodyIdents = _out118;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _348_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _343_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _347_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _349___mcc_h13 = _source16.dtor_boundName;
        DAST._IType _350___mcc_h14 = _source16.dtor_boundType;
        DAST._IExpression _351___mcc_h15 = _source16.dtor_over;
        Dafny.ISequence<DAST._IStatement> _352___mcc_h16 = _source16.dtor_body;
        Dafny.ISequence<DAST._IStatement> _353_body = _352___mcc_h16;
        DAST._IExpression _354_over = _351___mcc_h15;
        DAST._IType _355_boundType = _350___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _356_boundName = _349___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _357_overString;
          bool _358___v25;
          bool _359_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _360_recIdents;
          Dafny.ISequence<Dafny.Rune> _out119;
          bool _out120;
          bool _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenExpr(_354_over, selfIdent, @params, true, out _out119, out _out120, out _out121, out _out122);
          _357_overString = _out119;
          _358___v25 = _out120;
          _359_overErased = _out121;
          _360_recIdents = _out122;
          Dafny.ISequence<Dafny.Rune> _361_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out123;
          _out123 = DCOMP.COMP.GenType(_355_boundType, false, false);
          _361_boundTypeStr = _out123;
          readIdents = _360_recIdents;
          Dafny.ISequence<Dafny.Rune> _362_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _363_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenStmts(_353_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_356_boundName)), false, earlyReturn, out _out124, out _out125);
          _362_bodyString = _out124;
          _363_bodyIdents = _out125;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _363_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_356_boundName));
          Dafny.ISequence<Dafny.Rune> _364_unerasedIter;
          _364_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_359_overErased) {
            _364_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _361_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _364_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _357_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), RAST.__default.escapeIdent(_356_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _364_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _362_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_Call) {
        DAST._IExpression _365___mcc_h17 = _source16.dtor_on;
        Dafny.ISequence<Dafny.Rune> _366___mcc_h18 = _source16.dtor_name;
        Dafny.ISequence<DAST._IType> _367___mcc_h19 = _source16.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _368___mcc_h20 = _source16.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _369___mcc_h21 = _source16.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _370_maybeOutVars = _369___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _371_args = _368___mcc_h20;
        Dafny.ISequence<DAST._IType> _372_typeArgs = _367___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _373_name = _366___mcc_h18;
        DAST._IExpression _374_on = _365___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _375_typeArgString;
          _375_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_372_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _376_typeI;
            _376_typeI = BigInteger.Zero;
            _375_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_376_typeI) < (new BigInteger((_372_typeArgs).Count))) {
              if ((_376_typeI).Sign == 1) {
                _375_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_375_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _377_typeString;
              Dafny.ISequence<Dafny.Rune> _out126;
              _out126 = DCOMP.COMP.GenType((_372_typeArgs).Select(_376_typeI), false, false);
              _377_typeString = _out126;
              _375_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_375_typeArgString, _377_typeString);
              _376_typeI = (_376_typeI) + (BigInteger.One);
            }
            _375_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_375_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _378_argString;
          _378_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _379_i;
          _379_i = BigInteger.Zero;
          while ((_379_i) < (new BigInteger((_371_args).Count))) {
            if ((_379_i).Sign == 1) {
              _378_argString = Dafny.Sequence<Dafny.Rune>.Concat(_378_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _380_argExpr;
            bool _381_isOwned;
            bool _382_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _383_argIdents;
            Dafny.ISequence<Dafny.Rune> _out127;
            bool _out128;
            bool _out129;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out130;
            DCOMP.COMP.GenExpr((_371_args).Select(_379_i), selfIdent, @params, false, out _out127, out _out128, out _out129, out _out130);
            _380_argExpr = _out127;
            _381_isOwned = _out128;
            _382_argErased = _out129;
            _383_argIdents = _out130;
            if (_381_isOwned) {
              _380_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _380_argExpr);
            }
            _378_argString = Dafny.Sequence<Dafny.Rune>.Concat(_378_argString, _380_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _383_argIdents);
            _379_i = (_379_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _384_enclosingString;
          bool _385___v26;
          bool _386___v27;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _387_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out131;
          bool _out132;
          bool _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenExpr(_374_on, selfIdent, @params, false, out _out131, out _out132, out _out133, out _out134);
          _384_enclosingString = _out131;
          _385___v26 = _out132;
          _386___v27 = _out133;
          _387_enclosingIdents = _out134;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _387_enclosingIdents);
          DAST._IExpression _source18 = _374_on;
          if (_source18.is_Literal) {
            DAST._ILiteral _388___mcc_h26 = _source18.dtor_Literal_a0;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _389___mcc_h28 = _source18.dtor_Ident_a0;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _390___mcc_h30 = _source18.dtor_Companion_a0;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_384_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source18.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _391___mcc_h32 = _source18.dtor_Tuple_a0;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _392___mcc_h34 = _source18.dtor_path;
            Dafny.ISequence<DAST._IType> _393___mcc_h35 = _source18.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _394___mcc_h36 = _source18.dtor_args;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _395___mcc_h40 = _source18.dtor_dims;
            DAST._IType _396___mcc_h41 = _source18.dtor_typ;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _397___mcc_h44 = _source18.dtor_path;
            Dafny.ISequence<DAST._IType> _398___mcc_h45 = _source18.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _399___mcc_h46 = _source18.dtor_variant;
            bool _400___mcc_h47 = _source18.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _401___mcc_h48 = _source18.dtor_contents;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Convert) {
            DAST._IExpression _402___mcc_h54 = _source18.dtor_value;
            DAST._IType _403___mcc_h55 = _source18.dtor_from;
            DAST._IType _404___mcc_h56 = _source18.dtor_typ;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SeqConstruct) {
            DAST._IExpression _405___mcc_h60 = _source18.dtor_length;
            DAST._IExpression _406___mcc_h61 = _source18.dtor_elem;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _407___mcc_h64 = _source18.dtor_elements;
            DAST._IType _408___mcc_h65 = _source18.dtor_typ;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _409___mcc_h68 = _source18.dtor_elements;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _410___mcc_h70 = _source18.dtor_mapElems;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_This) {
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Ite) {
            DAST._IExpression _411___mcc_h72 = _source18.dtor_cond;
            DAST._IExpression _412___mcc_h73 = _source18.dtor_thn;
            DAST._IExpression _413___mcc_h74 = _source18.dtor_els;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_UnOp) {
            DAST._IUnaryOp _414___mcc_h78 = _source18.dtor_unOp;
            DAST._IExpression _415___mcc_h79 = _source18.dtor_expr;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_BinOp) {
            DAST._IBinOp _416___mcc_h82 = _source18.dtor_op;
            DAST._IExpression _417___mcc_h83 = _source18.dtor_left;
            DAST._IExpression _418___mcc_h84 = _source18.dtor_right;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_ArrayLen) {
            DAST._IExpression _419___mcc_h88 = _source18.dtor_expr;
            BigInteger _420___mcc_h89 = _source18.dtor_dim;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Select) {
            DAST._IExpression _421___mcc_h92 = _source18.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _422___mcc_h93 = _source18.dtor_field;
            bool _423___mcc_h94 = _source18.dtor_isConstant;
            bool _424___mcc_h95 = _source18.dtor_onDatatype;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SelectFn) {
            DAST._IExpression _425___mcc_h100 = _source18.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _426___mcc_h101 = _source18.dtor_field;
            bool _427___mcc_h102 = _source18.dtor_onDatatype;
            bool _428___mcc_h103 = _source18.dtor_isStatic;
            BigInteger _429___mcc_h104 = _source18.dtor_arity;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Index) {
            DAST._IExpression _430___mcc_h110 = _source18.dtor_expr;
            DAST._ICollKind _431___mcc_h111 = _source18.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _432___mcc_h112 = _source18.dtor_indices;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_IndexRange) {
            DAST._IExpression _433___mcc_h116 = _source18.dtor_expr;
            bool _434___mcc_h117 = _source18.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _435___mcc_h118 = _source18.dtor_low;
            DAST._IOptional<DAST._IExpression> _436___mcc_h119 = _source18.dtor_high;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_TupleSelect) {
            DAST._IExpression _437___mcc_h124 = _source18.dtor_expr;
            BigInteger _438___mcc_h125 = _source18.dtor_index;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Call) {
            DAST._IExpression _439___mcc_h128 = _source18.dtor_on;
            Dafny.ISequence<Dafny.Rune> _440___mcc_h129 = _source18.dtor_name;
            Dafny.ISequence<DAST._IType> _441___mcc_h130 = _source18.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _442___mcc_h131 = _source18.dtor_args;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _443___mcc_h136 = _source18.dtor_params;
            DAST._IType _444___mcc_h137 = _source18.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _445___mcc_h138 = _source18.dtor_body;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _446___mcc_h142 = _source18.dtor_values;
            DAST._IType _447___mcc_h143 = _source18.dtor_retType;
            DAST._IExpression _448___mcc_h144 = _source18.dtor_expr;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _449___mcc_h148 = _source18.dtor_name;
            DAST._IType _450___mcc_h149 = _source18.dtor_typ;
            DAST._IExpression _451___mcc_h150 = _source18.dtor_value;
            DAST._IExpression _452___mcc_h151 = _source18.dtor_iifeBody;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Apply) {
            DAST._IExpression _453___mcc_h156 = _source18.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _454___mcc_h157 = _source18.dtor_args;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_TypeTest) {
            DAST._IExpression _455___mcc_h160 = _source18.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _456___mcc_h161 = _source18.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _457___mcc_h162 = _source18.dtor_variant;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_InitializationValue) {
            DAST._IType _458___mcc_h166 = _source18.dtor_typ;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_BoolBoundedPool) {
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SetBoundedPool) {
            DAST._IExpression _459___mcc_h168 = _source18.dtor_of;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SeqBoundedPool) {
            DAST._IExpression _460___mcc_h170 = _source18.dtor_of;
            bool _461___mcc_h171 = _source18.dtor_includeDuplicates;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _462___mcc_h174 = _source18.dtor_lo;
            DAST._IExpression _463___mcc_h175 = _source18.dtor_hi;
            {
              _384_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _384_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _464_receiver;
          _464_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source19 = _370_maybeOutVars;
          if (_source19.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _465___mcc_h178 = _source19.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _466_outVars = _465___mcc_h178;
            {
              if ((new BigInteger((_466_outVars).Count)) > (BigInteger.One)) {
                _464_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _467_outI;
              _467_outI = BigInteger.Zero;
              while ((_467_outI) < (new BigInteger((_466_outVars).Count))) {
                if ((_467_outI).Sign == 1) {
                  _464_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_464_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _468_outVar;
                _468_outVar = (_466_outVars).Select(_467_outI);
                _464_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_464_receiver, (_468_outVar));
                _467_outI = (_467_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_466_outVars).Count)) > (BigInteger.One)) {
                _464_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_464_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_464_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_464_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _384_enclosingString), RAST.__default.escapeIdent(_373_name)), _375_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _378_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source16.is_Return) {
        DAST._IExpression _469___mcc_h22 = _source16.dtor_expr;
        DAST._IExpression _470_expr = _469___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _471_exprString;
          bool _472___v30;
          bool _473_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _474_recIdents;
          Dafny.ISequence<Dafny.Rune> _out135;
          bool _out136;
          bool _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenExpr(_470_expr, selfIdent, @params, true, out _out135, out _out136, out _out137, out _out138);
          _471_exprString = _out135;
          _472___v30 = _out136;
          _473_recErased = _out137;
          _474_recIdents = _out138;
          _471_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _471_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _474_recIdents;
          if (isLast) {
            generated = _471_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _471_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source16.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source16.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _475___mcc_h23 = _source16.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _476_toLabel = _475___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source20 = _476_toLabel;
          if (_source20.is_Some) {
            Dafny.ISequence<Dafny.Rune> _477___mcc_h179 = _source20.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _478_lbl = _477___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _478_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source16.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _479___mcc_h24 = _source16.dtor_body;
        Dafny.ISequence<DAST._IStatement> _480_body = _479___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _481_paramI;
          _481_paramI = BigInteger.Zero;
          while ((_481_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _482_param;
            _482_param = (@params).Select(_481_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), RAST.__default.escapeIdent(_482_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), RAST.__default.escapeIdent(_482_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _481_paramI = (_481_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _483_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _484_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out139;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out140;
          DCOMP.COMP.GenStmts(_480_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out139, out _out140);
          _483_bodyString = _out139;
          _484_bodyIdents = _out140;
          readIdents = _484_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _483_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source16.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _485___mcc_h25 = _source16.dtor_Print_a0;
        DAST._IExpression _486_e = _485___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _487_printedExpr;
          bool _488_isOwned;
          bool _489___v31;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _490_recIdents;
          Dafny.ISequence<Dafny.Rune> _out141;
          bool _out142;
          bool _out143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
          DCOMP.COMP.GenExpr(_486_e, selfIdent, @params, false, out _out141, out _out142, out _out143, out _out144);
          _487_printedExpr = _out141;
          _488_isOwned = _out142;
          _489___v31 = _out143;
          _490_recIdents = _out144;
          if (_488_isOwned) {
            _487_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _487_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _487_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _490_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source21 = e;
      if (_source21.is_Literal) {
        DAST._ILiteral _491___mcc_h0 = _source21.dtor_Literal_a0;
        DAST._ILiteral _source22 = _491___mcc_h0;
        if (_source22.is_BoolLiteral) {
          bool _492___mcc_h1 = _source22.dtor_BoolLiteral_a0;
          if ((_492___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source22.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _493___mcc_h2 = _source22.dtor_IntLiteral_a0;
          DAST._IType _494___mcc_h3 = _source22.dtor_IntLiteral_a1;
          DAST._IType _495_t = _494___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _496_i = _493___mcc_h2;
          {
            DAST._IType _source23 = _495_t;
            if (_source23.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _497___mcc_h237 = _source23.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _498___mcc_h238 = _source23.dtor_typeArgs;
              DAST._IResolvedType _499___mcc_h239 = _source23.dtor_resolved;
              DAST._IType _500_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _501_genType;
                Dafny.ISequence<Dafny.Rune> _out145;
                _out145 = DCOMP.COMP.GenType(_500_o, false, false);
                _501_genType = _out145;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _501_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Nullable) {
              DAST._IType _502___mcc_h243 = _source23.dtor_Nullable_a0;
              DAST._IType _503_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _504_genType;
                Dafny.ISequence<Dafny.Rune> _out146;
                _out146 = DCOMP.COMP.GenType(_503_o, false, false);
                _504_genType = _out146;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _504_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Tuple) {
              Dafny.ISequence<DAST._IType> _505___mcc_h245 = _source23.dtor_Tuple_a0;
              DAST._IType _506_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _507_genType;
                Dafny.ISequence<Dafny.Rune> _out147;
                _out147 = DCOMP.COMP.GenType(_506_o, false, false);
                _507_genType = _out147;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _507_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Array) {
              DAST._IType _508___mcc_h247 = _source23.dtor_element;
              BigInteger _509___mcc_h248 = _source23.dtor_dims;
              DAST._IType _510_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _511_genType;
                Dafny.ISequence<Dafny.Rune> _out148;
                _out148 = DCOMP.COMP.GenType(_510_o, false, false);
                _511_genType = _out148;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _511_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Seq) {
              DAST._IType _512___mcc_h251 = _source23.dtor_element;
              DAST._IType _513_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _514_genType;
                Dafny.ISequence<Dafny.Rune> _out149;
                _out149 = DCOMP.COMP.GenType(_513_o, false, false);
                _514_genType = _out149;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _514_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Set) {
              DAST._IType _515___mcc_h253 = _source23.dtor_element;
              DAST._IType _516_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _517_genType;
                Dafny.ISequence<Dafny.Rune> _out150;
                _out150 = DCOMP.COMP.GenType(_516_o, false, false);
                _517_genType = _out150;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _517_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Multiset) {
              DAST._IType _518___mcc_h255 = _source23.dtor_element;
              DAST._IType _519_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _520_genType;
                Dafny.ISequence<Dafny.Rune> _out151;
                _out151 = DCOMP.COMP.GenType(_519_o, false, false);
                _520_genType = _out151;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _520_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Map) {
              DAST._IType _521___mcc_h257 = _source23.dtor_key;
              DAST._IType _522___mcc_h258 = _source23.dtor_value;
              DAST._IType _523_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _524_genType;
                Dafny.ISequence<Dafny.Rune> _out152;
                _out152 = DCOMP.COMP.GenType(_523_o, false, false);
                _524_genType = _out152;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _524_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Arrow) {
              Dafny.ISequence<DAST._IType> _525___mcc_h261 = _source23.dtor_args;
              DAST._IType _526___mcc_h262 = _source23.dtor_result;
              DAST._IType _527_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _528_genType;
                Dafny.ISequence<Dafny.Rune> _out153;
                _out153 = DCOMP.COMP.GenType(_527_o, false, false);
                _528_genType = _out153;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _528_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Primitive) {
              DAST._IPrimitive _529___mcc_h265 = _source23.dtor_Primitive_a0;
              DAST._IPrimitive _source24 = _529___mcc_h265;
              if (_source24.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source24.is_Real) {
                DAST._IType _530_o = _495_t;
                {
                  Dafny.ISequence<Dafny.Rune> _531_genType;
                  Dafny.ISequence<Dafny.Rune> _out154;
                  _out154 = DCOMP.COMP.GenType(_530_o, false, false);
                  _531_genType = _out154;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _531_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source24.is_String) {
                DAST._IType _532_o = _495_t;
                {
                  Dafny.ISequence<Dafny.Rune> _533_genType;
                  Dafny.ISequence<Dafny.Rune> _out155;
                  _out155 = DCOMP.COMP.GenType(_532_o, false, false);
                  _533_genType = _out155;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _533_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source24.is_Bool) {
                DAST._IType _534_o = _495_t;
                {
                  Dafny.ISequence<Dafny.Rune> _535_genType;
                  Dafny.ISequence<Dafny.Rune> _out156;
                  _out156 = DCOMP.COMP.GenType(_534_o, false, false);
                  _535_genType = _out156;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _535_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _536_o = _495_t;
                {
                  Dafny.ISequence<Dafny.Rune> _537_genType;
                  Dafny.ISequence<Dafny.Rune> _out157;
                  _out157 = DCOMP.COMP.GenType(_536_o, false, false);
                  _537_genType = _out157;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _537_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source23.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _538___mcc_h267 = _source23.dtor_Passthrough_a0;
              DAST._IType _539_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _540_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_539_o, false, false);
                _540_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _540_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _541___mcc_h269 = _source23.dtor_TypeArg_a0;
              DAST._IType _542_o = _495_t;
              {
                Dafny.ISequence<Dafny.Rune> _543_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_542_o, false, false);
                _543_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _496_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _543_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source22.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _544___mcc_h4 = _source22.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _545___mcc_h5 = _source22.dtor_DecLiteral_a1;
          DAST._IType _546___mcc_h6 = _source22.dtor_DecLiteral_a2;
          DAST._IType _547_t = _546___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _548_d = _545___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _549_n = _544___mcc_h4;
          {
            DAST._IType _source25 = _547_t;
            if (_source25.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _550___mcc_h271 = _source25.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _551___mcc_h272 = _source25.dtor_typeArgs;
              DAST._IResolvedType _552___mcc_h273 = _source25.dtor_resolved;
              DAST._IType _553_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _554_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_553_o, false, false);
                _554_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _554_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Nullable) {
              DAST._IType _555___mcc_h277 = _source25.dtor_Nullable_a0;
              DAST._IType _556_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _557_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_556_o, false, false);
                _557_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _557_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Tuple) {
              Dafny.ISequence<DAST._IType> _558___mcc_h279 = _source25.dtor_Tuple_a0;
              DAST._IType _559_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _560_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_559_o, false, false);
                _560_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _560_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Array) {
              DAST._IType _561___mcc_h281 = _source25.dtor_element;
              BigInteger _562___mcc_h282 = _source25.dtor_dims;
              DAST._IType _563_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _564_genType;
                Dafny.ISequence<Dafny.Rune> _out163;
                _out163 = DCOMP.COMP.GenType(_563_o, false, false);
                _564_genType = _out163;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _564_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Seq) {
              DAST._IType _565___mcc_h285 = _source25.dtor_element;
              DAST._IType _566_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _567_genType;
                Dafny.ISequence<Dafny.Rune> _out164;
                _out164 = DCOMP.COMP.GenType(_566_o, false, false);
                _567_genType = _out164;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _567_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Set) {
              DAST._IType _568___mcc_h287 = _source25.dtor_element;
              DAST._IType _569_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _570_genType;
                Dafny.ISequence<Dafny.Rune> _out165;
                _out165 = DCOMP.COMP.GenType(_569_o, false, false);
                _570_genType = _out165;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _570_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Multiset) {
              DAST._IType _571___mcc_h289 = _source25.dtor_element;
              DAST._IType _572_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _573_genType;
                Dafny.ISequence<Dafny.Rune> _out166;
                _out166 = DCOMP.COMP.GenType(_572_o, false, false);
                _573_genType = _out166;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _573_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Map) {
              DAST._IType _574___mcc_h291 = _source25.dtor_key;
              DAST._IType _575___mcc_h292 = _source25.dtor_value;
              DAST._IType _576_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _577_genType;
                Dafny.ISequence<Dafny.Rune> _out167;
                _out167 = DCOMP.COMP.GenType(_576_o, false, false);
                _577_genType = _out167;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _577_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Arrow) {
              Dafny.ISequence<DAST._IType> _578___mcc_h295 = _source25.dtor_args;
              DAST._IType _579___mcc_h296 = _source25.dtor_result;
              DAST._IType _580_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _581_genType;
                Dafny.ISequence<Dafny.Rune> _out168;
                _out168 = DCOMP.COMP.GenType(_580_o, false, false);
                _581_genType = _out168;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _581_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Primitive) {
              DAST._IPrimitive _582___mcc_h299 = _source25.dtor_Primitive_a0;
              DAST._IPrimitive _source26 = _582___mcc_h299;
              if (_source26.is_Int) {
                DAST._IType _583_o = _547_t;
                {
                  Dafny.ISequence<Dafny.Rune> _584_genType;
                  Dafny.ISequence<Dafny.Rune> _out169;
                  _out169 = DCOMP.COMP.GenType(_583_o, false, false);
                  _584_genType = _out169;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _584_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source26.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source26.is_String) {
                DAST._IType _585_o = _547_t;
                {
                  Dafny.ISequence<Dafny.Rune> _586_genType;
                  Dafny.ISequence<Dafny.Rune> _out170;
                  _out170 = DCOMP.COMP.GenType(_585_o, false, false);
                  _586_genType = _out170;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _586_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source26.is_Bool) {
                DAST._IType _587_o = _547_t;
                {
                  Dafny.ISequence<Dafny.Rune> _588_genType;
                  Dafny.ISequence<Dafny.Rune> _out171;
                  _out171 = DCOMP.COMP.GenType(_587_o, false, false);
                  _588_genType = _out171;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _588_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _589_o = _547_t;
                {
                  Dafny.ISequence<Dafny.Rune> _590_genType;
                  Dafny.ISequence<Dafny.Rune> _out172;
                  _out172 = DCOMP.COMP.GenType(_589_o, false, false);
                  _590_genType = _out172;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _590_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source25.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _591___mcc_h301 = _source25.dtor_Passthrough_a0;
              DAST._IType _592_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _593_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_592_o, false, false);
                _593_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _593_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _594___mcc_h303 = _source25.dtor_TypeArg_a0;
              DAST._IType _595_o = _547_t;
              {
                Dafny.ISequence<Dafny.Rune> _596_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_595_o, false, false);
                _596_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _549_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _548_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _596_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source22.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _597___mcc_h7 = _source22.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _598_l = _597___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _598_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source22.is_CharLiteral) {
          Dafny.Rune _599___mcc_h8 = _source22.dtor_CharLiteral_a0;
          Dafny.Rune _600_c = _599___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), RAST.__default.natToString(new BigInteger((_600_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _601___mcc_h9 = _source22.dtor_Null_a0;
          DAST._IType _602_tpe = _601___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _603_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out175;
            _out175 = DCOMP.COMP.GenType(_602_tpe, false, false);
            _603_tpeGen = _out175;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _603_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source21.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _604___mcc_h10 = _source21.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _605_name = _604___mcc_h10;
        {
          s = RAST.__default.escapeIdent(_605_name);
          if (!((@params).Contains(_605_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_605_name);
        }
      } else if (_source21.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _606___mcc_h11 = _source21.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _607_path = _606___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out176;
          _out176 = DCOMP.COMP.GenPath(_607_path);
          s = _out176;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source21.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _608___mcc_h12 = _source21.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _609_values = _608___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _610_i;
          _610_i = BigInteger.Zero;
          while ((_610_i) < (new BigInteger((_609_values).Count))) {
            if ((_610_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _611_recursiveGen;
            bool _612___v32;
            bool _613_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _614_recIdents;
            Dafny.ISequence<Dafny.Rune> _out177;
            bool _out178;
            bool _out179;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out180;
            DCOMP.COMP.GenExpr((_609_values).Select(_610_i), selfIdent, @params, true, out _out177, out _out178, out _out179, out _out180);
            _611_recursiveGen = _out177;
            _612___v32 = _out178;
            _613_isErased = _out179;
            _614_recIdents = _out180;
            if (_613_isErased) {
              _611_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _614_recIdents);
            _610_i = (_610_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _615___mcc_h13 = _source21.dtor_path;
        Dafny.ISequence<DAST._IType> _616___mcc_h14 = _source21.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _617___mcc_h15 = _source21.dtor_args;
        Dafny.ISequence<DAST._IExpression> _618_args = _617___mcc_h15;
        Dafny.ISequence<DAST._IType> _619_typeArgs = _616___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _620_path = _615___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _621_path;
          Dafny.ISequence<Dafny.Rune> _out181;
          _out181 = DCOMP.COMP.GenPath(_620_path);
          _621_path = _out181;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _621_path);
          if ((new BigInteger((_619_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _622_i;
            _622_i = BigInteger.Zero;
            while ((_622_i) < (new BigInteger((_619_typeArgs).Count))) {
              if ((_622_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _623_typeString;
              Dafny.ISequence<Dafny.Rune> _out182;
              _out182 = DCOMP.COMP.GenType((_619_typeArgs).Select(_622_i), false, false);
              _623_typeString = _out182;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _623_typeString);
              _622_i = (_622_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _624_i;
          _624_i = BigInteger.Zero;
          while ((_624_i) < (new BigInteger((_618_args).Count))) {
            if ((_624_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _625_recursiveGen;
            bool _626___v33;
            bool _627_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _628_recIdents;
            Dafny.ISequence<Dafny.Rune> _out183;
            bool _out184;
            bool _out185;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
            DCOMP.COMP.GenExpr((_618_args).Select(_624_i), selfIdent, @params, true, out _out183, out _out184, out _out185, out _out186);
            _625_recursiveGen = _out183;
            _626___v33 = _out184;
            _627_isErased = _out185;
            _628_recIdents = _out186;
            if (_627_isErased) {
              _625_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _625_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _628_recIdents);
            _624_i = (_624_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source21.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _629___mcc_h16 = _source21.dtor_dims;
        DAST._IType _630___mcc_h17 = _source21.dtor_typ;
        DAST._IType _631_typ = _630___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _632_dims = _629___mcc_h16;
        {
          BigInteger _633_i;
          _633_i = (new BigInteger((_632_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _634_genTyp;
          Dafny.ISequence<Dafny.Rune> _out187;
          _out187 = DCOMP.COMP.GenType(_631_typ, false, false);
          _634_genTyp = _out187;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _634_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_633_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _635_recursiveGen;
            bool _636___v34;
            bool _637_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _638_recIdents;
            Dafny.ISequence<Dafny.Rune> _out188;
            bool _out189;
            bool _out190;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
            DCOMP.COMP.GenExpr((_632_dims).Select(_633_i), selfIdent, @params, true, out _out188, out _out189, out _out190, out _out191);
            _635_recursiveGen = _out188;
            _636___v34 = _out189;
            _637_isErased = _out190;
            _638_recIdents = _out191;
            if (!(_637_isErased)) {
              _635_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _638_recIdents);
            _633_i = (_633_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _639___mcc_h18 = _source21.dtor_path;
        Dafny.ISequence<DAST._IType> _640___mcc_h19 = _source21.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _641___mcc_h20 = _source21.dtor_variant;
        bool _642___mcc_h21 = _source21.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _643___mcc_h22 = _source21.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _644_values = _643___mcc_h22;
        bool _645_isCo = _642___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _646_variant = _641___mcc_h20;
        Dafny.ISequence<DAST._IType> _647_typeArgs = _640___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _648_path = _639___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _649_path;
          Dafny.ISequence<Dafny.Rune> _out192;
          _out192 = DCOMP.COMP.GenPath(_648_path);
          _649_path = _out192;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _649_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_647_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _650_i;
            _650_i = BigInteger.Zero;
            while ((_650_i) < (new BigInteger((_647_typeArgs).Count))) {
              if ((_650_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _651_typeString;
              Dafny.ISequence<Dafny.Rune> _out193;
              _out193 = DCOMP.COMP.GenType((_647_typeArgs).Select(_650_i), false, false);
              _651_typeString = _out193;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _651_typeString);
              _650_i = (_650_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.escapeIdent(_646_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _652_i;
          _652_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_652_i) < (new BigInteger((_644_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs0 = (_644_values).Select(_652_i);
            Dafny.ISequence<Dafny.Rune> _653_name = _let_tmp_rhs0.dtor__0;
            DAST._IExpression _654_value = _let_tmp_rhs0.dtor__1;
            if ((_652_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_645_isCo) {
              Dafny.ISequence<Dafny.Rune> _655_recursiveGen;
              bool _656___v35;
              bool _657_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _658_recIdents;
              Dafny.ISequence<Dafny.Rune> _out194;
              bool _out195;
              bool _out196;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out197;
              DCOMP.COMP.GenExpr(_654_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out194, out _out195, out _out196, out _out197);
              _655_recursiveGen = _out194;
              _656___v35 = _out195;
              _657_isErased = _out196;
              _658_recIdents = _out197;
              if (!(_657_isErased)) {
                _655_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _655_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _655_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _655_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _658_recIdents);
              Dafny.ISequence<Dafny.Rune> _659_allReadCloned;
              _659_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_658_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _660_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_658_recIdents).Elements) {
                  _660_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_658_recIdents).Contains(_660_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1292)");
              after__ASSIGN_SUCH_THAT_0:;
                _659_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_659_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), RAST.__default.escapeIdent(_660_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), RAST.__default.escapeIdent(_660_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _658_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_658_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_660_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.escapeIdent(_653_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _659_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _655_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _661_recursiveGen;
              bool _662___v36;
              bool _663_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _664_recIdents;
              Dafny.ISequence<Dafny.Rune> _out198;
              bool _out199;
              bool _out200;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out201;
              DCOMP.COMP.GenExpr(_654_value, selfIdent, @params, true, out _out198, out _out199, out _out200, out _out201);
              _661_recursiveGen = _out198;
              _662___v36 = _out199;
              _663_isErased = _out200;
              _664_recIdents = _out201;
              if (!(_663_isErased)) {
                _661_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _661_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _661_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _661_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.escapeIdent(_653_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _661_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _664_recIdents);
            }
            _652_i = (_652_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_Convert) {
        DAST._IExpression _665___mcc_h23 = _source21.dtor_value;
        DAST._IType _666___mcc_h24 = _source21.dtor_from;
        DAST._IType _667___mcc_h25 = _source21.dtor_typ;
        DAST._IType _668_toTpe = _667___mcc_h25;
        DAST._IType _669_fromTpe = _666___mcc_h24;
        DAST._IExpression _670_expr = _665___mcc_h23;
        {
          if (object.Equals(_669_fromTpe, _668_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _671_recursiveGen;
            bool _672_recOwned;
            bool _673_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _674_recIdents;
            Dafny.ISequence<Dafny.Rune> _out202;
            bool _out203;
            bool _out204;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out205;
            DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out202, out _out203, out _out204, out _out205);
            _671_recursiveGen = _out202;
            _672_recOwned = _out203;
            _673_recErased = _out204;
            _674_recIdents = _out205;
            s = _671_recursiveGen;
            isOwned = _672_recOwned;
            isErased = _673_recErased;
            readIdents = _674_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source27 = _System.Tuple2<DAST._IType, DAST._IType>.create(_669_fromTpe, _668_toTpe);
            DAST._IType _675___mcc_h305 = _source27.dtor__0;
            DAST._IType _676___mcc_h306 = _source27.dtor__1;
            DAST._IType _source28 = _675___mcc_h305;
            if (_source28.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _677___mcc_h309 = _source28.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _678___mcc_h310 = _source28.dtor_typeArgs;
              DAST._IResolvedType _679___mcc_h311 = _source28.dtor_resolved;
              DAST._IResolvedType _source29 = _679___mcc_h311;
              if (_source29.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _680___mcc_h321 = _source29.dtor_path;
                DAST._IType _source30 = _676___mcc_h306;
                if (_source30.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _681___mcc_h325 = _source30.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _682___mcc_h326 = _source30.dtor_typeArgs;
                  DAST._IResolvedType _683___mcc_h327 = _source30.dtor_resolved;
                  DAST._IResolvedType _source31 = _683___mcc_h327;
                  if (_source31.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _684___mcc_h331 = _source31.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _685_recursiveGen;
                      bool _686_recOwned;
                      bool _687_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _688_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out206;
                      bool _out207;
                      bool _out208;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out206, out _out207, out _out208, out _out209);
                      _685_recursiveGen = _out206;
                      _686_recOwned = _out207;
                      _687_recErased = _out208;
                      _688_recIdents = _out209;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _686_recOwned;
                      isErased = _687_recErased;
                      readIdents = _688_recIdents;
                    }
                  } else if (_source31.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _689___mcc_h333 = _source31.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _690_recursiveGen;
                      bool _691_recOwned;
                      bool _692_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _693_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out210;
                      bool _out211;
                      bool _out212;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out213;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out210, out _out211, out _out212, out _out213);
                      _690_recursiveGen = _out210;
                      _691_recOwned = _out211;
                      _692_recErased = _out212;
                      _693_recIdents = _out213;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _690_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _691_recOwned;
                      isErased = _692_recErased;
                      readIdents = _693_recIdents;
                    }
                  } else {
                    DAST._IType _694___mcc_h335 = _source31.dtor_Newtype_a0;
                    DAST._IType _695_b = _694___mcc_h335;
                    {
                      if (object.Equals(_669_fromTpe, _695_b)) {
                        Dafny.ISequence<Dafny.Rune> _696_recursiveGen;
                        bool _697_recOwned;
                        bool _698_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _699_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out214;
                        bool _out215;
                        bool _out216;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out214, out _out215, out _out216, out _out217);
                        _696_recursiveGen = _out214;
                        _697_recOwned = _out215;
                        _698_recErased = _out216;
                        _699_recIdents = _out217;
                        Dafny.ISequence<Dafny.Rune> _700_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out218;
                        _out218 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                        _700_rhsType = _out218;
                        Dafny.ISequence<Dafny.Rune> _701_uneraseFn;
                        _701_uneraseFn = ((_697_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _700_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _701_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _696_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _697_recOwned;
                        isErased = false;
                        readIdents = _699_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out219;
                        bool _out220;
                        bool _out221;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _695_b), _695_b, _668_toTpe), selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                        s = _out219;
                        isOwned = _out220;
                        isErased = _out221;
                        readIdents = _out222;
                      }
                    }
                  }
                } else if (_source30.is_Nullable) {
                  DAST._IType _702___mcc_h337 = _source30.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _703_recursiveGen;
                    bool _704_recOwned;
                    bool _705_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _706_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out223;
                    bool _out224;
                    bool _out225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                    _703_recursiveGen = _out223;
                    _704_recOwned = _out224;
                    _705_recErased = _out225;
                    _706_recIdents = _out226;
                    if (!(_704_recOwned)) {
                      _703_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_703_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _703_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _705_recErased;
                    readIdents = _706_recIdents;
                  }
                } else if (_source30.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _707___mcc_h339 = _source30.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _708_recursiveGen;
                    bool _709_recOwned;
                    bool _710_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _711_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out227;
                    bool _out228;
                    bool _out229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229, out _out230);
                    _708_recursiveGen = _out227;
                    _709_recOwned = _out228;
                    _710_recErased = _out229;
                    _711_recIdents = _out230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _708_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _709_recOwned;
                    isErased = _710_recErased;
                    readIdents = _711_recIdents;
                  }
                } else if (_source30.is_Array) {
                  DAST._IType _712___mcc_h341 = _source30.dtor_element;
                  BigInteger _713___mcc_h342 = _source30.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _714_recursiveGen;
                    bool _715_recOwned;
                    bool _716_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _717_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out231;
                    bool _out232;
                    bool _out233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out234;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out231, out _out232, out _out233, out _out234);
                    _714_recursiveGen = _out231;
                    _715_recOwned = _out232;
                    _716_recErased = _out233;
                    _717_recIdents = _out234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _714_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _715_recOwned;
                    isErased = _716_recErased;
                    readIdents = _717_recIdents;
                  }
                } else if (_source30.is_Seq) {
                  DAST._IType _718___mcc_h345 = _source30.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _719_recursiveGen;
                    bool _720_recOwned;
                    bool _721_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _722_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out235;
                    bool _out236;
                    bool _out237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out235, out _out236, out _out237, out _out238);
                    _719_recursiveGen = _out235;
                    _720_recOwned = _out236;
                    _721_recErased = _out237;
                    _722_recIdents = _out238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _719_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _720_recOwned;
                    isErased = _721_recErased;
                    readIdents = _722_recIdents;
                  }
                } else if (_source30.is_Set) {
                  DAST._IType _723___mcc_h347 = _source30.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _724_recursiveGen;
                    bool _725_recOwned;
                    bool _726_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _727_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out239;
                    bool _out240;
                    bool _out241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out239, out _out240, out _out241, out _out242);
                    _724_recursiveGen = _out239;
                    _725_recOwned = _out240;
                    _726_recErased = _out241;
                    _727_recIdents = _out242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _724_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _725_recOwned;
                    isErased = _726_recErased;
                    readIdents = _727_recIdents;
                  }
                } else if (_source30.is_Multiset) {
                  DAST._IType _728___mcc_h349 = _source30.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _729_recursiveGen;
                    bool _730_recOwned;
                    bool _731_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _732_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out243;
                    bool _out244;
                    bool _out245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out246;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out243, out _out244, out _out245, out _out246);
                    _729_recursiveGen = _out243;
                    _730_recOwned = _out244;
                    _731_recErased = _out245;
                    _732_recIdents = _out246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _729_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _730_recOwned;
                    isErased = _731_recErased;
                    readIdents = _732_recIdents;
                  }
                } else if (_source30.is_Map) {
                  DAST._IType _733___mcc_h351 = _source30.dtor_key;
                  DAST._IType _734___mcc_h352 = _source30.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _735_recursiveGen;
                    bool _736_recOwned;
                    bool _737_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _738_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out247;
                    bool _out248;
                    bool _out249;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out247, out _out248, out _out249, out _out250);
                    _735_recursiveGen = _out247;
                    _736_recOwned = _out248;
                    _737_recErased = _out249;
                    _738_recIdents = _out250;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _735_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _736_recOwned;
                    isErased = _737_recErased;
                    readIdents = _738_recIdents;
                  }
                } else if (_source30.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _739___mcc_h355 = _source30.dtor_args;
                  DAST._IType _740___mcc_h356 = _source30.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _741_recursiveGen;
                    bool _742_recOwned;
                    bool _743_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _744_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out251;
                    bool _out252;
                    bool _out253;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out251, out _out252, out _out253, out _out254);
                    _741_recursiveGen = _out251;
                    _742_recOwned = _out252;
                    _743_recErased = _out253;
                    _744_recIdents = _out254;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _741_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _742_recOwned;
                    isErased = _743_recErased;
                    readIdents = _744_recIdents;
                  }
                } else if (_source30.is_Primitive) {
                  DAST._IPrimitive _745___mcc_h359 = _source30.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _746_recursiveGen;
                    bool _747_recOwned;
                    bool _748_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _749_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out255;
                    bool _out256;
                    bool _out257;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out258;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out255, out _out256, out _out257, out _out258);
                    _746_recursiveGen = _out255;
                    _747_recOwned = _out256;
                    _748_recErased = _out257;
                    _749_recIdents = _out258;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _746_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _747_recOwned;
                    isErased = _748_recErased;
                    readIdents = _749_recIdents;
                  }
                } else if (_source30.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _750___mcc_h361 = _source30.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _751_recursiveGen;
                    bool _752_recOwned;
                    bool _753_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _754_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out259;
                    bool _out260;
                    bool _out261;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out262;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out259, out _out260, out _out261, out _out262);
                    _751_recursiveGen = _out259;
                    _752_recOwned = _out260;
                    _753_recErased = _out261;
                    _754_recIdents = _out262;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _751_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _752_recOwned;
                    isErased = _753_recErased;
                    readIdents = _754_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _755___mcc_h363 = _source30.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _756_recursiveGen;
                    bool _757_recOwned;
                    bool _758_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _759_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out263;
                    bool _out264;
                    bool _out265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out266;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out263, out _out264, out _out265, out _out266);
                    _756_recursiveGen = _out263;
                    _757_recOwned = _out264;
                    _758_recErased = _out265;
                    _759_recIdents = _out266;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _756_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _757_recOwned;
                    isErased = _758_recErased;
                    readIdents = _759_recIdents;
                  }
                }
              } else if (_source29.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _760___mcc_h365 = _source29.dtor_path;
                DAST._IType _source32 = _676___mcc_h306;
                if (_source32.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _761___mcc_h369 = _source32.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _762___mcc_h370 = _source32.dtor_typeArgs;
                  DAST._IResolvedType _763___mcc_h371 = _source32.dtor_resolved;
                  DAST._IResolvedType _source33 = _763___mcc_h371;
                  if (_source33.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _764___mcc_h375 = _source33.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _765_recursiveGen;
                      bool _766_recOwned;
                      bool _767_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _768_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out267;
                      bool _out268;
                      bool _out269;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out267, out _out268, out _out269, out _out270);
                      _765_recursiveGen = _out267;
                      _766_recOwned = _out268;
                      _767_recErased = _out269;
                      _768_recIdents = _out270;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _765_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _766_recOwned;
                      isErased = _767_recErased;
                      readIdents = _768_recIdents;
                    }
                  } else if (_source33.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _769___mcc_h377 = _source33.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _770_recursiveGen;
                      bool _771_recOwned;
                      bool _772_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _773_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out271;
                      bool _out272;
                      bool _out273;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out274;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out271, out _out272, out _out273, out _out274);
                      _770_recursiveGen = _out271;
                      _771_recOwned = _out272;
                      _772_recErased = _out273;
                      _773_recIdents = _out274;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _770_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _771_recOwned;
                      isErased = _772_recErased;
                      readIdents = _773_recIdents;
                    }
                  } else {
                    DAST._IType _774___mcc_h379 = _source33.dtor_Newtype_a0;
                    DAST._IType _775_b = _774___mcc_h379;
                    {
                      if (object.Equals(_669_fromTpe, _775_b)) {
                        Dafny.ISequence<Dafny.Rune> _776_recursiveGen;
                        bool _777_recOwned;
                        bool _778_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _779_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out275;
                        bool _out276;
                        bool _out277;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                        _776_recursiveGen = _out275;
                        _777_recOwned = _out276;
                        _778_recErased = _out277;
                        _779_recIdents = _out278;
                        Dafny.ISequence<Dafny.Rune> _780_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out279;
                        _out279 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                        _780_rhsType = _out279;
                        Dafny.ISequence<Dafny.Rune> _781_uneraseFn;
                        _781_uneraseFn = ((_777_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _780_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _781_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _776_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _777_recOwned;
                        isErased = false;
                        readIdents = _779_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out280;
                        bool _out281;
                        bool _out282;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _775_b), _775_b, _668_toTpe), selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                        s = _out280;
                        isOwned = _out281;
                        isErased = _out282;
                        readIdents = _out283;
                      }
                    }
                  }
                } else if (_source32.is_Nullable) {
                  DAST._IType _782___mcc_h381 = _source32.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _783_recursiveGen;
                    bool _784_recOwned;
                    bool _785_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _786_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out284;
                    bool _out285;
                    bool _out286;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                    _783_recursiveGen = _out284;
                    _784_recOwned = _out285;
                    _785_recErased = _out286;
                    _786_recIdents = _out287;
                    if (!(_784_recOwned)) {
                      _783_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_783_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _783_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _785_recErased;
                    readIdents = _786_recIdents;
                  }
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _787___mcc_h383 = _source32.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _788_recursiveGen;
                    bool _789_recOwned;
                    bool _790_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _791_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out288;
                    bool _out289;
                    bool _out290;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                    _788_recursiveGen = _out288;
                    _789_recOwned = _out289;
                    _790_recErased = _out290;
                    _791_recIdents = _out291;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _788_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _789_recOwned;
                    isErased = _790_recErased;
                    readIdents = _791_recIdents;
                  }
                } else if (_source32.is_Array) {
                  DAST._IType _792___mcc_h385 = _source32.dtor_element;
                  BigInteger _793___mcc_h386 = _source32.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _794_recursiveGen;
                    bool _795_recOwned;
                    bool _796_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _797_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out292;
                    bool _out293;
                    bool _out294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out292, out _out293, out _out294, out _out295);
                    _794_recursiveGen = _out292;
                    _795_recOwned = _out293;
                    _796_recErased = _out294;
                    _797_recIdents = _out295;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _794_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _795_recOwned;
                    isErased = _796_recErased;
                    readIdents = _797_recIdents;
                  }
                } else if (_source32.is_Seq) {
                  DAST._IType _798___mcc_h389 = _source32.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _799_recursiveGen;
                    bool _800_recOwned;
                    bool _801_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _802_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out296;
                    bool _out297;
                    bool _out298;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out299;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out296, out _out297, out _out298, out _out299);
                    _799_recursiveGen = _out296;
                    _800_recOwned = _out297;
                    _801_recErased = _out298;
                    _802_recIdents = _out299;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _799_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _800_recOwned;
                    isErased = _801_recErased;
                    readIdents = _802_recIdents;
                  }
                } else if (_source32.is_Set) {
                  DAST._IType _803___mcc_h391 = _source32.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _804_recursiveGen;
                    bool _805_recOwned;
                    bool _806_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _807_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out300;
                    bool _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out300, out _out301, out _out302, out _out303);
                    _804_recursiveGen = _out300;
                    _805_recOwned = _out301;
                    _806_recErased = _out302;
                    _807_recIdents = _out303;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _804_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _805_recOwned;
                    isErased = _806_recErased;
                    readIdents = _807_recIdents;
                  }
                } else if (_source32.is_Multiset) {
                  DAST._IType _808___mcc_h393 = _source32.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _809_recursiveGen;
                    bool _810_recOwned;
                    bool _811_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _812_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out304;
                    bool _out305;
                    bool _out306;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out307;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306, out _out307);
                    _809_recursiveGen = _out304;
                    _810_recOwned = _out305;
                    _811_recErased = _out306;
                    _812_recIdents = _out307;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _809_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _810_recOwned;
                    isErased = _811_recErased;
                    readIdents = _812_recIdents;
                  }
                } else if (_source32.is_Map) {
                  DAST._IType _813___mcc_h395 = _source32.dtor_key;
                  DAST._IType _814___mcc_h396 = _source32.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _815_recursiveGen;
                    bool _816_recOwned;
                    bool _817_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _818_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out308;
                    bool _out309;
                    bool _out310;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out308, out _out309, out _out310, out _out311);
                    _815_recursiveGen = _out308;
                    _816_recOwned = _out309;
                    _817_recErased = _out310;
                    _818_recIdents = _out311;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _815_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _816_recOwned;
                    isErased = _817_recErased;
                    readIdents = _818_recIdents;
                  }
                } else if (_source32.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _819___mcc_h399 = _source32.dtor_args;
                  DAST._IType _820___mcc_h400 = _source32.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _821_recursiveGen;
                    bool _822_recOwned;
                    bool _823_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _824_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out312;
                    bool _out313;
                    bool _out314;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out312, out _out313, out _out314, out _out315);
                    _821_recursiveGen = _out312;
                    _822_recOwned = _out313;
                    _823_recErased = _out314;
                    _824_recIdents = _out315;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _821_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _822_recOwned;
                    isErased = _823_recErased;
                    readIdents = _824_recIdents;
                  }
                } else if (_source32.is_Primitive) {
                  DAST._IPrimitive _825___mcc_h403 = _source32.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _826_recursiveGen;
                    bool _827_recOwned;
                    bool _828_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _829_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out316;
                    bool _out317;
                    bool _out318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out319;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out316, out _out317, out _out318, out _out319);
                    _826_recursiveGen = _out316;
                    _827_recOwned = _out317;
                    _828_recErased = _out318;
                    _829_recIdents = _out319;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _826_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _827_recOwned;
                    isErased = _828_recErased;
                    readIdents = _829_recIdents;
                  }
                } else if (_source32.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _830___mcc_h405 = _source32.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _831_recursiveGen;
                    bool _832_recOwned;
                    bool _833_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _834_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out320;
                    bool _out321;
                    bool _out322;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out320, out _out321, out _out322, out _out323);
                    _831_recursiveGen = _out320;
                    _832_recOwned = _out321;
                    _833_recErased = _out322;
                    _834_recIdents = _out323;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _831_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _832_recOwned;
                    isErased = _833_recErased;
                    readIdents = _834_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _835___mcc_h407 = _source32.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _836_recursiveGen;
                    bool _837_recOwned;
                    bool _838_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _839_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out324;
                    bool _out325;
                    bool _out326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out327;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out324, out _out325, out _out326, out _out327);
                    _836_recursiveGen = _out324;
                    _837_recOwned = _out325;
                    _838_recErased = _out326;
                    _839_recIdents = _out327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _836_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _837_recOwned;
                    isErased = _838_recErased;
                    readIdents = _839_recIdents;
                  }
                }
              } else {
                DAST._IType _840___mcc_h409 = _source29.dtor_Newtype_a0;
                DAST._IType _source34 = _676___mcc_h306;
                if (_source34.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _841___mcc_h413 = _source34.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _842___mcc_h414 = _source34.dtor_typeArgs;
                  DAST._IResolvedType _843___mcc_h415 = _source34.dtor_resolved;
                  DAST._IResolvedType _source35 = _843___mcc_h415;
                  if (_source35.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _844___mcc_h422 = _source35.dtor_path;
                    DAST._IType _845_b = _840___mcc_h409;
                    {
                      if (object.Equals(_845_b, _668_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _846_recursiveGen;
                        bool _847_recOwned;
                        bool _848_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _849_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out328;
                        bool _out329;
                        bool _out330;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out328, out _out329, out _out330, out _out331);
                        _846_recursiveGen = _out328;
                        _847_recOwned = _out329;
                        _848_recErased = _out330;
                        _849_recIdents = _out331;
                        Dafny.ISequence<Dafny.Rune> _850_uneraseFn;
                        _850_uneraseFn = ((_847_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _850_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _846_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _847_recOwned;
                        isErased = true;
                        readIdents = _849_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out332;
                        bool _out333;
                        bool _out334;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out335;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _845_b), _845_b, _668_toTpe), selfIdent, @params, mustOwn, out _out332, out _out333, out _out334, out _out335);
                        s = _out332;
                        isOwned = _out333;
                        isErased = _out334;
                        readIdents = _out335;
                      }
                    }
                  } else if (_source35.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _851___mcc_h425 = _source35.dtor_path;
                    DAST._IType _852_b = _840___mcc_h409;
                    {
                      if (object.Equals(_852_b, _668_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _853_recursiveGen;
                        bool _854_recOwned;
                        bool _855_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _856_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out336;
                        bool _out337;
                        bool _out338;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                        _853_recursiveGen = _out336;
                        _854_recOwned = _out337;
                        _855_recErased = _out338;
                        _856_recIdents = _out339;
                        Dafny.ISequence<Dafny.Rune> _857_uneraseFn;
                        _857_uneraseFn = ((_854_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _857_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _853_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _854_recOwned;
                        isErased = true;
                        readIdents = _856_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out340;
                        bool _out341;
                        bool _out342;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _852_b), _852_b, _668_toTpe), selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                        s = _out340;
                        isOwned = _out341;
                        isErased = _out342;
                        readIdents = _out343;
                      }
                    }
                  } else {
                    DAST._IType _858___mcc_h428 = _source35.dtor_Newtype_a0;
                    DAST._IType _859_b = _858___mcc_h428;
                    {
                      if (object.Equals(_669_fromTpe, _859_b)) {
                        Dafny.ISequence<Dafny.Rune> _860_recursiveGen;
                        bool _861_recOwned;
                        bool _862_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _863_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out344;
                        bool _out345;
                        bool _out346;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                        _860_recursiveGen = _out344;
                        _861_recOwned = _out345;
                        _862_recErased = _out346;
                        _863_recIdents = _out347;
                        Dafny.ISequence<Dafny.Rune> _864_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out348;
                        _out348 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                        _864_rhsType = _out348;
                        Dafny.ISequence<Dafny.Rune> _865_uneraseFn;
                        _865_uneraseFn = ((_861_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _864_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _865_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _860_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _861_recOwned;
                        isErased = false;
                        readIdents = _863_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _859_b), _859_b, _668_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        s = _out349;
                        isOwned = _out350;
                        isErased = _out351;
                        readIdents = _out352;
                      }
                    }
                  }
                } else if (_source34.is_Nullable) {
                  DAST._IType _866___mcc_h431 = _source34.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _867_recursiveGen;
                    bool _868_recOwned;
                    bool _869_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _870_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out353;
                    bool _out354;
                    bool _out355;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                    _867_recursiveGen = _out353;
                    _868_recOwned = _out354;
                    _869_recErased = _out355;
                    _870_recIdents = _out356;
                    if (!(_868_recOwned)) {
                      _867_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_867_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _867_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _869_recErased;
                    readIdents = _870_recIdents;
                  }
                } else if (_source34.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _871___mcc_h434 = _source34.dtor_Tuple_a0;
                  DAST._IType _872_b = _840___mcc_h409;
                  {
                    if (object.Equals(_872_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _873_recursiveGen;
                      bool _874_recOwned;
                      bool _875_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _876_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out357;
                      bool _out358;
                      bool _out359;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                      _873_recursiveGen = _out357;
                      _874_recOwned = _out358;
                      _875_recErased = _out359;
                      _876_recIdents = _out360;
                      Dafny.ISequence<Dafny.Rune> _877_uneraseFn;
                      _877_uneraseFn = ((_874_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _877_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _873_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _874_recOwned;
                      isErased = true;
                      readIdents = _876_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out361;
                      bool _out362;
                      bool _out363;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _872_b), _872_b, _668_toTpe), selfIdent, @params, mustOwn, out _out361, out _out362, out _out363, out _out364);
                      s = _out361;
                      isOwned = _out362;
                      isErased = _out363;
                      readIdents = _out364;
                    }
                  }
                } else if (_source34.is_Array) {
                  DAST._IType _878___mcc_h437 = _source34.dtor_element;
                  BigInteger _879___mcc_h438 = _source34.dtor_dims;
                  DAST._IType _880_b = _840___mcc_h409;
                  {
                    if (object.Equals(_880_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _881_recursiveGen;
                      bool _882_recOwned;
                      bool _883_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _884_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out365;
                      bool _out366;
                      bool _out367;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out368;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out365, out _out366, out _out367, out _out368);
                      _881_recursiveGen = _out365;
                      _882_recOwned = _out366;
                      _883_recErased = _out367;
                      _884_recIdents = _out368;
                      Dafny.ISequence<Dafny.Rune> _885_uneraseFn;
                      _885_uneraseFn = ((_882_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _885_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _881_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _882_recOwned;
                      isErased = true;
                      readIdents = _884_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out369;
                      bool _out370;
                      bool _out371;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _880_b), _880_b, _668_toTpe), selfIdent, @params, mustOwn, out _out369, out _out370, out _out371, out _out372);
                      s = _out369;
                      isOwned = _out370;
                      isErased = _out371;
                      readIdents = _out372;
                    }
                  }
                } else if (_source34.is_Seq) {
                  DAST._IType _886___mcc_h443 = _source34.dtor_element;
                  DAST._IType _887_b = _840___mcc_h409;
                  {
                    if (object.Equals(_887_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _888_recursiveGen;
                      bool _889_recOwned;
                      bool _890_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _891_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out373;
                      bool _out374;
                      bool _out375;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375, out _out376);
                      _888_recursiveGen = _out373;
                      _889_recOwned = _out374;
                      _890_recErased = _out375;
                      _891_recIdents = _out376;
                      Dafny.ISequence<Dafny.Rune> _892_uneraseFn;
                      _892_uneraseFn = ((_889_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _892_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _888_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _889_recOwned;
                      isErased = true;
                      readIdents = _891_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out377;
                      bool _out378;
                      bool _out379;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out380;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _887_b), _887_b, _668_toTpe), selfIdent, @params, mustOwn, out _out377, out _out378, out _out379, out _out380);
                      s = _out377;
                      isOwned = _out378;
                      isErased = _out379;
                      readIdents = _out380;
                    }
                  }
                } else if (_source34.is_Set) {
                  DAST._IType _893___mcc_h446 = _source34.dtor_element;
                  DAST._IType _894_b = _840___mcc_h409;
                  {
                    if (object.Equals(_894_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _895_recursiveGen;
                      bool _896_recOwned;
                      bool _897_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _898_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out381;
                      bool _out382;
                      bool _out383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out381, out _out382, out _out383, out _out384);
                      _895_recursiveGen = _out381;
                      _896_recOwned = _out382;
                      _897_recErased = _out383;
                      _898_recIdents = _out384;
                      Dafny.ISequence<Dafny.Rune> _899_uneraseFn;
                      _899_uneraseFn = ((_896_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _899_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _895_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _896_recOwned;
                      isErased = true;
                      readIdents = _898_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out385;
                      bool _out386;
                      bool _out387;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _894_b), _894_b, _668_toTpe), selfIdent, @params, mustOwn, out _out385, out _out386, out _out387, out _out388);
                      s = _out385;
                      isOwned = _out386;
                      isErased = _out387;
                      readIdents = _out388;
                    }
                  }
                } else if (_source34.is_Multiset) {
                  DAST._IType _900___mcc_h449 = _source34.dtor_element;
                  DAST._IType _901_b = _840___mcc_h409;
                  {
                    if (object.Equals(_901_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _902_recursiveGen;
                      bool _903_recOwned;
                      bool _904_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _905_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out389;
                      bool _out390;
                      bool _out391;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out389, out _out390, out _out391, out _out392);
                      _902_recursiveGen = _out389;
                      _903_recOwned = _out390;
                      _904_recErased = _out391;
                      _905_recIdents = _out392;
                      Dafny.ISequence<Dafny.Rune> _906_uneraseFn;
                      _906_uneraseFn = ((_903_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _906_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _902_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _903_recOwned;
                      isErased = true;
                      readIdents = _905_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out393;
                      bool _out394;
                      bool _out395;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _901_b), _901_b, _668_toTpe), selfIdent, @params, mustOwn, out _out393, out _out394, out _out395, out _out396);
                      s = _out393;
                      isOwned = _out394;
                      isErased = _out395;
                      readIdents = _out396;
                    }
                  }
                } else if (_source34.is_Map) {
                  DAST._IType _907___mcc_h452 = _source34.dtor_key;
                  DAST._IType _908___mcc_h453 = _source34.dtor_value;
                  DAST._IType _909_b = _840___mcc_h409;
                  {
                    if (object.Equals(_909_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _910_recursiveGen;
                      bool _911_recOwned;
                      bool _912_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _913_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out397;
                      bool _out398;
                      bool _out399;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out397, out _out398, out _out399, out _out400);
                      _910_recursiveGen = _out397;
                      _911_recOwned = _out398;
                      _912_recErased = _out399;
                      _913_recIdents = _out400;
                      Dafny.ISequence<Dafny.Rune> _914_uneraseFn;
                      _914_uneraseFn = ((_911_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _914_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _910_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _911_recOwned;
                      isErased = true;
                      readIdents = _913_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out401;
                      bool _out402;
                      bool _out403;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _909_b), _909_b, _668_toTpe), selfIdent, @params, mustOwn, out _out401, out _out402, out _out403, out _out404);
                      s = _out401;
                      isOwned = _out402;
                      isErased = _out403;
                      readIdents = _out404;
                    }
                  }
                } else if (_source34.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _915___mcc_h458 = _source34.dtor_args;
                  DAST._IType _916___mcc_h459 = _source34.dtor_result;
                  DAST._IType _917_b = _840___mcc_h409;
                  {
                    if (object.Equals(_917_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _918_recursiveGen;
                      bool _919_recOwned;
                      bool _920_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _921_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out405;
                      bool _out406;
                      bool _out407;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                      _918_recursiveGen = _out405;
                      _919_recOwned = _out406;
                      _920_recErased = _out407;
                      _921_recIdents = _out408;
                      Dafny.ISequence<Dafny.Rune> _922_uneraseFn;
                      _922_uneraseFn = ((_919_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _922_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _918_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _919_recOwned;
                      isErased = true;
                      readIdents = _921_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out409;
                      bool _out410;
                      bool _out411;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _917_b), _917_b, _668_toTpe), selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                      s = _out409;
                      isOwned = _out410;
                      isErased = _out411;
                      readIdents = _out412;
                    }
                  }
                } else if (_source34.is_Primitive) {
                  DAST._IPrimitive _923___mcc_h464 = _source34.dtor_Primitive_a0;
                  DAST._IType _924_b = _840___mcc_h409;
                  {
                    if (object.Equals(_924_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _925_recursiveGen;
                      bool _926_recOwned;
                      bool _927_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _928_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out413;
                      bool _out414;
                      bool _out415;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                      _925_recursiveGen = _out413;
                      _926_recOwned = _out414;
                      _927_recErased = _out415;
                      _928_recIdents = _out416;
                      Dafny.ISequence<Dafny.Rune> _929_uneraseFn;
                      _929_uneraseFn = ((_926_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _929_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _926_recOwned;
                      isErased = true;
                      readIdents = _928_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out417;
                      bool _out418;
                      bool _out419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _924_b), _924_b, _668_toTpe), selfIdent, @params, mustOwn, out _out417, out _out418, out _out419, out _out420);
                      s = _out417;
                      isOwned = _out418;
                      isErased = _out419;
                      readIdents = _out420;
                    }
                  }
                } else if (_source34.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _930___mcc_h467 = _source34.dtor_Passthrough_a0;
                  DAST._IType _931_b = _840___mcc_h409;
                  {
                    if (object.Equals(_931_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _932_recursiveGen;
                      bool _933_recOwned;
                      bool _934_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _935_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out421;
                      bool _out422;
                      bool _out423;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out421, out _out422, out _out423, out _out424);
                      _932_recursiveGen = _out421;
                      _933_recOwned = _out422;
                      _934_recErased = _out423;
                      _935_recIdents = _out424;
                      Dafny.ISequence<Dafny.Rune> _936_uneraseFn;
                      _936_uneraseFn = ((_933_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _936_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _932_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _933_recOwned;
                      isErased = true;
                      readIdents = _935_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out425;
                      bool _out426;
                      bool _out427;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _931_b), _931_b, _668_toTpe), selfIdent, @params, mustOwn, out _out425, out _out426, out _out427, out _out428);
                      s = _out425;
                      isOwned = _out426;
                      isErased = _out427;
                      readIdents = _out428;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _937___mcc_h470 = _source34.dtor_TypeArg_a0;
                  DAST._IType _938_b = _840___mcc_h409;
                  {
                    if (object.Equals(_938_b, _668_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _939_recursiveGen;
                      bool _940_recOwned;
                      bool _941_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _942_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out429;
                      bool _out430;
                      bool _out431;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out429, out _out430, out _out431, out _out432);
                      _939_recursiveGen = _out429;
                      _940_recOwned = _out430;
                      _941_recErased = _out431;
                      _942_recIdents = _out432;
                      Dafny.ISequence<Dafny.Rune> _943_uneraseFn;
                      _943_uneraseFn = ((_940_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _943_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _940_recOwned;
                      isErased = true;
                      readIdents = _942_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out433;
                      bool _out434;
                      bool _out435;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _938_b), _938_b, _668_toTpe), selfIdent, @params, mustOwn, out _out433, out _out434, out _out435, out _out436);
                      s = _out433;
                      isOwned = _out434;
                      isErased = _out435;
                      readIdents = _out436;
                    }
                  }
                }
              }
            } else if (_source28.is_Nullable) {
              DAST._IType _944___mcc_h473 = _source28.dtor_Nullable_a0;
              DAST._IType _source36 = _676___mcc_h306;
              if (_source36.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _945___mcc_h477 = _source36.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _946___mcc_h478 = _source36.dtor_typeArgs;
                DAST._IResolvedType _947___mcc_h479 = _source36.dtor_resolved;
                DAST._IResolvedType _source37 = _947___mcc_h479;
                if (_source37.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _948___mcc_h486 = _source37.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _949_recursiveGen;
                    bool _950_recOwned;
                    bool _951_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _952_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out437;
                    bool _out438;
                    bool _out439;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439, out _out440);
                    _949_recursiveGen = _out437;
                    _950_recOwned = _out438;
                    _951_recErased = _out439;
                    _952_recIdents = _out440;
                    if (!(_950_recOwned)) {
                      _949_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_949_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_949_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _950_recOwned;
                    isErased = _951_recErased;
                    readIdents = _952_recIdents;
                  }
                } else if (_source37.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _953___mcc_h489 = _source37.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _954_recursiveGen;
                    bool _955_recOwned;
                    bool _956_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _957_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out441;
                    bool _out442;
                    bool _out443;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out444;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out441, out _out442, out _out443, out _out444);
                    _954_recursiveGen = _out441;
                    _955_recOwned = _out442;
                    _956_recErased = _out443;
                    _957_recIdents = _out444;
                    if (!(_955_recOwned)) {
                      _954_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_954_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_954_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _955_recOwned;
                    isErased = _956_recErased;
                    readIdents = _957_recIdents;
                  }
                } else {
                  DAST._IType _958___mcc_h492 = _source37.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _959_recursiveGen;
                    bool _960_recOwned;
                    bool _961_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _962_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out445;
                    bool _out446;
                    bool _out447;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out445, out _out446, out _out447, out _out448);
                    _959_recursiveGen = _out445;
                    _960_recOwned = _out446;
                    _961_recErased = _out447;
                    _962_recIdents = _out448;
                    if (!(_960_recOwned)) {
                      _959_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_959_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_959_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _960_recOwned;
                    isErased = _961_recErased;
                    readIdents = _962_recIdents;
                  }
                }
              } else if (_source36.is_Nullable) {
                DAST._IType _963___mcc_h495 = _source36.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _964_recursiveGen;
                  bool _965_recOwned;
                  bool _966_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _967_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out449;
                  bool _out450;
                  bool _out451;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out449, out _out450, out _out451, out _out452);
                  _964_recursiveGen = _out449;
                  _965_recOwned = _out450;
                  _966_recErased = _out451;
                  _967_recIdents = _out452;
                  if (!(_965_recOwned)) {
                    _964_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_964_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_964_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _965_recOwned;
                  isErased = _966_recErased;
                  readIdents = _967_recIdents;
                }
              } else if (_source36.is_Tuple) {
                Dafny.ISequence<DAST._IType> _968___mcc_h498 = _source36.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _969_recursiveGen;
                  bool _970_recOwned;
                  bool _971_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _972_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out453;
                  bool _out454;
                  bool _out455;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out453, out _out454, out _out455, out _out456);
                  _969_recursiveGen = _out453;
                  _970_recOwned = _out454;
                  _971_recErased = _out455;
                  _972_recIdents = _out456;
                  if (!(_970_recOwned)) {
                    _969_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_969_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_969_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _970_recOwned;
                  isErased = _971_recErased;
                  readIdents = _972_recIdents;
                }
              } else if (_source36.is_Array) {
                DAST._IType _973___mcc_h501 = _source36.dtor_element;
                BigInteger _974___mcc_h502 = _source36.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _975_recursiveGen;
                  bool _976_recOwned;
                  bool _977_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _978_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out457;
                  bool _out458;
                  bool _out459;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out457, out _out458, out _out459, out _out460);
                  _975_recursiveGen = _out457;
                  _976_recOwned = _out458;
                  _977_recErased = _out459;
                  _978_recIdents = _out460;
                  if (!(_976_recOwned)) {
                    _975_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_975_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_975_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _976_recOwned;
                  isErased = _977_recErased;
                  readIdents = _978_recIdents;
                }
              } else if (_source36.is_Seq) {
                DAST._IType _979___mcc_h507 = _source36.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _980_recursiveGen;
                  bool _981_recOwned;
                  bool _982_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _983_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out461;
                  bool _out462;
                  bool _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out461, out _out462, out _out463, out _out464);
                  _980_recursiveGen = _out461;
                  _981_recOwned = _out462;
                  _982_recErased = _out463;
                  _983_recIdents = _out464;
                  if (!(_981_recOwned)) {
                    _980_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_980_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_980_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _981_recOwned;
                  isErased = _982_recErased;
                  readIdents = _983_recIdents;
                }
              } else if (_source36.is_Set) {
                DAST._IType _984___mcc_h510 = _source36.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _985_recursiveGen;
                  bool _986_recOwned;
                  bool _987_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _988_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out465;
                  bool _out466;
                  bool _out467;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out468;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out465, out _out466, out _out467, out _out468);
                  _985_recursiveGen = _out465;
                  _986_recOwned = _out466;
                  _987_recErased = _out467;
                  _988_recIdents = _out468;
                  if (!(_986_recOwned)) {
                    _985_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_985_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_985_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _986_recOwned;
                  isErased = _987_recErased;
                  readIdents = _988_recIdents;
                }
              } else if (_source36.is_Multiset) {
                DAST._IType _989___mcc_h513 = _source36.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _990_recursiveGen;
                  bool _991_recOwned;
                  bool _992_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _993_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out469;
                  bool _out470;
                  bool _out471;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out469, out _out470, out _out471, out _out472);
                  _990_recursiveGen = _out469;
                  _991_recOwned = _out470;
                  _992_recErased = _out471;
                  _993_recIdents = _out472;
                  if (!(_991_recOwned)) {
                    _990_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_990_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_990_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _991_recOwned;
                  isErased = _992_recErased;
                  readIdents = _993_recIdents;
                }
              } else if (_source36.is_Map) {
                DAST._IType _994___mcc_h516 = _source36.dtor_key;
                DAST._IType _995___mcc_h517 = _source36.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _996_recursiveGen;
                  bool _997_recOwned;
                  bool _998_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _999_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out473;
                  bool _out474;
                  bool _out475;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out473, out _out474, out _out475, out _out476);
                  _996_recursiveGen = _out473;
                  _997_recOwned = _out474;
                  _998_recErased = _out475;
                  _999_recIdents = _out476;
                  if (!(_997_recOwned)) {
                    _996_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_996_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_996_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _997_recOwned;
                  isErased = _998_recErased;
                  readIdents = _999_recIdents;
                }
              } else if (_source36.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1000___mcc_h522 = _source36.dtor_args;
                DAST._IType _1001___mcc_h523 = _source36.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1002_recursiveGen;
                  bool _1003_recOwned;
                  bool _1004_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1005_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out477;
                  bool _out478;
                  bool _out479;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479, out _out480);
                  _1002_recursiveGen = _out477;
                  _1003_recOwned = _out478;
                  _1004_recErased = _out479;
                  _1005_recIdents = _out480;
                  if (!(_1003_recOwned)) {
                    _1002_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1002_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1002_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1003_recOwned;
                  isErased = _1004_recErased;
                  readIdents = _1005_recIdents;
                }
              } else if (_source36.is_Primitive) {
                DAST._IPrimitive _1006___mcc_h528 = _source36.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1007_recursiveGen;
                  bool _1008_recOwned;
                  bool _1009_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1010_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out481;
                  bool _out482;
                  bool _out483;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out481, out _out482, out _out483, out _out484);
                  _1007_recursiveGen = _out481;
                  _1008_recOwned = _out482;
                  _1009_recErased = _out483;
                  _1010_recIdents = _out484;
                  if (!(_1008_recOwned)) {
                    _1007_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1007_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1007_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1008_recOwned;
                  isErased = _1009_recErased;
                  readIdents = _1010_recIdents;
                }
              } else if (_source36.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1011___mcc_h531 = _source36.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1012_recursiveGen;
                  bool _1013_recOwned;
                  bool _1014_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1015_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out485;
                  bool _out486;
                  bool _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out485, out _out486, out _out487, out _out488);
                  _1012_recursiveGen = _out485;
                  _1013_recOwned = _out486;
                  _1014_recErased = _out487;
                  _1015_recIdents = _out488;
                  if (!(_1013_recOwned)) {
                    _1012_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1012_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1012_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1013_recOwned;
                  isErased = _1014_recErased;
                  readIdents = _1015_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1016___mcc_h534 = _source36.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1017_recursiveGen;
                  bool _1018_recOwned;
                  bool _1019_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1020_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out489;
                  bool _out490;
                  bool _out491;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out492;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out489, out _out490, out _out491, out _out492);
                  _1017_recursiveGen = _out489;
                  _1018_recOwned = _out490;
                  _1019_recErased = _out491;
                  _1020_recIdents = _out492;
                  if (!(_1018_recOwned)) {
                    _1017_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1017_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1017_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1018_recOwned;
                  isErased = _1019_recErased;
                  readIdents = _1020_recIdents;
                }
              }
            } else if (_source28.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1021___mcc_h537 = _source28.dtor_Tuple_a0;
              DAST._IType _source38 = _676___mcc_h306;
              if (_source38.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1022___mcc_h541 = _source38.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1023___mcc_h542 = _source38.dtor_typeArgs;
                DAST._IResolvedType _1024___mcc_h543 = _source38.dtor_resolved;
                DAST._IResolvedType _source39 = _1024___mcc_h543;
                if (_source39.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1025___mcc_h547 = _source39.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1026_recursiveGen;
                    bool _1027_recOwned;
                    bool _1028_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1029_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out493;
                    bool _out494;
                    bool _out495;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out493, out _out494, out _out495, out _out496);
                    _1026_recursiveGen = _out493;
                    _1027_recOwned = _out494;
                    _1028_recErased = _out495;
                    _1029_recIdents = _out496;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1026_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1027_recOwned;
                    isErased = _1028_recErased;
                    readIdents = _1029_recIdents;
                  }
                } else if (_source39.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1030___mcc_h549 = _source39.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1031_recursiveGen;
                    bool _1032_recOwned;
                    bool _1033_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1034_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out497;
                    bool _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out497, out _out498, out _out499, out _out500);
                    _1031_recursiveGen = _out497;
                    _1032_recOwned = _out498;
                    _1033_recErased = _out499;
                    _1034_recIdents = _out500;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1031_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1032_recOwned;
                    isErased = _1033_recErased;
                    readIdents = _1034_recIdents;
                  }
                } else {
                  DAST._IType _1035___mcc_h551 = _source39.dtor_Newtype_a0;
                  DAST._IType _1036_b = _1035___mcc_h551;
                  {
                    if (object.Equals(_669_fromTpe, _1036_b)) {
                      Dafny.ISequence<Dafny.Rune> _1037_recursiveGen;
                      bool _1038_recOwned;
                      bool _1039_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1040_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out501;
                      bool _out502;
                      bool _out503;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503, out _out504);
                      _1037_recursiveGen = _out501;
                      _1038_recOwned = _out502;
                      _1039_recErased = _out503;
                      _1040_recIdents = _out504;
                      Dafny.ISequence<Dafny.Rune> _1041_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out505;
                      _out505 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _1041_rhsType = _out505;
                      Dafny.ISequence<Dafny.Rune> _1042_uneraseFn;
                      _1042_uneraseFn = ((_1038_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1041_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1042_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1037_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1038_recOwned;
                      isErased = false;
                      readIdents = _1040_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out506;
                      bool _out507;
                      bool _out508;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1036_b), _1036_b, _668_toTpe), selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                      s = _out506;
                      isOwned = _out507;
                      isErased = _out508;
                      readIdents = _out509;
                    }
                  }
                }
              } else if (_source38.is_Nullable) {
                DAST._IType _1043___mcc_h553 = _source38.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1044_recursiveGen;
                  bool _1045_recOwned;
                  bool _1046_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1047_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out510;
                  bool _out511;
                  bool _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                  _1044_recursiveGen = _out510;
                  _1045_recOwned = _out511;
                  _1046_recErased = _out512;
                  _1047_recIdents = _out513;
                  if (!(_1045_recOwned)) {
                    _1044_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1044_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1044_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1046_recErased;
                  readIdents = _1047_recIdents;
                }
              } else if (_source38.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1048___mcc_h555 = _source38.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1049_recursiveGen;
                  bool _1050_recOwned;
                  bool _1051_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1052_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out514;
                  bool _out515;
                  bool _out516;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                  _1049_recursiveGen = _out514;
                  _1050_recOwned = _out515;
                  _1051_recErased = _out516;
                  _1052_recIdents = _out517;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1049_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1050_recOwned;
                  isErased = _1051_recErased;
                  readIdents = _1052_recIdents;
                }
              } else if (_source38.is_Array) {
                DAST._IType _1053___mcc_h557 = _source38.dtor_element;
                BigInteger _1054___mcc_h558 = _source38.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1055_recursiveGen;
                  bool _1056_recOwned;
                  bool _1057_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1058_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out518;
                  bool _out519;
                  bool _out520;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out521;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out518, out _out519, out _out520, out _out521);
                  _1055_recursiveGen = _out518;
                  _1056_recOwned = _out519;
                  _1057_recErased = _out520;
                  _1058_recIdents = _out521;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1055_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1056_recOwned;
                  isErased = _1057_recErased;
                  readIdents = _1058_recIdents;
                }
              } else if (_source38.is_Seq) {
                DAST._IType _1059___mcc_h561 = _source38.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1060_recursiveGen;
                  bool _1061_recOwned;
                  bool _1062_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1063_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out522;
                  bool _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out522, out _out523, out _out524, out _out525);
                  _1060_recursiveGen = _out522;
                  _1061_recOwned = _out523;
                  _1062_recErased = _out524;
                  _1063_recIdents = _out525;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1060_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1061_recOwned;
                  isErased = _1062_recErased;
                  readIdents = _1063_recIdents;
                }
              } else if (_source38.is_Set) {
                DAST._IType _1064___mcc_h563 = _source38.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1065_recursiveGen;
                  bool _1066_recOwned;
                  bool _1067_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1068_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out526;
                  bool _out527;
                  bool _out528;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528, out _out529);
                  _1065_recursiveGen = _out526;
                  _1066_recOwned = _out527;
                  _1067_recErased = _out528;
                  _1068_recIdents = _out529;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1065_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1066_recOwned;
                  isErased = _1067_recErased;
                  readIdents = _1068_recIdents;
                }
              } else if (_source38.is_Multiset) {
                DAST._IType _1069___mcc_h565 = _source38.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1070_recursiveGen;
                  bool _1071_recOwned;
                  bool _1072_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1073_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out530;
                  bool _out531;
                  bool _out532;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out533;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out530, out _out531, out _out532, out _out533);
                  _1070_recursiveGen = _out530;
                  _1071_recOwned = _out531;
                  _1072_recErased = _out532;
                  _1073_recIdents = _out533;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1071_recOwned;
                  isErased = _1072_recErased;
                  readIdents = _1073_recIdents;
                }
              } else if (_source38.is_Map) {
                DAST._IType _1074___mcc_h567 = _source38.dtor_key;
                DAST._IType _1075___mcc_h568 = _source38.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1076_recursiveGen;
                  bool _1077_recOwned;
                  bool _1078_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1079_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out534;
                  bool _out535;
                  bool _out536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out534, out _out535, out _out536, out _out537);
                  _1076_recursiveGen = _out534;
                  _1077_recOwned = _out535;
                  _1078_recErased = _out536;
                  _1079_recIdents = _out537;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1076_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1077_recOwned;
                  isErased = _1078_recErased;
                  readIdents = _1079_recIdents;
                }
              } else if (_source38.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1080___mcc_h571 = _source38.dtor_args;
                DAST._IType _1081___mcc_h572 = _source38.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1082_recursiveGen;
                  bool _1083_recOwned;
                  bool _1084_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1085_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out538;
                  bool _out539;
                  bool _out540;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540, out _out541);
                  _1082_recursiveGen = _out538;
                  _1083_recOwned = _out539;
                  _1084_recErased = _out540;
                  _1085_recIdents = _out541;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1082_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1083_recOwned;
                  isErased = _1084_recErased;
                  readIdents = _1085_recIdents;
                }
              } else if (_source38.is_Primitive) {
                DAST._IPrimitive _1086___mcc_h575 = _source38.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1087_recursiveGen;
                  bool _1088_recOwned;
                  bool _1089_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1090_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out542;
                  bool _out543;
                  bool _out544;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out545;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out542, out _out543, out _out544, out _out545);
                  _1087_recursiveGen = _out542;
                  _1088_recOwned = _out543;
                  _1089_recErased = _out544;
                  _1090_recIdents = _out545;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1087_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1088_recOwned;
                  isErased = _1089_recErased;
                  readIdents = _1090_recIdents;
                }
              } else if (_source38.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1091___mcc_h577 = _source38.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1092_recursiveGen;
                  bool _1093_recOwned;
                  bool _1094_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1095_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out546;
                  bool _out547;
                  bool _out548;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out546, out _out547, out _out548, out _out549);
                  _1092_recursiveGen = _out546;
                  _1093_recOwned = _out547;
                  _1094_recErased = _out548;
                  _1095_recIdents = _out549;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1093_recOwned;
                  isErased = _1094_recErased;
                  readIdents = _1095_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1096___mcc_h579 = _source38.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1097_recursiveGen;
                  bool _1098_recOwned;
                  bool _1099_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1100_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out550;
                  bool _out551;
                  bool _out552;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out553;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out550, out _out551, out _out552, out _out553);
                  _1097_recursiveGen = _out550;
                  _1098_recOwned = _out551;
                  _1099_recErased = _out552;
                  _1100_recIdents = _out553;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1097_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1098_recOwned;
                  isErased = _1099_recErased;
                  readIdents = _1100_recIdents;
                }
              }
            } else if (_source28.is_Array) {
              DAST._IType _1101___mcc_h581 = _source28.dtor_element;
              BigInteger _1102___mcc_h582 = _source28.dtor_dims;
              DAST._IType _source40 = _676___mcc_h306;
              if (_source40.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1103___mcc_h589 = _source40.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1104___mcc_h590 = _source40.dtor_typeArgs;
                DAST._IResolvedType _1105___mcc_h591 = _source40.dtor_resolved;
                DAST._IResolvedType _source41 = _1105___mcc_h591;
                if (_source41.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1106___mcc_h595 = _source41.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1107_recursiveGen;
                    bool _1108_recOwned;
                    bool _1109_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1110_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out554;
                    bool _out555;
                    bool _out556;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out557;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out554, out _out555, out _out556, out _out557);
                    _1107_recursiveGen = _out554;
                    _1108_recOwned = _out555;
                    _1109_recErased = _out556;
                    _1110_recIdents = _out557;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1107_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1108_recOwned;
                    isErased = _1109_recErased;
                    readIdents = _1110_recIdents;
                  }
                } else if (_source41.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1111___mcc_h597 = _source41.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1112_recursiveGen;
                    bool _1113_recOwned;
                    bool _1114_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1115_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out558;
                    bool _out559;
                    bool _out560;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out561;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out558, out _out559, out _out560, out _out561);
                    _1112_recursiveGen = _out558;
                    _1113_recOwned = _out559;
                    _1114_recErased = _out560;
                    _1115_recIdents = _out561;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1112_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1113_recOwned;
                    isErased = _1114_recErased;
                    readIdents = _1115_recIdents;
                  }
                } else {
                  DAST._IType _1116___mcc_h599 = _source41.dtor_Newtype_a0;
                  DAST._IType _1117_b = _1116___mcc_h599;
                  {
                    if (object.Equals(_669_fromTpe, _1117_b)) {
                      Dafny.ISequence<Dafny.Rune> _1118_recursiveGen;
                      bool _1119_recOwned;
                      bool _1120_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1121_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out562;
                      bool _out563;
                      bool _out564;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                      _1118_recursiveGen = _out562;
                      _1119_recOwned = _out563;
                      _1120_recErased = _out564;
                      _1121_recIdents = _out565;
                      Dafny.ISequence<Dafny.Rune> _1122_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out566;
                      _out566 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _1122_rhsType = _out566;
                      Dafny.ISequence<Dafny.Rune> _1123_uneraseFn;
                      _1123_uneraseFn = ((_1119_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1122_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1123_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1118_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1119_recOwned;
                      isErased = false;
                      readIdents = _1121_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out567;
                      bool _out568;
                      bool _out569;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1117_b), _1117_b, _668_toTpe), selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                      s = _out567;
                      isOwned = _out568;
                      isErased = _out569;
                      readIdents = _out570;
                    }
                  }
                }
              } else if (_source40.is_Nullable) {
                DAST._IType _1124___mcc_h601 = _source40.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1125_recursiveGen;
                  bool _1126_recOwned;
                  bool _1127_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1128_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out571;
                  bool _out572;
                  bool _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                  _1125_recursiveGen = _out571;
                  _1126_recOwned = _out572;
                  _1127_recErased = _out573;
                  _1128_recIdents = _out574;
                  if (!(_1126_recOwned)) {
                    _1125_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1125_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1125_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1127_recErased;
                  readIdents = _1128_recIdents;
                }
              } else if (_source40.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1129___mcc_h603 = _source40.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1130_recursiveGen;
                  bool _1131_recOwned;
                  bool _1132_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1133_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out575;
                  bool _out576;
                  bool _out577;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                  _1130_recursiveGen = _out575;
                  _1131_recOwned = _out576;
                  _1132_recErased = _out577;
                  _1133_recIdents = _out578;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1130_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1131_recOwned;
                  isErased = _1132_recErased;
                  readIdents = _1133_recIdents;
                }
              } else if (_source40.is_Array) {
                DAST._IType _1134___mcc_h605 = _source40.dtor_element;
                BigInteger _1135___mcc_h606 = _source40.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1136_recursiveGen;
                  bool _1137_recOwned;
                  bool _1138_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1139_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out579;
                  bool _out580;
                  bool _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out579, out _out580, out _out581, out _out582);
                  _1136_recursiveGen = _out579;
                  _1137_recOwned = _out580;
                  _1138_recErased = _out581;
                  _1139_recIdents = _out582;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1136_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1137_recOwned;
                  isErased = _1138_recErased;
                  readIdents = _1139_recIdents;
                }
              } else if (_source40.is_Seq) {
                DAST._IType _1140___mcc_h609 = _source40.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1141_recursiveGen;
                  bool _1142_recOwned;
                  bool _1143_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1144_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out583;
                  bool _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out583, out _out584, out _out585, out _out586);
                  _1141_recursiveGen = _out583;
                  _1142_recOwned = _out584;
                  _1143_recErased = _out585;
                  _1144_recIdents = _out586;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1141_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1142_recOwned;
                  isErased = _1143_recErased;
                  readIdents = _1144_recIdents;
                }
              } else if (_source40.is_Set) {
                DAST._IType _1145___mcc_h611 = _source40.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1146_recursiveGen;
                  bool _1147_recOwned;
                  bool _1148_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1149_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out587;
                  bool _out588;
                  bool _out589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589, out _out590);
                  _1146_recursiveGen = _out587;
                  _1147_recOwned = _out588;
                  _1148_recErased = _out589;
                  _1149_recIdents = _out590;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1146_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1147_recOwned;
                  isErased = _1148_recErased;
                  readIdents = _1149_recIdents;
                }
              } else if (_source40.is_Multiset) {
                DAST._IType _1150___mcc_h613 = _source40.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1151_recursiveGen;
                  bool _1152_recOwned;
                  bool _1153_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1154_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out591;
                  bool _out592;
                  bool _out593;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out591, out _out592, out _out593, out _out594);
                  _1151_recursiveGen = _out591;
                  _1152_recOwned = _out592;
                  _1153_recErased = _out593;
                  _1154_recIdents = _out594;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1151_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1152_recOwned;
                  isErased = _1153_recErased;
                  readIdents = _1154_recIdents;
                }
              } else if (_source40.is_Map) {
                DAST._IType _1155___mcc_h615 = _source40.dtor_key;
                DAST._IType _1156___mcc_h616 = _source40.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1157_recursiveGen;
                  bool _1158_recOwned;
                  bool _1159_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1160_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out595;
                  bool _out596;
                  bool _out597;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out595, out _out596, out _out597, out _out598);
                  _1157_recursiveGen = _out595;
                  _1158_recOwned = _out596;
                  _1159_recErased = _out597;
                  _1160_recIdents = _out598;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1157_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1158_recOwned;
                  isErased = _1159_recErased;
                  readIdents = _1160_recIdents;
                }
              } else if (_source40.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1161___mcc_h619 = _source40.dtor_args;
                DAST._IType _1162___mcc_h620 = _source40.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1163_recursiveGen;
                  bool _1164_recOwned;
                  bool _1165_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1166_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out599;
                  bool _out600;
                  bool _out601;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out599, out _out600, out _out601, out _out602);
                  _1163_recursiveGen = _out599;
                  _1164_recOwned = _out600;
                  _1165_recErased = _out601;
                  _1166_recIdents = _out602;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1163_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1164_recOwned;
                  isErased = _1165_recErased;
                  readIdents = _1166_recIdents;
                }
              } else if (_source40.is_Primitive) {
                DAST._IPrimitive _1167___mcc_h623 = _source40.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1168_recursiveGen;
                  bool _1169_recOwned;
                  bool _1170_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1171_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out603;
                  bool _out604;
                  bool _out605;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out606;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out603, out _out604, out _out605, out _out606);
                  _1168_recursiveGen = _out603;
                  _1169_recOwned = _out604;
                  _1170_recErased = _out605;
                  _1171_recIdents = _out606;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1168_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1169_recOwned;
                  isErased = _1170_recErased;
                  readIdents = _1171_recIdents;
                }
              } else if (_source40.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1172___mcc_h625 = _source40.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1173_recursiveGen;
                  bool _1174_recOwned;
                  bool _1175_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1176_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out607;
                  bool _out608;
                  bool _out609;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out607, out _out608, out _out609, out _out610);
                  _1173_recursiveGen = _out607;
                  _1174_recOwned = _out608;
                  _1175_recErased = _out609;
                  _1176_recIdents = _out610;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1173_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1174_recOwned;
                  isErased = _1175_recErased;
                  readIdents = _1176_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1177___mcc_h627 = _source40.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1178_recursiveGen;
                  bool _1179_recOwned;
                  bool _1180_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1181_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out611;
                  bool _out612;
                  bool _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out611, out _out612, out _out613, out _out614);
                  _1178_recursiveGen = _out611;
                  _1179_recOwned = _out612;
                  _1180_recErased = _out613;
                  _1181_recIdents = _out614;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1178_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1179_recOwned;
                  isErased = _1180_recErased;
                  readIdents = _1181_recIdents;
                }
              }
            } else if (_source28.is_Seq) {
              DAST._IType _1182___mcc_h629 = _source28.dtor_element;
              DAST._IType _source42 = _676___mcc_h306;
              if (_source42.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1183___mcc_h633 = _source42.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1184___mcc_h634 = _source42.dtor_typeArgs;
                DAST._IResolvedType _1185___mcc_h635 = _source42.dtor_resolved;
                DAST._IResolvedType _source43 = _1185___mcc_h635;
                if (_source43.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1186___mcc_h639 = _source43.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1187_recursiveGen;
                    bool _1188_recOwned;
                    bool _1189_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1190_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out615;
                    bool _out616;
                    bool _out617;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out618;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out615, out _out616, out _out617, out _out618);
                    _1187_recursiveGen = _out615;
                    _1188_recOwned = _out616;
                    _1189_recErased = _out617;
                    _1190_recIdents = _out618;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1187_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1188_recOwned;
                    isErased = _1189_recErased;
                    readIdents = _1190_recIdents;
                  }
                } else if (_source43.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1191___mcc_h641 = _source43.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1192_recursiveGen;
                    bool _1193_recOwned;
                    bool _1194_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1195_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out619;
                    bool _out620;
                    bool _out621;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out619, out _out620, out _out621, out _out622);
                    _1192_recursiveGen = _out619;
                    _1193_recOwned = _out620;
                    _1194_recErased = _out621;
                    _1195_recIdents = _out622;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1192_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1193_recOwned;
                    isErased = _1194_recErased;
                    readIdents = _1195_recIdents;
                  }
                } else {
                  DAST._IType _1196___mcc_h643 = _source43.dtor_Newtype_a0;
                  DAST._IType _1197_b = _1196___mcc_h643;
                  {
                    if (object.Equals(_669_fromTpe, _1197_b)) {
                      Dafny.ISequence<Dafny.Rune> _1198_recursiveGen;
                      bool _1199_recOwned;
                      bool _1200_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1201_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out623;
                      bool _out624;
                      bool _out625;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                      _1198_recursiveGen = _out623;
                      _1199_recOwned = _out624;
                      _1200_recErased = _out625;
                      _1201_recIdents = _out626;
                      Dafny.ISequence<Dafny.Rune> _1202_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out627;
                      _out627 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _1202_rhsType = _out627;
                      Dafny.ISequence<Dafny.Rune> _1203_uneraseFn;
                      _1203_uneraseFn = ((_1199_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1202_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1203_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1198_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1199_recOwned;
                      isErased = false;
                      readIdents = _1201_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out628;
                      bool _out629;
                      bool _out630;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1197_b), _1197_b, _668_toTpe), selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                      s = _out628;
                      isOwned = _out629;
                      isErased = _out630;
                      readIdents = _out631;
                    }
                  }
                }
              } else if (_source42.is_Nullable) {
                DAST._IType _1204___mcc_h645 = _source42.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1205_recursiveGen;
                  bool _1206_recOwned;
                  bool _1207_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1208_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out632;
                  bool _out633;
                  bool _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                  _1205_recursiveGen = _out632;
                  _1206_recOwned = _out633;
                  _1207_recErased = _out634;
                  _1208_recIdents = _out635;
                  if (!(_1206_recOwned)) {
                    _1205_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1205_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1205_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1207_recErased;
                  readIdents = _1208_recIdents;
                }
              } else if (_source42.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1209___mcc_h647 = _source42.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1210_recursiveGen;
                  bool _1211_recOwned;
                  bool _1212_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1213_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out636;
                  bool _out637;
                  bool _out638;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                  _1210_recursiveGen = _out636;
                  _1211_recOwned = _out637;
                  _1212_recErased = _out638;
                  _1213_recIdents = _out639;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1210_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1211_recOwned;
                  isErased = _1212_recErased;
                  readIdents = _1213_recIdents;
                }
              } else if (_source42.is_Array) {
                DAST._IType _1214___mcc_h649 = _source42.dtor_element;
                BigInteger _1215___mcc_h650 = _source42.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1216_recursiveGen;
                  bool _1217_recOwned;
                  bool _1218_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1219_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out640;
                  bool _out641;
                  bool _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out640, out _out641, out _out642, out _out643);
                  _1216_recursiveGen = _out640;
                  _1217_recOwned = _out641;
                  _1218_recErased = _out642;
                  _1219_recIdents = _out643;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1216_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1217_recOwned;
                  isErased = _1218_recErased;
                  readIdents = _1219_recIdents;
                }
              } else if (_source42.is_Seq) {
                DAST._IType _1220___mcc_h653 = _source42.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1221_recursiveGen;
                  bool _1222_recOwned;
                  bool _1223_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1224_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out644;
                  bool _out645;
                  bool _out646;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out644, out _out645, out _out646, out _out647);
                  _1221_recursiveGen = _out644;
                  _1222_recOwned = _out645;
                  _1223_recErased = _out646;
                  _1224_recIdents = _out647;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1221_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1222_recOwned;
                  isErased = _1223_recErased;
                  readIdents = _1224_recIdents;
                }
              } else if (_source42.is_Set) {
                DAST._IType _1225___mcc_h655 = _source42.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1226_recursiveGen;
                  bool _1227_recOwned;
                  bool _1228_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1229_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out648;
                  bool _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out648, out _out649, out _out650, out _out651);
                  _1226_recursiveGen = _out648;
                  _1227_recOwned = _out649;
                  _1228_recErased = _out650;
                  _1229_recIdents = _out651;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1226_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1227_recOwned;
                  isErased = _1228_recErased;
                  readIdents = _1229_recIdents;
                }
              } else if (_source42.is_Multiset) {
                DAST._IType _1230___mcc_h657 = _source42.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1231_recursiveGen;
                  bool _1232_recOwned;
                  bool _1233_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1234_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out652;
                  bool _out653;
                  bool _out654;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654, out _out655);
                  _1231_recursiveGen = _out652;
                  _1232_recOwned = _out653;
                  _1233_recErased = _out654;
                  _1234_recIdents = _out655;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1231_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1232_recOwned;
                  isErased = _1233_recErased;
                  readIdents = _1234_recIdents;
                }
              } else if (_source42.is_Map) {
                DAST._IType _1235___mcc_h659 = _source42.dtor_key;
                DAST._IType _1236___mcc_h660 = _source42.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1237_recursiveGen;
                  bool _1238_recOwned;
                  bool _1239_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1240_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out656;
                  bool _out657;
                  bool _out658;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out656, out _out657, out _out658, out _out659);
                  _1237_recursiveGen = _out656;
                  _1238_recOwned = _out657;
                  _1239_recErased = _out658;
                  _1240_recIdents = _out659;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1237_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1238_recOwned;
                  isErased = _1239_recErased;
                  readIdents = _1240_recIdents;
                }
              } else if (_source42.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1241___mcc_h663 = _source42.dtor_args;
                DAST._IType _1242___mcc_h664 = _source42.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1243_recursiveGen;
                  bool _1244_recOwned;
                  bool _1245_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1246_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out660;
                  bool _out661;
                  bool _out662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out660, out _out661, out _out662, out _out663);
                  _1243_recursiveGen = _out660;
                  _1244_recOwned = _out661;
                  _1245_recErased = _out662;
                  _1246_recIdents = _out663;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1244_recOwned;
                  isErased = _1245_recErased;
                  readIdents = _1246_recIdents;
                }
              } else if (_source42.is_Primitive) {
                DAST._IPrimitive _1247___mcc_h667 = _source42.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1248_recursiveGen;
                  bool _1249_recOwned;
                  bool _1250_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1251_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out664;
                  bool _out665;
                  bool _out666;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out667;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out664, out _out665, out _out666, out _out667);
                  _1248_recursiveGen = _out664;
                  _1249_recOwned = _out665;
                  _1250_recErased = _out666;
                  _1251_recIdents = _out667;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1248_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1249_recOwned;
                  isErased = _1250_recErased;
                  readIdents = _1251_recIdents;
                }
              } else if (_source42.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1252___mcc_h669 = _source42.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1253_recursiveGen;
                  bool _1254_recOwned;
                  bool _1255_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1256_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out668;
                  bool _out669;
                  bool _out670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out668, out _out669, out _out670, out _out671);
                  _1253_recursiveGen = _out668;
                  _1254_recOwned = _out669;
                  _1255_recErased = _out670;
                  _1256_recIdents = _out671;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1253_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1254_recOwned;
                  isErased = _1255_recErased;
                  readIdents = _1256_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1257___mcc_h671 = _source42.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1258_recursiveGen;
                  bool _1259_recOwned;
                  bool _1260_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1261_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out672;
                  bool _out673;
                  bool _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out672, out _out673, out _out674, out _out675);
                  _1258_recursiveGen = _out672;
                  _1259_recOwned = _out673;
                  _1260_recErased = _out674;
                  _1261_recIdents = _out675;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1259_recOwned;
                  isErased = _1260_recErased;
                  readIdents = _1261_recIdents;
                }
              }
            } else if (_source28.is_Set) {
              DAST._IType _1262___mcc_h673 = _source28.dtor_element;
              DAST._IType _source44 = _676___mcc_h306;
              if (_source44.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1263___mcc_h677 = _source44.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1264___mcc_h678 = _source44.dtor_typeArgs;
                DAST._IResolvedType _1265___mcc_h679 = _source44.dtor_resolved;
                DAST._IResolvedType _source45 = _1265___mcc_h679;
                if (_source45.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1266___mcc_h683 = _source45.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1267_recursiveGen;
                    bool _1268_recOwned;
                    bool _1269_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1270_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out676;
                    bool _out677;
                    bool _out678;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out679;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out676, out _out677, out _out678, out _out679);
                    _1267_recursiveGen = _out676;
                    _1268_recOwned = _out677;
                    _1269_recErased = _out678;
                    _1270_recIdents = _out679;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1268_recOwned;
                    isErased = _1269_recErased;
                    readIdents = _1270_recIdents;
                  }
                } else if (_source45.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1271___mcc_h685 = _source45.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1272_recursiveGen;
                    bool _1273_recOwned;
                    bool _1274_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1275_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out680;
                    bool _out681;
                    bool _out682;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out683;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out680, out _out681, out _out682, out _out683);
                    _1272_recursiveGen = _out680;
                    _1273_recOwned = _out681;
                    _1274_recErased = _out682;
                    _1275_recIdents = _out683;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1272_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1273_recOwned;
                    isErased = _1274_recErased;
                    readIdents = _1275_recIdents;
                  }
                } else {
                  DAST._IType _1276___mcc_h687 = _source45.dtor_Newtype_a0;
                  DAST._IType _1277_b = _1276___mcc_h687;
                  {
                    if (object.Equals(_669_fromTpe, _1277_b)) {
                      Dafny.ISequence<Dafny.Rune> _1278_recursiveGen;
                      bool _1279_recOwned;
                      bool _1280_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1281_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out684;
                      bool _out685;
                      bool _out686;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                      _1278_recursiveGen = _out684;
                      _1279_recOwned = _out685;
                      _1280_recErased = _out686;
                      _1281_recIdents = _out687;
                      Dafny.ISequence<Dafny.Rune> _1282_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out688;
                      _out688 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _1282_rhsType = _out688;
                      Dafny.ISequence<Dafny.Rune> _1283_uneraseFn;
                      _1283_uneraseFn = ((_1279_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1282_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1283_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1278_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1279_recOwned;
                      isErased = false;
                      readIdents = _1281_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out689;
                      bool _out690;
                      bool _out691;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1277_b), _1277_b, _668_toTpe), selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                      s = _out689;
                      isOwned = _out690;
                      isErased = _out691;
                      readIdents = _out692;
                    }
                  }
                }
              } else if (_source44.is_Nullable) {
                DAST._IType _1284___mcc_h689 = _source44.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1285_recursiveGen;
                  bool _1286_recOwned;
                  bool _1287_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1288_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out693;
                  bool _out694;
                  bool _out695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                  _1285_recursiveGen = _out693;
                  _1286_recOwned = _out694;
                  _1287_recErased = _out695;
                  _1288_recIdents = _out696;
                  if (!(_1286_recOwned)) {
                    _1285_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1285_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1285_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1287_recErased;
                  readIdents = _1288_recIdents;
                }
              } else if (_source44.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1289___mcc_h691 = _source44.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1290_recursiveGen;
                  bool _1291_recOwned;
                  bool _1292_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1293_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out697;
                  bool _out698;
                  bool _out699;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                  _1290_recursiveGen = _out697;
                  _1291_recOwned = _out698;
                  _1292_recErased = _out699;
                  _1293_recIdents = _out700;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1290_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1291_recOwned;
                  isErased = _1292_recErased;
                  readIdents = _1293_recIdents;
                }
              } else if (_source44.is_Array) {
                DAST._IType _1294___mcc_h693 = _source44.dtor_element;
                BigInteger _1295___mcc_h694 = _source44.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1296_recursiveGen;
                  bool _1297_recOwned;
                  bool _1298_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1299_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out701;
                  bool _out702;
                  bool _out703;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out704;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703, out _out704);
                  _1296_recursiveGen = _out701;
                  _1297_recOwned = _out702;
                  _1298_recErased = _out703;
                  _1299_recIdents = _out704;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1296_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1297_recOwned;
                  isErased = _1298_recErased;
                  readIdents = _1299_recIdents;
                }
              } else if (_source44.is_Seq) {
                DAST._IType _1300___mcc_h697 = _source44.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1301_recursiveGen;
                  bool _1302_recOwned;
                  bool _1303_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1304_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out705;
                  bool _out706;
                  bool _out707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out708;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out705, out _out706, out _out707, out _out708);
                  _1301_recursiveGen = _out705;
                  _1302_recOwned = _out706;
                  _1303_recErased = _out707;
                  _1304_recIdents = _out708;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1302_recOwned;
                  isErased = _1303_recErased;
                  readIdents = _1304_recIdents;
                }
              } else if (_source44.is_Set) {
                DAST._IType _1305___mcc_h699 = _source44.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1306_recursiveGen;
                  bool _1307_recOwned;
                  bool _1308_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1309_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out709;
                  bool _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out709, out _out710, out _out711, out _out712);
                  _1306_recursiveGen = _out709;
                  _1307_recOwned = _out710;
                  _1308_recErased = _out711;
                  _1309_recIdents = _out712;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1306_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1307_recOwned;
                  isErased = _1308_recErased;
                  readIdents = _1309_recIdents;
                }
              } else if (_source44.is_Multiset) {
                DAST._IType _1310___mcc_h701 = _source44.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1311_recursiveGen;
                  bool _1312_recOwned;
                  bool _1313_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1314_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out713;
                  bool _out714;
                  bool _out715;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715, out _out716);
                  _1311_recursiveGen = _out713;
                  _1312_recOwned = _out714;
                  _1313_recErased = _out715;
                  _1314_recIdents = _out716;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1311_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1312_recOwned;
                  isErased = _1313_recErased;
                  readIdents = _1314_recIdents;
                }
              } else if (_source44.is_Map) {
                DAST._IType _1315___mcc_h703 = _source44.dtor_key;
                DAST._IType _1316___mcc_h704 = _source44.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1317_recursiveGen;
                  bool _1318_recOwned;
                  bool _1319_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1320_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out717;
                  bool _out718;
                  bool _out719;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out720;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out717, out _out718, out _out719, out _out720);
                  _1317_recursiveGen = _out717;
                  _1318_recOwned = _out718;
                  _1319_recErased = _out719;
                  _1320_recIdents = _out720;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1317_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1318_recOwned;
                  isErased = _1319_recErased;
                  readIdents = _1320_recIdents;
                }
              } else if (_source44.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1321___mcc_h707 = _source44.dtor_args;
                DAST._IType _1322___mcc_h708 = _source44.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1323_recursiveGen;
                  bool _1324_recOwned;
                  bool _1325_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1326_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out721;
                  bool _out722;
                  bool _out723;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out721, out _out722, out _out723, out _out724);
                  _1323_recursiveGen = _out721;
                  _1324_recOwned = _out722;
                  _1325_recErased = _out723;
                  _1326_recIdents = _out724;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1323_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1324_recOwned;
                  isErased = _1325_recErased;
                  readIdents = _1326_recIdents;
                }
              } else if (_source44.is_Primitive) {
                DAST._IPrimitive _1327___mcc_h711 = _source44.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1328_recursiveGen;
                  bool _1329_recOwned;
                  bool _1330_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1331_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out725;
                  bool _out726;
                  bool _out727;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out728;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out725, out _out726, out _out727, out _out728);
                  _1328_recursiveGen = _out725;
                  _1329_recOwned = _out726;
                  _1330_recErased = _out727;
                  _1331_recIdents = _out728;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1328_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1329_recOwned;
                  isErased = _1330_recErased;
                  readIdents = _1331_recIdents;
                }
              } else if (_source44.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1332___mcc_h713 = _source44.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1333_recursiveGen;
                  bool _1334_recOwned;
                  bool _1335_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1336_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out729;
                  bool _out730;
                  bool _out731;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out732;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out729, out _out730, out _out731, out _out732);
                  _1333_recursiveGen = _out729;
                  _1334_recOwned = _out730;
                  _1335_recErased = _out731;
                  _1336_recIdents = _out732;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1333_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1334_recOwned;
                  isErased = _1335_recErased;
                  readIdents = _1336_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1337___mcc_h715 = _source44.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1338_recursiveGen;
                  bool _1339_recOwned;
                  bool _1340_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1341_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out733;
                  bool _out734;
                  bool _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out733, out _out734, out _out735, out _out736);
                  _1338_recursiveGen = _out733;
                  _1339_recOwned = _out734;
                  _1340_recErased = _out735;
                  _1341_recIdents = _out736;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1338_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1339_recOwned;
                  isErased = _1340_recErased;
                  readIdents = _1341_recIdents;
                }
              }
            } else if (_source28.is_Multiset) {
              DAST._IType _1342___mcc_h717 = _source28.dtor_element;
              DAST._IType _source46 = _676___mcc_h306;
              if (_source46.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1343___mcc_h721 = _source46.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1344___mcc_h722 = _source46.dtor_typeArgs;
                DAST._IResolvedType _1345___mcc_h723 = _source46.dtor_resolved;
                DAST._IResolvedType _source47 = _1345___mcc_h723;
                if (_source47.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1346___mcc_h727 = _source47.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1347_recursiveGen;
                    bool _1348_recOwned;
                    bool _1349_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1350_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out737;
                    bool _out738;
                    bool _out739;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out737, out _out738, out _out739, out _out740);
                    _1347_recursiveGen = _out737;
                    _1348_recOwned = _out738;
                    _1349_recErased = _out739;
                    _1350_recIdents = _out740;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1347_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1348_recOwned;
                    isErased = _1349_recErased;
                    readIdents = _1350_recIdents;
                  }
                } else if (_source47.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1351___mcc_h729 = _source47.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1352_recursiveGen;
                    bool _1353_recOwned;
                    bool _1354_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1355_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out741;
                    bool _out742;
                    bool _out743;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out744;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out741, out _out742, out _out743, out _out744);
                    _1352_recursiveGen = _out741;
                    _1353_recOwned = _out742;
                    _1354_recErased = _out743;
                    _1355_recIdents = _out744;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1352_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1353_recOwned;
                    isErased = _1354_recErased;
                    readIdents = _1355_recIdents;
                  }
                } else {
                  DAST._IType _1356___mcc_h731 = _source47.dtor_Newtype_a0;
                  DAST._IType _1357_b = _1356___mcc_h731;
                  {
                    if (object.Equals(_669_fromTpe, _1357_b)) {
                      Dafny.ISequence<Dafny.Rune> _1358_recursiveGen;
                      bool _1359_recOwned;
                      bool _1360_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1361_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out745;
                      bool _out746;
                      bool _out747;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                      _1358_recursiveGen = _out745;
                      _1359_recOwned = _out746;
                      _1360_recErased = _out747;
                      _1361_recIdents = _out748;
                      Dafny.ISequence<Dafny.Rune> _1362_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out749;
                      _out749 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _1362_rhsType = _out749;
                      Dafny.ISequence<Dafny.Rune> _1363_uneraseFn;
                      _1363_uneraseFn = ((_1359_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1362_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1363_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1359_recOwned;
                      isErased = false;
                      readIdents = _1361_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out750;
                      bool _out751;
                      bool _out752;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1357_b), _1357_b, _668_toTpe), selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                      s = _out750;
                      isOwned = _out751;
                      isErased = _out752;
                      readIdents = _out753;
                    }
                  }
                }
              } else if (_source46.is_Nullable) {
                DAST._IType _1364___mcc_h733 = _source46.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1365_recursiveGen;
                  bool _1366_recOwned;
                  bool _1367_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1368_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out754;
                  bool _out755;
                  bool _out756;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                  _1365_recursiveGen = _out754;
                  _1366_recOwned = _out755;
                  _1367_recErased = _out756;
                  _1368_recIdents = _out757;
                  if (!(_1366_recOwned)) {
                    _1365_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1365_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1365_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1367_recErased;
                  readIdents = _1368_recIdents;
                }
              } else if (_source46.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1369___mcc_h735 = _source46.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1370_recursiveGen;
                  bool _1371_recOwned;
                  bool _1372_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1373_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out758;
                  bool _out759;
                  bool _out760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                  _1370_recursiveGen = _out758;
                  _1371_recOwned = _out759;
                  _1372_recErased = _out760;
                  _1373_recIdents = _out761;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1371_recOwned;
                  isErased = _1372_recErased;
                  readIdents = _1373_recIdents;
                }
              } else if (_source46.is_Array) {
                DAST._IType _1374___mcc_h737 = _source46.dtor_element;
                BigInteger _1375___mcc_h738 = _source46.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1376_recursiveGen;
                  bool _1377_recOwned;
                  bool _1378_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1379_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out762;
                  bool _out763;
                  bool _out764;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out765;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764, out _out765);
                  _1376_recursiveGen = _out762;
                  _1377_recOwned = _out763;
                  _1378_recErased = _out764;
                  _1379_recIdents = _out765;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1376_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1377_recOwned;
                  isErased = _1378_recErased;
                  readIdents = _1379_recIdents;
                }
              } else if (_source46.is_Seq) {
                DAST._IType _1380___mcc_h741 = _source46.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1381_recursiveGen;
                  bool _1382_recOwned;
                  bool _1383_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1384_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out766;
                  bool _out767;
                  bool _out768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out766, out _out767, out _out768, out _out769);
                  _1381_recursiveGen = _out766;
                  _1382_recOwned = _out767;
                  _1383_recErased = _out768;
                  _1384_recIdents = _out769;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1381_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1382_recOwned;
                  isErased = _1383_recErased;
                  readIdents = _1384_recIdents;
                }
              } else if (_source46.is_Set) {
                DAST._IType _1385___mcc_h743 = _source46.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1386_recursiveGen;
                  bool _1387_recOwned;
                  bool _1388_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1389_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out770;
                  bool _out771;
                  bool _out772;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out770, out _out771, out _out772, out _out773);
                  _1386_recursiveGen = _out770;
                  _1387_recOwned = _out771;
                  _1388_recErased = _out772;
                  _1389_recIdents = _out773;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1386_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1387_recOwned;
                  isErased = _1388_recErased;
                  readIdents = _1389_recIdents;
                }
              } else if (_source46.is_Multiset) {
                DAST._IType _1390___mcc_h745 = _source46.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1391_recursiveGen;
                  bool _1392_recOwned;
                  bool _1393_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1394_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out774;
                  bool _out775;
                  bool _out776;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776, out _out777);
                  _1391_recursiveGen = _out774;
                  _1392_recOwned = _out775;
                  _1393_recErased = _out776;
                  _1394_recIdents = _out777;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1391_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1392_recOwned;
                  isErased = _1393_recErased;
                  readIdents = _1394_recIdents;
                }
              } else if (_source46.is_Map) {
                DAST._IType _1395___mcc_h747 = _source46.dtor_key;
                DAST._IType _1396___mcc_h748 = _source46.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1397_recursiveGen;
                  bool _1398_recOwned;
                  bool _1399_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1400_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out778;
                  bool _out779;
                  bool _out780;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out778, out _out779, out _out780, out _out781);
                  _1397_recursiveGen = _out778;
                  _1398_recOwned = _out779;
                  _1399_recErased = _out780;
                  _1400_recIdents = _out781;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1397_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1398_recOwned;
                  isErased = _1399_recErased;
                  readIdents = _1400_recIdents;
                }
              } else if (_source46.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1401___mcc_h751 = _source46.dtor_args;
                DAST._IType _1402___mcc_h752 = _source46.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1403_recursiveGen;
                  bool _1404_recOwned;
                  bool _1405_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1406_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out782;
                  bool _out783;
                  bool _out784;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out782, out _out783, out _out784, out _out785);
                  _1403_recursiveGen = _out782;
                  _1404_recOwned = _out783;
                  _1405_recErased = _out784;
                  _1406_recIdents = _out785;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1403_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1404_recOwned;
                  isErased = _1405_recErased;
                  readIdents = _1406_recIdents;
                }
              } else if (_source46.is_Primitive) {
                DAST._IPrimitive _1407___mcc_h755 = _source46.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1408_recursiveGen;
                  bool _1409_recOwned;
                  bool _1410_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1411_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out786;
                  bool _out787;
                  bool _out788;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out789;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out786, out _out787, out _out788, out _out789);
                  _1408_recursiveGen = _out786;
                  _1409_recOwned = _out787;
                  _1410_recErased = _out788;
                  _1411_recIdents = _out789;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1408_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1409_recOwned;
                  isErased = _1410_recErased;
                  readIdents = _1411_recIdents;
                }
              } else if (_source46.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1412___mcc_h757 = _source46.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1413_recursiveGen;
                  bool _1414_recOwned;
                  bool _1415_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1416_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out790;
                  bool _out791;
                  bool _out792;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out790, out _out791, out _out792, out _out793);
                  _1413_recursiveGen = _out790;
                  _1414_recOwned = _out791;
                  _1415_recErased = _out792;
                  _1416_recIdents = _out793;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1413_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1414_recOwned;
                  isErased = _1415_recErased;
                  readIdents = _1416_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1417___mcc_h759 = _source46.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1418_recursiveGen;
                  bool _1419_recOwned;
                  bool _1420_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1421_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out794;
                  bool _out795;
                  bool _out796;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out794, out _out795, out _out796, out _out797);
                  _1418_recursiveGen = _out794;
                  _1419_recOwned = _out795;
                  _1420_recErased = _out796;
                  _1421_recIdents = _out797;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1418_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1419_recOwned;
                  isErased = _1420_recErased;
                  readIdents = _1421_recIdents;
                }
              }
            } else if (_source28.is_Map) {
              DAST._IType _1422___mcc_h761 = _source28.dtor_key;
              DAST._IType _1423___mcc_h762 = _source28.dtor_value;
              DAST._IType _source48 = _676___mcc_h306;
              if (_source48.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1424___mcc_h769 = _source48.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1425___mcc_h770 = _source48.dtor_typeArgs;
                DAST._IResolvedType _1426___mcc_h771 = _source48.dtor_resolved;
                DAST._IResolvedType _source49 = _1426___mcc_h771;
                if (_source49.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1427___mcc_h775 = _source49.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1428_recursiveGen;
                    bool _1429_recOwned;
                    bool _1430_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1431_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out798;
                    bool _out799;
                    bool _out800;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out801;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out798, out _out799, out _out800, out _out801);
                    _1428_recursiveGen = _out798;
                    _1429_recOwned = _out799;
                    _1430_recErased = _out800;
                    _1431_recIdents = _out801;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1428_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1429_recOwned;
                    isErased = _1430_recErased;
                    readIdents = _1431_recIdents;
                  }
                } else if (_source49.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1432___mcc_h777 = _source49.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1433_recursiveGen;
                    bool _1434_recOwned;
                    bool _1435_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1436_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out802;
                    bool _out803;
                    bool _out804;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out805;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out802, out _out803, out _out804, out _out805);
                    _1433_recursiveGen = _out802;
                    _1434_recOwned = _out803;
                    _1435_recErased = _out804;
                    _1436_recIdents = _out805;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1433_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1434_recOwned;
                    isErased = _1435_recErased;
                    readIdents = _1436_recIdents;
                  }
                } else {
                  DAST._IType _1437___mcc_h779 = _source49.dtor_Newtype_a0;
                  DAST._IType _1438_b = _1437___mcc_h779;
                  {
                    if (object.Equals(_669_fromTpe, _1438_b)) {
                      Dafny.ISequence<Dafny.Rune> _1439_recursiveGen;
                      bool _1440_recOwned;
                      bool _1441_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1442_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out806;
                      bool _out807;
                      bool _out808;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                      _1439_recursiveGen = _out806;
                      _1440_recOwned = _out807;
                      _1441_recErased = _out808;
                      _1442_recIdents = _out809;
                      Dafny.ISequence<Dafny.Rune> _1443_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out810;
                      _out810 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _1443_rhsType = _out810;
                      Dafny.ISequence<Dafny.Rune> _1444_uneraseFn;
                      _1444_uneraseFn = ((_1440_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1443_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1444_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1439_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1440_recOwned;
                      isErased = false;
                      readIdents = _1442_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out811;
                      bool _out812;
                      bool _out813;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1438_b), _1438_b, _668_toTpe), selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                      s = _out811;
                      isOwned = _out812;
                      isErased = _out813;
                      readIdents = _out814;
                    }
                  }
                }
              } else if (_source48.is_Nullable) {
                DAST._IType _1445___mcc_h781 = _source48.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1446_recursiveGen;
                  bool _1447_recOwned;
                  bool _1448_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1449_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out815;
                  bool _out816;
                  bool _out817;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                  _1446_recursiveGen = _out815;
                  _1447_recOwned = _out816;
                  _1448_recErased = _out817;
                  _1449_recIdents = _out818;
                  if (!(_1447_recOwned)) {
                    _1446_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1446_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1446_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1448_recErased;
                  readIdents = _1449_recIdents;
                }
              } else if (_source48.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1450___mcc_h783 = _source48.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1451_recursiveGen;
                  bool _1452_recOwned;
                  bool _1453_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1454_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out819;
                  bool _out820;
                  bool _out821;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                  _1451_recursiveGen = _out819;
                  _1452_recOwned = _out820;
                  _1453_recErased = _out821;
                  _1454_recIdents = _out822;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1451_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1452_recOwned;
                  isErased = _1453_recErased;
                  readIdents = _1454_recIdents;
                }
              } else if (_source48.is_Array) {
                DAST._IType _1455___mcc_h785 = _source48.dtor_element;
                BigInteger _1456___mcc_h786 = _source48.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1457_recursiveGen;
                  bool _1458_recOwned;
                  bool _1459_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1460_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out823;
                  bool _out824;
                  bool _out825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out823, out _out824, out _out825, out _out826);
                  _1457_recursiveGen = _out823;
                  _1458_recOwned = _out824;
                  _1459_recErased = _out825;
                  _1460_recIdents = _out826;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1457_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1458_recOwned;
                  isErased = _1459_recErased;
                  readIdents = _1460_recIdents;
                }
              } else if (_source48.is_Seq) {
                DAST._IType _1461___mcc_h789 = _source48.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1462_recursiveGen;
                  bool _1463_recOwned;
                  bool _1464_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1465_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out827;
                  bool _out828;
                  bool _out829;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out827, out _out828, out _out829, out _out830);
                  _1462_recursiveGen = _out827;
                  _1463_recOwned = _out828;
                  _1464_recErased = _out829;
                  _1465_recIdents = _out830;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1462_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1463_recOwned;
                  isErased = _1464_recErased;
                  readIdents = _1465_recIdents;
                }
              } else if (_source48.is_Set) {
                DAST._IType _1466___mcc_h791 = _source48.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1467_recursiveGen;
                  bool _1468_recOwned;
                  bool _1469_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1470_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out831;
                  bool _out832;
                  bool _out833;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out834;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833, out _out834);
                  _1467_recursiveGen = _out831;
                  _1468_recOwned = _out832;
                  _1469_recErased = _out833;
                  _1470_recIdents = _out834;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1467_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1468_recOwned;
                  isErased = _1469_recErased;
                  readIdents = _1470_recIdents;
                }
              } else if (_source48.is_Multiset) {
                DAST._IType _1471___mcc_h793 = _source48.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1472_recursiveGen;
                  bool _1473_recOwned;
                  bool _1474_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1475_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out835;
                  bool _out836;
                  bool _out837;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out835, out _out836, out _out837, out _out838);
                  _1472_recursiveGen = _out835;
                  _1473_recOwned = _out836;
                  _1474_recErased = _out837;
                  _1475_recIdents = _out838;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1472_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1473_recOwned;
                  isErased = _1474_recErased;
                  readIdents = _1475_recIdents;
                }
              } else if (_source48.is_Map) {
                DAST._IType _1476___mcc_h795 = _source48.dtor_key;
                DAST._IType _1477___mcc_h796 = _source48.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1478_recursiveGen;
                  bool _1479_recOwned;
                  bool _1480_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1481_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out839;
                  bool _out840;
                  bool _out841;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out839, out _out840, out _out841, out _out842);
                  _1478_recursiveGen = _out839;
                  _1479_recOwned = _out840;
                  _1480_recErased = _out841;
                  _1481_recIdents = _out842;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1478_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1479_recOwned;
                  isErased = _1480_recErased;
                  readIdents = _1481_recIdents;
                }
              } else if (_source48.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1482___mcc_h799 = _source48.dtor_args;
                DAST._IType _1483___mcc_h800 = _source48.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1484_recursiveGen;
                  bool _1485_recOwned;
                  bool _1486_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1487_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out843;
                  bool _out844;
                  bool _out845;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out846;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845, out _out846);
                  _1484_recursiveGen = _out843;
                  _1485_recOwned = _out844;
                  _1486_recErased = _out845;
                  _1487_recIdents = _out846;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1484_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1485_recOwned;
                  isErased = _1486_recErased;
                  readIdents = _1487_recIdents;
                }
              } else if (_source48.is_Primitive) {
                DAST._IPrimitive _1488___mcc_h803 = _source48.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1489_recursiveGen;
                  bool _1490_recOwned;
                  bool _1491_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1492_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out847;
                  bool _out848;
                  bool _out849;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out847, out _out848, out _out849, out _out850);
                  _1489_recursiveGen = _out847;
                  _1490_recOwned = _out848;
                  _1491_recErased = _out849;
                  _1492_recIdents = _out850;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1489_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1490_recOwned;
                  isErased = _1491_recErased;
                  readIdents = _1492_recIdents;
                }
              } else if (_source48.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1493___mcc_h805 = _source48.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1494_recursiveGen;
                  bool _1495_recOwned;
                  bool _1496_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1497_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out851;
                  bool _out852;
                  bool _out853;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out851, out _out852, out _out853, out _out854);
                  _1494_recursiveGen = _out851;
                  _1495_recOwned = _out852;
                  _1496_recErased = _out853;
                  _1497_recIdents = _out854;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1494_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1495_recOwned;
                  isErased = _1496_recErased;
                  readIdents = _1497_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1498___mcc_h807 = _source48.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1499_recursiveGen;
                  bool _1500_recOwned;
                  bool _1501_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1502_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out855;
                  bool _out856;
                  bool _out857;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out855, out _out856, out _out857, out _out858);
                  _1499_recursiveGen = _out855;
                  _1500_recOwned = _out856;
                  _1501_recErased = _out857;
                  _1502_recIdents = _out858;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1499_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1500_recOwned;
                  isErased = _1501_recErased;
                  readIdents = _1502_recIdents;
                }
              }
            } else if (_source28.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1503___mcc_h809 = _source28.dtor_args;
              DAST._IType _1504___mcc_h810 = _source28.dtor_result;
              DAST._IType _source50 = _676___mcc_h306;
              if (_source50.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1505___mcc_h817 = _source50.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1506___mcc_h818 = _source50.dtor_typeArgs;
                DAST._IResolvedType _1507___mcc_h819 = _source50.dtor_resolved;
                DAST._IResolvedType _source51 = _1507___mcc_h819;
                if (_source51.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1508___mcc_h823 = _source51.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1509_recursiveGen;
                    bool _1510_recOwned;
                    bool _1511_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1512_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out859;
                    bool _out860;
                    bool _out861;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out862;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out859, out _out860, out _out861, out _out862);
                    _1509_recursiveGen = _out859;
                    _1510_recOwned = _out860;
                    _1511_recErased = _out861;
                    _1512_recIdents = _out862;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1509_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1510_recOwned;
                    isErased = _1511_recErased;
                    readIdents = _1512_recIdents;
                  }
                } else if (_source51.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1513___mcc_h825 = _source51.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1514_recursiveGen;
                    bool _1515_recOwned;
                    bool _1516_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1517_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out863;
                    bool _out864;
                    bool _out865;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out866;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out863, out _out864, out _out865, out _out866);
                    _1514_recursiveGen = _out863;
                    _1515_recOwned = _out864;
                    _1516_recErased = _out865;
                    _1517_recIdents = _out866;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1514_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1515_recOwned;
                    isErased = _1516_recErased;
                    readIdents = _1517_recIdents;
                  }
                } else {
                  DAST._IType _1518___mcc_h827 = _source51.dtor_Newtype_a0;
                  DAST._IType _1519_b = _1518___mcc_h827;
                  {
                    if (object.Equals(_669_fromTpe, _1519_b)) {
                      Dafny.ISequence<Dafny.Rune> _1520_recursiveGen;
                      bool _1521_recOwned;
                      bool _1522_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1523_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out867;
                      bool _out868;
                      bool _out869;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                      _1520_recursiveGen = _out867;
                      _1521_recOwned = _out868;
                      _1522_recErased = _out869;
                      _1523_recIdents = _out870;
                      Dafny.ISequence<Dafny.Rune> _1524_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out871;
                      _out871 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _1524_rhsType = _out871;
                      Dafny.ISequence<Dafny.Rune> _1525_uneraseFn;
                      _1525_uneraseFn = ((_1521_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1524_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1525_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1520_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1521_recOwned;
                      isErased = false;
                      readIdents = _1523_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out872;
                      bool _out873;
                      bool _out874;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1519_b), _1519_b, _668_toTpe), selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                      s = _out872;
                      isOwned = _out873;
                      isErased = _out874;
                      readIdents = _out875;
                    }
                  }
                }
              } else if (_source50.is_Nullable) {
                DAST._IType _1526___mcc_h829 = _source50.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1527_recursiveGen;
                  bool _1528_recOwned;
                  bool _1529_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1530_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out876;
                  bool _out877;
                  bool _out878;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                  _1527_recursiveGen = _out876;
                  _1528_recOwned = _out877;
                  _1529_recErased = _out878;
                  _1530_recIdents = _out879;
                  if (!(_1528_recOwned)) {
                    _1527_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1527_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1527_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1529_recErased;
                  readIdents = _1530_recIdents;
                }
              } else if (_source50.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1531___mcc_h831 = _source50.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1532_recursiveGen;
                  bool _1533_recOwned;
                  bool _1534_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1535_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out880;
                  bool _out881;
                  bool _out882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                  _1532_recursiveGen = _out880;
                  _1533_recOwned = _out881;
                  _1534_recErased = _out882;
                  _1535_recIdents = _out883;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1532_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1533_recOwned;
                  isErased = _1534_recErased;
                  readIdents = _1535_recIdents;
                }
              } else if (_source50.is_Array) {
                DAST._IType _1536___mcc_h833 = _source50.dtor_element;
                BigInteger _1537___mcc_h834 = _source50.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1538_recursiveGen;
                  bool _1539_recOwned;
                  bool _1540_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1541_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out884;
                  bool _out885;
                  bool _out886;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out887;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out884, out _out885, out _out886, out _out887);
                  _1538_recursiveGen = _out884;
                  _1539_recOwned = _out885;
                  _1540_recErased = _out886;
                  _1541_recIdents = _out887;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1538_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1539_recOwned;
                  isErased = _1540_recErased;
                  readIdents = _1541_recIdents;
                }
              } else if (_source50.is_Seq) {
                DAST._IType _1542___mcc_h837 = _source50.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1543_recursiveGen;
                  bool _1544_recOwned;
                  bool _1545_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1546_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out888;
                  bool _out889;
                  bool _out890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out888, out _out889, out _out890, out _out891);
                  _1543_recursiveGen = _out888;
                  _1544_recOwned = _out889;
                  _1545_recErased = _out890;
                  _1546_recIdents = _out891;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1543_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1544_recOwned;
                  isErased = _1545_recErased;
                  readIdents = _1546_recIdents;
                }
              } else if (_source50.is_Set) {
                DAST._IType _1547___mcc_h839 = _source50.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1548_recursiveGen;
                  bool _1549_recOwned;
                  bool _1550_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1551_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out892;
                  bool _out893;
                  bool _out894;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894, out _out895);
                  _1548_recursiveGen = _out892;
                  _1549_recOwned = _out893;
                  _1550_recErased = _out894;
                  _1551_recIdents = _out895;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1548_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1549_recOwned;
                  isErased = _1550_recErased;
                  readIdents = _1551_recIdents;
                }
              } else if (_source50.is_Multiset) {
                DAST._IType _1552___mcc_h841 = _source50.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1553_recursiveGen;
                  bool _1554_recOwned;
                  bool _1555_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1556_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out896;
                  bool _out897;
                  bool _out898;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out899;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out896, out _out897, out _out898, out _out899);
                  _1553_recursiveGen = _out896;
                  _1554_recOwned = _out897;
                  _1555_recErased = _out898;
                  _1556_recIdents = _out899;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1553_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1554_recOwned;
                  isErased = _1555_recErased;
                  readIdents = _1556_recIdents;
                }
              } else if (_source50.is_Map) {
                DAST._IType _1557___mcc_h843 = _source50.dtor_key;
                DAST._IType _1558___mcc_h844 = _source50.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1559_recursiveGen;
                  bool _1560_recOwned;
                  bool _1561_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1562_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out900;
                  bool _out901;
                  bool _out902;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out900, out _out901, out _out902, out _out903);
                  _1559_recursiveGen = _out900;
                  _1560_recOwned = _out901;
                  _1561_recErased = _out902;
                  _1562_recIdents = _out903;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1559_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1560_recOwned;
                  isErased = _1561_recErased;
                  readIdents = _1562_recIdents;
                }
              } else if (_source50.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1563___mcc_h847 = _source50.dtor_args;
                DAST._IType _1564___mcc_h848 = _source50.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1565_recursiveGen;
                  bool _1566_recOwned;
                  bool _1567_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1568_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out904;
                  bool _out905;
                  bool _out906;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out904, out _out905, out _out906, out _out907);
                  _1565_recursiveGen = _out904;
                  _1566_recOwned = _out905;
                  _1567_recErased = _out906;
                  _1568_recIdents = _out907;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1565_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1566_recOwned;
                  isErased = _1567_recErased;
                  readIdents = _1568_recIdents;
                }
              } else if (_source50.is_Primitive) {
                DAST._IPrimitive _1569___mcc_h851 = _source50.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1570_recursiveGen;
                  bool _1571_recOwned;
                  bool _1572_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1573_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out908;
                  bool _out909;
                  bool _out910;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out911;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out908, out _out909, out _out910, out _out911);
                  _1570_recursiveGen = _out908;
                  _1571_recOwned = _out909;
                  _1572_recErased = _out910;
                  _1573_recIdents = _out911;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1570_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1571_recOwned;
                  isErased = _1572_recErased;
                  readIdents = _1573_recIdents;
                }
              } else if (_source50.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1574___mcc_h853 = _source50.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1575_recursiveGen;
                  bool _1576_recOwned;
                  bool _1577_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1578_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out912;
                  bool _out913;
                  bool _out914;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out915;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out912, out _out913, out _out914, out _out915);
                  _1575_recursiveGen = _out912;
                  _1576_recOwned = _out913;
                  _1577_recErased = _out914;
                  _1578_recIdents = _out915;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1575_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1576_recOwned;
                  isErased = _1577_recErased;
                  readIdents = _1578_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1579___mcc_h855 = _source50.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1580_recursiveGen;
                  bool _1581_recOwned;
                  bool _1582_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1583_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out916;
                  bool _out917;
                  bool _out918;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out916, out _out917, out _out918, out _out919);
                  _1580_recursiveGen = _out916;
                  _1581_recOwned = _out917;
                  _1582_recErased = _out918;
                  _1583_recIdents = _out919;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1580_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1581_recOwned;
                  isErased = _1582_recErased;
                  readIdents = _1583_recIdents;
                }
              }
            } else if (_source28.is_Primitive) {
              DAST._IPrimitive _1584___mcc_h857 = _source28.dtor_Primitive_a0;
              DAST._IPrimitive _source52 = _1584___mcc_h857;
              if (_source52.is_Int) {
                DAST._IType _source53 = _676___mcc_h306;
                if (_source53.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1585___mcc_h861 = _source53.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1586___mcc_h862 = _source53.dtor_typeArgs;
                  DAST._IResolvedType _1587___mcc_h863 = _source53.dtor_resolved;
                  DAST._IResolvedType _source54 = _1587___mcc_h863;
                  if (_source54.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1588___mcc_h867 = _source54.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1589_recursiveGen;
                      bool _1590_recOwned;
                      bool _1591_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1592_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out920;
                      bool _out921;
                      bool _out922;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out920, out _out921, out _out922, out _out923);
                      _1589_recursiveGen = _out920;
                      _1590_recOwned = _out921;
                      _1591_recErased = _out922;
                      _1592_recIdents = _out923;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1589_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1590_recOwned;
                      isErased = _1591_recErased;
                      readIdents = _1592_recIdents;
                    }
                  } else if (_source54.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1593___mcc_h869 = _source54.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1594_recursiveGen;
                      bool _1595_recOwned;
                      bool _1596_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1597_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out924;
                      bool _out925;
                      bool _out926;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out927;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out924, out _out925, out _out926, out _out927);
                      _1594_recursiveGen = _out924;
                      _1595_recOwned = _out925;
                      _1596_recErased = _out926;
                      _1597_recIdents = _out927;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1594_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1595_recOwned;
                      isErased = _1596_recErased;
                      readIdents = _1597_recIdents;
                    }
                  } else {
                    DAST._IType _1598___mcc_h871 = _source54.dtor_Newtype_a0;
                    DAST._IType _1599_b = _1598___mcc_h871;
                    {
                      if (object.Equals(_669_fromTpe, _1599_b)) {
                        Dafny.ISequence<Dafny.Rune> _1600_recursiveGen;
                        bool _1601_recOwned;
                        bool _1602_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1603_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out928;
                        bool _out929;
                        bool _out930;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                        _1600_recursiveGen = _out928;
                        _1601_recOwned = _out929;
                        _1602_recErased = _out930;
                        _1603_recIdents = _out931;
                        Dafny.ISequence<Dafny.Rune> _1604_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out932;
                        _out932 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                        _1604_rhsType = _out932;
                        Dafny.ISequence<Dafny.Rune> _1605_uneraseFn;
                        _1605_uneraseFn = ((_1601_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1604_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1605_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1601_recOwned;
                        isErased = false;
                        readIdents = _1603_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out933;
                        bool _out934;
                        bool _out935;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1599_b), _1599_b, _668_toTpe), selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                        s = _out933;
                        isOwned = _out934;
                        isErased = _out935;
                        readIdents = _out936;
                      }
                    }
                  }
                } else if (_source53.is_Nullable) {
                  DAST._IType _1606___mcc_h873 = _source53.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1607_recursiveGen;
                    bool _1608_recOwned;
                    bool _1609_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1610_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out937;
                    bool _out938;
                    bool _out939;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                    _1607_recursiveGen = _out937;
                    _1608_recOwned = _out938;
                    _1609_recErased = _out939;
                    _1610_recIdents = _out940;
                    if (!(_1608_recOwned)) {
                      _1607_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1607_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1607_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1609_recErased;
                    readIdents = _1610_recIdents;
                  }
                } else if (_source53.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1611___mcc_h875 = _source53.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1612_recursiveGen;
                    bool _1613_recOwned;
                    bool _1614_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1615_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out941;
                    bool _out942;
                    bool _out943;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                    _1612_recursiveGen = _out941;
                    _1613_recOwned = _out942;
                    _1614_recErased = _out943;
                    _1615_recIdents = _out944;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1612_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1613_recOwned;
                    isErased = _1614_recErased;
                    readIdents = _1615_recIdents;
                  }
                } else if (_source53.is_Array) {
                  DAST._IType _1616___mcc_h877 = _source53.dtor_element;
                  BigInteger _1617___mcc_h878 = _source53.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1618_recursiveGen;
                    bool _1619_recOwned;
                    bool _1620_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1621_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out945;
                    bool _out946;
                    bool _out947;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out948;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out945, out _out946, out _out947, out _out948);
                    _1618_recursiveGen = _out945;
                    _1619_recOwned = _out946;
                    _1620_recErased = _out947;
                    _1621_recIdents = _out948;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1618_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1619_recOwned;
                    isErased = _1620_recErased;
                    readIdents = _1621_recIdents;
                  }
                } else if (_source53.is_Seq) {
                  DAST._IType _1622___mcc_h881 = _source53.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1623_recursiveGen;
                    bool _1624_recOwned;
                    bool _1625_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1626_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out949;
                    bool _out950;
                    bool _out951;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out952;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out949, out _out950, out _out951, out _out952);
                    _1623_recursiveGen = _out949;
                    _1624_recOwned = _out950;
                    _1625_recErased = _out951;
                    _1626_recIdents = _out952;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1623_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1624_recOwned;
                    isErased = _1625_recErased;
                    readIdents = _1626_recIdents;
                  }
                } else if (_source53.is_Set) {
                  DAST._IType _1627___mcc_h883 = _source53.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1628_recursiveGen;
                    bool _1629_recOwned;
                    bool _1630_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1631_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out953;
                    bool _out954;
                    bool _out955;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out953, out _out954, out _out955, out _out956);
                    _1628_recursiveGen = _out953;
                    _1629_recOwned = _out954;
                    _1630_recErased = _out955;
                    _1631_recIdents = _out956;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1628_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1629_recOwned;
                    isErased = _1630_recErased;
                    readIdents = _1631_recIdents;
                  }
                } else if (_source53.is_Multiset) {
                  DAST._IType _1632___mcc_h885 = _source53.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1633_recursiveGen;
                    bool _1634_recOwned;
                    bool _1635_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1636_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out957;
                    bool _out958;
                    bool _out959;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out960;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959, out _out960);
                    _1633_recursiveGen = _out957;
                    _1634_recOwned = _out958;
                    _1635_recErased = _out959;
                    _1636_recIdents = _out960;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1633_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1634_recOwned;
                    isErased = _1635_recErased;
                    readIdents = _1636_recIdents;
                  }
                } else if (_source53.is_Map) {
                  DAST._IType _1637___mcc_h887 = _source53.dtor_key;
                  DAST._IType _1638___mcc_h888 = _source53.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1639_recursiveGen;
                    bool _1640_recOwned;
                    bool _1641_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1642_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out961;
                    bool _out962;
                    bool _out963;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out961, out _out962, out _out963, out _out964);
                    _1639_recursiveGen = _out961;
                    _1640_recOwned = _out962;
                    _1641_recErased = _out963;
                    _1642_recIdents = _out964;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1639_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1640_recOwned;
                    isErased = _1641_recErased;
                    readIdents = _1642_recIdents;
                  }
                } else if (_source53.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1643___mcc_h891 = _source53.dtor_args;
                  DAST._IType _1644___mcc_h892 = _source53.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1645_recursiveGen;
                    bool _1646_recOwned;
                    bool _1647_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1648_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out965;
                    bool _out966;
                    bool _out967;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out965, out _out966, out _out967, out _out968);
                    _1645_recursiveGen = _out965;
                    _1646_recOwned = _out966;
                    _1647_recErased = _out967;
                    _1648_recIdents = _out968;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1645_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1646_recOwned;
                    isErased = _1647_recErased;
                    readIdents = _1648_recIdents;
                  }
                } else if (_source53.is_Primitive) {
                  DAST._IPrimitive _1649___mcc_h895 = _source53.dtor_Primitive_a0;
                  DAST._IPrimitive _source55 = _1649___mcc_h895;
                  if (_source55.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1650_recursiveGen;
                      bool _1651_recOwned;
                      bool _1652_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1653_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out969;
                      bool _out970;
                      bool _out971;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out972;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out969, out _out970, out _out971, out _out972);
                      _1650_recursiveGen = _out969;
                      _1651_recOwned = _out970;
                      _1652_recErased = _out971;
                      _1653_recIdents = _out972;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1650_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1651_recOwned;
                      isErased = _1652_recErased;
                      readIdents = _1653_recIdents;
                    }
                  } else if (_source55.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1654_recursiveGen;
                      bool _1655___v47;
                      bool _1656___v48;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1657_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out973;
                      bool _out974;
                      bool _out975;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out976;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, true, out _out973, out _out974, out _out975, out _out976);
                      _1654_recursiveGen = _out973;
                      _1655___v47 = _out974;
                      _1656___v48 = _out975;
                      _1657_recIdents = _out976;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _1654_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1657_recIdents;
                    }
                  } else if (_source55.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1658_recursiveGen;
                      bool _1659_recOwned;
                      bool _1660_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1661_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out977;
                      bool _out978;
                      bool _out979;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out980;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out977, out _out978, out _out979, out _out980);
                      _1658_recursiveGen = _out977;
                      _1659_recOwned = _out978;
                      _1660_recErased = _out979;
                      _1661_recIdents = _out980;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1659_recOwned;
                      isErased = _1660_recErased;
                      readIdents = _1661_recIdents;
                    }
                  } else if (_source55.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1662_recursiveGen;
                      bool _1663_recOwned;
                      bool _1664_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1665_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out981;
                      bool _out982;
                      bool _out983;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out981, out _out982, out _out983, out _out984);
                      _1662_recursiveGen = _out981;
                      _1663_recOwned = _out982;
                      _1664_recErased = _out983;
                      _1665_recIdents = _out984;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1662_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1663_recOwned;
                      isErased = _1664_recErased;
                      readIdents = _1665_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1666_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out985;
                      _out985 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _1666_rhsType = _out985;
                      Dafny.ISequence<Dafny.Rune> _1667_recursiveGen;
                      bool _1668___v57;
                      bool _1669___v58;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1670_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, true, out _out986, out _out987, out _out988, out _out989);
                      _1667_recursiveGen = _out986;
                      _1668___v57 = _out987;
                      _1669___v58 = _out988;
                      _1670_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _1667_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1670_recIdents;
                    }
                  }
                } else if (_source53.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1671___mcc_h897 = _source53.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1672_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out990;
                    _out990 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                    _1672_rhsType = _out990;
                    Dafny.ISequence<Dafny.Rune> _1673_recursiveGen;
                    bool _1674___v52;
                    bool _1675___v53;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1676_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out991;
                    bool _out992;
                    bool _out993;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, true, out _out991, out _out992, out _out993, out _out994);
                    _1673_recursiveGen = _out991;
                    _1674___v52 = _out992;
                    _1675___v53 = _out993;
                    _1676_recIdents = _out994;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1672_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _1673_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _1676_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1677___mcc_h899 = _source53.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1678_recursiveGen;
                    bool _1679_recOwned;
                    bool _1680_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1681_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out995;
                    bool _out996;
                    bool _out997;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out995, out _out996, out _out997, out _out998);
                    _1678_recursiveGen = _out995;
                    _1679_recOwned = _out996;
                    _1680_recErased = _out997;
                    _1681_recIdents = _out998;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1678_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1679_recOwned;
                    isErased = _1680_recErased;
                    readIdents = _1681_recIdents;
                  }
                }
              } else if (_source52.is_Real) {
                DAST._IType _source56 = _676___mcc_h306;
                if (_source56.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1682___mcc_h901 = _source56.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1683___mcc_h902 = _source56.dtor_typeArgs;
                  DAST._IResolvedType _1684___mcc_h903 = _source56.dtor_resolved;
                  DAST._IResolvedType _source57 = _1684___mcc_h903;
                  if (_source57.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1685___mcc_h907 = _source57.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1686_recursiveGen;
                      bool _1687_recOwned;
                      bool _1688_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1689_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out999;
                      bool _out1000;
                      bool _out1001;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out999, out _out1000, out _out1001, out _out1002);
                      _1686_recursiveGen = _out999;
                      _1687_recOwned = _out1000;
                      _1688_recErased = _out1001;
                      _1689_recIdents = _out1002;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1687_recOwned;
                      isErased = _1688_recErased;
                      readIdents = _1689_recIdents;
                    }
                  } else if (_source57.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1690___mcc_h909 = _source57.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1691_recursiveGen;
                      bool _1692_recOwned;
                      bool _1693_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1694_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1003;
                      bool _out1004;
                      bool _out1005;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1006;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1003, out _out1004, out _out1005, out _out1006);
                      _1691_recursiveGen = _out1003;
                      _1692_recOwned = _out1004;
                      _1693_recErased = _out1005;
                      _1694_recIdents = _out1006;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1692_recOwned;
                      isErased = _1693_recErased;
                      readIdents = _1694_recIdents;
                    }
                  } else {
                    DAST._IType _1695___mcc_h911 = _source57.dtor_Newtype_a0;
                    DAST._IType _1696_b = _1695___mcc_h911;
                    {
                      if (object.Equals(_669_fromTpe, _1696_b)) {
                        Dafny.ISequence<Dafny.Rune> _1697_recursiveGen;
                        bool _1698_recOwned;
                        bool _1699_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1700_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1007;
                        bool _out1008;
                        bool _out1009;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1007, out _out1008, out _out1009, out _out1010);
                        _1697_recursiveGen = _out1007;
                        _1698_recOwned = _out1008;
                        _1699_recErased = _out1009;
                        _1700_recIdents = _out1010;
                        Dafny.ISequence<Dafny.Rune> _1701_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1011;
                        _out1011 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                        _1701_rhsType = _out1011;
                        Dafny.ISequence<Dafny.Rune> _1702_uneraseFn;
                        _1702_uneraseFn = ((_1698_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1701_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1702_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1697_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1698_recOwned;
                        isErased = false;
                        readIdents = _1700_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1012;
                        bool _out1013;
                        bool _out1014;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1696_b), _1696_b, _668_toTpe), selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                        s = _out1012;
                        isOwned = _out1013;
                        isErased = _out1014;
                        readIdents = _out1015;
                      }
                    }
                  }
                } else if (_source56.is_Nullable) {
                  DAST._IType _1703___mcc_h913 = _source56.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1704_recursiveGen;
                    bool _1705_recOwned;
                    bool _1706_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1707_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1016;
                    bool _out1017;
                    bool _out1018;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                    _1704_recursiveGen = _out1016;
                    _1705_recOwned = _out1017;
                    _1706_recErased = _out1018;
                    _1707_recIdents = _out1019;
                    if (!(_1705_recOwned)) {
                      _1704_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1704_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1704_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1706_recErased;
                    readIdents = _1707_recIdents;
                  }
                } else if (_source56.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1708___mcc_h915 = _source56.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1709_recursiveGen;
                    bool _1710_recOwned;
                    bool _1711_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1712_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1020;
                    bool _out1021;
                    bool _out1022;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1023;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1020, out _out1021, out _out1022, out _out1023);
                    _1709_recursiveGen = _out1020;
                    _1710_recOwned = _out1021;
                    _1711_recErased = _out1022;
                    _1712_recIdents = _out1023;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1709_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1710_recOwned;
                    isErased = _1711_recErased;
                    readIdents = _1712_recIdents;
                  }
                } else if (_source56.is_Array) {
                  DAST._IType _1713___mcc_h917 = _source56.dtor_element;
                  BigInteger _1714___mcc_h918 = _source56.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1715_recursiveGen;
                    bool _1716_recOwned;
                    bool _1717_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1718_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1024;
                    bool _out1025;
                    bool _out1026;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1027;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1024, out _out1025, out _out1026, out _out1027);
                    _1715_recursiveGen = _out1024;
                    _1716_recOwned = _out1025;
                    _1717_recErased = _out1026;
                    _1718_recIdents = _out1027;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1715_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1716_recOwned;
                    isErased = _1717_recErased;
                    readIdents = _1718_recIdents;
                  }
                } else if (_source56.is_Seq) {
                  DAST._IType _1719___mcc_h921 = _source56.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1720_recursiveGen;
                    bool _1721_recOwned;
                    bool _1722_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1723_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1028;
                    bool _out1029;
                    bool _out1030;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1028, out _out1029, out _out1030, out _out1031);
                    _1720_recursiveGen = _out1028;
                    _1721_recOwned = _out1029;
                    _1722_recErased = _out1030;
                    _1723_recIdents = _out1031;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1721_recOwned;
                    isErased = _1722_recErased;
                    readIdents = _1723_recIdents;
                  }
                } else if (_source56.is_Set) {
                  DAST._IType _1724___mcc_h923 = _source56.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1725_recursiveGen;
                    bool _1726_recOwned;
                    bool _1727_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1728_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1032;
                    bool _out1033;
                    bool _out1034;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1032, out _out1033, out _out1034, out _out1035);
                    _1725_recursiveGen = _out1032;
                    _1726_recOwned = _out1033;
                    _1727_recErased = _out1034;
                    _1728_recIdents = _out1035;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1725_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1726_recOwned;
                    isErased = _1727_recErased;
                    readIdents = _1728_recIdents;
                  }
                } else if (_source56.is_Multiset) {
                  DAST._IType _1729___mcc_h925 = _source56.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1730_recursiveGen;
                    bool _1731_recOwned;
                    bool _1732_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1733_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1036;
                    bool _out1037;
                    bool _out1038;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1039;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1036, out _out1037, out _out1038, out _out1039);
                    _1730_recursiveGen = _out1036;
                    _1731_recOwned = _out1037;
                    _1732_recErased = _out1038;
                    _1733_recIdents = _out1039;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1730_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1731_recOwned;
                    isErased = _1732_recErased;
                    readIdents = _1733_recIdents;
                  }
                } else if (_source56.is_Map) {
                  DAST._IType _1734___mcc_h927 = _source56.dtor_key;
                  DAST._IType _1735___mcc_h928 = _source56.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1736_recursiveGen;
                    bool _1737_recOwned;
                    bool _1738_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1739_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1040;
                    bool _out1041;
                    bool _out1042;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1040, out _out1041, out _out1042, out _out1043);
                    _1736_recursiveGen = _out1040;
                    _1737_recOwned = _out1041;
                    _1738_recErased = _out1042;
                    _1739_recIdents = _out1043;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1737_recOwned;
                    isErased = _1738_recErased;
                    readIdents = _1739_recIdents;
                  }
                } else if (_source56.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1740___mcc_h931 = _source56.dtor_args;
                  DAST._IType _1741___mcc_h932 = _source56.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1742_recursiveGen;
                    bool _1743_recOwned;
                    bool _1744_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1745_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1044;
                    bool _out1045;
                    bool _out1046;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1047;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1044, out _out1045, out _out1046, out _out1047);
                    _1742_recursiveGen = _out1044;
                    _1743_recOwned = _out1045;
                    _1744_recErased = _out1046;
                    _1745_recIdents = _out1047;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1742_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1743_recOwned;
                    isErased = _1744_recErased;
                    readIdents = _1745_recIdents;
                  }
                } else if (_source56.is_Primitive) {
                  DAST._IPrimitive _1746___mcc_h935 = _source56.dtor_Primitive_a0;
                  DAST._IPrimitive _source58 = _1746___mcc_h935;
                  if (_source58.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1747_recursiveGen;
                      bool _1748___v49;
                      bool _1749___v50;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1750_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1048;
                      bool _out1049;
                      bool _out1050;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1051;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, false, out _out1048, out _out1049, out _out1050, out _out1051);
                      _1747_recursiveGen = _out1048;
                      _1748___v49 = _out1049;
                      _1749___v50 = _out1050;
                      _1750_recIdents = _out1051;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _1747_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1750_recIdents;
                    }
                  } else if (_source58.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1751_recursiveGen;
                      bool _1752_recOwned;
                      bool _1753_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1754_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1052;
                      bool _out1053;
                      bool _out1054;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1052, out _out1053, out _out1054, out _out1055);
                      _1751_recursiveGen = _out1052;
                      _1752_recOwned = _out1053;
                      _1753_recErased = _out1054;
                      _1754_recIdents = _out1055;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1751_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1752_recOwned;
                      isErased = _1753_recErased;
                      readIdents = _1754_recIdents;
                    }
                  } else if (_source58.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1755_recursiveGen;
                      bool _1756_recOwned;
                      bool _1757_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1758_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1056;
                      bool _out1057;
                      bool _out1058;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1059;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1056, out _out1057, out _out1058, out _out1059);
                      _1755_recursiveGen = _out1056;
                      _1756_recOwned = _out1057;
                      _1757_recErased = _out1058;
                      _1758_recIdents = _out1059;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1755_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1756_recOwned;
                      isErased = _1757_recErased;
                      readIdents = _1758_recIdents;
                    }
                  } else if (_source58.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1759_recursiveGen;
                      bool _1760_recOwned;
                      bool _1761_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1762_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1060;
                      bool _out1061;
                      bool _out1062;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1063;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1060, out _out1061, out _out1062, out _out1063);
                      _1759_recursiveGen = _out1060;
                      _1760_recOwned = _out1061;
                      _1761_recErased = _out1062;
                      _1762_recIdents = _out1063;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1760_recOwned;
                      isErased = _1761_recErased;
                      readIdents = _1762_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1763_recursiveGen;
                      bool _1764_recOwned;
                      bool _1765_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1766_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1064;
                      bool _out1065;
                      bool _out1066;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1067;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1064, out _out1065, out _out1066, out _out1067);
                      _1763_recursiveGen = _out1064;
                      _1764_recOwned = _out1065;
                      _1765_recErased = _out1066;
                      _1766_recIdents = _out1067;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1763_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1764_recOwned;
                      isErased = _1765_recErased;
                      readIdents = _1766_recIdents;
                    }
                  }
                } else if (_source56.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1767___mcc_h937 = _source56.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1768_recursiveGen;
                    bool _1769_recOwned;
                    bool _1770_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1771_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1068;
                    bool _out1069;
                    bool _out1070;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                    _1768_recursiveGen = _out1068;
                    _1769_recOwned = _out1069;
                    _1770_recErased = _out1070;
                    _1771_recIdents = _out1071;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1768_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1769_recOwned;
                    isErased = _1770_recErased;
                    readIdents = _1771_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1772___mcc_h939 = _source56.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1773_recursiveGen;
                    bool _1774_recOwned;
                    bool _1775_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1776_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1072;
                    bool _out1073;
                    bool _out1074;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                    _1773_recursiveGen = _out1072;
                    _1774_recOwned = _out1073;
                    _1775_recErased = _out1074;
                    _1776_recIdents = _out1075;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1774_recOwned;
                    isErased = _1775_recErased;
                    readIdents = _1776_recIdents;
                  }
                }
              } else if (_source52.is_String) {
                DAST._IType _source59 = _676___mcc_h306;
                if (_source59.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1777___mcc_h941 = _source59.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1778___mcc_h942 = _source59.dtor_typeArgs;
                  DAST._IResolvedType _1779___mcc_h943 = _source59.dtor_resolved;
                  DAST._IResolvedType _source60 = _1779___mcc_h943;
                  if (_source60.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1780___mcc_h947 = _source60.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1781_recursiveGen;
                      bool _1782_recOwned;
                      bool _1783_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1784_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1076;
                      bool _out1077;
                      bool _out1078;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                      _1781_recursiveGen = _out1076;
                      _1782_recOwned = _out1077;
                      _1783_recErased = _out1078;
                      _1784_recIdents = _out1079;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1781_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1782_recOwned;
                      isErased = _1783_recErased;
                      readIdents = _1784_recIdents;
                    }
                  } else if (_source60.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1785___mcc_h949 = _source60.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1786_recursiveGen;
                      bool _1787_recOwned;
                      bool _1788_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1789_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1080;
                      bool _out1081;
                      bool _out1082;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1080, out _out1081, out _out1082, out _out1083);
                      _1786_recursiveGen = _out1080;
                      _1787_recOwned = _out1081;
                      _1788_recErased = _out1082;
                      _1789_recIdents = _out1083;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1787_recOwned;
                      isErased = _1788_recErased;
                      readIdents = _1789_recIdents;
                    }
                  } else {
                    DAST._IType _1790___mcc_h951 = _source60.dtor_Newtype_a0;
                    DAST._IType _1791_b = _1790___mcc_h951;
                    {
                      if (object.Equals(_669_fromTpe, _1791_b)) {
                        Dafny.ISequence<Dafny.Rune> _1792_recursiveGen;
                        bool _1793_recOwned;
                        bool _1794_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1795_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1084;
                        bool _out1085;
                        bool _out1086;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1084, out _out1085, out _out1086, out _out1087);
                        _1792_recursiveGen = _out1084;
                        _1793_recOwned = _out1085;
                        _1794_recErased = _out1086;
                        _1795_recIdents = _out1087;
                        Dafny.ISequence<Dafny.Rune> _1796_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1088;
                        _out1088 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                        _1796_rhsType = _out1088;
                        Dafny.ISequence<Dafny.Rune> _1797_uneraseFn;
                        _1797_uneraseFn = ((_1793_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1796_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1797_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1792_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1793_recOwned;
                        isErased = false;
                        readIdents = _1795_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1089;
                        bool _out1090;
                        bool _out1091;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1791_b), _1791_b, _668_toTpe), selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                        s = _out1089;
                        isOwned = _out1090;
                        isErased = _out1091;
                        readIdents = _out1092;
                      }
                    }
                  }
                } else if (_source59.is_Nullable) {
                  DAST._IType _1798___mcc_h953 = _source59.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1799_recursiveGen;
                    bool _1800_recOwned;
                    bool _1801_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1802_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1093;
                    bool _out1094;
                    bool _out1095;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                    _1799_recursiveGen = _out1093;
                    _1800_recOwned = _out1094;
                    _1801_recErased = _out1095;
                    _1802_recIdents = _out1096;
                    if (!(_1800_recOwned)) {
                      _1799_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1799_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1799_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1801_recErased;
                    readIdents = _1802_recIdents;
                  }
                } else if (_source59.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1803___mcc_h955 = _source59.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1804_recursiveGen;
                    bool _1805_recOwned;
                    bool _1806_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1807_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1097;
                    bool _out1098;
                    bool _out1099;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                    _1804_recursiveGen = _out1097;
                    _1805_recOwned = _out1098;
                    _1806_recErased = _out1099;
                    _1807_recIdents = _out1100;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1804_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1805_recOwned;
                    isErased = _1806_recErased;
                    readIdents = _1807_recIdents;
                  }
                } else if (_source59.is_Array) {
                  DAST._IType _1808___mcc_h957 = _source59.dtor_element;
                  BigInteger _1809___mcc_h958 = _source59.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1810_recursiveGen;
                    bool _1811_recOwned;
                    bool _1812_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1813_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1101;
                    bool _out1102;
                    bool _out1103;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1104;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1101, out _out1102, out _out1103, out _out1104);
                    _1810_recursiveGen = _out1101;
                    _1811_recOwned = _out1102;
                    _1812_recErased = _out1103;
                    _1813_recIdents = _out1104;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1810_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1811_recOwned;
                    isErased = _1812_recErased;
                    readIdents = _1813_recIdents;
                  }
                } else if (_source59.is_Seq) {
                  DAST._IType _1814___mcc_h961 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1815_recursiveGen;
                    bool _1816_recOwned;
                    bool _1817_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1818_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1105;
                    bool _out1106;
                    bool _out1107;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1105, out _out1106, out _out1107, out _out1108);
                    _1815_recursiveGen = _out1105;
                    _1816_recOwned = _out1106;
                    _1817_recErased = _out1107;
                    _1818_recIdents = _out1108;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1815_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1816_recOwned;
                    isErased = _1817_recErased;
                    readIdents = _1818_recIdents;
                  }
                } else if (_source59.is_Set) {
                  DAST._IType _1819___mcc_h963 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1820_recursiveGen;
                    bool _1821_recOwned;
                    bool _1822_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1823_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1109;
                    bool _out1110;
                    bool _out1111;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1109, out _out1110, out _out1111, out _out1112);
                    _1820_recursiveGen = _out1109;
                    _1821_recOwned = _out1110;
                    _1822_recErased = _out1111;
                    _1823_recIdents = _out1112;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1820_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1821_recOwned;
                    isErased = _1822_recErased;
                    readIdents = _1823_recIdents;
                  }
                } else if (_source59.is_Multiset) {
                  DAST._IType _1824___mcc_h965 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1825_recursiveGen;
                    bool _1826_recOwned;
                    bool _1827_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1828_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1113;
                    bool _out1114;
                    bool _out1115;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1116;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1113, out _out1114, out _out1115, out _out1116);
                    _1825_recursiveGen = _out1113;
                    _1826_recOwned = _out1114;
                    _1827_recErased = _out1115;
                    _1828_recIdents = _out1116;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1825_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1826_recOwned;
                    isErased = _1827_recErased;
                    readIdents = _1828_recIdents;
                  }
                } else if (_source59.is_Map) {
                  DAST._IType _1829___mcc_h967 = _source59.dtor_key;
                  DAST._IType _1830___mcc_h968 = _source59.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1831_recursiveGen;
                    bool _1832_recOwned;
                    bool _1833_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1834_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1117;
                    bool _out1118;
                    bool _out1119;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1117, out _out1118, out _out1119, out _out1120);
                    _1831_recursiveGen = _out1117;
                    _1832_recOwned = _out1118;
                    _1833_recErased = _out1119;
                    _1834_recIdents = _out1120;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1831_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1832_recOwned;
                    isErased = _1833_recErased;
                    readIdents = _1834_recIdents;
                  }
                } else if (_source59.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1835___mcc_h971 = _source59.dtor_args;
                  DAST._IType _1836___mcc_h972 = _source59.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1837_recursiveGen;
                    bool _1838_recOwned;
                    bool _1839_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1840_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1121;
                    bool _out1122;
                    bool _out1123;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1121, out _out1122, out _out1123, out _out1124);
                    _1837_recursiveGen = _out1121;
                    _1838_recOwned = _out1122;
                    _1839_recErased = _out1123;
                    _1840_recIdents = _out1124;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1837_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1838_recOwned;
                    isErased = _1839_recErased;
                    readIdents = _1840_recIdents;
                  }
                } else if (_source59.is_Primitive) {
                  DAST._IPrimitive _1841___mcc_h975 = _source59.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1842_recursiveGen;
                    bool _1843_recOwned;
                    bool _1844_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1845_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1125;
                    bool _out1126;
                    bool _out1127;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1125, out _out1126, out _out1127, out _out1128);
                    _1842_recursiveGen = _out1125;
                    _1843_recOwned = _out1126;
                    _1844_recErased = _out1127;
                    _1845_recIdents = _out1128;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1842_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1843_recOwned;
                    isErased = _1844_recErased;
                    readIdents = _1845_recIdents;
                  }
                } else if (_source59.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1846___mcc_h977 = _source59.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1847_recursiveGen;
                    bool _1848_recOwned;
                    bool _1849_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1850_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1129;
                    bool _out1130;
                    bool _out1131;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1132;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1129, out _out1130, out _out1131, out _out1132);
                    _1847_recursiveGen = _out1129;
                    _1848_recOwned = _out1130;
                    _1849_recErased = _out1131;
                    _1850_recIdents = _out1132;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1847_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1848_recOwned;
                    isErased = _1849_recErased;
                    readIdents = _1850_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1851___mcc_h979 = _source59.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1852_recursiveGen;
                    bool _1853_recOwned;
                    bool _1854_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1855_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1133;
                    bool _out1134;
                    bool _out1135;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1133, out _out1134, out _out1135, out _out1136);
                    _1852_recursiveGen = _out1133;
                    _1853_recOwned = _out1134;
                    _1854_recErased = _out1135;
                    _1855_recIdents = _out1136;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1852_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1853_recOwned;
                    isErased = _1854_recErased;
                    readIdents = _1855_recIdents;
                  }
                }
              } else if (_source52.is_Bool) {
                DAST._IType _source61 = _676___mcc_h306;
                if (_source61.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1856___mcc_h981 = _source61.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1857___mcc_h982 = _source61.dtor_typeArgs;
                  DAST._IResolvedType _1858___mcc_h983 = _source61.dtor_resolved;
                  DAST._IResolvedType _source62 = _1858___mcc_h983;
                  if (_source62.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1859___mcc_h987 = _source62.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1860_recursiveGen;
                      bool _1861_recOwned;
                      bool _1862_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1863_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1137;
                      bool _out1138;
                      bool _out1139;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1140;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1137, out _out1138, out _out1139, out _out1140);
                      _1860_recursiveGen = _out1137;
                      _1861_recOwned = _out1138;
                      _1862_recErased = _out1139;
                      _1863_recIdents = _out1140;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1860_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1861_recOwned;
                      isErased = _1862_recErased;
                      readIdents = _1863_recIdents;
                    }
                  } else if (_source62.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1864___mcc_h989 = _source62.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1865_recursiveGen;
                      bool _1866_recOwned;
                      bool _1867_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1868_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1141;
                      bool _out1142;
                      bool _out1143;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1144;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1141, out _out1142, out _out1143, out _out1144);
                      _1865_recursiveGen = _out1141;
                      _1866_recOwned = _out1142;
                      _1867_recErased = _out1143;
                      _1868_recIdents = _out1144;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1865_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1866_recOwned;
                      isErased = _1867_recErased;
                      readIdents = _1868_recIdents;
                    }
                  } else {
                    DAST._IType _1869___mcc_h991 = _source62.dtor_Newtype_a0;
                    DAST._IType _1870_b = _1869___mcc_h991;
                    {
                      if (object.Equals(_669_fromTpe, _1870_b)) {
                        Dafny.ISequence<Dafny.Rune> _1871_recursiveGen;
                        bool _1872_recOwned;
                        bool _1873_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1874_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1145;
                        bool _out1146;
                        bool _out1147;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                        _1871_recursiveGen = _out1145;
                        _1872_recOwned = _out1146;
                        _1873_recErased = _out1147;
                        _1874_recIdents = _out1148;
                        Dafny.ISequence<Dafny.Rune> _1875_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1149;
                        _out1149 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                        _1875_rhsType = _out1149;
                        Dafny.ISequence<Dafny.Rune> _1876_uneraseFn;
                        _1876_uneraseFn = ((_1872_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1875_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1876_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1871_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1872_recOwned;
                        isErased = false;
                        readIdents = _1874_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1150;
                        bool _out1151;
                        bool _out1152;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1870_b), _1870_b, _668_toTpe), selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                        s = _out1150;
                        isOwned = _out1151;
                        isErased = _out1152;
                        readIdents = _out1153;
                      }
                    }
                  }
                } else if (_source61.is_Nullable) {
                  DAST._IType _1877___mcc_h993 = _source61.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1878_recursiveGen;
                    bool _1879_recOwned;
                    bool _1880_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1881_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1154;
                    bool _out1155;
                    bool _out1156;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                    _1878_recursiveGen = _out1154;
                    _1879_recOwned = _out1155;
                    _1880_recErased = _out1156;
                    _1881_recIdents = _out1157;
                    if (!(_1879_recOwned)) {
                      _1878_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1878_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1878_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1880_recErased;
                    readIdents = _1881_recIdents;
                  }
                } else if (_source61.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1882___mcc_h995 = _source61.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1883_recursiveGen;
                    bool _1884_recOwned;
                    bool _1885_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1886_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1158;
                    bool _out1159;
                    bool _out1160;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                    _1883_recursiveGen = _out1158;
                    _1884_recOwned = _out1159;
                    _1885_recErased = _out1160;
                    _1886_recIdents = _out1161;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1883_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1884_recOwned;
                    isErased = _1885_recErased;
                    readIdents = _1886_recIdents;
                  }
                } else if (_source61.is_Array) {
                  DAST._IType _1887___mcc_h997 = _source61.dtor_element;
                  BigInteger _1888___mcc_h998 = _source61.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1889_recursiveGen;
                    bool _1890_recOwned;
                    bool _1891_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1892_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1162;
                    bool _out1163;
                    bool _out1164;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1165;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1162, out _out1163, out _out1164, out _out1165);
                    _1889_recursiveGen = _out1162;
                    _1890_recOwned = _out1163;
                    _1891_recErased = _out1164;
                    _1892_recIdents = _out1165;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1889_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1890_recOwned;
                    isErased = _1891_recErased;
                    readIdents = _1892_recIdents;
                  }
                } else if (_source61.is_Seq) {
                  DAST._IType _1893___mcc_h1001 = _source61.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1894_recursiveGen;
                    bool _1895_recOwned;
                    bool _1896_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1897_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1166;
                    bool _out1167;
                    bool _out1168;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1166, out _out1167, out _out1168, out _out1169);
                    _1894_recursiveGen = _out1166;
                    _1895_recOwned = _out1167;
                    _1896_recErased = _out1168;
                    _1897_recIdents = _out1169;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1894_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1895_recOwned;
                    isErased = _1896_recErased;
                    readIdents = _1897_recIdents;
                  }
                } else if (_source61.is_Set) {
                  DAST._IType _1898___mcc_h1003 = _source61.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1899_recursiveGen;
                    bool _1900_recOwned;
                    bool _1901_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1902_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1170;
                    bool _out1171;
                    bool _out1172;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1170, out _out1171, out _out1172, out _out1173);
                    _1899_recursiveGen = _out1170;
                    _1900_recOwned = _out1171;
                    _1901_recErased = _out1172;
                    _1902_recIdents = _out1173;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1899_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1900_recOwned;
                    isErased = _1901_recErased;
                    readIdents = _1902_recIdents;
                  }
                } else if (_source61.is_Multiset) {
                  DAST._IType _1903___mcc_h1005 = _source61.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1904_recursiveGen;
                    bool _1905_recOwned;
                    bool _1906_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1907_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1174;
                    bool _out1175;
                    bool _out1176;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1177;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1174, out _out1175, out _out1176, out _out1177);
                    _1904_recursiveGen = _out1174;
                    _1905_recOwned = _out1175;
                    _1906_recErased = _out1176;
                    _1907_recIdents = _out1177;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1904_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1905_recOwned;
                    isErased = _1906_recErased;
                    readIdents = _1907_recIdents;
                  }
                } else if (_source61.is_Map) {
                  DAST._IType _1908___mcc_h1007 = _source61.dtor_key;
                  DAST._IType _1909___mcc_h1008 = _source61.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1910_recursiveGen;
                    bool _1911_recOwned;
                    bool _1912_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1913_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1178;
                    bool _out1179;
                    bool _out1180;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1178, out _out1179, out _out1180, out _out1181);
                    _1910_recursiveGen = _out1178;
                    _1911_recOwned = _out1179;
                    _1912_recErased = _out1180;
                    _1913_recIdents = _out1181;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1910_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1911_recOwned;
                    isErased = _1912_recErased;
                    readIdents = _1913_recIdents;
                  }
                } else if (_source61.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1914___mcc_h1011 = _source61.dtor_args;
                  DAST._IType _1915___mcc_h1012 = _source61.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1916_recursiveGen;
                    bool _1917_recOwned;
                    bool _1918_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1919_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1182;
                    bool _out1183;
                    bool _out1184;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1185;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1182, out _out1183, out _out1184, out _out1185);
                    _1916_recursiveGen = _out1182;
                    _1917_recOwned = _out1183;
                    _1918_recErased = _out1184;
                    _1919_recIdents = _out1185;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1916_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1917_recOwned;
                    isErased = _1918_recErased;
                    readIdents = _1919_recIdents;
                  }
                } else if (_source61.is_Primitive) {
                  DAST._IPrimitive _1920___mcc_h1015 = _source61.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1921_recursiveGen;
                    bool _1922_recOwned;
                    bool _1923_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1924_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1186;
                    bool _out1187;
                    bool _out1188;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1189;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1186, out _out1187, out _out1188, out _out1189);
                    _1921_recursiveGen = _out1186;
                    _1922_recOwned = _out1187;
                    _1923_recErased = _out1188;
                    _1924_recIdents = _out1189;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1921_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1922_recOwned;
                    isErased = _1923_recErased;
                    readIdents = _1924_recIdents;
                  }
                } else if (_source61.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1925___mcc_h1017 = _source61.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1926_recursiveGen;
                    bool _1927_recOwned;
                    bool _1928_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1929_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1190;
                    bool _out1191;
                    bool _out1192;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1190, out _out1191, out _out1192, out _out1193);
                    _1926_recursiveGen = _out1190;
                    _1927_recOwned = _out1191;
                    _1928_recErased = _out1192;
                    _1929_recIdents = _out1193;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1926_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1927_recOwned;
                    isErased = _1928_recErased;
                    readIdents = _1929_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1930___mcc_h1019 = _source61.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1931_recursiveGen;
                    bool _1932_recOwned;
                    bool _1933_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1934_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1194;
                    bool _out1195;
                    bool _out1196;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1197;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1194, out _out1195, out _out1196, out _out1197);
                    _1931_recursiveGen = _out1194;
                    _1932_recOwned = _out1195;
                    _1933_recErased = _out1196;
                    _1934_recIdents = _out1197;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1931_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1932_recOwned;
                    isErased = _1933_recErased;
                    readIdents = _1934_recIdents;
                  }
                }
              } else {
                DAST._IType _source63 = _676___mcc_h306;
                if (_source63.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1935___mcc_h1021 = _source63.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1936___mcc_h1022 = _source63.dtor_typeArgs;
                  DAST._IResolvedType _1937___mcc_h1023 = _source63.dtor_resolved;
                  DAST._IResolvedType _source64 = _1937___mcc_h1023;
                  if (_source64.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1938___mcc_h1027 = _source64.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1939_recursiveGen;
                      bool _1940_recOwned;
                      bool _1941_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1942_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1198;
                      bool _out1199;
                      bool _out1200;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1201;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1198, out _out1199, out _out1200, out _out1201);
                      _1939_recursiveGen = _out1198;
                      _1940_recOwned = _out1199;
                      _1941_recErased = _out1200;
                      _1942_recIdents = _out1201;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1940_recOwned;
                      isErased = _1941_recErased;
                      readIdents = _1942_recIdents;
                    }
                  } else if (_source64.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1943___mcc_h1029 = _source64.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1944_recursiveGen;
                      bool _1945_recOwned;
                      bool _1946_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1947_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1202;
                      bool _out1203;
                      bool _out1204;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1202, out _out1203, out _out1204, out _out1205);
                      _1944_recursiveGen = _out1202;
                      _1945_recOwned = _out1203;
                      _1946_recErased = _out1204;
                      _1947_recIdents = _out1205;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1944_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1945_recOwned;
                      isErased = _1946_recErased;
                      readIdents = _1947_recIdents;
                    }
                  } else {
                    DAST._IType _1948___mcc_h1031 = _source64.dtor_Newtype_a0;
                    DAST._IType _1949_b = _1948___mcc_h1031;
                    {
                      if (object.Equals(_669_fromTpe, _1949_b)) {
                        Dafny.ISequence<Dafny.Rune> _1950_recursiveGen;
                        bool _1951_recOwned;
                        bool _1952_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1953_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1206;
                        bool _out1207;
                        bool _out1208;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                        DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                        _1950_recursiveGen = _out1206;
                        _1951_recOwned = _out1207;
                        _1952_recErased = _out1208;
                        _1953_recIdents = _out1209;
                        Dafny.ISequence<Dafny.Rune> _1954_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1210;
                        _out1210 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                        _1954_rhsType = _out1210;
                        Dafny.ISequence<Dafny.Rune> _1955_uneraseFn;
                        _1955_uneraseFn = ((_1951_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1954_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1955_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1950_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1951_recOwned;
                        isErased = false;
                        readIdents = _1953_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1211;
                        bool _out1212;
                        bool _out1213;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _1949_b), _1949_b, _668_toTpe), selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                        s = _out1211;
                        isOwned = _out1212;
                        isErased = _out1213;
                        readIdents = _out1214;
                      }
                    }
                  }
                } else if (_source63.is_Nullable) {
                  DAST._IType _1956___mcc_h1033 = _source63.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1957_recursiveGen;
                    bool _1958_recOwned;
                    bool _1959_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1960_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1215;
                    bool _out1216;
                    bool _out1217;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                    _1957_recursiveGen = _out1215;
                    _1958_recOwned = _out1216;
                    _1959_recErased = _out1217;
                    _1960_recIdents = _out1218;
                    if (!(_1958_recOwned)) {
                      _1957_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1957_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1959_recErased;
                    readIdents = _1960_recIdents;
                  }
                } else if (_source63.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1961___mcc_h1035 = _source63.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1962_recursiveGen;
                    bool _1963_recOwned;
                    bool _1964_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1965_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1219;
                    bool _out1220;
                    bool _out1221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                    _1962_recursiveGen = _out1219;
                    _1963_recOwned = _out1220;
                    _1964_recErased = _out1221;
                    _1965_recIdents = _out1222;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1963_recOwned;
                    isErased = _1964_recErased;
                    readIdents = _1965_recIdents;
                  }
                } else if (_source63.is_Array) {
                  DAST._IType _1966___mcc_h1037 = _source63.dtor_element;
                  BigInteger _1967___mcc_h1038 = _source63.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1968_recursiveGen;
                    bool _1969_recOwned;
                    bool _1970_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1971_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1223;
                    bool _out1224;
                    bool _out1225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1223, out _out1224, out _out1225, out _out1226);
                    _1968_recursiveGen = _out1223;
                    _1969_recOwned = _out1224;
                    _1970_recErased = _out1225;
                    _1971_recIdents = _out1226;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1968_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1969_recOwned;
                    isErased = _1970_recErased;
                    readIdents = _1971_recIdents;
                  }
                } else if (_source63.is_Seq) {
                  DAST._IType _1972___mcc_h1041 = _source63.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1973_recursiveGen;
                    bool _1974_recOwned;
                    bool _1975_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1976_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1227;
                    bool _out1228;
                    bool _out1229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1230;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1227, out _out1228, out _out1229, out _out1230);
                    _1973_recursiveGen = _out1227;
                    _1974_recOwned = _out1228;
                    _1975_recErased = _out1229;
                    _1976_recIdents = _out1230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1973_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1974_recOwned;
                    isErased = _1975_recErased;
                    readIdents = _1976_recIdents;
                  }
                } else if (_source63.is_Set) {
                  DAST._IType _1977___mcc_h1043 = _source63.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1978_recursiveGen;
                    bool _1979_recOwned;
                    bool _1980_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1981_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1231;
                    bool _out1232;
                    bool _out1233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1231, out _out1232, out _out1233, out _out1234);
                    _1978_recursiveGen = _out1231;
                    _1979_recOwned = _out1232;
                    _1980_recErased = _out1233;
                    _1981_recIdents = _out1234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1979_recOwned;
                    isErased = _1980_recErased;
                    readIdents = _1981_recIdents;
                  }
                } else if (_source63.is_Multiset) {
                  DAST._IType _1982___mcc_h1045 = _source63.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1983_recursiveGen;
                    bool _1984_recOwned;
                    bool _1985_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1986_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1235;
                    bool _out1236;
                    bool _out1237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1235, out _out1236, out _out1237, out _out1238);
                    _1983_recursiveGen = _out1235;
                    _1984_recOwned = _out1236;
                    _1985_recErased = _out1237;
                    _1986_recIdents = _out1238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1983_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1984_recOwned;
                    isErased = _1985_recErased;
                    readIdents = _1986_recIdents;
                  }
                } else if (_source63.is_Map) {
                  DAST._IType _1987___mcc_h1047 = _source63.dtor_key;
                  DAST._IType _1988___mcc_h1048 = _source63.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1989_recursiveGen;
                    bool _1990_recOwned;
                    bool _1991_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1992_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1239;
                    bool _out1240;
                    bool _out1241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1239, out _out1240, out _out1241, out _out1242);
                    _1989_recursiveGen = _out1239;
                    _1990_recOwned = _out1240;
                    _1991_recErased = _out1241;
                    _1992_recIdents = _out1242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1989_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1990_recOwned;
                    isErased = _1991_recErased;
                    readIdents = _1992_recIdents;
                  }
                } else if (_source63.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1993___mcc_h1051 = _source63.dtor_args;
                  DAST._IType _1994___mcc_h1052 = _source63.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1995_recursiveGen;
                    bool _1996_recOwned;
                    bool _1997_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1998_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1243;
                    bool _out1244;
                    bool _out1245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1246;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1243, out _out1244, out _out1245, out _out1246);
                    _1995_recursiveGen = _out1243;
                    _1996_recOwned = _out1244;
                    _1997_recErased = _out1245;
                    _1998_recIdents = _out1246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1995_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1996_recOwned;
                    isErased = _1997_recErased;
                    readIdents = _1998_recIdents;
                  }
                } else if (_source63.is_Primitive) {
                  DAST._IPrimitive _1999___mcc_h1055 = _source63.dtor_Primitive_a0;
                  DAST._IPrimitive _source65 = _1999___mcc_h1055;
                  if (_source65.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2000_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1247;
                      _out1247 = DCOMP.COMP.GenType(_669_fromTpe, true, false);
                      _2000_rhsType = _out1247;
                      Dafny.ISequence<Dafny.Rune> _2001_recursiveGen;
                      bool _2002___v59;
                      bool _2003___v60;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2004_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1248;
                      bool _out1249;
                      bool _out1250;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, true, out _out1248, out _out1249, out _out1250, out _out1251);
                      _2001_recursiveGen = _out1248;
                      _2002___v59 = _out1249;
                      _2003___v60 = _out1250;
                      _2004_recIdents = _out1251;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2001_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2004_recIdents;
                    }
                  } else if (_source65.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2005_recursiveGen;
                      bool _2006_recOwned;
                      bool _2007_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2008_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1252;
                      bool _out1253;
                      bool _out1254;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                      _2005_recursiveGen = _out1252;
                      _2006_recOwned = _out1253;
                      _2007_recErased = _out1254;
                      _2008_recIdents = _out1255;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2005_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2006_recOwned;
                      isErased = _2007_recErased;
                      readIdents = _2008_recIdents;
                    }
                  } else if (_source65.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2009_recursiveGen;
                      bool _2010_recOwned;
                      bool _2011_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2012_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1256;
                      bool _out1257;
                      bool _out1258;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                      _2009_recursiveGen = _out1256;
                      _2010_recOwned = _out1257;
                      _2011_recErased = _out1258;
                      _2012_recIdents = _out1259;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2009_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2010_recOwned;
                      isErased = _2011_recErased;
                      readIdents = _2012_recIdents;
                    }
                  } else if (_source65.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2013_recursiveGen;
                      bool _2014_recOwned;
                      bool _2015_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2016_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1260;
                      bool _out1261;
                      bool _out1262;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1263;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1260, out _out1261, out _out1262, out _out1263);
                      _2013_recursiveGen = _out1260;
                      _2014_recOwned = _out1261;
                      _2015_recErased = _out1262;
                      _2016_recIdents = _out1263;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2013_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2014_recOwned;
                      isErased = _2015_recErased;
                      readIdents = _2016_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2017_recursiveGen;
                      bool _2018_recOwned;
                      bool _2019_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2020_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1264;
                      bool _out1265;
                      bool _out1266;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1264, out _out1265, out _out1266, out _out1267);
                      _2017_recursiveGen = _out1264;
                      _2018_recOwned = _out1265;
                      _2019_recErased = _out1266;
                      _2020_recIdents = _out1267;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2017_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2018_recOwned;
                      isErased = _2019_recErased;
                      readIdents = _2020_recIdents;
                    }
                  }
                } else if (_source63.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2021___mcc_h1057 = _source63.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2022_recursiveGen;
                    bool _2023_recOwned;
                    bool _2024_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2025_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1268;
                    bool _out1269;
                    bool _out1270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1268, out _out1269, out _out1270, out _out1271);
                    _2022_recursiveGen = _out1268;
                    _2023_recOwned = _out1269;
                    _2024_recErased = _out1270;
                    _2025_recIdents = _out1271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2022_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2023_recOwned;
                    isErased = _2024_recErased;
                    readIdents = _2025_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2026___mcc_h1059 = _source63.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2027_recursiveGen;
                    bool _2028_recOwned;
                    bool _2029_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2030_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1272;
                    bool _out1273;
                    bool _out1274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1275;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1272, out _out1273, out _out1274, out _out1275);
                    _2027_recursiveGen = _out1272;
                    _2028_recOwned = _out1273;
                    _2029_recErased = _out1274;
                    _2030_recIdents = _out1275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2027_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2028_recOwned;
                    isErased = _2029_recErased;
                    readIdents = _2030_recIdents;
                  }
                }
              }
            } else if (_source28.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2031___mcc_h1061 = _source28.dtor_Passthrough_a0;
              DAST._IType _source66 = _676___mcc_h306;
              if (_source66.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2032___mcc_h1065 = _source66.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2033___mcc_h1066 = _source66.dtor_typeArgs;
                DAST._IResolvedType _2034___mcc_h1067 = _source66.dtor_resolved;
                DAST._IResolvedType _source67 = _2034___mcc_h1067;
                if (_source67.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2035___mcc_h1071 = _source67.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2036_recursiveGen;
                    bool _2037_recOwned;
                    bool _2038_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2039_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1276;
                    bool _out1277;
                    bool _out1278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1279;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1276, out _out1277, out _out1278, out _out1279);
                    _2036_recursiveGen = _out1276;
                    _2037_recOwned = _out1277;
                    _2038_recErased = _out1278;
                    _2039_recIdents = _out1279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2036_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2037_recOwned;
                    isErased = _2038_recErased;
                    readIdents = _2039_recIdents;
                  }
                } else if (_source67.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2040___mcc_h1073 = _source67.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2041_recursiveGen;
                    bool _2042_recOwned;
                    bool _2043_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2044_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1280;
                    bool _out1281;
                    bool _out1282;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1280, out _out1281, out _out1282, out _out1283);
                    _2041_recursiveGen = _out1280;
                    _2042_recOwned = _out1281;
                    _2043_recErased = _out1282;
                    _2044_recIdents = _out1283;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2041_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2042_recOwned;
                    isErased = _2043_recErased;
                    readIdents = _2044_recIdents;
                  }
                } else {
                  DAST._IType _2045___mcc_h1075 = _source67.dtor_Newtype_a0;
                  DAST._IType _2046_b = _2045___mcc_h1075;
                  {
                    if (object.Equals(_669_fromTpe, _2046_b)) {
                      Dafny.ISequence<Dafny.Rune> _2047_recursiveGen;
                      bool _2048_recOwned;
                      bool _2049_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2050_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1284;
                      bool _out1285;
                      bool _out1286;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1284, out _out1285, out _out1286, out _out1287);
                      _2047_recursiveGen = _out1284;
                      _2048_recOwned = _out1285;
                      _2049_recErased = _out1286;
                      _2050_recIdents = _out1287;
                      Dafny.ISequence<Dafny.Rune> _2051_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1288;
                      _out1288 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _2051_rhsType = _out1288;
                      Dafny.ISequence<Dafny.Rune> _2052_uneraseFn;
                      _2052_uneraseFn = ((_2048_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2051_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2052_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2047_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2048_recOwned;
                      isErased = false;
                      readIdents = _2050_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1289;
                      bool _out1290;
                      bool _out1291;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _2046_b), _2046_b, _668_toTpe), selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                      s = _out1289;
                      isOwned = _out1290;
                      isErased = _out1291;
                      readIdents = _out1292;
                    }
                  }
                }
              } else if (_source66.is_Nullable) {
                DAST._IType _2053___mcc_h1077 = _source66.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2054_recursiveGen;
                  bool _2055_recOwned;
                  bool _2056_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2057_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1293;
                  bool _out1294;
                  bool _out1295;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                  _2054_recursiveGen = _out1293;
                  _2055_recOwned = _out1294;
                  _2056_recErased = _out1295;
                  _2057_recIdents = _out1296;
                  if (!(_2055_recOwned)) {
                    _2054_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2054_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2054_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2056_recErased;
                  readIdents = _2057_recIdents;
                }
              } else if (_source66.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2058___mcc_h1079 = _source66.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2059_recursiveGen;
                  bool _2060_recOwned;
                  bool _2061_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2062_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1297;
                  bool _out1298;
                  bool _out1299;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                  _2059_recursiveGen = _out1297;
                  _2060_recOwned = _out1298;
                  _2061_recErased = _out1299;
                  _2062_recIdents = _out1300;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2059_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2060_recOwned;
                  isErased = _2061_recErased;
                  readIdents = _2062_recIdents;
                }
              } else if (_source66.is_Array) {
                DAST._IType _2063___mcc_h1081 = _source66.dtor_element;
                BigInteger _2064___mcc_h1082 = _source66.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2065_recursiveGen;
                  bool _2066_recOwned;
                  bool _2067_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2068_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1301;
                  bool _out1302;
                  bool _out1303;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1304;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1301, out _out1302, out _out1303, out _out1304);
                  _2065_recursiveGen = _out1301;
                  _2066_recOwned = _out1302;
                  _2067_recErased = _out1303;
                  _2068_recIdents = _out1304;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2065_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2066_recOwned;
                  isErased = _2067_recErased;
                  readIdents = _2068_recIdents;
                }
              } else if (_source66.is_Seq) {
                DAST._IType _2069___mcc_h1085 = _source66.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2070_recursiveGen;
                  bool _2071_recOwned;
                  bool _2072_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2073_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1305;
                  bool _out1306;
                  bool _out1307;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1305, out _out1306, out _out1307, out _out1308);
                  _2070_recursiveGen = _out1305;
                  _2071_recOwned = _out1306;
                  _2072_recErased = _out1307;
                  _2073_recIdents = _out1308;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2071_recOwned;
                  isErased = _2072_recErased;
                  readIdents = _2073_recIdents;
                }
              } else if (_source66.is_Set) {
                DAST._IType _2074___mcc_h1087 = _source66.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2075_recursiveGen;
                  bool _2076_recOwned;
                  bool _2077_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2078_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1309;
                  bool _out1310;
                  bool _out1311;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1309, out _out1310, out _out1311, out _out1312);
                  _2075_recursiveGen = _out1309;
                  _2076_recOwned = _out1310;
                  _2077_recErased = _out1311;
                  _2078_recIdents = _out1312;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2076_recOwned;
                  isErased = _2077_recErased;
                  readIdents = _2078_recIdents;
                }
              } else if (_source66.is_Multiset) {
                DAST._IType _2079___mcc_h1089 = _source66.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2080_recursiveGen;
                  bool _2081_recOwned;
                  bool _2082_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2083_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1313;
                  bool _out1314;
                  bool _out1315;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1313, out _out1314, out _out1315, out _out1316);
                  _2080_recursiveGen = _out1313;
                  _2081_recOwned = _out1314;
                  _2082_recErased = _out1315;
                  _2083_recIdents = _out1316;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2080_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2081_recOwned;
                  isErased = _2082_recErased;
                  readIdents = _2083_recIdents;
                }
              } else if (_source66.is_Map) {
                DAST._IType _2084___mcc_h1091 = _source66.dtor_key;
                DAST._IType _2085___mcc_h1092 = _source66.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2086_recursiveGen;
                  bool _2087_recOwned;
                  bool _2088_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2089_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1317;
                  bool _out1318;
                  bool _out1319;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1317, out _out1318, out _out1319, out _out1320);
                  _2086_recursiveGen = _out1317;
                  _2087_recOwned = _out1318;
                  _2088_recErased = _out1319;
                  _2089_recIdents = _out1320;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2087_recOwned;
                  isErased = _2088_recErased;
                  readIdents = _2089_recIdents;
                }
              } else if (_source66.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2090___mcc_h1095 = _source66.dtor_args;
                DAST._IType _2091___mcc_h1096 = _source66.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2092_recursiveGen;
                  bool _2093_recOwned;
                  bool _2094_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2095_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1321;
                  bool _out1322;
                  bool _out1323;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1324;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1321, out _out1322, out _out1323, out _out1324);
                  _2092_recursiveGen = _out1321;
                  _2093_recOwned = _out1322;
                  _2094_recErased = _out1323;
                  _2095_recIdents = _out1324;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2092_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2093_recOwned;
                  isErased = _2094_recErased;
                  readIdents = _2095_recIdents;
                }
              } else if (_source66.is_Primitive) {
                DAST._IPrimitive _2096___mcc_h1099 = _source66.dtor_Primitive_a0;
                DAST._IPrimitive _source68 = _2096___mcc_h1099;
                if (_source68.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2097_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1325;
                    _out1325 = DCOMP.COMP.GenType(_669_fromTpe, true, false);
                    _2097_rhsType = _out1325;
                    Dafny.ISequence<Dafny.Rune> _2098_recursiveGen;
                    bool _2099___v55;
                    bool _2100___v56;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2101_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1326;
                    bool _out1327;
                    bool _out1328;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, true, out _out1326, out _out1327, out _out1328, out _out1329);
                    _2098_recursiveGen = _out1326;
                    _2099___v55 = _out1327;
                    _2100___v56 = _out1328;
                    _2101_recIdents = _out1329;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2098_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2101_recIdents;
                  }
                } else if (_source68.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2102_recursiveGen;
                    bool _2103_recOwned;
                    bool _2104_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2105_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1330;
                    bool _out1331;
                    bool _out1332;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                    _2102_recursiveGen = _out1330;
                    _2103_recOwned = _out1331;
                    _2104_recErased = _out1332;
                    _2105_recIdents = _out1333;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2102_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2103_recOwned;
                    isErased = _2104_recErased;
                    readIdents = _2105_recIdents;
                  }
                } else if (_source68.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2106_recursiveGen;
                    bool _2107_recOwned;
                    bool _2108_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2109_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1334;
                    bool _out1335;
                    bool _out1336;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                    _2106_recursiveGen = _out1334;
                    _2107_recOwned = _out1335;
                    _2108_recErased = _out1336;
                    _2109_recIdents = _out1337;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2106_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2107_recOwned;
                    isErased = _2108_recErased;
                    readIdents = _2109_recIdents;
                  }
                } else if (_source68.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2110_recursiveGen;
                    bool _2111_recOwned;
                    bool _2112_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2113_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1338;
                    bool _out1339;
                    bool _out1340;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1338, out _out1339, out _out1340, out _out1341);
                    _2110_recursiveGen = _out1338;
                    _2111_recOwned = _out1339;
                    _2112_recErased = _out1340;
                    _2113_recIdents = _out1341;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2110_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2111_recOwned;
                    isErased = _2112_recErased;
                    readIdents = _2113_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2114_recursiveGen;
                    bool _2115_recOwned;
                    bool _2116_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2117_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1342;
                    bool _out1343;
                    bool _out1344;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1345;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1342, out _out1343, out _out1344, out _out1345);
                    _2114_recursiveGen = _out1342;
                    _2115_recOwned = _out1343;
                    _2116_recErased = _out1344;
                    _2117_recIdents = _out1345;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2114_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2115_recOwned;
                    isErased = _2116_recErased;
                    readIdents = _2117_recIdents;
                  }
                }
              } else if (_source66.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2118___mcc_h1101 = _source66.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2119_recursiveGen;
                  bool _2120___v63;
                  bool _2121___v64;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2122_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1346;
                  bool _out1347;
                  bool _out1348;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1349;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, true, out _out1346, out _out1347, out _out1348, out _out1349);
                  _2119_recursiveGen = _out1346;
                  _2120___v63 = _out1347;
                  _2121___v64 = _out1348;
                  _2122_recIdents = _out1349;
                  Dafny.ISequence<Dafny.Rune> _2123_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1350;
                  _out1350 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                  _2123_toTpeGen = _out1350;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2119_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2123_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2122_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2124___mcc_h1103 = _source66.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2125_recursiveGen;
                  bool _2126_recOwned;
                  bool _2127_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2128_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1351;
                  bool _out1352;
                  bool _out1353;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                  _2125_recursiveGen = _out1351;
                  _2126_recOwned = _out1352;
                  _2127_recErased = _out1353;
                  _2128_recIdents = _out1354;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2125_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2126_recOwned;
                  isErased = _2127_recErased;
                  readIdents = _2128_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2129___mcc_h1105 = _source28.dtor_TypeArg_a0;
              DAST._IType _source69 = _676___mcc_h306;
              if (_source69.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2130___mcc_h1109 = _source69.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2131___mcc_h1110 = _source69.dtor_typeArgs;
                DAST._IResolvedType _2132___mcc_h1111 = _source69.dtor_resolved;
                DAST._IResolvedType _source70 = _2132___mcc_h1111;
                if (_source70.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2133___mcc_h1115 = _source70.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2134_recursiveGen;
                    bool _2135_recOwned;
                    bool _2136_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2137_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1355;
                    bool _out1356;
                    bool _out1357;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                    _2134_recursiveGen = _out1355;
                    _2135_recOwned = _out1356;
                    _2136_recErased = _out1357;
                    _2137_recIdents = _out1358;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2134_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2135_recOwned;
                    isErased = _2136_recErased;
                    readIdents = _2137_recIdents;
                  }
                } else if (_source70.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2138___mcc_h1117 = _source70.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2139_recursiveGen;
                    bool _2140_recOwned;
                    bool _2141_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2142_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1359;
                    bool _out1360;
                    bool _out1361;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                    DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1359, out _out1360, out _out1361, out _out1362);
                    _2139_recursiveGen = _out1359;
                    _2140_recOwned = _out1360;
                    _2141_recErased = _out1361;
                    _2142_recIdents = _out1362;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2139_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2140_recOwned;
                    isErased = _2141_recErased;
                    readIdents = _2142_recIdents;
                  }
                } else {
                  DAST._IType _2143___mcc_h1119 = _source70.dtor_Newtype_a0;
                  DAST._IType _2144_b = _2143___mcc_h1119;
                  {
                    if (object.Equals(_669_fromTpe, _2144_b)) {
                      Dafny.ISequence<Dafny.Rune> _2145_recursiveGen;
                      bool _2146_recOwned;
                      bool _2147_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2148_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1363;
                      bool _out1364;
                      bool _out1365;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1366;
                      DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1363, out _out1364, out _out1365, out _out1366);
                      _2145_recursiveGen = _out1363;
                      _2146_recOwned = _out1364;
                      _2147_recErased = _out1365;
                      _2148_recIdents = _out1366;
                      Dafny.ISequence<Dafny.Rune> _2149_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1367;
                      _out1367 = DCOMP.COMP.GenType(_668_toTpe, true, false);
                      _2149_rhsType = _out1367;
                      Dafny.ISequence<Dafny.Rune> _2150_uneraseFn;
                      _2150_uneraseFn = ((_2146_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2149_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2150_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2145_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2146_recOwned;
                      isErased = false;
                      readIdents = _2148_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1368;
                      bool _out1369;
                      bool _out1370;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_670_expr, _669_fromTpe, _2144_b), _2144_b, _668_toTpe), selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                      s = _out1368;
                      isOwned = _out1369;
                      isErased = _out1370;
                      readIdents = _out1371;
                    }
                  }
                }
              } else if (_source69.is_Nullable) {
                DAST._IType _2151___mcc_h1121 = _source69.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2152_recursiveGen;
                  bool _2153_recOwned;
                  bool _2154_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2155_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1372;
                  bool _out1373;
                  bool _out1374;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                  _2152_recursiveGen = _out1372;
                  _2153_recOwned = _out1373;
                  _2154_recErased = _out1374;
                  _2155_recIdents = _out1375;
                  if (!(_2153_recOwned)) {
                    _2152_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2152_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2152_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2154_recErased;
                  readIdents = _2155_recIdents;
                }
              } else if (_source69.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2156___mcc_h1123 = _source69.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2157_recursiveGen;
                  bool _2158_recOwned;
                  bool _2159_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2160_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1376;
                  bool _out1377;
                  bool _out1378;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1376, out _out1377, out _out1378, out _out1379);
                  _2157_recursiveGen = _out1376;
                  _2158_recOwned = _out1377;
                  _2159_recErased = _out1378;
                  _2160_recIdents = _out1379;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2158_recOwned;
                  isErased = _2159_recErased;
                  readIdents = _2160_recIdents;
                }
              } else if (_source69.is_Array) {
                DAST._IType _2161___mcc_h1125 = _source69.dtor_element;
                BigInteger _2162___mcc_h1126 = _source69.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2163_recursiveGen;
                  bool _2164_recOwned;
                  bool _2165_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2166_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1380;
                  bool _out1381;
                  bool _out1382;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1383;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1380, out _out1381, out _out1382, out _out1383);
                  _2163_recursiveGen = _out1380;
                  _2164_recOwned = _out1381;
                  _2165_recErased = _out1382;
                  _2166_recIdents = _out1383;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2163_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2164_recOwned;
                  isErased = _2165_recErased;
                  readIdents = _2166_recIdents;
                }
              } else if (_source69.is_Seq) {
                DAST._IType _2167___mcc_h1129 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2168_recursiveGen;
                  bool _2169_recOwned;
                  bool _2170_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2171_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1384;
                  bool _out1385;
                  bool _out1386;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1387;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1384, out _out1385, out _out1386, out _out1387);
                  _2168_recursiveGen = _out1384;
                  _2169_recOwned = _out1385;
                  _2170_recErased = _out1386;
                  _2171_recIdents = _out1387;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2168_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2169_recOwned;
                  isErased = _2170_recErased;
                  readIdents = _2171_recIdents;
                }
              } else if (_source69.is_Set) {
                DAST._IType _2172___mcc_h1131 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2173_recursiveGen;
                  bool _2174_recOwned;
                  bool _2175_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2176_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1388;
                  bool _out1389;
                  bool _out1390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1388, out _out1389, out _out1390, out _out1391);
                  _2173_recursiveGen = _out1388;
                  _2174_recOwned = _out1389;
                  _2175_recErased = _out1390;
                  _2176_recIdents = _out1391;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2173_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2174_recOwned;
                  isErased = _2175_recErased;
                  readIdents = _2176_recIdents;
                }
              } else if (_source69.is_Multiset) {
                DAST._IType _2177___mcc_h1133 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2178_recursiveGen;
                  bool _2179_recOwned;
                  bool _2180_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2181_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1392;
                  bool _out1393;
                  bool _out1394;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1395;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1392, out _out1393, out _out1394, out _out1395);
                  _2178_recursiveGen = _out1392;
                  _2179_recOwned = _out1393;
                  _2180_recErased = _out1394;
                  _2181_recIdents = _out1395;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2178_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2179_recOwned;
                  isErased = _2180_recErased;
                  readIdents = _2181_recIdents;
                }
              } else if (_source69.is_Map) {
                DAST._IType _2182___mcc_h1135 = _source69.dtor_key;
                DAST._IType _2183___mcc_h1136 = _source69.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2184_recursiveGen;
                  bool _2185_recOwned;
                  bool _2186_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2187_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1396;
                  bool _out1397;
                  bool _out1398;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1396, out _out1397, out _out1398, out _out1399);
                  _2184_recursiveGen = _out1396;
                  _2185_recOwned = _out1397;
                  _2186_recErased = _out1398;
                  _2187_recIdents = _out1399;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2184_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2185_recOwned;
                  isErased = _2186_recErased;
                  readIdents = _2187_recIdents;
                }
              } else if (_source69.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2188___mcc_h1139 = _source69.dtor_args;
                DAST._IType _2189___mcc_h1140 = _source69.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2190_recursiveGen;
                  bool _2191_recOwned;
                  bool _2192_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2193_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1400;
                  bool _out1401;
                  bool _out1402;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1400, out _out1401, out _out1402, out _out1403);
                  _2190_recursiveGen = _out1400;
                  _2191_recOwned = _out1401;
                  _2192_recErased = _out1402;
                  _2193_recIdents = _out1403;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2190_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2191_recOwned;
                  isErased = _2192_recErased;
                  readIdents = _2193_recIdents;
                }
              } else if (_source69.is_Primitive) {
                DAST._IPrimitive _2194___mcc_h1143 = _source69.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2195_recursiveGen;
                  bool _2196_recOwned;
                  bool _2197_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2198_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1404;
                  bool _out1405;
                  bool _out1406;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1407;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1404, out _out1405, out _out1406, out _out1407);
                  _2195_recursiveGen = _out1404;
                  _2196_recOwned = _out1405;
                  _2197_recErased = _out1406;
                  _2198_recIdents = _out1407;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2195_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2196_recOwned;
                  isErased = _2197_recErased;
                  readIdents = _2198_recIdents;
                }
              } else if (_source69.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2199___mcc_h1145 = _source69.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2200_recursiveGen;
                  bool _2201_recOwned;
                  bool _2202_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2203_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1408;
                  bool _out1409;
                  bool _out1410;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1411;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1408, out _out1409, out _out1410, out _out1411);
                  _2200_recursiveGen = _out1408;
                  _2201_recOwned = _out1409;
                  _2202_recErased = _out1410;
                  _2203_recIdents = _out1411;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2200_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2201_recOwned;
                  isErased = _2202_recErased;
                  readIdents = _2203_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2204___mcc_h1147 = _source69.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2205_recursiveGen;
                  bool _2206_recOwned;
                  bool _2207_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2208_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1412;
                  bool _out1413;
                  bool _out1414;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1415;
                  DCOMP.COMP.GenExpr(_670_expr, selfIdent, @params, mustOwn, out _out1412, out _out1413, out _out1414, out _out1415);
                  _2205_recursiveGen = _out1412;
                  _2206_recOwned = _out1413;
                  _2207_recErased = _out1414;
                  _2208_recIdents = _out1415;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2205_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2206_recOwned;
                  isErased = _2207_recErased;
                  readIdents = _2208_recIdents;
                }
              }
            }
          }
        }
      } else if (_source21.is_SeqConstruct) {
        DAST._IExpression _2209___mcc_h26 = _source21.dtor_length;
        DAST._IExpression _2210___mcc_h27 = _source21.dtor_elem;
        DAST._IExpression _2211_expr = _2210___mcc_h27;
        DAST._IExpression _2212_length = _2209___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2213_recursiveGen;
          bool _2214___v66;
          bool _2215_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2216_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1416;
          bool _out1417;
          bool _out1418;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
          DCOMP.COMP.GenExpr(_2211_expr, selfIdent, @params, true, out _out1416, out _out1417, out _out1418, out _out1419);
          _2213_recursiveGen = _out1416;
          _2214___v66 = _out1417;
          _2215_eErased = _out1418;
          _2216_recIdents = _out1419;
          Dafny.ISequence<Dafny.Rune> _2217_lengthGen;
          bool _2218___v67;
          bool _2219_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2220_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1420;
          bool _out1421;
          bool _out1422;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1423;
          DCOMP.COMP.GenExpr(_2212_length, selfIdent, @params, true, out _out1420, out _out1421, out _out1422, out _out1423);
          _2217_lengthGen = _out1420;
          _2218___v67 = _out1421;
          _2219_lengthErased = _out1422;
          _2220_lengthIdents = _out1423;
          if (!(_2219_lengthErased)) {
            _2217_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2217_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2213_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2217_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2216_recIdents, _2220_lengthIdents);
          isOwned = true;
          isErased = _2215_eErased;
        }
      } else if (_source21.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2221___mcc_h28 = _source21.dtor_elements;
        DAST._IType _2222___mcc_h29 = _source21.dtor_typ;
        DAST._IType _2223_typ = _2222___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2224_exprs = _2221___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2225_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1424;
          _out1424 = DCOMP.COMP.GenType(_2223_typ, false, false);
          _2225_genTpe = _out1424;
          BigInteger _2226_i;
          _2226_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2226_i = BigInteger.Zero;
          while ((_2226_i) < (new BigInteger((_2224_exprs).Count))) {
            if ((_2226_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2227_recursiveGen;
            bool _2228___v68;
            bool _2229_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2230_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1425;
            bool _out1426;
            bool _out1427;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
            DCOMP.COMP.GenExpr((_2224_exprs).Select(_2226_i), selfIdent, @params, true, out _out1425, out _out1426, out _out1427, out _out1428);
            _2227_recursiveGen = _out1425;
            _2228___v68 = _out1426;
            _2229_isErased = _out1427;
            _2230_recIdents = _out1428;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2230_recIdents);
            if (_2229_isErased) {
              _2227_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2227_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2227_recursiveGen);
            _2226_i = (_2226_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2225_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2231___mcc_h30 = _source21.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2232_exprs = _2231___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2233_generatedValues;
          _2233_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2234_i;
          _2234_i = BigInteger.Zero;
          bool _2235_allErased;
          _2235_allErased = true;
          while ((_2234_i) < (new BigInteger((_2232_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2236_recursiveGen;
            bool _2237___v69;
            bool _2238_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2239_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1429;
            bool _out1430;
            bool _out1431;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
            DCOMP.COMP.GenExpr((_2232_exprs).Select(_2234_i), selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
            _2236_recursiveGen = _out1429;
            _2237___v69 = _out1430;
            _2238_isErased = _out1431;
            _2239_recIdents = _out1432;
            _2235_allErased = (_2235_allErased) && (_2238_isErased);
            _2233_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2233_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2236_recursiveGen, _2238_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2239_recIdents);
            _2234_i = (_2234_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2234_i = BigInteger.Zero;
          while ((_2234_i) < (new BigInteger((_2233_generatedValues).Count))) {
            if ((_2234_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2240_gen;
            _2240_gen = ((_2233_generatedValues).Select(_2234_i)).dtor__0;
            if ((((_2233_generatedValues).Select(_2234_i)).dtor__1) && (!(_2235_allErased))) {
              _2240_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2240_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2240_gen);
            _2234_i = (_2234_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2235_allErased;
        }
      } else if (_source21.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2241___mcc_h31 = _source21.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2242_mapElems = _2241___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2243_generatedValues;
          _2243_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2244_i;
          _2244_i = BigInteger.Zero;
          bool _2245_allErased;
          _2245_allErased = true;
          while ((_2244_i) < (new BigInteger((_2242_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2246_recursiveGenKey;
            bool _2247___v70;
            bool _2248_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2249_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1433;
            bool _out1434;
            bool _out1435;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
            DCOMP.COMP.GenExpr(((_2242_mapElems).Select(_2244_i)).dtor__0, selfIdent, @params, true, out _out1433, out _out1434, out _out1435, out _out1436);
            _2246_recursiveGenKey = _out1433;
            _2247___v70 = _out1434;
            _2248_isErasedKey = _out1435;
            _2249_recIdentsKey = _out1436;
            Dafny.ISequence<Dafny.Rune> _2250_recursiveGenValue;
            bool _2251___v71;
            bool _2252_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2253_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1437;
            bool _out1438;
            bool _out1439;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1440;
            DCOMP.COMP.GenExpr(((_2242_mapElems).Select(_2244_i)).dtor__1, selfIdent, @params, true, out _out1437, out _out1438, out _out1439, out _out1440);
            _2250_recursiveGenValue = _out1437;
            _2251___v71 = _out1438;
            _2252_isErasedValue = _out1439;
            _2253_recIdentsValue = _out1440;
            _2245_allErased = ((_2245_allErased) && (_2248_isErasedKey)) && (_2252_isErasedValue);
            _2243_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2243_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2246_recursiveGenKey, _2250_recursiveGenValue, _2248_isErasedKey, _2252_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2249_recIdentsKey), _2253_recIdentsValue);
            _2244_i = (_2244_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2244_i = BigInteger.Zero;
          while ((_2244_i) < (new BigInteger((_2243_generatedValues).Count))) {
            if ((_2244_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2254_genKey;
            _2254_genKey = ((_2243_generatedValues).Select(_2244_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2255_genValue;
            _2255_genValue = ((_2243_generatedValues).Select(_2244_i)).dtor__1;
            if ((((_2243_generatedValues).Select(_2244_i)).dtor__2) && (!(_2245_allErased))) {
              _2254_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2254_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2243_generatedValues).Select(_2244_i)).dtor__3) && (!(_2245_allErased))) {
              _2255_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2255_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2254_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2255_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2244_i = (_2244_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2245_allErased;
        }
      } else if (_source21.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source71 = selfIdent;
          if (_source71.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2256___mcc_h1149 = _source71.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2257_id = _2256___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2257_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2257_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2257_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2257_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source21.is_Ite) {
        DAST._IExpression _2258___mcc_h32 = _source21.dtor_cond;
        DAST._IExpression _2259___mcc_h33 = _source21.dtor_thn;
        DAST._IExpression _2260___mcc_h34 = _source21.dtor_els;
        DAST._IExpression _2261_f = _2260___mcc_h34;
        DAST._IExpression _2262_t = _2259___mcc_h33;
        DAST._IExpression _2263_cond = _2258___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2264_condString;
          bool _2265___v72;
          bool _2266_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2267_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1441;
          bool _out1442;
          bool _out1443;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
          DCOMP.COMP.GenExpr(_2263_cond, selfIdent, @params, true, out _out1441, out _out1442, out _out1443, out _out1444);
          _2264_condString = _out1441;
          _2265___v72 = _out1442;
          _2266_condErased = _out1443;
          _2267_recIdentsCond = _out1444;
          if (!(_2266_condErased)) {
            _2264_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2264_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2268___v73;
          bool _2269_tHasToBeOwned;
          bool _2270___v74;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2271___v75;
          Dafny.ISequence<Dafny.Rune> _out1445;
          bool _out1446;
          bool _out1447;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
          DCOMP.COMP.GenExpr(_2262_t, selfIdent, @params, mustOwn, out _out1445, out _out1446, out _out1447, out _out1448);
          _2268___v73 = _out1445;
          _2269_tHasToBeOwned = _out1446;
          _2270___v74 = _out1447;
          _2271___v75 = _out1448;
          Dafny.ISequence<Dafny.Rune> _2272_fString;
          bool _2273_fOwned;
          bool _2274_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2275_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1449;
          bool _out1450;
          bool _out1451;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1452;
          DCOMP.COMP.GenExpr(_2261_f, selfIdent, @params, _2269_tHasToBeOwned, out _out1449, out _out1450, out _out1451, out _out1452);
          _2272_fString = _out1449;
          _2273_fOwned = _out1450;
          _2274_fErased = _out1451;
          _2275_recIdentsF = _out1452;
          Dafny.ISequence<Dafny.Rune> _2276_tString;
          bool _2277___v76;
          bool _2278_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2279_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1453;
          bool _out1454;
          bool _out1455;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
          DCOMP.COMP.GenExpr(_2262_t, selfIdent, @params, _2273_fOwned, out _out1453, out _out1454, out _out1455, out _out1456);
          _2276_tString = _out1453;
          _2277___v76 = _out1454;
          _2278_tErased = _out1455;
          _2279_recIdentsT = _out1456;
          if ((!(_2274_fErased)) || (!(_2278_tErased))) {
            if (_2274_fErased) {
              _2272_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2272_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2278_tErased) {
              _2276_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2276_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2264_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2276_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2272_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2273_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2267_recIdentsCond, _2279_recIdentsT), _2275_recIdentsF);
          isErased = (_2274_fErased) || (_2278_tErased);
        }
      } else if (_source21.is_UnOp) {
        DAST._IUnaryOp _2280___mcc_h35 = _source21.dtor_unOp;
        DAST._IExpression _2281___mcc_h36 = _source21.dtor_expr;
        DAST._IUnaryOp _source72 = _2280___mcc_h35;
        if (_source72.is_Not) {
          DAST._IExpression _2282_e = _2281___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2283_recursiveGen;
            bool _2284___v77;
            bool _2285_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2286_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1457;
            bool _out1458;
            bool _out1459;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
            DCOMP.COMP.GenExpr(_2282_e, selfIdent, @params, true, out _out1457, out _out1458, out _out1459, out _out1460);
            _2283_recursiveGen = _out1457;
            _2284___v77 = _out1458;
            _2285_recErased = _out1459;
            _2286_recIdents = _out1460;
            if (!(_2285_recErased)) {
              _2283_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2283_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2283_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2286_recIdents;
            isErased = true;
          }
        } else if (_source72.is_BitwiseNot) {
          DAST._IExpression _2287_e = _2281___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2288_recursiveGen;
            bool _2289___v78;
            bool _2290_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2291_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1461;
            bool _out1462;
            bool _out1463;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
            DCOMP.COMP.GenExpr(_2287_e, selfIdent, @params, true, out _out1461, out _out1462, out _out1463, out _out1464);
            _2288_recursiveGen = _out1461;
            _2289___v78 = _out1462;
            _2290_recErased = _out1463;
            _2291_recIdents = _out1464;
            if (!(_2290_recErased)) {
              _2288_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2288_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2288_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2291_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2292_e = _2281___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2293_recursiveGen;
            bool _2294_recOwned;
            bool _2295_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2296_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1465;
            bool _out1466;
            bool _out1467;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1468;
            DCOMP.COMP.GenExpr(_2292_e, selfIdent, @params, false, out _out1465, out _out1466, out _out1467, out _out1468);
            _2293_recursiveGen = _out1465;
            _2294_recOwned = _out1466;
            _2295_recErased = _out1467;
            _2296_recIdents = _out1468;
            if (!(_2295_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2297_eraseFn;
              _2297_eraseFn = ((_2294_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2293_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2297_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2293_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2293_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2296_recIdents;
            isErased = true;
          }
        }
      } else if (_source21.is_BinOp) {
        DAST._IBinOp _2298___mcc_h37 = _source21.dtor_op;
        DAST._IExpression _2299___mcc_h38 = _source21.dtor_left;
        DAST._IExpression _2300___mcc_h39 = _source21.dtor_right;
        DAST._IExpression _2301_r = _2300___mcc_h39;
        DAST._IExpression _2302_l = _2299___mcc_h38;
        DAST._IBinOp _2303_op = _2298___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2304_left;
          bool _2305___v79;
          bool _2306_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2307_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1469;
          bool _out1470;
          bool _out1471;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1472;
          DCOMP.COMP.GenExpr(_2302_l, selfIdent, @params, true, out _out1469, out _out1470, out _out1471, out _out1472);
          _2304_left = _out1469;
          _2305___v79 = _out1470;
          _2306_leftErased = _out1471;
          _2307_recIdentsL = _out1472;
          Dafny.ISequence<Dafny.Rune> _2308_right;
          bool _2309___v80;
          bool _2310_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2311_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1473;
          bool _out1474;
          bool _out1475;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
          DCOMP.COMP.GenExpr(_2301_r, selfIdent, @params, true, out _out1473, out _out1474, out _out1475, out _out1476);
          _2308_right = _out1473;
          _2309___v80 = _out1474;
          _2310_rightErased = _out1475;
          _2311_recIdentsR = _out1476;
          DAST._IBinOp _source73 = _2303_op;
          if (_source73.is_Eq) {
            bool _2312___mcc_h1150 = _source73.dtor_referential;
            bool _2313___mcc_h1151 = _source73.dtor_nullable;
            {
              if (!(_2306_leftErased)) {
                _2304_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2310_rightErased)) {
                _2308_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source74 = _2303_op;
              if (_source74.is_Eq) {
                bool _2314___mcc_h1160 = _source74.dtor_referential;
                bool _2315___mcc_h1161 = _source74.dtor_nullable;
                bool _2316_nullable = _2315___mcc_h1161;
                bool _2317_referential = _2314___mcc_h1160;
                {
                  if (_2317_referential) {
                    if (_2316_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2308_right);
                  }
                }
              } else if (_source74.is_Neq) {
                bool _2318___mcc_h1162 = _source74.dtor_referential;
                bool _2319___mcc_h1163 = _source74.dtor_nullable;
                bool _2320_nullable = _2319___mcc_h1163;
                bool _2321_referential = _2318___mcc_h1162;
                {
                  if (_2321_referential) {
                    if (_2320_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2308_right);
                  }
                }
              } else if (_source74.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2322___mcc_h1164 = _source74.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2323_op = _2322___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2323_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_Neq) {
            bool _2324___mcc_h1154 = _source73.dtor_referential;
            bool _2325___mcc_h1155 = _source73.dtor_nullable;
            {
              if (!(_2306_leftErased)) {
                _2304_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2310_rightErased)) {
                _2308_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source75 = _2303_op;
              if (_source75.is_Eq) {
                bool _2326___mcc_h1165 = _source75.dtor_referential;
                bool _2327___mcc_h1166 = _source75.dtor_nullable;
                bool _2328_nullable = _2327___mcc_h1166;
                bool _2329_referential = _2326___mcc_h1165;
                {
                  if (_2329_referential) {
                    if (_2328_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2308_right);
                  }
                }
              } else if (_source75.is_Neq) {
                bool _2330___mcc_h1167 = _source75.dtor_referential;
                bool _2331___mcc_h1168 = _source75.dtor_nullable;
                bool _2332_nullable = _2331___mcc_h1168;
                bool _2333_referential = _2330___mcc_h1167;
                {
                  if (_2333_referential) {
                    if (_2332_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2308_right);
                  }
                }
              } else if (_source75.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2334___mcc_h1169 = _source75.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2335_op = _2334___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2335_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_Div) {
            {
              if (!(_2306_leftErased)) {
                _2304_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2310_rightErased)) {
                _2308_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source76 = _2303_op;
              if (_source76.is_Eq) {
                bool _2336___mcc_h1170 = _source76.dtor_referential;
                bool _2337___mcc_h1171 = _source76.dtor_nullable;
                bool _2338_nullable = _2337___mcc_h1171;
                bool _2339_referential = _2336___mcc_h1170;
                {
                  if (_2339_referential) {
                    if (_2338_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2308_right);
                  }
                }
              } else if (_source76.is_Neq) {
                bool _2340___mcc_h1172 = _source76.dtor_referential;
                bool _2341___mcc_h1173 = _source76.dtor_nullable;
                bool _2342_nullable = _2341___mcc_h1173;
                bool _2343_referential = _2340___mcc_h1172;
                {
                  if (_2343_referential) {
                    if (_2342_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2308_right);
                  }
                }
              } else if (_source76.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2344___mcc_h1174 = _source76.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2345_op = _2344___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2345_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_EuclidianDiv) {
            {
              if (!(_2306_leftErased)) {
                _2304_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2310_rightErased)) {
                _2308_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source77 = _2303_op;
              if (_source77.is_Eq) {
                bool _2346___mcc_h1175 = _source77.dtor_referential;
                bool _2347___mcc_h1176 = _source77.dtor_nullable;
                bool _2348_nullable = _2347___mcc_h1176;
                bool _2349_referential = _2346___mcc_h1175;
                {
                  if (_2349_referential) {
                    if (_2348_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2308_right);
                  }
                }
              } else if (_source77.is_Neq) {
                bool _2350___mcc_h1177 = _source77.dtor_referential;
                bool _2351___mcc_h1178 = _source77.dtor_nullable;
                bool _2352_nullable = _2351___mcc_h1178;
                bool _2353_referential = _2350___mcc_h1177;
                {
                  if (_2353_referential) {
                    if (_2352_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2308_right);
                  }
                }
              } else if (_source77.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2354___mcc_h1179 = _source77.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2355_op = _2354___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2355_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_Mod) {
            {
              if (!(_2306_leftErased)) {
                _2304_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2310_rightErased)) {
                _2308_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source78 = _2303_op;
              if (_source78.is_Eq) {
                bool _2356___mcc_h1180 = _source78.dtor_referential;
                bool _2357___mcc_h1181 = _source78.dtor_nullable;
                bool _2358_nullable = _2357___mcc_h1181;
                bool _2359_referential = _2356___mcc_h1180;
                {
                  if (_2359_referential) {
                    if (_2358_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2308_right);
                  }
                }
              } else if (_source78.is_Neq) {
                bool _2360___mcc_h1182 = _source78.dtor_referential;
                bool _2361___mcc_h1183 = _source78.dtor_nullable;
                bool _2362_nullable = _2361___mcc_h1183;
                bool _2363_referential = _2360___mcc_h1182;
                {
                  if (_2363_referential) {
                    if (_2362_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2308_right);
                  }
                }
              } else if (_source78.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2364___mcc_h1184 = _source78.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2365_op = _2364___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2365_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_EuclidianMod) {
            {
              if (!(_2306_leftErased)) {
                _2304_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2310_rightErased)) {
                _2308_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source79 = _2303_op;
              if (_source79.is_Eq) {
                bool _2366___mcc_h1185 = _source79.dtor_referential;
                bool _2367___mcc_h1186 = _source79.dtor_nullable;
                bool _2368_nullable = _2367___mcc_h1186;
                bool _2369_referential = _2366___mcc_h1185;
                {
                  if (_2369_referential) {
                    if (_2368_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2308_right);
                  }
                }
              } else if (_source79.is_Neq) {
                bool _2370___mcc_h1187 = _source79.dtor_referential;
                bool _2371___mcc_h1188 = _source79.dtor_nullable;
                bool _2372_nullable = _2371___mcc_h1188;
                bool _2373_referential = _2370___mcc_h1187;
                {
                  if (_2373_referential) {
                    if (_2372_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2308_right);
                  }
                }
              } else if (_source79.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2374___mcc_h1189 = _source79.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2375_op = _2374___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2375_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2308_right);
            }
          } else if (_source73.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2308_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source73.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source73.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source73.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2376___mcc_h1158 = _source73.dtor_Passthrough_a0;
            {
              if (!(_2306_leftErased)) {
                _2304_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2310_rightErased)) {
                _2308_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source80 = _2303_op;
              if (_source80.is_Eq) {
                bool _2377___mcc_h1190 = _source80.dtor_referential;
                bool _2378___mcc_h1191 = _source80.dtor_nullable;
                bool _2379_nullable = _2378___mcc_h1191;
                bool _2380_referential = _2377___mcc_h1190;
                {
                  if (_2380_referential) {
                    if (_2379_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2308_right);
                  }
                }
              } else if (_source80.is_Neq) {
                bool _2381___mcc_h1192 = _source80.dtor_referential;
                bool _2382___mcc_h1193 = _source80.dtor_nullable;
                bool _2383_nullable = _2382___mcc_h1193;
                bool _2384_referential = _2381___mcc_h1192;
                {
                  if (_2384_referential) {
                    if (_2383_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2304_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2308_right);
                  }
                }
              } else if (_source80.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source80.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source80.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source80.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2385___mcc_h1194 = _source80.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2386_op = _2385___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2386_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2308_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2307_recIdentsL, _2311_recIdentsR);
          isErased = true;
        }
      } else if (_source21.is_ArrayLen) {
        DAST._IExpression _2387___mcc_h40 = _source21.dtor_expr;
        BigInteger _2388___mcc_h41 = _source21.dtor_dim;
        BigInteger _2389_dim = _2388___mcc_h41;
        DAST._IExpression _2390_expr = _2387___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2391_recursiveGen;
          bool _2392___v82;
          bool _2393_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2394_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1477;
          bool _out1478;
          bool _out1479;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1480;
          DCOMP.COMP.GenExpr(_2390_expr, selfIdent, @params, true, out _out1477, out _out1478, out _out1479, out _out1480);
          _2391_recursiveGen = _out1477;
          _2392___v82 = _out1478;
          _2393_recErased = _out1479;
          _2394_recIdents = _out1480;
          if ((_2389_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2391_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2395_i;
            _2395_i = BigInteger.One;
            while ((_2395_i) < (_2389_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2395_i = (_2395_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2391_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2394_recIdents;
          isErased = true;
        }
      } else if (_source21.is_Select) {
        DAST._IExpression _2396___mcc_h42 = _source21.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2397___mcc_h43 = _source21.dtor_field;
        bool _2398___mcc_h44 = _source21.dtor_isConstant;
        bool _2399___mcc_h45 = _source21.dtor_onDatatype;
        DAST._IExpression _source81 = _2396___mcc_h42;
        if (_source81.is_Literal) {
          DAST._ILiteral _2400___mcc_h46 = _source81.dtor_Literal_a0;
          bool _2401_isDatatype = _2399___mcc_h45;
          bool _2402_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2403_field = _2397___mcc_h43;
          DAST._IExpression _2404_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2405_onString;
            bool _2406_onOwned;
            bool _2407_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2408_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1481;
            bool _out1482;
            bool _out1483;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
            DCOMP.COMP.GenExpr(_2404_on, selfIdent, @params, false, out _out1481, out _out1482, out _out1483, out _out1484);
            _2405_onString = _out1481;
            _2406_onOwned = _out1482;
            _2407_onErased = _out1483;
            _2408_recIdents = _out1484;
            if ((_2401_isDatatype) || (_2402_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2405_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2403_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2402_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2405_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2403_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2408_recIdents;
          }
        } else if (_source81.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2409___mcc_h48 = _source81.dtor_Ident_a0;
          bool _2410_isDatatype = _2399___mcc_h45;
          bool _2411_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2412_field = _2397___mcc_h43;
          DAST._IExpression _2413_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2414_onString;
            bool _2415_onOwned;
            bool _2416_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2417_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1485;
            bool _out1486;
            bool _out1487;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
            DCOMP.COMP.GenExpr(_2413_on, selfIdent, @params, false, out _out1485, out _out1486, out _out1487, out _out1488);
            _2414_onString = _out1485;
            _2415_onOwned = _out1486;
            _2416_onErased = _out1487;
            _2417_recIdents = _out1488;
            if ((_2410_isDatatype) || (_2411_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2414_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2412_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2411_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2414_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2412_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2417_recIdents;
          }
        } else if (_source81.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2418___mcc_h50 = _source81.dtor_Companion_a0;
          bool _2419_isDatatype = _2399___mcc_h45;
          bool _2420_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2421_field = _2397___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2422_c = _2418___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _2423_onString;
            bool _2424_onOwned;
            bool _2425_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2426_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1489;
            bool _out1490;
            bool _out1491;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_2422_c), selfIdent, @params, false, out _out1489, out _out1490, out _out1491, out _out1492);
            _2423_onString = _out1489;
            _2424_onOwned = _out1490;
            _2425_onErased = _out1491;
            _2426_recIdents = _out1492;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2423_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), RAST.__default.escapeIdent(_2421_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _2426_recIdents;
          }
        } else if (_source81.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _2427___mcc_h52 = _source81.dtor_Tuple_a0;
          bool _2428_isDatatype = _2399___mcc_h45;
          bool _2429_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2430_field = _2397___mcc_h43;
          DAST._IExpression _2431_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2432_onString;
            bool _2433_onOwned;
            bool _2434_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2435_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1493;
            bool _out1494;
            bool _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(_2431_on, selfIdent, @params, false, out _out1493, out _out1494, out _out1495, out _out1496);
            _2432_onString = _out1493;
            _2433_onOwned = _out1494;
            _2434_onErased = _out1495;
            _2435_recIdents = _out1496;
            if ((_2428_isDatatype) || (_2429_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2432_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2430_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2429_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2432_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2430_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2435_recIdents;
          }
        } else if (_source81.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2436___mcc_h54 = _source81.dtor_path;
          Dafny.ISequence<DAST._IType> _2437___mcc_h55 = _source81.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2438___mcc_h56 = _source81.dtor_args;
          bool _2439_isDatatype = _2399___mcc_h45;
          bool _2440_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2441_field = _2397___mcc_h43;
          DAST._IExpression _2442_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2443_onString;
            bool _2444_onOwned;
            bool _2445_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2446_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1497;
            bool _out1498;
            bool _out1499;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1500;
            DCOMP.COMP.GenExpr(_2442_on, selfIdent, @params, false, out _out1497, out _out1498, out _out1499, out _out1500);
            _2443_onString = _out1497;
            _2444_onOwned = _out1498;
            _2445_onErased = _out1499;
            _2446_recIdents = _out1500;
            if ((_2439_isDatatype) || (_2440_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2443_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2441_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2440_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2443_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2441_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2446_recIdents;
          }
        } else if (_source81.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _2447___mcc_h60 = _source81.dtor_dims;
          DAST._IType _2448___mcc_h61 = _source81.dtor_typ;
          bool _2449_isDatatype = _2399___mcc_h45;
          bool _2450_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2451_field = _2397___mcc_h43;
          DAST._IExpression _2452_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2453_onString;
            bool _2454_onOwned;
            bool _2455_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2456_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1501;
            bool _out1502;
            bool _out1503;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
            DCOMP.COMP.GenExpr(_2452_on, selfIdent, @params, false, out _out1501, out _out1502, out _out1503, out _out1504);
            _2453_onString = _out1501;
            _2454_onOwned = _out1502;
            _2455_onErased = _out1503;
            _2456_recIdents = _out1504;
            if ((_2449_isDatatype) || (_2450_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2453_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2451_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2450_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2453_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2451_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2456_recIdents;
          }
        } else if (_source81.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2457___mcc_h64 = _source81.dtor_path;
          Dafny.ISequence<DAST._IType> _2458___mcc_h65 = _source81.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _2459___mcc_h66 = _source81.dtor_variant;
          bool _2460___mcc_h67 = _source81.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2461___mcc_h68 = _source81.dtor_contents;
          bool _2462_isDatatype = _2399___mcc_h45;
          bool _2463_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2464_field = _2397___mcc_h43;
          DAST._IExpression _2465_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2466_onString;
            bool _2467_onOwned;
            bool _2468_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2469_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1505;
            bool _out1506;
            bool _out1507;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
            DCOMP.COMP.GenExpr(_2465_on, selfIdent, @params, false, out _out1505, out _out1506, out _out1507, out _out1508);
            _2466_onString = _out1505;
            _2467_onOwned = _out1506;
            _2468_onErased = _out1507;
            _2469_recIdents = _out1508;
            if ((_2462_isDatatype) || (_2463_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2466_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2464_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2463_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2466_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2464_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2469_recIdents;
          }
        } else if (_source81.is_Convert) {
          DAST._IExpression _2470___mcc_h74 = _source81.dtor_value;
          DAST._IType _2471___mcc_h75 = _source81.dtor_from;
          DAST._IType _2472___mcc_h76 = _source81.dtor_typ;
          bool _2473_isDatatype = _2399___mcc_h45;
          bool _2474_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2475_field = _2397___mcc_h43;
          DAST._IExpression _2476_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2477_onString;
            bool _2478_onOwned;
            bool _2479_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2480_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1509;
            bool _out1510;
            bool _out1511;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
            DCOMP.COMP.GenExpr(_2476_on, selfIdent, @params, false, out _out1509, out _out1510, out _out1511, out _out1512);
            _2477_onString = _out1509;
            _2478_onOwned = _out1510;
            _2479_onErased = _out1511;
            _2480_recIdents = _out1512;
            if ((_2473_isDatatype) || (_2474_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2477_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2475_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2474_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2477_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2475_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2480_recIdents;
          }
        } else if (_source81.is_SeqConstruct) {
          DAST._IExpression _2481___mcc_h80 = _source81.dtor_length;
          DAST._IExpression _2482___mcc_h81 = _source81.dtor_elem;
          bool _2483_isDatatype = _2399___mcc_h45;
          bool _2484_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2485_field = _2397___mcc_h43;
          DAST._IExpression _2486_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2487_onString;
            bool _2488_onOwned;
            bool _2489_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2490_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1513;
            bool _out1514;
            bool _out1515;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
            DCOMP.COMP.GenExpr(_2486_on, selfIdent, @params, false, out _out1513, out _out1514, out _out1515, out _out1516);
            _2487_onString = _out1513;
            _2488_onOwned = _out1514;
            _2489_onErased = _out1515;
            _2490_recIdents = _out1516;
            if ((_2483_isDatatype) || (_2484_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2487_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2485_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2484_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2487_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2485_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2490_recIdents;
          }
        } else if (_source81.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _2491___mcc_h84 = _source81.dtor_elements;
          DAST._IType _2492___mcc_h85 = _source81.dtor_typ;
          bool _2493_isDatatype = _2399___mcc_h45;
          bool _2494_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2495_field = _2397___mcc_h43;
          DAST._IExpression _2496_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2497_onString;
            bool _2498_onOwned;
            bool _2499_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2500_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1517;
            bool _out1518;
            bool _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            DCOMP.COMP.GenExpr(_2496_on, selfIdent, @params, false, out _out1517, out _out1518, out _out1519, out _out1520);
            _2497_onString = _out1517;
            _2498_onOwned = _out1518;
            _2499_onErased = _out1519;
            _2500_recIdents = _out1520;
            if ((_2493_isDatatype) || (_2494_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2497_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2495_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2494_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2497_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2495_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2500_recIdents;
          }
        } else if (_source81.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _2501___mcc_h88 = _source81.dtor_elements;
          bool _2502_isDatatype = _2399___mcc_h45;
          bool _2503_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2504_field = _2397___mcc_h43;
          DAST._IExpression _2505_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2506_onString;
            bool _2507_onOwned;
            bool _2508_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2509_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1521;
            bool _out1522;
            bool _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr(_2505_on, selfIdent, @params, false, out _out1521, out _out1522, out _out1523, out _out1524);
            _2506_onString = _out1521;
            _2507_onOwned = _out1522;
            _2508_onErased = _out1523;
            _2509_recIdents = _out1524;
            if ((_2502_isDatatype) || (_2503_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2506_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2504_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2503_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2506_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2504_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2509_recIdents;
          }
        } else if (_source81.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2510___mcc_h90 = _source81.dtor_mapElems;
          bool _2511_isDatatype = _2399___mcc_h45;
          bool _2512_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2513_field = _2397___mcc_h43;
          DAST._IExpression _2514_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2515_onString;
            bool _2516_onOwned;
            bool _2517_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2518_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1525;
            bool _out1526;
            bool _out1527;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1528;
            DCOMP.COMP.GenExpr(_2514_on, selfIdent, @params, false, out _out1525, out _out1526, out _out1527, out _out1528);
            _2515_onString = _out1525;
            _2516_onOwned = _out1526;
            _2517_onErased = _out1527;
            _2518_recIdents = _out1528;
            if ((_2511_isDatatype) || (_2512_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2515_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2513_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2512_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2515_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2513_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2518_recIdents;
          }
        } else if (_source81.is_This) {
          bool _2519_isDatatype = _2399___mcc_h45;
          bool _2520_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2521_field = _2397___mcc_h43;
          DAST._IExpression _2522_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2523_onString;
            bool _2524_onOwned;
            bool _2525_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2526_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1529;
            bool _out1530;
            bool _out1531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
            DCOMP.COMP.GenExpr(_2522_on, selfIdent, @params, false, out _out1529, out _out1530, out _out1531, out _out1532);
            _2523_onString = _out1529;
            _2524_onOwned = _out1530;
            _2525_onErased = _out1531;
            _2526_recIdents = _out1532;
            if ((_2519_isDatatype) || (_2520_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2523_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2521_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2520_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2523_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2521_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2526_recIdents;
          }
        } else if (_source81.is_Ite) {
          DAST._IExpression _2527___mcc_h92 = _source81.dtor_cond;
          DAST._IExpression _2528___mcc_h93 = _source81.dtor_thn;
          DAST._IExpression _2529___mcc_h94 = _source81.dtor_els;
          bool _2530_isDatatype = _2399___mcc_h45;
          bool _2531_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2532_field = _2397___mcc_h43;
          DAST._IExpression _2533_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2534_onString;
            bool _2535_onOwned;
            bool _2536_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2537_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1533;
            bool _out1534;
            bool _out1535;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
            DCOMP.COMP.GenExpr(_2533_on, selfIdent, @params, false, out _out1533, out _out1534, out _out1535, out _out1536);
            _2534_onString = _out1533;
            _2535_onOwned = _out1534;
            _2536_onErased = _out1535;
            _2537_recIdents = _out1536;
            if ((_2530_isDatatype) || (_2531_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2534_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2532_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2531_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2534_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2532_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2537_recIdents;
          }
        } else if (_source81.is_UnOp) {
          DAST._IUnaryOp _2538___mcc_h98 = _source81.dtor_unOp;
          DAST._IExpression _2539___mcc_h99 = _source81.dtor_expr;
          bool _2540_isDatatype = _2399___mcc_h45;
          bool _2541_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2542_field = _2397___mcc_h43;
          DAST._IExpression _2543_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2544_onString;
            bool _2545_onOwned;
            bool _2546_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2547_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1537;
            bool _out1538;
            bool _out1539;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
            DCOMP.COMP.GenExpr(_2543_on, selfIdent, @params, false, out _out1537, out _out1538, out _out1539, out _out1540);
            _2544_onString = _out1537;
            _2545_onOwned = _out1538;
            _2546_onErased = _out1539;
            _2547_recIdents = _out1540;
            if ((_2540_isDatatype) || (_2541_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2544_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2542_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2541_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2544_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2542_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2547_recIdents;
          }
        } else if (_source81.is_BinOp) {
          DAST._IBinOp _2548___mcc_h102 = _source81.dtor_op;
          DAST._IExpression _2549___mcc_h103 = _source81.dtor_left;
          DAST._IExpression _2550___mcc_h104 = _source81.dtor_right;
          bool _2551_isDatatype = _2399___mcc_h45;
          bool _2552_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2553_field = _2397___mcc_h43;
          DAST._IExpression _2554_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2555_onString;
            bool _2556_onOwned;
            bool _2557_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2558_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1541;
            bool _out1542;
            bool _out1543;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
            DCOMP.COMP.GenExpr(_2554_on, selfIdent, @params, false, out _out1541, out _out1542, out _out1543, out _out1544);
            _2555_onString = _out1541;
            _2556_onOwned = _out1542;
            _2557_onErased = _out1543;
            _2558_recIdents = _out1544;
            if ((_2551_isDatatype) || (_2552_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2555_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2553_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2552_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2555_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2553_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2558_recIdents;
          }
        } else if (_source81.is_ArrayLen) {
          DAST._IExpression _2559___mcc_h108 = _source81.dtor_expr;
          BigInteger _2560___mcc_h109 = _source81.dtor_dim;
          bool _2561_isDatatype = _2399___mcc_h45;
          bool _2562_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2563_field = _2397___mcc_h43;
          DAST._IExpression _2564_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2565_onString;
            bool _2566_onOwned;
            bool _2567_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2568_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1545;
            bool _out1546;
            bool _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            DCOMP.COMP.GenExpr(_2564_on, selfIdent, @params, false, out _out1545, out _out1546, out _out1547, out _out1548);
            _2565_onString = _out1545;
            _2566_onOwned = _out1546;
            _2567_onErased = _out1547;
            _2568_recIdents = _out1548;
            if ((_2561_isDatatype) || (_2562_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2565_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2563_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2562_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2565_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2563_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2568_recIdents;
          }
        } else if (_source81.is_Select) {
          DAST._IExpression _2569___mcc_h112 = _source81.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2570___mcc_h113 = _source81.dtor_field;
          bool _2571___mcc_h114 = _source81.dtor_isConstant;
          bool _2572___mcc_h115 = _source81.dtor_onDatatype;
          bool _2573_isDatatype = _2399___mcc_h45;
          bool _2574_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2575_field = _2397___mcc_h43;
          DAST._IExpression _2576_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2577_onString;
            bool _2578_onOwned;
            bool _2579_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2580_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1549;
            bool _out1550;
            bool _out1551;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
            DCOMP.COMP.GenExpr(_2576_on, selfIdent, @params, false, out _out1549, out _out1550, out _out1551, out _out1552);
            _2577_onString = _out1549;
            _2578_onOwned = _out1550;
            _2579_onErased = _out1551;
            _2580_recIdents = _out1552;
            if ((_2573_isDatatype) || (_2574_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2577_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2575_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2574_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2577_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2575_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2580_recIdents;
          }
        } else if (_source81.is_SelectFn) {
          DAST._IExpression _2581___mcc_h120 = _source81.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2582___mcc_h121 = _source81.dtor_field;
          bool _2583___mcc_h122 = _source81.dtor_onDatatype;
          bool _2584___mcc_h123 = _source81.dtor_isStatic;
          BigInteger _2585___mcc_h124 = _source81.dtor_arity;
          bool _2586_isDatatype = _2399___mcc_h45;
          bool _2587_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2588_field = _2397___mcc_h43;
          DAST._IExpression _2589_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2590_onString;
            bool _2591_onOwned;
            bool _2592_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2593_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1553;
            bool _out1554;
            bool _out1555;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1556;
            DCOMP.COMP.GenExpr(_2589_on, selfIdent, @params, false, out _out1553, out _out1554, out _out1555, out _out1556);
            _2590_onString = _out1553;
            _2591_onOwned = _out1554;
            _2592_onErased = _out1555;
            _2593_recIdents = _out1556;
            if ((_2586_isDatatype) || (_2587_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2590_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2588_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2587_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2590_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2588_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2593_recIdents;
          }
        } else if (_source81.is_Index) {
          DAST._IExpression _2594___mcc_h130 = _source81.dtor_expr;
          DAST._ICollKind _2595___mcc_h131 = _source81.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _2596___mcc_h132 = _source81.dtor_indices;
          bool _2597_isDatatype = _2399___mcc_h45;
          bool _2598_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2599_field = _2397___mcc_h43;
          DAST._IExpression _2600_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2601_onString;
            bool _2602_onOwned;
            bool _2603_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2604_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1557;
            bool _out1558;
            bool _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            DCOMP.COMP.GenExpr(_2600_on, selfIdent, @params, false, out _out1557, out _out1558, out _out1559, out _out1560);
            _2601_onString = _out1557;
            _2602_onOwned = _out1558;
            _2603_onErased = _out1559;
            _2604_recIdents = _out1560;
            if ((_2597_isDatatype) || (_2598_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2601_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2599_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2598_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2601_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2599_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2604_recIdents;
          }
        } else if (_source81.is_IndexRange) {
          DAST._IExpression _2605___mcc_h136 = _source81.dtor_expr;
          bool _2606___mcc_h137 = _source81.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _2607___mcc_h138 = _source81.dtor_low;
          DAST._IOptional<DAST._IExpression> _2608___mcc_h139 = _source81.dtor_high;
          bool _2609_isDatatype = _2399___mcc_h45;
          bool _2610_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2611_field = _2397___mcc_h43;
          DAST._IExpression _2612_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2613_onString;
            bool _2614_onOwned;
            bool _2615_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2616_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1561;
            bool _out1562;
            bool _out1563;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1564;
            DCOMP.COMP.GenExpr(_2612_on, selfIdent, @params, false, out _out1561, out _out1562, out _out1563, out _out1564);
            _2613_onString = _out1561;
            _2614_onOwned = _out1562;
            _2615_onErased = _out1563;
            _2616_recIdents = _out1564;
            if ((_2609_isDatatype) || (_2610_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2611_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2610_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2613_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2611_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2616_recIdents;
          }
        } else if (_source81.is_TupleSelect) {
          DAST._IExpression _2617___mcc_h144 = _source81.dtor_expr;
          BigInteger _2618___mcc_h145 = _source81.dtor_index;
          bool _2619_isDatatype = _2399___mcc_h45;
          bool _2620_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2621_field = _2397___mcc_h43;
          DAST._IExpression _2622_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2623_onString;
            bool _2624_onOwned;
            bool _2625_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2626_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1565;
            bool _out1566;
            bool _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            DCOMP.COMP.GenExpr(_2622_on, selfIdent, @params, false, out _out1565, out _out1566, out _out1567, out _out1568);
            _2623_onString = _out1565;
            _2624_onOwned = _out1566;
            _2625_onErased = _out1567;
            _2626_recIdents = _out1568;
            if ((_2619_isDatatype) || (_2620_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2623_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2621_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2620_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2623_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2621_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2626_recIdents;
          }
        } else if (_source81.is_Call) {
          DAST._IExpression _2627___mcc_h148 = _source81.dtor_on;
          Dafny.ISequence<Dafny.Rune> _2628___mcc_h149 = _source81.dtor_name;
          Dafny.ISequence<DAST._IType> _2629___mcc_h150 = _source81.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2630___mcc_h151 = _source81.dtor_args;
          bool _2631_isDatatype = _2399___mcc_h45;
          bool _2632_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2633_field = _2397___mcc_h43;
          DAST._IExpression _2634_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2635_onString;
            bool _2636_onOwned;
            bool _2637_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2638_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1569;
            bool _out1570;
            bool _out1571;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
            DCOMP.COMP.GenExpr(_2634_on, selfIdent, @params, false, out _out1569, out _out1570, out _out1571, out _out1572);
            _2635_onString = _out1569;
            _2636_onOwned = _out1570;
            _2637_onErased = _out1571;
            _2638_recIdents = _out1572;
            if ((_2631_isDatatype) || (_2632_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2635_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2633_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2632_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2635_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2633_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2638_recIdents;
          }
        } else if (_source81.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _2639___mcc_h156 = _source81.dtor_params;
          DAST._IType _2640___mcc_h157 = _source81.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _2641___mcc_h158 = _source81.dtor_body;
          bool _2642_isDatatype = _2399___mcc_h45;
          bool _2643_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2644_field = _2397___mcc_h43;
          DAST._IExpression _2645_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2646_onString;
            bool _2647_onOwned;
            bool _2648_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2649_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1573;
            bool _out1574;
            bool _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            DCOMP.COMP.GenExpr(_2645_on, selfIdent, @params, false, out _out1573, out _out1574, out _out1575, out _out1576);
            _2646_onString = _out1573;
            _2647_onOwned = _out1574;
            _2648_onErased = _out1575;
            _2649_recIdents = _out1576;
            if ((_2642_isDatatype) || (_2643_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2646_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2644_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2643_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2646_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2644_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2649_recIdents;
          }
        } else if (_source81.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2650___mcc_h162 = _source81.dtor_values;
          DAST._IType _2651___mcc_h163 = _source81.dtor_retType;
          DAST._IExpression _2652___mcc_h164 = _source81.dtor_expr;
          bool _2653_isDatatype = _2399___mcc_h45;
          bool _2654_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2655_field = _2397___mcc_h43;
          DAST._IExpression _2656_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2657_onString;
            bool _2658_onOwned;
            bool _2659_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2660_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1577;
            bool _out1578;
            bool _out1579;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
            DCOMP.COMP.GenExpr(_2656_on, selfIdent, @params, false, out _out1577, out _out1578, out _out1579, out _out1580);
            _2657_onString = _out1577;
            _2658_onOwned = _out1578;
            _2659_onErased = _out1579;
            _2660_recIdents = _out1580;
            if ((_2653_isDatatype) || (_2654_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2657_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2655_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2654_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2657_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2655_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2660_recIdents;
          }
        } else if (_source81.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _2661___mcc_h168 = _source81.dtor_name;
          DAST._IType _2662___mcc_h169 = _source81.dtor_typ;
          DAST._IExpression _2663___mcc_h170 = _source81.dtor_value;
          DAST._IExpression _2664___mcc_h171 = _source81.dtor_iifeBody;
          bool _2665_isDatatype = _2399___mcc_h45;
          bool _2666_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2667_field = _2397___mcc_h43;
          DAST._IExpression _2668_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2669_onString;
            bool _2670_onOwned;
            bool _2671_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2672_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1581;
            bool _out1582;
            bool _out1583;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1584;
            DCOMP.COMP.GenExpr(_2668_on, selfIdent, @params, false, out _out1581, out _out1582, out _out1583, out _out1584);
            _2669_onString = _out1581;
            _2670_onOwned = _out1582;
            _2671_onErased = _out1583;
            _2672_recIdents = _out1584;
            if ((_2665_isDatatype) || (_2666_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2669_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2667_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2666_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2669_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2667_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2672_recIdents;
          }
        } else if (_source81.is_Apply) {
          DAST._IExpression _2673___mcc_h176 = _source81.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _2674___mcc_h177 = _source81.dtor_args;
          bool _2675_isDatatype = _2399___mcc_h45;
          bool _2676_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2677_field = _2397___mcc_h43;
          DAST._IExpression _2678_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2679_onString;
            bool _2680_onOwned;
            bool _2681_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2682_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1585;
            bool _out1586;
            bool _out1587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1588;
            DCOMP.COMP.GenExpr(_2678_on, selfIdent, @params, false, out _out1585, out _out1586, out _out1587, out _out1588);
            _2679_onString = _out1585;
            _2680_onOwned = _out1586;
            _2681_onErased = _out1587;
            _2682_recIdents = _out1588;
            if ((_2675_isDatatype) || (_2676_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2679_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2677_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2676_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2679_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2677_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2682_recIdents;
          }
        } else if (_source81.is_TypeTest) {
          DAST._IExpression _2683___mcc_h180 = _source81.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2684___mcc_h181 = _source81.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _2685___mcc_h182 = _source81.dtor_variant;
          bool _2686_isDatatype = _2399___mcc_h45;
          bool _2687_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2688_field = _2397___mcc_h43;
          DAST._IExpression _2689_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2690_onString;
            bool _2691_onOwned;
            bool _2692_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2693_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1589;
            bool _out1590;
            bool _out1591;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1592;
            DCOMP.COMP.GenExpr(_2689_on, selfIdent, @params, false, out _out1589, out _out1590, out _out1591, out _out1592);
            _2690_onString = _out1589;
            _2691_onOwned = _out1590;
            _2692_onErased = _out1591;
            _2693_recIdents = _out1592;
            if ((_2686_isDatatype) || (_2687_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2690_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2688_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2687_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2690_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2688_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2693_recIdents;
          }
        } else if (_source81.is_InitializationValue) {
          DAST._IType _2694___mcc_h186 = _source81.dtor_typ;
          bool _2695_isDatatype = _2399___mcc_h45;
          bool _2696_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2697_field = _2397___mcc_h43;
          DAST._IExpression _2698_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2699_onString;
            bool _2700_onOwned;
            bool _2701_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2702_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1593;
            bool _out1594;
            bool _out1595;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1596;
            DCOMP.COMP.GenExpr(_2698_on, selfIdent, @params, false, out _out1593, out _out1594, out _out1595, out _out1596);
            _2699_onString = _out1593;
            _2700_onOwned = _out1594;
            _2701_onErased = _out1595;
            _2702_recIdents = _out1596;
            if ((_2695_isDatatype) || (_2696_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2699_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2697_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2696_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2699_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2697_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2702_recIdents;
          }
        } else if (_source81.is_BoolBoundedPool) {
          bool _2703_isDatatype = _2399___mcc_h45;
          bool _2704_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2705_field = _2397___mcc_h43;
          DAST._IExpression _2706_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2707_onString;
            bool _2708_onOwned;
            bool _2709_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2710_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1597;
            bool _out1598;
            bool _out1599;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
            DCOMP.COMP.GenExpr(_2706_on, selfIdent, @params, false, out _out1597, out _out1598, out _out1599, out _out1600);
            _2707_onString = _out1597;
            _2708_onOwned = _out1598;
            _2709_onErased = _out1599;
            _2710_recIdents = _out1600;
            if ((_2703_isDatatype) || (_2704_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2707_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2705_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2704_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2707_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2705_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2710_recIdents;
          }
        } else if (_source81.is_SetBoundedPool) {
          DAST._IExpression _2711___mcc_h188 = _source81.dtor_of;
          bool _2712_isDatatype = _2399___mcc_h45;
          bool _2713_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2714_field = _2397___mcc_h43;
          DAST._IExpression _2715_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2716_onString;
            bool _2717_onOwned;
            bool _2718_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2719_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1601;
            bool _out1602;
            bool _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            DCOMP.COMP.GenExpr(_2715_on, selfIdent, @params, false, out _out1601, out _out1602, out _out1603, out _out1604);
            _2716_onString = _out1601;
            _2717_onOwned = _out1602;
            _2718_onErased = _out1603;
            _2719_recIdents = _out1604;
            if ((_2712_isDatatype) || (_2713_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2716_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2714_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2713_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2716_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2714_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2719_recIdents;
          }
        } else if (_source81.is_SeqBoundedPool) {
          DAST._IExpression _2720___mcc_h190 = _source81.dtor_of;
          bool _2721___mcc_h191 = _source81.dtor_includeDuplicates;
          bool _2722_isDatatype = _2399___mcc_h45;
          bool _2723_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2724_field = _2397___mcc_h43;
          DAST._IExpression _2725_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2726_onString;
            bool _2727_onOwned;
            bool _2728_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2729_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1605;
            bool _out1606;
            bool _out1607;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
            DCOMP.COMP.GenExpr(_2725_on, selfIdent, @params, false, out _out1605, out _out1606, out _out1607, out _out1608);
            _2726_onString = _out1605;
            _2727_onOwned = _out1606;
            _2728_onErased = _out1607;
            _2729_recIdents = _out1608;
            if ((_2722_isDatatype) || (_2723_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2726_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2724_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2723_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2726_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2724_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2729_recIdents;
          }
        } else {
          DAST._IExpression _2730___mcc_h194 = _source81.dtor_lo;
          DAST._IExpression _2731___mcc_h195 = _source81.dtor_hi;
          bool _2732_isDatatype = _2399___mcc_h45;
          bool _2733_isConstant = _2398___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2734_field = _2397___mcc_h43;
          DAST._IExpression _2735_on = _2396___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2736_onString;
            bool _2737_onOwned;
            bool _2738_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2739_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1609;
            bool _out1610;
            bool _out1611;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
            DCOMP.COMP.GenExpr(_2735_on, selfIdent, @params, false, out _out1609, out _out1610, out _out1611, out _out1612);
            _2736_onString = _out1609;
            _2737_onOwned = _out1610;
            _2738_onErased = _out1611;
            _2739_recIdents = _out1612;
            if ((_2732_isDatatype) || (_2733_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2736_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2734_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2733_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2736_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), RAST.__default.escapeIdent(_2734_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2739_recIdents;
          }
        }
      } else if (_source21.is_SelectFn) {
        DAST._IExpression _2740___mcc_h198 = _source21.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2741___mcc_h199 = _source21.dtor_field;
        bool _2742___mcc_h200 = _source21.dtor_onDatatype;
        bool _2743___mcc_h201 = _source21.dtor_isStatic;
        BigInteger _2744___mcc_h202 = _source21.dtor_arity;
        BigInteger _2745_arity = _2744___mcc_h202;
        bool _2746_isStatic = _2743___mcc_h201;
        bool _2747_isDatatype = _2742___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _2748_field = _2741___mcc_h199;
        DAST._IExpression _2749_on = _2740___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _2750_onString;
          bool _2751_onOwned;
          bool _2752___v83;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2753_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1613;
          bool _out1614;
          bool _out1615;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1616;
          DCOMP.COMP.GenExpr(_2749_on, selfIdent, @params, false, out _out1613, out _out1614, out _out1615, out _out1616);
          _2750_onString = _out1613;
          _2751_onOwned = _out1614;
          _2752___v83 = _out1615;
          _2753_recIdents = _out1616;
          if (_2746_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2750_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2748_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _2750_onString), ((_2751_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _2754_args;
            _2754_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _2755_i;
            _2755_i = BigInteger.Zero;
            while ((_2755_i) < (_2745_arity)) {
              if ((_2755_i).Sign == 1) {
                _2754_args = Dafny.Sequence<Dafny.Rune>.Concat(_2754_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2754_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2754_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), RAST.__default.natToString(_2755_i));
              _2755_i = (_2755_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _2754_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _2748_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2754_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _2756_typeShape;
          _2756_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _2757_i;
          _2757_i = BigInteger.Zero;
          while ((_2757_i) < (_2745_arity)) {
            if ((_2757_i).Sign == 1) {
              _2756_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2756_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _2756_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2756_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _2757_i = (_2757_i) + (BigInteger.One);
          }
          _2756_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2756_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _2756_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _2753_recIdents;
        }
      } else if (_source21.is_Index) {
        DAST._IExpression _2758___mcc_h203 = _source21.dtor_expr;
        DAST._ICollKind _2759___mcc_h204 = _source21.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _2760___mcc_h205 = _source21.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2761_indices = _2760___mcc_h205;
        DAST._ICollKind _2762_collKind = _2759___mcc_h204;
        DAST._IExpression _2763_on = _2758___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _2764_onString;
          bool _2765_onOwned;
          bool _2766_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2767_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1617;
          bool _out1618;
          bool _out1619;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1620;
          DCOMP.COMP.GenExpr(_2763_on, selfIdent, @params, false, out _out1617, out _out1618, out _out1619, out _out1620);
          _2764_onString = _out1617;
          _2765_onOwned = _out1618;
          _2766_onErased = _out1619;
          _2767_recIdents = _out1620;
          readIdents = _2767_recIdents;
          s = _2764_onString;
          BigInteger _2768_i;
          _2768_i = BigInteger.Zero;
          while ((_2768_i) < (new BigInteger((_2761_indices).Count))) {
            if (object.Equals(_2762_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_2762_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _2769_idx;
              bool _2770_idxOwned;
              bool _2771_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2772_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1621;
              bool _out1622;
              bool _out1623;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1624;
              DCOMP.COMP.GenExpr((_2761_indices).Select(_2768_i), selfIdent, @params, false, out _out1621, out _out1622, out _out1623, out _out1624);
              _2769_idx = _out1621;
              _2770_idxOwned = _out1622;
              _2771_idxErased = _out1623;
              _2772_recIdentsIdx = _out1624;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_2770_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2769_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2772_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _2773_idx;
              bool _2774___v84;
              bool _2775_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2776_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1625;
              bool _out1626;
              bool _out1627;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
              DCOMP.COMP.GenExpr((_2761_indices).Select(_2768_i), selfIdent, @params, true, out _out1625, out _out1626, out _out1627, out _out1628);
              _2773_idx = _out1625;
              _2774___v84 = _out1626;
              _2775_idxErased = _out1627;
              _2776_recIdentsIdx = _out1628;
              if (!(_2775_idxErased)) {
                _2773_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2773_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _2773_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2776_recIdentsIdx);
            }
            _2768_i = (_2768_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _2766_onErased;
        }
      } else if (_source21.is_IndexRange) {
        DAST._IExpression _2777___mcc_h206 = _source21.dtor_expr;
        bool _2778___mcc_h207 = _source21.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _2779___mcc_h208 = _source21.dtor_low;
        DAST._IOptional<DAST._IExpression> _2780___mcc_h209 = _source21.dtor_high;
        DAST._IOptional<DAST._IExpression> _2781_high = _2780___mcc_h209;
        DAST._IOptional<DAST._IExpression> _2782_low = _2779___mcc_h208;
        bool _2783_isArray = _2778___mcc_h207;
        DAST._IExpression _2784_on = _2777___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _2785_onString;
          bool _2786_onOwned;
          bool _2787_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2788_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1629;
          bool _out1630;
          bool _out1631;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
          DCOMP.COMP.GenExpr(_2784_on, selfIdent, @params, false, out _out1629, out _out1630, out _out1631, out _out1632);
          _2785_onString = _out1629;
          _2786_onOwned = _out1630;
          _2787_onErased = _out1631;
          _2788_recIdents = _out1632;
          readIdents = _2788_recIdents;
          s = _2785_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2789_lowString;
          _2789_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source82 = _2782_low;
          if (_source82.is_Some) {
            DAST._IExpression _2790___mcc_h1195 = _source82.dtor_Some_a0;
            DAST._IExpression _2791_l = _2790___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _2792_lString;
              bool _2793___v85;
              bool _2794_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2795_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1633;
              bool _out1634;
              bool _out1635;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
              DCOMP.COMP.GenExpr(_2791_l, selfIdent, @params, true, out _out1633, out _out1634, out _out1635, out _out1636);
              _2792_lString = _out1633;
              _2793___v85 = _out1634;
              _2794_lErased = _out1635;
              _2795_recIdentsL = _out1636;
              if (!(_2794_lErased)) {
                _2792_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2792_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2789_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2792_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2795_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2796_highString;
          _2796_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source83 = _2781_high;
          if (_source83.is_Some) {
            DAST._IExpression _2797___mcc_h1196 = _source83.dtor_Some_a0;
            DAST._IExpression _2798_h = _2797___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _2799_hString;
              bool _2800___v86;
              bool _2801_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2802_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1637;
              bool _out1638;
              bool _out1639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1640;
              DCOMP.COMP.GenExpr(_2798_h, selfIdent, @params, true, out _out1637, out _out1638, out _out1639, out _out1640);
              _2799_hString = _out1637;
              _2800___v86 = _out1638;
              _2801_hErased = _out1639;
              _2802_recIdentsH = _out1640;
              if (!(_2801_hErased)) {
                _2799_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2799_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2796_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2799_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2802_recIdentsH);
            }
          } else {
          }
          if (_2783_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source84) => {
            if (_source84.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2803___mcc_h1197 = _source84.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2804_l = _2803___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2804_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2789_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source85) => {
            if (_source85.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2805___mcc_h1198 = _source85.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2806_h = _2805___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2806_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2796_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _2787_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source21.is_TupleSelect) {
        DAST._IExpression _2807___mcc_h210 = _source21.dtor_expr;
        BigInteger _2808___mcc_h211 = _source21.dtor_index;
        BigInteger _2809_idx = _2808___mcc_h211;
        DAST._IExpression _2810_on = _2807___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _2811_onString;
          bool _2812___v87;
          bool _2813_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2814_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1641;
          bool _out1642;
          bool _out1643;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
          DCOMP.COMP.GenExpr(_2810_on, selfIdent, @params, false, out _out1641, out _out1642, out _out1643, out _out1644);
          _2811_onString = _out1641;
          _2812___v87 = _out1642;
          _2813_tupErased = _out1643;
          _2814_recIdents = _out1644;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2811_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.natToString(_2809_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _2813_tupErased;
          readIdents = _2814_recIdents;
        }
      } else if (_source21.is_Call) {
        DAST._IExpression _2815___mcc_h212 = _source21.dtor_on;
        Dafny.ISequence<Dafny.Rune> _2816___mcc_h213 = _source21.dtor_name;
        Dafny.ISequence<DAST._IType> _2817___mcc_h214 = _source21.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2818___mcc_h215 = _source21.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2819_args = _2818___mcc_h215;
        Dafny.ISequence<DAST._IType> _2820_typeArgs = _2817___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _2821_name = _2816___mcc_h213;
        DAST._IExpression _2822_on = _2815___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2823_typeArgString;
          _2823_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2820_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2824_typeI;
            _2824_typeI = BigInteger.Zero;
            _2823_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_2824_typeI) < (new BigInteger((_2820_typeArgs).Count))) {
              if ((_2824_typeI).Sign == 1) {
                _2823_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2823_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _2825_typeString;
              Dafny.ISequence<Dafny.Rune> _out1645;
              _out1645 = DCOMP.COMP.GenType((_2820_typeArgs).Select(_2824_typeI), false, false);
              _2825_typeString = _out1645;
              _2823_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2823_typeArgString, _2825_typeString);
              _2824_typeI = (_2824_typeI) + (BigInteger.One);
            }
            _2823_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2823_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _2826_argString;
          _2826_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2827_i;
          _2827_i = BigInteger.Zero;
          while ((_2827_i) < (new BigInteger((_2819_args).Count))) {
            if ((_2827_i).Sign == 1) {
              _2826_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2826_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2828_argExpr;
            bool _2829_isOwned;
            bool _2830_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2831_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1646;
            bool _out1647;
            bool _out1648;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
            DCOMP.COMP.GenExpr((_2819_args).Select(_2827_i), selfIdent, @params, false, out _out1646, out _out1647, out _out1648, out _out1649);
            _2828_argExpr = _out1646;
            _2829_isOwned = _out1647;
            _2830_argErased = _out1648;
            _2831_argIdents = _out1649;
            if (_2829_isOwned) {
              _2828_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2828_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_2830_argErased)) {
              _2828_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _2828_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _2828_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _2828_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2826_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2826_argString, _2828_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2831_argIdents);
            _2827_i = (_2827_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2832_enclosingString;
          bool _2833___v88;
          bool _2834___v89;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2835_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1650;
          bool _out1651;
          bool _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenExpr(_2822_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
          _2832_enclosingString = _out1650;
          _2833___v88 = _out1651;
          _2834___v89 = _out1652;
          _2835_recIdents = _out1653;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2835_recIdents);
          DAST._IExpression _source86 = _2822_on;
          if (_source86.is_Literal) {
            DAST._ILiteral _2836___mcc_h1199 = _source86.dtor_Literal_a0;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2837___mcc_h1201 = _source86.dtor_Ident_a0;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2838___mcc_h1203 = _source86.dtor_Companion_a0;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2832_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2839___mcc_h1205 = _source86.dtor_Tuple_a0;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2840___mcc_h1207 = _source86.dtor_path;
            Dafny.ISequence<DAST._IType> _2841___mcc_h1208 = _source86.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2842___mcc_h1209 = _source86.dtor_args;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2843___mcc_h1213 = _source86.dtor_dims;
            DAST._IType _2844___mcc_h1214 = _source86.dtor_typ;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2845___mcc_h1217 = _source86.dtor_path;
            Dafny.ISequence<DAST._IType> _2846___mcc_h1218 = _source86.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2847___mcc_h1219 = _source86.dtor_variant;
            bool _2848___mcc_h1220 = _source86.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2849___mcc_h1221 = _source86.dtor_contents;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Convert) {
            DAST._IExpression _2850___mcc_h1227 = _source86.dtor_value;
            DAST._IType _2851___mcc_h1228 = _source86.dtor_from;
            DAST._IType _2852___mcc_h1229 = _source86.dtor_typ;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_SeqConstruct) {
            DAST._IExpression _2853___mcc_h1233 = _source86.dtor_length;
            DAST._IExpression _2854___mcc_h1234 = _source86.dtor_elem;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2855___mcc_h1237 = _source86.dtor_elements;
            DAST._IType _2856___mcc_h1238 = _source86.dtor_typ;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2857___mcc_h1241 = _source86.dtor_elements;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2858___mcc_h1243 = _source86.dtor_mapElems;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_This) {
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Ite) {
            DAST._IExpression _2859___mcc_h1245 = _source86.dtor_cond;
            DAST._IExpression _2860___mcc_h1246 = _source86.dtor_thn;
            DAST._IExpression _2861___mcc_h1247 = _source86.dtor_els;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_UnOp) {
            DAST._IUnaryOp _2862___mcc_h1251 = _source86.dtor_unOp;
            DAST._IExpression _2863___mcc_h1252 = _source86.dtor_expr;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_BinOp) {
            DAST._IBinOp _2864___mcc_h1255 = _source86.dtor_op;
            DAST._IExpression _2865___mcc_h1256 = _source86.dtor_left;
            DAST._IExpression _2866___mcc_h1257 = _source86.dtor_right;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_ArrayLen) {
            DAST._IExpression _2867___mcc_h1261 = _source86.dtor_expr;
            BigInteger _2868___mcc_h1262 = _source86.dtor_dim;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Select) {
            DAST._IExpression _2869___mcc_h1265 = _source86.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2870___mcc_h1266 = _source86.dtor_field;
            bool _2871___mcc_h1267 = _source86.dtor_isConstant;
            bool _2872___mcc_h1268 = _source86.dtor_onDatatype;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_SelectFn) {
            DAST._IExpression _2873___mcc_h1273 = _source86.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2874___mcc_h1274 = _source86.dtor_field;
            bool _2875___mcc_h1275 = _source86.dtor_onDatatype;
            bool _2876___mcc_h1276 = _source86.dtor_isStatic;
            BigInteger _2877___mcc_h1277 = _source86.dtor_arity;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Index) {
            DAST._IExpression _2878___mcc_h1283 = _source86.dtor_expr;
            DAST._ICollKind _2879___mcc_h1284 = _source86.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2880___mcc_h1285 = _source86.dtor_indices;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_IndexRange) {
            DAST._IExpression _2881___mcc_h1289 = _source86.dtor_expr;
            bool _2882___mcc_h1290 = _source86.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _2883___mcc_h1291 = _source86.dtor_low;
            DAST._IOptional<DAST._IExpression> _2884___mcc_h1292 = _source86.dtor_high;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_TupleSelect) {
            DAST._IExpression _2885___mcc_h1297 = _source86.dtor_expr;
            BigInteger _2886___mcc_h1298 = _source86.dtor_index;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Call) {
            DAST._IExpression _2887___mcc_h1301 = _source86.dtor_on;
            Dafny.ISequence<Dafny.Rune> _2888___mcc_h1302 = _source86.dtor_name;
            Dafny.ISequence<DAST._IType> _2889___mcc_h1303 = _source86.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2890___mcc_h1304 = _source86.dtor_args;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2891___mcc_h1309 = _source86.dtor_params;
            DAST._IType _2892___mcc_h1310 = _source86.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2893___mcc_h1311 = _source86.dtor_body;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2894___mcc_h1315 = _source86.dtor_values;
            DAST._IType _2895___mcc_h1316 = _source86.dtor_retType;
            DAST._IExpression _2896___mcc_h1317 = _source86.dtor_expr;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2897___mcc_h1321 = _source86.dtor_name;
            DAST._IType _2898___mcc_h1322 = _source86.dtor_typ;
            DAST._IExpression _2899___mcc_h1323 = _source86.dtor_value;
            DAST._IExpression _2900___mcc_h1324 = _source86.dtor_iifeBody;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_Apply) {
            DAST._IExpression _2901___mcc_h1329 = _source86.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2902___mcc_h1330 = _source86.dtor_args;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_TypeTest) {
            DAST._IExpression _2903___mcc_h1333 = _source86.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2904___mcc_h1334 = _source86.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2905___mcc_h1335 = _source86.dtor_variant;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_InitializationValue) {
            DAST._IType _2906___mcc_h1339 = _source86.dtor_typ;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_BoolBoundedPool) {
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_SetBoundedPool) {
            DAST._IExpression _2907___mcc_h1341 = _source86.dtor_of;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else if (_source86.is_SeqBoundedPool) {
            DAST._IExpression _2908___mcc_h1343 = _source86.dtor_of;
            bool _2909___mcc_h1344 = _source86.dtor_includeDuplicates;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          } else {
            DAST._IExpression _2910___mcc_h1347 = _source86.dtor_lo;
            DAST._IExpression _2911___mcc_h1348 = _source86.dtor_hi;
            {
              _2832_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.escapeIdent((_2821_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2832_enclosingString, _2823_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2826_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _2912___mcc_h216 = _source21.dtor_params;
        DAST._IType _2913___mcc_h217 = _source21.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _2914___mcc_h218 = _source21.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2915_body = _2914___mcc_h218;
        DAST._IType _2916_retType = _2913___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _2917_params = _2912___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2918_paramNames;
          _2918_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2919_i;
          _2919_i = BigInteger.Zero;
          while ((_2919_i) < (new BigInteger((_2917_params).Count))) {
            _2918_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2918_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_2917_params).Select(_2919_i)).dtor_name));
            _2919_i = (_2919_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2920_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2921_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1655;
          DCOMP.COMP.GenStmts(_2915_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _2918_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1654, out _out1655);
          _2920_recursiveGen = _out1654;
          _2921_recIdents = _out1655;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2922_allReadCloned;
          _2922_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_2921_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _2923_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_2921_recIdents).Elements) {
              _2923_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_2921_recIdents).Contains(_2923_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1983)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_2923_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _2922_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_2922_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_2918_paramNames).Contains(_2923_next))) {
              _2922_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2922_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), RAST.__default.escapeIdent(_2923_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), RAST.__default.escapeIdent(_2923_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2923_next));
            }
            _2921_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2921_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2923_next));
          }
          Dafny.ISequence<Dafny.Rune> _2924_paramsString;
          _2924_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _2925_paramTypes;
          _2925_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2919_i = BigInteger.Zero;
          while ((_2919_i) < (new BigInteger((_2917_params).Count))) {
            if ((_2919_i).Sign == 1) {
              _2924_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2924_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _2925_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_2925_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2926_typStr;
            Dafny.ISequence<Dafny.Rune> _out1656;
            _out1656 = DCOMP.COMP.GenType(((_2917_params).Select(_2919_i)).dtor_typ, false, true);
            _2926_typStr = _out1656;
            _2924_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2924_paramsString, ((_2917_params).Select(_2919_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _2926_typStr);
            _2925_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2925_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _2926_typStr);
            _2919_i = (_2919_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2927_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1657;
          _out1657 = DCOMP.COMP.GenType(_2916_retType, false, true);
          _2927_retTypeGen = _out1657;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _2925_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _2927_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _2922_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _2924_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _2927_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2920_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2928___mcc_h219 = _source21.dtor_values;
        DAST._IType _2929___mcc_h220 = _source21.dtor_retType;
        DAST._IExpression _2930___mcc_h221 = _source21.dtor_expr;
        DAST._IExpression _2931_expr = _2930___mcc_h221;
        DAST._IType _2932_retType = _2929___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2933_values = _2928___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2934_paramNames;
          _2934_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2935_paramNamesSet;
          _2935_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2936_i;
          _2936_i = BigInteger.Zero;
          while ((_2936_i) < (new BigInteger((_2933_values).Count))) {
            _2934_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2934_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2933_values).Select(_2936_i)).dtor__0).dtor_name));
            _2935_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2935_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2933_values).Select(_2936_i)).dtor__0).dtor_name));
            _2936_i = (_2936_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _2937_paramsString;
          _2937_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2936_i = BigInteger.Zero;
          while ((_2936_i) < (new BigInteger((_2933_values).Count))) {
            if ((_2936_i).Sign == 1) {
              _2937_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2937_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2938_typStr;
            Dafny.ISequence<Dafny.Rune> _out1658;
            _out1658 = DCOMP.COMP.GenType((((_2933_values).Select(_2936_i)).dtor__0).dtor_typ, false, true);
            _2938_typStr = _out1658;
            Dafny.ISequence<Dafny.Rune> _2939_valueGen;
            bool _2940___v92;
            bool _2941_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2942_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1659;
            bool _out1660;
            bool _out1661;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
            DCOMP.COMP.GenExpr(((_2933_values).Select(_2936_i)).dtor__1, selfIdent, @params, true, out _out1659, out _out1660, out _out1661, out _out1662);
            _2939_valueGen = _out1659;
            _2940___v92 = _out1660;
            _2941_valueErased = _out1661;
            _2942_recIdents = _out1662;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), RAST.__default.escapeIdent((((_2933_values).Select(_2936_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2938_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2942_recIdents);
            if (_2941_valueErased) {
              _2939_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2939_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2939_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _2936_i = (_2936_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2943_recGen;
          bool _2944_recOwned;
          bool _2945_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2946_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          bool _out1664;
          bool _out1665;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
          DCOMP.COMP.GenExpr(_2931_expr, selfIdent, _2934_paramNames, mustOwn, out _out1663, out _out1664, out _out1665, out _out1666);
          _2943_recGen = _out1663;
          _2944_recOwned = _out1664;
          _2945_recErased = _out1665;
          _2946_recIdents = _out1666;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2946_recIdents, _2935_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2943_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _2944_recOwned;
          isErased = _2945_recErased;
        }
      } else if (_source21.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _2947___mcc_h222 = _source21.dtor_name;
        DAST._IType _2948___mcc_h223 = _source21.dtor_typ;
        DAST._IExpression _2949___mcc_h224 = _source21.dtor_value;
        DAST._IExpression _2950___mcc_h225 = _source21.dtor_iifeBody;
        DAST._IExpression _2951_iifeBody = _2950___mcc_h225;
        DAST._IExpression _2952_value = _2949___mcc_h224;
        DAST._IType _2953_tpe = _2948___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _2954_name = _2947___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _2955_valueGen;
          bool _2956___v93;
          bool _2957_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2958_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          bool _out1668;
          bool _out1669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1670;
          DCOMP.COMP.GenExpr(_2952_value, selfIdent, @params, true, out _out1667, out _out1668, out _out1669, out _out1670);
          _2955_valueGen = _out1667;
          _2956___v93 = _out1668;
          _2957_valueErased = _out1669;
          _2958_recIdents = _out1670;
          if (_2957_valueErased) {
            _2955_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2955_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _2958_recIdents;
          Dafny.ISequence<Dafny.Rune> _2959_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1671;
          _out1671 = DCOMP.COMP.GenType(_2953_tpe, false, true);
          _2959_valueTypeGen = _out1671;
          Dafny.ISequence<Dafny.Rune> _2960_bodyGen;
          bool _2961___v94;
          bool _2962_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2963_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1672;
          bool _out1673;
          bool _out1674;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
          DCOMP.COMP.GenExpr(_2951_iifeBody, selfIdent, @params, true, out _out1672, out _out1673, out _out1674, out _out1675);
          _2960_bodyGen = _out1672;
          _2961___v94 = _out1673;
          _2962_bodyErased = _out1674;
          _2963_bodyIdents = _out1675;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2963_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2954_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), RAST.__default.escapeIdent((_2954_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2959_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _2955_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _2960_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _2962_bodyErased;
        }
      } else if (_source21.is_Apply) {
        DAST._IExpression _2964___mcc_h226 = _source21.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2965___mcc_h227 = _source21.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2966_args = _2965___mcc_h227;
        DAST._IExpression _2967_func = _2964___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _2968_funcString;
          bool _2969___v95;
          bool _2970_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2971_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_2967_func, selfIdent, @params, false, out _out1676, out _out1677, out _out1678, out _out1679);
          _2968_funcString = _out1676;
          _2969___v95 = _out1677;
          _2970_funcErased = _out1678;
          _2971_recIdents = _out1679;
          readIdents = _2971_recIdents;
          Dafny.ISequence<Dafny.Rune> _2972_argString;
          _2972_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2973_i;
          _2973_i = BigInteger.Zero;
          while ((_2973_i) < (new BigInteger((_2966_args).Count))) {
            if ((_2973_i).Sign == 1) {
              _2972_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2972_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2974_argExpr;
            bool _2975_isOwned;
            bool _2976_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2977_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1680;
            bool _out1681;
            bool _out1682;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1683;
            DCOMP.COMP.GenExpr((_2966_args).Select(_2973_i), selfIdent, @params, false, out _out1680, out _out1681, out _out1682, out _out1683);
            _2974_argExpr = _out1680;
            _2975_isOwned = _out1681;
            _2976_argErased = _out1682;
            _2977_argIdents = _out1683;
            if (_2975_isOwned) {
              _2974_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2974_argExpr);
            }
            _2972_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2972_argString, _2974_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2977_argIdents);
            _2973_i = (_2973_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2968_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2972_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_TypeTest) {
        DAST._IExpression _2978___mcc_h228 = _source21.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2979___mcc_h229 = _source21.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _2980___mcc_h230 = _source21.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _2981_variant = _2980___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2982_dType = _2979___mcc_h229;
        DAST._IExpression _2983_on = _2978___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _2984_exprGen;
          bool _2985___v96;
          bool _2986_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2987_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1684;
          bool _out1685;
          bool _out1686;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1687;
          DCOMP.COMP.GenExpr(_2983_on, selfIdent, @params, false, out _out1684, out _out1685, out _out1686, out _out1687);
          _2984_exprGen = _out1684;
          _2985___v96 = _out1685;
          _2986_exprErased = _out1686;
          _2987_recIdents = _out1687;
          Dafny.ISequence<Dafny.Rune> _2988_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1688;
          _out1688 = DCOMP.COMP.GenPath(_2982_dType);
          _2988_dTypePath = _out1688;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _2984_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _2988_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), RAST.__default.escapeIdent(_2981_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _2987_recIdents;
        }
      } else if (_source21.is_InitializationValue) {
        DAST._IType _2989___mcc_h231 = _source21.dtor_typ;
        DAST._IType _2990_typ = _2989___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _2991_typString;
          Dafny.ISequence<Dafny.Rune> _out1689;
          _out1689 = DCOMP.COMP.GenType(_2990_typ, false, false);
          _2991_typString = _out1689;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2991_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source21.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source21.is_SetBoundedPool) {
        DAST._IExpression _2992___mcc_h232 = _source21.dtor_of;
        DAST._IExpression _2993_of = _2992___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _2994_exprGen;
          bool _2995___v97;
          bool _2996_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2997_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1690;
          bool _out1691;
          bool _out1692;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1693;
          DCOMP.COMP.GenExpr(_2993_of, selfIdent, @params, false, out _out1690, out _out1691, out _out1692, out _out1693);
          _2994_exprGen = _out1690;
          _2995___v97 = _out1691;
          _2996_exprErased = _out1692;
          _2997_recIdents = _out1693;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2994_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _2996_exprErased;
          readIdents = _2997_recIdents;
        }
      } else if (_source21.is_SeqBoundedPool) {
        DAST._IExpression _2998___mcc_h233 = _source21.dtor_of;
        bool _2999___mcc_h234 = _source21.dtor_includeDuplicates;
        bool _3000_includeDuplicates = _2999___mcc_h234;
        DAST._IExpression _3001_of = _2998___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3002_exprGen;
          bool _3003___v98;
          bool _3004_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3005_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1694;
          bool _out1695;
          bool _out1696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1697;
          DCOMP.COMP.GenExpr(_3001_of, selfIdent, @params, false, out _out1694, out _out1695, out _out1696, out _out1697);
          _3002_exprGen = _out1694;
          _3003___v98 = _out1695;
          _3004_exprErased = _out1696;
          _3005_recIdents = _out1697;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3002_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3000_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3004_exprErased;
          readIdents = _3005_recIdents;
        }
      } else {
        DAST._IExpression _3006___mcc_h235 = _source21.dtor_lo;
        DAST._IExpression _3007___mcc_h236 = _source21.dtor_hi;
        DAST._IExpression _3008_hi = _3007___mcc_h236;
        DAST._IExpression _3009_lo = _3006___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3010_loString;
          bool _3011___v99;
          bool _3012_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3013_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1698;
          bool _out1699;
          bool _out1700;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1701;
          DCOMP.COMP.GenExpr(_3009_lo, selfIdent, @params, true, out _out1698, out _out1699, out _out1700, out _out1701);
          _3010_loString = _out1698;
          _3011___v99 = _out1699;
          _3012_loErased = _out1700;
          _3013_recIdentsLo = _out1701;
          Dafny.ISequence<Dafny.Rune> _3014_hiString;
          bool _3015___v100;
          bool _3016_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3017_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1702;
          bool _out1703;
          bool _out1704;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
          DCOMP.COMP.GenExpr(_3008_hi, selfIdent, @params, true, out _out1702, out _out1703, out _out1704, out _out1705);
          _3014_hiString = _out1702;
          _3015___v100 = _out1703;
          _3016_hiErased = _out1704;
          _3017_recIdentsHi = _out1705;
          if (!(_3012_loErased)) {
            _3010_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3010_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3016_hiErased)) {
            _3014_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3014_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3010_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3014_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3013_recIdentsLo, _3017_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3018_i;
      _3018_i = BigInteger.Zero;
      while ((_3018_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3019_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1706;
        _out1706 = DCOMP.COMP.GenModule((p).Select(_3018_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3019_generated = _out1706;
        if ((_3018_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3019_generated);
        _3018_i = (_3018_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3020_i;
      _3020_i = BigInteger.Zero;
      while ((_3020_i) < (new BigInteger((fullName).Count))) {
        if ((_3020_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3020_i));
        _3020_i = (_3020_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

