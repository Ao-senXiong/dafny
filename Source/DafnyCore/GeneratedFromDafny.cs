// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM.Utils {

  public partial class __default {
    public static DAM.Utils._IOption<__A> SeqGet<__A>(Dafny.ISequence<__A> s, BigInteger idx) {
      if ((idx) < (new BigInteger((s).Count))) {
        return DAM.Utils.Option<__A>.create_Some((s).Select(idx));
      } else {
        return DAM.Utils.Option<__A>.create_None();
      }
    }
    public static _System._ITuple2<BigInteger, Dafny.ISequence<__A>> Extend<__A>(Dafny.ISequence<__A> s, __A elt) {
      return _System.Tuple2<BigInteger, Dafny.ISequence<__A>>.create(new BigInteger((s).Count), Dafny.Sequence<__A>.Concat(s, Dafny.Sequence<__A>.FromElements(elt)));
    }
    public static DAM.Utils._IOption<__V> mapGet<__K, __V>(Dafny.IMap<__K, __V> m, __K k) {
      if ((m).Contains(k)) {
        return DAM.Utils.Option<__V>.create_Some(Dafny.Map<__K, __V>.Select(m, k));
      } else {
        return DAM.Utils.Option<__V>.create_None();
      }
    }
    public static DAM.Utils._IOption<Dafny.IMap<__K, __V>> mapOption<__K, __V>(Dafny.IMap<__K, DAM.Utils._IOption<__V>> m) {
      if (Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, bool>>((m) => Dafny.Helpers.Quantifier<__K>((m).Keys.Elements, true, (((_forall_var_0) => {
        __K k = (__K)_forall_var_0;
        return !((m).Contains(k)) || ((Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).is_Some);
      }))))(m)) {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_Some(Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, Dafny.IMap<__K, __V>>>((m) => ((System.Func<Dafny.IMap<__K, __V>>)(() => {
          var _coll0 = new System.Collections.Generic.List<Dafny.Pair<__K, __V>>();
          foreach (__K _compr_0 in (m).Keys.Elements) {
            __K k = (__K)_compr_0;
            if ((m).Contains(k)) {
              _coll0.Add(new Dafny.Pair<__K, __V>(k, (Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).Extract()));
            }
          }
          return Dafny.Map<__K, __V>.FromCollection(_coll0);
        }))())(m));
      } else {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_None();
      }
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM.Utils._IOption<__B> PropagateFailure<__B>();
    A Extract();
    A GetOr(A @default);
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM.Utils._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM.Utils._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM.Utils._IOption<A>>(DAM.Utils.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM.Utils._IOption<__B> PropagateFailure<__B>() {
      return DAM.Utils.Option<__B>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
    public A GetOr(A @default) {
      DAM.Utils._IOption<A> _source0 = this;
      if (_source0.is_None) {
        return @default;
      } else {
        A __mcc_h0 = _source0.dtor_value;
        A v = __mcc_h0;
        return v;
      }
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Utils
namespace DAM.Syntax {

  public partial class __default {
    public static DAM.Syntax._IStmt Let(DAM.Syntax._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IPos ty, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Call(DAM.Syntax.Stmt.create_Func(var__, ty, rhs), lhs);
    }
    public static DAM.Syntax._INeg Command() {
      return DAM.Syntax.Neg.create_Value(DAM.Syntax.Pos.create_Unit());
    }
    public static DAM.Syntax._IStmt Then(DAM.Syntax._IStmt lhs, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Bind(lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), rhs);
    }
    public static DAM.Syntax._IStmt Skip() {
      return DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Unit());
    }
    public static DAM.Syntax._IStmt While(DAM.Syntax._IStmt guard, DAM.Syntax._IStmt body, DAM.Syntax._IStmt next) {
      return DAM.Syntax.Stmt.create_Rec(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), DAM.Syntax.__default.Command(), DAM.Syntax.Stmt.create_Bind(guard, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), DAM.Syntax.__default.Then(body, DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while")))), next)));
    }
  }

  public interface _IPos {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    DAM.Syntax._INeg dtor_neg { get; }
    DAM.Syntax._IPos dtor_ref { get; }
    DAM.Syntax._INeg dtor_start { get; }
    _IPos DowncastClone();
  }
  public abstract class Pos : _IPos {
    public Pos() {
    }
    private static readonly DAM.Syntax._IPos theDefault = create_Unit();
    public static DAM.Syntax._IPos Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IPos> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IPos>(DAM.Syntax.Pos.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IPos> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPos create_Unit() {
      return new Pos_Unit();
    }
    public static _IPos create_Bool() {
      return new Pos_Bool();
    }
    public static _IPos create_Int() {
      return new Pos_Int();
    }
    public static _IPos create_Thunk(DAM.Syntax._INeg neg) {
      return new Pos_Thunk(neg);
    }
    public static _IPos create_Ref(DAM.Syntax._IPos @ref) {
      return new Pos_Ref(@ref);
    }
    public static _IPos create_Stack(DAM.Syntax._INeg start) {
      return new Pos_Stack(start);
    }
    public bool is_Unit { get { return this is Pos_Unit; } }
    public bool is_Bool { get { return this is Pos_Bool; } }
    public bool is_Int { get { return this is Pos_Int; } }
    public bool is_Thunk { get { return this is Pos_Thunk; } }
    public bool is_Ref { get { return this is Pos_Ref; } }
    public bool is_Stack { get { return this is Pos_Stack; } }
    public DAM.Syntax._INeg dtor_neg {
      get {
        var d = this;
        return ((Pos_Thunk)d)._neg;
      }
    }
    public DAM.Syntax._IPos dtor_ref {
      get {
        var d = this;
        return ((Pos_Ref)d)._ref;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Pos_Stack)d)._start;
      }
    }
    public abstract _IPos DowncastClone();
  }
  public class Pos_Unit : Pos {
    public Pos_Unit() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Unit";
      return s;
    }
  }
  public class Pos_Bool : Pos {
    public Pos_Bool() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Bool";
      return s;
    }
  }
  public class Pos_Int : Pos {
    public Pos_Int() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Int";
      return s;
    }
  }
  public class Pos_Thunk : Pos {
    public readonly DAM.Syntax._INeg _neg;
    public Pos_Thunk(DAM.Syntax._INeg neg) : base() {
      this._neg = neg;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Thunk(_neg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Thunk;
      return oth != null && object.Equals(this._neg, oth._neg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._neg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._neg);
      s += ")";
      return s;
    }
  }
  public class Pos_Ref : Pos {
    public readonly DAM.Syntax._IPos _ref;
    public Pos_Ref(DAM.Syntax._IPos @ref) : base() {
      this._ref = @ref;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Ref(_ref);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Ref;
      return oth != null && object.Equals(this._ref, oth._ref);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ")";
      return s;
    }
  }
  public class Pos_Stack : Pos {
    public readonly DAM.Syntax._INeg _start;
    public Pos_Stack(DAM.Syntax._INeg start) : base() {
      this._start = start;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Stack(_start);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Stack;
      return oth != null && object.Equals(this._start, oth._start);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ")";
      return s;
    }
  }

  public interface _INeg {
    bool is_Value { get; }
    bool is_Function { get; }
    bool is_Record { get; }
    DAM.Syntax._IPos dtor_pos { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._INeg dtor_cod { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields { get; }
    _INeg DowncastClone();
  }
  public abstract class Neg : _INeg {
    public Neg() {
    }
    private static readonly DAM.Syntax._INeg theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>.Empty);
    public static DAM.Syntax._INeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._INeg> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._INeg>(DAM.Syntax.Neg.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._INeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INeg create_Value(DAM.Syntax._IPos pos) {
      return new Neg_Value(pos);
    }
    public static _INeg create_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) {
      return new Neg_Function(dom, cod);
    }
    public static _INeg create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) {
      return new Neg_Record(fields);
    }
    public bool is_Value { get { return this is Neg_Value; } }
    public bool is_Function { get { return this is Neg_Function; } }
    public bool is_Record { get { return this is Neg_Record; } }
    public DAM.Syntax._IPos dtor_pos {
      get {
        var d = this;
        return ((Neg_Value)d)._pos;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Neg_Function)d)._dom;
      }
    }
    public DAM.Syntax._INeg dtor_cod {
      get {
        var d = this;
        return ((Neg_Function)d)._cod;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields {
      get {
        var d = this;
        return ((Neg_Record)d)._fields;
      }
    }
    public abstract _INeg DowncastClone();
  }
  public class Neg_Value : Neg {
    public readonly DAM.Syntax._IPos _pos;
    public Neg_Value(DAM.Syntax._IPos pos) : base() {
      this._pos = pos;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Value(_pos);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Value;
      return oth != null && object.Equals(this._pos, oth._pos);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pos));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._pos);
      s += ")";
      return s;
    }
  }
  public class Neg_Function : Neg {
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._INeg _cod;
    public Neg_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) : base() {
      this._dom = dom;
      this._cod = cod;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Function(_dom, _cod);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Function;
      return oth != null && object.Equals(this._dom, oth._dom) && object.Equals(this._cod, oth._cod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Function";
      s += "(";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cod);
      s += ")";
      return s;
    }
  }
  public class Neg_Record : Neg {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _fields;
    public Neg_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) : base() {
      this._fields = fields;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_LT { get; }
    bool is_Plus { get; }
    bool is_Thunk { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    DAM.Syntax._IExpr dtor_LT_a0 { get; }
    DAM.Syntax._IExpr dtor_LT_a1 { get; }
    DAM.Syntax._IExpr dtor_Plus_a0 { get; }
    DAM.Syntax._IExpr dtor_Plus_a1 { get; }
    DAM.Syntax._IStmt dtor_Thunk_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM.Syntax._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM.Syntax._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IExpr>(DAM.Syntax.Expr.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Unit() {
      return new Expr_Unit();
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_LT(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) {
      return new Expr_LT(_a0, _a1);
    }
    public static _IExpr create_Plus(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) {
      return new Expr_Plus(_a0, _a1);
    }
    public static _IExpr create_Thunk(DAM.Syntax._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Unit { get { return this is Expr_Unit; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_LT { get { return this is Expr_LT; } }
    public bool is_Plus { get { return this is Expr_Plus; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_LT_a0 {
      get {
        var d = this;
        return ((Expr_LT)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_LT_a1 {
      get {
        var d = this;
        return ((Expr_LT)d)._a1;
      }
    }
    public DAM.Syntax._IExpr dtor_Plus_a0 {
      get {
        var d = this;
        return ((Expr_Plus)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_Plus_a1 {
      get {
        var d = this;
        return ((Expr_Plus)d)._a1;
      }
    }
    public DAM.Syntax._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Unit : Expr {
    public Expr_Unit() : base() {
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Unit";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_LT : Expr {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IExpr _a1;
    public Expr_LT(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LT(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_LT;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.LT";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Expr_Plus : Expr {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IExpr _a1;
    public Expr_Plus(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Plus(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Plus;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Plus";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM.Syntax._IStmt _a0;
    public Expr_Thunk(DAM.Syntax._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Record { get; }
    bool is_Select { get; }
    bool is_Force { get; }
    bool is_New { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    bool is_Print { get; }
    bool is_Rec { get; }
    bool is_LetCS { get; }
    bool is_Throw { get; }
    DAM.Syntax._IExpr dtor_Pure_a0 { get; }
    DAM.Syntax._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM.Syntax._IStmt dtor_rhs { get; }
    DAM.Syntax._IExpr dtor_guard { get; }
    DAM.Syntax._IStmt dtor_then__ { get; }
    DAM.Syntax._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._IStmt dtor_body { get; }
    DAM.Syntax._IStmt dtor_func { get; }
    DAM.Syntax._IExpr dtor_arg { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields { get; }
    DAM.Syntax._IStmt dtor_record { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    DAM.Syntax._IExpr dtor_Force_a0 { get; }
    DAM.Syntax._IExpr dtor_init { get; }
    DAM.Syntax._IStmt dtor_next { get; }
    DAM.Syntax._IExpr dtor_ref { get; }
    DAM.Syntax._IExpr dtor_lvalue { get; }
    DAM.Syntax._IExpr dtor_rvalue { get; }
    DAM.Syntax._IExpr dtor_Print_a0 { get; }
    DAM.Syntax._INeg dtor_fix { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Syntax._IExpr dtor_stack { get; }
    DAM.Syntax._INeg dtor_oldstart { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM.Syntax._IStmt theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Empty);
    public static DAM.Syntax._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IStmt>(DAM.Syntax.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM.Syntax._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) {
      return new Stmt_Func(bound, dom, body);
    }
    public static _IStmt create_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) {
      return new Stmt_Record(fields);
    }
    public static _IStmt create_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) {
      return new Stmt_Select(record, field);
    }
    public static _IStmt create_Force(DAM.Syntax._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_New(init, var__, next);
    }
    public static _IStmt create_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_Read(@ref, var__, next);
    }
    public static _IStmt create_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) {
      return new Stmt_Write(lvalue, rvalue, next);
    }
    public static _IStmt create_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) {
      return new Stmt_Print(_a0, next);
    }
    public static _IStmt create_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) {
      return new Stmt_Rec(bound, fix, body);
    }
    public static _IStmt create_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) {
      return new Stmt_LetCS(bound, start, body);
    }
    public static _IStmt create_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) {
      return new Stmt_Throw(stack, oldstart, next);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Record { get { return this is Stmt_Record; } }
    public bool is_Select { get { return this is Stmt_Select; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_New { get { return this is Stmt_New; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public bool is_Print { get { return this is Stmt_Print; } }
    public bool is_Rec { get { return this is Stmt_Rec; } }
    public bool is_LetCS { get { return this is Stmt_LetCS; } }
    public bool is_Throw { get { return this is Stmt_Throw; } }
    public DAM.Syntax._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        if (d is Stmt_New) { return ((Stmt_New)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM.Syntax._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM.Syntax._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM.Syntax._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM.Syntax._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._bound; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._bound; }
        return ((Stmt_LetCS)d)._bound;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Stmt_Func)d)._dom;
      }
    }
    public DAM.Syntax._IStmt dtor_body {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._body; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._body; }
        return ((Stmt_LetCS)d)._body;
      }
    }
    public DAM.Syntax._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM.Syntax._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields {
      get {
        var d = this;
        return ((Stmt_Record)d)._fields;
      }
    }
    public DAM.Syntax._IStmt dtor_record {
      get {
        var d = this;
        return ((Stmt_Select)d)._record;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Stmt_Select)d)._field;
      }
    }
    public DAM.Syntax._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_init {
      get {
        var d = this;
        return ((Stmt_New)d)._init;
      }
    }
    public DAM.Syntax._IStmt dtor_next {
      get {
        var d = this;
        if (d is Stmt_New) { return ((Stmt_New)d)._next; }
        if (d is Stmt_Read) { return ((Stmt_Read)d)._next; }
        if (d is Stmt_Write) { return ((Stmt_Write)d)._next; }
        if (d is Stmt_Print) { return ((Stmt_Print)d)._next; }
        return ((Stmt_Throw)d)._next;
      }
    }
    public DAM.Syntax._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM.Syntax._IExpr dtor_lvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._lvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_rvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._rvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_Print_a0 {
      get {
        var d = this;
        return ((Stmt_Print)d)._a0;
      }
    }
    public DAM.Syntax._INeg dtor_fix {
      get {
        var d = this;
        return ((Stmt_Rec)d)._fix;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Stmt_LetCS)d)._start;
      }
    }
    public DAM.Syntax._IExpr dtor_stack {
      get {
        var d = this;
        return ((Stmt_Throw)d)._stack;
      }
    }
    public DAM.Syntax._INeg dtor_oldstart {
      get {
        var d = this;
        return ((Stmt_Throw)d)._oldstart;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Pure(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM.Syntax._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _rhs;
    public Stmt_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM.Syntax._IExpr _guard;
    public readonly DAM.Syntax._IStmt _then__;
    public readonly DAM.Syntax._IStmt _else__;
    public Stmt_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._dom = dom;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _dom, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._dom, oth._dom) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM.Syntax._IStmt _func;
    public readonly DAM.Syntax._IExpr _arg;
    public Stmt_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Record : Stmt {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _fields;
    public Stmt_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) : base() {
      this._fields = fields;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Stmt_Select : Stmt {
    public readonly DAM.Syntax._IStmt _record;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Stmt_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._record = record;
      this._field = field;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Select(_record, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Select;
      return oth != null && object.Equals(this._record, oth._record) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._record));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._record);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Force(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_New : Stmt {
    public readonly DAM.Syntax._IExpr _init;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._init = init;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_New(_init, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_New;
      return oth != null && object.Equals(this._init, oth._init) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._init));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._init);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM.Syntax._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM.Syntax._IExpr _lvalue;
    public readonly DAM.Syntax._IExpr _rvalue;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) : base() {
      this._lvalue = lvalue;
      this._rvalue = rvalue;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_lvalue, _rvalue, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Write;
      return oth != null && object.Equals(this._lvalue, oth._lvalue) && object.Equals(this._rvalue, oth._rvalue) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._lvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Print : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) : base() {
      this._a0 = _a0;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Print(_a0, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Print;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Rec : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _fix;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._fix = fix;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Rec(_bound, _fix, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Rec;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._fix, oth._fix) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fix));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Rec";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fix);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_LetCS : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._start = start;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_LetCS(_bound, _start, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_LetCS;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._start, oth._start) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.LetCS";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Throw : Stmt {
    public readonly DAM.Syntax._IExpr _stack;
    public readonly DAM.Syntax._INeg _oldstart;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) : base() {
      this._stack = stack;
      this._oldstart = oldstart;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Throw(_stack, _oldstart, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Throw;
      return oth != null && object.Equals(this._stack, oth._stack) && object.Equals(this._oldstart, oth._oldstart) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._oldstart));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Throw";
      s += "(";
      s += Dafny.Helpers.ToString(this._stack);
      s += ", ";
      s += Dafny.Helpers.ToString(this._oldstart);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Syntax
namespace DAM.Machine {

  public partial class __default {
    public static DAM.Machine._IOutput Next(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Silent(), next);
    }
  }

  public interface _IVal {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    bool dtor_answer { get; }
    BigInteger dtor_number { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure { get; }
    BigInteger dtor_addr { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Machine._IStack dtor_stack { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM.Machine._IVal theDefault = create_Unit();
    public static DAM.Machine._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IVal> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IVal>(DAM.Machine.Val.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Unit() {
      return new Val_Unit();
    }
    public static _IVal create_Bool(bool answer) {
      return new Val_Bool(answer);
    }
    public static _IVal create_Int(BigInteger number) {
      return new Val_Int(number);
    }
    public static _IVal create_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) {
      return new Val_Thunk(closure);
    }
    public static _IVal create_Ref(BigInteger addr) {
      return new Val_Ref(addr);
    }
    public static _IVal create_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
      return new Val_Stack(start, stack);
    }
    public bool is_Unit { get { return this is Val_Unit; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool is_Stack { get { return this is Val_Stack; } }
    public bool dtor_answer {
      get {
        var d = this;
        return ((Val_Bool)d)._answer;
      }
    }
    public BigInteger dtor_number {
      get {
        var d = this;
        return ((Val_Int)d)._number;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure {
      get {
        var d = this;
        return ((Val_Thunk)d)._closure;
      }
    }
    public BigInteger dtor_addr {
      get {
        var d = this;
        return ((Val_Ref)d)._addr;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Val_Stack)d)._start;
      }
    }
    public DAM.Machine._IStack dtor_stack {
      get {
        var d = this;
        return ((Val_Stack)d)._stack;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Unit : Val {
    public Val_Unit() : base() {
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Unit";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _answer;
    public Val_Bool(bool answer) : base() {
      this._answer = answer;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_answer);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Bool;
      return oth != null && this._answer == oth._answer;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._answer));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._answer);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _number;
    public Val_Int(BigInteger number) : base() {
      this._number = number;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_number);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Int;
      return oth != null && this._number == oth._number;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._number));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._number);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _closure;
    public Val_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) : base() {
      this._closure = closure;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_closure);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Thunk;
      return oth != null && object.Equals(this._closure, oth._closure);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._closure));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._closure);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly BigInteger _addr;
    public Val_Ref(BigInteger addr) : base() {
      this._addr = addr;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_addr);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Ref;
      return oth != null && this._addr == oth._addr;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._addr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._addr);
      s += ")";
      return s;
    }
  }
  public class Val_Stack : Val {
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Machine._IStack _stack;
    public Val_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) : base() {
      this._start = start;
      this._stack = stack;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Stack(_start, _stack);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Stack;
      return oth != null && object.Equals(this._start, oth._start) && object.Equals(this._stack, oth._stack);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._stack);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM.Machine._IFrame dtor_top { get; }
    DAM.Machine._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM.Machine._IStack theDefault = create_Empty();
    public static DAM.Machine._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IStack> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IStack>(DAM.Machine.Stack.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM.Machine._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM.Machine._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop() {
      DAM.Machine._IStack _source1 = this;
      if (_source1.is_Empty) {
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_None();
      } else {
        DAM.Machine._IFrame _10___mcc_h0 = _source1.dtor_top;
        DAM.Machine._IStack _11___mcc_h1 = _source1.dtor_rest;
        DAM.Machine._IStack _12_r = _11___mcc_h1;
        DAM.Machine._IFrame _13_t = _10___mcc_h0;
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_Some(_System.Tuple2<DAM.Machine._IFrame, DAM.Machine._IStack>.create(_13_t, _12_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM.Machine._IFrame _top;
    public readonly DAM.Machine._IStack _rest;
    public Stack_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM.Machine._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()));
    public static DAM.Machine._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IFrame>(DAM.Machine.Frame.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) {
      return new Frame_Call(arg);
    }
    public static _IFrame create_Select(Dafny.ISequence<Dafny.Rune> field) {
      return new Frame_Select(field);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public bool is_Select { get { return this is Frame_Select; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Frame_Select)d)._field;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _arg;
    public Frame_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Frame_Select : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Frame_Select(Dafny.ISequence<Dafny.Rune> field) : base() {
      this._field = field;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Select(_field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Select;
      return oth != null && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Select";
      s += "(";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IEvent {
    bool is_Silent { get; }
    bool is_Print { get; }
    DAM.Machine._IVal dtor_Print_a0 { get; }
    _IEvent DowncastClone();
  }
  public abstract class Event : _IEvent {
    public Event() {
    }
    private static readonly DAM.Machine._IEvent theDefault = create_Silent();
    public static DAM.Machine._IEvent Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IEvent> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IEvent>(DAM.Machine.Event.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IEvent> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEvent create_Silent() {
      return new Event_Silent();
    }
    public static _IEvent create_Print(DAM.Machine._IVal _a0) {
      return new Event_Print(_a0);
    }
    public bool is_Silent { get { return this is Event_Silent; } }
    public bool is_Print { get { return this is Event_Print; } }
    public DAM.Machine._IVal dtor_Print_a0 {
      get {
        var d = this;
        return ((Event_Print)d)._a0;
      }
    }
    public abstract _IEvent DowncastClone();
  }
  public class Event_Silent : Event {
    public Event_Silent() : base() {
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Silent();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Silent;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Silent";
      return s;
    }
  }
  public class Event_Print : Event {
    public readonly DAM.Machine._IVal _a0;
    public Event_Print(DAM.Machine._IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IOutput {
    bool is_Raise { get; }
    bool is_Terminal { get; }
    DAM.Machine._IEvent dtor_event { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next { get; }
    _IOutput DowncastClone();
  }
  public abstract class Output : _IOutput {
    public Output() {
    }
    private static readonly DAM.Machine._IOutput theDefault = create_Raise(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()));
    public static DAM.Machine._IOutput Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IOutput> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IOutput>(DAM.Machine.Output.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IOutput> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOutput create_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return new Output_Raise(@event, next);
    }
    public static _IOutput create_Terminal() {
      return new Output_Terminal();
    }
    public bool is_Raise { get { return this is Output_Raise; } }
    public bool is_Terminal { get { return this is Output_Terminal; } }
    public DAM.Machine._IEvent dtor_event {
      get {
        var d = this;
        return ((Output_Raise)d)._event;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next {
      get {
        var d = this;
        return ((Output_Raise)d)._next;
      }
    }
    public abstract _IOutput DowncastClone();
  }
  public class Output_Raise : Output {
    public readonly DAM.Machine._IEvent _event;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _next;
    public Output_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) : base() {
      this._event = @event;
      this._next = next;
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Raise(_event, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Raise;
      return oth != null && object.Equals(this._event, oth._event) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._event));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Raise";
      s += "(";
      s += Dafny.Helpers.ToString(this._event);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Output_Terminal : Output {
    public Output_Terminal() : base() {
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Terminal();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Terminal;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Terminal";
      return s;
    }
  }
} // end of namespace DAM.Machine
namespace DAM.Statics {

  public partial class __default {
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr expr) {
      DAM.Syntax._IExpr _source2 = expr;
      if (_source2.is_Var) {
        Dafny.ISequence<Dafny.Rune> _14___mcc_h0 = _source2.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _15_x = _14___mcc_h0;
        return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(g, _15_x);
      } else if (_source2.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source2.is_Bool) {
        bool _16___mcc_h1 = _source2.dtor_Bool_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source2.is_Int) {
        BigInteger _17___mcc_h2 = _source2.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source2.is_LT) {
        DAM.Syntax._IExpr _18___mcc_h3 = _source2.dtor_LT_a0;
        DAM.Syntax._IExpr _19___mcc_h4 = _source2.dtor_LT_a1;
        DAM.Syntax._IExpr _20_rhs = _19___mcc_h4;
        DAM.Syntax._IExpr _21_lhs = _18___mcc_h3;
        if ((DAM.Statics.__default.CheckExpr(g, _21_lhs, DAM.Syntax.Pos.create_Int())) && (DAM.Statics.__default.CheckExpr(g, _20_rhs, DAM.Syntax.Pos.create_Int()))) {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
        } else {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
        }
      } else if (_source2.is_Plus) {
        DAM.Syntax._IExpr _22___mcc_h5 = _source2.dtor_Plus_a0;
        DAM.Syntax._IExpr _23___mcc_h6 = _source2.dtor_Plus_a1;
        DAM.Syntax._IExpr _24_rhs = _23___mcc_h6;
        DAM.Syntax._IExpr _25_lhs = _22___mcc_h5;
        if ((DAM.Statics.__default.CheckExpr(g, _25_lhs, DAM.Syntax.Pos.create_Int())) && (DAM.Statics.__default.CheckExpr(g, _24_rhs, DAM.Syntax.Pos.create_Int()))) {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
        } else {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
        }
      } else {
        DAM.Syntax._IStmt _26___mcc_h7 = _source2.dtor_Thunk_a0;
        DAM.Syntax._IStmt _27_s = _26___mcc_h7;
        DAM.Utils._IOption<DAM.Syntax._INeg> _28_valueOrError0 = DAM.Statics.__default.SynthStmt(g, _27_s);
        if ((_28_valueOrError0).IsFailure()) {
          return (_28_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._INeg _29_t = (_28_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_29_t));
        }
      }
    }
    public static bool CheckExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr e, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthExpr(g, e), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt) {
      DAM.Syntax._IStmt _source3 = stmt;
      if (_source3.is_Pure) {
        DAM.Syntax._IExpr _30___mcc_h0 = _source3.dtor_Pure_a0;
        DAM.Syntax._IExpr _31_e = _30___mcc_h0;
        DAM.Utils._IOption<DAM.Syntax._IPos> _32_valueOrError0 = DAM.Statics.__default.SynthExpr(g, _31_e);
        if ((_32_valueOrError0).IsFailure()) {
          return (_32_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _33_t = (_32_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Value(_33_t));
        }
      } else if (_source3.is_Bind) {
        DAM.Syntax._IStmt _34___mcc_h1 = _source3.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _35___mcc_h2 = _source3.dtor_var__;
        DAM.Syntax._IStmt _36___mcc_h3 = _source3.dtor_rhs;
        DAM.Syntax._IStmt _37_rhs = _36___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _38_var__ = _35___mcc_h2;
        DAM.Syntax._IStmt _39_lhs = _34___mcc_h1;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source4 = DAM.Statics.__default.SynthStmt(g, _39_lhs);
        if (_source4.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _40___mcc_h36 = _source4.dtor_value;
          DAM.Syntax._INeg _source5 = _40___mcc_h36;
          if (_source5.is_Value) {
            DAM.Syntax._IPos _41___mcc_h38 = _source5.dtor_pos;
            DAM.Syntax._IPos _42_t = _41___mcc_h38;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _38_var__, _42_t), _37_rhs);
          } else if (_source5.is_Function) {
            DAM.Syntax._IPos _43___mcc_h40 = _source5.dtor_dom;
            DAM.Syntax._INeg _44___mcc_h41 = _source5.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _45___mcc_h44 = _source5.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Ite) {
        DAM.Syntax._IExpr _46___mcc_h4 = _source3.dtor_guard;
        DAM.Syntax._IStmt _47___mcc_h5 = _source3.dtor_then__;
        DAM.Syntax._IStmt _48___mcc_h6 = _source3.dtor_else__;
        DAM.Syntax._IStmt _49_else__ = _48___mcc_h6;
        DAM.Syntax._IStmt _50_then__ = _47___mcc_h5;
        DAM.Syntax._IExpr _51_guard = _46___mcc_h4;
        if (DAM.Statics.__default.CheckExpr(g, _51_guard, DAM.Syntax.Pos.create_Bool())) {
          DAM.Utils._IOption<DAM.Syntax._INeg> _52_valueOrError1 = DAM.Statics.__default.SynthStmt(g, _50_then__);
          if ((_52_valueOrError1).IsFailure()) {
            return (_52_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _53_t = (_52_valueOrError1).Extract();
            if (DAM.Statics.__default.CheckStmt(g, _49_else__, _53_t)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_53_t);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_Func) {
        Dafny.ISequence<Dafny.Rune> _54___mcc_h7 = _source3.dtor_bound;
        DAM.Syntax._IPos _55___mcc_h8 = _source3.dtor_dom;
        DAM.Syntax._IStmt _56___mcc_h9 = _source3.dtor_body;
        DAM.Syntax._IStmt _57_body = _56___mcc_h9;
        DAM.Syntax._IPos _58_dom = _55___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _59_bound = _54___mcc_h7;
        DAM.Utils._IOption<DAM.Syntax._INeg> _60_valueOrError2 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _59_bound, _58_dom), _57_body);
        if ((_60_valueOrError2).IsFailure()) {
          return (_60_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _61_cod = (_60_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Function(_58_dom, _61_cod));
        }
      } else if (_source3.is_Call) {
        DAM.Syntax._IStmt _62___mcc_h10 = _source3.dtor_func;
        DAM.Syntax._IExpr _63___mcc_h11 = _source3.dtor_arg;
        DAM.Syntax._IExpr _64_arg = _63___mcc_h11;
        DAM.Syntax._IStmt _65_func = _62___mcc_h10;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source6 = DAM.Statics.__default.SynthStmt(g, _65_func);
        if (_source6.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _66___mcc_h46 = _source6.dtor_value;
          DAM.Syntax._INeg _source7 = _66___mcc_h46;
          if (_source7.is_Value) {
            DAM.Syntax._IPos _67___mcc_h48 = _source7.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source7.is_Function) {
            DAM.Syntax._IPos _68___mcc_h50 = _source7.dtor_dom;
            DAM.Syntax._INeg _69___mcc_h51 = _source7.dtor_cod;
            DAM.Syntax._INeg _70_cod = _69___mcc_h51;
            DAM.Syntax._IPos _71_dom = _68___mcc_h50;
            if (DAM.Statics.__default.CheckExpr(g, _64_arg, _71_dom)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_70_cod);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _72___mcc_h54 = _source7.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _73___mcc_h12 = _source3.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _74_fields = _73___mcc_h12;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>> _75_valueOrError4 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>>((_76_fields, _77_g) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>)(() => {
          var _coll1 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_1 in (_76_fields).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _78_lbl = (Dafny.ISequence<Dafny.Rune>)_compr_1;
            if ((_76_fields).Contains(_78_lbl)) {
              _coll1.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>(_78_lbl, DAM.Statics.__default.SynthStmt(_77_g, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_76_fields, _78_lbl))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>.FromCollection(_coll1);
        }))())(_74_fields, g));
        if ((_75_valueOrError4).IsFailure()) {
          return (_75_valueOrError4).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _79_fields = (_75_valueOrError4).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Record(_79_fields));
        }
      } else if (_source3.is_Select) {
        DAM.Syntax._IStmt _80___mcc_h13 = _source3.dtor_record;
        Dafny.ISequence<Dafny.Rune> _81___mcc_h14 = _source3.dtor_field;
        Dafny.ISequence<Dafny.Rune> _82_lbl = _81___mcc_h14;
        DAM.Syntax._IStmt _83_record = _80___mcc_h13;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source8 = DAM.Statics.__default.SynthStmt(g, _83_record);
        if (_source8.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _84___mcc_h56 = _source8.dtor_value;
          DAM.Syntax._INeg _source9 = _84___mcc_h56;
          if (_source9.is_Value) {
            DAM.Syntax._IPos _85___mcc_h58 = _source9.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source9.is_Function) {
            DAM.Syntax._IPos _86___mcc_h60 = _source9.dtor_dom;
            DAM.Syntax._INeg _87___mcc_h61 = _source9.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _88___mcc_h64 = _source9.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _89_fields = _88___mcc_h64;
            return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_89_fields, _82_lbl);
          }
        }
      } else if (_source3.is_Force) {
        DAM.Syntax._IExpr _90___mcc_h15 = _source3.dtor_Force_a0;
        DAM.Syntax._IExpr _91_expr = _90___mcc_h15;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source10 = DAM.Statics.__default.SynthExpr(g, _91_expr);
        if (_source10.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _92___mcc_h66 = _source10.dtor_value;
          DAM.Syntax._IPos _source11 = _92___mcc_h66;
          if (_source11.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Thunk) {
            DAM.Syntax._INeg _93___mcc_h68 = _source11.dtor_neg;
            DAM.Syntax._INeg _94_t = _93___mcc_h68;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_94_t);
          } else if (_source11.is_Ref) {
            DAM.Syntax._IPos _95___mcc_h70 = _source11.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _96___mcc_h72 = _source11.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_New) {
        DAM.Syntax._IExpr _97___mcc_h16 = _source3.dtor_init;
        Dafny.ISequence<Dafny.Rune> _98___mcc_h17 = _source3.dtor_var__;
        DAM.Syntax._IStmt _99___mcc_h18 = _source3.dtor_next;
        DAM.Syntax._IStmt _100_next = _99___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _101_var__ = _98___mcc_h17;
        DAM.Syntax._IExpr _102_init = _97___mcc_h16;
        DAM.Utils._IOption<DAM.Syntax._IPos> _103_valueOrError5 = DAM.Statics.__default.SynthExpr(g, _102_init);
        if ((_103_valueOrError5).IsFailure()) {
          return (_103_valueOrError5).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _104_t = (_103_valueOrError5).Extract();
          return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _101_var__, DAM.Syntax.Pos.create_Ref(_104_t)), _100_next);
        }
      } else if (_source3.is_Read) {
        DAM.Syntax._IExpr _105___mcc_h19 = _source3.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _106___mcc_h20 = _source3.dtor_var__;
        DAM.Syntax._IStmt _107___mcc_h21 = _source3.dtor_next;
        DAM.Syntax._IStmt _108_next = _107___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _109_var__ = _106___mcc_h20;
        DAM.Syntax._IExpr _110_ref = _105___mcc_h19;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source12 = DAM.Statics.__default.SynthExpr(g, _110_ref);
        if (_source12.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _111___mcc_h74 = _source12.dtor_value;
          DAM.Syntax._IPos _source13 = _111___mcc_h74;
          if (_source13.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Thunk) {
            DAM.Syntax._INeg _112___mcc_h76 = _source13.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Ref) {
            DAM.Syntax._IPos _113___mcc_h78 = _source13.dtor_ref;
            DAM.Syntax._IPos _114_t = _113___mcc_h78;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _109_var__, _114_t), _108_next);
          } else {
            DAM.Syntax._INeg _115___mcc_h80 = _source13.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Write) {
        DAM.Syntax._IExpr _116___mcc_h22 = _source3.dtor_lvalue;
        DAM.Syntax._IExpr _117___mcc_h23 = _source3.dtor_rvalue;
        DAM.Syntax._IStmt _118___mcc_h24 = _source3.dtor_next;
        DAM.Syntax._IStmt _119_next = _118___mcc_h24;
        DAM.Syntax._IExpr _120_rhs = _117___mcc_h23;
        DAM.Syntax._IExpr _121_lhs = _116___mcc_h22;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source14 = DAM.Statics.__default.SynthExpr(g, _121_lhs);
        if (_source14.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _122___mcc_h82 = _source14.dtor_value;
          DAM.Syntax._IPos _source15 = _122___mcc_h82;
          if (_source15.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Thunk) {
            DAM.Syntax._INeg _123___mcc_h84 = _source15.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Ref) {
            DAM.Syntax._IPos _124___mcc_h86 = _source15.dtor_ref;
            DAM.Syntax._IPos _125_t = _124___mcc_h86;
            if (DAM.Statics.__default.CheckExpr(g, _120_rhs, _125_t)) {
              return DAM.Statics.__default.SynthStmt(g, _119_next);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            DAM.Syntax._INeg _126___mcc_h88 = _source15.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Print) {
        DAM.Syntax._IExpr _127___mcc_h25 = _source3.dtor_Print_a0;
        DAM.Syntax._IStmt _128___mcc_h26 = _source3.dtor_next;
        DAM.Syntax._IStmt _129_next = _128___mcc_h26;
        DAM.Syntax._IExpr _130_expr = _127___mcc_h25;
        DAM.Utils._IOption<DAM.Syntax._IPos> _131_valueOrError3 = DAM.Statics.__default.SynthExpr(g, _130_expr);
        if ((_131_valueOrError3).IsFailure()) {
          return (_131_valueOrError3).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _132___v17 = (_131_valueOrError3).Extract();
          return DAM.Statics.__default.SynthStmt(g, _129_next);
        }
      } else if (_source3.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _133___mcc_h27 = _source3.dtor_bound;
        DAM.Syntax._INeg _134___mcc_h28 = _source3.dtor_fix;
        DAM.Syntax._IStmt _135___mcc_h29 = _source3.dtor_body;
        DAM.Syntax._IStmt _136_body = _135___mcc_h29;
        DAM.Syntax._INeg _137_fix = _134___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _138_self = _133___mcc_h27;
        if (DAM.Statics.__default.CheckStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _138_self, DAM.Syntax.Pos.create_Thunk(_137_fix)), _136_body, _137_fix)) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_137_fix);
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _139___mcc_h30 = _source3.dtor_bound;
        DAM.Syntax._INeg _140___mcc_h31 = _source3.dtor_start;
        DAM.Syntax._IStmt _141___mcc_h32 = _source3.dtor_body;
        DAM.Syntax._IStmt _142_body = _141___mcc_h32;
        DAM.Syntax._INeg _143_start = _140___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _144_bound = _139___mcc_h30;
        return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _144_bound, DAM.Syntax.Pos.create_Stack(_143_start)), _142_body);
      } else {
        DAM.Syntax._IExpr _145___mcc_h33 = _source3.dtor_stack;
        DAM.Syntax._INeg _146___mcc_h34 = _source3.dtor_oldstart;
        DAM.Syntax._IStmt _147___mcc_h35 = _source3.dtor_next;
        DAM.Syntax._IStmt _148_next = _147___mcc_h35;
        DAM.Syntax._INeg _149_oldstart = _146___mcc_h34;
        DAM.Syntax._IExpr _150_stack = _145___mcc_h33;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source16 = DAM.Statics.__default.SynthExpr(g, _150_stack);
        if (_source16.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _151___mcc_h90 = _source16.dtor_value;
          DAM.Syntax._IPos _source17 = _151___mcc_h90;
          if (_source17.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Thunk) {
            DAM.Syntax._INeg _152___mcc_h92 = _source17.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Ref) {
            DAM.Syntax._IPos _153___mcc_h94 = _source17.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _154___mcc_h96 = _source17.dtor_start;
            DAM.Syntax._INeg _155_start = _154___mcc_h96;
            if (DAM.Statics.__default.CheckStmt(g, _148_next, _155_start)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_149_oldstart);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        }
      }
    }
    public static bool CheckStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt, DAM.Syntax._INeg t) {
      return object.Equals(DAM.Statics.__default.SynthStmt(g, stmt), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(t));
    }
    public static DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> SynthEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env) {
      return DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_156_env, _157_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
        var _coll2 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
        foreach (Dafny.ISequence<Dafny.Rune> _compr_2 in (_156_env).Keys.Elements) {
          Dafny.ISequence<Dafny.Rune> _158_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_2;
          if ((_156_env).Contains(_158_var__)) {
            _coll2.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_158_var__, DAM.Statics.__default.SynthVal(_157_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_156_env, _158_var__))));
          }
        }
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll2);
      }))())(env, s));
    }
    public static bool CheckEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g) {
      return object.Equals(DAM.Statics.__default.SynthEnv(s, env), DAM.Utils.Option<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>>.create_Some(g));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs0 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _159_env = _let_tmp_rhs0.dtor__0;
      DAM.Syntax._IExpr _160_expr = _let_tmp_rhs0.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _161_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _159_env);
      if ((_161_valueOrError0).IsFailure()) {
        return (_161_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _162_g = (_161_valueOrError0).Extract();
        return DAM.Statics.__default.SynthExpr(_162_g, _160_expr);
      }
    }
    public static bool CheckClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthClosedExpr(s, expr), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthClosedStmt(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> stmt) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs1 = stmt;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _163_env = _let_tmp_rhs1.dtor__0;
      DAM.Syntax._IStmt _164_stmt = _let_tmp_rhs1.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _165_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _163_env);
      if ((_165_valueOrError0).IsFailure()) {
        return (_165_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _166_g = (_165_valueOrError0).Extract();
        return DAM.Statics.__default.SynthStmt(_166_g, _164_stmt);
      }
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
    TAIL_CALL_START:;
      DAM.Machine._IStack _source18 = stack;
      if (_source18.is_Empty) {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(start);
      } else {
        DAM.Machine._IFrame _167___mcc_h0 = _source18.dtor_top;
        DAM.Machine._IStack _168___mcc_h1 = _source18.dtor_rest;
        DAM.Machine._IFrame _source19 = _167___mcc_h0;
        if (_source19.is_Bind) {
          Dafny.ISequence<Dafny.Rune> _169___mcc_h2 = _source19.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _170___mcc_h3 = _source19.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source20 = _170___mcc_h3;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _171___mcc_h4 = _source20.dtor__0;
          DAM.Syntax._IStmt _172___mcc_h5 = _source20.dtor__1;
          DAM.Machine._IStack _173_stack = _168___mcc_h1;
          DAM.Syntax._IStmt _174_rhs = _172___mcc_h5;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _175_env = _171___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _176_var__ = _169___mcc_h2;
          DAM.Syntax._INeg _source21 = start;
          if (_source21.is_Value) {
            DAM.Syntax._IPos _177___mcc_h8 = _source21.dtor_pos;
            DAM.Syntax._IPos _178_t = _177___mcc_h8;
            DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _179_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _175_env);
            if ((_179_valueOrError0).IsFailure()) {
              return (_179_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _180_g = (_179_valueOrError0).Extract();
              DAM.Utils._IOption<DAM.Syntax._INeg> _181_valueOrError1 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_180_g, _176_var__, _178_t), _174_rhs);
              if ((_181_valueOrError1).IsFailure()) {
                return (_181_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
              } else {
                DAM.Syntax._INeg _182_start = (_181_valueOrError1).Extract();
                Dafny.ISequence<DAM.Syntax._IPos> _in0 = s;
                DAM.Syntax._INeg _in1 = _182_start;
                DAM.Machine._IStack _in2 = _173_stack;
                s = _in0;
                start = _in1;
                stack = _in2;
                goto TAIL_CALL_START;
              }
            }
          } else if (_source21.is_Function) {
            DAM.Syntax._IPos _183___mcc_h10 = _source21.dtor_dom;
            DAM.Syntax._INeg _184___mcc_h11 = _source21.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _185___mcc_h14 = _source21.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else if (_source19.is_Call) {
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _186___mcc_h6 = _source19.dtor_arg;
          DAM.Machine._IStack _187_stack = _168___mcc_h1;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _188_arg = _186___mcc_h6;
          DAM.Syntax._INeg _source22 = start;
          if (_source22.is_Value) {
            DAM.Syntax._IPos _189___mcc_h16 = _source22.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source22.is_Function) {
            DAM.Syntax._IPos _190___mcc_h18 = _source22.dtor_dom;
            DAM.Syntax._INeg _191___mcc_h19 = _source22.dtor_cod;
            DAM.Syntax._INeg _192_cod = _191___mcc_h19;
            DAM.Syntax._IPos _193_dom = _190___mcc_h18;
            if (DAM.Statics.__default.CheckClosedExpr(s, _188_arg, _193_dom)) {
              Dafny.ISequence<DAM.Syntax._IPos> _in3 = s;
              DAM.Syntax._INeg _in4 = _192_cod;
              DAM.Machine._IStack _in5 = _187_stack;
              s = _in3;
              start = _in4;
              stack = _in5;
              goto TAIL_CALL_START;
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _194___mcc_h22 = _source22.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _195___mcc_h7 = _source19.dtor_field;
          DAM.Machine._IStack _196_stack = _168___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _197_lbl = _195___mcc_h7;
          DAM.Syntax._INeg _source23 = start;
          if (_source23.is_Value) {
            DAM.Syntax._IPos _198___mcc_h24 = _source23.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source23.is_Function) {
            DAM.Syntax._IPos _199___mcc_h26 = _source23.dtor_dom;
            DAM.Syntax._INeg _200___mcc_h27 = _source23.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _201___mcc_h30 = _source23.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _202_fields = _201___mcc_h30;
            DAM.Utils._IOption<DAM.Syntax._INeg> _203_valueOrError2 = DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_202_fields, _197_lbl);
            if ((_203_valueOrError2).IsFailure()) {
              return (_203_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              DAM.Syntax._INeg _204_start = (_203_valueOrError2).Extract();
              Dafny.ISequence<DAM.Syntax._IPos> _in6 = s;
              DAM.Syntax._INeg _in7 = _204_start;
              DAM.Machine._IStack _in8 = _196_stack;
              s = _in6;
              start = _in7;
              stack = _in8;
              goto TAIL_CALL_START;
            }
          }
        }
      }
    }
    public static bool CheckStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthStack(s, start, stack), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val) {
      DAM.Machine._IVal _source24 = val;
      if (_source24.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source24.is_Bool) {
        bool _205___mcc_h0 = _source24.dtor_answer;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source24.is_Int) {
        BigInteger _206___mcc_h1 = _source24.dtor_number;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source24.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _207___mcc_h2 = _source24.dtor_closure;
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source25 = _207___mcc_h2;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _208___mcc_h3 = _source25.dtor__0;
        DAM.Syntax._IStmt _209___mcc_h4 = _source25.dtor__1;
        DAM.Syntax._IStmt _210_stmt = _209___mcc_h4;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _211_env = _208___mcc_h3;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _212_valueOrError0 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_213_env, _214_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
          var _coll3 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_3 in (_213_env).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _215_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_3;
            if ((_213_env).Contains(_215_var__)) {
              _coll3.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_215_var__, DAM.Statics.__default.SynthVal(_214_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_213_env, _215_var__))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll3);
        }))())(_211_env, s));
        if ((_212_valueOrError0).IsFailure()) {
          return (_212_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _216_g = (_212_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _217_valueOrError1 = DAM.Statics.__default.SynthStmt(_216_g, _210_stmt);
          if ((_217_valueOrError1).IsFailure()) {
            return (_217_valueOrError1).PropagateFailure<DAM.Syntax._IPos>();
          } else {
            DAM.Syntax._INeg _218_t = (_217_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_218_t));
          }
        }
      } else if (_source24.is_Ref) {
        BigInteger _219___mcc_h5 = _source24.dtor_addr;
        BigInteger _220_addr = _219___mcc_h5;
        DAM.Utils._IOption<DAM.Syntax._IPos> _221_valueOrError2 = DAM.Utils.__default.SeqGet<DAM.Syntax._IPos>(s, _220_addr);
        if ((_221_valueOrError2).IsFailure()) {
          return (_221_valueOrError2).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._IPos _222_t = (_221_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Ref(_222_t));
        }
      } else {
        DAM.Syntax._INeg _223___mcc_h6 = _source24.dtor_start;
        DAM.Machine._IStack _224___mcc_h7 = _source24.dtor_stack;
        DAM.Machine._IStack _225_stack = _224___mcc_h7;
        DAM.Syntax._INeg _226_start = _223___mcc_h6;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
      }
    }
    public static bool CheckVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthVal(s, val), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static bool CheckStore(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.ISequence<DAM.Machine._IVal> store) {
      return ((new BigInteger((store).Count)) == (new BigInteger((s).Count))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, bool>>((_227_store, _228_s) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((_227_store).Count)), true, (((_forall_var_1) => {
        BigInteger _229_addr = (BigInteger)_forall_var_1;
        return !(((_229_addr).Sign != -1) && ((_229_addr) < (new BigInteger((_227_store).Count)))) || (DAM.Statics.__default.CheckVal(_228_s, (_227_store).Select(_229_addr), (_228_s).Select(_229_addr)));
      }))))(store, s));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs2 = input;
      Dafny.ISequence<DAM.Machine._IVal> _230_sto = _let_tmp_rhs2.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _231_stmt = _let_tmp_rhs2.dtor__1;
      DAM.Machine._IStack _232_stack = _let_tmp_rhs2.dtor__2;
      if (DAM.Statics.__default.CheckStore(s, _230_sto)) {
        DAM.Utils._IOption<DAM.Syntax._INeg> _233_valueOrError0 = DAM.Statics.__default.SynthClosedStmt(s, _231_stmt);
        if ((_233_valueOrError0).IsFailure()) {
          return (_233_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _234_start = (_233_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _235_valueOrError1 = DAM.Statics.__default.SynthStack(s, _234_start, _232_stack);
          if ((_235_valueOrError1).IsFailure()) {
            return (_235_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _236_end = (_235_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_236_end);
          }
        }
      } else {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
      }
    }
    public static bool CheckInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthInput(s, input), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static bool CheckOutput(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IOutput @out, DAM.Syntax._INeg end) {
      DAM.Machine._IOutput _source26 = @out;
      if (_source26.is_Raise) {
        DAM.Machine._IEvent _237___mcc_h0 = _source26.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _238___mcc_h1 = _source26.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _239_next = _238___mcc_h1;
        return DAM.Statics.__default.CheckInput(s, _239_next, end);
      } else {
        return true;
      }
    }
  }
} // end of namespace DAM.Statics
namespace DAM.Dynamics {

  public partial class __default {
    public static DAM.Machine._IVal Eval(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs3 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _240_env = _let_tmp_rhs3.dtor__0;
      DAM.Syntax._IExpr _241_expr = _let_tmp_rhs3.dtor__1;
      DAM.Syntax._IExpr _source27 = _241_expr;
      if (_source27.is_Var) {
        Dafny.ISequence<Dafny.Rune> _242___mcc_h0 = _source27.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _243_x = _242___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_240_env, _243_x);
      } else if (_source27.is_Unit) {
        return DAM.Machine.Val.create_Unit();
      } else if (_source27.is_Bool) {
        bool _244___mcc_h1 = _source27.dtor_Bool_a0;
        bool _245_b = _244___mcc_h1;
        return DAM.Machine.Val.create_Bool(_245_b);
      } else if (_source27.is_Int) {
        BigInteger _246___mcc_h2 = _source27.dtor_Int_a0;
        BigInteger _247_i = _246___mcc_h2;
        return DAM.Machine.Val.create_Int(_247_i);
      } else if (_source27.is_LT) {
        DAM.Syntax._IExpr _248___mcc_h3 = _source27.dtor_LT_a0;
        DAM.Syntax._IExpr _249___mcc_h4 = _source27.dtor_LT_a1;
        DAM.Syntax._IExpr _250_rhs = _249___mcc_h4;
        DAM.Syntax._IExpr _251_lhs = _248___mcc_h3;
        BigInteger _252_lhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_240_env, _251_lhs))).dtor_number;
        BigInteger _253_rhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_240_env, _250_rhs))).dtor_number;
        return DAM.Machine.Val.create_Bool(false);
      } else if (_source27.is_Plus) {
        DAM.Syntax._IExpr _254___mcc_h5 = _source27.dtor_Plus_a0;
        DAM.Syntax._IExpr _255___mcc_h6 = _source27.dtor_Plus_a1;
        DAM.Syntax._IExpr _256_rhs = _255___mcc_h6;
        DAM.Syntax._IExpr _257_lhs = _254___mcc_h5;
        BigInteger _258_lhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_240_env, _257_lhs))).dtor_number;
        BigInteger _259_rhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_240_env, _256_rhs))).dtor_number;
        return DAM.Machine.Val.create_Int(BigInteger.Zero);
      } else {
        DAM.Syntax._IStmt _260___mcc_h7 = _source27.dtor_Thunk_a0;
        DAM.Syntax._IStmt _261_stmt = _260___mcc_h7;
        return DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_240_env, _261_stmt));
      }
    }
    public static DAM.Machine._IOutput Step(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs4 = input;
      Dafny.ISequence<DAM.Machine._IVal> _262_store = _let_tmp_rhs4.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs5 = _let_tmp_rhs4.dtor__1;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _263_env = _let_tmp_rhs5.dtor__0;
      DAM.Syntax._IStmt _264_stmt = _let_tmp_rhs5.dtor__1;
      DAM.Machine._IStack _265_stack = _let_tmp_rhs4.dtor__2;
      DAM.Syntax._IStmt _source28 = _264_stmt;
      if (_source28.is_Pure) {
        DAM.Syntax._IExpr _266___mcc_h0 = _source28.dtor_Pure_a0;
        DAM.Syntax._IExpr _267_expr = _266___mcc_h0;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source29 = (_265_stack).Pop();
        if (_source29.is_None) {
          DAM.Machine._IOutput _268_output = DAM.Machine.Output.create_Terminal();
          return _268_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _269___mcc_h36 = _source29.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source30 = _269___mcc_h36;
          DAM.Machine._IFrame _270___mcc_h37 = _source30.dtor__0;
          DAM.Machine._IStack _271___mcc_h38 = _source30.dtor__1;
          DAM.Machine._IFrame _source31 = _270___mcc_h37;
          Dafny.ISequence<Dafny.Rune> _272___mcc_h39 = _source31.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _273___mcc_h40 = _source31.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source32 = _273___mcc_h40;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _274___mcc_h41 = _source32.dtor__0;
          DAM.Syntax._IStmt _275___mcc_h42 = _source32.dtor__1;
          DAM.Machine._IStack _276_stack = _271___mcc_h38;
          DAM.Syntax._IStmt _277_rhs = _275___mcc_h42;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _278_env_k = _274___mcc_h41;
          Dafny.ISequence<Dafny.Rune> _279_var__ = _272___mcc_h39;
          DAM.Machine._IVal _280_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _267_expr));
          DAM.Machine._IOutput _281_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_278_env_k, _279_var__, _280_val), _277_rhs), _276_stack));
          return _281_output;
        }
      } else if (_source28.is_Bind) {
        DAM.Syntax._IStmt _282___mcc_h1 = _source28.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _283___mcc_h2 = _source28.dtor_var__;
        DAM.Syntax._IStmt _284___mcc_h3 = _source28.dtor_rhs;
        DAM.Syntax._IStmt _285_rhs = _284___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _286_var__ = _283___mcc_h2;
        DAM.Syntax._IStmt _287_lhs = _282___mcc_h1;
        DAM.Machine._IOutput _288_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _287_lhs), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Bind(_286_var__, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _285_rhs)), _265_stack)));
        return _288_output;
      } else if (_source28.is_Ite) {
        DAM.Syntax._IExpr _289___mcc_h4 = _source28.dtor_guard;
        DAM.Syntax._IStmt _290___mcc_h5 = _source28.dtor_then__;
        DAM.Syntax._IStmt _291___mcc_h6 = _source28.dtor_else__;
        DAM.Syntax._IStmt _292_else__ = _291___mcc_h6;
        DAM.Syntax._IStmt _293_then__ = _290___mcc_h5;
        DAM.Syntax._IExpr _294_guard = _289___mcc_h4;
        DAM.Machine._IVal _295_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _294_guard));
        DAM.Machine._IOutput _296_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, (((_295_val).dtor_answer) ? (_293_then__) : (_292_else__))), _265_stack));
        return _296_output;
      } else if (_source28.is_Func) {
        Dafny.ISequence<Dafny.Rune> _297___mcc_h7 = _source28.dtor_bound;
        DAM.Syntax._IPos _298___mcc_h8 = _source28.dtor_dom;
        DAM.Syntax._IStmt _299___mcc_h9 = _source28.dtor_body;
        DAM.Syntax._IStmt _300_body = _299___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _301_bound = _297___mcc_h7;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source33 = (_265_stack).Pop();
        if (_source33.is_None) {
          DAM.Machine._IOutput _302_output = DAM.Machine.Output.create_Terminal();
          return _302_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _303___mcc_h45 = _source33.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source34 = _303___mcc_h45;
          DAM.Machine._IFrame _304___mcc_h46 = _source34.dtor__0;
          DAM.Machine._IStack _305___mcc_h47 = _source34.dtor__1;
          DAM.Machine._IFrame _source35 = _304___mcc_h46;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _306___mcc_h50 = _source35.dtor_arg;
          DAM.Machine._IStack _307_stack = _305___mcc_h47;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _308_arg = _306___mcc_h50;
          DAM.Machine._IVal _309_val = DAM.Dynamics.__default.Eval(_308_arg);
          DAM.Machine._IOutput _310_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _301_bound, _309_val), _300_body), _307_stack));
          return _310_output;
        }
      } else if (_source28.is_Call) {
        DAM.Syntax._IStmt _311___mcc_h10 = _source28.dtor_func;
        DAM.Syntax._IExpr _312___mcc_h11 = _source28.dtor_arg;
        DAM.Syntax._IExpr _313_arg = _312___mcc_h11;
        DAM.Syntax._IStmt _314_func = _311___mcc_h10;
        DAM.Machine._IOutput _315_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _314_func), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Call(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _313_arg)), _265_stack)));
        return _315_output;
      } else if (_source28.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _316___mcc_h12 = _source28.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _317_fields = _316___mcc_h12;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source36 = (_265_stack).Pop();
        if (_source36.is_None) {
          DAM.Machine._IOutput _318_output = DAM.Machine.Output.create_Terminal();
          return _318_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _319___mcc_h52 = _source36.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source37 = _319___mcc_h52;
          DAM.Machine._IFrame _320___mcc_h53 = _source37.dtor__0;
          DAM.Machine._IStack _321___mcc_h54 = _source37.dtor__1;
          DAM.Machine._IFrame _source38 = _320___mcc_h53;
          Dafny.ISequence<Dafny.Rune> _322___mcc_h58 = _source38.dtor_field;
          DAM.Machine._IStack _323_stack = _321___mcc_h54;
          Dafny.ISequence<Dafny.Rune> _324_lbl = _322___mcc_h58;
          DAM.Machine._IOutput _325_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_317_fields, _324_lbl)), _323_stack));
          return _325_output;
        }
      } else if (_source28.is_Select) {
        DAM.Syntax._IStmt _326___mcc_h13 = _source28.dtor_record;
        Dafny.ISequence<Dafny.Rune> _327___mcc_h14 = _source28.dtor_field;
        Dafny.ISequence<Dafny.Rune> _328_field = _327___mcc_h14;
        DAM.Syntax._IStmt _329_record = _326___mcc_h13;
        DAM.Machine._IOutput _330_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _329_record), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Select(_328_field), _265_stack)));
        return _330_output;
      } else if (_source28.is_Force) {
        DAM.Syntax._IExpr _331___mcc_h15 = _source28.dtor_Force_a0;
        DAM.Syntax._IExpr _332_thunk = _331___mcc_h15;
        DAM.Machine._IVal _333_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _332_thunk));
        DAM.Machine._IOutput _334_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, (_333_val).dtor_closure, _265_stack));
        return _334_output;
      } else if (_source28.is_New) {
        DAM.Syntax._IExpr _335___mcc_h16 = _source28.dtor_init;
        Dafny.ISequence<Dafny.Rune> _336___mcc_h17 = _source28.dtor_var__;
        DAM.Syntax._IStmt _337___mcc_h18 = _source28.dtor_next;
        DAM.Syntax._IStmt _338_next = _337___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _339_var__ = _336___mcc_h17;
        DAM.Syntax._IExpr _340_init = _335___mcc_h16;
        DAM.Machine._IVal _341_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _340_init));
        _System._ITuple2<BigInteger, Dafny.ISequence<DAM.Machine._IVal>> _let_tmp_rhs6 = DAM.Utils.__default.Extend<DAM.Machine._IVal>(_262_store, _341_val);
        BigInteger _342_addr = _let_tmp_rhs6.dtor__0;
        Dafny.ISequence<DAM.Machine._IVal> _343_store_k = _let_tmp_rhs6.dtor__1;
        DAM.Machine._IOutput _344_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_343_store_k, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _339_var__, DAM.Machine.Val.create_Ref(_342_addr)), _338_next), _265_stack));
        return _344_output;
      } else if (_source28.is_Read) {
        DAM.Syntax._IExpr _345___mcc_h19 = _source28.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _346___mcc_h20 = _source28.dtor_var__;
        DAM.Syntax._IStmt _347___mcc_h21 = _source28.dtor_next;
        DAM.Syntax._IStmt _348_next = _347___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _349_var__ = _346___mcc_h20;
        DAM.Syntax._IExpr _350_ref = _345___mcc_h19;
        DAM.Machine._IVal _351_val = (_262_store).Select((DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _350_ref))).dtor_addr);
        DAM.Machine._IOutput _352_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _349_var__, _351_val), _348_next), _265_stack));
        return _352_output;
      } else if (_source28.is_Write) {
        DAM.Syntax._IExpr _353___mcc_h22 = _source28.dtor_lvalue;
        DAM.Syntax._IExpr _354___mcc_h23 = _source28.dtor_rvalue;
        DAM.Syntax._IStmt _355___mcc_h24 = _source28.dtor_next;
        DAM.Syntax._IStmt _356_next = _355___mcc_h24;
        DAM.Syntax._IExpr _357_rhs = _354___mcc_h23;
        DAM.Syntax._IExpr _358_lhs = _353___mcc_h22;
        BigInteger _359_lval = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _358_lhs))).dtor_addr;
        DAM.Machine._IVal _360_rval = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _357_rhs));
        DAM.Machine._IOutput _361_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.Update(_262_store, _359_lval, _360_rval), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _356_next), _265_stack));
        return _361_output;
      } else if (_source28.is_Print) {
        DAM.Syntax._IExpr _362___mcc_h25 = _source28.dtor_Print_a0;
        DAM.Syntax._IStmt _363___mcc_h26 = _source28.dtor_next;
        DAM.Syntax._IStmt _364_next = _363___mcc_h26;
        DAM.Syntax._IExpr _365_expr = _362___mcc_h25;
        DAM.Machine._IVal _366_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _365_expr));
        DAM.Machine._IOutput _367_output = DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Print(_366_val), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _364_next), _265_stack));
        return _367_output;
      } else if (_source28.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _368___mcc_h27 = _source28.dtor_bound;
        DAM.Syntax._INeg _369___mcc_h28 = _source28.dtor_fix;
        DAM.Syntax._IStmt _370___mcc_h29 = _source28.dtor_body;
        DAM.Syntax._IStmt _371_body = _370___mcc_h29;
        DAM.Syntax._INeg _372_fix = _369___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _373_self = _368___mcc_h27;
        DAM.Machine._IVal _374_val = DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _264_stmt));
        DAM.Machine._IOutput _375_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _373_self, _374_val), _371_body), _265_stack));
        return _375_output;
      } else if (_source28.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _376___mcc_h30 = _source28.dtor_bound;
        DAM.Syntax._INeg _377___mcc_h31 = _source28.dtor_start;
        DAM.Syntax._IStmt _378___mcc_h32 = _source28.dtor_body;
        DAM.Syntax._IStmt _379_body = _378___mcc_h32;
        DAM.Syntax._INeg _380_start = _377___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _381_bound = _376___mcc_h30;
        DAM.Machine._IOutput _382_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_263_env, _381_bound, DAM.Machine.Val.create_Stack(_380_start, _265_stack)), _379_body), _265_stack));
        return _382_output;
      } else {
        DAM.Syntax._IExpr _383___mcc_h33 = _source28.dtor_stack;
        DAM.Syntax._INeg _384___mcc_h34 = _source28.dtor_oldstart;
        DAM.Syntax._IStmt _385___mcc_h35 = _source28.dtor_next;
        DAM.Syntax._IStmt _386_next = _385___mcc_h35;
        DAM.Syntax._IExpr _387_expr = _383___mcc_h33;
        DAM.Machine._IVal _388_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_263_env, _387_expr));
        DAM.Machine._IOutput _389_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_262_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_263_env, _386_next), (_388_val).dtor_stack));
        return _389_output;
      }
    }
    public static _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> Initial(DAM.Syntax._IStmt stmt) {
      return _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.FromElements(), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.FromElements(), stmt), DAM.Machine.Stack.create_Empty());
    }
    public static DAM.Dynamics._ITrace Run(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      DAM.Machine._IOutput _source39 = DAM.Dynamics.__default.Step(input);
      if (_source39.is_Raise) {
        DAM.Machine._IEvent _390___mcc_h0 = _source39.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _391___mcc_h1 = _source39.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _392_next = _391___mcc_h1;
        DAM.Machine._IEvent _393_evt = _390___mcc_h0;
        return new DAM.Dynamics.Trace__Lazy(() => { return new DAM.Dynamics.Trace_Stepping(_393_evt, _392_next, DAM.Dynamics.__default.Run(_392_next)); });
      } else {
        return DAM.Dynamics.Trace.create_Done();
      }
    }
    public static DAM.Utils._IOption<DAM.Dynamics._ITrace> RunSafe(DAM.Syntax._IStmt stmt) {
      DAM.Utils._IOption<DAM.Syntax._INeg> _394_valueOrError0 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), stmt);
      if ((_394_valueOrError0).IsFailure()) {
        return (_394_valueOrError0).PropagateFailure<DAM.Dynamics._ITrace>();
      } else {
        DAM.Syntax._INeg _395_end = (_394_valueOrError0).Extract();
        return DAM.Utils.Option<DAM.Dynamics._ITrace>.create_Some(DAM.Dynamics.__default.Run(DAM.Dynamics.__default.Initial(stmt)));
      }
    }
    public static DAM.Dynamics._ITrace RunUnsafe(DAM.Syntax._IStmt stmt) {
      return DAM.Dynamics.__default.Run(DAM.Dynamics.__default.Initial(stmt));
    }
    public static void PrintVal(DAM.Machine._IVal val) {
      DAM.Machine._IVal _source40 = val;
      if (_source40.is_Unit) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()\n")).ToVerbatimString(false));
      } else if (_source40.is_Bool) {
        bool _396___mcc_h0 = _source40.dtor_answer;
        bool _397_b = _396___mcc_h0;
        Dafny.Helpers.Print((_397_b));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      } else if (_source40.is_Int) {
        BigInteger _398___mcc_h2 = _source40.dtor_number;
        BigInteger _399_i = _398___mcc_h2;
        Dafny.Helpers.Print((_399_i));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      } else if (_source40.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _400___mcc_h4 = _source40.dtor_closure;
        Dafny.Helpers.Print((val));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      } else if (_source40.is_Ref) {
        BigInteger _401___mcc_h6 = _source40.dtor_addr;
        Dafny.Helpers.Print((val));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      } else {
        DAM.Syntax._INeg _402___mcc_h8 = _source40.dtor_start;
        DAM.Machine._IStack _403___mcc_h9 = _source40.dtor_stack;
        Dafny.Helpers.Print((val));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      }
    }
    public static void Interpret(DAM.Syntax._IStmt stmt, bool traced) {
      DAM.Utils._IOption<DAM.Syntax._INeg> _404_endOption;
      _404_endOption = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), stmt);
      if ((_404_endOption).is_None) {
        if (traced) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Statement fails to typecheck.\n")).ToVerbatimString(false));
        }
        return;
      }
      DAM.Syntax._INeg _405_end;
      _405_end = (_404_endOption).Extract();
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _406_input;
      _406_input = DAM.Dynamics.__default.Initial(stmt);
      while (true) {
        DAM.Machine._IOutput _source41 = DAM.Dynamics.__default.Step(_406_input);
        if (_source41.is_Raise) {
          DAM.Machine._IEvent _407___mcc_h0 = _source41.dtor_event;
          _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _408___mcc_h1 = _source41.dtor_next;
          _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _409_output = _408___mcc_h1;
          DAM.Machine._IEvent _410_evt = _407___mcc_h0;
          if (traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("event: ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_410_evt));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", state: ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_409_output));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
          } else {
            DAM.Machine._IEvent _source42 = _410_evt;
            if (_source42.is_Silent) {
            } else {
              DAM.Machine._IVal _411___mcc_h2 = _source42.dtor_Print_a0;
              DAM.Machine._IVal _412_val = _411___mcc_h2;
              DAM.Dynamics.__default.PrintVal(_412_val);
            }
          }
          _406_input = _409_output;
        } else {
          if (traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done.\n")).ToVerbatimString(false));
          }
          goto after_0;
        }
      continue_0:;
      }
    after_0:;
    }
    public static void Test() {
      DAM.Syntax._IExpr _413_fc;
      _413_fc = DAM.Syntax.Expr.create_Thunk(DAM.Syntax.Stmt.create_Func(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("y"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x")))));
      DAM.Syntax._IStmt _414_fv;
      _414_fv = DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f")));
      DAM.Syntax._IExpr _415_x1;
      _415_x1 = DAM.Syntax.Expr.create_Int(BigInteger.One);
      DAM.Syntax._IExpr _416_x2;
      _416_x2 = DAM.Syntax.Expr.create_Int(new BigInteger(2));
      DAM.Syntax._IExpr _417_z;
      _417_z = DAM.Syntax.Expr.create_Int(BigInteger.Zero);
      DAM.Syntax._IStmt _418_term;
      _418_term = DAM.Syntax.__default.Let(_415_x1, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.__default.Let(_413_fc, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.__default.Let(_416_x2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.Stmt.create_Call(_414_fv, _417_z))));
    }
  }

  public interface _ITrace {
    _ITrace _Get();
    bool is_Stepping { get; }
    bool is_Done { get; }
    DAM.Machine._IEvent dtor_Stepping_a0 { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a1 { get; }
    DAM.Dynamics._ITrace dtor_Stepping_a2 { get; }
    _ITrace DowncastClone();
  }
  public abstract class Trace : _ITrace {
    public Trace() {
    }
    private static readonly DAM.Dynamics._ITrace theDefault = new DAM.Dynamics.Trace__Lazy(() => { return create_Stepping(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()), DAM.Dynamics.Trace.Default()); });
    public static DAM.Dynamics._ITrace Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TYPE = new Dafny.TypeDescriptor<DAM.Dynamics._ITrace>(DAM.Dynamics.Trace.Default());
    public static Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TypeDescriptor() {
      return _TYPE;
    }
    public abstract _ITrace _Get();
    public static _ITrace create_Stepping(DAM.Machine._IEvent _a0, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1, DAM.Dynamics._ITrace _a2) {
      return new Trace_Stepping(_a0, _a1, _a2);
    }
    public static _ITrace create_Done() {
      return new Trace_Done();
    }
    public bool is_Stepping { get { return this is Trace_Stepping; } }
    public bool is_Done { get { return this is Trace_Done; } }
    public DAM.Machine._IEvent dtor_Stepping_a0 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a0;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a1 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a1;
      }
    }
    public DAM.Dynamics._ITrace dtor_Stepping_a2 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a2;
      }
    }
    public abstract _ITrace DowncastClone();
  }
  public class Trace__Lazy : Trace {
    public delegate _ITrace Computer();
    Computer c;
    _ITrace d;
    public Trace__Lazy(Computer c) : base() {
      this.c = c;
    }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new DAM.Dynamics.Trace__Lazy(() => _Get().DowncastClone());
    }
    public override _ITrace _Get() { if (c != null) { d = c(); c = null; } return d; }
    public override string ToString() { return _Get().ToString(); }
  }
  public class Trace_Stepping : Trace {
    public readonly DAM.Machine._IEvent _a0;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1;
    public readonly DAM.Dynamics._ITrace _a2;
    public Trace_Stepping(DAM.Machine._IEvent _a0, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1, DAM.Dynamics._ITrace _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Stepping(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Stepping;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Stepping";
    }
  }
  public class Trace_Done : Trace {
    public Trace_Done() : base() {
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Done();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Done;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Done";
    }
  }
} // end of namespace DAM.Dynamics


namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _419_i = BigInteger.Zero; _419_i < _hi0; _419_i++) {
        Dafny.ISequence<Dafny.Rune> _420_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_419_i));
        _420_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _420_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _421_i = BigInteger.Zero; _421_i < _hi1; _421_i++) {
        DAST._IModuleItem _source43 = ((mod).dtor_body).Select(_421_i);
        if (_source43.is_Module) {
          DAST._IModule _422___mcc_h0 = _source43.dtor_Module_a0;
          DAST._IModule _423_m = _422___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _424_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_423_m);
          _424_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _424_s_k);
        } else if (_source43.is_Class) {
          DAST._IClass _425___mcc_h1 = _source43.dtor_Class_a0;
          DAST._IClass _426_c = _425___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _427_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_426_c);
          _427_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _427_s_k);
        } else if (_source43.is_Trait) {
          DAST._ITrait _428___mcc_h2 = _source43.dtor_Trait_a0;
          DAST._ITrait _429_c = _428___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source43.is_Newtype) {
          DAST._INewtype _430___mcc_h3 = _source43.dtor_Newtype_a0;
          DAST._INewtype _431_n = _430___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _432___mcc_h4 = _source43.dtor_Datatype_a0;
          DAST._IDatatype _433_d = _432___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _434_i = BigInteger.Zero; _434_i < _hi2; _434_i++) {
        DAST._IMethod _source44 = ((c).dtor_body).Select(_434_i);
        DAST._IMethod _435___mcc_h0 = _source44;
        DAST._IMethod _436_m = _435___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _437_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_436_m);
        _437_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _437_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _438_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _438_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _438_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _438_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _438_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _439_i = BigInteger.Zero; _439_i < _hi3; _439_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_439_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _440_i = BigInteger.Zero; _440_i < _hi4; _440_i++) {
        Dafny.ISequence<Dafny.Rune> _441_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_440_i));
        _441_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _441_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source45 = st;
      if (_source45.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _442___mcc_h0 = _source45.dtor_name;
        DAST._IType _443___mcc_h1 = _source45.dtor_typ;
        DAST._IOptional<DAST._IExpression> _444___mcc_h2 = _source45.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Assign) {
        DAST._IAssignLhs _445___mcc_h6 = _source45.dtor_lhs;
        DAST._IExpression _446___mcc_h7 = _source45.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_If) {
        DAST._IExpression _447___mcc_h10 = _source45.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _448___mcc_h11 = _source45.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _449___mcc_h12 = _source45.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _450___mcc_h16 = _source45.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _451___mcc_h17 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_While) {
        DAST._IExpression _452___mcc_h20 = _source45.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _453___mcc_h21 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _454___mcc_h24 = _source45.dtor_boundName;
        DAST._IType _455___mcc_h25 = _source45.dtor_boundType;
        DAST._IExpression _456___mcc_h26 = _source45.dtor_over;
        Dafny.ISequence<DAST._IStatement> _457___mcc_h27 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Call) {
        DAST._IExpression _458___mcc_h32 = _source45.dtor_on;
        Dafny.ISequence<Dafny.Rune> _459___mcc_h33 = _source45.dtor_name;
        Dafny.ISequence<DAST._IType> _460___mcc_h34 = _source45.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _461___mcc_h35 = _source45.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _462___mcc_h36 = _source45.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Return) {
        DAST._IExpression _463___mcc_h42 = _source45.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source45.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _464___mcc_h44 = _source45.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _465___mcc_h46 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _466___mcc_h48 = _source45.dtor_Print_a0;
        DAST._IExpression _467_e = _466___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _468_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_467_e);
        _468_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _468_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source46 = e;
      if (_source46.is_Literal) {
        DAST._ILiteral _469___mcc_h0 = _source46.dtor_Literal_a0;
        DAST._ILiteral _470_l = _469___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_470_l);
        s = _out9;
      } else if (_source46.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _471___mcc_h2 = _source46.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _472___mcc_h4 = _source46.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _473___mcc_h6 = _source46.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _474___mcc_h8 = _source46.dtor_path;
        Dafny.ISequence<DAST._IType> _475___mcc_h9 = _source46.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _476___mcc_h10 = _source46.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _477___mcc_h14 = _source46.dtor_dims;
        DAST._IType _478___mcc_h15 = _source46.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _479___mcc_h18 = _source46.dtor_path;
        Dafny.ISequence<DAST._IType> _480___mcc_h19 = _source46.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _481___mcc_h20 = _source46.dtor_variant;
        bool _482___mcc_h21 = _source46.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _483___mcc_h22 = _source46.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Convert) {
        DAST._IExpression _484___mcc_h28 = _source46.dtor_value;
        DAST._IType _485___mcc_h29 = _source46.dtor_from;
        DAST._IType _486___mcc_h30 = _source46.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SeqConstruct) {
        DAST._IExpression _487___mcc_h34 = _source46.dtor_length;
        DAST._IExpression _488___mcc_h35 = _source46.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _489___mcc_h38 = _source46.dtor_elements;
        DAST._IType _490___mcc_h39 = _source46.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _491___mcc_h42 = _source46.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _492___mcc_h44 = _source46.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Ite) {
        DAST._IExpression _493___mcc_h46 = _source46.dtor_cond;
        DAST._IExpression _494___mcc_h47 = _source46.dtor_thn;
        DAST._IExpression _495___mcc_h48 = _source46.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_UnOp) {
        DAST._IUnaryOp _496___mcc_h52 = _source46.dtor_unOp;
        DAST._IExpression _497___mcc_h53 = _source46.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_BinOp) {
        DAST._IBinOp _498___mcc_h56 = _source46.dtor_op;
        DAST._IExpression _499___mcc_h57 = _source46.dtor_left;
        DAST._IExpression _500___mcc_h58 = _source46.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_ArrayLen) {
        DAST._IExpression _501___mcc_h62 = _source46.dtor_expr;
        BigInteger _502___mcc_h63 = _source46.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Select) {
        DAST._IExpression _503___mcc_h66 = _source46.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _504___mcc_h67 = _source46.dtor_field;
        bool _505___mcc_h68 = _source46.dtor_isConstant;
        bool _506___mcc_h69 = _source46.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SelectFn) {
        DAST._IExpression _507___mcc_h74 = _source46.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _508___mcc_h75 = _source46.dtor_field;
        bool _509___mcc_h76 = _source46.dtor_onDatatype;
        bool _510___mcc_h77 = _source46.dtor_isStatic;
        BigInteger _511___mcc_h78 = _source46.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Index) {
        DAST._IExpression _512___mcc_h84 = _source46.dtor_expr;
        DAST._ICollKind _513___mcc_h85 = _source46.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _514___mcc_h86 = _source46.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_IndexRange) {
        DAST._IExpression _515___mcc_h90 = _source46.dtor_expr;
        bool _516___mcc_h91 = _source46.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _517___mcc_h92 = _source46.dtor_low;
        DAST._IOptional<DAST._IExpression> _518___mcc_h93 = _source46.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_TupleSelect) {
        DAST._IExpression _519___mcc_h98 = _source46.dtor_expr;
        BigInteger _520___mcc_h99 = _source46.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Call) {
        DAST._IExpression _521___mcc_h102 = _source46.dtor_on;
        Dafny.ISequence<Dafny.Rune> _522___mcc_h103 = _source46.dtor_name;
        Dafny.ISequence<DAST._IType> _523___mcc_h104 = _source46.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _524___mcc_h105 = _source46.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _525___mcc_h110 = _source46.dtor_params;
        DAST._IType _526___mcc_h111 = _source46.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _527___mcc_h112 = _source46.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _528___mcc_h116 = _source46.dtor_values;
        DAST._IType _529___mcc_h117 = _source46.dtor_retType;
        DAST._IExpression _530___mcc_h118 = _source46.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _531___mcc_h122 = _source46.dtor_name;
        DAST._IType _532___mcc_h123 = _source46.dtor_typ;
        DAST._IExpression _533___mcc_h124 = _source46.dtor_value;
        DAST._IExpression _534___mcc_h125 = _source46.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_Apply) {
        DAST._IExpression _535___mcc_h130 = _source46.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _536___mcc_h131 = _source46.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_TypeTest) {
        DAST._IExpression _537___mcc_h134 = _source46.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _538___mcc_h135 = _source46.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _539___mcc_h136 = _source46.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_InitializationValue) {
        DAST._IType _540___mcc_h140 = _source46.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SetBoundedPool) {
        DAST._IExpression _541___mcc_h142 = _source46.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source46.is_SeqBoundedPool) {
        DAST._IExpression _542___mcc_h144 = _source46.dtor_of;
        bool _543___mcc_h145 = _source46.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _544___mcc_h148 = _source46.dtor_lo;
        DAST._IExpression _545___mcc_h149 = _source46.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source47 = l;
      if (_source47.is_BoolLiteral) {
        bool _546___mcc_h0 = _source47.dtor_BoolLiteral_a0;
        bool _547_b = _546___mcc_h0;
        s = ((_547_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source47.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _548___mcc_h1 = _source47.dtor_IntLiteral_a0;
        DAST._IType _549___mcc_h2 = _source47.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _550_i = _548___mcc_h1;
        s = _550_i;
      } else if (_source47.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _551___mcc_h3 = _source47.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _552___mcc_h4 = _source47.dtor_DecLiteral_a1;
        DAST._IType _553___mcc_h5 = _source47.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _554_r = _552___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _555_l = _551___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_555_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _554_r);
      } else if (_source47.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _556___mcc_h6 = _source47.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _557_s_k = _556___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _557_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source47.is_CharLiteral) {
        Dafny.Rune _558___mcc_h7 = _source47.dtor_CharLiteral_a0;
        Dafny.Rune _559_c = _558___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_559_c);
      } else {
        DAST._IType _560___mcc_h8 = _source47.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {

  public partial class __default {
    public static DAM.Utils._IOption<BigInteger> ToNat(Dafny.ISequence<Dafny.Rune> str) {
      Dafny.IMap<Dafny.Rune, BigInteger> _561_charToDigit = Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return DAM.Utils.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Dafny.Rune _562_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        DAM.Utils._IOption<BigInteger> _563_valueOrError0 = (((_561_charToDigit).Contains(_562_c)) ? (DAM.Utils.Option<BigInteger>.create_Some(Dafny.Map<Dafny.Rune, BigInteger>.Select(_561_charToDigit, _562_c))) : (DAM.Utils.Option<BigInteger>.create_None()));
        if ((_563_valueOrError0).IsFailure()) {
          return (_563_valueOrError0).PropagateFailure<BigInteger>();
        } else {
          BigInteger _564_d = (_563_valueOrError0).Extract();
          DAM.Utils._IOption<BigInteger> _565_valueOrError1 = ResolvedDesugaredExecutableDafnyPlugin.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)));
          if ((_565_valueOrError1).IsFailure()) {
            return (_565_valueOrError1).PropagateFailure<BigInteger>();
          } else {
            BigInteger _566_rest = (_565_valueOrError1).Extract();
            return DAM.Utils.Option<BigInteger>.create_Some(((_566_rest) * (new BigInteger(10))) + (_564_d));
          }
        }
      }
    }
    public static DAM.Utils._IOption<BigInteger> ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        DAM.Utils._IOption<BigInteger> _source48 = ResolvedDesugaredExecutableDafnyPlugin.__default.ToNat((str).Drop(BigInteger.One));
        if (_source48.is_None) {
          return DAM.Utils.Option<BigInteger>.create_None();
        } else {
          BigInteger _567___mcc_h0 = _source48.dtor_value;
          BigInteger _568_i = _567___mcc_h0;
          return DAM.Utils.Option<BigInteger>.create_Some((BigInteger.Zero) - (_568_i));
        }
      } else {
        return ResolvedDesugaredExecutableDafnyPlugin.__default.ToNat(str);
      }
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static DAM.Syntax._IPos PolarizePos(DAST._IType t) {
      DAM.Syntax._IPos p = DAM.Syntax.Pos.Default();
      DAST._IType _source49 = t;
      if (_source49.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _569___mcc_h0 = _source49.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _570___mcc_h1 = _source49.dtor_typeArgs;
        DAST._IResolvedType _571___mcc_h2 = _source49.dtor_resolved;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source49.is_Nullable) {
        DAST._IType _572___mcc_h6 = _source49.dtor_Nullable_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source49.is_Tuple) {
        Dafny.ISequence<DAST._IType> _573___mcc_h8 = _source49.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source49.is_Array) {
        DAST._IType _574___mcc_h10 = _source49.dtor_element;
        BigInteger _575___mcc_h11 = _source49.dtor_dims;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source49.is_Seq) {
        DAST._IType _576___mcc_h14 = _source49.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source49.is_Set) {
        DAST._IType _577___mcc_h16 = _source49.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source49.is_Multiset) {
        DAST._IType _578___mcc_h18 = _source49.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source49.is_Map) {
        DAST._IType _579___mcc_h20 = _source49.dtor_key;
        DAST._IType _580___mcc_h21 = _source49.dtor_value;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source49.is_Arrow) {
        Dafny.ISequence<DAST._IType> _581___mcc_h24 = _source49.dtor_args;
        DAST._IType _582___mcc_h25 = _source49.dtor_result;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source49.is_Primitive) {
        DAST._IPrimitive _583___mcc_h28 = _source49.dtor_Primitive_a0;
        DAST._IPrimitive _source50 = _583___mcc_h28;
        if (_source50.is_Int) {
          p = DAM.Syntax.Pos.create_Int();
          return p;
        } else if (_source50.is_Real) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source50.is_String) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source50.is_Bool) {
          p = DAM.Syntax.Pos.create_Bool();
          return p;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        }
      } else if (_source49.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _584___mcc_h30 = _source49.dtor_Passthrough_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else {
        Dafny.ISequence<Dafny.Rune> _585___mcc_h32 = _source49.dtor_TypeArg_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      }
      return p;
    }
    public static DAM.Syntax._IStmt EmitModule(DAST._IModule m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _586_members;
      _586_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi5 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _587_i = BigInteger.Zero; _587_i < _hi5; _587_i++) {
        DAST._IModuleItem _source51 = ((m).dtor_body).Select(_587_i);
        if (_source51.is_Module) {
          DAST._IModule _588___mcc_h0 = _source51.dtor_Module_a0;
          DAST._IModule _589_m = _588___mcc_h0;
          DAM.Syntax._IStmt _590_mod;
          DAM.Syntax._IStmt _out10;
          _out10 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule(_589_m);
          _590_mod = _out10;
          _586_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_586_members, (_589_m).dtor_name, _590_mod);
        } else if (_source51.is_Class) {
          DAST._IClass _591___mcc_h2 = _source51.dtor_Class_a0;
          DAST._IClass _592_c = _591___mcc_h2;
          DAM.Syntax._IStmt _593_cls;
          DAM.Syntax._IStmt _out11;
          _out11 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitClass(_592_c);
          _593_cls = _out11;
          _586_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_586_members, (_592_c).dtor_name, _593_cls);
        } else if (_source51.is_Trait) {
          DAST._ITrait _594___mcc_h4 = _source51.dtor_Trait_a0;
          goto continue_0;
        } else if (_source51.is_Newtype) {
          DAST._INewtype _595___mcc_h6 = _source51.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _596___mcc_h8 = _source51.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      s = DAM.Syntax.Stmt.create_Record(_586_members);
      return s;
    }
    public static DAM.Syntax._IStmt EmitClass(DAST._IClass c) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _597_fields;
      _597_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi6 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _598_i = BigInteger.Zero; _598_i < _hi6; _598_i++) {
        DAST._IMethod _source52 = ((c).dtor_body).Select(_598_i);
        DAST._IMethod _599___mcc_h0 = _source52;
        DAST._IMethod _600_m = _599___mcc_h0;
        DAM.Syntax._IStmt _601_meth;
        DAM.Syntax._IStmt _out12;
        _out12 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitMethod(_600_m);
        _601_meth = _out12;
        _597_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_597_fields, (_600_m).dtor_name, _601_meth);
      }
      s = DAM.Syntax.Stmt.create_Record(_597_fields);
      return s;
    }
    public static DAM.Syntax._IStmt EmitMethod(DAST._IMethod m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAM.Syntax._IStmt _602_body;
      DAM.Syntax._IStmt _out13;
      _out13 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock((m).dtor_body);
      _602_body = _out13;
      s = DAM.Syntax.Stmt.create_LetCS(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), DAM.Syntax.__default.Command(), _602_body);
      DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source53 = (m).dtor_outVars;
      if (_source53.is_Some) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _603___mcc_h0 = _source53.dtor_Some_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _604_outs = _603___mcc_h0;
        {
          BigInteger _hi7 = new BigInteger((_604_outs).Count);
          for (BigInteger _605_i = BigInteger.Zero; _605_i < _hi7; _605_i++) {
            Dafny.ISequence<Dafny.Rune> _source54 = (_604_outs).Select(((new BigInteger((_604_outs).Count)) - (_605_i)) - (BigInteger.One));
            Dafny.ISequence<Dafny.Rune> _606___mcc_h1 = _source54;
            Dafny.ISequence<Dafny.Rune> _607_ret = _606___mcc_h1;
            if (!((_605_i) < (new BigInteger(((m).dtor_outTypes).Count)))) {
              throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(114,12): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
            }
            DAM.Syntax._IPos _608_cod;
            DAM.Syntax._IPos _out14;
            _out14 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(((m).dtor_outTypes).Select(_605_i));
            _608_cod = _out14;
            s = DAM.Syntax.Stmt.create_Func(_607_ret, DAM.Syntax.Pos.create_Ref(_608_cod), s);
          }
        }
      } else {
      }
      BigInteger _hi8 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _609_i = BigInteger.Zero; _609_i < _hi8; _609_i++) {
        DAST._IFormal _source55 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_609_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _610___mcc_h2 = _source55.dtor_name;
        DAST._IType _611___mcc_h3 = _source55.dtor_typ;
        DAST._IType _612_dom = _611___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _613_arg = _610___mcc_h2;
        DAM.Syntax._IPos _614_dom;
        DAM.Syntax._IPos _out15;
        _out15 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(_612_dom);
        _614_dom = _out15;
        s = DAM.Syntax.Stmt.create_Func(_613_arg, DAM.Syntax.Pos.create_Ref(_614_dom), s);
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitExpr(DAST._IExpression e) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAST._IExpression _source56 = e;
      if (_source56.is_Literal) {
        DAST._ILiteral _615___mcc_h0 = _source56.dtor_Literal_a0;
        DAST._ILiteral _source57 = _615___mcc_h0;
        if (_source57.is_BoolLiteral) {
          bool _616___mcc_h2 = _source57.dtor_BoolLiteral_a0;
          bool _617_b = _616___mcc_h2;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(_617_b));
          return s;
        } else if (_source57.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _618___mcc_h4 = _source57.dtor_IntLiteral_a0;
          DAST._IType _619___mcc_h5 = _source57.dtor_IntLiteral_a1;
          Dafny.ISequence<Dafny.Rune> _620_i = _618___mcc_h4;
          {
            DAM.Utils._IOption<BigInteger> _source58 = ResolvedDesugaredExecutableDafnyPlugin.__default.ToInt(_620_i, new Dafny.Rune('-'));
            if (_source58.is_None) {
              {
                Microsoft.Dafny.Compilers.WrapException.Throw();
                s = DAM.Syntax.__default.Skip();
                return s;
              }
            } else {
              BigInteger _621___mcc_h206 = _source58.dtor_value;
              BigInteger _622_i = _621___mcc_h206;
              s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(_622_i));
              return s;
            }
          }
        } else if (_source57.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _623___mcc_h8 = _source57.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _624___mcc_h9 = _source57.dtor_DecLiteral_a1;
          DAST._IType _625___mcc_h10 = _source57.dtor_DecLiteral_a2;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source57.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _626___mcc_h14 = _source57.dtor_StringLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source57.is_CharLiteral) {
          Dafny.Rune _627___mcc_h16 = _source57.dtor_CharLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          DAST._IType _628___mcc_h18 = _source57.dtor_Null_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source56.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _629___mcc_h20 = _source56.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _630_v = _629___mcc_h20;
        s = DAM.Syntax.Stmt.create_Read(DAM.Syntax.Expr.create_Var(_630_v), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"))));
        return s;
      } else if (_source56.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _631___mcc_h22 = _source56.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _632_path = _631___mcc_h22;
        if (!((new BigInteger((_632_path).Count)).Sign == 1)) {
          throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(148,8): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
        }
        s = DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(((_632_path).Select(BigInteger.Zero))));
        BigInteger _hi9 = new BigInteger((_632_path).Count);
        for (BigInteger _633_i = BigInteger.One; _633_i < _hi9; _633_i++) {
          s = DAM.Syntax.Stmt.create_Select(s, ((_632_path).Select(_633_i)));
        }
      } else if (_source56.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _634___mcc_h24 = _source56.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _635___mcc_h26 = _source56.dtor_path;
        Dafny.ISequence<DAST._IType> _636___mcc_h27 = _source56.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _637___mcc_h28 = _source56.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _638___mcc_h32 = _source56.dtor_dims;
        DAST._IType _639___mcc_h33 = _source56.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _640___mcc_h36 = _source56.dtor_path;
        Dafny.ISequence<DAST._IType> _641___mcc_h37 = _source56.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _642___mcc_h38 = _source56.dtor_variant;
        bool _643___mcc_h39 = _source56.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _644___mcc_h40 = _source56.dtor_contents;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_Convert) {
        DAST._IExpression _645___mcc_h46 = _source56.dtor_value;
        DAST._IType _646___mcc_h47 = _source56.dtor_from;
        DAST._IType _647___mcc_h48 = _source56.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_SeqConstruct) {
        DAST._IExpression _648___mcc_h52 = _source56.dtor_length;
        DAST._IExpression _649___mcc_h53 = _source56.dtor_elem;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _650___mcc_h56 = _source56.dtor_elements;
        DAST._IType _651___mcc_h57 = _source56.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _652___mcc_h60 = _source56.dtor_elements;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _653___mcc_h62 = _source56.dtor_mapElems;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_This) {
        s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")));
        return s;
      } else if (_source56.is_Ite) {
        DAST._IExpression _654___mcc_h64 = _source56.dtor_cond;
        DAST._IExpression _655___mcc_h65 = _source56.dtor_thn;
        DAST._IExpression _656___mcc_h66 = _source56.dtor_els;
        DAST._IExpression _657_els = _656___mcc_h66;
        DAST._IExpression _658_thn = _655___mcc_h65;
        DAST._IExpression _659_cond = _654___mcc_h64;
        DAM.Syntax._IStmt _660_cond;
        DAM.Syntax._IStmt _out16;
        _out16 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_659_cond);
        _660_cond = _out16;
        DAM.Syntax._IStmt _661_thn;
        DAM.Syntax._IStmt _out17;
        _out17 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_658_thn);
        _661_thn = _out17;
        DAM.Syntax._IStmt _662_els;
        DAM.Syntax._IStmt _out18;
        _out18 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_657_els);
        _662_els = _out18;
        s = DAM.Syntax.Stmt.create_Bind(_660_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _661_thn, _662_els));
        return s;
      } else if (_source56.is_UnOp) {
        DAST._IUnaryOp _663___mcc_h70 = _source56.dtor_unOp;
        DAST._IExpression _664___mcc_h71 = _source56.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_BinOp) {
        DAST._IBinOp _665___mcc_h74 = _source56.dtor_op;
        DAST._IExpression _666___mcc_h75 = _source56.dtor_left;
        DAST._IExpression _667___mcc_h76 = _source56.dtor_right;
        DAST._IExpression _668_rhs = _667___mcc_h76;
        DAST._IExpression _669_lhs = _666___mcc_h75;
        DAST._IBinOp _670_op = _665___mcc_h74;
        DAM.Syntax._IStmt _671_lhs;
        DAM.Syntax._IStmt _out19;
        _out19 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_669_lhs);
        _671_lhs = _out19;
        DAM.Syntax._IStmt _672_rhs;
        DAM.Syntax._IStmt _out20;
        _out20 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_668_rhs);
        _672_rhs = _out20;
        DAM.Syntax._IExpr _673_lvar;
        _673_lvar = DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_lhs"));
        DAM.Syntax._IExpr _674_rvar;
        _674_rvar = DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_rhs"));
        DAM.Syntax._IStmt _675_end = DAM.Syntax.Stmt.Default();
        DAST._IBinOp _source59 = _670_op;
        if (_source59.is_Eq) {
          bool _676___mcc_h207 = _source59.dtor_referential;
          bool _677___mcc_h208 = _source59.dtor_nullable;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_Neq) {
          bool _678___mcc_h211 = _source59.dtor_referential;
          bool _679___mcc_h212 = _source59.dtor_nullable;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_Div) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_EuclidianDiv) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_Mod) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_EuclidianMod) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_Implies) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_In) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_NotIn) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_SetDifference) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else if (_source59.is_Concat) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _675_end = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _680___mcc_h215 = _source59.dtor_Passthrough_a0;
          if (object.Equals(_680___mcc_h215, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
            _675_end = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Plus(_673_lvar, _674_rvar));
          } else if (object.Equals(_680___mcc_h215, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
            _675_end = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_LT(_673_lvar, _674_rvar));
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            _675_end = DAM.Syntax.__default.Skip();
          }
        }
        s = DAM.Syntax.Stmt.create_Bind(_671_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_lhs"), DAM.Syntax.Stmt.create_Bind(_672_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_rhs"), _675_end));
        return s;
      } else if (_source56.is_ArrayLen) {
        DAST._IExpression _681___mcc_h80 = _source56.dtor_expr;
        BigInteger _682___mcc_h81 = _source56.dtor_dim;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_Select) {
        DAST._IExpression _683___mcc_h84 = _source56.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _684___mcc_h85 = _source56.dtor_field;
        bool _685___mcc_h86 = _source56.dtor_isConstant;
        bool _686___mcc_h87 = _source56.dtor_onDatatype;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_SelectFn) {
        DAST._IExpression _687___mcc_h92 = _source56.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _688___mcc_h93 = _source56.dtor_field;
        bool _689___mcc_h94 = _source56.dtor_onDatatype;
        bool _690___mcc_h95 = _source56.dtor_isStatic;
        BigInteger _691___mcc_h96 = _source56.dtor_arity;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_Index) {
        DAST._IExpression _692___mcc_h102 = _source56.dtor_expr;
        DAST._ICollKind _693___mcc_h103 = _source56.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _694___mcc_h104 = _source56.dtor_indices;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_IndexRange) {
        DAST._IExpression _695___mcc_h108 = _source56.dtor_expr;
        bool _696___mcc_h109 = _source56.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _697___mcc_h110 = _source56.dtor_low;
        DAST._IOptional<DAST._IExpression> _698___mcc_h111 = _source56.dtor_high;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_TupleSelect) {
        DAST._IExpression _699___mcc_h116 = _source56.dtor_expr;
        BigInteger _700___mcc_h117 = _source56.dtor_index;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_Call) {
        DAST._IExpression _701___mcc_h120 = _source56.dtor_on;
        Dafny.ISequence<Dafny.Rune> _702___mcc_h121 = _source56.dtor_name;
        Dafny.ISequence<DAST._IType> _703___mcc_h122 = _source56.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _704___mcc_h123 = _source56.dtor_args;
        Dafny.ISequence<Dafny.Rune> _source60 = _702___mcc_h121;
        Dafny.ISequence<Dafny.Rune> _705___mcc_h128 = _source60;
        Dafny.ISequence<DAST._IExpression> _706_args = _704___mcc_h123;
        Dafny.ISequence<Dafny.Rune> _707_meth = _705___mcc_h128;
        DAST._IExpression _708_obj = _701___mcc_h120;
        DAM.Syntax._IStmt _out21;
        _out21 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_708_obj);
        s = _out21;
        s = DAM.Syntax.Stmt.create_Select(s, _707_meth);
        BigInteger _hi10 = new BigInteger((_706_args).Count);
        for (BigInteger _709_i = BigInteger.Zero; _709_i < _hi10; _709_i++) {
          DAM.Syntax._IStmt _710_arg;
          DAM.Syntax._IStmt _out22;
          _out22 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr((_706_args).Select(_709_i));
          _710_arg = _out22;
          s = DAM.Syntax.Stmt.create_Bind(_710_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(s, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
        }
      } else if (_source56.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _711___mcc_h130 = _source56.dtor_params;
        DAST._IType _712___mcc_h131 = _source56.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _713___mcc_h132 = _source56.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _714___mcc_h136 = _source56.dtor_values;
        DAST._IType _715___mcc_h137 = _source56.dtor_retType;
        DAST._IExpression _716___mcc_h138 = _source56.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _717___mcc_h142 = _source56.dtor_name;
        DAST._IType _718___mcc_h143 = _source56.dtor_typ;
        DAST._IExpression _719___mcc_h144 = _source56.dtor_value;
        DAST._IExpression _720___mcc_h145 = _source56.dtor_iifeBody;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_Apply) {
        DAST._IExpression _721___mcc_h150 = _source56.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _722___mcc_h151 = _source56.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_TypeTest) {
        DAST._IExpression _723___mcc_h154 = _source56.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _724___mcc_h155 = _source56.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _725___mcc_h156 = _source56.dtor_variant;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_InitializationValue) {
        DAST._IType _726___mcc_h160 = _source56.dtor_typ;
        DAST._IType _source61 = _726___mcc_h160;
        if (_source61.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _727___mcc_h162 = _source61.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _728___mcc_h163 = _source61.dtor_typeArgs;
          DAST._IResolvedType _729___mcc_h164 = _source61.dtor_resolved;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source61.is_Nullable) {
          DAST._IType _730___mcc_h168 = _source61.dtor_Nullable_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source61.is_Tuple) {
          Dafny.ISequence<DAST._IType> _731___mcc_h170 = _source61.dtor_Tuple_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source61.is_Array) {
          DAST._IType _732___mcc_h172 = _source61.dtor_element;
          BigInteger _733___mcc_h173 = _source61.dtor_dims;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source61.is_Seq) {
          DAST._IType _734___mcc_h176 = _source61.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source61.is_Set) {
          DAST._IType _735___mcc_h178 = _source61.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source61.is_Multiset) {
          DAST._IType _736___mcc_h180 = _source61.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source61.is_Map) {
          DAST._IType _737___mcc_h182 = _source61.dtor_key;
          DAST._IType _738___mcc_h183 = _source61.dtor_value;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source61.is_Arrow) {
          Dafny.ISequence<DAST._IType> _739___mcc_h186 = _source61.dtor_args;
          DAST._IType _740___mcc_h187 = _source61.dtor_result;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source61.is_Primitive) {
          DAST._IPrimitive _741___mcc_h190 = _source61.dtor_Primitive_a0;
          DAST._IPrimitive _source62 = _741___mcc_h190;
          if (_source62.is_Int) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
            return s;
          } else if (_source62.is_Real) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source62.is_String) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source62.is_Bool) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
            return s;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          }
        } else if (_source61.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _742___mcc_h192 = _source61.dtor_Passthrough_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _743___mcc_h194 = _source61.dtor_TypeArg_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source56.is_BoolBoundedPool) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_SetBoundedPool) {
        DAST._IExpression _744___mcc_h196 = _source56.dtor_of;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source56.is_SeqBoundedPool) {
        DAST._IExpression _745___mcc_h198 = _source56.dtor_of;
        bool _746___mcc_h199 = _source56.dtor_includeDuplicates;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else {
        DAST._IExpression _747___mcc_h202 = _source56.dtor_lo;
        DAST._IExpression _748___mcc_h203 = _source56.dtor_hi;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitBlock(Dafny.ISequence<DAST._IStatement> block) {
      DAM.Syntax._IStmt st = DAM.Syntax.Stmt.Default();
      if ((new BigInteger((block).Count)).Sign != 1) {
        st = DAM.Syntax.__default.Skip();
        return st;
      }
      Dafny.ISequence<DAST._IStatement> _749_next;
      _749_next = (block).Drop(BigInteger.One);
      DAST._IStatement _source63 = (block).Select(BigInteger.Zero);
      if (_source63.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _750___mcc_h0 = _source63.dtor_name;
        DAST._IType _751___mcc_h1 = _source63.dtor_typ;
        DAST._IOptional<DAST._IExpression> _752___mcc_h2 = _source63.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _753_init = _752___mcc_h2;
        DAST._IType _754_ty = _751___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _755_var__ = _750___mcc_h0;
        DAM.Syntax._IStmt _756_init;
        DAM.Syntax._IStmt _out23;
        _out23 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitRHS(_754_ty, _753_init);
        _756_init = _out23;
        DAM.Syntax._IStmt _757_next;
        DAM.Syntax._IStmt _out24;
        _out24 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_749_next);
        _757_next = _out24;
        st = DAM.Syntax.Stmt.create_Bind(_756_init, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _755_var__, _757_next));
        return st;
      } else if (_source63.is_Assign) {
        DAST._IAssignLhs _758___mcc_h6 = _source63.dtor_lhs;
        DAST._IExpression _759___mcc_h7 = _source63.dtor_value;
        DAST._IExpression _760_rhs = _759___mcc_h7;
        DAST._IAssignLhs _761_lhs = _758___mcc_h6;
        {
          DAM.Syntax._IStmt _762_rhs;
          DAM.Syntax._IStmt _out25;
          _out25 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_760_rhs);
          _762_rhs = _out25;
          DAM.Syntax._IStmt _763_next;
          DAM.Syntax._IStmt _out26;
          _out26 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_749_next);
          _763_next = _out26;
          DAST._IAssignLhs _source64 = _761_lhs;
          if (_source64.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _764___mcc_h50 = _source64.dtor_Ident_a0;
            Dafny.ISequence<Dafny.Rune> _source65 = _764___mcc_h50;
            Dafny.ISequence<Dafny.Rune> _765___mcc_h52 = _source65;
            Dafny.ISequence<Dafny.Rune> _766_v = _765___mcc_h52;
            st = DAM.Syntax.Stmt.create_Bind(_762_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Write(DAM.Syntax.Expr.create_Var(_766_v), DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _763_next));
            return st;
          } else if (_source64.is_Select) {
            DAST._IExpression _767___mcc_h54 = _source64.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _768___mcc_h55 = _source64.dtor_field;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          } else {
            DAST._IExpression _769___mcc_h58 = _source64.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _770___mcc_h59 = _source64.dtor_indices;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source63.is_If) {
        DAST._IExpression _771___mcc_h10 = _source63.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _772___mcc_h11 = _source63.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _773___mcc_h12 = _source63.dtor_els;
        Dafny.ISequence<DAST._IStatement> _774_els = _773___mcc_h12;
        Dafny.ISequence<DAST._IStatement> _775_thn = _772___mcc_h11;
        DAST._IExpression _776_cond = _771___mcc_h10;
        DAM.Syntax._IStmt _777_cond;
        DAM.Syntax._IStmt _out27;
        _out27 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_776_cond);
        _777_cond = _out27;
        DAM.Syntax._IStmt _778_thn;
        DAM.Syntax._IStmt _out28;
        _out28 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_775_thn);
        _778_thn = _out28;
        DAM.Syntax._IStmt _779_els;
        DAM.Syntax._IStmt _out29;
        _out29 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_774_els);
        _779_els = _out29;
        DAM.Syntax._IStmt _780_next;
        DAM.Syntax._IStmt _out30;
        _out30 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_749_next);
        _780_next = _out30;
        st = DAM.Syntax.__default.Then(DAM.Syntax.Stmt.create_Bind(_777_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _778_thn, _779_els)), _780_next);
      } else if (_source63.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _781___mcc_h16 = _source63.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _782___mcc_h17 = _source63.dtor_body;
        Dafny.ISequence<DAST._IStatement> _783_stmt = _782___mcc_h17;
        Dafny.ISequence<Dafny.Rune> _784_lab = _781___mcc_h16;
        DAM.Syntax._IStmt _785_block;
        DAM.Syntax._IStmt _out31;
        _out31 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(Dafny.Sequence<DAST._IStatement>.Concat(_783_stmt, _749_next));
        _785_block = _out31;
        st = DAM.Syntax.Stmt.create_LetCS(_784_lab, DAM.Syntax.__default.Command(), _785_block);
        return st;
      } else if (_source63.is_While) {
        DAST._IExpression _786___mcc_h20 = _source63.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _787___mcc_h21 = _source63.dtor_body;
        Dafny.ISequence<DAST._IStatement> _788_body = _787___mcc_h21;
        DAST._IExpression _789_guard = _786___mcc_h20;
        DAM.Syntax._IStmt _790_guard;
        DAM.Syntax._IStmt _out32;
        _out32 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_789_guard);
        _790_guard = _out32;
        DAM.Syntax._IStmt _791_body;
        DAM.Syntax._IStmt _out33;
        _out33 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_788_body);
        _791_body = _out33;
        DAM.Syntax._IStmt _792_next;
        DAM.Syntax._IStmt _out34;
        _out34 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_749_next);
        _792_next = _out34;
        st = DAM.Syntax.__default.While(_790_guard, _791_body, _792_next);
      } else if (_source63.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _793___mcc_h24 = _source63.dtor_boundName;
        DAST._IType _794___mcc_h25 = _source63.dtor_boundType;
        DAST._IExpression _795___mcc_h26 = _source63.dtor_over;
        Dafny.ISequence<DAST._IStatement> _796___mcc_h27 = _source63.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source63.is_Call) {
        DAST._IExpression _797___mcc_h32 = _source63.dtor_on;
        Dafny.ISequence<Dafny.Rune> _798___mcc_h33 = _source63.dtor_name;
        Dafny.ISequence<DAST._IType> _799___mcc_h34 = _source63.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _800___mcc_h35 = _source63.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _801___mcc_h36 = _source63.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _802_outs = _801___mcc_h36;
        Dafny.ISequence<DAST._IExpression> _803_args = _800___mcc_h35;
        Dafny.ISequence<Dafny.Rune> _804_meth = _798___mcc_h33;
        DAST._IExpression _805_obj = _797___mcc_h32;
        {
          DAM.Syntax._IStmt _806_obj;
          DAM.Syntax._IStmt _out35;
          _out35 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_805_obj);
          _806_obj = _out35;
          st = DAM.Syntax.Stmt.create_Select(_806_obj, _804_meth);
          BigInteger _hi11 = new BigInteger((_803_args).Count);
          for (BigInteger _807_i = BigInteger.Zero; _807_i < _hi11; _807_i++) {
            DAM.Syntax._IStmt _808_arg;
            DAM.Syntax._IStmt _out36;
            _out36 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr((_803_args).Select(_807_i));
            _808_arg = _out36;
            st = DAM.Syntax.Stmt.create_Bind(_808_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
          }
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source66 = _802_outs;
          if (_source66.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _809___mcc_h62 = _source66.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _810_outs = _809___mcc_h62;
            BigInteger _hi12 = new BigInteger((_810_outs).Count);
            for (BigInteger _811_i = BigInteger.Zero; _811_i < _hi12; _811_i++) {
              st = DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(((_810_outs).Select(_811_i))));
            }
          } else {
          }
          DAM.Syntax._IStmt _812_next;
          DAM.Syntax._IStmt _out37;
          _out37 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_749_next);
          _812_next = _out37;
          st = DAM.Syntax.__default.Then(st, _812_next);
        }
      } else if (_source63.is_Return) {
        DAST._IExpression _813___mcc_h42 = _source63.dtor_expr;
        DAST._IExpression _814_expr = _813___mcc_h42;
        DAM.Syntax._IStmt _815_ret;
        DAM.Syntax._IStmt _out38;
        _out38 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_814_expr);
        _815_ret = _out38;
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), _815_ret);
        return st;
      } else if (_source63.is_EarlyReturn) {
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
        return st;
      } else if (_source63.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _816___mcc_h44 = _source63.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _817_lab = _816___mcc_h44;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source67 = _817_lab;
          if (_source67.is_Some) {
            Dafny.ISequence<Dafny.Rune> _818___mcc_h63 = _source67.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _819_lab = _818___mcc_h63;
            st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(_819_lab), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
            return st;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source63.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _820___mcc_h46 = _source63.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source63.is_JumpTailCallStart) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source63.is_Halt) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else {
        DAST._IExpression _821___mcc_h48 = _source63.dtor_Print_a0;
        DAST._IExpression _822_expr = _821___mcc_h48;
        DAM.Syntax._IStmt _823_arg;
        DAM.Syntax._IStmt _out39;
        _out39 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_822_expr);
        _823_arg = _out39;
        DAM.Syntax._IStmt _824_next;
        DAM.Syntax._IStmt _out40;
        _out40 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_749_next);
        _824_next = _out40;
        st = DAM.Syntax.Stmt.create_Bind(_823_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Print(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _824_next));
        return st;
      }
      return st;
    }
    public static DAM.Syntax._IStmt EmitRHS(DAST._IType type__, DAST._IOptional<DAST._IExpression> rhs) {
      DAM.Syntax._IStmt @out = DAM.Syntax.Stmt.Default();
      _System._ITuple2<DAST._IType, DAST._IOptional<DAST._IExpression>> _source68 = _System.Tuple2<DAST._IType, DAST._IOptional<DAST._IExpression>>.create(type__, rhs);
      DAST._IType _825___mcc_h0 = _source68.dtor__0;
      DAST._IOptional<DAST._IExpression> _826___mcc_h1 = _source68.dtor__1;
      DAST._IType _source69 = _825___mcc_h0;
      if (_source69.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _827___mcc_h4 = _source69.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _828___mcc_h5 = _source69.dtor_typeArgs;
        DAST._IResolvedType _829___mcc_h6 = _source69.dtor_resolved;
        DAST._IOptional<DAST._IExpression> _source70 = _826___mcc_h1;
        if (_source70.is_Some) {
          DAST._IExpression _830___mcc_h13 = _source70.dtor_Some_a0;
          DAST._IExpression _831_init = _830___mcc_h13;
          DAM.Syntax._IStmt _out41;
          _out41 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_831_init);
          @out = _out41;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source69.is_Nullable) {
        DAST._IType _832___mcc_h15 = _source69.dtor_Nullable_a0;
        DAST._IOptional<DAST._IExpression> _source71 = _826___mcc_h1;
        if (_source71.is_Some) {
          DAST._IExpression _833___mcc_h18 = _source71.dtor_Some_a0;
          DAST._IExpression _834_init = _833___mcc_h18;
          DAM.Syntax._IStmt _out42;
          _out42 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_834_init);
          @out = _out42;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source69.is_Tuple) {
        Dafny.ISequence<DAST._IType> _835___mcc_h20 = _source69.dtor_Tuple_a0;
        DAST._IOptional<DAST._IExpression> _source72 = _826___mcc_h1;
        if (_source72.is_Some) {
          DAST._IExpression _836___mcc_h23 = _source72.dtor_Some_a0;
          DAST._IExpression _837_init = _836___mcc_h23;
          DAM.Syntax._IStmt _out43;
          _out43 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_837_init);
          @out = _out43;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source69.is_Array) {
        DAST._IType _838___mcc_h25 = _source69.dtor_element;
        BigInteger _839___mcc_h26 = _source69.dtor_dims;
        DAST._IOptional<DAST._IExpression> _source73 = _826___mcc_h1;
        if (_source73.is_Some) {
          DAST._IExpression _840___mcc_h31 = _source73.dtor_Some_a0;
          DAST._IExpression _841_init = _840___mcc_h31;
          DAM.Syntax._IStmt _out44;
          _out44 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_841_init);
          @out = _out44;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source69.is_Seq) {
        DAST._IType _842___mcc_h33 = _source69.dtor_element;
        DAST._IOptional<DAST._IExpression> _source74 = _826___mcc_h1;
        if (_source74.is_Some) {
          DAST._IExpression _843___mcc_h36 = _source74.dtor_Some_a0;
          DAST._IExpression _844_init = _843___mcc_h36;
          DAM.Syntax._IStmt _out45;
          _out45 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_844_init);
          @out = _out45;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source69.is_Set) {
        DAST._IType _845___mcc_h38 = _source69.dtor_element;
        DAST._IOptional<DAST._IExpression> _source75 = _826___mcc_h1;
        if (_source75.is_Some) {
          DAST._IExpression _846___mcc_h41 = _source75.dtor_Some_a0;
          DAST._IExpression _847_init = _846___mcc_h41;
          DAM.Syntax._IStmt _out46;
          _out46 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_847_init);
          @out = _out46;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source69.is_Multiset) {
        DAST._IType _848___mcc_h43 = _source69.dtor_element;
        DAST._IOptional<DAST._IExpression> _source76 = _826___mcc_h1;
        if (_source76.is_Some) {
          DAST._IExpression _849___mcc_h46 = _source76.dtor_Some_a0;
          DAST._IExpression _850_init = _849___mcc_h46;
          DAM.Syntax._IStmt _out47;
          _out47 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_850_init);
          @out = _out47;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source69.is_Map) {
        DAST._IType _851___mcc_h48 = _source69.dtor_key;
        DAST._IType _852___mcc_h49 = _source69.dtor_value;
        DAST._IOptional<DAST._IExpression> _source77 = _826___mcc_h1;
        if (_source77.is_Some) {
          DAST._IExpression _853___mcc_h54 = _source77.dtor_Some_a0;
          DAST._IExpression _854_init = _853___mcc_h54;
          DAM.Syntax._IStmt _out48;
          _out48 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_854_init);
          @out = _out48;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source69.is_Arrow) {
        Dafny.ISequence<DAST._IType> _855___mcc_h56 = _source69.dtor_args;
        DAST._IType _856___mcc_h57 = _source69.dtor_result;
        DAST._IOptional<DAST._IExpression> _source78 = _826___mcc_h1;
        if (_source78.is_Some) {
          DAST._IExpression _857___mcc_h62 = _source78.dtor_Some_a0;
          DAST._IExpression _858_init = _857___mcc_h62;
          DAM.Syntax._IStmt _out49;
          _out49 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_858_init);
          @out = _out49;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source69.is_Primitive) {
        DAST._IPrimitive _859___mcc_h64 = _source69.dtor_Primitive_a0;
        DAST._IPrimitive _source79 = _859___mcc_h64;
        if (_source79.is_Int) {
          DAST._IOptional<DAST._IExpression> _source80 = _826___mcc_h1;
          if (_source80.is_Some) {
            DAST._IExpression _860___mcc_h67 = _source80.dtor_Some_a0;
            DAST._IExpression _861_init = _860___mcc_h67;
            DAM.Syntax._IStmt _out50;
            _out50 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_861_init);
            @out = _out50;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
          }
        } else if (_source79.is_Real) {
          DAST._IOptional<DAST._IExpression> _source81 = _826___mcc_h1;
          if (_source81.is_Some) {
            DAST._IExpression _862___mcc_h70 = _source81.dtor_Some_a0;
            DAST._IExpression _863_init = _862___mcc_h70;
            DAM.Syntax._IStmt _out51;
            _out51 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_863_init);
            @out = _out51;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source79.is_String) {
          DAST._IOptional<DAST._IExpression> _source82 = _826___mcc_h1;
          if (_source82.is_Some) {
            DAST._IExpression _864___mcc_h72 = _source82.dtor_Some_a0;
            DAST._IExpression _865_init = _864___mcc_h72;
            DAM.Syntax._IStmt _out52;
            _out52 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_865_init);
            @out = _out52;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source79.is_Bool) {
          DAST._IOptional<DAST._IExpression> _source83 = _826___mcc_h1;
          if (_source83.is_Some) {
            DAST._IExpression _866___mcc_h74 = _source83.dtor_Some_a0;
            DAST._IExpression _867_init = _866___mcc_h74;
            DAM.Syntax._IStmt _out53;
            _out53 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_867_init);
            @out = _out53;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
          }
        } else {
          DAST._IOptional<DAST._IExpression> _source84 = _826___mcc_h1;
          if (_source84.is_Some) {
            DAST._IExpression _868___mcc_h77 = _source84.dtor_Some_a0;
            DAST._IExpression _869_init = _868___mcc_h77;
            DAM.Syntax._IStmt _out54;
            _out54 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_869_init);
            @out = _out54;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        }
      } else if (_source69.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _870___mcc_h79 = _source69.dtor_Passthrough_a0;
        DAST._IOptional<DAST._IExpression> _source85 = _826___mcc_h1;
        if (_source85.is_Some) {
          DAST._IExpression _871___mcc_h82 = _source85.dtor_Some_a0;
          DAST._IExpression _872_init = _871___mcc_h82;
          DAM.Syntax._IStmt _out55;
          _out55 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_872_init);
          @out = _out55;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _873___mcc_h84 = _source69.dtor_TypeArg_a0;
        DAST._IOptional<DAST._IExpression> _source86 = _826___mcc_h1;
        if (_source86.is_Some) {
          DAST._IExpression _874___mcc_h87 = _source86.dtor_Some_a0;
          DAST._IExpression _875_init = _874___mcc_h87;
          DAM.Syntax._IStmt _out56;
          _out56 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_875_init);
          @out = _out56;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      }
      return @out;
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>> _876_modules;
      _876_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _877_bindings;
      _877_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements();
      BigInteger _hi13 = new BigInteger((p).Count);
      for (BigInteger _878_i = BigInteger.Zero; _878_i < _hi13; _878_i++) {
        Dafny.ISequence<Dafny.Rune> _879_name;
        _879_name = ((p).Select(_878_i)).dtor_name;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Lowering module ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_879_name).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" into the DAM instruction set...\n")).ToVerbatimString(false));
        DAM.Syntax._IStmt _880_m;
        DAM.Syntax._IStmt _out57;
        _out57 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule((p).Select(_878_i));
        _880_m = _out57;
        DAM.Syntax._IExpr _881_mthunk;
        _881_mthunk = DAM.Syntax.Expr.create_Thunk(_880_m);
        DAM.Utils._IOption<DAM.Syntax._IPos> _882_mtype;
        _882_mtype = DAM.Statics.__default.SynthExpr(_877_bindings, _881_mthunk);
        if ((_882_mtype).is_None) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unable to synthesize type for module ")).ToVerbatimString(false));
          Dafny.Helpers.Print((_879_name).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!\n")).ToVerbatimString(false));
          return s;
        }
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Successfully synthesized type for module ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_879_name).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        _876_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.Concat(_876_modules, Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements(_System.Tuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>.create(_879_name, _881_mthunk, (_882_mtype).Extract())));
        _877_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_877_bindings, _879_name, (_882_mtype).Extract());
      }
      DAM.Syntax._IStmt _883_body;
      _883_body = DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__default")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Main"));
      BigInteger _hi14 = new BigInteger((_876_modules).Count);
      for (BigInteger _884_i = BigInteger.Zero; _884_i < _hi14; _884_i++) {
        _System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos> _let_tmp_rhs7 = (_876_modules).Select(((new BigInteger((_876_modules).Count)) - (_884_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _885_name = _let_tmp_rhs7.dtor__0;
        DAM.Syntax._IExpr _886_mod = _let_tmp_rhs7.dtor__1;
        DAM.Syntax._IPos _887_modtype = _let_tmp_rhs7.dtor__2;
        _883_body = DAM.Syntax.__default.Let(_886_mod, _885_name, _887_modtype, _883_body);
      }
      DAM.Utils._IOption<DAM.Syntax._INeg> _888_end;
      _888_end = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), _883_body);
      if (!((_888_end).is_Some)) {
        throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(328,6): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
      }
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Tracing execution of _module.__default.Main() below\n")).ToVerbatimString(false));
      DAM.Dynamics.__default.Interpret(_883_body, true);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _889___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_889___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _889___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_889___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in9 = (i).Drop(BigInteger.One);
          i = _in9;
          goto TAIL_CALL_START;
        } else {
          _889___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_889___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in10 = (i).Drop(BigInteger.One);
          i = _in10;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _890_body;
      Dafny.ISequence<Dafny.Rune> _out58;
      _out58 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _890_body = _out58;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _890_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _891_i;
      _891_i = BigInteger.Zero;
      while ((_891_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _892_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source87 = (body).Select(_891_i);
        if (_source87.is_Module) {
          DAST._IModule _893___mcc_h0 = _source87.dtor_Module_a0;
          DAST._IModule _894_m = _893___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out59;
          _out59 = DCOMP.COMP.GenModule(_894_m, containingPath);
          _892_generated = _out59;
        } else if (_source87.is_Class) {
          DAST._IClass _895___mcc_h1 = _source87.dtor_Class_a0;
          DAST._IClass _896_c = _895___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out60;
          _out60 = DCOMP.COMP.GenClass(_896_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_896_c).dtor_name)));
          _892_generated = _out60;
        } else if (_source87.is_Trait) {
          DAST._ITrait _897___mcc_h2 = _source87.dtor_Trait_a0;
          DAST._ITrait _898_t = _897___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out61;
          _out61 = DCOMP.COMP.GenTrait(_898_t, containingPath);
          _892_generated = _out61;
        } else if (_source87.is_Newtype) {
          DAST._INewtype _899___mcc_h3 = _source87.dtor_Newtype_a0;
          DAST._INewtype _900_n = _899___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenNewtype(_900_n);
          _892_generated = _out62;
        } else {
          DAST._IDatatype _901___mcc_h4 = _source87.dtor_Datatype_a0;
          DAST._IDatatype _902_d = _901___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out63;
          _out63 = DCOMP.COMP.GenDatatype(_902_d);
          _892_generated = _out63;
        }
        if ((_891_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _892_generated);
        _891_i = (_891_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _903_tpI;
      _903_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_903_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _904_tp;
          _904_tp = (@params).Select(_903_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_904_tp));
          Dafny.ISequence<Dafny.Rune> _905_genTp;
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenType(_904_tp, false, false);
          _905_genTp = _out64;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _905_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _906_baseConstraints;
          _906_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _905_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _905_genTp), _906_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _905_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _905_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _905_genTp), _906_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _905_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _905_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _905_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _903_tpI = (_903_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _907_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _908_typeParams;
      Dafny.ISequence<Dafny.Rune> _909_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _910_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _911_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _912_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _913_erasedParams;
      Dafny.ISet<DAST._IType> _out65;
      Dafny.ISequence<Dafny.Rune> _out66;
      Dafny.ISequence<Dafny.Rune> _out67;
      Dafny.ISequence<Dafny.Rune> _out68;
      Dafny.ISequence<Dafny.Rune> _out69;
      Dafny.ISequence<Dafny.Rune> _out70;
      Dafny.ISequence<Dafny.Rune> _out71;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out65, out _out66, out _out67, out _out68, out _out69, out _out70, out _out71);
      _907_typeParamsSet = _out65;
      _908_typeParams = _out66;
      _909_constrainedTypeParams = _out67;
      _910_whereConstraints = _out68;
      _911_constrainedEraseParams = _out69;
      _912_unerasedParams = _out70;
      _913_erasedParams = _out71;
      Dafny.ISequence<Dafny.Rune> _914_fields;
      _914_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _915_fieldInits;
      _915_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _916_fieldI;
      _916_fieldI = BigInteger.Zero;
      while ((_916_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _917_field;
        _917_field = ((c).dtor_fields).Select(_916_fieldI);
        Dafny.ISequence<Dafny.Rune> _918_fieldType;
        Dafny.ISequence<Dafny.Rune> _out72;
        _out72 = DCOMP.COMP.GenType(((_917_field).dtor_formal).dtor_typ, false, false);
        _918_fieldType = _out72;
        _914_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_914_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_917_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _918_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source88 = (_917_field).dtor_defaultValue;
        if (_source88.is_Some) {
          DAST._IExpression _919___mcc_h0 = _source88.dtor_Some_a0;
          DAST._IExpression _920_e = _919___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _921_eStr;
            bool _922___v1;
            bool _923___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _924___v3;
            Dafny.ISequence<Dafny.Rune> _out73;
            bool _out74;
            bool _out75;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out76;
            DCOMP.COMP.GenExpr(_920_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out73, out _out74, out _out75, out _out76);
            _921_eStr = _out73;
            _922___v1 = _out74;
            _923___v2 = _out75;
            _924___v3 = _out76;
            _915_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_915_fieldInits, DCOMP.__default.escapeIdent(((_917_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _921_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _915_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_915_fieldInits, DCOMP.__default.escapeIdent(((_917_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _916_fieldI = (_916_fieldI) + (BigInteger.One);
      }
      BigInteger _925_typeParamI;
      _925_typeParamI = BigInteger.Zero;
      while ((_925_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _926_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out77;
        _out77 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_925_typeParamI), false, false);
        _926_tpeGen = _out77;
        _914_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_914_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_925_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _926_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _915_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_915_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_925_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _925_typeParamI = (_925_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _908_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _914_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _927_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _928_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out78;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out79;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _907_typeParamsSet, out _out78, out _out79);
      _927_implBody = _out78;
      _928_traitBodies = _out79;
      _927_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _915_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _927_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _909_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _908_typeParams), _910_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _927_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _929_i;
        _929_i = BigInteger.Zero;
        while ((_929_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _930_superClass;
          _930_superClass = ((c).dtor_superClasses).Select(_929_i);
          DAST._IType _source89 = _930_superClass;
          if (_source89.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _931___mcc_h1 = _source89.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _932___mcc_h2 = _source89.dtor_typeArgs;
            DAST._IResolvedType _933___mcc_h3 = _source89.dtor_resolved;
            DAST._IResolvedType _source90 = _933___mcc_h3;
            if (_source90.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _934___mcc_h7 = _source90.dtor_path;
            } else if (_source90.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _935___mcc_h9 = _source90.dtor_path;
              Dafny.ISequence<DAST._IType> _936_typeArgs = _932___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _937_traitPath = _931___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _938_pathStr;
                Dafny.ISequence<Dafny.Rune> _out80;
                _out80 = DCOMP.COMP.GenPath(_937_traitPath);
                _938_pathStr = _out80;
                Dafny.ISequence<Dafny.Rune> _939_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out81;
                _out81 = DCOMP.COMP.GenTypeArgs(_936_typeArgs, false, false);
                _939_typeArgs = _out81;
                Dafny.ISequence<Dafny.Rune> _940_body;
                _940_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_928_traitBodies).Contains(_937_traitPath)) {
                  _940_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_928_traitBodies, _937_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _941_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out82;
                _out82 = DCOMP.COMP.GenPath(path);
                _941_genSelfPath = _out82;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _909_constrainedTypeParams), _938_pathStr), _939_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _941_genSelfPath), _908_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _910_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _940_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _942___mcc_h11 = _source90.dtor_Newtype_a0;
            }
          } else if (_source89.is_Nullable) {
            DAST._IType _943___mcc_h13 = _source89.dtor_Nullable_a0;
          } else if (_source89.is_Tuple) {
            Dafny.ISequence<DAST._IType> _944___mcc_h15 = _source89.dtor_Tuple_a0;
          } else if (_source89.is_Array) {
            DAST._IType _945___mcc_h17 = _source89.dtor_element;
            BigInteger _946___mcc_h18 = _source89.dtor_dims;
          } else if (_source89.is_Seq) {
            DAST._IType _947___mcc_h21 = _source89.dtor_element;
          } else if (_source89.is_Set) {
            DAST._IType _948___mcc_h23 = _source89.dtor_element;
          } else if (_source89.is_Multiset) {
            DAST._IType _949___mcc_h25 = _source89.dtor_element;
          } else if (_source89.is_Map) {
            DAST._IType _950___mcc_h27 = _source89.dtor_key;
            DAST._IType _951___mcc_h28 = _source89.dtor_value;
          } else if (_source89.is_Arrow) {
            Dafny.ISequence<DAST._IType> _952___mcc_h31 = _source89.dtor_args;
            DAST._IType _953___mcc_h32 = _source89.dtor_result;
          } else if (_source89.is_Primitive) {
            DAST._IPrimitive _954___mcc_h35 = _source89.dtor_Primitive_a0;
          } else if (_source89.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _955___mcc_h37 = _source89.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _956___mcc_h39 = _source89.dtor_TypeArg_a0;
          }
          _929_i = (_929_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _957_defaultImpl;
      _957_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _909_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _908_typeParams), _910_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _957_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_957_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _957_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_957_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _957_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_957_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _957_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_957_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _958_printImpl;
      _958_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _909_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _908_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _958_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_958_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _959_ptrPartialEqImpl;
      _959_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _908_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _908_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _959_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_959_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _959_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_959_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _959_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_959_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _960_identEraseImpls;
      _960_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _909_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _908_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _913_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _960_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_960_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _911_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _912_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _908_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _957_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _958_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _959_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _960_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _961_typeParamsSet;
      _961_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _962_typeParams;
      _962_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _963_tpI;
      _963_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _962_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_963_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _964_tp;
          _964_tp = ((t).dtor_typeParams).Select(_963_tpI);
          _961_typeParamsSet = Dafny.Set<DAST._IType>.Union(_961_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_964_tp));
          Dafny.ISequence<Dafny.Rune> _965_genTp;
          Dafny.ISequence<Dafny.Rune> _out83;
          _out83 = DCOMP.COMP.GenType(_964_tp, false, false);
          _965_genTp = _out83;
          _962_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_962_typeParams, _965_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _963_tpI = (_963_tpI) + (BigInteger.One);
        }
        _962_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_962_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _966_fullPath;
      _966_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _967_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _968___v6;
      Dafny.ISequence<Dafny.Rune> _out84;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out85;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_966_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_966_fullPath)), _961_typeParamsSet, out _out84, out _out85);
      _967_implBody = _out84;
      _968___v6 = _out85;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _962_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _967_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _969_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _970_typeParams;
      Dafny.ISequence<Dafny.Rune> _971_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _972_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _973___v7;
      Dafny.ISequence<Dafny.Rune> _974___v8;
      Dafny.ISequence<Dafny.Rune> _975___v9;
      Dafny.ISet<DAST._IType> _out86;
      Dafny.ISequence<Dafny.Rune> _out87;
      Dafny.ISequence<Dafny.Rune> _out88;
      Dafny.ISequence<Dafny.Rune> _out89;
      Dafny.ISequence<Dafny.Rune> _out90;
      Dafny.ISequence<Dafny.Rune> _out91;
      Dafny.ISequence<Dafny.Rune> _out92;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out86, out _out87, out _out88, out _out89, out _out90, out _out91, out _out92);
      _969_typeParamsSet = _out86;
      _970_typeParams = _out87;
      _971_constrainedTypeParams = _out88;
      _972_whereConstraints = _out89;
      _973___v7 = _out90;
      _974___v8 = _out91;
      _975___v9 = _out92;
      Dafny.ISequence<Dafny.Rune> _976_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out93;
      _out93 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _976_underlyingType = _out93;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _970_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _976_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _971_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _970_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _976_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _971_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _976_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _970_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _971_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _970_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _970_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _971_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _970_typeParams), _972_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source91 = (c).dtor_witnessExpr;
      if (_source91.is_Some) {
        DAST._IExpression _977___mcc_h0 = _source91.dtor_Some_a0;
        DAST._IExpression _978_e = _977___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _979_eStr;
          bool _980___v10;
          bool _981___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _982___v12;
          Dafny.ISequence<Dafny.Rune> _out94;
          bool _out95;
          bool _out96;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out97;
          DCOMP.COMP.GenExpr(_978_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out94, out _out95, out _out96, out _out97);
          _979_eStr = _out94;
          _980___v10 = _out95;
          _981___v11 = _out96;
          _982___v12 = _out97;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _979_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _971_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _970_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _971_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _970_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _976_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _983_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _984_typeParams;
      Dafny.ISequence<Dafny.Rune> _985_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _986_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _987_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _988_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _989_erasedParams;
      Dafny.ISet<DAST._IType> _out98;
      Dafny.ISequence<Dafny.Rune> _out99;
      Dafny.ISequence<Dafny.Rune> _out100;
      Dafny.ISequence<Dafny.Rune> _out101;
      Dafny.ISequence<Dafny.Rune> _out102;
      Dafny.ISequence<Dafny.Rune> _out103;
      Dafny.ISequence<Dafny.Rune> _out104;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out98, out _out99, out _out100, out _out101, out _out102, out _out103, out _out104);
      _983_typeParamsSet = _out98;
      _984_typeParams = _out99;
      _985_constrainedTypeParams = _out100;
      _986_whereConstraints = _out101;
      _987_constrainedEraseParams = _out102;
      _988_unerasedParams = _out103;
      _989_erasedParams = _out104;
      Dafny.ISequence<Dafny.Rune> _990_ctors;
      _990_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _991_i;
      _991_i = BigInteger.Zero;
      while ((_991_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _992_ctor;
        _992_ctor = ((c).dtor_ctors).Select(_991_i);
        Dafny.ISequence<Dafny.Rune> _993_ctorBody;
        _993_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_992_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _994_j;
        _994_j = BigInteger.Zero;
        while ((_994_j) < (new BigInteger(((_992_ctor).dtor_args).Count))) {
          DAST._IFormal _995_formal;
          _995_formal = ((_992_ctor).dtor_args).Select(_994_j);
          Dafny.ISequence<Dafny.Rune> _996_formalType;
          Dafny.ISequence<Dafny.Rune> _out105;
          _out105 = DCOMP.COMP.GenType((_995_formal).dtor_typ, false, false);
          _996_formalType = _out105;
          if ((c).dtor_isCo) {
            _993_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_993_ctorBody, DCOMP.__default.escapeIdent((_995_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _996_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _993_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_993_ctorBody, DCOMP.__default.escapeIdent((_995_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _996_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _994_j = (_994_j) + (BigInteger.One);
        }
        _993_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_993_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _990_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_990_ctors, _993_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _991_i = (_991_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _997_selfPath;
      _997_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _998_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _999_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out106;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out107;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_997_selfPath)), _983_typeParamsSet, out _out106, out _out107);
      _998_implBody = _out106;
      _999_traitBodies = _out107;
      _991_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1000_emittedFields;
      _1000_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_991_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1001_ctor;
        _1001_ctor = ((c).dtor_ctors).Select(_991_i);
        BigInteger _1002_j;
        _1002_j = BigInteger.Zero;
        while ((_1002_j) < (new BigInteger(((_1001_ctor).dtor_args).Count))) {
          DAST._IFormal _1003_formal;
          _1003_formal = ((_1001_ctor).dtor_args).Select(_1002_j);
          if (!((_1000_emittedFields).Contains((_1003_formal).dtor_name))) {
            _1000_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1000_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_1003_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _1004_formalType;
            Dafny.ISequence<Dafny.Rune> _out108;
            _out108 = DCOMP.COMP.GenType((_1003_formal).dtor_typ, false, false);
            _1004_formalType = _out108;
            Dafny.ISequence<Dafny.Rune> _1005_methodBody;
            _1005_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _1006_k;
            _1006_k = BigInteger.Zero;
            while ((_1006_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _1007_ctor2;
              _1007_ctor2 = ((c).dtor_ctors).Select(_1006_k);
              Dafny.ISequence<Dafny.Rune> _1008_ctorMatch;
              _1008_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_1007_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _1009_l;
              _1009_l = BigInteger.Zero;
              bool _1010_hasMatchingField;
              _1010_hasMatchingField = false;
              while ((_1009_l) < (new BigInteger(((_1007_ctor2).dtor_args).Count))) {
                DAST._IFormal _1011_formal2;
                _1011_formal2 = ((_1007_ctor2).dtor_args).Select(_1009_l);
                if (((_1003_formal).dtor_name).Equals((_1011_formal2).dtor_name)) {
                  _1010_hasMatchingField = true;
                }
                _1008_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1008_ctorMatch, DCOMP.__default.escapeIdent((_1011_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _1009_l = (_1009_l) + (BigInteger.One);
              }
              if (_1010_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _1008_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1008_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_1003_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _1008_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1008_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_1003_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _1008_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1008_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _1005_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_1005_methodBody, _1008_ctorMatch);
              _1006_k = (_1006_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _1005_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1005_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _1005_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_1005_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _998_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_998_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_1003_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _1004_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1005_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _1002_j = (_1002_j) + (BigInteger.One);
        }
        _991_i = (_991_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _990_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_990_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _1012_typeI;
        _1012_typeI = BigInteger.Zero;
        while ((_1012_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_1012_typeI).Sign == 1) {
            _990_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_990_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1013_genTp;
          Dafny.ISequence<Dafny.Rune> _out109;
          _out109 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1012_typeI), false, false);
          _1013_genTp = _out109;
          _990_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_990_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _1013_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _1012_typeI = (_1012_typeI) + (BigInteger.One);
        }
        _990_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_990_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _1014_enumBody;
      _1014_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _984_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _990_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _985_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _984_typeParams), _986_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _998_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _1015_identEraseImpls;
      _1015_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _985_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _984_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _989_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _1015_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1015_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _987_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _988_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _984_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _1016_printImpl;
      _1016_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _985_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _984_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _991_i = BigInteger.Zero;
      while ((_991_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1017_ctor;
        _1017_ctor = ((c).dtor_ctors).Select(_991_i);
        Dafny.ISequence<Dafny.Rune> _1018_ctorMatch;
        _1018_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1017_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _1019_modulePrefix;
        _1019_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _1020_printRhs;
        _1020_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _1019_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_1017_ctor).dtor_name), (((_1017_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _1021_j;
        _1021_j = BigInteger.Zero;
        while ((_1021_j) < (new BigInteger(((_1017_ctor).dtor_args).Count))) {
          DAST._IFormal _1022_formal;
          _1022_formal = ((_1017_ctor).dtor_args).Select(_1021_j);
          _1018_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1018_ctorMatch, DCOMP.__default.escapeIdent((_1022_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_1021_j).Sign == 1) {
            _1020_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1020_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _1020_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1020_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_1022_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _1021_j = (_1021_j) + (BigInteger.One);
        }
        _1018_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1018_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_1017_ctor).dtor_hasAnyArgs) {
          _1020_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1020_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _1020_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1020_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _1016_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1016_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _1018_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _1020_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _991_i = (_991_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _1016_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1016_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _1016_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1016_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _1023_defaultImpl;
      _1023_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _1023_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _985_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _984_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _991_i = BigInteger.Zero;
        while ((_991_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1024_formal;
          _1024_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_991_i);
          _1023_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1023_defaultImpl, DCOMP.__default.escapeIdent((_1024_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _991_i = (_991_i) + (BigInteger.One);
        }
        _1023_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1023_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1014_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1015_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1016_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1023_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1025_i;
        _1025_i = BigInteger.Zero;
        while ((_1025_i) < (new BigInteger((p).Count))) {
          if ((_1025_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1025_i))));
          _1025_i = (_1025_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _1026_i;
        _1026_i = BigInteger.Zero;
        while ((_1026_i) < (new BigInteger((args).Count))) {
          if ((_1026_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1027_genTp;
          Dafny.ISequence<Dafny.Rune> _out110;
          _out110 = DCOMP.COMP.GenType((args).Select(_1026_i), inBinding, inFn);
          _1027_genTp = _out110;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1027_genTp);
          _1026_i = (_1026_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source92 = c;
      if (_source92.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1028___mcc_h0 = _source92.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1029___mcc_h1 = _source92.dtor_typeArgs;
        DAST._IResolvedType _1030___mcc_h2 = _source92.dtor_resolved;
        DAST._IResolvedType _1031_resolved = _1030___mcc_h2;
        Dafny.ISequence<DAST._IType> _1032_args = _1029___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1033_p = _1028___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out111;
          _out111 = DCOMP.COMP.GenPath(_1033_p);
          s = _out111;
          Dafny.ISequence<Dafny.Rune> _1034_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out112;
          _out112 = DCOMP.COMP.GenTypeArgs(_1032_args, inBinding, inFn);
          _1034_typeArgs = _out112;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1034_typeArgs);
          DAST._IResolvedType _source93 = _1031_resolved;
          if (_source93.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1035___mcc_h18 = _source93.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source93.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1036___mcc_h20 = _source93.dtor_path;
            {
              if ((_1033_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _1037___mcc_h22 = _source93.dtor_Newtype_a0;
            DAST._IResolvedType _1038_Primitive = _1031_resolved;
          }
        }
      } else if (_source92.is_Nullable) {
        DAST._IType _1039___mcc_h3 = _source92.dtor_Nullable_a0;
        DAST._IType _1040_inner = _1039___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _1041_innerStr;
          Dafny.ISequence<Dafny.Rune> _out113;
          _out113 = DCOMP.COMP.GenType(_1040_inner, inBinding, inFn);
          _1041_innerStr = _out113;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _1041_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source92.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1042___mcc_h4 = _source92.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1043_types = _1042___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _1044_i;
          _1044_i = BigInteger.Zero;
          while ((_1044_i) < (new BigInteger((_1043_types).Count))) {
            if ((_1044_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1045_generated;
            Dafny.ISequence<Dafny.Rune> _out114;
            _out114 = DCOMP.COMP.GenType((_1043_types).Select(_1044_i), inBinding, inFn);
            _1045_generated = _out114;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1045_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _1044_i = (_1044_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source92.is_Array) {
        DAST._IType _1046___mcc_h5 = _source92.dtor_element;
        BigInteger _1047___mcc_h6 = _source92.dtor_dims;
        BigInteger _1048_dims = _1047___mcc_h6;
        DAST._IType _1049_element = _1046___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _1050_elemStr;
          Dafny.ISequence<Dafny.Rune> _out115;
          _out115 = DCOMP.COMP.GenType(_1049_element, inBinding, inFn);
          _1050_elemStr = _out115;
          s = _1050_elemStr;
          BigInteger _1051_i;
          _1051_i = BigInteger.Zero;
          while ((_1051_i) < (_1048_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _1051_i = (_1051_i) + (BigInteger.One);
          }
        }
      } else if (_source92.is_Seq) {
        DAST._IType _1052___mcc_h7 = _source92.dtor_element;
        DAST._IType _1053_element = _1052___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _1054_elemStr;
          Dafny.ISequence<Dafny.Rune> _out116;
          _out116 = DCOMP.COMP.GenType(_1053_element, inBinding, inFn);
          _1054_elemStr = _out116;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _1054_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source92.is_Set) {
        DAST._IType _1055___mcc_h8 = _source92.dtor_element;
        DAST._IType _1056_element = _1055___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _1057_elemStr;
          Dafny.ISequence<Dafny.Rune> _out117;
          _out117 = DCOMP.COMP.GenType(_1056_element, inBinding, inFn);
          _1057_elemStr = _out117;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _1057_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source92.is_Multiset) {
        DAST._IType _1058___mcc_h9 = _source92.dtor_element;
        DAST._IType _1059_element = _1058___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1060_elemStr;
          Dafny.ISequence<Dafny.Rune> _out118;
          _out118 = DCOMP.COMP.GenType(_1059_element, inBinding, inFn);
          _1060_elemStr = _out118;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1060_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source92.is_Map) {
        DAST._IType _1061___mcc_h10 = _source92.dtor_key;
        DAST._IType _1062___mcc_h11 = _source92.dtor_value;
        DAST._IType _1063_value = _1062___mcc_h11;
        DAST._IType _1064_key = _1061___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _1065_keyStr;
          Dafny.ISequence<Dafny.Rune> _out119;
          _out119 = DCOMP.COMP.GenType(_1064_key, inBinding, inFn);
          _1065_keyStr = _out119;
          Dafny.ISequence<Dafny.Rune> _1066_valueStr;
          Dafny.ISequence<Dafny.Rune> _out120;
          _out120 = DCOMP.COMP.GenType(_1063_value, inBinding, inFn);
          _1066_valueStr = _out120;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1065_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1066_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source92.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1067___mcc_h12 = _source92.dtor_args;
        DAST._IType _1068___mcc_h13 = _source92.dtor_result;
        DAST._IType _1069_result = _1068___mcc_h13;
        Dafny.ISequence<DAST._IType> _1070_args = _1067___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _1071_i;
          _1071_i = BigInteger.Zero;
          while ((_1071_i) < (new BigInteger((_1070_args).Count))) {
            if ((_1071_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1072_generated;
            Dafny.ISequence<Dafny.Rune> _out121;
            _out121 = DCOMP.COMP.GenType((_1070_args).Select(_1071_i), inBinding, true);
            _1072_generated = _out121;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _1072_generated);
            _1071_i = (_1071_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1073_resultType;
          Dafny.ISequence<Dafny.Rune> _out122;
          _out122 = DCOMP.COMP.GenType(_1069_result, inBinding, (inFn) || (inBinding));
          _1073_resultType = _out122;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1073_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source92.is_Primitive) {
        DAST._IPrimitive _1074___mcc_h14 = _source92.dtor_Primitive_a0;
        DAST._IPrimitive _1075_p = _1074___mcc_h14;
        {
          DAST._IPrimitive _source94 = _1075_p;
          if (_source94.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source94.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source94.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source94.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source92.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1076___mcc_h15 = _source92.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1077_v = _1076___mcc_h15;
        s = _1077_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _1078___mcc_h16 = _source92.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source95 = _1078___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1079___mcc_h17 = _source95;
        Dafny.ISequence<Dafny.Rune> _1080_name = _1079___mcc_h17;
        s = DCOMP.__default.escapeIdent(_1080_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1081_i;
      _1081_i = BigInteger.Zero;
      while ((_1081_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source96 = (body).Select(_1081_i);
        DAST._IMethod _1082___mcc_h0 = _source96;
        DAST._IMethod _1083_m = _1082___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source97 = (_1083_m).dtor_overridingPath;
          if (_source97.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1084___mcc_h1 = _source97.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1085_p = _1084___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _1086_existing;
              _1086_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_1085_p)) {
                _1086_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _1085_p);
              }
              if ((new BigInteger((_1086_existing).Count)).Sign == 1) {
                _1086_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1086_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _1087_genMethod;
              Dafny.ISequence<Dafny.Rune> _out123;
              _out123 = DCOMP.COMP.GenMethod(_1083_m, true, enclosingType, enclosingTypeParams);
              _1087_genMethod = _out123;
              _1086_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1086_existing, _1087_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_1085_p, _1086_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _1088_generated;
              Dafny.ISequence<Dafny.Rune> _out124;
              _out124 = DCOMP.COMP.GenMethod(_1083_m, forTrait, enclosingType, enclosingTypeParams);
              _1088_generated = _out124;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1088_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _1081_i = (_1081_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1089_i;
      _1089_i = BigInteger.Zero;
      while ((_1089_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1090_param;
        _1090_param = (@params).Select(_1089_i);
        Dafny.ISequence<Dafny.Rune> _1091_paramType;
        Dafny.ISequence<Dafny.Rune> _out125;
        _out125 = DCOMP.COMP.GenType((_1090_param).dtor_typ, false, false);
        _1091_paramType = _out125;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_1090_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _1091_paramType);
        if ((_1089_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _1089_i = (_1089_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _1092_params;
      Dafny.ISequence<Dafny.Rune> _out126;
      _out126 = DCOMP.COMP.GenParams((m).dtor_params);
      _1092_params = _out126;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1093_paramNames;
      _1093_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1094_paramI;
      _1094_paramI = BigInteger.Zero;
      while ((_1094_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1093_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1093_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1094_paramI)).dtor_name));
        _1094_paramI = (_1094_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1092_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1092_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _1095_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out127;
          _out127 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1095_enclosingTypeString = _out127;
          _1092_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _1095_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1092_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _1096_retType;
      _1096_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _1097_typeI;
      _1097_typeI = BigInteger.Zero;
      while ((_1097_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_1097_typeI).Sign == 1) {
          _1096_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1096_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _1098_typeString;
        Dafny.ISequence<Dafny.Rune> _out128;
        _out128 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1097_typeI), false, false);
        _1098_typeString = _out128;
        _1096_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1096_retType, _1098_typeString);
        _1097_typeI = (_1097_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _1096_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1096_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _1099_typeParamsFiltered;
      _1099_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1100_typeParamI;
      _1100_typeParamI = BigInteger.Zero;
      while ((_1100_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1101_typeParam;
        _1101_typeParam = ((m).dtor_typeParams).Select(_1100_typeParamI);
        if (!((enclosingTypeParams).Contains(_1101_typeParam))) {
          _1099_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1099_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1101_typeParam));
        }
        _1100_typeParamI = (_1100_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1102_whereClauses;
      _1102_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_1099_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _1102_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1102_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1103_i;
        _1103_i = BigInteger.Zero;
        while ((_1103_i) < (new BigInteger((_1099_typeParamsFiltered).Count))) {
          if ((_1103_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _1102_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1102_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1104_typeString;
          Dafny.ISequence<Dafny.Rune> _out129;
          _out129 = DCOMP.COMP.GenType((_1099_typeParamsFiltered).Select(_1103_i), false, false);
          _1104_typeString = _out129;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1104_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _1104_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _1102_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1102_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _1104_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _1103_i = (_1103_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1092_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1096_retType), _1102_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _1105_earlyReturn;
        _1105_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source98 = (m).dtor_outVars;
        if (_source98.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1106___mcc_h0 = _source98.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1107_outVars = _1106___mcc_h0;
          {
            _1105_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _1108_outI;
            _1108_outI = BigInteger.Zero;
            while ((_1108_outI) < (new BigInteger((_1107_outVars).Count))) {
              if ((_1108_outI).Sign == 1) {
                _1105_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1105_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1109_outVar;
              _1109_outVar = (_1107_outVars).Select(_1108_outI);
              _1105_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1105_earlyReturn, DCOMP.__default.escapeIdent((_1109_outVar)));
              _1108_outI = (_1108_outI) + (BigInteger.One);
            }
            _1105_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1105_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _1110_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1111___v15;
        Dafny.ISequence<Dafny.Rune> _out130;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1093_paramNames, true, _1105_earlyReturn, out _out130, out _out131);
        _1110_body = _out130;
        _1111___v15 = _out131;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1110_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1112_declarations;
      _1112_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1113_i;
      _1113_i = BigInteger.Zero;
      while ((_1113_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1114_stmt;
        _1114_stmt = (stmts).Select(_1113_i);
        Dafny.ISequence<Dafny.Rune> _1115_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1116_recIdents;
        Dafny.ISequence<Dafny.Rune> _out132;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out133;
        DCOMP.COMP.GenStmt(_1114_stmt, selfIdent, @params, (isLast) && ((_1113_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out132, out _out133);
        _1115_stmtString = _out132;
        _1116_recIdents = _out133;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1116_recIdents, _1112_declarations));
        DAST._IStatement _source99 = _1114_stmt;
        if (_source99.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1117___mcc_h0 = _source99.dtor_name;
          DAST._IType _1118___mcc_h1 = _source99.dtor_typ;
          DAST._IOptional<DAST._IExpression> _1119___mcc_h2 = _source99.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1120_name = _1117___mcc_h0;
          {
            _1112_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1112_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1120_name));
          }
        } else if (_source99.is_Assign) {
          DAST._IAssignLhs _1121___mcc_h6 = _source99.dtor_lhs;
          DAST._IExpression _1122___mcc_h7 = _source99.dtor_value;
        } else if (_source99.is_If) {
          DAST._IExpression _1123___mcc_h10 = _source99.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1124___mcc_h11 = _source99.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1125___mcc_h12 = _source99.dtor_els;
        } else if (_source99.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1126___mcc_h16 = _source99.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1127___mcc_h17 = _source99.dtor_body;
        } else if (_source99.is_While) {
          DAST._IExpression _1128___mcc_h20 = _source99.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1129___mcc_h21 = _source99.dtor_body;
        } else if (_source99.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1130___mcc_h24 = _source99.dtor_boundName;
          DAST._IType _1131___mcc_h25 = _source99.dtor_boundType;
          DAST._IExpression _1132___mcc_h26 = _source99.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1133___mcc_h27 = _source99.dtor_body;
        } else if (_source99.is_Call) {
          DAST._IExpression _1134___mcc_h32 = _source99.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1135___mcc_h33 = _source99.dtor_name;
          Dafny.ISequence<DAST._IType> _1136___mcc_h34 = _source99.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1137___mcc_h35 = _source99.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1138___mcc_h36 = _source99.dtor_outs;
        } else if (_source99.is_Return) {
          DAST._IExpression _1139___mcc_h42 = _source99.dtor_expr;
        } else if (_source99.is_EarlyReturn) {
        } else if (_source99.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1140___mcc_h44 = _source99.dtor_toLabel;
        } else if (_source99.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1141___mcc_h46 = _source99.dtor_body;
        } else if (_source99.is_JumpTailCallStart) {
        } else if (_source99.is_Halt) {
        } else {
          DAST._IExpression _1142___mcc_h48 = _source99.dtor_Print_a0;
        }
        if ((_1113_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _1115_stmtString);
        _1113_i = (_1113_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source100 = lhs;
      if (_source100.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1143___mcc_h0 = _source100.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source101 = _1143___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1144___mcc_h1 = _source101;
        Dafny.ISequence<Dafny.Rune> _1145_id = _1144___mcc_h1;
        {
          if ((@params).Contains(_1145_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1145_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1145_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1145_id);
          needsIIFE = false;
        }
      } else if (_source100.is_Select) {
        DAST._IExpression _1146___mcc_h2 = _source100.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1147___mcc_h3 = _source100.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1148_field = _1147___mcc_h3;
        DAST._IExpression _1149_on = _1146___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _1150_onExpr;
          bool _1151_onOwned;
          bool _1152_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1153_recIdents;
          Dafny.ISequence<Dafny.Rune> _out134;
          bool _out135;
          bool _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          DCOMP.COMP.GenExpr(_1149_on, selfIdent, @params, false, out _out134, out _out135, out _out136, out _out137);
          _1150_onExpr = _out134;
          _1151_onOwned = _out135;
          _1152_onErased = _out136;
          _1153_recIdents = _out137;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _1150_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1148_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1153_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1154___mcc_h4 = _source100.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1155___mcc_h5 = _source100.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1156_indices = _1155___mcc_h5;
        DAST._IExpression _1157_on = _1154___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1158_onExpr;
          bool _1159_onOwned;
          bool _1160_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1161_recIdents;
          Dafny.ISequence<Dafny.Rune> _out138;
          bool _out139;
          bool _out140;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out141;
          DCOMP.COMP.GenExpr(_1157_on, selfIdent, @params, false, out _out138, out _out139, out _out140, out _out141);
          _1158_onExpr = _out138;
          _1159_onOwned = _out139;
          _1160_onErased = _out140;
          _1161_recIdents = _out141;
          readIdents = _1161_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1162_i;
          _1162_i = BigInteger.Zero;
          while ((_1162_i) < (new BigInteger((_1156_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _1163_idx;
            bool _1164___v19;
            bool _1165_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1166_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out142;
            bool _out143;
            bool _out144;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out145;
            DCOMP.COMP.GenExpr((_1156_indices).Select(_1162_i), selfIdent, @params, true, out _out142, out _out143, out _out144, out _out145);
            _1163_idx = _out142;
            _1164___v19 = _out143;
            _1165_idxErased = _out144;
            _1166_recIdentsIdx = _out145;
            if (!(_1165_idxErased)) {
              _1163_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1163_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_1162_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _1163_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1166_recIdentsIdx);
            _1162_i = (_1162_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _1158_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1162_i = BigInteger.Zero;
          while ((_1162_i) < (new BigInteger((_1156_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_1162_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1162_i = (_1162_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source102 = stmt;
      if (_source102.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1167___mcc_h0 = _source102.dtor_name;
        DAST._IType _1168___mcc_h1 = _source102.dtor_typ;
        DAST._IOptional<DAST._IExpression> _1169___mcc_h2 = _source102.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source103 = _1169___mcc_h2;
        if (_source103.is_Some) {
          DAST._IExpression _1170___mcc_h3 = _source103.dtor_Some_a0;
          DAST._IExpression _1171_expression = _1170___mcc_h3;
          DAST._IType _1172_typ = _1168___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1173_name = _1167___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1174_typeString;
            Dafny.ISequence<Dafny.Rune> _out146;
            _out146 = DCOMP.COMP.GenType(_1172_typ, true, false);
            _1174_typeString = _out146;
            Dafny.ISequence<Dafny.Rune> _1175_expr;
            bool _1176___v20;
            bool _1177_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1178_recIdents;
            Dafny.ISequence<Dafny.Rune> _out147;
            bool _out148;
            bool _out149;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out150;
            DCOMP.COMP.GenExpr(_1171_expression, selfIdent, @params, true, out _out147, out _out148, out _out149, out _out150);
            _1175_expr = _out147;
            _1176___v20 = _out148;
            _1177_recErased = _out149;
            _1178_recIdents = _out150;
            if (!(_1177_recErased)) {
              _1175_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1175_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1175_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1174_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1175_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1173_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1174_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1175_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1178_recIdents;
          }
        } else {
          DAST._IType _1179_typ = _1168___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1180_name = _1167___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1181_typeString;
            Dafny.ISequence<Dafny.Rune> _out151;
            _out151 = DCOMP.COMP.GenType(_1179_typ, true, false);
            _1181_typeString = _out151;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1180_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1181_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source102.is_Assign) {
        DAST._IAssignLhs _1182___mcc_h4 = _source102.dtor_lhs;
        DAST._IExpression _1183___mcc_h5 = _source102.dtor_value;
        DAST._IExpression _1184_expression = _1183___mcc_h5;
        DAST._IAssignLhs _1185_lhs = _1182___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1186_lhsGen;
          bool _1187_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1188_recIdents;
          Dafny.ISequence<Dafny.Rune> _out152;
          bool _out153;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out154;
          DCOMP.COMP.GenAssignLhs(_1185_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out152, out _out153, out _out154);
          _1186_lhsGen = _out152;
          _1187_needsIIFE = _out153;
          _1188_recIdents = _out154;
          Dafny.ISequence<Dafny.Rune> _1189_exprGen;
          bool _1190___v21;
          bool _1191_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1192_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out155;
          bool _out156;
          bool _out157;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out158;
          DCOMP.COMP.GenExpr(_1184_expression, selfIdent, @params, true, out _out155, out _out156, out _out157, out _out158);
          _1189_exprGen = _out155;
          _1190___v21 = _out156;
          _1191_exprErased = _out157;
          _1192_exprIdents = _out158;
          if (!(_1191_exprErased)) {
            _1189_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1189_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1189_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1189_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1187_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1189_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1186_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1186_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1189_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1188_recIdents, _1192_exprIdents);
        }
      } else if (_source102.is_If) {
        DAST._IExpression _1193___mcc_h6 = _source102.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1194___mcc_h7 = _source102.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1195___mcc_h8 = _source102.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1196_els = _1195___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1197_thn = _1194___mcc_h7;
        DAST._IExpression _1198_cond = _1193___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1199_condString;
          bool _1200___v22;
          bool _1201_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1202_recIdents;
          Dafny.ISequence<Dafny.Rune> _out159;
          bool _out160;
          bool _out161;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out162;
          DCOMP.COMP.GenExpr(_1198_cond, selfIdent, @params, true, out _out159, out _out160, out _out161, out _out162);
          _1199_condString = _out159;
          _1200___v22 = _out160;
          _1201_condErased = _out161;
          _1202_recIdents = _out162;
          if (!(_1201_condErased)) {
            _1199_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1199_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1202_recIdents;
          Dafny.ISequence<Dafny.Rune> _1203_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1204_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out163;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out164;
          DCOMP.COMP.GenStmts(_1197_thn, selfIdent, @params, isLast, earlyReturn, out _out163, out _out164);
          _1203_thnString = _out163;
          _1204_thnIdents = _out164;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1204_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1205_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1206_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out165;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out166;
          DCOMP.COMP.GenStmts(_1196_els, selfIdent, @params, isLast, earlyReturn, out _out165, out _out166);
          _1205_elsString = _out165;
          _1206_elsIdents = _out166;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1206_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1199_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1203_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1205_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source102.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1207___mcc_h9 = _source102.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1208___mcc_h10 = _source102.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1209_body = _1208___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1210_lbl = _1207___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1211_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1212_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out167;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out168;
          DCOMP.COMP.GenStmts(_1209_body, selfIdent, @params, isLast, earlyReturn, out _out167, out _out168);
          _1211_bodyString = _out167;
          _1212_bodyIdents = _out168;
          readIdents = _1212_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1210_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1211_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source102.is_While) {
        DAST._IExpression _1213___mcc_h11 = _source102.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1214___mcc_h12 = _source102.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1215_body = _1214___mcc_h12;
        DAST._IExpression _1216_cond = _1213___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _1217_condString;
          bool _1218___v23;
          bool _1219_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1220_recIdents;
          Dafny.ISequence<Dafny.Rune> _out169;
          bool _out170;
          bool _out171;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out172;
          DCOMP.COMP.GenExpr(_1216_cond, selfIdent, @params, true, out _out169, out _out170, out _out171, out _out172);
          _1217_condString = _out169;
          _1218___v23 = _out170;
          _1219_condErased = _out171;
          _1220_recIdents = _out172;
          if (!(_1219_condErased)) {
            _1217_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1217_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1220_recIdents;
          Dafny.ISequence<Dafny.Rune> _1221_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1222_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out173;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out174;
          DCOMP.COMP.GenStmts(_1215_body, selfIdent, @params, false, earlyReturn, out _out173, out _out174);
          _1221_bodyString = _out173;
          _1222_bodyIdents = _out174;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1222_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _1217_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1221_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source102.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1223___mcc_h13 = _source102.dtor_boundName;
        DAST._IType _1224___mcc_h14 = _source102.dtor_boundType;
        DAST._IExpression _1225___mcc_h15 = _source102.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1226___mcc_h16 = _source102.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1227_body = _1226___mcc_h16;
        DAST._IExpression _1228_over = _1225___mcc_h15;
        DAST._IType _1229_boundType = _1224___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1230_boundName = _1223___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1231_overString;
          bool _1232___v24;
          bool _1233_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1234_recIdents;
          Dafny.ISequence<Dafny.Rune> _out175;
          bool _out176;
          bool _out177;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out178;
          DCOMP.COMP.GenExpr(_1228_over, selfIdent, @params, true, out _out175, out _out176, out _out177, out _out178);
          _1231_overString = _out175;
          _1232___v24 = _out176;
          _1233_overErased = _out177;
          _1234_recIdents = _out178;
          Dafny.ISequence<Dafny.Rune> _1235_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out179;
          _out179 = DCOMP.COMP.GenType(_1229_boundType, false, false);
          _1235_boundTypeStr = _out179;
          readIdents = _1234_recIdents;
          Dafny.ISequence<Dafny.Rune> _1236_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1237_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out180;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out181;
          DCOMP.COMP.GenStmts(_1227_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1230_boundName)), false, earlyReturn, out _out180, out _out181);
          _1236_bodyString = _out180;
          _1237_bodyIdents = _out181;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1237_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1230_boundName));
          Dafny.ISequence<Dafny.Rune> _1238_unerasedIter;
          _1238_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_1233_overErased) {
            _1238_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1235_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1238_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _1231_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1230_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1238_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1236_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source102.is_Call) {
        DAST._IExpression _1239___mcc_h17 = _source102.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1240___mcc_h18 = _source102.dtor_name;
        Dafny.ISequence<DAST._IType> _1241___mcc_h19 = _source102.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1242___mcc_h20 = _source102.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1243___mcc_h21 = _source102.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1244_maybeOutVars = _1243___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1245_args = _1242___mcc_h20;
        Dafny.ISequence<DAST._IType> _1246_typeArgs = _1241___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1247_name = _1240___mcc_h18;
        DAST._IExpression _1248_on = _1239___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1249_typeArgString;
          _1249_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1246_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1250_typeI;
            _1250_typeI = BigInteger.Zero;
            _1249_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_1250_typeI) < (new BigInteger((_1246_typeArgs).Count))) {
              if ((_1250_typeI).Sign == 1) {
                _1249_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1249_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1251_typeString;
              Dafny.ISequence<Dafny.Rune> _out182;
              _out182 = DCOMP.COMP.GenType((_1246_typeArgs).Select(_1250_typeI), false, false);
              _1251_typeString = _out182;
              _1249_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1249_typeArgString, _1251_typeString);
              _1250_typeI = (_1250_typeI) + (BigInteger.One);
            }
            _1249_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1249_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _1252_argString;
          _1252_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1253_i;
          _1253_i = BigInteger.Zero;
          while ((_1253_i) < (new BigInteger((_1245_args).Count))) {
            if ((_1253_i).Sign == 1) {
              _1252_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1252_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1254_argExpr;
            bool _1255_isOwned;
            bool _1256_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1257_argIdents;
            Dafny.ISequence<Dafny.Rune> _out183;
            bool _out184;
            bool _out185;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
            DCOMP.COMP.GenExpr((_1245_args).Select(_1253_i), selfIdent, @params, false, out _out183, out _out184, out _out185, out _out186);
            _1254_argExpr = _out183;
            _1255_isOwned = _out184;
            _1256_argErased = _out185;
            _1257_argIdents = _out186;
            if (_1255_isOwned) {
              _1254_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1254_argExpr);
            }
            _1252_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1252_argString, _1254_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1257_argIdents);
            _1253_i = (_1253_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1258_enclosingString;
          bool _1259___v25;
          bool _1260___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1261_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out187;
          bool _out188;
          bool _out189;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out190;
          DCOMP.COMP.GenExpr(_1248_on, selfIdent, @params, false, out _out187, out _out188, out _out189, out _out190);
          _1258_enclosingString = _out187;
          _1259___v25 = _out188;
          _1260___v26 = _out189;
          _1261_enclosingIdents = _out190;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1261_enclosingIdents);
          DAST._IExpression _source104 = _1248_on;
          if (_source104.is_Literal) {
            DAST._ILiteral _1262___mcc_h26 = _source104.dtor_Literal_a0;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1263___mcc_h28 = _source104.dtor_Ident_a0;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1264___mcc_h30 = _source104.dtor_Companion_a0;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1258_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source104.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1265___mcc_h32 = _source104.dtor_Tuple_a0;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1266___mcc_h34 = _source104.dtor_path;
            Dafny.ISequence<DAST._IType> _1267___mcc_h35 = _source104.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1268___mcc_h36 = _source104.dtor_args;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1269___mcc_h40 = _source104.dtor_dims;
            DAST._IType _1270___mcc_h41 = _source104.dtor_typ;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1271___mcc_h44 = _source104.dtor_path;
            Dafny.ISequence<DAST._IType> _1272___mcc_h45 = _source104.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1273___mcc_h46 = _source104.dtor_variant;
            bool _1274___mcc_h47 = _source104.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1275___mcc_h48 = _source104.dtor_contents;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_Convert) {
            DAST._IExpression _1276___mcc_h54 = _source104.dtor_value;
            DAST._IType _1277___mcc_h55 = _source104.dtor_from;
            DAST._IType _1278___mcc_h56 = _source104.dtor_typ;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_SeqConstruct) {
            DAST._IExpression _1279___mcc_h60 = _source104.dtor_length;
            DAST._IExpression _1280___mcc_h61 = _source104.dtor_elem;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _1281___mcc_h64 = _source104.dtor_elements;
            DAST._IType _1282___mcc_h65 = _source104.dtor_typ;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _1283___mcc_h68 = _source104.dtor_elements;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1284___mcc_h70 = _source104.dtor_mapElems;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_This) {
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_Ite) {
            DAST._IExpression _1285___mcc_h72 = _source104.dtor_cond;
            DAST._IExpression _1286___mcc_h73 = _source104.dtor_thn;
            DAST._IExpression _1287___mcc_h74 = _source104.dtor_els;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_UnOp) {
            DAST._IUnaryOp _1288___mcc_h78 = _source104.dtor_unOp;
            DAST._IExpression _1289___mcc_h79 = _source104.dtor_expr;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_BinOp) {
            DAST._IBinOp _1290___mcc_h82 = _source104.dtor_op;
            DAST._IExpression _1291___mcc_h83 = _source104.dtor_left;
            DAST._IExpression _1292___mcc_h84 = _source104.dtor_right;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_ArrayLen) {
            DAST._IExpression _1293___mcc_h88 = _source104.dtor_expr;
            BigInteger _1294___mcc_h89 = _source104.dtor_dim;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_Select) {
            DAST._IExpression _1295___mcc_h92 = _source104.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1296___mcc_h93 = _source104.dtor_field;
            bool _1297___mcc_h94 = _source104.dtor_isConstant;
            bool _1298___mcc_h95 = _source104.dtor_onDatatype;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_SelectFn) {
            DAST._IExpression _1299___mcc_h100 = _source104.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1300___mcc_h101 = _source104.dtor_field;
            bool _1301___mcc_h102 = _source104.dtor_onDatatype;
            bool _1302___mcc_h103 = _source104.dtor_isStatic;
            BigInteger _1303___mcc_h104 = _source104.dtor_arity;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_Index) {
            DAST._IExpression _1304___mcc_h110 = _source104.dtor_expr;
            DAST._ICollKind _1305___mcc_h111 = _source104.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1306___mcc_h112 = _source104.dtor_indices;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_IndexRange) {
            DAST._IExpression _1307___mcc_h116 = _source104.dtor_expr;
            bool _1308___mcc_h117 = _source104.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _1309___mcc_h118 = _source104.dtor_low;
            DAST._IOptional<DAST._IExpression> _1310___mcc_h119 = _source104.dtor_high;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_TupleSelect) {
            DAST._IExpression _1311___mcc_h124 = _source104.dtor_expr;
            BigInteger _1312___mcc_h125 = _source104.dtor_index;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_Call) {
            DAST._IExpression _1313___mcc_h128 = _source104.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1314___mcc_h129 = _source104.dtor_name;
            Dafny.ISequence<DAST._IType> _1315___mcc_h130 = _source104.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1316___mcc_h131 = _source104.dtor_args;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1317___mcc_h136 = _source104.dtor_params;
            DAST._IType _1318___mcc_h137 = _source104.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1319___mcc_h138 = _source104.dtor_body;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1320___mcc_h142 = _source104.dtor_values;
            DAST._IType _1321___mcc_h143 = _source104.dtor_retType;
            DAST._IExpression _1322___mcc_h144 = _source104.dtor_expr;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1323___mcc_h148 = _source104.dtor_name;
            DAST._IType _1324___mcc_h149 = _source104.dtor_typ;
            DAST._IExpression _1325___mcc_h150 = _source104.dtor_value;
            DAST._IExpression _1326___mcc_h151 = _source104.dtor_iifeBody;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_Apply) {
            DAST._IExpression _1327___mcc_h156 = _source104.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1328___mcc_h157 = _source104.dtor_args;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_TypeTest) {
            DAST._IExpression _1329___mcc_h160 = _source104.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1330___mcc_h161 = _source104.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1331___mcc_h162 = _source104.dtor_variant;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_InitializationValue) {
            DAST._IType _1332___mcc_h166 = _source104.dtor_typ;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_BoolBoundedPool) {
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_SetBoundedPool) {
            DAST._IExpression _1333___mcc_h168 = _source104.dtor_of;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source104.is_SeqBoundedPool) {
            DAST._IExpression _1334___mcc_h170 = _source104.dtor_of;
            bool _1335___mcc_h171 = _source104.dtor_includeDuplicates;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1336___mcc_h174 = _source104.dtor_lo;
            DAST._IExpression _1337___mcc_h175 = _source104.dtor_hi;
            {
              _1258_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1258_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1338_receiver;
          _1338_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source105 = _1244_maybeOutVars;
          if (_source105.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1339___mcc_h178 = _source105.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1340_outVars = _1339___mcc_h178;
            {
              if ((new BigInteger((_1340_outVars).Count)) > (BigInteger.One)) {
                _1338_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1341_outI;
              _1341_outI = BigInteger.Zero;
              while ((_1341_outI) < (new BigInteger((_1340_outVars).Count))) {
                if ((_1341_outI).Sign == 1) {
                  _1338_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1338_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1342_outVar;
                _1342_outVar = (_1340_outVars).Select(_1341_outI);
                _1338_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1338_receiver, (_1342_outVar));
                _1341_outI = (_1341_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1340_outVars).Count)) > (BigInteger.One)) {
                _1338_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1338_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1338_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1338_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1258_enclosingString), DCOMP.__default.escapeIdent(_1247_name)), _1249_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1252_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source102.is_Return) {
        DAST._IExpression _1343___mcc_h22 = _source102.dtor_expr;
        DAST._IExpression _1344_expr = _1343___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1345_exprString;
          bool _1346___v29;
          bool _1347_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1348_recIdents;
          Dafny.ISequence<Dafny.Rune> _out191;
          bool _out192;
          bool _out193;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
          DCOMP.COMP.GenExpr(_1344_expr, selfIdent, @params, true, out _out191, out _out192, out _out193, out _out194);
          _1345_exprString = _out191;
          _1346___v29 = _out192;
          _1347_recErased = _out193;
          _1348_recIdents = _out194;
          _1345_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1345_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1348_recIdents;
          if (isLast) {
            generated = _1345_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1345_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source102.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source102.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1349___mcc_h23 = _source102.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1350_toLabel = _1349___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source106 = _1350_toLabel;
          if (_source106.is_Some) {
            Dafny.ISequence<Dafny.Rune> _1351___mcc_h179 = _source106.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _1352_lbl = _1351___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1352_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source102.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1353___mcc_h24 = _source102.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1354_body = _1353___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1355_paramI;
          _1355_paramI = BigInteger.Zero;
          while ((_1355_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1356_param;
            _1356_param = (@params).Select(_1355_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1356_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1356_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1355_paramI = (_1355_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1357_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1358_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out195;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out196;
          DCOMP.COMP.GenStmts(_1354_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out195, out _out196);
          _1357_bodyString = _out195;
          _1358_bodyIdents = _out196;
          readIdents = _1358_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1357_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source102.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source102.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1359___mcc_h25 = _source102.dtor_Print_a0;
        DAST._IExpression _1360_e = _1359___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1361_printedExpr;
          bool _1362_isOwned;
          bool _1363___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1364_recIdents;
          Dafny.ISequence<Dafny.Rune> _out197;
          bool _out198;
          bool _out199;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out200;
          DCOMP.COMP.GenExpr(_1360_e, selfIdent, @params, false, out _out197, out _out198, out _out199, out _out200);
          _1361_printedExpr = _out197;
          _1362_isOwned = _out198;
          _1363___v30 = _out199;
          _1364_recIdents = _out200;
          if (_1362_isOwned) {
            _1361_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1361_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1361_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1364_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source107 = e;
      if (_source107.is_Literal) {
        DAST._ILiteral _1365___mcc_h0 = _source107.dtor_Literal_a0;
        DAST._ILiteral _source108 = _1365___mcc_h0;
        if (_source108.is_BoolLiteral) {
          bool _1366___mcc_h1 = _source108.dtor_BoolLiteral_a0;
          if ((_1366___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source108.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1367___mcc_h2 = _source108.dtor_IntLiteral_a0;
          DAST._IType _1368___mcc_h3 = _source108.dtor_IntLiteral_a1;
          DAST._IType _1369_t = _1368___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1370_i = _1367___mcc_h2;
          {
            DAST._IType _source109 = _1369_t;
            if (_source109.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1371___mcc_h237 = _source109.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1372___mcc_h238 = _source109.dtor_typeArgs;
              DAST._IResolvedType _1373___mcc_h239 = _source109.dtor_resolved;
              DAST._IType _1374_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1375_genType;
                Dafny.ISequence<Dafny.Rune> _out201;
                _out201 = DCOMP.COMP.GenType(_1374_o, false, false);
                _1375_genType = _out201;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1375_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source109.is_Nullable) {
              DAST._IType _1376___mcc_h243 = _source109.dtor_Nullable_a0;
              DAST._IType _1377_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1378_genType;
                Dafny.ISequence<Dafny.Rune> _out202;
                _out202 = DCOMP.COMP.GenType(_1377_o, false, false);
                _1378_genType = _out202;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1378_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source109.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1379___mcc_h245 = _source109.dtor_Tuple_a0;
              DAST._IType _1380_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1381_genType;
                Dafny.ISequence<Dafny.Rune> _out203;
                _out203 = DCOMP.COMP.GenType(_1380_o, false, false);
                _1381_genType = _out203;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1381_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source109.is_Array) {
              DAST._IType _1382___mcc_h247 = _source109.dtor_element;
              BigInteger _1383___mcc_h248 = _source109.dtor_dims;
              DAST._IType _1384_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1385_genType;
                Dafny.ISequence<Dafny.Rune> _out204;
                _out204 = DCOMP.COMP.GenType(_1384_o, false, false);
                _1385_genType = _out204;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1385_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source109.is_Seq) {
              DAST._IType _1386___mcc_h251 = _source109.dtor_element;
              DAST._IType _1387_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1388_genType;
                Dafny.ISequence<Dafny.Rune> _out205;
                _out205 = DCOMP.COMP.GenType(_1387_o, false, false);
                _1388_genType = _out205;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1388_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source109.is_Set) {
              DAST._IType _1389___mcc_h253 = _source109.dtor_element;
              DAST._IType _1390_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1391_genType;
                Dafny.ISequence<Dafny.Rune> _out206;
                _out206 = DCOMP.COMP.GenType(_1390_o, false, false);
                _1391_genType = _out206;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1391_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source109.is_Multiset) {
              DAST._IType _1392___mcc_h255 = _source109.dtor_element;
              DAST._IType _1393_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1394_genType;
                Dafny.ISequence<Dafny.Rune> _out207;
                _out207 = DCOMP.COMP.GenType(_1393_o, false, false);
                _1394_genType = _out207;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1394_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source109.is_Map) {
              DAST._IType _1395___mcc_h257 = _source109.dtor_key;
              DAST._IType _1396___mcc_h258 = _source109.dtor_value;
              DAST._IType _1397_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1398_genType;
                Dafny.ISequence<Dafny.Rune> _out208;
                _out208 = DCOMP.COMP.GenType(_1397_o, false, false);
                _1398_genType = _out208;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1398_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source109.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1399___mcc_h261 = _source109.dtor_args;
              DAST._IType _1400___mcc_h262 = _source109.dtor_result;
              DAST._IType _1401_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1402_genType;
                Dafny.ISequence<Dafny.Rune> _out209;
                _out209 = DCOMP.COMP.GenType(_1401_o, false, false);
                _1402_genType = _out209;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1402_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source109.is_Primitive) {
              DAST._IPrimitive _1403___mcc_h265 = _source109.dtor_Primitive_a0;
              DAST._IPrimitive _source110 = _1403___mcc_h265;
              if (_source110.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source110.is_Real) {
                DAST._IType _1404_o = _1369_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1405_genType;
                  Dafny.ISequence<Dafny.Rune> _out210;
                  _out210 = DCOMP.COMP.GenType(_1404_o, false, false);
                  _1405_genType = _out210;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1405_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source110.is_String) {
                DAST._IType _1406_o = _1369_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1407_genType;
                  Dafny.ISequence<Dafny.Rune> _out211;
                  _out211 = DCOMP.COMP.GenType(_1406_o, false, false);
                  _1407_genType = _out211;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1407_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source110.is_Bool) {
                DAST._IType _1408_o = _1369_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1409_genType;
                  Dafny.ISequence<Dafny.Rune> _out212;
                  _out212 = DCOMP.COMP.GenType(_1408_o, false, false);
                  _1409_genType = _out212;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1409_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1410_o = _1369_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1411_genType;
                  Dafny.ISequence<Dafny.Rune> _out213;
                  _out213 = DCOMP.COMP.GenType(_1410_o, false, false);
                  _1411_genType = _out213;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1411_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source109.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1412___mcc_h267 = _source109.dtor_Passthrough_a0;
              DAST._IType _1413_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1414_genType;
                Dafny.ISequence<Dafny.Rune> _out214;
                _out214 = DCOMP.COMP.GenType(_1413_o, false, false);
                _1414_genType = _out214;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1414_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1415___mcc_h269 = _source109.dtor_TypeArg_a0;
              DAST._IType _1416_o = _1369_t;
              {
                Dafny.ISequence<Dafny.Rune> _1417_genType;
                Dafny.ISequence<Dafny.Rune> _out215;
                _out215 = DCOMP.COMP.GenType(_1416_o, false, false);
                _1417_genType = _out215;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1370_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1417_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source108.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1418___mcc_h4 = _source108.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1419___mcc_h5 = _source108.dtor_DecLiteral_a1;
          DAST._IType _1420___mcc_h6 = _source108.dtor_DecLiteral_a2;
          DAST._IType _1421_t = _1420___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1422_d = _1419___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1423_n = _1418___mcc_h4;
          {
            DAST._IType _source111 = _1421_t;
            if (_source111.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1424___mcc_h271 = _source111.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1425___mcc_h272 = _source111.dtor_typeArgs;
              DAST._IResolvedType _1426___mcc_h273 = _source111.dtor_resolved;
              DAST._IType _1427_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1428_genType;
                Dafny.ISequence<Dafny.Rune> _out216;
                _out216 = DCOMP.COMP.GenType(_1427_o, false, false);
                _1428_genType = _out216;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1428_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source111.is_Nullable) {
              DAST._IType _1429___mcc_h277 = _source111.dtor_Nullable_a0;
              DAST._IType _1430_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1431_genType;
                Dafny.ISequence<Dafny.Rune> _out217;
                _out217 = DCOMP.COMP.GenType(_1430_o, false, false);
                _1431_genType = _out217;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1431_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source111.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1432___mcc_h279 = _source111.dtor_Tuple_a0;
              DAST._IType _1433_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1434_genType;
                Dafny.ISequence<Dafny.Rune> _out218;
                _out218 = DCOMP.COMP.GenType(_1433_o, false, false);
                _1434_genType = _out218;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1434_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source111.is_Array) {
              DAST._IType _1435___mcc_h281 = _source111.dtor_element;
              BigInteger _1436___mcc_h282 = _source111.dtor_dims;
              DAST._IType _1437_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1438_genType;
                Dafny.ISequence<Dafny.Rune> _out219;
                _out219 = DCOMP.COMP.GenType(_1437_o, false, false);
                _1438_genType = _out219;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1438_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source111.is_Seq) {
              DAST._IType _1439___mcc_h285 = _source111.dtor_element;
              DAST._IType _1440_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1441_genType;
                Dafny.ISequence<Dafny.Rune> _out220;
                _out220 = DCOMP.COMP.GenType(_1440_o, false, false);
                _1441_genType = _out220;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1441_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source111.is_Set) {
              DAST._IType _1442___mcc_h287 = _source111.dtor_element;
              DAST._IType _1443_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1444_genType;
                Dafny.ISequence<Dafny.Rune> _out221;
                _out221 = DCOMP.COMP.GenType(_1443_o, false, false);
                _1444_genType = _out221;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1444_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source111.is_Multiset) {
              DAST._IType _1445___mcc_h289 = _source111.dtor_element;
              DAST._IType _1446_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1447_genType;
                Dafny.ISequence<Dafny.Rune> _out222;
                _out222 = DCOMP.COMP.GenType(_1446_o, false, false);
                _1447_genType = _out222;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1447_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source111.is_Map) {
              DAST._IType _1448___mcc_h291 = _source111.dtor_key;
              DAST._IType _1449___mcc_h292 = _source111.dtor_value;
              DAST._IType _1450_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1451_genType;
                Dafny.ISequence<Dafny.Rune> _out223;
                _out223 = DCOMP.COMP.GenType(_1450_o, false, false);
                _1451_genType = _out223;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1451_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source111.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1452___mcc_h295 = _source111.dtor_args;
              DAST._IType _1453___mcc_h296 = _source111.dtor_result;
              DAST._IType _1454_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1455_genType;
                Dafny.ISequence<Dafny.Rune> _out224;
                _out224 = DCOMP.COMP.GenType(_1454_o, false, false);
                _1455_genType = _out224;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1455_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source111.is_Primitive) {
              DAST._IPrimitive _1456___mcc_h299 = _source111.dtor_Primitive_a0;
              DAST._IPrimitive _source112 = _1456___mcc_h299;
              if (_source112.is_Int) {
                DAST._IType _1457_o = _1421_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1458_genType;
                  Dafny.ISequence<Dafny.Rune> _out225;
                  _out225 = DCOMP.COMP.GenType(_1457_o, false, false);
                  _1458_genType = _out225;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1458_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source112.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source112.is_String) {
                DAST._IType _1459_o = _1421_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1460_genType;
                  Dafny.ISequence<Dafny.Rune> _out226;
                  _out226 = DCOMP.COMP.GenType(_1459_o, false, false);
                  _1460_genType = _out226;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1460_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source112.is_Bool) {
                DAST._IType _1461_o = _1421_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1462_genType;
                  Dafny.ISequence<Dafny.Rune> _out227;
                  _out227 = DCOMP.COMP.GenType(_1461_o, false, false);
                  _1462_genType = _out227;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1462_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1463_o = _1421_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1464_genType;
                  Dafny.ISequence<Dafny.Rune> _out228;
                  _out228 = DCOMP.COMP.GenType(_1463_o, false, false);
                  _1464_genType = _out228;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1464_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source111.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1465___mcc_h301 = _source111.dtor_Passthrough_a0;
              DAST._IType _1466_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1467_genType;
                Dafny.ISequence<Dafny.Rune> _out229;
                _out229 = DCOMP.COMP.GenType(_1466_o, false, false);
                _1467_genType = _out229;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1467_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1468___mcc_h303 = _source111.dtor_TypeArg_a0;
              DAST._IType _1469_o = _1421_t;
              {
                Dafny.ISequence<Dafny.Rune> _1470_genType;
                Dafny.ISequence<Dafny.Rune> _out230;
                _out230 = DCOMP.COMP.GenType(_1469_o, false, false);
                _1470_genType = _out230;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1423_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1422_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1470_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source108.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1471___mcc_h7 = _source108.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1472_l = _1471___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1472_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source108.is_CharLiteral) {
          Dafny.Rune _1473___mcc_h8 = _source108.dtor_CharLiteral_a0;
          Dafny.Rune _1474_c = _1473___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_1474_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1475___mcc_h9 = _source108.dtor_Null_a0;
          DAST._IType _1476_tpe = _1475___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1477_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out231;
            _out231 = DCOMP.COMP.GenType(_1476_tpe, false, false);
            _1477_tpeGen = _out231;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1477_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source107.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1478___mcc_h10 = _source107.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1479_name = _1478___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1479_name);
          if (!((@params).Contains(_1479_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1479_name);
        }
      } else if (_source107.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1480___mcc_h11 = _source107.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1481_path = _1480___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out232;
          _out232 = DCOMP.COMP.GenPath(_1481_path);
          s = _out232;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source107.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1482___mcc_h12 = _source107.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1483_values = _1482___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1484_i;
          _1484_i = BigInteger.Zero;
          while ((_1484_i) < (new BigInteger((_1483_values).Count))) {
            if ((_1484_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1485_recursiveGen;
            bool _1486___v31;
            bool _1487_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1488_recIdents;
            Dafny.ISequence<Dafny.Rune> _out233;
            bool _out234;
            bool _out235;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out236;
            DCOMP.COMP.GenExpr((_1483_values).Select(_1484_i), selfIdent, @params, true, out _out233, out _out234, out _out235, out _out236);
            _1485_recursiveGen = _out233;
            _1486___v31 = _out234;
            _1487_isErased = _out235;
            _1488_recIdents = _out236;
            if (_1487_isErased) {
              _1485_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1485_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1485_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1488_recIdents);
            _1484_i = (_1484_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source107.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1489___mcc_h13 = _source107.dtor_path;
        Dafny.ISequence<DAST._IType> _1490___mcc_h14 = _source107.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1491___mcc_h15 = _source107.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1492_args = _1491___mcc_h15;
        Dafny.ISequence<DAST._IType> _1493_typeArgs = _1490___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1494_path = _1489___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1495_path;
          Dafny.ISequence<Dafny.Rune> _out237;
          _out237 = DCOMP.COMP.GenPath(_1494_path);
          _1495_path = _out237;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1495_path);
          if ((new BigInteger((_1493_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1496_i;
            _1496_i = BigInteger.Zero;
            while ((_1496_i) < (new BigInteger((_1493_typeArgs).Count))) {
              if ((_1496_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1497_typeString;
              Dafny.ISequence<Dafny.Rune> _out238;
              _out238 = DCOMP.COMP.GenType((_1493_typeArgs).Select(_1496_i), false, false);
              _1497_typeString = _out238;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1497_typeString);
              _1496_i = (_1496_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1498_i;
          _1498_i = BigInteger.Zero;
          while ((_1498_i) < (new BigInteger((_1492_args).Count))) {
            if ((_1498_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1499_recursiveGen;
            bool _1500___v32;
            bool _1501_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1502_recIdents;
            Dafny.ISequence<Dafny.Rune> _out239;
            bool _out240;
            bool _out241;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
            DCOMP.COMP.GenExpr((_1492_args).Select(_1498_i), selfIdent, @params, true, out _out239, out _out240, out _out241, out _out242);
            _1499_recursiveGen = _out239;
            _1500___v32 = _out240;
            _1501_isErased = _out241;
            _1502_recIdents = _out242;
            if (_1501_isErased) {
              _1499_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1499_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1499_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1502_recIdents);
            _1498_i = (_1498_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source107.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1503___mcc_h16 = _source107.dtor_dims;
        DAST._IType _1504___mcc_h17 = _source107.dtor_typ;
        DAST._IType _1505_typ = _1504___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1506_dims = _1503___mcc_h16;
        {
          BigInteger _1507_i;
          _1507_i = (new BigInteger((_1506_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1508_genTyp;
          Dafny.ISequence<Dafny.Rune> _out243;
          _out243 = DCOMP.COMP.GenType(_1505_typ, false, false);
          _1508_genTyp = _out243;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1508_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1507_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1509_recursiveGen;
            bool _1510___v33;
            bool _1511_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1512_recIdents;
            Dafny.ISequence<Dafny.Rune> _out244;
            bool _out245;
            bool _out246;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
            DCOMP.COMP.GenExpr((_1506_dims).Select(_1507_i), selfIdent, @params, true, out _out244, out _out245, out _out246, out _out247);
            _1509_recursiveGen = _out244;
            _1510___v33 = _out245;
            _1511_isErased = _out246;
            _1512_recIdents = _out247;
            if (!(_1511_isErased)) {
              _1509_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1509_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1509_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1512_recIdents);
            _1507_i = (_1507_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source107.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1513___mcc_h18 = _source107.dtor_path;
        Dafny.ISequence<DAST._IType> _1514___mcc_h19 = _source107.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1515___mcc_h20 = _source107.dtor_variant;
        bool _1516___mcc_h21 = _source107.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1517___mcc_h22 = _source107.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1518_values = _1517___mcc_h22;
        bool _1519_isCo = _1516___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1520_variant = _1515___mcc_h20;
        Dafny.ISequence<DAST._IType> _1521_typeArgs = _1514___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1522_path = _1513___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1523_path;
          Dafny.ISequence<Dafny.Rune> _out248;
          _out248 = DCOMP.COMP.GenPath(_1522_path);
          _1523_path = _out248;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1523_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1521_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1524_i;
            _1524_i = BigInteger.Zero;
            while ((_1524_i) < (new BigInteger((_1521_typeArgs).Count))) {
              if ((_1524_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1525_typeString;
              Dafny.ISequence<Dafny.Rune> _out249;
              _out249 = DCOMP.COMP.GenType((_1521_typeArgs).Select(_1524_i), false, false);
              _1525_typeString = _out249;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1525_typeString);
              _1524_i = (_1524_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1520_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1526_i;
          _1526_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1526_i) < (new BigInteger((_1518_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs8 = (_1518_values).Select(_1526_i);
            Dafny.ISequence<Dafny.Rune> _1527_name = _let_tmp_rhs8.dtor__0;
            DAST._IExpression _1528_value = _let_tmp_rhs8.dtor__1;
            if ((_1526_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1519_isCo) {
              Dafny.ISequence<Dafny.Rune> _1529_recursiveGen;
              bool _1530___v34;
              bool _1531_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1532_recIdents;
              Dafny.ISequence<Dafny.Rune> _out250;
              bool _out251;
              bool _out252;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out253;
              DCOMP.COMP.GenExpr(_1528_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out250, out _out251, out _out252, out _out253);
              _1529_recursiveGen = _out250;
              _1530___v34 = _out251;
              _1531_isErased = _out252;
              _1532_recIdents = _out253;
              if (!(_1531_isErased)) {
                _1529_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1529_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1529_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1529_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1532_recIdents);
              Dafny.ISequence<Dafny.Rune> _1533_allReadCloned;
              _1533_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1532_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1534_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_1532_recIdents).Elements) {
                  _1534_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_1532_recIdents).Contains(_1534_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _1533_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1533_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1534_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1534_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1532_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1532_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1534_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1527_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1533_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1529_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1535_recursiveGen;
              bool _1536___v35;
              bool _1537_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1538_recIdents;
              Dafny.ISequence<Dafny.Rune> _out254;
              bool _out255;
              bool _out256;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out257;
              DCOMP.COMP.GenExpr(_1528_value, selfIdent, @params, true, out _out254, out _out255, out _out256, out _out257);
              _1535_recursiveGen = _out254;
              _1536___v35 = _out255;
              _1537_isErased = _out256;
              _1538_recIdents = _out257;
              if (!(_1537_isErased)) {
                _1535_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1535_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1535_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1535_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1527_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1535_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1538_recIdents);
            }
            _1526_i = (_1526_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source107.is_Convert) {
        DAST._IExpression _1539___mcc_h23 = _source107.dtor_value;
        DAST._IType _1540___mcc_h24 = _source107.dtor_from;
        DAST._IType _1541___mcc_h25 = _source107.dtor_typ;
        DAST._IType _1542_toTpe = _1541___mcc_h25;
        DAST._IType _1543_fromTpe = _1540___mcc_h24;
        DAST._IExpression _1544_expr = _1539___mcc_h23;
        {
          if (object.Equals(_1543_fromTpe, _1542_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1545_recursiveGen;
            bool _1546_recOwned;
            bool _1547_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1548_recIdents;
            Dafny.ISequence<Dafny.Rune> _out258;
            bool _out259;
            bool _out260;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out261;
            DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out258, out _out259, out _out260, out _out261);
            _1545_recursiveGen = _out258;
            _1546_recOwned = _out259;
            _1547_recErased = _out260;
            _1548_recIdents = _out261;
            s = _1545_recursiveGen;
            isOwned = _1546_recOwned;
            isErased = _1547_recErased;
            readIdents = _1548_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source113 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1543_fromTpe, _1542_toTpe);
            DAST._IType _1549___mcc_h305 = _source113.dtor__0;
            DAST._IType _1550___mcc_h306 = _source113.dtor__1;
            DAST._IType _source114 = _1549___mcc_h305;
            if (_source114.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1551___mcc_h309 = _source114.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1552___mcc_h310 = _source114.dtor_typeArgs;
              DAST._IResolvedType _1553___mcc_h311 = _source114.dtor_resolved;
              DAST._IResolvedType _source115 = _1553___mcc_h311;
              if (_source115.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1554___mcc_h321 = _source115.dtor_path;
                DAST._IType _source116 = _1550___mcc_h306;
                if (_source116.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1555___mcc_h325 = _source116.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1556___mcc_h326 = _source116.dtor_typeArgs;
                  DAST._IResolvedType _1557___mcc_h327 = _source116.dtor_resolved;
                  DAST._IResolvedType _source117 = _1557___mcc_h327;
                  if (_source117.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1558___mcc_h331 = _source117.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1559_recursiveGen;
                      bool _1560_recOwned;
                      bool _1561_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1562_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out262;
                      bool _out263;
                      bool _out264;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out265;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out262, out _out263, out _out264, out _out265);
                      _1559_recursiveGen = _out262;
                      _1560_recOwned = _out263;
                      _1561_recErased = _out264;
                      _1562_recIdents = _out265;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1559_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1560_recOwned;
                      isErased = _1561_recErased;
                      readIdents = _1562_recIdents;
                    }
                  } else if (_source117.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1563___mcc_h333 = _source117.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1564_recursiveGen;
                      bool _1565_recOwned;
                      bool _1566_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1567_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out266;
                      bool _out267;
                      bool _out268;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out269;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out266, out _out267, out _out268, out _out269);
                      _1564_recursiveGen = _out266;
                      _1565_recOwned = _out267;
                      _1566_recErased = _out268;
                      _1567_recIdents = _out269;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1564_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1565_recOwned;
                      isErased = _1566_recErased;
                      readIdents = _1567_recIdents;
                    }
                  } else {
                    DAST._IType _1568___mcc_h335 = _source117.dtor_Newtype_a0;
                    DAST._IType _1569_b = _1568___mcc_h335;
                    {
                      if (object.Equals(_1543_fromTpe, _1569_b)) {
                        Dafny.ISequence<Dafny.Rune> _1570_recursiveGen;
                        bool _1571_recOwned;
                        bool _1572_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1573_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out270;
                        bool _out271;
                        bool _out272;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out273;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out270, out _out271, out _out272, out _out273);
                        _1570_recursiveGen = _out270;
                        _1571_recOwned = _out271;
                        _1572_recErased = _out272;
                        _1573_recIdents = _out273;
                        Dafny.ISequence<Dafny.Rune> _1574_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out274;
                        _out274 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                        _1574_rhsType = _out274;
                        Dafny.ISequence<Dafny.Rune> _1575_uneraseFn;
                        _1575_uneraseFn = ((_1571_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1574_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1575_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1570_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1571_recOwned;
                        isErased = false;
                        readIdents = _1573_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out275;
                        bool _out276;
                        bool _out277;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1569_b), _1569_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                        s = _out275;
                        isOwned = _out276;
                        isErased = _out277;
                        readIdents = _out278;
                      }
                    }
                  }
                } else if (_source116.is_Nullable) {
                  DAST._IType _1576___mcc_h337 = _source116.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1577_recursiveGen;
                    bool _1578_recOwned;
                    bool _1579_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1580_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out279;
                    bool _out280;
                    bool _out281;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out282;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out279, out _out280, out _out281, out _out282);
                    _1577_recursiveGen = _out279;
                    _1578_recOwned = _out280;
                    _1579_recErased = _out281;
                    _1580_recIdents = _out282;
                    if (!(_1578_recOwned)) {
                      _1577_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1577_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1577_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1579_recErased;
                    readIdents = _1580_recIdents;
                  }
                } else if (_source116.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1581___mcc_h339 = _source116.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1582_recursiveGen;
                    bool _1583_recOwned;
                    bool _1584_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1585_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out283;
                    bool _out284;
                    bool _out285;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out286;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out283, out _out284, out _out285, out _out286);
                    _1582_recursiveGen = _out283;
                    _1583_recOwned = _out284;
                    _1584_recErased = _out285;
                    _1585_recIdents = _out286;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1582_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1583_recOwned;
                    isErased = _1584_recErased;
                    readIdents = _1585_recIdents;
                  }
                } else if (_source116.is_Array) {
                  DAST._IType _1586___mcc_h341 = _source116.dtor_element;
                  BigInteger _1587___mcc_h342 = _source116.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1588_recursiveGen;
                    bool _1589_recOwned;
                    bool _1590_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1591_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out287;
                    bool _out288;
                    bool _out289;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out287, out _out288, out _out289, out _out290);
                    _1588_recursiveGen = _out287;
                    _1589_recOwned = _out288;
                    _1590_recErased = _out289;
                    _1591_recIdents = _out290;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1588_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1589_recOwned;
                    isErased = _1590_recErased;
                    readIdents = _1591_recIdents;
                  }
                } else if (_source116.is_Seq) {
                  DAST._IType _1592___mcc_h345 = _source116.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1593_recursiveGen;
                    bool _1594_recOwned;
                    bool _1595_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1596_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out291;
                    bool _out292;
                    bool _out293;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out294;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out291, out _out292, out _out293, out _out294);
                    _1593_recursiveGen = _out291;
                    _1594_recOwned = _out292;
                    _1595_recErased = _out293;
                    _1596_recIdents = _out294;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1593_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1594_recOwned;
                    isErased = _1595_recErased;
                    readIdents = _1596_recIdents;
                  }
                } else if (_source116.is_Set) {
                  DAST._IType _1597___mcc_h347 = _source116.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1598_recursiveGen;
                    bool _1599_recOwned;
                    bool _1600_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1601_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out295;
                    bool _out296;
                    bool _out297;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out298;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out295, out _out296, out _out297, out _out298);
                    _1598_recursiveGen = _out295;
                    _1599_recOwned = _out296;
                    _1600_recErased = _out297;
                    _1601_recIdents = _out298;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1598_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1599_recOwned;
                    isErased = _1600_recErased;
                    readIdents = _1601_recIdents;
                  }
                } else if (_source116.is_Multiset) {
                  DAST._IType _1602___mcc_h349 = _source116.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1603_recursiveGen;
                    bool _1604_recOwned;
                    bool _1605_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1606_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out299;
                    bool _out300;
                    bool _out301;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out302;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out299, out _out300, out _out301, out _out302);
                    _1603_recursiveGen = _out299;
                    _1604_recOwned = _out300;
                    _1605_recErased = _out301;
                    _1606_recIdents = _out302;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1603_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1604_recOwned;
                    isErased = _1605_recErased;
                    readIdents = _1606_recIdents;
                  }
                } else if (_source116.is_Map) {
                  DAST._IType _1607___mcc_h351 = _source116.dtor_key;
                  DAST._IType _1608___mcc_h352 = _source116.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1609_recursiveGen;
                    bool _1610_recOwned;
                    bool _1611_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1612_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out303;
                    bool _out304;
                    bool _out305;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out306;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out303, out _out304, out _out305, out _out306);
                    _1609_recursiveGen = _out303;
                    _1610_recOwned = _out304;
                    _1611_recErased = _out305;
                    _1612_recIdents = _out306;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1609_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1610_recOwned;
                    isErased = _1611_recErased;
                    readIdents = _1612_recIdents;
                  }
                } else if (_source116.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1613___mcc_h355 = _source116.dtor_args;
                  DAST._IType _1614___mcc_h356 = _source116.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1615_recursiveGen;
                    bool _1616_recOwned;
                    bool _1617_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1618_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out307;
                    bool _out308;
                    bool _out309;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out310;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out307, out _out308, out _out309, out _out310);
                    _1615_recursiveGen = _out307;
                    _1616_recOwned = _out308;
                    _1617_recErased = _out309;
                    _1618_recIdents = _out310;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1615_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1616_recOwned;
                    isErased = _1617_recErased;
                    readIdents = _1618_recIdents;
                  }
                } else if (_source116.is_Primitive) {
                  DAST._IPrimitive _1619___mcc_h359 = _source116.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1620_recursiveGen;
                    bool _1621_recOwned;
                    bool _1622_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1623_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out311;
                    bool _out312;
                    bool _out313;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out314;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out311, out _out312, out _out313, out _out314);
                    _1620_recursiveGen = _out311;
                    _1621_recOwned = _out312;
                    _1622_recErased = _out313;
                    _1623_recIdents = _out314;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1620_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1621_recOwned;
                    isErased = _1622_recErased;
                    readIdents = _1623_recIdents;
                  }
                } else if (_source116.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1624___mcc_h361 = _source116.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1625_recursiveGen;
                    bool _1626_recOwned;
                    bool _1627_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1628_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out315;
                    bool _out316;
                    bool _out317;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out318;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out315, out _out316, out _out317, out _out318);
                    _1625_recursiveGen = _out315;
                    _1626_recOwned = _out316;
                    _1627_recErased = _out317;
                    _1628_recIdents = _out318;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1626_recOwned;
                    isErased = _1627_recErased;
                    readIdents = _1628_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1629___mcc_h363 = _source116.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1630_recursiveGen;
                    bool _1631_recOwned;
                    bool _1632_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1633_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out319;
                    bool _out320;
                    bool _out321;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out322;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out319, out _out320, out _out321, out _out322);
                    _1630_recursiveGen = _out319;
                    _1631_recOwned = _out320;
                    _1632_recErased = _out321;
                    _1633_recIdents = _out322;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1630_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1631_recOwned;
                    isErased = _1632_recErased;
                    readIdents = _1633_recIdents;
                  }
                }
              } else if (_source115.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1634___mcc_h365 = _source115.dtor_path;
                DAST._IType _source118 = _1550___mcc_h306;
                if (_source118.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1635___mcc_h369 = _source118.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1636___mcc_h370 = _source118.dtor_typeArgs;
                  DAST._IResolvedType _1637___mcc_h371 = _source118.dtor_resolved;
                  DAST._IResolvedType _source119 = _1637___mcc_h371;
                  if (_source119.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1638___mcc_h375 = _source119.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1639_recursiveGen;
                      bool _1640_recOwned;
                      bool _1641_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1642_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out323;
                      bool _out324;
                      bool _out325;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out326;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out323, out _out324, out _out325, out _out326);
                      _1639_recursiveGen = _out323;
                      _1640_recOwned = _out324;
                      _1641_recErased = _out325;
                      _1642_recIdents = _out326;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1639_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1640_recOwned;
                      isErased = _1641_recErased;
                      readIdents = _1642_recIdents;
                    }
                  } else if (_source119.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1643___mcc_h377 = _source119.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1644_recursiveGen;
                      bool _1645_recOwned;
                      bool _1646_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1647_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out327;
                      bool _out328;
                      bool _out329;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out330;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out327, out _out328, out _out329, out _out330);
                      _1644_recursiveGen = _out327;
                      _1645_recOwned = _out328;
                      _1646_recErased = _out329;
                      _1647_recIdents = _out330;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1644_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1645_recOwned;
                      isErased = _1646_recErased;
                      readIdents = _1647_recIdents;
                    }
                  } else {
                    DAST._IType _1648___mcc_h379 = _source119.dtor_Newtype_a0;
                    DAST._IType _1649_b = _1648___mcc_h379;
                    {
                      if (object.Equals(_1543_fromTpe, _1649_b)) {
                        Dafny.ISequence<Dafny.Rune> _1650_recursiveGen;
                        bool _1651_recOwned;
                        bool _1652_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1653_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out331;
                        bool _out332;
                        bool _out333;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out334;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out331, out _out332, out _out333, out _out334);
                        _1650_recursiveGen = _out331;
                        _1651_recOwned = _out332;
                        _1652_recErased = _out333;
                        _1653_recIdents = _out334;
                        Dafny.ISequence<Dafny.Rune> _1654_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out335;
                        _out335 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                        _1654_rhsType = _out335;
                        Dafny.ISequence<Dafny.Rune> _1655_uneraseFn;
                        _1655_uneraseFn = ((_1651_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1654_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1655_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1650_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1651_recOwned;
                        isErased = false;
                        readIdents = _1653_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out336;
                        bool _out337;
                        bool _out338;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1649_b), _1649_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                        s = _out336;
                        isOwned = _out337;
                        isErased = _out338;
                        readIdents = _out339;
                      }
                    }
                  }
                } else if (_source118.is_Nullable) {
                  DAST._IType _1656___mcc_h381 = _source118.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1657_recursiveGen;
                    bool _1658_recOwned;
                    bool _1659_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1660_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out340;
                    bool _out341;
                    bool _out342;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                    _1657_recursiveGen = _out340;
                    _1658_recOwned = _out341;
                    _1659_recErased = _out342;
                    _1660_recIdents = _out343;
                    if (!(_1658_recOwned)) {
                      _1657_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1657_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1657_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1659_recErased;
                    readIdents = _1660_recIdents;
                  }
                } else if (_source118.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1661___mcc_h383 = _source118.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1662_recursiveGen;
                    bool _1663_recOwned;
                    bool _1664_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1665_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out344;
                    bool _out345;
                    bool _out346;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                    _1662_recursiveGen = _out344;
                    _1663_recOwned = _out345;
                    _1664_recErased = _out346;
                    _1665_recIdents = _out347;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1662_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1663_recOwned;
                    isErased = _1664_recErased;
                    readIdents = _1665_recIdents;
                  }
                } else if (_source118.is_Array) {
                  DAST._IType _1666___mcc_h385 = _source118.dtor_element;
                  BigInteger _1667___mcc_h386 = _source118.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1668_recursiveGen;
                    bool _1669_recOwned;
                    bool _1670_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1671_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out348;
                    bool _out349;
                    bool _out350;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out348, out _out349, out _out350, out _out351);
                    _1668_recursiveGen = _out348;
                    _1669_recOwned = _out349;
                    _1670_recErased = _out350;
                    _1671_recIdents = _out351;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1668_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1669_recOwned;
                    isErased = _1670_recErased;
                    readIdents = _1671_recIdents;
                  }
                } else if (_source118.is_Seq) {
                  DAST._IType _1672___mcc_h389 = _source118.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1673_recursiveGen;
                    bool _1674_recOwned;
                    bool _1675_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1676_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out352;
                    bool _out353;
                    bool _out354;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out355;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out352, out _out353, out _out354, out _out355);
                    _1673_recursiveGen = _out352;
                    _1674_recOwned = _out353;
                    _1675_recErased = _out354;
                    _1676_recIdents = _out355;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1673_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1674_recOwned;
                    isErased = _1675_recErased;
                    readIdents = _1676_recIdents;
                  }
                } else if (_source118.is_Set) {
                  DAST._IType _1677___mcc_h391 = _source118.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1678_recursiveGen;
                    bool _1679_recOwned;
                    bool _1680_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1681_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out356;
                    bool _out357;
                    bool _out358;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out359;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out356, out _out357, out _out358, out _out359);
                    _1678_recursiveGen = _out356;
                    _1679_recOwned = _out357;
                    _1680_recErased = _out358;
                    _1681_recIdents = _out359;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1678_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1679_recOwned;
                    isErased = _1680_recErased;
                    readIdents = _1681_recIdents;
                  }
                } else if (_source118.is_Multiset) {
                  DAST._IType _1682___mcc_h393 = _source118.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1683_recursiveGen;
                    bool _1684_recOwned;
                    bool _1685_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1686_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out360;
                    bool _out361;
                    bool _out362;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out363;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out360, out _out361, out _out362, out _out363);
                    _1683_recursiveGen = _out360;
                    _1684_recOwned = _out361;
                    _1685_recErased = _out362;
                    _1686_recIdents = _out363;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1683_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1684_recOwned;
                    isErased = _1685_recErased;
                    readIdents = _1686_recIdents;
                  }
                } else if (_source118.is_Map) {
                  DAST._IType _1687___mcc_h395 = _source118.dtor_key;
                  DAST._IType _1688___mcc_h396 = _source118.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1689_recursiveGen;
                    bool _1690_recOwned;
                    bool _1691_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1692_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out364;
                    bool _out365;
                    bool _out366;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out367;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out364, out _out365, out _out366, out _out367);
                    _1689_recursiveGen = _out364;
                    _1690_recOwned = _out365;
                    _1691_recErased = _out366;
                    _1692_recIdents = _out367;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1689_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1690_recOwned;
                    isErased = _1691_recErased;
                    readIdents = _1692_recIdents;
                  }
                } else if (_source118.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1693___mcc_h399 = _source118.dtor_args;
                  DAST._IType _1694___mcc_h400 = _source118.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1695_recursiveGen;
                    bool _1696_recOwned;
                    bool _1697_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1698_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out368;
                    bool _out369;
                    bool _out370;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out368, out _out369, out _out370, out _out371);
                    _1695_recursiveGen = _out368;
                    _1696_recOwned = _out369;
                    _1697_recErased = _out370;
                    _1698_recIdents = _out371;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1695_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1696_recOwned;
                    isErased = _1697_recErased;
                    readIdents = _1698_recIdents;
                  }
                } else if (_source118.is_Primitive) {
                  DAST._IPrimitive _1699___mcc_h403 = _source118.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1700_recursiveGen;
                    bool _1701_recOwned;
                    bool _1702_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1703_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out372;
                    bool _out373;
                    bool _out374;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out375;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out372, out _out373, out _out374, out _out375);
                    _1700_recursiveGen = _out372;
                    _1701_recOwned = _out373;
                    _1702_recErased = _out374;
                    _1703_recIdents = _out375;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1700_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1701_recOwned;
                    isErased = _1702_recErased;
                    readIdents = _1703_recIdents;
                  }
                } else if (_source118.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1704___mcc_h405 = _source118.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1705_recursiveGen;
                    bool _1706_recOwned;
                    bool _1707_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1708_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out376;
                    bool _out377;
                    bool _out378;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out379;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out376, out _out377, out _out378, out _out379);
                    _1705_recursiveGen = _out376;
                    _1706_recOwned = _out377;
                    _1707_recErased = _out378;
                    _1708_recIdents = _out379;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1705_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1706_recOwned;
                    isErased = _1707_recErased;
                    readIdents = _1708_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1709___mcc_h407 = _source118.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1710_recursiveGen;
                    bool _1711_recOwned;
                    bool _1712_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1713_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out380;
                    bool _out381;
                    bool _out382;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out383;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out380, out _out381, out _out382, out _out383);
                    _1710_recursiveGen = _out380;
                    _1711_recOwned = _out381;
                    _1712_recErased = _out382;
                    _1713_recIdents = _out383;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1710_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1711_recOwned;
                    isErased = _1712_recErased;
                    readIdents = _1713_recIdents;
                  }
                }
              } else {
                DAST._IType _1714___mcc_h409 = _source115.dtor_Newtype_a0;
                DAST._IType _source120 = _1550___mcc_h306;
                if (_source120.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1715___mcc_h413 = _source120.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1716___mcc_h414 = _source120.dtor_typeArgs;
                  DAST._IResolvedType _1717___mcc_h415 = _source120.dtor_resolved;
                  DAST._IResolvedType _source121 = _1717___mcc_h415;
                  if (_source121.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1718___mcc_h422 = _source121.dtor_path;
                    DAST._IType _1719_b = _1714___mcc_h409;
                    {
                      if (object.Equals(_1719_b, _1542_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1720_recursiveGen;
                        bool _1721_recOwned;
                        bool _1722_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1723_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out384;
                        bool _out385;
                        bool _out386;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out387;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out384, out _out385, out _out386, out _out387);
                        _1720_recursiveGen = _out384;
                        _1721_recOwned = _out385;
                        _1722_recErased = _out386;
                        _1723_recIdents = _out387;
                        Dafny.ISequence<Dafny.Rune> _1724_uneraseFn;
                        _1724_uneraseFn = ((_1721_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1724_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1721_recOwned;
                        isErased = true;
                        readIdents = _1723_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out388;
                        bool _out389;
                        bool _out390;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out391;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1719_b), _1719_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out388, out _out389, out _out390, out _out391);
                        s = _out388;
                        isOwned = _out389;
                        isErased = _out390;
                        readIdents = _out391;
                      }
                    }
                  } else if (_source121.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1725___mcc_h425 = _source121.dtor_path;
                    DAST._IType _1726_b = _1714___mcc_h409;
                    {
                      if (object.Equals(_1726_b, _1542_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1727_recursiveGen;
                        bool _1728_recOwned;
                        bool _1729_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1730_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out392;
                        bool _out393;
                        bool _out394;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out395;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out392, out _out393, out _out394, out _out395);
                        _1727_recursiveGen = _out392;
                        _1728_recOwned = _out393;
                        _1729_recErased = _out394;
                        _1730_recIdents = _out395;
                        Dafny.ISequence<Dafny.Rune> _1731_uneraseFn;
                        _1731_uneraseFn = ((_1728_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1731_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1727_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1728_recOwned;
                        isErased = true;
                        readIdents = _1730_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out396;
                        bool _out397;
                        bool _out398;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out399;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1726_b), _1726_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out396, out _out397, out _out398, out _out399);
                        s = _out396;
                        isOwned = _out397;
                        isErased = _out398;
                        readIdents = _out399;
                      }
                    }
                  } else {
                    DAST._IType _1732___mcc_h428 = _source121.dtor_Newtype_a0;
                    DAST._IType _1733_b = _1732___mcc_h428;
                    {
                      if (object.Equals(_1543_fromTpe, _1733_b)) {
                        Dafny.ISequence<Dafny.Rune> _1734_recursiveGen;
                        bool _1735_recOwned;
                        bool _1736_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1737_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out400;
                        bool _out401;
                        bool _out402;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out403;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out400, out _out401, out _out402, out _out403);
                        _1734_recursiveGen = _out400;
                        _1735_recOwned = _out401;
                        _1736_recErased = _out402;
                        _1737_recIdents = _out403;
                        Dafny.ISequence<Dafny.Rune> _1738_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out404;
                        _out404 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                        _1738_rhsType = _out404;
                        Dafny.ISequence<Dafny.Rune> _1739_uneraseFn;
                        _1739_uneraseFn = ((_1735_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1738_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1739_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1734_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1735_recOwned;
                        isErased = false;
                        readIdents = _1737_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out405;
                        bool _out406;
                        bool _out407;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1733_b), _1733_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                        s = _out405;
                        isOwned = _out406;
                        isErased = _out407;
                        readIdents = _out408;
                      }
                    }
                  }
                } else if (_source120.is_Nullable) {
                  DAST._IType _1740___mcc_h431 = _source120.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1741_recursiveGen;
                    bool _1742_recOwned;
                    bool _1743_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1744_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out409;
                    bool _out410;
                    bool _out411;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                    _1741_recursiveGen = _out409;
                    _1742_recOwned = _out410;
                    _1743_recErased = _out411;
                    _1744_recIdents = _out412;
                    if (!(_1742_recOwned)) {
                      _1741_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1741_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1741_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1743_recErased;
                    readIdents = _1744_recIdents;
                  }
                } else if (_source120.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1745___mcc_h434 = _source120.dtor_Tuple_a0;
                  DAST._IType _1746_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1746_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1747_recursiveGen;
                      bool _1748_recOwned;
                      bool _1749_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1750_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out413;
                      bool _out414;
                      bool _out415;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                      _1747_recursiveGen = _out413;
                      _1748_recOwned = _out414;
                      _1749_recErased = _out415;
                      _1750_recIdents = _out416;
                      Dafny.ISequence<Dafny.Rune> _1751_uneraseFn;
                      _1751_uneraseFn = ((_1748_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1751_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1747_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1748_recOwned;
                      isErased = true;
                      readIdents = _1750_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out417;
                      bool _out418;
                      bool _out419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1746_b), _1746_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out417, out _out418, out _out419, out _out420);
                      s = _out417;
                      isOwned = _out418;
                      isErased = _out419;
                      readIdents = _out420;
                    }
                  }
                } else if (_source120.is_Array) {
                  DAST._IType _1752___mcc_h437 = _source120.dtor_element;
                  BigInteger _1753___mcc_h438 = _source120.dtor_dims;
                  DAST._IType _1754_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1754_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1755_recursiveGen;
                      bool _1756_recOwned;
                      bool _1757_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1758_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out421;
                      bool _out422;
                      bool _out423;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out421, out _out422, out _out423, out _out424);
                      _1755_recursiveGen = _out421;
                      _1756_recOwned = _out422;
                      _1757_recErased = _out423;
                      _1758_recIdents = _out424;
                      Dafny.ISequence<Dafny.Rune> _1759_uneraseFn;
                      _1759_uneraseFn = ((_1756_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1759_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1755_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1756_recOwned;
                      isErased = true;
                      readIdents = _1758_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out425;
                      bool _out426;
                      bool _out427;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1754_b), _1754_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out425, out _out426, out _out427, out _out428);
                      s = _out425;
                      isOwned = _out426;
                      isErased = _out427;
                      readIdents = _out428;
                    }
                  }
                } else if (_source120.is_Seq) {
                  DAST._IType _1760___mcc_h443 = _source120.dtor_element;
                  DAST._IType _1761_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1761_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1762_recursiveGen;
                      bool _1763_recOwned;
                      bool _1764_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1765_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out429;
                      bool _out430;
                      bool _out431;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out429, out _out430, out _out431, out _out432);
                      _1762_recursiveGen = _out429;
                      _1763_recOwned = _out430;
                      _1764_recErased = _out431;
                      _1765_recIdents = _out432;
                      Dafny.ISequence<Dafny.Rune> _1766_uneraseFn;
                      _1766_uneraseFn = ((_1763_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1766_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1762_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1763_recOwned;
                      isErased = true;
                      readIdents = _1765_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out433;
                      bool _out434;
                      bool _out435;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1761_b), _1761_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out433, out _out434, out _out435, out _out436);
                      s = _out433;
                      isOwned = _out434;
                      isErased = _out435;
                      readIdents = _out436;
                    }
                  }
                } else if (_source120.is_Set) {
                  DAST._IType _1767___mcc_h446 = _source120.dtor_element;
                  DAST._IType _1768_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1768_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1769_recursiveGen;
                      bool _1770_recOwned;
                      bool _1771_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1772_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out437;
                      bool _out438;
                      bool _out439;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439, out _out440);
                      _1769_recursiveGen = _out437;
                      _1770_recOwned = _out438;
                      _1771_recErased = _out439;
                      _1772_recIdents = _out440;
                      Dafny.ISequence<Dafny.Rune> _1773_uneraseFn;
                      _1773_uneraseFn = ((_1770_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1773_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1769_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1770_recOwned;
                      isErased = true;
                      readIdents = _1772_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out441;
                      bool _out442;
                      bool _out443;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out444;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1768_b), _1768_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out441, out _out442, out _out443, out _out444);
                      s = _out441;
                      isOwned = _out442;
                      isErased = _out443;
                      readIdents = _out444;
                    }
                  }
                } else if (_source120.is_Multiset) {
                  DAST._IType _1774___mcc_h449 = _source120.dtor_element;
                  DAST._IType _1775_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1775_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1776_recursiveGen;
                      bool _1777_recOwned;
                      bool _1778_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1779_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out445;
                      bool _out446;
                      bool _out447;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out445, out _out446, out _out447, out _out448);
                      _1776_recursiveGen = _out445;
                      _1777_recOwned = _out446;
                      _1778_recErased = _out447;
                      _1779_recIdents = _out448;
                      Dafny.ISequence<Dafny.Rune> _1780_uneraseFn;
                      _1780_uneraseFn = ((_1777_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1780_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1776_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1777_recOwned;
                      isErased = true;
                      readIdents = _1779_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out449;
                      bool _out450;
                      bool _out451;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1775_b), _1775_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out449, out _out450, out _out451, out _out452);
                      s = _out449;
                      isOwned = _out450;
                      isErased = _out451;
                      readIdents = _out452;
                    }
                  }
                } else if (_source120.is_Map) {
                  DAST._IType _1781___mcc_h452 = _source120.dtor_key;
                  DAST._IType _1782___mcc_h453 = _source120.dtor_value;
                  DAST._IType _1783_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1783_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1784_recursiveGen;
                      bool _1785_recOwned;
                      bool _1786_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1787_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out453;
                      bool _out454;
                      bool _out455;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out453, out _out454, out _out455, out _out456);
                      _1784_recursiveGen = _out453;
                      _1785_recOwned = _out454;
                      _1786_recErased = _out455;
                      _1787_recIdents = _out456;
                      Dafny.ISequence<Dafny.Rune> _1788_uneraseFn;
                      _1788_uneraseFn = ((_1785_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1788_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1785_recOwned;
                      isErased = true;
                      readIdents = _1787_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out457;
                      bool _out458;
                      bool _out459;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1783_b), _1783_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out457, out _out458, out _out459, out _out460);
                      s = _out457;
                      isOwned = _out458;
                      isErased = _out459;
                      readIdents = _out460;
                    }
                  }
                } else if (_source120.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1789___mcc_h458 = _source120.dtor_args;
                  DAST._IType _1790___mcc_h459 = _source120.dtor_result;
                  DAST._IType _1791_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1791_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1792_recursiveGen;
                      bool _1793_recOwned;
                      bool _1794_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1795_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out461;
                      bool _out462;
                      bool _out463;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out461, out _out462, out _out463, out _out464);
                      _1792_recursiveGen = _out461;
                      _1793_recOwned = _out462;
                      _1794_recErased = _out463;
                      _1795_recIdents = _out464;
                      Dafny.ISequence<Dafny.Rune> _1796_uneraseFn;
                      _1796_uneraseFn = ((_1793_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1796_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1792_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1793_recOwned;
                      isErased = true;
                      readIdents = _1795_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out465;
                      bool _out466;
                      bool _out467;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out468;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1791_b), _1791_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out465, out _out466, out _out467, out _out468);
                      s = _out465;
                      isOwned = _out466;
                      isErased = _out467;
                      readIdents = _out468;
                    }
                  }
                } else if (_source120.is_Primitive) {
                  DAST._IPrimitive _1797___mcc_h464 = _source120.dtor_Primitive_a0;
                  DAST._IType _1798_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1798_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1799_recursiveGen;
                      bool _1800_recOwned;
                      bool _1801_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1802_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out469;
                      bool _out470;
                      bool _out471;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out469, out _out470, out _out471, out _out472);
                      _1799_recursiveGen = _out469;
                      _1800_recOwned = _out470;
                      _1801_recErased = _out471;
                      _1802_recIdents = _out472;
                      Dafny.ISequence<Dafny.Rune> _1803_uneraseFn;
                      _1803_uneraseFn = ((_1800_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1803_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1799_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1800_recOwned;
                      isErased = true;
                      readIdents = _1802_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out473;
                      bool _out474;
                      bool _out475;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1798_b), _1798_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out473, out _out474, out _out475, out _out476);
                      s = _out473;
                      isOwned = _out474;
                      isErased = _out475;
                      readIdents = _out476;
                    }
                  }
                } else if (_source120.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1804___mcc_h467 = _source120.dtor_Passthrough_a0;
                  DAST._IType _1805_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1805_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1806_recursiveGen;
                      bool _1807_recOwned;
                      bool _1808_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1809_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out477;
                      bool _out478;
                      bool _out479;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479, out _out480);
                      _1806_recursiveGen = _out477;
                      _1807_recOwned = _out478;
                      _1808_recErased = _out479;
                      _1809_recIdents = _out480;
                      Dafny.ISequence<Dafny.Rune> _1810_uneraseFn;
                      _1810_uneraseFn = ((_1807_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1810_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1806_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1807_recOwned;
                      isErased = true;
                      readIdents = _1809_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out481;
                      bool _out482;
                      bool _out483;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1805_b), _1805_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out481, out _out482, out _out483, out _out484);
                      s = _out481;
                      isOwned = _out482;
                      isErased = _out483;
                      readIdents = _out484;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1811___mcc_h470 = _source120.dtor_TypeArg_a0;
                  DAST._IType _1812_b = _1714___mcc_h409;
                  {
                    if (object.Equals(_1812_b, _1542_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1813_recursiveGen;
                      bool _1814_recOwned;
                      bool _1815_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1816_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out485;
                      bool _out486;
                      bool _out487;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out485, out _out486, out _out487, out _out488);
                      _1813_recursiveGen = _out485;
                      _1814_recOwned = _out486;
                      _1815_recErased = _out487;
                      _1816_recIdents = _out488;
                      Dafny.ISequence<Dafny.Rune> _1817_uneraseFn;
                      _1817_uneraseFn = ((_1814_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1817_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1813_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1814_recOwned;
                      isErased = true;
                      readIdents = _1816_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out489;
                      bool _out490;
                      bool _out491;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out492;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1812_b), _1812_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out489, out _out490, out _out491, out _out492);
                      s = _out489;
                      isOwned = _out490;
                      isErased = _out491;
                      readIdents = _out492;
                    }
                  }
                }
              }
            } else if (_source114.is_Nullable) {
              DAST._IType _1818___mcc_h473 = _source114.dtor_Nullable_a0;
              DAST._IType _source122 = _1550___mcc_h306;
              if (_source122.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1819___mcc_h477 = _source122.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1820___mcc_h478 = _source122.dtor_typeArgs;
                DAST._IResolvedType _1821___mcc_h479 = _source122.dtor_resolved;
                DAST._IResolvedType _source123 = _1821___mcc_h479;
                if (_source123.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1822___mcc_h486 = _source123.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1823_recursiveGen;
                    bool _1824_recOwned;
                    bool _1825_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1826_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out493;
                    bool _out494;
                    bool _out495;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out493, out _out494, out _out495, out _out496);
                    _1823_recursiveGen = _out493;
                    _1824_recOwned = _out494;
                    _1825_recErased = _out495;
                    _1826_recIdents = _out496;
                    if (!(_1824_recOwned)) {
                      _1823_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1823_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1823_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1824_recOwned;
                    isErased = _1825_recErased;
                    readIdents = _1826_recIdents;
                  }
                } else if (_source123.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1827___mcc_h489 = _source123.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1828_recursiveGen;
                    bool _1829_recOwned;
                    bool _1830_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1831_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out497;
                    bool _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out497, out _out498, out _out499, out _out500);
                    _1828_recursiveGen = _out497;
                    _1829_recOwned = _out498;
                    _1830_recErased = _out499;
                    _1831_recIdents = _out500;
                    if (!(_1829_recOwned)) {
                      _1828_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1828_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1828_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1829_recOwned;
                    isErased = _1830_recErased;
                    readIdents = _1831_recIdents;
                  }
                } else {
                  DAST._IType _1832___mcc_h492 = _source123.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1833_recursiveGen;
                    bool _1834_recOwned;
                    bool _1835_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1836_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out501;
                    bool _out502;
                    bool _out503;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503, out _out504);
                    _1833_recursiveGen = _out501;
                    _1834_recOwned = _out502;
                    _1835_recErased = _out503;
                    _1836_recIdents = _out504;
                    if (!(_1834_recOwned)) {
                      _1833_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1833_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1833_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1834_recOwned;
                    isErased = _1835_recErased;
                    readIdents = _1836_recIdents;
                  }
                }
              } else if (_source122.is_Nullable) {
                DAST._IType _1837___mcc_h495 = _source122.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1838_recursiveGen;
                  bool _1839_recOwned;
                  bool _1840_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1841_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out505;
                  bool _out506;
                  bool _out507;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out508;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out505, out _out506, out _out507, out _out508);
                  _1838_recursiveGen = _out505;
                  _1839_recOwned = _out506;
                  _1840_recErased = _out507;
                  _1841_recIdents = _out508;
                  if (!(_1839_recOwned)) {
                    _1838_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1838_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1838_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1839_recOwned;
                  isErased = _1840_recErased;
                  readIdents = _1841_recIdents;
                }
              } else if (_source122.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1842___mcc_h498 = _source122.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1843_recursiveGen;
                  bool _1844_recOwned;
                  bool _1845_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1846_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out509;
                  bool _out510;
                  bool _out511;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out512;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out509, out _out510, out _out511, out _out512);
                  _1843_recursiveGen = _out509;
                  _1844_recOwned = _out510;
                  _1845_recErased = _out511;
                  _1846_recIdents = _out512;
                  if (!(_1844_recOwned)) {
                    _1843_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1843_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1843_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1844_recOwned;
                  isErased = _1845_recErased;
                  readIdents = _1846_recIdents;
                }
              } else if (_source122.is_Array) {
                DAST._IType _1847___mcc_h501 = _source122.dtor_element;
                BigInteger _1848___mcc_h502 = _source122.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1849_recursiveGen;
                  bool _1850_recOwned;
                  bool _1851_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1852_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out513;
                  bool _out514;
                  bool _out515;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out516;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out513, out _out514, out _out515, out _out516);
                  _1849_recursiveGen = _out513;
                  _1850_recOwned = _out514;
                  _1851_recErased = _out515;
                  _1852_recIdents = _out516;
                  if (!(_1850_recOwned)) {
                    _1849_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1849_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1849_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1850_recOwned;
                  isErased = _1851_recErased;
                  readIdents = _1852_recIdents;
                }
              } else if (_source122.is_Seq) {
                DAST._IType _1853___mcc_h507 = _source122.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1854_recursiveGen;
                  bool _1855_recOwned;
                  bool _1856_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1857_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out517;
                  bool _out518;
                  bool _out519;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out520;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out517, out _out518, out _out519, out _out520);
                  _1854_recursiveGen = _out517;
                  _1855_recOwned = _out518;
                  _1856_recErased = _out519;
                  _1857_recIdents = _out520;
                  if (!(_1855_recOwned)) {
                    _1854_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1854_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1854_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1855_recOwned;
                  isErased = _1856_recErased;
                  readIdents = _1857_recIdents;
                }
              } else if (_source122.is_Set) {
                DAST._IType _1858___mcc_h510 = _source122.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1859_recursiveGen;
                  bool _1860_recOwned;
                  bool _1861_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1862_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out521;
                  bool _out522;
                  bool _out523;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out524;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out521, out _out522, out _out523, out _out524);
                  _1859_recursiveGen = _out521;
                  _1860_recOwned = _out522;
                  _1861_recErased = _out523;
                  _1862_recIdents = _out524;
                  if (!(_1860_recOwned)) {
                    _1859_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1859_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1859_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1860_recOwned;
                  isErased = _1861_recErased;
                  readIdents = _1862_recIdents;
                }
              } else if (_source122.is_Multiset) {
                DAST._IType _1863___mcc_h513 = _source122.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1864_recursiveGen;
                  bool _1865_recOwned;
                  bool _1866_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1867_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out525;
                  bool _out526;
                  bool _out527;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out528;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out525, out _out526, out _out527, out _out528);
                  _1864_recursiveGen = _out525;
                  _1865_recOwned = _out526;
                  _1866_recErased = _out527;
                  _1867_recIdents = _out528;
                  if (!(_1865_recOwned)) {
                    _1864_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1864_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1864_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1865_recOwned;
                  isErased = _1866_recErased;
                  readIdents = _1867_recIdents;
                }
              } else if (_source122.is_Map) {
                DAST._IType _1868___mcc_h516 = _source122.dtor_key;
                DAST._IType _1869___mcc_h517 = _source122.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1870_recursiveGen;
                  bool _1871_recOwned;
                  bool _1872_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1873_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out529;
                  bool _out530;
                  bool _out531;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out532;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out529, out _out530, out _out531, out _out532);
                  _1870_recursiveGen = _out529;
                  _1871_recOwned = _out530;
                  _1872_recErased = _out531;
                  _1873_recIdents = _out532;
                  if (!(_1871_recOwned)) {
                    _1870_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1870_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1870_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1871_recOwned;
                  isErased = _1872_recErased;
                  readIdents = _1873_recIdents;
                }
              } else if (_source122.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1874___mcc_h522 = _source122.dtor_args;
                DAST._IType _1875___mcc_h523 = _source122.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1876_recursiveGen;
                  bool _1877_recOwned;
                  bool _1878_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1879_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out533;
                  bool _out534;
                  bool _out535;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out536;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out533, out _out534, out _out535, out _out536);
                  _1876_recursiveGen = _out533;
                  _1877_recOwned = _out534;
                  _1878_recErased = _out535;
                  _1879_recIdents = _out536;
                  if (!(_1877_recOwned)) {
                    _1876_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1876_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1876_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1877_recOwned;
                  isErased = _1878_recErased;
                  readIdents = _1879_recIdents;
                }
              } else if (_source122.is_Primitive) {
                DAST._IPrimitive _1880___mcc_h528 = _source122.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1881_recursiveGen;
                  bool _1882_recOwned;
                  bool _1883_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1884_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out537;
                  bool _out538;
                  bool _out539;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out540;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out537, out _out538, out _out539, out _out540);
                  _1881_recursiveGen = _out537;
                  _1882_recOwned = _out538;
                  _1883_recErased = _out539;
                  _1884_recIdents = _out540;
                  if (!(_1882_recOwned)) {
                    _1881_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1881_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1881_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1882_recOwned;
                  isErased = _1883_recErased;
                  readIdents = _1884_recIdents;
                }
              } else if (_source122.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1885___mcc_h531 = _source122.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1886_recursiveGen;
                  bool _1887_recOwned;
                  bool _1888_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1889_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out541;
                  bool _out542;
                  bool _out543;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out544;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out541, out _out542, out _out543, out _out544);
                  _1886_recursiveGen = _out541;
                  _1887_recOwned = _out542;
                  _1888_recErased = _out543;
                  _1889_recIdents = _out544;
                  if (!(_1887_recOwned)) {
                    _1886_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1886_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1886_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1887_recOwned;
                  isErased = _1888_recErased;
                  readIdents = _1889_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1890___mcc_h534 = _source122.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1891_recursiveGen;
                  bool _1892_recOwned;
                  bool _1893_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1894_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out545;
                  bool _out546;
                  bool _out547;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out548;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out545, out _out546, out _out547, out _out548);
                  _1891_recursiveGen = _out545;
                  _1892_recOwned = _out546;
                  _1893_recErased = _out547;
                  _1894_recIdents = _out548;
                  if (!(_1892_recOwned)) {
                    _1891_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1891_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1891_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1892_recOwned;
                  isErased = _1893_recErased;
                  readIdents = _1894_recIdents;
                }
              }
            } else if (_source114.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1895___mcc_h537 = _source114.dtor_Tuple_a0;
              DAST._IType _source124 = _1550___mcc_h306;
              if (_source124.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1896___mcc_h541 = _source124.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1897___mcc_h542 = _source124.dtor_typeArgs;
                DAST._IResolvedType _1898___mcc_h543 = _source124.dtor_resolved;
                DAST._IResolvedType _source125 = _1898___mcc_h543;
                if (_source125.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1899___mcc_h547 = _source125.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1900_recursiveGen;
                    bool _1901_recOwned;
                    bool _1902_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1903_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out549;
                    bool _out550;
                    bool _out551;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out552;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out549, out _out550, out _out551, out _out552);
                    _1900_recursiveGen = _out549;
                    _1901_recOwned = _out550;
                    _1902_recErased = _out551;
                    _1903_recIdents = _out552;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1900_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1901_recOwned;
                    isErased = _1902_recErased;
                    readIdents = _1903_recIdents;
                  }
                } else if (_source125.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1904___mcc_h549 = _source125.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1905_recursiveGen;
                    bool _1906_recOwned;
                    bool _1907_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1908_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out553;
                    bool _out554;
                    bool _out555;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out556;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out553, out _out554, out _out555, out _out556);
                    _1905_recursiveGen = _out553;
                    _1906_recOwned = _out554;
                    _1907_recErased = _out555;
                    _1908_recIdents = _out556;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1905_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1906_recOwned;
                    isErased = _1907_recErased;
                    readIdents = _1908_recIdents;
                  }
                } else {
                  DAST._IType _1909___mcc_h551 = _source125.dtor_Newtype_a0;
                  DAST._IType _1910_b = _1909___mcc_h551;
                  {
                    if (object.Equals(_1543_fromTpe, _1910_b)) {
                      Dafny.ISequence<Dafny.Rune> _1911_recursiveGen;
                      bool _1912_recOwned;
                      bool _1913_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1914_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out557;
                      bool _out558;
                      bool _out559;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out560;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out557, out _out558, out _out559, out _out560);
                      _1911_recursiveGen = _out557;
                      _1912_recOwned = _out558;
                      _1913_recErased = _out559;
                      _1914_recIdents = _out560;
                      Dafny.ISequence<Dafny.Rune> _1915_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out561;
                      _out561 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _1915_rhsType = _out561;
                      Dafny.ISequence<Dafny.Rune> _1916_uneraseFn;
                      _1916_uneraseFn = ((_1912_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1915_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1916_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1911_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1912_recOwned;
                      isErased = false;
                      readIdents = _1914_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out562;
                      bool _out563;
                      bool _out564;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1910_b), _1910_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                      s = _out562;
                      isOwned = _out563;
                      isErased = _out564;
                      readIdents = _out565;
                    }
                  }
                }
              } else if (_source124.is_Nullable) {
                DAST._IType _1917___mcc_h553 = _source124.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1918_recursiveGen;
                  bool _1919_recOwned;
                  bool _1920_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1921_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out566;
                  bool _out567;
                  bool _out568;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out569;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out566, out _out567, out _out568, out _out569);
                  _1918_recursiveGen = _out566;
                  _1919_recOwned = _out567;
                  _1920_recErased = _out568;
                  _1921_recIdents = _out569;
                  if (!(_1919_recOwned)) {
                    _1918_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1918_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1918_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1920_recErased;
                  readIdents = _1921_recIdents;
                }
              } else if (_source124.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1922___mcc_h555 = _source124.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1923_recursiveGen;
                  bool _1924_recOwned;
                  bool _1925_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1926_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out570;
                  bool _out571;
                  bool _out572;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out573;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out570, out _out571, out _out572, out _out573);
                  _1923_recursiveGen = _out570;
                  _1924_recOwned = _out571;
                  _1925_recErased = _out572;
                  _1926_recIdents = _out573;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1923_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1924_recOwned;
                  isErased = _1925_recErased;
                  readIdents = _1926_recIdents;
                }
              } else if (_source124.is_Array) {
                DAST._IType _1927___mcc_h557 = _source124.dtor_element;
                BigInteger _1928___mcc_h558 = _source124.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1929_recursiveGen;
                  bool _1930_recOwned;
                  bool _1931_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1932_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out574;
                  bool _out575;
                  bool _out576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out577;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out574, out _out575, out _out576, out _out577);
                  _1929_recursiveGen = _out574;
                  _1930_recOwned = _out575;
                  _1931_recErased = _out576;
                  _1932_recIdents = _out577;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1929_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1930_recOwned;
                  isErased = _1931_recErased;
                  readIdents = _1932_recIdents;
                }
              } else if (_source124.is_Seq) {
                DAST._IType _1933___mcc_h561 = _source124.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1934_recursiveGen;
                  bool _1935_recOwned;
                  bool _1936_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1937_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out578;
                  bool _out579;
                  bool _out580;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out581;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out578, out _out579, out _out580, out _out581);
                  _1934_recursiveGen = _out578;
                  _1935_recOwned = _out579;
                  _1936_recErased = _out580;
                  _1937_recIdents = _out581;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1934_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1935_recOwned;
                  isErased = _1936_recErased;
                  readIdents = _1937_recIdents;
                }
              } else if (_source124.is_Set) {
                DAST._IType _1938___mcc_h563 = _source124.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1939_recursiveGen;
                  bool _1940_recOwned;
                  bool _1941_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1942_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out582;
                  bool _out583;
                  bool _out584;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out585;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out582, out _out583, out _out584, out _out585);
                  _1939_recursiveGen = _out582;
                  _1940_recOwned = _out583;
                  _1941_recErased = _out584;
                  _1942_recIdents = _out585;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1940_recOwned;
                  isErased = _1941_recErased;
                  readIdents = _1942_recIdents;
                }
              } else if (_source124.is_Multiset) {
                DAST._IType _1943___mcc_h565 = _source124.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1944_recursiveGen;
                  bool _1945_recOwned;
                  bool _1946_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1947_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out586;
                  bool _out587;
                  bool _out588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out586, out _out587, out _out588, out _out589);
                  _1944_recursiveGen = _out586;
                  _1945_recOwned = _out587;
                  _1946_recErased = _out588;
                  _1947_recIdents = _out589;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1944_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1945_recOwned;
                  isErased = _1946_recErased;
                  readIdents = _1947_recIdents;
                }
              } else if (_source124.is_Map) {
                DAST._IType _1948___mcc_h567 = _source124.dtor_key;
                DAST._IType _1949___mcc_h568 = _source124.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1950_recursiveGen;
                  bool _1951_recOwned;
                  bool _1952_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1953_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out590;
                  bool _out591;
                  bool _out592;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out593;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out590, out _out591, out _out592, out _out593);
                  _1950_recursiveGen = _out590;
                  _1951_recOwned = _out591;
                  _1952_recErased = _out592;
                  _1953_recIdents = _out593;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1950_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1951_recOwned;
                  isErased = _1952_recErased;
                  readIdents = _1953_recIdents;
                }
              } else if (_source124.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1954___mcc_h571 = _source124.dtor_args;
                DAST._IType _1955___mcc_h572 = _source124.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1956_recursiveGen;
                  bool _1957_recOwned;
                  bool _1958_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1959_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out594;
                  bool _out595;
                  bool _out596;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out597;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out594, out _out595, out _out596, out _out597);
                  _1956_recursiveGen = _out594;
                  _1957_recOwned = _out595;
                  _1958_recErased = _out596;
                  _1959_recIdents = _out597;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1957_recOwned;
                  isErased = _1958_recErased;
                  readIdents = _1959_recIdents;
                }
              } else if (_source124.is_Primitive) {
                DAST._IPrimitive _1960___mcc_h575 = _source124.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1961_recursiveGen;
                  bool _1962_recOwned;
                  bool _1963_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1964_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out598;
                  bool _out599;
                  bool _out600;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out601;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out598, out _out599, out _out600, out _out601);
                  _1961_recursiveGen = _out598;
                  _1962_recOwned = _out599;
                  _1963_recErased = _out600;
                  _1964_recIdents = _out601;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1961_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1962_recOwned;
                  isErased = _1963_recErased;
                  readIdents = _1964_recIdents;
                }
              } else if (_source124.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1965___mcc_h577 = _source124.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1966_recursiveGen;
                  bool _1967_recOwned;
                  bool _1968_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1969_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out602;
                  bool _out603;
                  bool _out604;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out605;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out602, out _out603, out _out604, out _out605);
                  _1966_recursiveGen = _out602;
                  _1967_recOwned = _out603;
                  _1968_recErased = _out604;
                  _1969_recIdents = _out605;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1966_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1967_recOwned;
                  isErased = _1968_recErased;
                  readIdents = _1969_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1970___mcc_h579 = _source124.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1971_recursiveGen;
                  bool _1972_recOwned;
                  bool _1973_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1974_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out606;
                  bool _out607;
                  bool _out608;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out609;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out606, out _out607, out _out608, out _out609);
                  _1971_recursiveGen = _out606;
                  _1972_recOwned = _out607;
                  _1973_recErased = _out608;
                  _1974_recIdents = _out609;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1971_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1972_recOwned;
                  isErased = _1973_recErased;
                  readIdents = _1974_recIdents;
                }
              }
            } else if (_source114.is_Array) {
              DAST._IType _1975___mcc_h581 = _source114.dtor_element;
              BigInteger _1976___mcc_h582 = _source114.dtor_dims;
              DAST._IType _source126 = _1550___mcc_h306;
              if (_source126.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1977___mcc_h589 = _source126.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1978___mcc_h590 = _source126.dtor_typeArgs;
                DAST._IResolvedType _1979___mcc_h591 = _source126.dtor_resolved;
                DAST._IResolvedType _source127 = _1979___mcc_h591;
                if (_source127.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1980___mcc_h595 = _source127.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1981_recursiveGen;
                    bool _1982_recOwned;
                    bool _1983_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1984_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out610;
                    bool _out611;
                    bool _out612;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out613;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out610, out _out611, out _out612, out _out613);
                    _1981_recursiveGen = _out610;
                    _1982_recOwned = _out611;
                    _1983_recErased = _out612;
                    _1984_recIdents = _out613;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1981_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1982_recOwned;
                    isErased = _1983_recErased;
                    readIdents = _1984_recIdents;
                  }
                } else if (_source127.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1985___mcc_h597 = _source127.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1986_recursiveGen;
                    bool _1987_recOwned;
                    bool _1988_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1989_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out614;
                    bool _out615;
                    bool _out616;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out617;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out614, out _out615, out _out616, out _out617);
                    _1986_recursiveGen = _out614;
                    _1987_recOwned = _out615;
                    _1988_recErased = _out616;
                    _1989_recIdents = _out617;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1986_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1987_recOwned;
                    isErased = _1988_recErased;
                    readIdents = _1989_recIdents;
                  }
                } else {
                  DAST._IType _1990___mcc_h599 = _source127.dtor_Newtype_a0;
                  DAST._IType _1991_b = _1990___mcc_h599;
                  {
                    if (object.Equals(_1543_fromTpe, _1991_b)) {
                      Dafny.ISequence<Dafny.Rune> _1992_recursiveGen;
                      bool _1993_recOwned;
                      bool _1994_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1995_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out618;
                      bool _out619;
                      bool _out620;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out621;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out618, out _out619, out _out620, out _out621);
                      _1992_recursiveGen = _out618;
                      _1993_recOwned = _out619;
                      _1994_recErased = _out620;
                      _1995_recIdents = _out621;
                      Dafny.ISequence<Dafny.Rune> _1996_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out622;
                      _out622 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _1996_rhsType = _out622;
                      Dafny.ISequence<Dafny.Rune> _1997_uneraseFn;
                      _1997_uneraseFn = ((_1993_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1996_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1997_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1992_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1993_recOwned;
                      isErased = false;
                      readIdents = _1995_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out623;
                      bool _out624;
                      bool _out625;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _1991_b), _1991_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                      s = _out623;
                      isOwned = _out624;
                      isErased = _out625;
                      readIdents = _out626;
                    }
                  }
                }
              } else if (_source126.is_Nullable) {
                DAST._IType _1998___mcc_h601 = _source126.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1999_recursiveGen;
                  bool _2000_recOwned;
                  bool _2001_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2002_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out627;
                  bool _out628;
                  bool _out629;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out627, out _out628, out _out629, out _out630);
                  _1999_recursiveGen = _out627;
                  _2000_recOwned = _out628;
                  _2001_recErased = _out629;
                  _2002_recIdents = _out630;
                  if (!(_2000_recOwned)) {
                    _1999_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1999_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1999_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2001_recErased;
                  readIdents = _2002_recIdents;
                }
              } else if (_source126.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2003___mcc_h603 = _source126.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2004_recursiveGen;
                  bool _2005_recOwned;
                  bool _2006_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2007_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out631;
                  bool _out632;
                  bool _out633;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out634;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out631, out _out632, out _out633, out _out634);
                  _2004_recursiveGen = _out631;
                  _2005_recOwned = _out632;
                  _2006_recErased = _out633;
                  _2007_recIdents = _out634;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2004_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2005_recOwned;
                  isErased = _2006_recErased;
                  readIdents = _2007_recIdents;
                }
              } else if (_source126.is_Array) {
                DAST._IType _2008___mcc_h605 = _source126.dtor_element;
                BigInteger _2009___mcc_h606 = _source126.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2010_recursiveGen;
                  bool _2011_recOwned;
                  bool _2012_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2013_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out635;
                  bool _out636;
                  bool _out637;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out635, out _out636, out _out637, out _out638);
                  _2010_recursiveGen = _out635;
                  _2011_recOwned = _out636;
                  _2012_recErased = _out637;
                  _2013_recIdents = _out638;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2010_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2011_recOwned;
                  isErased = _2012_recErased;
                  readIdents = _2013_recIdents;
                }
              } else if (_source126.is_Seq) {
                DAST._IType _2014___mcc_h609 = _source126.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2015_recursiveGen;
                  bool _2016_recOwned;
                  bool _2017_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2018_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out639;
                  bool _out640;
                  bool _out641;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out642;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out639, out _out640, out _out641, out _out642);
                  _2015_recursiveGen = _out639;
                  _2016_recOwned = _out640;
                  _2017_recErased = _out641;
                  _2018_recIdents = _out642;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2015_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2016_recOwned;
                  isErased = _2017_recErased;
                  readIdents = _2018_recIdents;
                }
              } else if (_source126.is_Set) {
                DAST._IType _2019___mcc_h611 = _source126.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2020_recursiveGen;
                  bool _2021_recOwned;
                  bool _2022_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2023_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out643;
                  bool _out644;
                  bool _out645;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out646;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out643, out _out644, out _out645, out _out646);
                  _2020_recursiveGen = _out643;
                  _2021_recOwned = _out644;
                  _2022_recErased = _out645;
                  _2023_recIdents = _out646;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2020_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2021_recOwned;
                  isErased = _2022_recErased;
                  readIdents = _2023_recIdents;
                }
              } else if (_source126.is_Multiset) {
                DAST._IType _2024___mcc_h613 = _source126.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2025_recursiveGen;
                  bool _2026_recOwned;
                  bool _2027_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2028_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out647;
                  bool _out648;
                  bool _out649;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out650;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out647, out _out648, out _out649, out _out650);
                  _2025_recursiveGen = _out647;
                  _2026_recOwned = _out648;
                  _2027_recErased = _out649;
                  _2028_recIdents = _out650;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2025_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2026_recOwned;
                  isErased = _2027_recErased;
                  readIdents = _2028_recIdents;
                }
              } else if (_source126.is_Map) {
                DAST._IType _2029___mcc_h615 = _source126.dtor_key;
                DAST._IType _2030___mcc_h616 = _source126.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2031_recursiveGen;
                  bool _2032_recOwned;
                  bool _2033_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2034_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out651;
                  bool _out652;
                  bool _out653;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out654;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out651, out _out652, out _out653, out _out654);
                  _2031_recursiveGen = _out651;
                  _2032_recOwned = _out652;
                  _2033_recErased = _out653;
                  _2034_recIdents = _out654;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2031_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2032_recOwned;
                  isErased = _2033_recErased;
                  readIdents = _2034_recIdents;
                }
              } else if (_source126.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2035___mcc_h619 = _source126.dtor_args;
                DAST._IType _2036___mcc_h620 = _source126.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2037_recursiveGen;
                  bool _2038_recOwned;
                  bool _2039_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2040_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out655;
                  bool _out656;
                  bool _out657;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out658;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out655, out _out656, out _out657, out _out658);
                  _2037_recursiveGen = _out655;
                  _2038_recOwned = _out656;
                  _2039_recErased = _out657;
                  _2040_recIdents = _out658;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2037_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2038_recOwned;
                  isErased = _2039_recErased;
                  readIdents = _2040_recIdents;
                }
              } else if (_source126.is_Primitive) {
                DAST._IPrimitive _2041___mcc_h623 = _source126.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2042_recursiveGen;
                  bool _2043_recOwned;
                  bool _2044_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2045_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out659;
                  bool _out660;
                  bool _out661;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out662;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out659, out _out660, out _out661, out _out662);
                  _2042_recursiveGen = _out659;
                  _2043_recOwned = _out660;
                  _2044_recErased = _out661;
                  _2045_recIdents = _out662;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2042_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2043_recOwned;
                  isErased = _2044_recErased;
                  readIdents = _2045_recIdents;
                }
              } else if (_source126.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2046___mcc_h625 = _source126.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2047_recursiveGen;
                  bool _2048_recOwned;
                  bool _2049_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2050_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out663;
                  bool _out664;
                  bool _out665;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out666;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out663, out _out664, out _out665, out _out666);
                  _2047_recursiveGen = _out663;
                  _2048_recOwned = _out664;
                  _2049_recErased = _out665;
                  _2050_recIdents = _out666;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2047_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2048_recOwned;
                  isErased = _2049_recErased;
                  readIdents = _2050_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2051___mcc_h627 = _source126.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2052_recursiveGen;
                  bool _2053_recOwned;
                  bool _2054_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2055_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out667;
                  bool _out668;
                  bool _out669;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out670;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out667, out _out668, out _out669, out _out670);
                  _2052_recursiveGen = _out667;
                  _2053_recOwned = _out668;
                  _2054_recErased = _out669;
                  _2055_recIdents = _out670;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2052_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2053_recOwned;
                  isErased = _2054_recErased;
                  readIdents = _2055_recIdents;
                }
              }
            } else if (_source114.is_Seq) {
              DAST._IType _2056___mcc_h629 = _source114.dtor_element;
              DAST._IType _source128 = _1550___mcc_h306;
              if (_source128.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2057___mcc_h633 = _source128.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2058___mcc_h634 = _source128.dtor_typeArgs;
                DAST._IResolvedType _2059___mcc_h635 = _source128.dtor_resolved;
                DAST._IResolvedType _source129 = _2059___mcc_h635;
                if (_source129.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2060___mcc_h639 = _source129.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2061_recursiveGen;
                    bool _2062_recOwned;
                    bool _2063_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2064_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out671;
                    bool _out672;
                    bool _out673;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out674;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out671, out _out672, out _out673, out _out674);
                    _2061_recursiveGen = _out671;
                    _2062_recOwned = _out672;
                    _2063_recErased = _out673;
                    _2064_recIdents = _out674;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2061_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2062_recOwned;
                    isErased = _2063_recErased;
                    readIdents = _2064_recIdents;
                  }
                } else if (_source129.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2065___mcc_h641 = _source129.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2066_recursiveGen;
                    bool _2067_recOwned;
                    bool _2068_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2069_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out675;
                    bool _out676;
                    bool _out677;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out678;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out675, out _out676, out _out677, out _out678);
                    _2066_recursiveGen = _out675;
                    _2067_recOwned = _out676;
                    _2068_recErased = _out677;
                    _2069_recIdents = _out678;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2066_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2067_recOwned;
                    isErased = _2068_recErased;
                    readIdents = _2069_recIdents;
                  }
                } else {
                  DAST._IType _2070___mcc_h643 = _source129.dtor_Newtype_a0;
                  DAST._IType _2071_b = _2070___mcc_h643;
                  {
                    if (object.Equals(_1543_fromTpe, _2071_b)) {
                      Dafny.ISequence<Dafny.Rune> _2072_recursiveGen;
                      bool _2073_recOwned;
                      bool _2074_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2075_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out679;
                      bool _out680;
                      bool _out681;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out682;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out679, out _out680, out _out681, out _out682);
                      _2072_recursiveGen = _out679;
                      _2073_recOwned = _out680;
                      _2074_recErased = _out681;
                      _2075_recIdents = _out682;
                      Dafny.ISequence<Dafny.Rune> _2076_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out683;
                      _out683 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _2076_rhsType = _out683;
                      Dafny.ISequence<Dafny.Rune> _2077_uneraseFn;
                      _2077_uneraseFn = ((_2073_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2076_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2077_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2072_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2073_recOwned;
                      isErased = false;
                      readIdents = _2075_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out684;
                      bool _out685;
                      bool _out686;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2071_b), _2071_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                      s = _out684;
                      isOwned = _out685;
                      isErased = _out686;
                      readIdents = _out687;
                    }
                  }
                }
              } else if (_source128.is_Nullable) {
                DAST._IType _2078___mcc_h645 = _source128.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2079_recursiveGen;
                  bool _2080_recOwned;
                  bool _2081_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2082_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out688;
                  bool _out689;
                  bool _out690;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out688, out _out689, out _out690, out _out691);
                  _2079_recursiveGen = _out688;
                  _2080_recOwned = _out689;
                  _2081_recErased = _out690;
                  _2082_recIdents = _out691;
                  if (!(_2080_recOwned)) {
                    _2079_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2079_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2079_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2081_recErased;
                  readIdents = _2082_recIdents;
                }
              } else if (_source128.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2083___mcc_h647 = _source128.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2084_recursiveGen;
                  bool _2085_recOwned;
                  bool _2086_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2087_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out692;
                  bool _out693;
                  bool _out694;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out695;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out692, out _out693, out _out694, out _out695);
                  _2084_recursiveGen = _out692;
                  _2085_recOwned = _out693;
                  _2086_recErased = _out694;
                  _2087_recIdents = _out695;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2084_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2085_recOwned;
                  isErased = _2086_recErased;
                  readIdents = _2087_recIdents;
                }
              } else if (_source128.is_Array) {
                DAST._IType _2088___mcc_h649 = _source128.dtor_element;
                BigInteger _2089___mcc_h650 = _source128.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2090_recursiveGen;
                  bool _2091_recOwned;
                  bool _2092_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2093_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out696;
                  bool _out697;
                  bool _out698;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out699;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out696, out _out697, out _out698, out _out699);
                  _2090_recursiveGen = _out696;
                  _2091_recOwned = _out697;
                  _2092_recErased = _out698;
                  _2093_recIdents = _out699;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2090_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2091_recOwned;
                  isErased = _2092_recErased;
                  readIdents = _2093_recIdents;
                }
              } else if (_source128.is_Seq) {
                DAST._IType _2094___mcc_h653 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2095_recursiveGen;
                  bool _2096_recOwned;
                  bool _2097_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2098_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out700;
                  bool _out701;
                  bool _out702;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out703;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out700, out _out701, out _out702, out _out703);
                  _2095_recursiveGen = _out700;
                  _2096_recOwned = _out701;
                  _2097_recErased = _out702;
                  _2098_recIdents = _out703;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2095_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2096_recOwned;
                  isErased = _2097_recErased;
                  readIdents = _2098_recIdents;
                }
              } else if (_source128.is_Set) {
                DAST._IType _2099___mcc_h655 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2100_recursiveGen;
                  bool _2101_recOwned;
                  bool _2102_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2103_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out704;
                  bool _out705;
                  bool _out706;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out707;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out704, out _out705, out _out706, out _out707);
                  _2100_recursiveGen = _out704;
                  _2101_recOwned = _out705;
                  _2102_recErased = _out706;
                  _2103_recIdents = _out707;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2100_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2101_recOwned;
                  isErased = _2102_recErased;
                  readIdents = _2103_recIdents;
                }
              } else if (_source128.is_Multiset) {
                DAST._IType _2104___mcc_h657 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2105_recursiveGen;
                  bool _2106_recOwned;
                  bool _2107_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2108_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out708;
                  bool _out709;
                  bool _out710;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out708, out _out709, out _out710, out _out711);
                  _2105_recursiveGen = _out708;
                  _2106_recOwned = _out709;
                  _2107_recErased = _out710;
                  _2108_recIdents = _out711;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2105_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2106_recOwned;
                  isErased = _2107_recErased;
                  readIdents = _2108_recIdents;
                }
              } else if (_source128.is_Map) {
                DAST._IType _2109___mcc_h659 = _source128.dtor_key;
                DAST._IType _2110___mcc_h660 = _source128.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2111_recursiveGen;
                  bool _2112_recOwned;
                  bool _2113_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2114_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out712;
                  bool _out713;
                  bool _out714;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out715;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out712, out _out713, out _out714, out _out715);
                  _2111_recursiveGen = _out712;
                  _2112_recOwned = _out713;
                  _2113_recErased = _out714;
                  _2114_recIdents = _out715;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2111_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2112_recOwned;
                  isErased = _2113_recErased;
                  readIdents = _2114_recIdents;
                }
              } else if (_source128.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2115___mcc_h663 = _source128.dtor_args;
                DAST._IType _2116___mcc_h664 = _source128.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2117_recursiveGen;
                  bool _2118_recOwned;
                  bool _2119_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2120_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out716;
                  bool _out717;
                  bool _out718;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out719;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out716, out _out717, out _out718, out _out719);
                  _2117_recursiveGen = _out716;
                  _2118_recOwned = _out717;
                  _2119_recErased = _out718;
                  _2120_recIdents = _out719;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2117_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2118_recOwned;
                  isErased = _2119_recErased;
                  readIdents = _2120_recIdents;
                }
              } else if (_source128.is_Primitive) {
                DAST._IPrimitive _2121___mcc_h667 = _source128.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2122_recursiveGen;
                  bool _2123_recOwned;
                  bool _2124_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2125_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out720;
                  bool _out721;
                  bool _out722;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out723;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out720, out _out721, out _out722, out _out723);
                  _2122_recursiveGen = _out720;
                  _2123_recOwned = _out721;
                  _2124_recErased = _out722;
                  _2125_recIdents = _out723;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2122_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2123_recOwned;
                  isErased = _2124_recErased;
                  readIdents = _2125_recIdents;
                }
              } else if (_source128.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2126___mcc_h669 = _source128.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2127_recursiveGen;
                  bool _2128_recOwned;
                  bool _2129_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2130_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out724;
                  bool _out725;
                  bool _out726;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out727;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out724, out _out725, out _out726, out _out727);
                  _2127_recursiveGen = _out724;
                  _2128_recOwned = _out725;
                  _2129_recErased = _out726;
                  _2130_recIdents = _out727;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2127_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2128_recOwned;
                  isErased = _2129_recErased;
                  readIdents = _2130_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2131___mcc_h671 = _source128.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2132_recursiveGen;
                  bool _2133_recOwned;
                  bool _2134_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2135_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out728;
                  bool _out729;
                  bool _out730;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out731;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out728, out _out729, out _out730, out _out731);
                  _2132_recursiveGen = _out728;
                  _2133_recOwned = _out729;
                  _2134_recErased = _out730;
                  _2135_recIdents = _out731;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2132_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2133_recOwned;
                  isErased = _2134_recErased;
                  readIdents = _2135_recIdents;
                }
              }
            } else if (_source114.is_Set) {
              DAST._IType _2136___mcc_h673 = _source114.dtor_element;
              DAST._IType _source130 = _1550___mcc_h306;
              if (_source130.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2137___mcc_h677 = _source130.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2138___mcc_h678 = _source130.dtor_typeArgs;
                DAST._IResolvedType _2139___mcc_h679 = _source130.dtor_resolved;
                DAST._IResolvedType _source131 = _2139___mcc_h679;
                if (_source131.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2140___mcc_h683 = _source131.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2141_recursiveGen;
                    bool _2142_recOwned;
                    bool _2143_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2144_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out732;
                    bool _out733;
                    bool _out734;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out735;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out732, out _out733, out _out734, out _out735);
                    _2141_recursiveGen = _out732;
                    _2142_recOwned = _out733;
                    _2143_recErased = _out734;
                    _2144_recIdents = _out735;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2141_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2142_recOwned;
                    isErased = _2143_recErased;
                    readIdents = _2144_recIdents;
                  }
                } else if (_source131.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2145___mcc_h685 = _source131.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2146_recursiveGen;
                    bool _2147_recOwned;
                    bool _2148_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2149_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out736;
                    bool _out737;
                    bool _out738;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out739;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out736, out _out737, out _out738, out _out739);
                    _2146_recursiveGen = _out736;
                    _2147_recOwned = _out737;
                    _2148_recErased = _out738;
                    _2149_recIdents = _out739;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2146_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2147_recOwned;
                    isErased = _2148_recErased;
                    readIdents = _2149_recIdents;
                  }
                } else {
                  DAST._IType _2150___mcc_h687 = _source131.dtor_Newtype_a0;
                  DAST._IType _2151_b = _2150___mcc_h687;
                  {
                    if (object.Equals(_1543_fromTpe, _2151_b)) {
                      Dafny.ISequence<Dafny.Rune> _2152_recursiveGen;
                      bool _2153_recOwned;
                      bool _2154_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2155_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out740;
                      bool _out741;
                      bool _out742;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out743;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out740, out _out741, out _out742, out _out743);
                      _2152_recursiveGen = _out740;
                      _2153_recOwned = _out741;
                      _2154_recErased = _out742;
                      _2155_recIdents = _out743;
                      Dafny.ISequence<Dafny.Rune> _2156_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out744;
                      _out744 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _2156_rhsType = _out744;
                      Dafny.ISequence<Dafny.Rune> _2157_uneraseFn;
                      _2157_uneraseFn = ((_2153_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2156_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2157_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2152_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2153_recOwned;
                      isErased = false;
                      readIdents = _2155_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out745;
                      bool _out746;
                      bool _out747;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2151_b), _2151_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                      s = _out745;
                      isOwned = _out746;
                      isErased = _out747;
                      readIdents = _out748;
                    }
                  }
                }
              } else if (_source130.is_Nullable) {
                DAST._IType _2158___mcc_h689 = _source130.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2159_recursiveGen;
                  bool _2160_recOwned;
                  bool _2161_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2162_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out749;
                  bool _out750;
                  bool _out751;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out752;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out749, out _out750, out _out751, out _out752);
                  _2159_recursiveGen = _out749;
                  _2160_recOwned = _out750;
                  _2161_recErased = _out751;
                  _2162_recIdents = _out752;
                  if (!(_2160_recOwned)) {
                    _2159_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2159_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2159_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2161_recErased;
                  readIdents = _2162_recIdents;
                }
              } else if (_source130.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2163___mcc_h691 = _source130.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2164_recursiveGen;
                  bool _2165_recOwned;
                  bool _2166_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2167_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out753;
                  bool _out754;
                  bool _out755;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out756;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out753, out _out754, out _out755, out _out756);
                  _2164_recursiveGen = _out753;
                  _2165_recOwned = _out754;
                  _2166_recErased = _out755;
                  _2167_recIdents = _out756;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2164_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2165_recOwned;
                  isErased = _2166_recErased;
                  readIdents = _2167_recIdents;
                }
              } else if (_source130.is_Array) {
                DAST._IType _2168___mcc_h693 = _source130.dtor_element;
                BigInteger _2169___mcc_h694 = _source130.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2170_recursiveGen;
                  bool _2171_recOwned;
                  bool _2172_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2173_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out757;
                  bool _out758;
                  bool _out759;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out760;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out757, out _out758, out _out759, out _out760);
                  _2170_recursiveGen = _out757;
                  _2171_recOwned = _out758;
                  _2172_recErased = _out759;
                  _2173_recIdents = _out760;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2170_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2171_recOwned;
                  isErased = _2172_recErased;
                  readIdents = _2173_recIdents;
                }
              } else if (_source130.is_Seq) {
                DAST._IType _2174___mcc_h697 = _source130.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2175_recursiveGen;
                  bool _2176_recOwned;
                  bool _2177_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2178_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out761;
                  bool _out762;
                  bool _out763;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out764;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out761, out _out762, out _out763, out _out764);
                  _2175_recursiveGen = _out761;
                  _2176_recOwned = _out762;
                  _2177_recErased = _out763;
                  _2178_recIdents = _out764;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2176_recOwned;
                  isErased = _2177_recErased;
                  readIdents = _2178_recIdents;
                }
              } else if (_source130.is_Set) {
                DAST._IType _2179___mcc_h699 = _source130.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2180_recursiveGen;
                  bool _2181_recOwned;
                  bool _2182_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2183_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out765;
                  bool _out766;
                  bool _out767;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out768;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out765, out _out766, out _out767, out _out768);
                  _2180_recursiveGen = _out765;
                  _2181_recOwned = _out766;
                  _2182_recErased = _out767;
                  _2183_recIdents = _out768;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2180_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2181_recOwned;
                  isErased = _2182_recErased;
                  readIdents = _2183_recIdents;
                }
              } else if (_source130.is_Multiset) {
                DAST._IType _2184___mcc_h701 = _source130.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2185_recursiveGen;
                  bool _2186_recOwned;
                  bool _2187_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2188_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out769;
                  bool _out770;
                  bool _out771;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out772;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out769, out _out770, out _out771, out _out772);
                  _2185_recursiveGen = _out769;
                  _2186_recOwned = _out770;
                  _2187_recErased = _out771;
                  _2188_recIdents = _out772;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2185_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2186_recOwned;
                  isErased = _2187_recErased;
                  readIdents = _2188_recIdents;
                }
              } else if (_source130.is_Map) {
                DAST._IType _2189___mcc_h703 = _source130.dtor_key;
                DAST._IType _2190___mcc_h704 = _source130.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2191_recursiveGen;
                  bool _2192_recOwned;
                  bool _2193_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2194_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out773;
                  bool _out774;
                  bool _out775;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out776;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out773, out _out774, out _out775, out _out776);
                  _2191_recursiveGen = _out773;
                  _2192_recOwned = _out774;
                  _2193_recErased = _out775;
                  _2194_recIdents = _out776;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2191_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2192_recOwned;
                  isErased = _2193_recErased;
                  readIdents = _2194_recIdents;
                }
              } else if (_source130.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2195___mcc_h707 = _source130.dtor_args;
                DAST._IType _2196___mcc_h708 = _source130.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2197_recursiveGen;
                  bool _2198_recOwned;
                  bool _2199_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2200_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out777;
                  bool _out778;
                  bool _out779;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out780;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out777, out _out778, out _out779, out _out780);
                  _2197_recursiveGen = _out777;
                  _2198_recOwned = _out778;
                  _2199_recErased = _out779;
                  _2200_recIdents = _out780;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2197_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2198_recOwned;
                  isErased = _2199_recErased;
                  readIdents = _2200_recIdents;
                }
              } else if (_source130.is_Primitive) {
                DAST._IPrimitive _2201___mcc_h711 = _source130.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2202_recursiveGen;
                  bool _2203_recOwned;
                  bool _2204_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2205_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out781;
                  bool _out782;
                  bool _out783;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out784;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out781, out _out782, out _out783, out _out784);
                  _2202_recursiveGen = _out781;
                  _2203_recOwned = _out782;
                  _2204_recErased = _out783;
                  _2205_recIdents = _out784;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2202_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2203_recOwned;
                  isErased = _2204_recErased;
                  readIdents = _2205_recIdents;
                }
              } else if (_source130.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2206___mcc_h713 = _source130.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2207_recursiveGen;
                  bool _2208_recOwned;
                  bool _2209_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2210_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out785;
                  bool _out786;
                  bool _out787;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out788;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out785, out _out786, out _out787, out _out788);
                  _2207_recursiveGen = _out785;
                  _2208_recOwned = _out786;
                  _2209_recErased = _out787;
                  _2210_recIdents = _out788;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2207_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2208_recOwned;
                  isErased = _2209_recErased;
                  readIdents = _2210_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2211___mcc_h715 = _source130.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2212_recursiveGen;
                  bool _2213_recOwned;
                  bool _2214_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2215_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out789;
                  bool _out790;
                  bool _out791;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out792;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out789, out _out790, out _out791, out _out792);
                  _2212_recursiveGen = _out789;
                  _2213_recOwned = _out790;
                  _2214_recErased = _out791;
                  _2215_recIdents = _out792;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2212_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2213_recOwned;
                  isErased = _2214_recErased;
                  readIdents = _2215_recIdents;
                }
              }
            } else if (_source114.is_Multiset) {
              DAST._IType _2216___mcc_h717 = _source114.dtor_element;
              DAST._IType _source132 = _1550___mcc_h306;
              if (_source132.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2217___mcc_h721 = _source132.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2218___mcc_h722 = _source132.dtor_typeArgs;
                DAST._IResolvedType _2219___mcc_h723 = _source132.dtor_resolved;
                DAST._IResolvedType _source133 = _2219___mcc_h723;
                if (_source133.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2220___mcc_h727 = _source133.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2221_recursiveGen;
                    bool _2222_recOwned;
                    bool _2223_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2224_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out793;
                    bool _out794;
                    bool _out795;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out796;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out793, out _out794, out _out795, out _out796);
                    _2221_recursiveGen = _out793;
                    _2222_recOwned = _out794;
                    _2223_recErased = _out795;
                    _2224_recIdents = _out796;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2221_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2222_recOwned;
                    isErased = _2223_recErased;
                    readIdents = _2224_recIdents;
                  }
                } else if (_source133.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2225___mcc_h729 = _source133.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2226_recursiveGen;
                    bool _2227_recOwned;
                    bool _2228_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2229_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out797;
                    bool _out798;
                    bool _out799;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out800;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out797, out _out798, out _out799, out _out800);
                    _2226_recursiveGen = _out797;
                    _2227_recOwned = _out798;
                    _2228_recErased = _out799;
                    _2229_recIdents = _out800;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2226_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2227_recOwned;
                    isErased = _2228_recErased;
                    readIdents = _2229_recIdents;
                  }
                } else {
                  DAST._IType _2230___mcc_h731 = _source133.dtor_Newtype_a0;
                  DAST._IType _2231_b = _2230___mcc_h731;
                  {
                    if (object.Equals(_1543_fromTpe, _2231_b)) {
                      Dafny.ISequence<Dafny.Rune> _2232_recursiveGen;
                      bool _2233_recOwned;
                      bool _2234_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2235_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out801;
                      bool _out802;
                      bool _out803;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out804;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out801, out _out802, out _out803, out _out804);
                      _2232_recursiveGen = _out801;
                      _2233_recOwned = _out802;
                      _2234_recErased = _out803;
                      _2235_recIdents = _out804;
                      Dafny.ISequence<Dafny.Rune> _2236_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out805;
                      _out805 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _2236_rhsType = _out805;
                      Dafny.ISequence<Dafny.Rune> _2237_uneraseFn;
                      _2237_uneraseFn = ((_2233_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2236_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2237_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2232_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2233_recOwned;
                      isErased = false;
                      readIdents = _2235_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out806;
                      bool _out807;
                      bool _out808;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2231_b), _2231_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                      s = _out806;
                      isOwned = _out807;
                      isErased = _out808;
                      readIdents = _out809;
                    }
                  }
                }
              } else if (_source132.is_Nullable) {
                DAST._IType _2238___mcc_h733 = _source132.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2239_recursiveGen;
                  bool _2240_recOwned;
                  bool _2241_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2242_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out810;
                  bool _out811;
                  bool _out812;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out813;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out810, out _out811, out _out812, out _out813);
                  _2239_recursiveGen = _out810;
                  _2240_recOwned = _out811;
                  _2241_recErased = _out812;
                  _2242_recIdents = _out813;
                  if (!(_2240_recOwned)) {
                    _2239_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2239_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2239_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2241_recErased;
                  readIdents = _2242_recIdents;
                }
              } else if (_source132.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2243___mcc_h735 = _source132.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2244_recursiveGen;
                  bool _2245_recOwned;
                  bool _2246_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2247_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out814;
                  bool _out815;
                  bool _out816;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out814, out _out815, out _out816, out _out817);
                  _2244_recursiveGen = _out814;
                  _2245_recOwned = _out815;
                  _2246_recErased = _out816;
                  _2247_recIdents = _out817;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2244_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2245_recOwned;
                  isErased = _2246_recErased;
                  readIdents = _2247_recIdents;
                }
              } else if (_source132.is_Array) {
                DAST._IType _2248___mcc_h737 = _source132.dtor_element;
                BigInteger _2249___mcc_h738 = _source132.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2250_recursiveGen;
                  bool _2251_recOwned;
                  bool _2252_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2253_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out818;
                  bool _out819;
                  bool _out820;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out821;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out818, out _out819, out _out820, out _out821);
                  _2250_recursiveGen = _out818;
                  _2251_recOwned = _out819;
                  _2252_recErased = _out820;
                  _2253_recIdents = _out821;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2250_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2251_recOwned;
                  isErased = _2252_recErased;
                  readIdents = _2253_recIdents;
                }
              } else if (_source132.is_Seq) {
                DAST._IType _2254___mcc_h741 = _source132.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2255_recursiveGen;
                  bool _2256_recOwned;
                  bool _2257_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2258_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out822;
                  bool _out823;
                  bool _out824;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out825;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out822, out _out823, out _out824, out _out825);
                  _2255_recursiveGen = _out822;
                  _2256_recOwned = _out823;
                  _2257_recErased = _out824;
                  _2258_recIdents = _out825;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2255_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2256_recOwned;
                  isErased = _2257_recErased;
                  readIdents = _2258_recIdents;
                }
              } else if (_source132.is_Set) {
                DAST._IType _2259___mcc_h743 = _source132.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2260_recursiveGen;
                  bool _2261_recOwned;
                  bool _2262_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2263_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out826;
                  bool _out827;
                  bool _out828;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out829;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out826, out _out827, out _out828, out _out829);
                  _2260_recursiveGen = _out826;
                  _2261_recOwned = _out827;
                  _2262_recErased = _out828;
                  _2263_recIdents = _out829;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2260_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2261_recOwned;
                  isErased = _2262_recErased;
                  readIdents = _2263_recIdents;
                }
              } else if (_source132.is_Multiset) {
                DAST._IType _2264___mcc_h745 = _source132.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2265_recursiveGen;
                  bool _2266_recOwned;
                  bool _2267_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2268_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out830;
                  bool _out831;
                  bool _out832;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out833;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out830, out _out831, out _out832, out _out833);
                  _2265_recursiveGen = _out830;
                  _2266_recOwned = _out831;
                  _2267_recErased = _out832;
                  _2268_recIdents = _out833;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2265_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2266_recOwned;
                  isErased = _2267_recErased;
                  readIdents = _2268_recIdents;
                }
              } else if (_source132.is_Map) {
                DAST._IType _2269___mcc_h747 = _source132.dtor_key;
                DAST._IType _2270___mcc_h748 = _source132.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2271_recursiveGen;
                  bool _2272_recOwned;
                  bool _2273_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2274_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out834;
                  bool _out835;
                  bool _out836;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out837;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out834, out _out835, out _out836, out _out837);
                  _2271_recursiveGen = _out834;
                  _2272_recOwned = _out835;
                  _2273_recErased = _out836;
                  _2274_recIdents = _out837;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2271_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2272_recOwned;
                  isErased = _2273_recErased;
                  readIdents = _2274_recIdents;
                }
              } else if (_source132.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2275___mcc_h751 = _source132.dtor_args;
                DAST._IType _2276___mcc_h752 = _source132.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2277_recursiveGen;
                  bool _2278_recOwned;
                  bool _2279_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2280_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out838;
                  bool _out839;
                  bool _out840;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out841;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out838, out _out839, out _out840, out _out841);
                  _2277_recursiveGen = _out838;
                  _2278_recOwned = _out839;
                  _2279_recErased = _out840;
                  _2280_recIdents = _out841;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2278_recOwned;
                  isErased = _2279_recErased;
                  readIdents = _2280_recIdents;
                }
              } else if (_source132.is_Primitive) {
                DAST._IPrimitive _2281___mcc_h755 = _source132.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2282_recursiveGen;
                  bool _2283_recOwned;
                  bool _2284_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2285_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out842;
                  bool _out843;
                  bool _out844;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out845;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out842, out _out843, out _out844, out _out845);
                  _2282_recursiveGen = _out842;
                  _2283_recOwned = _out843;
                  _2284_recErased = _out844;
                  _2285_recIdents = _out845;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2282_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2283_recOwned;
                  isErased = _2284_recErased;
                  readIdents = _2285_recIdents;
                }
              } else if (_source132.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2286___mcc_h757 = _source132.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2287_recursiveGen;
                  bool _2288_recOwned;
                  bool _2289_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2290_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out846;
                  bool _out847;
                  bool _out848;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out849;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out846, out _out847, out _out848, out _out849);
                  _2287_recursiveGen = _out846;
                  _2288_recOwned = _out847;
                  _2289_recErased = _out848;
                  _2290_recIdents = _out849;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2287_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2288_recOwned;
                  isErased = _2289_recErased;
                  readIdents = _2290_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2291___mcc_h759 = _source132.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2292_recursiveGen;
                  bool _2293_recOwned;
                  bool _2294_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2295_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out850;
                  bool _out851;
                  bool _out852;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out853;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out850, out _out851, out _out852, out _out853);
                  _2292_recursiveGen = _out850;
                  _2293_recOwned = _out851;
                  _2294_recErased = _out852;
                  _2295_recIdents = _out853;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2293_recOwned;
                  isErased = _2294_recErased;
                  readIdents = _2295_recIdents;
                }
              }
            } else if (_source114.is_Map) {
              DAST._IType _2296___mcc_h761 = _source114.dtor_key;
              DAST._IType _2297___mcc_h762 = _source114.dtor_value;
              DAST._IType _source134 = _1550___mcc_h306;
              if (_source134.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2298___mcc_h769 = _source134.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2299___mcc_h770 = _source134.dtor_typeArgs;
                DAST._IResolvedType _2300___mcc_h771 = _source134.dtor_resolved;
                DAST._IResolvedType _source135 = _2300___mcc_h771;
                if (_source135.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2301___mcc_h775 = _source135.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2302_recursiveGen;
                    bool _2303_recOwned;
                    bool _2304_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2305_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out854;
                    bool _out855;
                    bool _out856;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out857;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out854, out _out855, out _out856, out _out857);
                    _2302_recursiveGen = _out854;
                    _2303_recOwned = _out855;
                    _2304_recErased = _out856;
                    _2305_recIdents = _out857;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2302_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2303_recOwned;
                    isErased = _2304_recErased;
                    readIdents = _2305_recIdents;
                  }
                } else if (_source135.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2306___mcc_h777 = _source135.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2307_recursiveGen;
                    bool _2308_recOwned;
                    bool _2309_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2310_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out858;
                    bool _out859;
                    bool _out860;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out861;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out858, out _out859, out _out860, out _out861);
                    _2307_recursiveGen = _out858;
                    _2308_recOwned = _out859;
                    _2309_recErased = _out860;
                    _2310_recIdents = _out861;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2307_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2308_recOwned;
                    isErased = _2309_recErased;
                    readIdents = _2310_recIdents;
                  }
                } else {
                  DAST._IType _2311___mcc_h779 = _source135.dtor_Newtype_a0;
                  DAST._IType _2312_b = _2311___mcc_h779;
                  {
                    if (object.Equals(_1543_fromTpe, _2312_b)) {
                      Dafny.ISequence<Dafny.Rune> _2313_recursiveGen;
                      bool _2314_recOwned;
                      bool _2315_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2316_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out862;
                      bool _out863;
                      bool _out864;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out865;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out862, out _out863, out _out864, out _out865);
                      _2313_recursiveGen = _out862;
                      _2314_recOwned = _out863;
                      _2315_recErased = _out864;
                      _2316_recIdents = _out865;
                      Dafny.ISequence<Dafny.Rune> _2317_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out866;
                      _out866 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _2317_rhsType = _out866;
                      Dafny.ISequence<Dafny.Rune> _2318_uneraseFn;
                      _2318_uneraseFn = ((_2314_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2317_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2318_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2313_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2314_recOwned;
                      isErased = false;
                      readIdents = _2316_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out867;
                      bool _out868;
                      bool _out869;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2312_b), _2312_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                      s = _out867;
                      isOwned = _out868;
                      isErased = _out869;
                      readIdents = _out870;
                    }
                  }
                }
              } else if (_source134.is_Nullable) {
                DAST._IType _2319___mcc_h781 = _source134.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2320_recursiveGen;
                  bool _2321_recOwned;
                  bool _2322_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2323_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out871;
                  bool _out872;
                  bool _out873;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out874;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out871, out _out872, out _out873, out _out874);
                  _2320_recursiveGen = _out871;
                  _2321_recOwned = _out872;
                  _2322_recErased = _out873;
                  _2323_recIdents = _out874;
                  if (!(_2321_recOwned)) {
                    _2320_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2320_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2320_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2322_recErased;
                  readIdents = _2323_recIdents;
                }
              } else if (_source134.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2324___mcc_h783 = _source134.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2325_recursiveGen;
                  bool _2326_recOwned;
                  bool _2327_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2328_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out875;
                  bool _out876;
                  bool _out877;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out875, out _out876, out _out877, out _out878);
                  _2325_recursiveGen = _out875;
                  _2326_recOwned = _out876;
                  _2327_recErased = _out877;
                  _2328_recIdents = _out878;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2325_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2326_recOwned;
                  isErased = _2327_recErased;
                  readIdents = _2328_recIdents;
                }
              } else if (_source134.is_Array) {
                DAST._IType _2329___mcc_h785 = _source134.dtor_element;
                BigInteger _2330___mcc_h786 = _source134.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2331_recursiveGen;
                  bool _2332_recOwned;
                  bool _2333_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2334_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out879;
                  bool _out880;
                  bool _out881;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out882;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out879, out _out880, out _out881, out _out882);
                  _2331_recursiveGen = _out879;
                  _2332_recOwned = _out880;
                  _2333_recErased = _out881;
                  _2334_recIdents = _out882;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2331_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2332_recOwned;
                  isErased = _2333_recErased;
                  readIdents = _2334_recIdents;
                }
              } else if (_source134.is_Seq) {
                DAST._IType _2335___mcc_h789 = _source134.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2336_recursiveGen;
                  bool _2337_recOwned;
                  bool _2338_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2339_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out883;
                  bool _out884;
                  bool _out885;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out886;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out883, out _out884, out _out885, out _out886);
                  _2336_recursiveGen = _out883;
                  _2337_recOwned = _out884;
                  _2338_recErased = _out885;
                  _2339_recIdents = _out886;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2336_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2337_recOwned;
                  isErased = _2338_recErased;
                  readIdents = _2339_recIdents;
                }
              } else if (_source134.is_Set) {
                DAST._IType _2340___mcc_h791 = _source134.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2341_recursiveGen;
                  bool _2342_recOwned;
                  bool _2343_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2344_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out887;
                  bool _out888;
                  bool _out889;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out890;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out887, out _out888, out _out889, out _out890);
                  _2341_recursiveGen = _out887;
                  _2342_recOwned = _out888;
                  _2343_recErased = _out889;
                  _2344_recIdents = _out890;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2341_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2342_recOwned;
                  isErased = _2343_recErased;
                  readIdents = _2344_recIdents;
                }
              } else if (_source134.is_Multiset) {
                DAST._IType _2345___mcc_h793 = _source134.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2346_recursiveGen;
                  bool _2347_recOwned;
                  bool _2348_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2349_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out891;
                  bool _out892;
                  bool _out893;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out894;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out891, out _out892, out _out893, out _out894);
                  _2346_recursiveGen = _out891;
                  _2347_recOwned = _out892;
                  _2348_recErased = _out893;
                  _2349_recIdents = _out894;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2346_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2347_recOwned;
                  isErased = _2348_recErased;
                  readIdents = _2349_recIdents;
                }
              } else if (_source134.is_Map) {
                DAST._IType _2350___mcc_h795 = _source134.dtor_key;
                DAST._IType _2351___mcc_h796 = _source134.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2352_recursiveGen;
                  bool _2353_recOwned;
                  bool _2354_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2355_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out895;
                  bool _out896;
                  bool _out897;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out895, out _out896, out _out897, out _out898);
                  _2352_recursiveGen = _out895;
                  _2353_recOwned = _out896;
                  _2354_recErased = _out897;
                  _2355_recIdents = _out898;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2352_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2353_recOwned;
                  isErased = _2354_recErased;
                  readIdents = _2355_recIdents;
                }
              } else if (_source134.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2356___mcc_h799 = _source134.dtor_args;
                DAST._IType _2357___mcc_h800 = _source134.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2358_recursiveGen;
                  bool _2359_recOwned;
                  bool _2360_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2361_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out899;
                  bool _out900;
                  bool _out901;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out902;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out899, out _out900, out _out901, out _out902);
                  _2358_recursiveGen = _out899;
                  _2359_recOwned = _out900;
                  _2360_recErased = _out901;
                  _2361_recIdents = _out902;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2359_recOwned;
                  isErased = _2360_recErased;
                  readIdents = _2361_recIdents;
                }
              } else if (_source134.is_Primitive) {
                DAST._IPrimitive _2362___mcc_h803 = _source134.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2363_recursiveGen;
                  bool _2364_recOwned;
                  bool _2365_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2366_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out903;
                  bool _out904;
                  bool _out905;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out906;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out903, out _out904, out _out905, out _out906);
                  _2363_recursiveGen = _out903;
                  _2364_recOwned = _out904;
                  _2365_recErased = _out905;
                  _2366_recIdents = _out906;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2363_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2364_recOwned;
                  isErased = _2365_recErased;
                  readIdents = _2366_recIdents;
                }
              } else if (_source134.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2367___mcc_h805 = _source134.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2368_recursiveGen;
                  bool _2369_recOwned;
                  bool _2370_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2371_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out907;
                  bool _out908;
                  bool _out909;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out910;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out907, out _out908, out _out909, out _out910);
                  _2368_recursiveGen = _out907;
                  _2369_recOwned = _out908;
                  _2370_recErased = _out909;
                  _2371_recIdents = _out910;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2368_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2369_recOwned;
                  isErased = _2370_recErased;
                  readIdents = _2371_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2372___mcc_h807 = _source134.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2373_recursiveGen;
                  bool _2374_recOwned;
                  bool _2375_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2376_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out911;
                  bool _out912;
                  bool _out913;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out914;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out911, out _out912, out _out913, out _out914);
                  _2373_recursiveGen = _out911;
                  _2374_recOwned = _out912;
                  _2375_recErased = _out913;
                  _2376_recIdents = _out914;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2373_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2374_recOwned;
                  isErased = _2375_recErased;
                  readIdents = _2376_recIdents;
                }
              }
            } else if (_source114.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2377___mcc_h809 = _source114.dtor_args;
              DAST._IType _2378___mcc_h810 = _source114.dtor_result;
              DAST._IType _source136 = _1550___mcc_h306;
              if (_source136.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2379___mcc_h817 = _source136.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2380___mcc_h818 = _source136.dtor_typeArgs;
                DAST._IResolvedType _2381___mcc_h819 = _source136.dtor_resolved;
                DAST._IResolvedType _source137 = _2381___mcc_h819;
                if (_source137.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2382___mcc_h823 = _source137.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2383_recursiveGen;
                    bool _2384_recOwned;
                    bool _2385_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2386_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out915;
                    bool _out916;
                    bool _out917;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out918;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out915, out _out916, out _out917, out _out918);
                    _2383_recursiveGen = _out915;
                    _2384_recOwned = _out916;
                    _2385_recErased = _out917;
                    _2386_recIdents = _out918;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2383_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2384_recOwned;
                    isErased = _2385_recErased;
                    readIdents = _2386_recIdents;
                  }
                } else if (_source137.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2387___mcc_h825 = _source137.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2388_recursiveGen;
                    bool _2389_recOwned;
                    bool _2390_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2391_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out919;
                    bool _out920;
                    bool _out921;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out922;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out919, out _out920, out _out921, out _out922);
                    _2388_recursiveGen = _out919;
                    _2389_recOwned = _out920;
                    _2390_recErased = _out921;
                    _2391_recIdents = _out922;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2388_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2389_recOwned;
                    isErased = _2390_recErased;
                    readIdents = _2391_recIdents;
                  }
                } else {
                  DAST._IType _2392___mcc_h827 = _source137.dtor_Newtype_a0;
                  DAST._IType _2393_b = _2392___mcc_h827;
                  {
                    if (object.Equals(_1543_fromTpe, _2393_b)) {
                      Dafny.ISequence<Dafny.Rune> _2394_recursiveGen;
                      bool _2395_recOwned;
                      bool _2396_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2397_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out923;
                      bool _out924;
                      bool _out925;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out926;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out923, out _out924, out _out925, out _out926);
                      _2394_recursiveGen = _out923;
                      _2395_recOwned = _out924;
                      _2396_recErased = _out925;
                      _2397_recIdents = _out926;
                      Dafny.ISequence<Dafny.Rune> _2398_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out927;
                      _out927 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _2398_rhsType = _out927;
                      Dafny.ISequence<Dafny.Rune> _2399_uneraseFn;
                      _2399_uneraseFn = ((_2395_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2398_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2399_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2394_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2395_recOwned;
                      isErased = false;
                      readIdents = _2397_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out928;
                      bool _out929;
                      bool _out930;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2393_b), _2393_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                      s = _out928;
                      isOwned = _out929;
                      isErased = _out930;
                      readIdents = _out931;
                    }
                  }
                }
              } else if (_source136.is_Nullable) {
                DAST._IType _2400___mcc_h829 = _source136.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2401_recursiveGen;
                  bool _2402_recOwned;
                  bool _2403_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2404_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out932;
                  bool _out933;
                  bool _out934;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out935;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out932, out _out933, out _out934, out _out935);
                  _2401_recursiveGen = _out932;
                  _2402_recOwned = _out933;
                  _2403_recErased = _out934;
                  _2404_recIdents = _out935;
                  if (!(_2402_recOwned)) {
                    _2401_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2401_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2401_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2403_recErased;
                  readIdents = _2404_recIdents;
                }
              } else if (_source136.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2405___mcc_h831 = _source136.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2406_recursiveGen;
                  bool _2407_recOwned;
                  bool _2408_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2409_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out936;
                  bool _out937;
                  bool _out938;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out939;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out936, out _out937, out _out938, out _out939);
                  _2406_recursiveGen = _out936;
                  _2407_recOwned = _out937;
                  _2408_recErased = _out938;
                  _2409_recIdents = _out939;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2406_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2407_recOwned;
                  isErased = _2408_recErased;
                  readIdents = _2409_recIdents;
                }
              } else if (_source136.is_Array) {
                DAST._IType _2410___mcc_h833 = _source136.dtor_element;
                BigInteger _2411___mcc_h834 = _source136.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2412_recursiveGen;
                  bool _2413_recOwned;
                  bool _2414_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2415_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out940;
                  bool _out941;
                  bool _out942;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out943;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out940, out _out941, out _out942, out _out943);
                  _2412_recursiveGen = _out940;
                  _2413_recOwned = _out941;
                  _2414_recErased = _out942;
                  _2415_recIdents = _out943;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2413_recOwned;
                  isErased = _2414_recErased;
                  readIdents = _2415_recIdents;
                }
              } else if (_source136.is_Seq) {
                DAST._IType _2416___mcc_h837 = _source136.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2417_recursiveGen;
                  bool _2418_recOwned;
                  bool _2419_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2420_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out944;
                  bool _out945;
                  bool _out946;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out947;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out944, out _out945, out _out946, out _out947);
                  _2417_recursiveGen = _out944;
                  _2418_recOwned = _out945;
                  _2419_recErased = _out946;
                  _2420_recIdents = _out947;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2417_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2418_recOwned;
                  isErased = _2419_recErased;
                  readIdents = _2420_recIdents;
                }
              } else if (_source136.is_Set) {
                DAST._IType _2421___mcc_h839 = _source136.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2422_recursiveGen;
                  bool _2423_recOwned;
                  bool _2424_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2425_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out948;
                  bool _out949;
                  bool _out950;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out951;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out948, out _out949, out _out950, out _out951);
                  _2422_recursiveGen = _out948;
                  _2423_recOwned = _out949;
                  _2424_recErased = _out950;
                  _2425_recIdents = _out951;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2422_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2423_recOwned;
                  isErased = _2424_recErased;
                  readIdents = _2425_recIdents;
                }
              } else if (_source136.is_Multiset) {
                DAST._IType _2426___mcc_h841 = _source136.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2427_recursiveGen;
                  bool _2428_recOwned;
                  bool _2429_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2430_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out952;
                  bool _out953;
                  bool _out954;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out955;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out952, out _out953, out _out954, out _out955);
                  _2427_recursiveGen = _out952;
                  _2428_recOwned = _out953;
                  _2429_recErased = _out954;
                  _2430_recIdents = _out955;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2427_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2428_recOwned;
                  isErased = _2429_recErased;
                  readIdents = _2430_recIdents;
                }
              } else if (_source136.is_Map) {
                DAST._IType _2431___mcc_h843 = _source136.dtor_key;
                DAST._IType _2432___mcc_h844 = _source136.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2433_recursiveGen;
                  bool _2434_recOwned;
                  bool _2435_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2436_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out956;
                  bool _out957;
                  bool _out958;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out956, out _out957, out _out958, out _out959);
                  _2433_recursiveGen = _out956;
                  _2434_recOwned = _out957;
                  _2435_recErased = _out958;
                  _2436_recIdents = _out959;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2433_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2434_recOwned;
                  isErased = _2435_recErased;
                  readIdents = _2436_recIdents;
                }
              } else if (_source136.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2437___mcc_h847 = _source136.dtor_args;
                DAST._IType _2438___mcc_h848 = _source136.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2439_recursiveGen;
                  bool _2440_recOwned;
                  bool _2441_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2442_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out960;
                  bool _out961;
                  bool _out962;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out963;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out960, out _out961, out _out962, out _out963);
                  _2439_recursiveGen = _out960;
                  _2440_recOwned = _out961;
                  _2441_recErased = _out962;
                  _2442_recIdents = _out963;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2439_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2440_recOwned;
                  isErased = _2441_recErased;
                  readIdents = _2442_recIdents;
                }
              } else if (_source136.is_Primitive) {
                DAST._IPrimitive _2443___mcc_h851 = _source136.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2444_recursiveGen;
                  bool _2445_recOwned;
                  bool _2446_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2447_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out964;
                  bool _out965;
                  bool _out966;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out967;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out964, out _out965, out _out966, out _out967);
                  _2444_recursiveGen = _out964;
                  _2445_recOwned = _out965;
                  _2446_recErased = _out966;
                  _2447_recIdents = _out967;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2444_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2445_recOwned;
                  isErased = _2446_recErased;
                  readIdents = _2447_recIdents;
                }
              } else if (_source136.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2448___mcc_h853 = _source136.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2449_recursiveGen;
                  bool _2450_recOwned;
                  bool _2451_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2452_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out968;
                  bool _out969;
                  bool _out970;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out971;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out968, out _out969, out _out970, out _out971);
                  _2449_recursiveGen = _out968;
                  _2450_recOwned = _out969;
                  _2451_recErased = _out970;
                  _2452_recIdents = _out971;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2449_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2450_recOwned;
                  isErased = _2451_recErased;
                  readIdents = _2452_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2453___mcc_h855 = _source136.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2454_recursiveGen;
                  bool _2455_recOwned;
                  bool _2456_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2457_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out972;
                  bool _out973;
                  bool _out974;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out975;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out972, out _out973, out _out974, out _out975);
                  _2454_recursiveGen = _out972;
                  _2455_recOwned = _out973;
                  _2456_recErased = _out974;
                  _2457_recIdents = _out975;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2454_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2455_recOwned;
                  isErased = _2456_recErased;
                  readIdents = _2457_recIdents;
                }
              }
            } else if (_source114.is_Primitive) {
              DAST._IPrimitive _2458___mcc_h857 = _source114.dtor_Primitive_a0;
              DAST._IPrimitive _source138 = _2458___mcc_h857;
              if (_source138.is_Int) {
                DAST._IType _source139 = _1550___mcc_h306;
                if (_source139.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2459___mcc_h861 = _source139.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2460___mcc_h862 = _source139.dtor_typeArgs;
                  DAST._IResolvedType _2461___mcc_h863 = _source139.dtor_resolved;
                  DAST._IResolvedType _source140 = _2461___mcc_h863;
                  if (_source140.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2462___mcc_h867 = _source140.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2463_recursiveGen;
                      bool _2464_recOwned;
                      bool _2465_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2466_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out976;
                      bool _out977;
                      bool _out978;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out976, out _out977, out _out978, out _out979);
                      _2463_recursiveGen = _out976;
                      _2464_recOwned = _out977;
                      _2465_recErased = _out978;
                      _2466_recIdents = _out979;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2463_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2464_recOwned;
                      isErased = _2465_recErased;
                      readIdents = _2466_recIdents;
                    }
                  } else if (_source140.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2467___mcc_h869 = _source140.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2468_recursiveGen;
                      bool _2469_recOwned;
                      bool _2470_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2471_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out980;
                      bool _out981;
                      bool _out982;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out983;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out980, out _out981, out _out982, out _out983);
                      _2468_recursiveGen = _out980;
                      _2469_recOwned = _out981;
                      _2470_recErased = _out982;
                      _2471_recIdents = _out983;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2468_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2469_recOwned;
                      isErased = _2470_recErased;
                      readIdents = _2471_recIdents;
                    }
                  } else {
                    DAST._IType _2472___mcc_h871 = _source140.dtor_Newtype_a0;
                    DAST._IType _2473_b = _2472___mcc_h871;
                    {
                      if (object.Equals(_1543_fromTpe, _2473_b)) {
                        Dafny.ISequence<Dafny.Rune> _2474_recursiveGen;
                        bool _2475_recOwned;
                        bool _2476_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2477_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out984;
                        bool _out985;
                        bool _out986;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out987;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out984, out _out985, out _out986, out _out987);
                        _2474_recursiveGen = _out984;
                        _2475_recOwned = _out985;
                        _2476_recErased = _out986;
                        _2477_recIdents = _out987;
                        Dafny.ISequence<Dafny.Rune> _2478_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out988;
                        _out988 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                        _2478_rhsType = _out988;
                        Dafny.ISequence<Dafny.Rune> _2479_uneraseFn;
                        _2479_uneraseFn = ((_2475_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2478_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2479_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2474_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2475_recOwned;
                        isErased = false;
                        readIdents = _2477_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out989;
                        bool _out990;
                        bool _out991;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out992;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2473_b), _2473_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out989, out _out990, out _out991, out _out992);
                        s = _out989;
                        isOwned = _out990;
                        isErased = _out991;
                        readIdents = _out992;
                      }
                    }
                  }
                } else if (_source139.is_Nullable) {
                  DAST._IType _2480___mcc_h873 = _source139.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2481_recursiveGen;
                    bool _2482_recOwned;
                    bool _2483_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2484_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out993;
                    bool _out994;
                    bool _out995;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out996;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out993, out _out994, out _out995, out _out996);
                    _2481_recursiveGen = _out993;
                    _2482_recOwned = _out994;
                    _2483_recErased = _out995;
                    _2484_recIdents = _out996;
                    if (!(_2482_recOwned)) {
                      _2481_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2481_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2481_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2483_recErased;
                    readIdents = _2484_recIdents;
                  }
                } else if (_source139.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2485___mcc_h875 = _source139.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2486_recursiveGen;
                    bool _2487_recOwned;
                    bool _2488_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2489_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out997;
                    bool _out998;
                    bool _out999;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1000;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out997, out _out998, out _out999, out _out1000);
                    _2486_recursiveGen = _out997;
                    _2487_recOwned = _out998;
                    _2488_recErased = _out999;
                    _2489_recIdents = _out1000;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2486_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2487_recOwned;
                    isErased = _2488_recErased;
                    readIdents = _2489_recIdents;
                  }
                } else if (_source139.is_Array) {
                  DAST._IType _2490___mcc_h877 = _source139.dtor_element;
                  BigInteger _2491___mcc_h878 = _source139.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2492_recursiveGen;
                    bool _2493_recOwned;
                    bool _2494_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2495_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1001;
                    bool _out1002;
                    bool _out1003;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1001, out _out1002, out _out1003, out _out1004);
                    _2492_recursiveGen = _out1001;
                    _2493_recOwned = _out1002;
                    _2494_recErased = _out1003;
                    _2495_recIdents = _out1004;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2492_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2493_recOwned;
                    isErased = _2494_recErased;
                    readIdents = _2495_recIdents;
                  }
                } else if (_source139.is_Seq) {
                  DAST._IType _2496___mcc_h881 = _source139.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2497_recursiveGen;
                    bool _2498_recOwned;
                    bool _2499_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2500_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1005;
                    bool _out1006;
                    bool _out1007;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1008;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1005, out _out1006, out _out1007, out _out1008);
                    _2497_recursiveGen = _out1005;
                    _2498_recOwned = _out1006;
                    _2499_recErased = _out1007;
                    _2500_recIdents = _out1008;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2497_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2498_recOwned;
                    isErased = _2499_recErased;
                    readIdents = _2500_recIdents;
                  }
                } else if (_source139.is_Set) {
                  DAST._IType _2501___mcc_h883 = _source139.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2502_recursiveGen;
                    bool _2503_recOwned;
                    bool _2504_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2505_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1009;
                    bool _out1010;
                    bool _out1011;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1012;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1009, out _out1010, out _out1011, out _out1012);
                    _2502_recursiveGen = _out1009;
                    _2503_recOwned = _out1010;
                    _2504_recErased = _out1011;
                    _2505_recIdents = _out1012;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2502_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2503_recOwned;
                    isErased = _2504_recErased;
                    readIdents = _2505_recIdents;
                  }
                } else if (_source139.is_Multiset) {
                  DAST._IType _2506___mcc_h885 = _source139.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2507_recursiveGen;
                    bool _2508_recOwned;
                    bool _2509_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2510_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1013;
                    bool _out1014;
                    bool _out1015;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1016;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1013, out _out1014, out _out1015, out _out1016);
                    _2507_recursiveGen = _out1013;
                    _2508_recOwned = _out1014;
                    _2509_recErased = _out1015;
                    _2510_recIdents = _out1016;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2507_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2508_recOwned;
                    isErased = _2509_recErased;
                    readIdents = _2510_recIdents;
                  }
                } else if (_source139.is_Map) {
                  DAST._IType _2511___mcc_h887 = _source139.dtor_key;
                  DAST._IType _2512___mcc_h888 = _source139.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2513_recursiveGen;
                    bool _2514_recOwned;
                    bool _2515_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2516_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1017;
                    bool _out1018;
                    bool _out1019;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1020;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1017, out _out1018, out _out1019, out _out1020);
                    _2513_recursiveGen = _out1017;
                    _2514_recOwned = _out1018;
                    _2515_recErased = _out1019;
                    _2516_recIdents = _out1020;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2513_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2514_recOwned;
                    isErased = _2515_recErased;
                    readIdents = _2516_recIdents;
                  }
                } else if (_source139.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2517___mcc_h891 = _source139.dtor_args;
                  DAST._IType _2518___mcc_h892 = _source139.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2519_recursiveGen;
                    bool _2520_recOwned;
                    bool _2521_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2522_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1021;
                    bool _out1022;
                    bool _out1023;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1021, out _out1022, out _out1023, out _out1024);
                    _2519_recursiveGen = _out1021;
                    _2520_recOwned = _out1022;
                    _2521_recErased = _out1023;
                    _2522_recIdents = _out1024;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2519_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2520_recOwned;
                    isErased = _2521_recErased;
                    readIdents = _2522_recIdents;
                  }
                } else if (_source139.is_Primitive) {
                  DAST._IPrimitive _2523___mcc_h895 = _source139.dtor_Primitive_a0;
                  DAST._IPrimitive _source141 = _2523___mcc_h895;
                  if (_source141.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2524_recursiveGen;
                      bool _2525_recOwned;
                      bool _2526_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2527_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1025;
                      bool _out1026;
                      bool _out1027;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027, out _out1028);
                      _2524_recursiveGen = _out1025;
                      _2525_recOwned = _out1026;
                      _2526_recErased = _out1027;
                      _2527_recIdents = _out1028;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2524_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2525_recOwned;
                      isErased = _2526_recErased;
                      readIdents = _2527_recIdents;
                    }
                  } else if (_source141.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2528_recursiveGen;
                      bool _2529___v46;
                      bool _2530___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2531_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1029;
                      bool _out1030;
                      bool _out1031;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, true, out _out1029, out _out1030, out _out1031, out _out1032);
                      _2528_recursiveGen = _out1029;
                      _2529___v46 = _out1030;
                      _2530___v47 = _out1031;
                      _2531_recIdents = _out1032;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2528_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2531_recIdents;
                    }
                  } else if (_source141.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2532_recursiveGen;
                      bool _2533_recOwned;
                      bool _2534_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2535_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1033;
                      bool _out1034;
                      bool _out1035;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1033, out _out1034, out _out1035, out _out1036);
                      _2532_recursiveGen = _out1033;
                      _2533_recOwned = _out1034;
                      _2534_recErased = _out1035;
                      _2535_recIdents = _out1036;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2532_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2533_recOwned;
                      isErased = _2534_recErased;
                      readIdents = _2535_recIdents;
                    }
                  } else if (_source141.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2536_recursiveGen;
                      bool _2537_recOwned;
                      bool _2538_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2539_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1037;
                      bool _out1038;
                      bool _out1039;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1037, out _out1038, out _out1039, out _out1040);
                      _2536_recursiveGen = _out1037;
                      _2537_recOwned = _out1038;
                      _2538_recErased = _out1039;
                      _2539_recIdents = _out1040;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2536_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2537_recOwned;
                      isErased = _2538_recErased;
                      readIdents = _2539_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2540_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1041;
                      _out1041 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _2540_rhsType = _out1041;
                      Dafny.ISequence<Dafny.Rune> _2541_recursiveGen;
                      bool _2542___v56;
                      bool _2543___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2544_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1042;
                      bool _out1043;
                      bool _out1044;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, true, out _out1042, out _out1043, out _out1044, out _out1045);
                      _2541_recursiveGen = _out1042;
                      _2542___v56 = _out1043;
                      _2543___v57 = _out1044;
                      _2544_recIdents = _out1045;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2541_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2544_recIdents;
                    }
                  }
                } else if (_source139.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2545___mcc_h897 = _source139.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2546_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1046;
                    _out1046 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                    _2546_rhsType = _out1046;
                    Dafny.ISequence<Dafny.Rune> _2547_recursiveGen;
                    bool _2548___v51;
                    bool _2549___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2550_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1047;
                    bool _out1048;
                    bool _out1049;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1050;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, true, out _out1047, out _out1048, out _out1049, out _out1050);
                    _2547_recursiveGen = _out1047;
                    _2548___v51 = _out1048;
                    _2549___v52 = _out1049;
                    _2550_recIdents = _out1050;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2546_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2547_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2550_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2551___mcc_h899 = _source139.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2552_recursiveGen;
                    bool _2553_recOwned;
                    bool _2554_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2555_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1051;
                    bool _out1052;
                    bool _out1053;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1054;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1051, out _out1052, out _out1053, out _out1054);
                    _2552_recursiveGen = _out1051;
                    _2553_recOwned = _out1052;
                    _2554_recErased = _out1053;
                    _2555_recIdents = _out1054;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2552_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2553_recOwned;
                    isErased = _2554_recErased;
                    readIdents = _2555_recIdents;
                  }
                }
              } else if (_source138.is_Real) {
                DAST._IType _source142 = _1550___mcc_h306;
                if (_source142.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2556___mcc_h901 = _source142.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2557___mcc_h902 = _source142.dtor_typeArgs;
                  DAST._IResolvedType _2558___mcc_h903 = _source142.dtor_resolved;
                  DAST._IResolvedType _source143 = _2558___mcc_h903;
                  if (_source143.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2559___mcc_h907 = _source143.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2560_recursiveGen;
                      bool _2561_recOwned;
                      bool _2562_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2563_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1055;
                      bool _out1056;
                      bool _out1057;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1058;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1055, out _out1056, out _out1057, out _out1058);
                      _2560_recursiveGen = _out1055;
                      _2561_recOwned = _out1056;
                      _2562_recErased = _out1057;
                      _2563_recIdents = _out1058;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2560_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2561_recOwned;
                      isErased = _2562_recErased;
                      readIdents = _2563_recIdents;
                    }
                  } else if (_source143.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2564___mcc_h909 = _source143.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2565_recursiveGen;
                      bool _2566_recOwned;
                      bool _2567_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2568_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1059;
                      bool _out1060;
                      bool _out1061;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1062;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1059, out _out1060, out _out1061, out _out1062);
                      _2565_recursiveGen = _out1059;
                      _2566_recOwned = _out1060;
                      _2567_recErased = _out1061;
                      _2568_recIdents = _out1062;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2565_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2566_recOwned;
                      isErased = _2567_recErased;
                      readIdents = _2568_recIdents;
                    }
                  } else {
                    DAST._IType _2569___mcc_h911 = _source143.dtor_Newtype_a0;
                    DAST._IType _2570_b = _2569___mcc_h911;
                    {
                      if (object.Equals(_1543_fromTpe, _2570_b)) {
                        Dafny.ISequence<Dafny.Rune> _2571_recursiveGen;
                        bool _2572_recOwned;
                        bool _2573_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2574_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1063;
                        bool _out1064;
                        bool _out1065;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1066;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1063, out _out1064, out _out1065, out _out1066);
                        _2571_recursiveGen = _out1063;
                        _2572_recOwned = _out1064;
                        _2573_recErased = _out1065;
                        _2574_recIdents = _out1066;
                        Dafny.ISequence<Dafny.Rune> _2575_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1067;
                        _out1067 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                        _2575_rhsType = _out1067;
                        Dafny.ISequence<Dafny.Rune> _2576_uneraseFn;
                        _2576_uneraseFn = ((_2572_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2575_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2576_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2571_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2572_recOwned;
                        isErased = false;
                        readIdents = _2574_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1068;
                        bool _out1069;
                        bool _out1070;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2570_b), _2570_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                        s = _out1068;
                        isOwned = _out1069;
                        isErased = _out1070;
                        readIdents = _out1071;
                      }
                    }
                  }
                } else if (_source142.is_Nullable) {
                  DAST._IType _2577___mcc_h913 = _source142.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2578_recursiveGen;
                    bool _2579_recOwned;
                    bool _2580_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2581_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1072;
                    bool _out1073;
                    bool _out1074;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                    _2578_recursiveGen = _out1072;
                    _2579_recOwned = _out1073;
                    _2580_recErased = _out1074;
                    _2581_recIdents = _out1075;
                    if (!(_2579_recOwned)) {
                      _2578_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2578_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2578_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2580_recErased;
                    readIdents = _2581_recIdents;
                  }
                } else if (_source142.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2582___mcc_h915 = _source142.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2583_recursiveGen;
                    bool _2584_recOwned;
                    bool _2585_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2586_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1076;
                    bool _out1077;
                    bool _out1078;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                    _2583_recursiveGen = _out1076;
                    _2584_recOwned = _out1077;
                    _2585_recErased = _out1078;
                    _2586_recIdents = _out1079;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2583_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2584_recOwned;
                    isErased = _2585_recErased;
                    readIdents = _2586_recIdents;
                  }
                } else if (_source142.is_Array) {
                  DAST._IType _2587___mcc_h917 = _source142.dtor_element;
                  BigInteger _2588___mcc_h918 = _source142.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2589_recursiveGen;
                    bool _2590_recOwned;
                    bool _2591_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2592_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1080;
                    bool _out1081;
                    bool _out1082;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1080, out _out1081, out _out1082, out _out1083);
                    _2589_recursiveGen = _out1080;
                    _2590_recOwned = _out1081;
                    _2591_recErased = _out1082;
                    _2592_recIdents = _out1083;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2589_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2590_recOwned;
                    isErased = _2591_recErased;
                    readIdents = _2592_recIdents;
                  }
                } else if (_source142.is_Seq) {
                  DAST._IType _2593___mcc_h921 = _source142.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2594_recursiveGen;
                    bool _2595_recOwned;
                    bool _2596_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2597_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1084;
                    bool _out1085;
                    bool _out1086;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1084, out _out1085, out _out1086, out _out1087);
                    _2594_recursiveGen = _out1084;
                    _2595_recOwned = _out1085;
                    _2596_recErased = _out1086;
                    _2597_recIdents = _out1087;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2594_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2595_recOwned;
                    isErased = _2596_recErased;
                    readIdents = _2597_recIdents;
                  }
                } else if (_source142.is_Set) {
                  DAST._IType _2598___mcc_h923 = _source142.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2599_recursiveGen;
                    bool _2600_recOwned;
                    bool _2601_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2602_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1088;
                    bool _out1089;
                    bool _out1090;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1091;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1088, out _out1089, out _out1090, out _out1091);
                    _2599_recursiveGen = _out1088;
                    _2600_recOwned = _out1089;
                    _2601_recErased = _out1090;
                    _2602_recIdents = _out1091;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2599_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2600_recOwned;
                    isErased = _2601_recErased;
                    readIdents = _2602_recIdents;
                  }
                } else if (_source142.is_Multiset) {
                  DAST._IType _2603___mcc_h925 = _source142.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2604_recursiveGen;
                    bool _2605_recOwned;
                    bool _2606_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2607_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1092;
                    bool _out1093;
                    bool _out1094;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1092, out _out1093, out _out1094, out _out1095);
                    _2604_recursiveGen = _out1092;
                    _2605_recOwned = _out1093;
                    _2606_recErased = _out1094;
                    _2607_recIdents = _out1095;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2604_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2605_recOwned;
                    isErased = _2606_recErased;
                    readIdents = _2607_recIdents;
                  }
                } else if (_source142.is_Map) {
                  DAST._IType _2608___mcc_h927 = _source142.dtor_key;
                  DAST._IType _2609___mcc_h928 = _source142.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2610_recursiveGen;
                    bool _2611_recOwned;
                    bool _2612_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2613_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1096;
                    bool _out1097;
                    bool _out1098;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1099;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1096, out _out1097, out _out1098, out _out1099);
                    _2610_recursiveGen = _out1096;
                    _2611_recOwned = _out1097;
                    _2612_recErased = _out1098;
                    _2613_recIdents = _out1099;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2610_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2611_recOwned;
                    isErased = _2612_recErased;
                    readIdents = _2613_recIdents;
                  }
                } else if (_source142.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2614___mcc_h931 = _source142.dtor_args;
                  DAST._IType _2615___mcc_h932 = _source142.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2616_recursiveGen;
                    bool _2617_recOwned;
                    bool _2618_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2619_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1100;
                    bool _out1101;
                    bool _out1102;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1103;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1100, out _out1101, out _out1102, out _out1103);
                    _2616_recursiveGen = _out1100;
                    _2617_recOwned = _out1101;
                    _2618_recErased = _out1102;
                    _2619_recIdents = _out1103;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2616_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2617_recOwned;
                    isErased = _2618_recErased;
                    readIdents = _2619_recIdents;
                  }
                } else if (_source142.is_Primitive) {
                  DAST._IPrimitive _2620___mcc_h935 = _source142.dtor_Primitive_a0;
                  DAST._IPrimitive _source144 = _2620___mcc_h935;
                  if (_source144.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2621_recursiveGen;
                      bool _2622___v48;
                      bool _2623___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2624_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1104;
                      bool _out1105;
                      bool _out1106;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1107;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, false, out _out1104, out _out1105, out _out1106, out _out1107);
                      _2621_recursiveGen = _out1104;
                      _2622___v48 = _out1105;
                      _2623___v49 = _out1106;
                      _2624_recIdents = _out1107;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2621_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2624_recIdents;
                    }
                  } else if (_source144.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2625_recursiveGen;
                      bool _2626_recOwned;
                      bool _2627_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2628_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1108;
                      bool _out1109;
                      bool _out1110;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1111;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1108, out _out1109, out _out1110, out _out1111);
                      _2625_recursiveGen = _out1108;
                      _2626_recOwned = _out1109;
                      _2627_recErased = _out1110;
                      _2628_recIdents = _out1111;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2626_recOwned;
                      isErased = _2627_recErased;
                      readIdents = _2628_recIdents;
                    }
                  } else if (_source144.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2629_recursiveGen;
                      bool _2630_recOwned;
                      bool _2631_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2632_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1112;
                      bool _out1113;
                      bool _out1114;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1115;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1112, out _out1113, out _out1114, out _out1115);
                      _2629_recursiveGen = _out1112;
                      _2630_recOwned = _out1113;
                      _2631_recErased = _out1114;
                      _2632_recIdents = _out1115;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2629_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2630_recOwned;
                      isErased = _2631_recErased;
                      readIdents = _2632_recIdents;
                    }
                  } else if (_source144.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2633_recursiveGen;
                      bool _2634_recOwned;
                      bool _2635_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2636_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1116;
                      bool _out1117;
                      bool _out1118;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1119;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1116, out _out1117, out _out1118, out _out1119);
                      _2633_recursiveGen = _out1116;
                      _2634_recOwned = _out1117;
                      _2635_recErased = _out1118;
                      _2636_recIdents = _out1119;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2633_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2634_recOwned;
                      isErased = _2635_recErased;
                      readIdents = _2636_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2637_recursiveGen;
                      bool _2638_recOwned;
                      bool _2639_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2640_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1120;
                      bool _out1121;
                      bool _out1122;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1123;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1120, out _out1121, out _out1122, out _out1123);
                      _2637_recursiveGen = _out1120;
                      _2638_recOwned = _out1121;
                      _2639_recErased = _out1122;
                      _2640_recIdents = _out1123;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2637_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2638_recOwned;
                      isErased = _2639_recErased;
                      readIdents = _2640_recIdents;
                    }
                  }
                } else if (_source142.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2641___mcc_h937 = _source142.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2642_recursiveGen;
                    bool _2643_recOwned;
                    bool _2644_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2645_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1124;
                    bool _out1125;
                    bool _out1126;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1127;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1124, out _out1125, out _out1126, out _out1127);
                    _2642_recursiveGen = _out1124;
                    _2643_recOwned = _out1125;
                    _2644_recErased = _out1126;
                    _2645_recIdents = _out1127;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2642_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2643_recOwned;
                    isErased = _2644_recErased;
                    readIdents = _2645_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2646___mcc_h939 = _source142.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2647_recursiveGen;
                    bool _2648_recOwned;
                    bool _2649_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2650_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1128;
                    bool _out1129;
                    bool _out1130;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1131;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1128, out _out1129, out _out1130, out _out1131);
                    _2647_recursiveGen = _out1128;
                    _2648_recOwned = _out1129;
                    _2649_recErased = _out1130;
                    _2650_recIdents = _out1131;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2647_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2648_recOwned;
                    isErased = _2649_recErased;
                    readIdents = _2650_recIdents;
                  }
                }
              } else if (_source138.is_String) {
                DAST._IType _source145 = _1550___mcc_h306;
                if (_source145.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2651___mcc_h941 = _source145.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2652___mcc_h942 = _source145.dtor_typeArgs;
                  DAST._IResolvedType _2653___mcc_h943 = _source145.dtor_resolved;
                  DAST._IResolvedType _source146 = _2653___mcc_h943;
                  if (_source146.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2654___mcc_h947 = _source146.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2655_recursiveGen;
                      bool _2656_recOwned;
                      bool _2657_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2658_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1132;
                      bool _out1133;
                      bool _out1134;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1135;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1132, out _out1133, out _out1134, out _out1135);
                      _2655_recursiveGen = _out1132;
                      _2656_recOwned = _out1133;
                      _2657_recErased = _out1134;
                      _2658_recIdents = _out1135;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2655_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2656_recOwned;
                      isErased = _2657_recErased;
                      readIdents = _2658_recIdents;
                    }
                  } else if (_source146.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2659___mcc_h949 = _source146.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2660_recursiveGen;
                      bool _2661_recOwned;
                      bool _2662_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2663_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1136;
                      bool _out1137;
                      bool _out1138;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1139;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1136, out _out1137, out _out1138, out _out1139);
                      _2660_recursiveGen = _out1136;
                      _2661_recOwned = _out1137;
                      _2662_recErased = _out1138;
                      _2663_recIdents = _out1139;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2660_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2661_recOwned;
                      isErased = _2662_recErased;
                      readIdents = _2663_recIdents;
                    }
                  } else {
                    DAST._IType _2664___mcc_h951 = _source146.dtor_Newtype_a0;
                    DAST._IType _2665_b = _2664___mcc_h951;
                    {
                      if (object.Equals(_1543_fromTpe, _2665_b)) {
                        Dafny.ISequence<Dafny.Rune> _2666_recursiveGen;
                        bool _2667_recOwned;
                        bool _2668_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2669_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1140;
                        bool _out1141;
                        bool _out1142;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1143;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1140, out _out1141, out _out1142, out _out1143);
                        _2666_recursiveGen = _out1140;
                        _2667_recOwned = _out1141;
                        _2668_recErased = _out1142;
                        _2669_recIdents = _out1143;
                        Dafny.ISequence<Dafny.Rune> _2670_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1144;
                        _out1144 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                        _2670_rhsType = _out1144;
                        Dafny.ISequence<Dafny.Rune> _2671_uneraseFn;
                        _2671_uneraseFn = ((_2667_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2670_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2671_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2666_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2667_recOwned;
                        isErased = false;
                        readIdents = _2669_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1145;
                        bool _out1146;
                        bool _out1147;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2665_b), _2665_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                        s = _out1145;
                        isOwned = _out1146;
                        isErased = _out1147;
                        readIdents = _out1148;
                      }
                    }
                  }
                } else if (_source145.is_Nullable) {
                  DAST._IType _2672___mcc_h953 = _source145.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2673_recursiveGen;
                    bool _2674_recOwned;
                    bool _2675_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2676_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1149;
                    bool _out1150;
                    bool _out1151;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1152;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1149, out _out1150, out _out1151, out _out1152);
                    _2673_recursiveGen = _out1149;
                    _2674_recOwned = _out1150;
                    _2675_recErased = _out1151;
                    _2676_recIdents = _out1152;
                    if (!(_2674_recOwned)) {
                      _2673_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2673_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2673_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2675_recErased;
                    readIdents = _2676_recIdents;
                  }
                } else if (_source145.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2677___mcc_h955 = _source145.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2678_recursiveGen;
                    bool _2679_recOwned;
                    bool _2680_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2681_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1153;
                    bool _out1154;
                    bool _out1155;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1153, out _out1154, out _out1155, out _out1156);
                    _2678_recursiveGen = _out1153;
                    _2679_recOwned = _out1154;
                    _2680_recErased = _out1155;
                    _2681_recIdents = _out1156;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2678_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2679_recOwned;
                    isErased = _2680_recErased;
                    readIdents = _2681_recIdents;
                  }
                } else if (_source145.is_Array) {
                  DAST._IType _2682___mcc_h957 = _source145.dtor_element;
                  BigInteger _2683___mcc_h958 = _source145.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2684_recursiveGen;
                    bool _2685_recOwned;
                    bool _2686_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2687_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1157;
                    bool _out1158;
                    bool _out1159;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1160;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1157, out _out1158, out _out1159, out _out1160);
                    _2684_recursiveGen = _out1157;
                    _2685_recOwned = _out1158;
                    _2686_recErased = _out1159;
                    _2687_recIdents = _out1160;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2684_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2685_recOwned;
                    isErased = _2686_recErased;
                    readIdents = _2687_recIdents;
                  }
                } else if (_source145.is_Seq) {
                  DAST._IType _2688___mcc_h961 = _source145.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2689_recursiveGen;
                    bool _2690_recOwned;
                    bool _2691_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2692_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1161;
                    bool _out1162;
                    bool _out1163;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1164;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1161, out _out1162, out _out1163, out _out1164);
                    _2689_recursiveGen = _out1161;
                    _2690_recOwned = _out1162;
                    _2691_recErased = _out1163;
                    _2692_recIdents = _out1164;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2689_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2690_recOwned;
                    isErased = _2691_recErased;
                    readIdents = _2692_recIdents;
                  }
                } else if (_source145.is_Set) {
                  DAST._IType _2693___mcc_h963 = _source145.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2694_recursiveGen;
                    bool _2695_recOwned;
                    bool _2696_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2697_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1165;
                    bool _out1166;
                    bool _out1167;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1168;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1165, out _out1166, out _out1167, out _out1168);
                    _2694_recursiveGen = _out1165;
                    _2695_recOwned = _out1166;
                    _2696_recErased = _out1167;
                    _2697_recIdents = _out1168;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2694_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2695_recOwned;
                    isErased = _2696_recErased;
                    readIdents = _2697_recIdents;
                  }
                } else if (_source145.is_Multiset) {
                  DAST._IType _2698___mcc_h965 = _source145.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2699_recursiveGen;
                    bool _2700_recOwned;
                    bool _2701_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2702_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1169;
                    bool _out1170;
                    bool _out1171;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1172;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1169, out _out1170, out _out1171, out _out1172);
                    _2699_recursiveGen = _out1169;
                    _2700_recOwned = _out1170;
                    _2701_recErased = _out1171;
                    _2702_recIdents = _out1172;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2699_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2700_recOwned;
                    isErased = _2701_recErased;
                    readIdents = _2702_recIdents;
                  }
                } else if (_source145.is_Map) {
                  DAST._IType _2703___mcc_h967 = _source145.dtor_key;
                  DAST._IType _2704___mcc_h968 = _source145.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2705_recursiveGen;
                    bool _2706_recOwned;
                    bool _2707_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2708_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1173;
                    bool _out1174;
                    bool _out1175;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1173, out _out1174, out _out1175, out _out1176);
                    _2705_recursiveGen = _out1173;
                    _2706_recOwned = _out1174;
                    _2707_recErased = _out1175;
                    _2708_recIdents = _out1176;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2705_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2706_recOwned;
                    isErased = _2707_recErased;
                    readIdents = _2708_recIdents;
                  }
                } else if (_source145.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2709___mcc_h971 = _source145.dtor_args;
                  DAST._IType _2710___mcc_h972 = _source145.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2711_recursiveGen;
                    bool _2712_recOwned;
                    bool _2713_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2714_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1177;
                    bool _out1178;
                    bool _out1179;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1180;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1177, out _out1178, out _out1179, out _out1180);
                    _2711_recursiveGen = _out1177;
                    _2712_recOwned = _out1178;
                    _2713_recErased = _out1179;
                    _2714_recIdents = _out1180;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2711_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2712_recOwned;
                    isErased = _2713_recErased;
                    readIdents = _2714_recIdents;
                  }
                } else if (_source145.is_Primitive) {
                  DAST._IPrimitive _2715___mcc_h975 = _source145.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2716_recursiveGen;
                    bool _2717_recOwned;
                    bool _2718_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2719_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1181;
                    bool _out1182;
                    bool _out1183;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1184;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1181, out _out1182, out _out1183, out _out1184);
                    _2716_recursiveGen = _out1181;
                    _2717_recOwned = _out1182;
                    _2718_recErased = _out1183;
                    _2719_recIdents = _out1184;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2716_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2717_recOwned;
                    isErased = _2718_recErased;
                    readIdents = _2719_recIdents;
                  }
                } else if (_source145.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2720___mcc_h977 = _source145.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2721_recursiveGen;
                    bool _2722_recOwned;
                    bool _2723_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2724_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1185;
                    bool _out1186;
                    bool _out1187;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1188;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1185, out _out1186, out _out1187, out _out1188);
                    _2721_recursiveGen = _out1185;
                    _2722_recOwned = _out1186;
                    _2723_recErased = _out1187;
                    _2724_recIdents = _out1188;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2721_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2722_recOwned;
                    isErased = _2723_recErased;
                    readIdents = _2724_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2725___mcc_h979 = _source145.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2726_recursiveGen;
                    bool _2727_recOwned;
                    bool _2728_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2729_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1189;
                    bool _out1190;
                    bool _out1191;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1192;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1189, out _out1190, out _out1191, out _out1192);
                    _2726_recursiveGen = _out1189;
                    _2727_recOwned = _out1190;
                    _2728_recErased = _out1191;
                    _2729_recIdents = _out1192;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2726_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2727_recOwned;
                    isErased = _2728_recErased;
                    readIdents = _2729_recIdents;
                  }
                }
              } else if (_source138.is_Bool) {
                DAST._IType _source147 = _1550___mcc_h306;
                if (_source147.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2730___mcc_h981 = _source147.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2731___mcc_h982 = _source147.dtor_typeArgs;
                  DAST._IResolvedType _2732___mcc_h983 = _source147.dtor_resolved;
                  DAST._IResolvedType _source148 = _2732___mcc_h983;
                  if (_source148.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2733___mcc_h987 = _source148.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2734_recursiveGen;
                      bool _2735_recOwned;
                      bool _2736_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2737_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1193;
                      bool _out1194;
                      bool _out1195;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1193, out _out1194, out _out1195, out _out1196);
                      _2734_recursiveGen = _out1193;
                      _2735_recOwned = _out1194;
                      _2736_recErased = _out1195;
                      _2737_recIdents = _out1196;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2734_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2735_recOwned;
                      isErased = _2736_recErased;
                      readIdents = _2737_recIdents;
                    }
                  } else if (_source148.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2738___mcc_h989 = _source148.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2739_recursiveGen;
                      bool _2740_recOwned;
                      bool _2741_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2742_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1197;
                      bool _out1198;
                      bool _out1199;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1200;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1197, out _out1198, out _out1199, out _out1200);
                      _2739_recursiveGen = _out1197;
                      _2740_recOwned = _out1198;
                      _2741_recErased = _out1199;
                      _2742_recIdents = _out1200;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2739_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2740_recOwned;
                      isErased = _2741_recErased;
                      readIdents = _2742_recIdents;
                    }
                  } else {
                    DAST._IType _2743___mcc_h991 = _source148.dtor_Newtype_a0;
                    DAST._IType _2744_b = _2743___mcc_h991;
                    {
                      if (object.Equals(_1543_fromTpe, _2744_b)) {
                        Dafny.ISequence<Dafny.Rune> _2745_recursiveGen;
                        bool _2746_recOwned;
                        bool _2747_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2748_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1201;
                        bool _out1202;
                        bool _out1203;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1204;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1201, out _out1202, out _out1203, out _out1204);
                        _2745_recursiveGen = _out1201;
                        _2746_recOwned = _out1202;
                        _2747_recErased = _out1203;
                        _2748_recIdents = _out1204;
                        Dafny.ISequence<Dafny.Rune> _2749_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1205;
                        _out1205 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                        _2749_rhsType = _out1205;
                        Dafny.ISequence<Dafny.Rune> _2750_uneraseFn;
                        _2750_uneraseFn = ((_2746_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2749_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2750_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2745_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2746_recOwned;
                        isErased = false;
                        readIdents = _2748_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1206;
                        bool _out1207;
                        bool _out1208;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2744_b), _2744_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                        s = _out1206;
                        isOwned = _out1207;
                        isErased = _out1208;
                        readIdents = _out1209;
                      }
                    }
                  }
                } else if (_source147.is_Nullable) {
                  DAST._IType _2751___mcc_h993 = _source147.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2752_recursiveGen;
                    bool _2753_recOwned;
                    bool _2754_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2755_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1210;
                    bool _out1211;
                    bool _out1212;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1213;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1210, out _out1211, out _out1212, out _out1213);
                    _2752_recursiveGen = _out1210;
                    _2753_recOwned = _out1211;
                    _2754_recErased = _out1212;
                    _2755_recIdents = _out1213;
                    if (!(_2753_recOwned)) {
                      _2752_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2752_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2752_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2754_recErased;
                    readIdents = _2755_recIdents;
                  }
                } else if (_source147.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2756___mcc_h995 = _source147.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2757_recursiveGen;
                    bool _2758_recOwned;
                    bool _2759_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2760_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1214;
                    bool _out1215;
                    bool _out1216;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1214, out _out1215, out _out1216, out _out1217);
                    _2757_recursiveGen = _out1214;
                    _2758_recOwned = _out1215;
                    _2759_recErased = _out1216;
                    _2760_recIdents = _out1217;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2757_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2758_recOwned;
                    isErased = _2759_recErased;
                    readIdents = _2760_recIdents;
                  }
                } else if (_source147.is_Array) {
                  DAST._IType _2761___mcc_h997 = _source147.dtor_element;
                  BigInteger _2762___mcc_h998 = _source147.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2763_recursiveGen;
                    bool _2764_recOwned;
                    bool _2765_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2766_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1218;
                    bool _out1219;
                    bool _out1220;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1221;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1218, out _out1219, out _out1220, out _out1221);
                    _2763_recursiveGen = _out1218;
                    _2764_recOwned = _out1219;
                    _2765_recErased = _out1220;
                    _2766_recIdents = _out1221;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2763_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2764_recOwned;
                    isErased = _2765_recErased;
                    readIdents = _2766_recIdents;
                  }
                } else if (_source147.is_Seq) {
                  DAST._IType _2767___mcc_h1001 = _source147.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2768_recursiveGen;
                    bool _2769_recOwned;
                    bool _2770_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2771_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1222;
                    bool _out1223;
                    bool _out1224;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1225;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1222, out _out1223, out _out1224, out _out1225);
                    _2768_recursiveGen = _out1222;
                    _2769_recOwned = _out1223;
                    _2770_recErased = _out1224;
                    _2771_recIdents = _out1225;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2768_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2769_recOwned;
                    isErased = _2770_recErased;
                    readIdents = _2771_recIdents;
                  }
                } else if (_source147.is_Set) {
                  DAST._IType _2772___mcc_h1003 = _source147.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2773_recursiveGen;
                    bool _2774_recOwned;
                    bool _2775_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2776_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1226;
                    bool _out1227;
                    bool _out1228;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1226, out _out1227, out _out1228, out _out1229);
                    _2773_recursiveGen = _out1226;
                    _2774_recOwned = _out1227;
                    _2775_recErased = _out1228;
                    _2776_recIdents = _out1229;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2774_recOwned;
                    isErased = _2775_recErased;
                    readIdents = _2776_recIdents;
                  }
                } else if (_source147.is_Multiset) {
                  DAST._IType _2777___mcc_h1005 = _source147.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2778_recursiveGen;
                    bool _2779_recOwned;
                    bool _2780_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2781_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1230;
                    bool _out1231;
                    bool _out1232;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1233;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1230, out _out1231, out _out1232, out _out1233);
                    _2778_recursiveGen = _out1230;
                    _2779_recOwned = _out1231;
                    _2780_recErased = _out1232;
                    _2781_recIdents = _out1233;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2778_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2779_recOwned;
                    isErased = _2780_recErased;
                    readIdents = _2781_recIdents;
                  }
                } else if (_source147.is_Map) {
                  DAST._IType _2782___mcc_h1007 = _source147.dtor_key;
                  DAST._IType _2783___mcc_h1008 = _source147.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2784_recursiveGen;
                    bool _2785_recOwned;
                    bool _2786_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2787_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1234;
                    bool _out1235;
                    bool _out1236;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1234, out _out1235, out _out1236, out _out1237);
                    _2784_recursiveGen = _out1234;
                    _2785_recOwned = _out1235;
                    _2786_recErased = _out1236;
                    _2787_recIdents = _out1237;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2785_recOwned;
                    isErased = _2786_recErased;
                    readIdents = _2787_recIdents;
                  }
                } else if (_source147.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2788___mcc_h1011 = _source147.dtor_args;
                  DAST._IType _2789___mcc_h1012 = _source147.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2790_recursiveGen;
                    bool _2791_recOwned;
                    bool _2792_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2793_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1238;
                    bool _out1239;
                    bool _out1240;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1241;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1238, out _out1239, out _out1240, out _out1241);
                    _2790_recursiveGen = _out1238;
                    _2791_recOwned = _out1239;
                    _2792_recErased = _out1240;
                    _2793_recIdents = _out1241;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2791_recOwned;
                    isErased = _2792_recErased;
                    readIdents = _2793_recIdents;
                  }
                } else if (_source147.is_Primitive) {
                  DAST._IPrimitive _2794___mcc_h1015 = _source147.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2795_recursiveGen;
                    bool _2796_recOwned;
                    bool _2797_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2798_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1242;
                    bool _out1243;
                    bool _out1244;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1245;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1242, out _out1243, out _out1244, out _out1245);
                    _2795_recursiveGen = _out1242;
                    _2796_recOwned = _out1243;
                    _2797_recErased = _out1244;
                    _2798_recIdents = _out1245;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2796_recOwned;
                    isErased = _2797_recErased;
                    readIdents = _2798_recIdents;
                  }
                } else if (_source147.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2799___mcc_h1017 = _source147.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2800_recursiveGen;
                    bool _2801_recOwned;
                    bool _2802_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2803_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1246;
                    bool _out1247;
                    bool _out1248;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1249;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1246, out _out1247, out _out1248, out _out1249);
                    _2800_recursiveGen = _out1246;
                    _2801_recOwned = _out1247;
                    _2802_recErased = _out1248;
                    _2803_recIdents = _out1249;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2801_recOwned;
                    isErased = _2802_recErased;
                    readIdents = _2803_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2804___mcc_h1019 = _source147.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2805_recursiveGen;
                    bool _2806_recOwned;
                    bool _2807_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2808_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1250;
                    bool _out1251;
                    bool _out1252;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1253;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1250, out _out1251, out _out1252, out _out1253);
                    _2805_recursiveGen = _out1250;
                    _2806_recOwned = _out1251;
                    _2807_recErased = _out1252;
                    _2808_recIdents = _out1253;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2805_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2806_recOwned;
                    isErased = _2807_recErased;
                    readIdents = _2808_recIdents;
                  }
                }
              } else {
                DAST._IType _source149 = _1550___mcc_h306;
                if (_source149.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2809___mcc_h1021 = _source149.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2810___mcc_h1022 = _source149.dtor_typeArgs;
                  DAST._IResolvedType _2811___mcc_h1023 = _source149.dtor_resolved;
                  DAST._IResolvedType _source150 = _2811___mcc_h1023;
                  if (_source150.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2812___mcc_h1027 = _source150.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2813_recursiveGen;
                      bool _2814_recOwned;
                      bool _2815_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2816_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1254;
                      bool _out1255;
                      bool _out1256;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1254, out _out1255, out _out1256, out _out1257);
                      _2813_recursiveGen = _out1254;
                      _2814_recOwned = _out1255;
                      _2815_recErased = _out1256;
                      _2816_recIdents = _out1257;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2813_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2814_recOwned;
                      isErased = _2815_recErased;
                      readIdents = _2816_recIdents;
                    }
                  } else if (_source150.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2817___mcc_h1029 = _source150.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2818_recursiveGen;
                      bool _2819_recOwned;
                      bool _2820_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2821_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1258;
                      bool _out1259;
                      bool _out1260;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1261;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1258, out _out1259, out _out1260, out _out1261);
                      _2818_recursiveGen = _out1258;
                      _2819_recOwned = _out1259;
                      _2820_recErased = _out1260;
                      _2821_recIdents = _out1261;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2818_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2819_recOwned;
                      isErased = _2820_recErased;
                      readIdents = _2821_recIdents;
                    }
                  } else {
                    DAST._IType _2822___mcc_h1031 = _source150.dtor_Newtype_a0;
                    DAST._IType _2823_b = _2822___mcc_h1031;
                    {
                      if (object.Equals(_1543_fromTpe, _2823_b)) {
                        Dafny.ISequence<Dafny.Rune> _2824_recursiveGen;
                        bool _2825_recOwned;
                        bool _2826_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2827_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1262;
                        bool _out1263;
                        bool _out1264;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1265;
                        DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1262, out _out1263, out _out1264, out _out1265);
                        _2824_recursiveGen = _out1262;
                        _2825_recOwned = _out1263;
                        _2826_recErased = _out1264;
                        _2827_recIdents = _out1265;
                        Dafny.ISequence<Dafny.Rune> _2828_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1266;
                        _out1266 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                        _2828_rhsType = _out1266;
                        Dafny.ISequence<Dafny.Rune> _2829_uneraseFn;
                        _2829_uneraseFn = ((_2825_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2828_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2829_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2824_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2825_recOwned;
                        isErased = false;
                        readIdents = _2827_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1267;
                        bool _out1268;
                        bool _out1269;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1270;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2823_b), _2823_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out1267, out _out1268, out _out1269, out _out1270);
                        s = _out1267;
                        isOwned = _out1268;
                        isErased = _out1269;
                        readIdents = _out1270;
                      }
                    }
                  }
                } else if (_source149.is_Nullable) {
                  DAST._IType _2830___mcc_h1033 = _source149.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2831_recursiveGen;
                    bool _2832_recOwned;
                    bool _2833_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2834_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1271;
                    bool _out1272;
                    bool _out1273;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1274;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1271, out _out1272, out _out1273, out _out1274);
                    _2831_recursiveGen = _out1271;
                    _2832_recOwned = _out1272;
                    _2833_recErased = _out1273;
                    _2834_recIdents = _out1274;
                    if (!(_2832_recOwned)) {
                      _2831_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2831_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2831_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2833_recErased;
                    readIdents = _2834_recIdents;
                  }
                } else if (_source149.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2835___mcc_h1035 = _source149.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2836_recursiveGen;
                    bool _2837_recOwned;
                    bool _2838_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2839_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1275;
                    bool _out1276;
                    bool _out1277;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1278;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1275, out _out1276, out _out1277, out _out1278);
                    _2836_recursiveGen = _out1275;
                    _2837_recOwned = _out1276;
                    _2838_recErased = _out1277;
                    _2839_recIdents = _out1278;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2836_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2837_recOwned;
                    isErased = _2838_recErased;
                    readIdents = _2839_recIdents;
                  }
                } else if (_source149.is_Array) {
                  DAST._IType _2840___mcc_h1037 = _source149.dtor_element;
                  BigInteger _2841___mcc_h1038 = _source149.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2842_recursiveGen;
                    bool _2843_recOwned;
                    bool _2844_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2845_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1279;
                    bool _out1280;
                    bool _out1281;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1282;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1279, out _out1280, out _out1281, out _out1282);
                    _2842_recursiveGen = _out1279;
                    _2843_recOwned = _out1280;
                    _2844_recErased = _out1281;
                    _2845_recIdents = _out1282;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2842_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2843_recOwned;
                    isErased = _2844_recErased;
                    readIdents = _2845_recIdents;
                  }
                } else if (_source149.is_Seq) {
                  DAST._IType _2846___mcc_h1041 = _source149.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2847_recursiveGen;
                    bool _2848_recOwned;
                    bool _2849_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2850_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1283;
                    bool _out1284;
                    bool _out1285;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1286;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1283, out _out1284, out _out1285, out _out1286);
                    _2847_recursiveGen = _out1283;
                    _2848_recOwned = _out1284;
                    _2849_recErased = _out1285;
                    _2850_recIdents = _out1286;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2847_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2848_recOwned;
                    isErased = _2849_recErased;
                    readIdents = _2850_recIdents;
                  }
                } else if (_source149.is_Set) {
                  DAST._IType _2851___mcc_h1043 = _source149.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2852_recursiveGen;
                    bool _2853_recOwned;
                    bool _2854_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2855_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1287;
                    bool _out1288;
                    bool _out1289;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1290;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1287, out _out1288, out _out1289, out _out1290);
                    _2852_recursiveGen = _out1287;
                    _2853_recOwned = _out1288;
                    _2854_recErased = _out1289;
                    _2855_recIdents = _out1290;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2852_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2853_recOwned;
                    isErased = _2854_recErased;
                    readIdents = _2855_recIdents;
                  }
                } else if (_source149.is_Multiset) {
                  DAST._IType _2856___mcc_h1045 = _source149.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2857_recursiveGen;
                    bool _2858_recOwned;
                    bool _2859_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2860_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1291;
                    bool _out1292;
                    bool _out1293;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1294;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1291, out _out1292, out _out1293, out _out1294);
                    _2857_recursiveGen = _out1291;
                    _2858_recOwned = _out1292;
                    _2859_recErased = _out1293;
                    _2860_recIdents = _out1294;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2857_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2858_recOwned;
                    isErased = _2859_recErased;
                    readIdents = _2860_recIdents;
                  }
                } else if (_source149.is_Map) {
                  DAST._IType _2861___mcc_h1047 = _source149.dtor_key;
                  DAST._IType _2862___mcc_h1048 = _source149.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2863_recursiveGen;
                    bool _2864_recOwned;
                    bool _2865_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2866_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1295;
                    bool _out1296;
                    bool _out1297;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1298;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1295, out _out1296, out _out1297, out _out1298);
                    _2863_recursiveGen = _out1295;
                    _2864_recOwned = _out1296;
                    _2865_recErased = _out1297;
                    _2866_recIdents = _out1298;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2864_recOwned;
                    isErased = _2865_recErased;
                    readIdents = _2866_recIdents;
                  }
                } else if (_source149.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2867___mcc_h1051 = _source149.dtor_args;
                  DAST._IType _2868___mcc_h1052 = _source149.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2869_recursiveGen;
                    bool _2870_recOwned;
                    bool _2871_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2872_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1299;
                    bool _out1300;
                    bool _out1301;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1299, out _out1300, out _out1301, out _out1302);
                    _2869_recursiveGen = _out1299;
                    _2870_recOwned = _out1300;
                    _2871_recErased = _out1301;
                    _2872_recIdents = _out1302;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2869_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2870_recOwned;
                    isErased = _2871_recErased;
                    readIdents = _2872_recIdents;
                  }
                } else if (_source149.is_Primitive) {
                  DAST._IPrimitive _2873___mcc_h1055 = _source149.dtor_Primitive_a0;
                  DAST._IPrimitive _source151 = _2873___mcc_h1055;
                  if (_source151.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2874_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1303;
                      _out1303 = DCOMP.COMP.GenType(_1543_fromTpe, true, false);
                      _2874_rhsType = _out1303;
                      Dafny.ISequence<Dafny.Rune> _2875_recursiveGen;
                      bool _2876___v58;
                      bool _2877___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2878_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1304;
                      bool _out1305;
                      bool _out1306;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1307;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, true, out _out1304, out _out1305, out _out1306, out _out1307);
                      _2875_recursiveGen = _out1304;
                      _2876___v58 = _out1305;
                      _2877___v59 = _out1306;
                      _2878_recIdents = _out1307;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2875_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2878_recIdents;
                    }
                  } else if (_source151.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2879_recursiveGen;
                      bool _2880_recOwned;
                      bool _2881_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2882_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1308;
                      bool _out1309;
                      bool _out1310;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1311;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1308, out _out1309, out _out1310, out _out1311);
                      _2879_recursiveGen = _out1308;
                      _2880_recOwned = _out1309;
                      _2881_recErased = _out1310;
                      _2882_recIdents = _out1311;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2879_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2880_recOwned;
                      isErased = _2881_recErased;
                      readIdents = _2882_recIdents;
                    }
                  } else if (_source151.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2883_recursiveGen;
                      bool _2884_recOwned;
                      bool _2885_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2886_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1312;
                      bool _out1313;
                      bool _out1314;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1315;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1312, out _out1313, out _out1314, out _out1315);
                      _2883_recursiveGen = _out1312;
                      _2884_recOwned = _out1313;
                      _2885_recErased = _out1314;
                      _2886_recIdents = _out1315;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2883_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2884_recOwned;
                      isErased = _2885_recErased;
                      readIdents = _2886_recIdents;
                    }
                  } else if (_source151.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2887_recursiveGen;
                      bool _2888_recOwned;
                      bool _2889_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2890_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1316;
                      bool _out1317;
                      bool _out1318;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1319;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1316, out _out1317, out _out1318, out _out1319);
                      _2887_recursiveGen = _out1316;
                      _2888_recOwned = _out1317;
                      _2889_recErased = _out1318;
                      _2890_recIdents = _out1319;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2887_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2888_recOwned;
                      isErased = _2889_recErased;
                      readIdents = _2890_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2891_recursiveGen;
                      bool _2892_recOwned;
                      bool _2893_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2894_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1320;
                      bool _out1321;
                      bool _out1322;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1323;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1320, out _out1321, out _out1322, out _out1323);
                      _2891_recursiveGen = _out1320;
                      _2892_recOwned = _out1321;
                      _2893_recErased = _out1322;
                      _2894_recIdents = _out1323;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2891_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2892_recOwned;
                      isErased = _2893_recErased;
                      readIdents = _2894_recIdents;
                    }
                  }
                } else if (_source149.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2895___mcc_h1057 = _source149.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2896_recursiveGen;
                    bool _2897_recOwned;
                    bool _2898_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2899_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1324;
                    bool _out1325;
                    bool _out1326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1327;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1324, out _out1325, out _out1326, out _out1327);
                    _2896_recursiveGen = _out1324;
                    _2897_recOwned = _out1325;
                    _2898_recErased = _out1326;
                    _2899_recIdents = _out1327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2896_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2897_recOwned;
                    isErased = _2898_recErased;
                    readIdents = _2899_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2900___mcc_h1059 = _source149.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2901_recursiveGen;
                    bool _2902_recOwned;
                    bool _2903_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2904_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1328;
                    bool _out1329;
                    bool _out1330;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1331;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1328, out _out1329, out _out1330, out _out1331);
                    _2901_recursiveGen = _out1328;
                    _2902_recOwned = _out1329;
                    _2903_recErased = _out1330;
                    _2904_recIdents = _out1331;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2901_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2902_recOwned;
                    isErased = _2903_recErased;
                    readIdents = _2904_recIdents;
                  }
                }
              }
            } else if (_source114.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2905___mcc_h1061 = _source114.dtor_Passthrough_a0;
              DAST._IType _source152 = _1550___mcc_h306;
              if (_source152.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2906___mcc_h1065 = _source152.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2907___mcc_h1066 = _source152.dtor_typeArgs;
                DAST._IResolvedType _2908___mcc_h1067 = _source152.dtor_resolved;
                DAST._IResolvedType _source153 = _2908___mcc_h1067;
                if (_source153.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2909___mcc_h1071 = _source153.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2910_recursiveGen;
                    bool _2911_recOwned;
                    bool _2912_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2913_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1332;
                    bool _out1333;
                    bool _out1334;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1335;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1332, out _out1333, out _out1334, out _out1335);
                    _2910_recursiveGen = _out1332;
                    _2911_recOwned = _out1333;
                    _2912_recErased = _out1334;
                    _2913_recIdents = _out1335;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2910_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2911_recOwned;
                    isErased = _2912_recErased;
                    readIdents = _2913_recIdents;
                  }
                } else if (_source153.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2914___mcc_h1073 = _source153.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2915_recursiveGen;
                    bool _2916_recOwned;
                    bool _2917_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2918_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1336;
                    bool _out1337;
                    bool _out1338;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1339;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1336, out _out1337, out _out1338, out _out1339);
                    _2915_recursiveGen = _out1336;
                    _2916_recOwned = _out1337;
                    _2917_recErased = _out1338;
                    _2918_recIdents = _out1339;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2915_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2916_recOwned;
                    isErased = _2917_recErased;
                    readIdents = _2918_recIdents;
                  }
                } else {
                  DAST._IType _2919___mcc_h1075 = _source153.dtor_Newtype_a0;
                  DAST._IType _2920_b = _2919___mcc_h1075;
                  {
                    if (object.Equals(_1543_fromTpe, _2920_b)) {
                      Dafny.ISequence<Dafny.Rune> _2921_recursiveGen;
                      bool _2922_recOwned;
                      bool _2923_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2924_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1340;
                      bool _out1341;
                      bool _out1342;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1340, out _out1341, out _out1342, out _out1343);
                      _2921_recursiveGen = _out1340;
                      _2922_recOwned = _out1341;
                      _2923_recErased = _out1342;
                      _2924_recIdents = _out1343;
                      Dafny.ISequence<Dafny.Rune> _2925_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1344;
                      _out1344 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _2925_rhsType = _out1344;
                      Dafny.ISequence<Dafny.Rune> _2926_uneraseFn;
                      _2926_uneraseFn = ((_2922_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2925_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2926_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2921_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2922_recOwned;
                      isErased = false;
                      readIdents = _2924_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1345;
                      bool _out1346;
                      bool _out1347;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _2920_b), _2920_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out1345, out _out1346, out _out1347, out _out1348);
                      s = _out1345;
                      isOwned = _out1346;
                      isErased = _out1347;
                      readIdents = _out1348;
                    }
                  }
                }
              } else if (_source152.is_Nullable) {
                DAST._IType _2927___mcc_h1077 = _source152.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2928_recursiveGen;
                  bool _2929_recOwned;
                  bool _2930_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2931_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1349;
                  bool _out1350;
                  bool _out1351;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1352;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1349, out _out1350, out _out1351, out _out1352);
                  _2928_recursiveGen = _out1349;
                  _2929_recOwned = _out1350;
                  _2930_recErased = _out1351;
                  _2931_recIdents = _out1352;
                  if (!(_2929_recOwned)) {
                    _2928_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2928_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2928_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2930_recErased;
                  readIdents = _2931_recIdents;
                }
              } else if (_source152.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2932___mcc_h1079 = _source152.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2933_recursiveGen;
                  bool _2934_recOwned;
                  bool _2935_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2936_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1353;
                  bool _out1354;
                  bool _out1355;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1356;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1353, out _out1354, out _out1355, out _out1356);
                  _2933_recursiveGen = _out1353;
                  _2934_recOwned = _out1354;
                  _2935_recErased = _out1355;
                  _2936_recIdents = _out1356;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2933_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2934_recOwned;
                  isErased = _2935_recErased;
                  readIdents = _2936_recIdents;
                }
              } else if (_source152.is_Array) {
                DAST._IType _2937___mcc_h1081 = _source152.dtor_element;
                BigInteger _2938___mcc_h1082 = _source152.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2939_recursiveGen;
                  bool _2940_recOwned;
                  bool _2941_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2942_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1357;
                  bool _out1358;
                  bool _out1359;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1360;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1357, out _out1358, out _out1359, out _out1360);
                  _2939_recursiveGen = _out1357;
                  _2940_recOwned = _out1358;
                  _2941_recErased = _out1359;
                  _2942_recIdents = _out1360;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2940_recOwned;
                  isErased = _2941_recErased;
                  readIdents = _2942_recIdents;
                }
              } else if (_source152.is_Seq) {
                DAST._IType _2943___mcc_h1085 = _source152.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2944_recursiveGen;
                  bool _2945_recOwned;
                  bool _2946_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2947_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1361;
                  bool _out1362;
                  bool _out1363;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1364;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1361, out _out1362, out _out1363, out _out1364);
                  _2944_recursiveGen = _out1361;
                  _2945_recOwned = _out1362;
                  _2946_recErased = _out1363;
                  _2947_recIdents = _out1364;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2944_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2945_recOwned;
                  isErased = _2946_recErased;
                  readIdents = _2947_recIdents;
                }
              } else if (_source152.is_Set) {
                DAST._IType _2948___mcc_h1087 = _source152.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2949_recursiveGen;
                  bool _2950_recOwned;
                  bool _2951_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2952_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1365;
                  bool _out1366;
                  bool _out1367;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1368;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1365, out _out1366, out _out1367, out _out1368);
                  _2949_recursiveGen = _out1365;
                  _2950_recOwned = _out1366;
                  _2951_recErased = _out1367;
                  _2952_recIdents = _out1368;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2949_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2950_recOwned;
                  isErased = _2951_recErased;
                  readIdents = _2952_recIdents;
                }
              } else if (_source152.is_Multiset) {
                DAST._IType _2953___mcc_h1089 = _source152.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2954_recursiveGen;
                  bool _2955_recOwned;
                  bool _2956_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2957_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1369;
                  bool _out1370;
                  bool _out1371;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1372;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1369, out _out1370, out _out1371, out _out1372);
                  _2954_recursiveGen = _out1369;
                  _2955_recOwned = _out1370;
                  _2956_recErased = _out1371;
                  _2957_recIdents = _out1372;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2954_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2955_recOwned;
                  isErased = _2956_recErased;
                  readIdents = _2957_recIdents;
                }
              } else if (_source152.is_Map) {
                DAST._IType _2958___mcc_h1091 = _source152.dtor_key;
                DAST._IType _2959___mcc_h1092 = _source152.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2960_recursiveGen;
                  bool _2961_recOwned;
                  bool _2962_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2963_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1373;
                  bool _out1374;
                  bool _out1375;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1376;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1373, out _out1374, out _out1375, out _out1376);
                  _2960_recursiveGen = _out1373;
                  _2961_recOwned = _out1374;
                  _2962_recErased = _out1375;
                  _2963_recIdents = _out1376;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2960_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2961_recOwned;
                  isErased = _2962_recErased;
                  readIdents = _2963_recIdents;
                }
              } else if (_source152.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2964___mcc_h1095 = _source152.dtor_args;
                DAST._IType _2965___mcc_h1096 = _source152.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2966_recursiveGen;
                  bool _2967_recOwned;
                  bool _2968_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2969_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1377;
                  bool _out1378;
                  bool _out1379;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1380;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1377, out _out1378, out _out1379, out _out1380);
                  _2966_recursiveGen = _out1377;
                  _2967_recOwned = _out1378;
                  _2968_recErased = _out1379;
                  _2969_recIdents = _out1380;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2966_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2967_recOwned;
                  isErased = _2968_recErased;
                  readIdents = _2969_recIdents;
                }
              } else if (_source152.is_Primitive) {
                DAST._IPrimitive _2970___mcc_h1099 = _source152.dtor_Primitive_a0;
                DAST._IPrimitive _source154 = _2970___mcc_h1099;
                if (_source154.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2971_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1381;
                    _out1381 = DCOMP.COMP.GenType(_1543_fromTpe, true, false);
                    _2971_rhsType = _out1381;
                    Dafny.ISequence<Dafny.Rune> _2972_recursiveGen;
                    bool _2973___v54;
                    bool _2974___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2975_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1382;
                    bool _out1383;
                    bool _out1384;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1385;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, true, out _out1382, out _out1383, out _out1384, out _out1385);
                    _2972_recursiveGen = _out1382;
                    _2973___v54 = _out1383;
                    _2974___v55 = _out1384;
                    _2975_recIdents = _out1385;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2972_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2975_recIdents;
                  }
                } else if (_source154.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2976_recursiveGen;
                    bool _2977_recOwned;
                    bool _2978_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2979_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1386;
                    bool _out1387;
                    bool _out1388;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1386, out _out1387, out _out1388, out _out1389);
                    _2976_recursiveGen = _out1386;
                    _2977_recOwned = _out1387;
                    _2978_recErased = _out1388;
                    _2979_recIdents = _out1389;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2976_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2977_recOwned;
                    isErased = _2978_recErased;
                    readIdents = _2979_recIdents;
                  }
                } else if (_source154.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2980_recursiveGen;
                    bool _2981_recOwned;
                    bool _2982_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2983_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1390;
                    bool _out1391;
                    bool _out1392;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1393;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1390, out _out1391, out _out1392, out _out1393);
                    _2980_recursiveGen = _out1390;
                    _2981_recOwned = _out1391;
                    _2982_recErased = _out1392;
                    _2983_recIdents = _out1393;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2980_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2981_recOwned;
                    isErased = _2982_recErased;
                    readIdents = _2983_recIdents;
                  }
                } else if (_source154.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2984_recursiveGen;
                    bool _2985_recOwned;
                    bool _2986_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2987_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1394;
                    bool _out1395;
                    bool _out1396;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1397;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1394, out _out1395, out _out1396, out _out1397);
                    _2984_recursiveGen = _out1394;
                    _2985_recOwned = _out1395;
                    _2986_recErased = _out1396;
                    _2987_recIdents = _out1397;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2984_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2985_recOwned;
                    isErased = _2986_recErased;
                    readIdents = _2987_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2988_recursiveGen;
                    bool _2989_recOwned;
                    bool _2990_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2991_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1398;
                    bool _out1399;
                    bool _out1400;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1401;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1398, out _out1399, out _out1400, out _out1401);
                    _2988_recursiveGen = _out1398;
                    _2989_recOwned = _out1399;
                    _2990_recErased = _out1400;
                    _2991_recIdents = _out1401;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2988_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2989_recOwned;
                    isErased = _2990_recErased;
                    readIdents = _2991_recIdents;
                  }
                }
              } else if (_source152.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2992___mcc_h1101 = _source152.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2993_recursiveGen;
                  bool _2994___v62;
                  bool _2995___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2996_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1402;
                  bool _out1403;
                  bool _out1404;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1405;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, true, out _out1402, out _out1403, out _out1404, out _out1405);
                  _2993_recursiveGen = _out1402;
                  _2994___v62 = _out1403;
                  _2995___v63 = _out1404;
                  _2996_recIdents = _out1405;
                  Dafny.ISequence<Dafny.Rune> _2997_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1406;
                  _out1406 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                  _2997_toTpeGen = _out1406;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2993_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2997_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2996_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2998___mcc_h1103 = _source152.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2999_recursiveGen;
                  bool _3000_recOwned;
                  bool _3001_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3002_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1407;
                  bool _out1408;
                  bool _out1409;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1410;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1407, out _out1408, out _out1409, out _out1410);
                  _2999_recursiveGen = _out1407;
                  _3000_recOwned = _out1408;
                  _3001_recErased = _out1409;
                  _3002_recIdents = _out1410;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2999_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3000_recOwned;
                  isErased = _3001_recErased;
                  readIdents = _3002_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3003___mcc_h1105 = _source114.dtor_TypeArg_a0;
              DAST._IType _source155 = _1550___mcc_h306;
              if (_source155.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3004___mcc_h1109 = _source155.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3005___mcc_h1110 = _source155.dtor_typeArgs;
                DAST._IResolvedType _3006___mcc_h1111 = _source155.dtor_resolved;
                DAST._IResolvedType _source156 = _3006___mcc_h1111;
                if (_source156.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3007___mcc_h1115 = _source156.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3008_recursiveGen;
                    bool _3009_recOwned;
                    bool _3010_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3011_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1411;
                    bool _out1412;
                    bool _out1413;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1414;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1411, out _out1412, out _out1413, out _out1414);
                    _3008_recursiveGen = _out1411;
                    _3009_recOwned = _out1412;
                    _3010_recErased = _out1413;
                    _3011_recIdents = _out1414;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3008_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3009_recOwned;
                    isErased = _3010_recErased;
                    readIdents = _3011_recIdents;
                  }
                } else if (_source156.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3012___mcc_h1117 = _source156.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3013_recursiveGen;
                    bool _3014_recOwned;
                    bool _3015_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3016_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1415;
                    bool _out1416;
                    bool _out1417;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1418;
                    DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1415, out _out1416, out _out1417, out _out1418);
                    _3013_recursiveGen = _out1415;
                    _3014_recOwned = _out1416;
                    _3015_recErased = _out1417;
                    _3016_recIdents = _out1418;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3013_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3014_recOwned;
                    isErased = _3015_recErased;
                    readIdents = _3016_recIdents;
                  }
                } else {
                  DAST._IType _3017___mcc_h1119 = _source156.dtor_Newtype_a0;
                  DAST._IType _3018_b = _3017___mcc_h1119;
                  {
                    if (object.Equals(_1543_fromTpe, _3018_b)) {
                      Dafny.ISequence<Dafny.Rune> _3019_recursiveGen;
                      bool _3020_recOwned;
                      bool _3021_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3022_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1419;
                      bool _out1420;
                      bool _out1421;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1422;
                      DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1419, out _out1420, out _out1421, out _out1422);
                      _3019_recursiveGen = _out1419;
                      _3020_recOwned = _out1420;
                      _3021_recErased = _out1421;
                      _3022_recIdents = _out1422;
                      Dafny.ISequence<Dafny.Rune> _3023_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1423;
                      _out1423 = DCOMP.COMP.GenType(_1542_toTpe, true, false);
                      _3023_rhsType = _out1423;
                      Dafny.ISequence<Dafny.Rune> _3024_uneraseFn;
                      _3024_uneraseFn = ((_3020_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3023_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3024_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3019_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3020_recOwned;
                      isErased = false;
                      readIdents = _3022_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1424;
                      bool _out1425;
                      bool _out1426;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1427;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1544_expr, _1543_fromTpe, _3018_b), _3018_b, _1542_toTpe), selfIdent, @params, mustOwn, out _out1424, out _out1425, out _out1426, out _out1427);
                      s = _out1424;
                      isOwned = _out1425;
                      isErased = _out1426;
                      readIdents = _out1427;
                    }
                  }
                }
              } else if (_source155.is_Nullable) {
                DAST._IType _3025___mcc_h1121 = _source155.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3026_recursiveGen;
                  bool _3027_recOwned;
                  bool _3028_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3029_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1428;
                  bool _out1429;
                  bool _out1430;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1431;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1428, out _out1429, out _out1430, out _out1431);
                  _3026_recursiveGen = _out1428;
                  _3027_recOwned = _out1429;
                  _3028_recErased = _out1430;
                  _3029_recIdents = _out1431;
                  if (!(_3027_recOwned)) {
                    _3026_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3026_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3026_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3028_recErased;
                  readIdents = _3029_recIdents;
                }
              } else if (_source155.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3030___mcc_h1123 = _source155.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3031_recursiveGen;
                  bool _3032_recOwned;
                  bool _3033_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3034_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1432;
                  bool _out1433;
                  bool _out1434;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1435;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1432, out _out1433, out _out1434, out _out1435);
                  _3031_recursiveGen = _out1432;
                  _3032_recOwned = _out1433;
                  _3033_recErased = _out1434;
                  _3034_recIdents = _out1435;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3031_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3032_recOwned;
                  isErased = _3033_recErased;
                  readIdents = _3034_recIdents;
                }
              } else if (_source155.is_Array) {
                DAST._IType _3035___mcc_h1125 = _source155.dtor_element;
                BigInteger _3036___mcc_h1126 = _source155.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3037_recursiveGen;
                  bool _3038_recOwned;
                  bool _3039_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3040_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1436;
                  bool _out1437;
                  bool _out1438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1436, out _out1437, out _out1438, out _out1439);
                  _3037_recursiveGen = _out1436;
                  _3038_recOwned = _out1437;
                  _3039_recErased = _out1438;
                  _3040_recIdents = _out1439;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3037_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3038_recOwned;
                  isErased = _3039_recErased;
                  readIdents = _3040_recIdents;
                }
              } else if (_source155.is_Seq) {
                DAST._IType _3041___mcc_h1129 = _source155.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3042_recursiveGen;
                  bool _3043_recOwned;
                  bool _3044_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3045_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1440;
                  bool _out1441;
                  bool _out1442;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1443;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1440, out _out1441, out _out1442, out _out1443);
                  _3042_recursiveGen = _out1440;
                  _3043_recOwned = _out1441;
                  _3044_recErased = _out1442;
                  _3045_recIdents = _out1443;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3042_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3043_recOwned;
                  isErased = _3044_recErased;
                  readIdents = _3045_recIdents;
                }
              } else if (_source155.is_Set) {
                DAST._IType _3046___mcc_h1131 = _source155.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3047_recursiveGen;
                  bool _3048_recOwned;
                  bool _3049_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3050_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1444;
                  bool _out1445;
                  bool _out1446;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1447;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1444, out _out1445, out _out1446, out _out1447);
                  _3047_recursiveGen = _out1444;
                  _3048_recOwned = _out1445;
                  _3049_recErased = _out1446;
                  _3050_recIdents = _out1447;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3047_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3048_recOwned;
                  isErased = _3049_recErased;
                  readIdents = _3050_recIdents;
                }
              } else if (_source155.is_Multiset) {
                DAST._IType _3051___mcc_h1133 = _source155.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3052_recursiveGen;
                  bool _3053_recOwned;
                  bool _3054_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3055_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1448;
                  bool _out1449;
                  bool _out1450;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1451;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1448, out _out1449, out _out1450, out _out1451);
                  _3052_recursiveGen = _out1448;
                  _3053_recOwned = _out1449;
                  _3054_recErased = _out1450;
                  _3055_recIdents = _out1451;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3052_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3053_recOwned;
                  isErased = _3054_recErased;
                  readIdents = _3055_recIdents;
                }
              } else if (_source155.is_Map) {
                DAST._IType _3056___mcc_h1135 = _source155.dtor_key;
                DAST._IType _3057___mcc_h1136 = _source155.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3058_recursiveGen;
                  bool _3059_recOwned;
                  bool _3060_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3061_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1452;
                  bool _out1453;
                  bool _out1454;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1455;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1452, out _out1453, out _out1454, out _out1455);
                  _3058_recursiveGen = _out1452;
                  _3059_recOwned = _out1453;
                  _3060_recErased = _out1454;
                  _3061_recIdents = _out1455;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3059_recOwned;
                  isErased = _3060_recErased;
                  readIdents = _3061_recIdents;
                }
              } else if (_source155.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3062___mcc_h1139 = _source155.dtor_args;
                DAST._IType _3063___mcc_h1140 = _source155.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3064_recursiveGen;
                  bool _3065_recOwned;
                  bool _3066_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3067_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1456;
                  bool _out1457;
                  bool _out1458;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1459;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1456, out _out1457, out _out1458, out _out1459);
                  _3064_recursiveGen = _out1456;
                  _3065_recOwned = _out1457;
                  _3066_recErased = _out1458;
                  _3067_recIdents = _out1459;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3064_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3065_recOwned;
                  isErased = _3066_recErased;
                  readIdents = _3067_recIdents;
                }
              } else if (_source155.is_Primitive) {
                DAST._IPrimitive _3068___mcc_h1143 = _source155.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3069_recursiveGen;
                  bool _3070_recOwned;
                  bool _3071_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3072_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1460;
                  bool _out1461;
                  bool _out1462;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1463;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1460, out _out1461, out _out1462, out _out1463);
                  _3069_recursiveGen = _out1460;
                  _3070_recOwned = _out1461;
                  _3071_recErased = _out1462;
                  _3072_recIdents = _out1463;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3069_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3070_recOwned;
                  isErased = _3071_recErased;
                  readIdents = _3072_recIdents;
                }
              } else if (_source155.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3073___mcc_h1145 = _source155.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3074_recursiveGen;
                  bool _3075_recOwned;
                  bool _3076_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3077_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1464;
                  bool _out1465;
                  bool _out1466;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1467;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1464, out _out1465, out _out1466, out _out1467);
                  _3074_recursiveGen = _out1464;
                  _3075_recOwned = _out1465;
                  _3076_recErased = _out1466;
                  _3077_recIdents = _out1467;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3074_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3075_recOwned;
                  isErased = _3076_recErased;
                  readIdents = _3077_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3078___mcc_h1147 = _source155.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3079_recursiveGen;
                  bool _3080_recOwned;
                  bool _3081_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3082_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1468;
                  bool _out1469;
                  bool _out1470;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1471;
                  DCOMP.COMP.GenExpr(_1544_expr, selfIdent, @params, mustOwn, out _out1468, out _out1469, out _out1470, out _out1471);
                  _3079_recursiveGen = _out1468;
                  _3080_recOwned = _out1469;
                  _3081_recErased = _out1470;
                  _3082_recIdents = _out1471;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3079_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3080_recOwned;
                  isErased = _3081_recErased;
                  readIdents = _3082_recIdents;
                }
              }
            }
          }
        }
      } else if (_source107.is_SeqConstruct) {
        DAST._IExpression _3083___mcc_h26 = _source107.dtor_length;
        DAST._IExpression _3084___mcc_h27 = _source107.dtor_elem;
        DAST._IExpression _3085_expr = _3084___mcc_h27;
        DAST._IExpression _3086_length = _3083___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _3087_recursiveGen;
          bool _3088___v65;
          bool _3089_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3090_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1472;
          bool _out1473;
          bool _out1474;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1475;
          DCOMP.COMP.GenExpr(_3085_expr, selfIdent, @params, true, out _out1472, out _out1473, out _out1474, out _out1475);
          _3087_recursiveGen = _out1472;
          _3088___v65 = _out1473;
          _3089_eErased = _out1474;
          _3090_recIdents = _out1475;
          Dafny.ISequence<Dafny.Rune> _3091_lengthGen;
          bool _3092___v66;
          bool _3093_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3094_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1476;
          bool _out1477;
          bool _out1478;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1479;
          DCOMP.COMP.GenExpr(_3086_length, selfIdent, @params, true, out _out1476, out _out1477, out _out1478, out _out1479);
          _3091_lengthGen = _out1476;
          _3092___v66 = _out1477;
          _3093_lengthErased = _out1478;
          _3094_lengthIdents = _out1479;
          if (!(_3093_lengthErased)) {
            _3091_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3091_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _3087_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _3091_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3090_recIdents, _3094_lengthIdents);
          isOwned = true;
          isErased = _3089_eErased;
        }
      } else if (_source107.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3095___mcc_h28 = _source107.dtor_elements;
        DAST._IType _3096___mcc_h29 = _source107.dtor_typ;
        DAST._IType _3097_typ = _3096___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3098_exprs = _3095___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3099_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1480;
          _out1480 = DCOMP.COMP.GenType(_3097_typ, false, false);
          _3099_genTpe = _out1480;
          BigInteger _3100_i;
          _3100_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3100_i = BigInteger.Zero;
          while ((_3100_i) < (new BigInteger((_3098_exprs).Count))) {
            if ((_3100_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3101_recursiveGen;
            bool _3102___v67;
            bool _3103_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3104_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1481;
            bool _out1482;
            bool _out1483;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
            DCOMP.COMP.GenExpr((_3098_exprs).Select(_3100_i), selfIdent, @params, true, out _out1481, out _out1482, out _out1483, out _out1484);
            _3101_recursiveGen = _out1481;
            _3102___v67 = _out1482;
            _3103_isErased = _out1483;
            _3104_recIdents = _out1484;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3104_recIdents);
            if (_3103_isErased) {
              _3101_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3101_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3101_recursiveGen);
            _3100_i = (_3100_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _3099_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source107.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3105___mcc_h30 = _source107.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3106_exprs = _3105___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _3107_generatedValues;
          _3107_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3108_i;
          _3108_i = BigInteger.Zero;
          bool _3109_allErased;
          _3109_allErased = true;
          while ((_3108_i) < (new BigInteger((_3106_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _3110_recursiveGen;
            bool _3111___v68;
            bool _3112_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3113_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1485;
            bool _out1486;
            bool _out1487;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
            DCOMP.COMP.GenExpr((_3106_exprs).Select(_3108_i), selfIdent, @params, true, out _out1485, out _out1486, out _out1487, out _out1488);
            _3110_recursiveGen = _out1485;
            _3111___v68 = _out1486;
            _3112_isErased = _out1487;
            _3113_recIdents = _out1488;
            _3109_allErased = (_3109_allErased) && (_3112_isErased);
            _3107_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_3107_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_3110_recursiveGen, _3112_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3113_recIdents);
            _3108_i = (_3108_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3108_i = BigInteger.Zero;
          while ((_3108_i) < (new BigInteger((_3107_generatedValues).Count))) {
            if ((_3108_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3114_gen;
            _3114_gen = ((_3107_generatedValues).Select(_3108_i)).dtor__0;
            if ((((_3107_generatedValues).Select(_3108_i)).dtor__1) && (!(_3109_allErased))) {
              _3114_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3114_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3114_gen);
            _3108_i = (_3108_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _3109_allErased;
        }
      } else if (_source107.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3115___mcc_h31 = _source107.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3116_mapElems = _3115___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _3117_generatedValues;
          _3117_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3118_i;
          _3118_i = BigInteger.Zero;
          bool _3119_allErased;
          _3119_allErased = true;
          while ((_3118_i) < (new BigInteger((_3116_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _3120_recursiveGenKey;
            bool _3121___v69;
            bool _3122_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3123_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1489;
            bool _out1490;
            bool _out1491;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
            DCOMP.COMP.GenExpr(((_3116_mapElems).Select(_3118_i)).dtor__0, selfIdent, @params, true, out _out1489, out _out1490, out _out1491, out _out1492);
            _3120_recursiveGenKey = _out1489;
            _3121___v69 = _out1490;
            _3122_isErasedKey = _out1491;
            _3123_recIdentsKey = _out1492;
            Dafny.ISequence<Dafny.Rune> _3124_recursiveGenValue;
            bool _3125___v70;
            bool _3126_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3127_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1493;
            bool _out1494;
            bool _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(((_3116_mapElems).Select(_3118_i)).dtor__1, selfIdent, @params, true, out _out1493, out _out1494, out _out1495, out _out1496);
            _3124_recursiveGenValue = _out1493;
            _3125___v70 = _out1494;
            _3126_isErasedValue = _out1495;
            _3127_recIdentsValue = _out1496;
            _3119_allErased = ((_3119_allErased) && (_3122_isErasedKey)) && (_3126_isErasedValue);
            _3117_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_3117_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_3120_recursiveGenKey, _3124_recursiveGenValue, _3122_isErasedKey, _3126_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3123_recIdentsKey), _3127_recIdentsValue);
            _3118_i = (_3118_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3118_i = BigInteger.Zero;
          while ((_3118_i) < (new BigInteger((_3117_generatedValues).Count))) {
            if ((_3118_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3128_genKey;
            _3128_genKey = ((_3117_generatedValues).Select(_3118_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _3129_genValue;
            _3129_genValue = ((_3117_generatedValues).Select(_3118_i)).dtor__1;
            if ((((_3117_generatedValues).Select(_3118_i)).dtor__2) && (!(_3119_allErased))) {
              _3128_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3128_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_3117_generatedValues).Select(_3118_i)).dtor__3) && (!(_3119_allErased))) {
              _3129_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3129_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3128_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3129_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3118_i = (_3118_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _3119_allErased;
        }
      } else if (_source107.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source157 = selfIdent;
          if (_source157.is_Some) {
            Dafny.ISequence<Dafny.Rune> _3130___mcc_h1149 = _source157.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _3131_id = _3130___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_3131_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_3131_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3131_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3131_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source107.is_Ite) {
        DAST._IExpression _3132___mcc_h32 = _source107.dtor_cond;
        DAST._IExpression _3133___mcc_h33 = _source107.dtor_thn;
        DAST._IExpression _3134___mcc_h34 = _source107.dtor_els;
        DAST._IExpression _3135_f = _3134___mcc_h34;
        DAST._IExpression _3136_t = _3133___mcc_h33;
        DAST._IExpression _3137_cond = _3132___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _3138_condString;
          bool _3139___v71;
          bool _3140_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3141_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1497;
          bool _out1498;
          bool _out1499;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1500;
          DCOMP.COMP.GenExpr(_3137_cond, selfIdent, @params, true, out _out1497, out _out1498, out _out1499, out _out1500);
          _3138_condString = _out1497;
          _3139___v71 = _out1498;
          _3140_condErased = _out1499;
          _3141_recIdentsCond = _out1500;
          if (!(_3140_condErased)) {
            _3138_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3138_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _3142___v72;
          bool _3143_tHasToBeOwned;
          bool _3144___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3145___v74;
          Dafny.ISequence<Dafny.Rune> _out1501;
          bool _out1502;
          bool _out1503;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
          DCOMP.COMP.GenExpr(_3136_t, selfIdent, @params, mustOwn, out _out1501, out _out1502, out _out1503, out _out1504);
          _3142___v72 = _out1501;
          _3143_tHasToBeOwned = _out1502;
          _3144___v73 = _out1503;
          _3145___v74 = _out1504;
          Dafny.ISequence<Dafny.Rune> _3146_fString;
          bool _3147_fOwned;
          bool _3148_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3149_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1505;
          bool _out1506;
          bool _out1507;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
          DCOMP.COMP.GenExpr(_3135_f, selfIdent, @params, _3143_tHasToBeOwned, out _out1505, out _out1506, out _out1507, out _out1508);
          _3146_fString = _out1505;
          _3147_fOwned = _out1506;
          _3148_fErased = _out1507;
          _3149_recIdentsF = _out1508;
          Dafny.ISequence<Dafny.Rune> _3150_tString;
          bool _3151___v75;
          bool _3152_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3153_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1509;
          bool _out1510;
          bool _out1511;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
          DCOMP.COMP.GenExpr(_3136_t, selfIdent, @params, _3147_fOwned, out _out1509, out _out1510, out _out1511, out _out1512);
          _3150_tString = _out1509;
          _3151___v75 = _out1510;
          _3152_tErased = _out1511;
          _3153_recIdentsT = _out1512;
          if ((!(_3148_fErased)) || (!(_3152_tErased))) {
            if (_3148_fErased) {
              _3146_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3146_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_3152_tErased) {
              _3150_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3150_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3138_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3150_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3146_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _3147_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3141_recIdentsCond, _3153_recIdentsT), _3149_recIdentsF);
          isErased = (_3148_fErased) || (_3152_tErased);
        }
      } else if (_source107.is_UnOp) {
        DAST._IUnaryOp _3154___mcc_h35 = _source107.dtor_unOp;
        DAST._IExpression _3155___mcc_h36 = _source107.dtor_expr;
        DAST._IUnaryOp _source158 = _3154___mcc_h35;
        if (_source158.is_Not) {
          DAST._IExpression _3156_e = _3155___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3157_recursiveGen;
            bool _3158___v76;
            bool _3159_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3160_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1513;
            bool _out1514;
            bool _out1515;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
            DCOMP.COMP.GenExpr(_3156_e, selfIdent, @params, true, out _out1513, out _out1514, out _out1515, out _out1516);
            _3157_recursiveGen = _out1513;
            _3158___v76 = _out1514;
            _3159_recErased = _out1515;
            _3160_recIdents = _out1516;
            if (!(_3159_recErased)) {
              _3157_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3157_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3157_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3160_recIdents;
            isErased = true;
          }
        } else if (_source158.is_BitwiseNot) {
          DAST._IExpression _3161_e = _3155___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3162_recursiveGen;
            bool _3163___v77;
            bool _3164_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3165_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1517;
            bool _out1518;
            bool _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            DCOMP.COMP.GenExpr(_3161_e, selfIdent, @params, true, out _out1517, out _out1518, out _out1519, out _out1520);
            _3162_recursiveGen = _out1517;
            _3163___v77 = _out1518;
            _3164_recErased = _out1519;
            _3165_recIdents = _out1520;
            if (!(_3164_recErased)) {
              _3162_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3162_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _3162_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3165_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _3166_e = _3155___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3167_recursiveGen;
            bool _3168_recOwned;
            bool _3169_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3170_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1521;
            bool _out1522;
            bool _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr(_3166_e, selfIdent, @params, false, out _out1521, out _out1522, out _out1523, out _out1524);
            _3167_recursiveGen = _out1521;
            _3168_recOwned = _out1522;
            _3169_recErased = _out1523;
            _3170_recIdents = _out1524;
            if (!(_3169_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3171_eraseFn;
              _3171_eraseFn = ((_3168_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3167_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3171_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3167_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3167_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3170_recIdents;
            isErased = true;
          }
        }
      } else if (_source107.is_BinOp) {
        DAST._IBinOp _3172___mcc_h37 = _source107.dtor_op;
        DAST._IExpression _3173___mcc_h38 = _source107.dtor_left;
        DAST._IExpression _3174___mcc_h39 = _source107.dtor_right;
        DAST._IExpression _3175_r = _3174___mcc_h39;
        DAST._IExpression _3176_l = _3173___mcc_h38;
        DAST._IBinOp _3177_op = _3172___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _3178_left;
          bool _3179___v78;
          bool _3180_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3181_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1525;
          bool _out1526;
          bool _out1527;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1528;
          DCOMP.COMP.GenExpr(_3176_l, selfIdent, @params, true, out _out1525, out _out1526, out _out1527, out _out1528);
          _3178_left = _out1525;
          _3179___v78 = _out1526;
          _3180_leftErased = _out1527;
          _3181_recIdentsL = _out1528;
          Dafny.ISequence<Dafny.Rune> _3182_right;
          bool _3183___v79;
          bool _3184_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3185_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1529;
          bool _out1530;
          bool _out1531;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
          DCOMP.COMP.GenExpr(_3175_r, selfIdent, @params, true, out _out1529, out _out1530, out _out1531, out _out1532);
          _3182_right = _out1529;
          _3183___v79 = _out1530;
          _3184_rightErased = _out1531;
          _3185_recIdentsR = _out1532;
          DAST._IBinOp _source159 = _3177_op;
          if (_source159.is_Eq) {
            bool _3186___mcc_h1150 = _source159.dtor_referential;
            bool _3187___mcc_h1151 = _source159.dtor_nullable;
            {
              if (!(_3180_leftErased)) {
                _3178_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3184_rightErased)) {
                _3182_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source160 = _3177_op;
              if (_source160.is_Eq) {
                bool _3188___mcc_h1160 = _source160.dtor_referential;
                bool _3189___mcc_h1161 = _source160.dtor_nullable;
                bool _3190_nullable = _3189___mcc_h1161;
                bool _3191_referential = _3188___mcc_h1160;
                {
                  if (_3191_referential) {
                    if (_3190_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3182_right);
                  }
                }
              } else if (_source160.is_Neq) {
                bool _3192___mcc_h1162 = _source160.dtor_referential;
                bool _3193___mcc_h1163 = _source160.dtor_nullable;
                bool _3194_nullable = _3193___mcc_h1163;
                bool _3195_referential = _3192___mcc_h1162;
                {
                  if (_3195_referential) {
                    if (_3194_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3182_right);
                  }
                }
              } else if (_source160.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3196___mcc_h1164 = _source160.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3197_op = _3196___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3197_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source159.is_Neq) {
            bool _3198___mcc_h1154 = _source159.dtor_referential;
            bool _3199___mcc_h1155 = _source159.dtor_nullable;
            {
              if (!(_3180_leftErased)) {
                _3178_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3184_rightErased)) {
                _3182_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source161 = _3177_op;
              if (_source161.is_Eq) {
                bool _3200___mcc_h1165 = _source161.dtor_referential;
                bool _3201___mcc_h1166 = _source161.dtor_nullable;
                bool _3202_nullable = _3201___mcc_h1166;
                bool _3203_referential = _3200___mcc_h1165;
                {
                  if (_3203_referential) {
                    if (_3202_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3182_right);
                  }
                }
              } else if (_source161.is_Neq) {
                bool _3204___mcc_h1167 = _source161.dtor_referential;
                bool _3205___mcc_h1168 = _source161.dtor_nullable;
                bool _3206_nullable = _3205___mcc_h1168;
                bool _3207_referential = _3204___mcc_h1167;
                {
                  if (_3207_referential) {
                    if (_3206_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3182_right);
                  }
                }
              } else if (_source161.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source161.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source161.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source161.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3208___mcc_h1169 = _source161.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3209_op = _3208___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3209_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source159.is_Div) {
            {
              if (!(_3180_leftErased)) {
                _3178_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3184_rightErased)) {
                _3182_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source162 = _3177_op;
              if (_source162.is_Eq) {
                bool _3210___mcc_h1170 = _source162.dtor_referential;
                bool _3211___mcc_h1171 = _source162.dtor_nullable;
                bool _3212_nullable = _3211___mcc_h1171;
                bool _3213_referential = _3210___mcc_h1170;
                {
                  if (_3213_referential) {
                    if (_3212_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3182_right);
                  }
                }
              } else if (_source162.is_Neq) {
                bool _3214___mcc_h1172 = _source162.dtor_referential;
                bool _3215___mcc_h1173 = _source162.dtor_nullable;
                bool _3216_nullable = _3215___mcc_h1173;
                bool _3217_referential = _3214___mcc_h1172;
                {
                  if (_3217_referential) {
                    if (_3216_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3182_right);
                  }
                }
              } else if (_source162.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source162.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source162.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source162.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3218___mcc_h1174 = _source162.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3219_op = _3218___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3219_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source159.is_EuclidianDiv) {
            {
              if (!(_3180_leftErased)) {
                _3178_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3184_rightErased)) {
                _3182_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source163 = _3177_op;
              if (_source163.is_Eq) {
                bool _3220___mcc_h1175 = _source163.dtor_referential;
                bool _3221___mcc_h1176 = _source163.dtor_nullable;
                bool _3222_nullable = _3221___mcc_h1176;
                bool _3223_referential = _3220___mcc_h1175;
                {
                  if (_3223_referential) {
                    if (_3222_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3182_right);
                  }
                }
              } else if (_source163.is_Neq) {
                bool _3224___mcc_h1177 = _source163.dtor_referential;
                bool _3225___mcc_h1178 = _source163.dtor_nullable;
                bool _3226_nullable = _3225___mcc_h1178;
                bool _3227_referential = _3224___mcc_h1177;
                {
                  if (_3227_referential) {
                    if (_3226_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3182_right);
                  }
                }
              } else if (_source163.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source163.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source163.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source163.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3228___mcc_h1179 = _source163.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3229_op = _3228___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3229_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source159.is_Mod) {
            {
              if (!(_3180_leftErased)) {
                _3178_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3184_rightErased)) {
                _3182_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source164 = _3177_op;
              if (_source164.is_Eq) {
                bool _3230___mcc_h1180 = _source164.dtor_referential;
                bool _3231___mcc_h1181 = _source164.dtor_nullable;
                bool _3232_nullable = _3231___mcc_h1181;
                bool _3233_referential = _3230___mcc_h1180;
                {
                  if (_3233_referential) {
                    if (_3232_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3182_right);
                  }
                }
              } else if (_source164.is_Neq) {
                bool _3234___mcc_h1182 = _source164.dtor_referential;
                bool _3235___mcc_h1183 = _source164.dtor_nullable;
                bool _3236_nullable = _3235___mcc_h1183;
                bool _3237_referential = _3234___mcc_h1182;
                {
                  if (_3237_referential) {
                    if (_3236_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3182_right);
                  }
                }
              } else if (_source164.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source164.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source164.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source164.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3238___mcc_h1184 = _source164.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3239_op = _3238___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3239_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source159.is_EuclidianMod) {
            {
              if (!(_3180_leftErased)) {
                _3178_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3184_rightErased)) {
                _3182_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source165 = _3177_op;
              if (_source165.is_Eq) {
                bool _3240___mcc_h1185 = _source165.dtor_referential;
                bool _3241___mcc_h1186 = _source165.dtor_nullable;
                bool _3242_nullable = _3241___mcc_h1186;
                bool _3243_referential = _3240___mcc_h1185;
                {
                  if (_3243_referential) {
                    if (_3242_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3182_right);
                  }
                }
              } else if (_source165.is_Neq) {
                bool _3244___mcc_h1187 = _source165.dtor_referential;
                bool _3245___mcc_h1188 = _source165.dtor_nullable;
                bool _3246_nullable = _3245___mcc_h1188;
                bool _3247_referential = _3244___mcc_h1187;
                {
                  if (_3247_referential) {
                    if (_3246_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3182_right);
                  }
                }
              } else if (_source165.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source165.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source165.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source165.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3248___mcc_h1189 = _source165.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3249_op = _3248___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3249_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source159.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _3182_right);
            }
          } else if (_source159.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3182_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source159.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source159.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source159.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3250___mcc_h1158 = _source159.dtor_Passthrough_a0;
            {
              if (!(_3180_leftErased)) {
                _3178_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3184_rightErased)) {
                _3182_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source166 = _3177_op;
              if (_source166.is_Eq) {
                bool _3251___mcc_h1190 = _source166.dtor_referential;
                bool _3252___mcc_h1191 = _source166.dtor_nullable;
                bool _3253_nullable = _3252___mcc_h1191;
                bool _3254_referential = _3251___mcc_h1190;
                {
                  if (_3254_referential) {
                    if (_3253_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3182_right);
                  }
                }
              } else if (_source166.is_Neq) {
                bool _3255___mcc_h1192 = _source166.dtor_referential;
                bool _3256___mcc_h1193 = _source166.dtor_nullable;
                bool _3257_nullable = _3256___mcc_h1193;
                bool _3258_referential = _3255___mcc_h1192;
                {
                  if (_3258_referential) {
                    if (_3257_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3178_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3182_right);
                  }
                }
              } else if (_source166.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source166.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source166.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source166.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3259___mcc_h1194 = _source166.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3260_op = _3259___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3178_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3260_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3182_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3181_recIdentsL, _3185_recIdentsR);
          isErased = true;
        }
      } else if (_source107.is_ArrayLen) {
        DAST._IExpression _3261___mcc_h40 = _source107.dtor_expr;
        BigInteger _3262___mcc_h41 = _source107.dtor_dim;
        BigInteger _3263_dim = _3262___mcc_h41;
        DAST._IExpression _3264_expr = _3261___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _3265_recursiveGen;
          bool _3266___v81;
          bool _3267_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3268_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1533;
          bool _out1534;
          bool _out1535;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
          DCOMP.COMP.GenExpr(_3264_expr, selfIdent, @params, true, out _out1533, out _out1534, out _out1535, out _out1536);
          _3265_recursiveGen = _out1533;
          _3266___v81 = _out1534;
          _3267_recErased = _out1535;
          _3268_recIdents = _out1536;
          if ((_3263_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3265_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _3269_i;
            _3269_i = BigInteger.One;
            while ((_3269_i) < (_3263_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3269_i = (_3269_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3265_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _3268_recIdents;
          isErased = true;
        }
      } else if (_source107.is_Select) {
        DAST._IExpression _3270___mcc_h42 = _source107.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3271___mcc_h43 = _source107.dtor_field;
        bool _3272___mcc_h44 = _source107.dtor_isConstant;
        bool _3273___mcc_h45 = _source107.dtor_onDatatype;
        DAST._IExpression _source167 = _3270___mcc_h42;
        if (_source167.is_Literal) {
          DAST._ILiteral _3274___mcc_h46 = _source167.dtor_Literal_a0;
          bool _3275_isDatatype = _3273___mcc_h45;
          bool _3276_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3277_field = _3271___mcc_h43;
          DAST._IExpression _3278_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3279_onString;
            bool _3280_onOwned;
            bool _3281_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3282_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1537;
            bool _out1538;
            bool _out1539;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
            DCOMP.COMP.GenExpr(_3278_on, selfIdent, @params, false, out _out1537, out _out1538, out _out1539, out _out1540);
            _3279_onString = _out1537;
            _3280_onOwned = _out1538;
            _3281_onErased = _out1539;
            _3282_recIdents = _out1540;
            if ((_3275_isDatatype) || (_3276_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3279_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3277_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3276_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3279_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3277_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3282_recIdents;
          }
        } else if (_source167.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3283___mcc_h48 = _source167.dtor_Ident_a0;
          bool _3284_isDatatype = _3273___mcc_h45;
          bool _3285_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3286_field = _3271___mcc_h43;
          DAST._IExpression _3287_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3288_onString;
            bool _3289_onOwned;
            bool _3290_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3291_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1541;
            bool _out1542;
            bool _out1543;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
            DCOMP.COMP.GenExpr(_3287_on, selfIdent, @params, false, out _out1541, out _out1542, out _out1543, out _out1544);
            _3288_onString = _out1541;
            _3289_onOwned = _out1542;
            _3290_onErased = _out1543;
            _3291_recIdents = _out1544;
            if ((_3284_isDatatype) || (_3285_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3288_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3286_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3285_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3288_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3286_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3291_recIdents;
          }
        } else if (_source167.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3292___mcc_h50 = _source167.dtor_Companion_a0;
          bool _3293_isDatatype = _3273___mcc_h45;
          bool _3294_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3295_field = _3271___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3296_c = _3292___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _3297_onString;
            bool _3298_onOwned;
            bool _3299_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3300_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1545;
            bool _out1546;
            bool _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3296_c), selfIdent, @params, false, out _out1545, out _out1546, out _out1547, out _out1548);
            _3297_onString = _out1545;
            _3298_onOwned = _out1546;
            _3299_onErased = _out1547;
            _3300_recIdents = _out1548;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3297_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3295_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3300_recIdents;
          }
        } else if (_source167.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3301___mcc_h52 = _source167.dtor_Tuple_a0;
          bool _3302_isDatatype = _3273___mcc_h45;
          bool _3303_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3304_field = _3271___mcc_h43;
          DAST._IExpression _3305_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3306_onString;
            bool _3307_onOwned;
            bool _3308_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3309_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1549;
            bool _out1550;
            bool _out1551;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
            DCOMP.COMP.GenExpr(_3305_on, selfIdent, @params, false, out _out1549, out _out1550, out _out1551, out _out1552);
            _3306_onString = _out1549;
            _3307_onOwned = _out1550;
            _3308_onErased = _out1551;
            _3309_recIdents = _out1552;
            if ((_3302_isDatatype) || (_3303_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3306_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3304_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3303_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3306_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3304_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3309_recIdents;
          }
        } else if (_source167.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3310___mcc_h54 = _source167.dtor_path;
          Dafny.ISequence<DAST._IType> _3311___mcc_h55 = _source167.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3312___mcc_h56 = _source167.dtor_args;
          bool _3313_isDatatype = _3273___mcc_h45;
          bool _3314_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3315_field = _3271___mcc_h43;
          DAST._IExpression _3316_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3317_onString;
            bool _3318_onOwned;
            bool _3319_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3320_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1553;
            bool _out1554;
            bool _out1555;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1556;
            DCOMP.COMP.GenExpr(_3316_on, selfIdent, @params, false, out _out1553, out _out1554, out _out1555, out _out1556);
            _3317_onString = _out1553;
            _3318_onOwned = _out1554;
            _3319_onErased = _out1555;
            _3320_recIdents = _out1556;
            if ((_3313_isDatatype) || (_3314_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3317_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3315_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3314_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3317_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3315_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3320_recIdents;
          }
        } else if (_source167.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3321___mcc_h60 = _source167.dtor_dims;
          DAST._IType _3322___mcc_h61 = _source167.dtor_typ;
          bool _3323_isDatatype = _3273___mcc_h45;
          bool _3324_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3325_field = _3271___mcc_h43;
          DAST._IExpression _3326_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3327_onString;
            bool _3328_onOwned;
            bool _3329_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3330_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1557;
            bool _out1558;
            bool _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            DCOMP.COMP.GenExpr(_3326_on, selfIdent, @params, false, out _out1557, out _out1558, out _out1559, out _out1560);
            _3327_onString = _out1557;
            _3328_onOwned = _out1558;
            _3329_onErased = _out1559;
            _3330_recIdents = _out1560;
            if ((_3323_isDatatype) || (_3324_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3327_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3325_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3324_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3327_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3325_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3330_recIdents;
          }
        } else if (_source167.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3331___mcc_h64 = _source167.dtor_path;
          Dafny.ISequence<DAST._IType> _3332___mcc_h65 = _source167.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3333___mcc_h66 = _source167.dtor_variant;
          bool _3334___mcc_h67 = _source167.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3335___mcc_h68 = _source167.dtor_contents;
          bool _3336_isDatatype = _3273___mcc_h45;
          bool _3337_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3338_field = _3271___mcc_h43;
          DAST._IExpression _3339_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3340_onString;
            bool _3341_onOwned;
            bool _3342_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3343_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1561;
            bool _out1562;
            bool _out1563;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1564;
            DCOMP.COMP.GenExpr(_3339_on, selfIdent, @params, false, out _out1561, out _out1562, out _out1563, out _out1564);
            _3340_onString = _out1561;
            _3341_onOwned = _out1562;
            _3342_onErased = _out1563;
            _3343_recIdents = _out1564;
            if ((_3336_isDatatype) || (_3337_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3340_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3338_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3337_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3340_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3338_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3343_recIdents;
          }
        } else if (_source167.is_Convert) {
          DAST._IExpression _3344___mcc_h74 = _source167.dtor_value;
          DAST._IType _3345___mcc_h75 = _source167.dtor_from;
          DAST._IType _3346___mcc_h76 = _source167.dtor_typ;
          bool _3347_isDatatype = _3273___mcc_h45;
          bool _3348_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3349_field = _3271___mcc_h43;
          DAST._IExpression _3350_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3351_onString;
            bool _3352_onOwned;
            bool _3353_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3354_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1565;
            bool _out1566;
            bool _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            DCOMP.COMP.GenExpr(_3350_on, selfIdent, @params, false, out _out1565, out _out1566, out _out1567, out _out1568);
            _3351_onString = _out1565;
            _3352_onOwned = _out1566;
            _3353_onErased = _out1567;
            _3354_recIdents = _out1568;
            if ((_3347_isDatatype) || (_3348_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3351_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3349_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3348_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3351_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3349_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3354_recIdents;
          }
        } else if (_source167.is_SeqConstruct) {
          DAST._IExpression _3355___mcc_h80 = _source167.dtor_length;
          DAST._IExpression _3356___mcc_h81 = _source167.dtor_elem;
          bool _3357_isDatatype = _3273___mcc_h45;
          bool _3358_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3359_field = _3271___mcc_h43;
          DAST._IExpression _3360_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3361_onString;
            bool _3362_onOwned;
            bool _3363_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3364_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1569;
            bool _out1570;
            bool _out1571;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
            DCOMP.COMP.GenExpr(_3360_on, selfIdent, @params, false, out _out1569, out _out1570, out _out1571, out _out1572);
            _3361_onString = _out1569;
            _3362_onOwned = _out1570;
            _3363_onErased = _out1571;
            _3364_recIdents = _out1572;
            if ((_3357_isDatatype) || (_3358_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3361_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3359_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3358_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3361_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3359_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3364_recIdents;
          }
        } else if (_source167.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3365___mcc_h84 = _source167.dtor_elements;
          DAST._IType _3366___mcc_h85 = _source167.dtor_typ;
          bool _3367_isDatatype = _3273___mcc_h45;
          bool _3368_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3369_field = _3271___mcc_h43;
          DAST._IExpression _3370_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3371_onString;
            bool _3372_onOwned;
            bool _3373_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3374_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1573;
            bool _out1574;
            bool _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            DCOMP.COMP.GenExpr(_3370_on, selfIdent, @params, false, out _out1573, out _out1574, out _out1575, out _out1576);
            _3371_onString = _out1573;
            _3372_onOwned = _out1574;
            _3373_onErased = _out1575;
            _3374_recIdents = _out1576;
            if ((_3367_isDatatype) || (_3368_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3371_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3369_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3368_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3371_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3369_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3374_recIdents;
          }
        } else if (_source167.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3375___mcc_h88 = _source167.dtor_elements;
          bool _3376_isDatatype = _3273___mcc_h45;
          bool _3377_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3378_field = _3271___mcc_h43;
          DAST._IExpression _3379_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3380_onString;
            bool _3381_onOwned;
            bool _3382_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3383_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1577;
            bool _out1578;
            bool _out1579;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
            DCOMP.COMP.GenExpr(_3379_on, selfIdent, @params, false, out _out1577, out _out1578, out _out1579, out _out1580);
            _3380_onString = _out1577;
            _3381_onOwned = _out1578;
            _3382_onErased = _out1579;
            _3383_recIdents = _out1580;
            if ((_3376_isDatatype) || (_3377_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3380_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3378_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3377_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3380_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3378_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3383_recIdents;
          }
        } else if (_source167.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3384___mcc_h90 = _source167.dtor_mapElems;
          bool _3385_isDatatype = _3273___mcc_h45;
          bool _3386_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3387_field = _3271___mcc_h43;
          DAST._IExpression _3388_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3389_onString;
            bool _3390_onOwned;
            bool _3391_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3392_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1581;
            bool _out1582;
            bool _out1583;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1584;
            DCOMP.COMP.GenExpr(_3388_on, selfIdent, @params, false, out _out1581, out _out1582, out _out1583, out _out1584);
            _3389_onString = _out1581;
            _3390_onOwned = _out1582;
            _3391_onErased = _out1583;
            _3392_recIdents = _out1584;
            if ((_3385_isDatatype) || (_3386_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3389_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3387_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3386_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3389_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3387_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3392_recIdents;
          }
        } else if (_source167.is_This) {
          bool _3393_isDatatype = _3273___mcc_h45;
          bool _3394_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3395_field = _3271___mcc_h43;
          DAST._IExpression _3396_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3397_onString;
            bool _3398_onOwned;
            bool _3399_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3400_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1585;
            bool _out1586;
            bool _out1587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1588;
            DCOMP.COMP.GenExpr(_3396_on, selfIdent, @params, false, out _out1585, out _out1586, out _out1587, out _out1588);
            _3397_onString = _out1585;
            _3398_onOwned = _out1586;
            _3399_onErased = _out1587;
            _3400_recIdents = _out1588;
            if ((_3393_isDatatype) || (_3394_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3397_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3395_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3394_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3397_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3395_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3400_recIdents;
          }
        } else if (_source167.is_Ite) {
          DAST._IExpression _3401___mcc_h92 = _source167.dtor_cond;
          DAST._IExpression _3402___mcc_h93 = _source167.dtor_thn;
          DAST._IExpression _3403___mcc_h94 = _source167.dtor_els;
          bool _3404_isDatatype = _3273___mcc_h45;
          bool _3405_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3406_field = _3271___mcc_h43;
          DAST._IExpression _3407_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3408_onString;
            bool _3409_onOwned;
            bool _3410_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3411_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1589;
            bool _out1590;
            bool _out1591;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1592;
            DCOMP.COMP.GenExpr(_3407_on, selfIdent, @params, false, out _out1589, out _out1590, out _out1591, out _out1592);
            _3408_onString = _out1589;
            _3409_onOwned = _out1590;
            _3410_onErased = _out1591;
            _3411_recIdents = _out1592;
            if ((_3404_isDatatype) || (_3405_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3408_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3406_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3405_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3408_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3406_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3411_recIdents;
          }
        } else if (_source167.is_UnOp) {
          DAST._IUnaryOp _3412___mcc_h98 = _source167.dtor_unOp;
          DAST._IExpression _3413___mcc_h99 = _source167.dtor_expr;
          bool _3414_isDatatype = _3273___mcc_h45;
          bool _3415_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3416_field = _3271___mcc_h43;
          DAST._IExpression _3417_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3418_onString;
            bool _3419_onOwned;
            bool _3420_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3421_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1593;
            bool _out1594;
            bool _out1595;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1596;
            DCOMP.COMP.GenExpr(_3417_on, selfIdent, @params, false, out _out1593, out _out1594, out _out1595, out _out1596);
            _3418_onString = _out1593;
            _3419_onOwned = _out1594;
            _3420_onErased = _out1595;
            _3421_recIdents = _out1596;
            if ((_3414_isDatatype) || (_3415_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3416_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3415_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3418_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3416_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3421_recIdents;
          }
        } else if (_source167.is_BinOp) {
          DAST._IBinOp _3422___mcc_h102 = _source167.dtor_op;
          DAST._IExpression _3423___mcc_h103 = _source167.dtor_left;
          DAST._IExpression _3424___mcc_h104 = _source167.dtor_right;
          bool _3425_isDatatype = _3273___mcc_h45;
          bool _3426_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3427_field = _3271___mcc_h43;
          DAST._IExpression _3428_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3429_onString;
            bool _3430_onOwned;
            bool _3431_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3432_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1597;
            bool _out1598;
            bool _out1599;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
            DCOMP.COMP.GenExpr(_3428_on, selfIdent, @params, false, out _out1597, out _out1598, out _out1599, out _out1600);
            _3429_onString = _out1597;
            _3430_onOwned = _out1598;
            _3431_onErased = _out1599;
            _3432_recIdents = _out1600;
            if ((_3425_isDatatype) || (_3426_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3429_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3427_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3426_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3429_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3427_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3432_recIdents;
          }
        } else if (_source167.is_ArrayLen) {
          DAST._IExpression _3433___mcc_h108 = _source167.dtor_expr;
          BigInteger _3434___mcc_h109 = _source167.dtor_dim;
          bool _3435_isDatatype = _3273___mcc_h45;
          bool _3436_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3437_field = _3271___mcc_h43;
          DAST._IExpression _3438_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3439_onString;
            bool _3440_onOwned;
            bool _3441_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3442_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1601;
            bool _out1602;
            bool _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            DCOMP.COMP.GenExpr(_3438_on, selfIdent, @params, false, out _out1601, out _out1602, out _out1603, out _out1604);
            _3439_onString = _out1601;
            _3440_onOwned = _out1602;
            _3441_onErased = _out1603;
            _3442_recIdents = _out1604;
            if ((_3435_isDatatype) || (_3436_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3439_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3437_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3436_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3439_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3437_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3442_recIdents;
          }
        } else if (_source167.is_Select) {
          DAST._IExpression _3443___mcc_h112 = _source167.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3444___mcc_h113 = _source167.dtor_field;
          bool _3445___mcc_h114 = _source167.dtor_isConstant;
          bool _3446___mcc_h115 = _source167.dtor_onDatatype;
          bool _3447_isDatatype = _3273___mcc_h45;
          bool _3448_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3449_field = _3271___mcc_h43;
          DAST._IExpression _3450_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3451_onString;
            bool _3452_onOwned;
            bool _3453_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3454_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1605;
            bool _out1606;
            bool _out1607;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
            DCOMP.COMP.GenExpr(_3450_on, selfIdent, @params, false, out _out1605, out _out1606, out _out1607, out _out1608);
            _3451_onString = _out1605;
            _3452_onOwned = _out1606;
            _3453_onErased = _out1607;
            _3454_recIdents = _out1608;
            if ((_3447_isDatatype) || (_3448_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3451_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3449_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3448_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3451_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3449_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3454_recIdents;
          }
        } else if (_source167.is_SelectFn) {
          DAST._IExpression _3455___mcc_h120 = _source167.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3456___mcc_h121 = _source167.dtor_field;
          bool _3457___mcc_h122 = _source167.dtor_onDatatype;
          bool _3458___mcc_h123 = _source167.dtor_isStatic;
          BigInteger _3459___mcc_h124 = _source167.dtor_arity;
          bool _3460_isDatatype = _3273___mcc_h45;
          bool _3461_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3462_field = _3271___mcc_h43;
          DAST._IExpression _3463_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3464_onString;
            bool _3465_onOwned;
            bool _3466_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3467_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1609;
            bool _out1610;
            bool _out1611;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
            DCOMP.COMP.GenExpr(_3463_on, selfIdent, @params, false, out _out1609, out _out1610, out _out1611, out _out1612);
            _3464_onString = _out1609;
            _3465_onOwned = _out1610;
            _3466_onErased = _out1611;
            _3467_recIdents = _out1612;
            if ((_3460_isDatatype) || (_3461_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3464_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3462_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3461_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3464_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3462_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3467_recIdents;
          }
        } else if (_source167.is_Index) {
          DAST._IExpression _3468___mcc_h130 = _source167.dtor_expr;
          DAST._ICollKind _3469___mcc_h131 = _source167.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3470___mcc_h132 = _source167.dtor_indices;
          bool _3471_isDatatype = _3273___mcc_h45;
          bool _3472_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3473_field = _3271___mcc_h43;
          DAST._IExpression _3474_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3475_onString;
            bool _3476_onOwned;
            bool _3477_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3478_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1613;
            bool _out1614;
            bool _out1615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1616;
            DCOMP.COMP.GenExpr(_3474_on, selfIdent, @params, false, out _out1613, out _out1614, out _out1615, out _out1616);
            _3475_onString = _out1613;
            _3476_onOwned = _out1614;
            _3477_onErased = _out1615;
            _3478_recIdents = _out1616;
            if ((_3471_isDatatype) || (_3472_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3475_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3473_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3472_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3475_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3473_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3478_recIdents;
          }
        } else if (_source167.is_IndexRange) {
          DAST._IExpression _3479___mcc_h136 = _source167.dtor_expr;
          bool _3480___mcc_h137 = _source167.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _3481___mcc_h138 = _source167.dtor_low;
          DAST._IOptional<DAST._IExpression> _3482___mcc_h139 = _source167.dtor_high;
          bool _3483_isDatatype = _3273___mcc_h45;
          bool _3484_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3485_field = _3271___mcc_h43;
          DAST._IExpression _3486_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3487_onString;
            bool _3488_onOwned;
            bool _3489_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3490_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1617;
            bool _out1618;
            bool _out1619;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1620;
            DCOMP.COMP.GenExpr(_3486_on, selfIdent, @params, false, out _out1617, out _out1618, out _out1619, out _out1620);
            _3487_onString = _out1617;
            _3488_onOwned = _out1618;
            _3489_onErased = _out1619;
            _3490_recIdents = _out1620;
            if ((_3483_isDatatype) || (_3484_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3487_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3485_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3484_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3487_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3485_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3490_recIdents;
          }
        } else if (_source167.is_TupleSelect) {
          DAST._IExpression _3491___mcc_h144 = _source167.dtor_expr;
          BigInteger _3492___mcc_h145 = _source167.dtor_index;
          bool _3493_isDatatype = _3273___mcc_h45;
          bool _3494_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3495_field = _3271___mcc_h43;
          DAST._IExpression _3496_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3497_onString;
            bool _3498_onOwned;
            bool _3499_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3500_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1621;
            bool _out1622;
            bool _out1623;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1624;
            DCOMP.COMP.GenExpr(_3496_on, selfIdent, @params, false, out _out1621, out _out1622, out _out1623, out _out1624);
            _3497_onString = _out1621;
            _3498_onOwned = _out1622;
            _3499_onErased = _out1623;
            _3500_recIdents = _out1624;
            if ((_3493_isDatatype) || (_3494_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3497_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3495_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3494_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3497_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3495_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3500_recIdents;
          }
        } else if (_source167.is_Call) {
          DAST._IExpression _3501___mcc_h148 = _source167.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3502___mcc_h149 = _source167.dtor_name;
          Dafny.ISequence<DAST._IType> _3503___mcc_h150 = _source167.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3504___mcc_h151 = _source167.dtor_args;
          bool _3505_isDatatype = _3273___mcc_h45;
          bool _3506_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3507_field = _3271___mcc_h43;
          DAST._IExpression _3508_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3509_onString;
            bool _3510_onOwned;
            bool _3511_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3512_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1625;
            bool _out1626;
            bool _out1627;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
            DCOMP.COMP.GenExpr(_3508_on, selfIdent, @params, false, out _out1625, out _out1626, out _out1627, out _out1628);
            _3509_onString = _out1625;
            _3510_onOwned = _out1626;
            _3511_onErased = _out1627;
            _3512_recIdents = _out1628;
            if ((_3505_isDatatype) || (_3506_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3509_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3507_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3506_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3509_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3507_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3512_recIdents;
          }
        } else if (_source167.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3513___mcc_h156 = _source167.dtor_params;
          DAST._IType _3514___mcc_h157 = _source167.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3515___mcc_h158 = _source167.dtor_body;
          bool _3516_isDatatype = _3273___mcc_h45;
          bool _3517_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3518_field = _3271___mcc_h43;
          DAST._IExpression _3519_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3520_onString;
            bool _3521_onOwned;
            bool _3522_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3523_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1629;
            bool _out1630;
            bool _out1631;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
            DCOMP.COMP.GenExpr(_3519_on, selfIdent, @params, false, out _out1629, out _out1630, out _out1631, out _out1632);
            _3520_onString = _out1629;
            _3521_onOwned = _out1630;
            _3522_onErased = _out1631;
            _3523_recIdents = _out1632;
            if ((_3516_isDatatype) || (_3517_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3520_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3518_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3517_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3520_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3518_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3523_recIdents;
          }
        } else if (_source167.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3524___mcc_h162 = _source167.dtor_values;
          DAST._IType _3525___mcc_h163 = _source167.dtor_retType;
          DAST._IExpression _3526___mcc_h164 = _source167.dtor_expr;
          bool _3527_isDatatype = _3273___mcc_h45;
          bool _3528_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3529_field = _3271___mcc_h43;
          DAST._IExpression _3530_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3531_onString;
            bool _3532_onOwned;
            bool _3533_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3534_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1633;
            bool _out1634;
            bool _out1635;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
            DCOMP.COMP.GenExpr(_3530_on, selfIdent, @params, false, out _out1633, out _out1634, out _out1635, out _out1636);
            _3531_onString = _out1633;
            _3532_onOwned = _out1634;
            _3533_onErased = _out1635;
            _3534_recIdents = _out1636;
            if ((_3527_isDatatype) || (_3528_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3531_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3529_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3528_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3531_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3529_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3534_recIdents;
          }
        } else if (_source167.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3535___mcc_h168 = _source167.dtor_name;
          DAST._IType _3536___mcc_h169 = _source167.dtor_typ;
          DAST._IExpression _3537___mcc_h170 = _source167.dtor_value;
          DAST._IExpression _3538___mcc_h171 = _source167.dtor_iifeBody;
          bool _3539_isDatatype = _3273___mcc_h45;
          bool _3540_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3541_field = _3271___mcc_h43;
          DAST._IExpression _3542_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3543_onString;
            bool _3544_onOwned;
            bool _3545_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3546_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1637;
            bool _out1638;
            bool _out1639;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1640;
            DCOMP.COMP.GenExpr(_3542_on, selfIdent, @params, false, out _out1637, out _out1638, out _out1639, out _out1640);
            _3543_onString = _out1637;
            _3544_onOwned = _out1638;
            _3545_onErased = _out1639;
            _3546_recIdents = _out1640;
            if ((_3539_isDatatype) || (_3540_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3543_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3541_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3540_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3543_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3541_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3546_recIdents;
          }
        } else if (_source167.is_Apply) {
          DAST._IExpression _3547___mcc_h176 = _source167.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3548___mcc_h177 = _source167.dtor_args;
          bool _3549_isDatatype = _3273___mcc_h45;
          bool _3550_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3551_field = _3271___mcc_h43;
          DAST._IExpression _3552_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3553_onString;
            bool _3554_onOwned;
            bool _3555_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3556_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1641;
            bool _out1642;
            bool _out1643;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
            DCOMP.COMP.GenExpr(_3552_on, selfIdent, @params, false, out _out1641, out _out1642, out _out1643, out _out1644);
            _3553_onString = _out1641;
            _3554_onOwned = _out1642;
            _3555_onErased = _out1643;
            _3556_recIdents = _out1644;
            if ((_3549_isDatatype) || (_3550_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3553_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3551_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3550_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3553_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3551_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3556_recIdents;
          }
        } else if (_source167.is_TypeTest) {
          DAST._IExpression _3557___mcc_h180 = _source167.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3558___mcc_h181 = _source167.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3559___mcc_h182 = _source167.dtor_variant;
          bool _3560_isDatatype = _3273___mcc_h45;
          bool _3561_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3562_field = _3271___mcc_h43;
          DAST._IExpression _3563_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3564_onString;
            bool _3565_onOwned;
            bool _3566_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3567_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1645;
            bool _out1646;
            bool _out1647;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1648;
            DCOMP.COMP.GenExpr(_3563_on, selfIdent, @params, false, out _out1645, out _out1646, out _out1647, out _out1648);
            _3564_onString = _out1645;
            _3565_onOwned = _out1646;
            _3566_onErased = _out1647;
            _3567_recIdents = _out1648;
            if ((_3560_isDatatype) || (_3561_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3564_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3562_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3561_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3564_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3562_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3567_recIdents;
          }
        } else if (_source167.is_InitializationValue) {
          DAST._IType _3568___mcc_h186 = _source167.dtor_typ;
          bool _3569_isDatatype = _3273___mcc_h45;
          bool _3570_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3571_field = _3271___mcc_h43;
          DAST._IExpression _3572_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3573_onString;
            bool _3574_onOwned;
            bool _3575_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3576_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1649;
            bool _out1650;
            bool _out1651;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1652;
            DCOMP.COMP.GenExpr(_3572_on, selfIdent, @params, false, out _out1649, out _out1650, out _out1651, out _out1652);
            _3573_onString = _out1649;
            _3574_onOwned = _out1650;
            _3575_onErased = _out1651;
            _3576_recIdents = _out1652;
            if ((_3569_isDatatype) || (_3570_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3573_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3571_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3570_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3573_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3571_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3576_recIdents;
          }
        } else if (_source167.is_BoolBoundedPool) {
          bool _3577_isDatatype = _3273___mcc_h45;
          bool _3578_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3579_field = _3271___mcc_h43;
          DAST._IExpression _3580_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3581_onString;
            bool _3582_onOwned;
            bool _3583_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3584_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1653;
            bool _out1654;
            bool _out1655;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1656;
            DCOMP.COMP.GenExpr(_3580_on, selfIdent, @params, false, out _out1653, out _out1654, out _out1655, out _out1656);
            _3581_onString = _out1653;
            _3582_onOwned = _out1654;
            _3583_onErased = _out1655;
            _3584_recIdents = _out1656;
            if ((_3577_isDatatype) || (_3578_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3581_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3579_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3578_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3581_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3579_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3584_recIdents;
          }
        } else if (_source167.is_SetBoundedPool) {
          DAST._IExpression _3585___mcc_h188 = _source167.dtor_of;
          bool _3586_isDatatype = _3273___mcc_h45;
          bool _3587_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3588_field = _3271___mcc_h43;
          DAST._IExpression _3589_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3590_onString;
            bool _3591_onOwned;
            bool _3592_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3593_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1657;
            bool _out1658;
            bool _out1659;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1660;
            DCOMP.COMP.GenExpr(_3589_on, selfIdent, @params, false, out _out1657, out _out1658, out _out1659, out _out1660);
            _3590_onString = _out1657;
            _3591_onOwned = _out1658;
            _3592_onErased = _out1659;
            _3593_recIdents = _out1660;
            if ((_3586_isDatatype) || (_3587_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3590_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3588_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3587_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3590_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3588_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3593_recIdents;
          }
        } else if (_source167.is_SeqBoundedPool) {
          DAST._IExpression _3594___mcc_h190 = _source167.dtor_of;
          bool _3595___mcc_h191 = _source167.dtor_includeDuplicates;
          bool _3596_isDatatype = _3273___mcc_h45;
          bool _3597_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3598_field = _3271___mcc_h43;
          DAST._IExpression _3599_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3600_onString;
            bool _3601_onOwned;
            bool _3602_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3603_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1661;
            bool _out1662;
            bool _out1663;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1664;
            DCOMP.COMP.GenExpr(_3599_on, selfIdent, @params, false, out _out1661, out _out1662, out _out1663, out _out1664);
            _3600_onString = _out1661;
            _3601_onOwned = _out1662;
            _3602_onErased = _out1663;
            _3603_recIdents = _out1664;
            if ((_3596_isDatatype) || (_3597_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3600_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3598_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3597_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3600_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3598_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3603_recIdents;
          }
        } else {
          DAST._IExpression _3604___mcc_h194 = _source167.dtor_lo;
          DAST._IExpression _3605___mcc_h195 = _source167.dtor_hi;
          bool _3606_isDatatype = _3273___mcc_h45;
          bool _3607_isConstant = _3272___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3608_field = _3271___mcc_h43;
          DAST._IExpression _3609_on = _3270___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3610_onString;
            bool _3611_onOwned;
            bool _3612_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3613_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1665;
            bool _out1666;
            bool _out1667;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
            DCOMP.COMP.GenExpr(_3609_on, selfIdent, @params, false, out _out1665, out _out1666, out _out1667, out _out1668);
            _3610_onString = _out1665;
            _3611_onOwned = _out1666;
            _3612_onErased = _out1667;
            _3613_recIdents = _out1668;
            if ((_3606_isDatatype) || (_3607_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3610_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3608_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3607_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3610_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3608_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3613_recIdents;
          }
        }
      } else if (_source107.is_SelectFn) {
        DAST._IExpression _3614___mcc_h198 = _source107.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3615___mcc_h199 = _source107.dtor_field;
        bool _3616___mcc_h200 = _source107.dtor_onDatatype;
        bool _3617___mcc_h201 = _source107.dtor_isStatic;
        BigInteger _3618___mcc_h202 = _source107.dtor_arity;
        BigInteger _3619_arity = _3618___mcc_h202;
        bool _3620_isStatic = _3617___mcc_h201;
        bool _3621_isDatatype = _3616___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3622_field = _3615___mcc_h199;
        DAST._IExpression _3623_on = _3614___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3624_onString;
          bool _3625_onOwned;
          bool _3626___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3627_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1669;
          bool _out1670;
          bool _out1671;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1672;
          DCOMP.COMP.GenExpr(_3623_on, selfIdent, @params, false, out _out1669, out _out1670, out _out1671, out _out1672);
          _3624_onString = _out1669;
          _3625_onOwned = _out1670;
          _3626___v82 = _out1671;
          _3627_recIdents = _out1672;
          if (_3620_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3624_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3622_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3624_onString), ((_3625_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3628_args;
            _3628_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3629_i;
            _3629_i = BigInteger.Zero;
            while ((_3629_i) < (_3619_arity)) {
              if ((_3629_i).Sign == 1) {
                _3628_args = Dafny.Sequence<Dafny.Rune>.Concat(_3628_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3628_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3628_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_3629_i));
              _3629_i = (_3629_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3628_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3622_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3628_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3630_typeShape;
          _3630_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3631_i;
          _3631_i = BigInteger.Zero;
          while ((_3631_i) < (_3619_arity)) {
            if ((_3631_i).Sign == 1) {
              _3630_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3630_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3630_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3630_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3631_i = (_3631_i) + (BigInteger.One);
          }
          _3630_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3630_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3630_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3627_recIdents;
        }
      } else if (_source107.is_Index) {
        DAST._IExpression _3632___mcc_h203 = _source107.dtor_expr;
        DAST._ICollKind _3633___mcc_h204 = _source107.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3634___mcc_h205 = _source107.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3635_indices = _3634___mcc_h205;
        DAST._ICollKind _3636_collKind = _3633___mcc_h204;
        DAST._IExpression _3637_on = _3632___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3638_onString;
          bool _3639_onOwned;
          bool _3640_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3641_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1673;
          bool _out1674;
          bool _out1675;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1676;
          DCOMP.COMP.GenExpr(_3637_on, selfIdent, @params, false, out _out1673, out _out1674, out _out1675, out _out1676);
          _3638_onString = _out1673;
          _3639_onOwned = _out1674;
          _3640_onErased = _out1675;
          _3641_recIdents = _out1676;
          readIdents = _3641_recIdents;
          s = _3638_onString;
          BigInteger _3642_i;
          _3642_i = BigInteger.Zero;
          while ((_3642_i) < (new BigInteger((_3635_indices).Count))) {
            if (object.Equals(_3636_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3636_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3643_idx;
              bool _3644_idxOwned;
              bool _3645_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3646_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1677;
              bool _out1678;
              bool _out1679;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1680;
              DCOMP.COMP.GenExpr((_3635_indices).Select(_3642_i), selfIdent, @params, false, out _out1677, out _out1678, out _out1679, out _out1680);
              _3643_idx = _out1677;
              _3644_idxOwned = _out1678;
              _3645_idxErased = _out1679;
              _3646_recIdentsIdx = _out1680;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3644_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3643_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3646_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3647_idx;
              bool _3648___v83;
              bool _3649_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3650_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1681;
              bool _out1682;
              bool _out1683;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1684;
              DCOMP.COMP.GenExpr((_3635_indices).Select(_3642_i), selfIdent, @params, true, out _out1681, out _out1682, out _out1683, out _out1684);
              _3647_idx = _out1681;
              _3648___v83 = _out1682;
              _3649_idxErased = _out1683;
              _3650_recIdentsIdx = _out1684;
              if (!(_3649_idxErased)) {
                _3647_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3647_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3647_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3650_recIdentsIdx);
            }
            _3642_i = (_3642_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3640_onErased;
        }
      } else if (_source107.is_IndexRange) {
        DAST._IExpression _3651___mcc_h206 = _source107.dtor_expr;
        bool _3652___mcc_h207 = _source107.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _3653___mcc_h208 = _source107.dtor_low;
        DAST._IOptional<DAST._IExpression> _3654___mcc_h209 = _source107.dtor_high;
        DAST._IOptional<DAST._IExpression> _3655_high = _3654___mcc_h209;
        DAST._IOptional<DAST._IExpression> _3656_low = _3653___mcc_h208;
        bool _3657_isArray = _3652___mcc_h207;
        DAST._IExpression _3658_on = _3651___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3659_onString;
          bool _3660_onOwned;
          bool _3661_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3662_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1685;
          bool _out1686;
          bool _out1687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1688;
          DCOMP.COMP.GenExpr(_3658_on, selfIdent, @params, false, out _out1685, out _out1686, out _out1687, out _out1688);
          _3659_onString = _out1685;
          _3660_onOwned = _out1686;
          _3661_onErased = _out1687;
          _3662_recIdents = _out1688;
          readIdents = _3662_recIdents;
          s = _3659_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3663_lowString;
          _3663_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source168 = _3656_low;
          if (_source168.is_Some) {
            DAST._IExpression _3664___mcc_h1195 = _source168.dtor_Some_a0;
            DAST._IExpression _3665_l = _3664___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3666_lString;
              bool _3667___v84;
              bool _3668_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3669_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1689;
              bool _out1690;
              bool _out1691;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
              DCOMP.COMP.GenExpr(_3665_l, selfIdent, @params, true, out _out1689, out _out1690, out _out1691, out _out1692);
              _3666_lString = _out1689;
              _3667___v84 = _out1690;
              _3668_lErased = _out1691;
              _3669_recIdentsL = _out1692;
              if (!(_3668_lErased)) {
                _3666_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3666_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3663_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3666_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3669_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3670_highString;
          _3670_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source169 = _3655_high;
          if (_source169.is_Some) {
            DAST._IExpression _3671___mcc_h1196 = _source169.dtor_Some_a0;
            DAST._IExpression _3672_h = _3671___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3673_hString;
              bool _3674___v85;
              bool _3675_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3676_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1693;
              bool _out1694;
              bool _out1695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1696;
              DCOMP.COMP.GenExpr(_3672_h, selfIdent, @params, true, out _out1693, out _out1694, out _out1695, out _out1696);
              _3673_hString = _out1693;
              _3674___v85 = _out1694;
              _3675_hErased = _out1695;
              _3676_recIdentsH = _out1696;
              if (!(_3675_hErased)) {
                _3673_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3673_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3670_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3673_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3676_recIdentsH);
            }
          } else {
          }
          if (_3657_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source170) => {
            if (_source170.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3677___mcc_h1197 = _source170.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3678_l = _3677___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3678_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3663_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source171) => {
            if (_source171.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3679___mcc_h1198 = _source171.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3680_h = _3679___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3680_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3670_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3661_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source107.is_TupleSelect) {
        DAST._IExpression _3681___mcc_h210 = _source107.dtor_expr;
        BigInteger _3682___mcc_h211 = _source107.dtor_index;
        BigInteger _3683_idx = _3682___mcc_h211;
        DAST._IExpression _3684_on = _3681___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3685_onString;
          bool _3686___v86;
          bool _3687_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3688_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1697;
          bool _out1698;
          bool _out1699;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1700;
          DCOMP.COMP.GenExpr(_3684_on, selfIdent, @params, false, out _out1697, out _out1698, out _out1699, out _out1700);
          _3685_onString = _out1697;
          _3686___v86 = _out1698;
          _3687_tupErased = _out1699;
          _3688_recIdents = _out1700;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3685_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_3683_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3687_tupErased;
          readIdents = _3688_recIdents;
        }
      } else if (_source107.is_Call) {
        DAST._IExpression _3689___mcc_h212 = _source107.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3690___mcc_h213 = _source107.dtor_name;
        Dafny.ISequence<DAST._IType> _3691___mcc_h214 = _source107.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3692___mcc_h215 = _source107.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3693_args = _3692___mcc_h215;
        Dafny.ISequence<DAST._IType> _3694_typeArgs = _3691___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3695_name = _3690___mcc_h213;
        DAST._IExpression _3696_on = _3689___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3697_typeArgString;
          _3697_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3694_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3698_typeI;
            _3698_typeI = BigInteger.Zero;
            _3697_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3698_typeI) < (new BigInteger((_3694_typeArgs).Count))) {
              if ((_3698_typeI).Sign == 1) {
                _3697_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3697_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3699_typeString;
              Dafny.ISequence<Dafny.Rune> _out1701;
              _out1701 = DCOMP.COMP.GenType((_3694_typeArgs).Select(_3698_typeI), false, false);
              _3699_typeString = _out1701;
              _3697_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3697_typeArgString, _3699_typeString);
              _3698_typeI = (_3698_typeI) + (BigInteger.One);
            }
            _3697_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3697_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3700_argString;
          _3700_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3701_i;
          _3701_i = BigInteger.Zero;
          while ((_3701_i) < (new BigInteger((_3693_args).Count))) {
            if ((_3701_i).Sign == 1) {
              _3700_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3700_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3702_argExpr;
            bool _3703_isOwned;
            bool _3704_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3705_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1702;
            bool _out1703;
            bool _out1704;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
            DCOMP.COMP.GenExpr((_3693_args).Select(_3701_i), selfIdent, @params, false, out _out1702, out _out1703, out _out1704, out _out1705);
            _3702_argExpr = _out1702;
            _3703_isOwned = _out1703;
            _3704_argErased = _out1704;
            _3705_argIdents = _out1705;
            if (_3703_isOwned) {
              _3702_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3702_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3704_argErased)) {
              _3702_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3702_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3702_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3702_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3700_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3700_argString, _3702_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3705_argIdents);
            _3701_i = (_3701_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3706_enclosingString;
          bool _3707___v87;
          bool _3708___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3709_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1706;
          bool _out1707;
          bool _out1708;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1709;
          DCOMP.COMP.GenExpr(_3696_on, selfIdent, @params, false, out _out1706, out _out1707, out _out1708, out _out1709);
          _3706_enclosingString = _out1706;
          _3707___v87 = _out1707;
          _3708___v88 = _out1708;
          _3709_recIdents = _out1709;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3709_recIdents);
          DAST._IExpression _source172 = _3696_on;
          if (_source172.is_Literal) {
            DAST._ILiteral _3710___mcc_h1199 = _source172.dtor_Literal_a0;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3711___mcc_h1201 = _source172.dtor_Ident_a0;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3712___mcc_h1203 = _source172.dtor_Companion_a0;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3706_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3713___mcc_h1205 = _source172.dtor_Tuple_a0;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3714___mcc_h1207 = _source172.dtor_path;
            Dafny.ISequence<DAST._IType> _3715___mcc_h1208 = _source172.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3716___mcc_h1209 = _source172.dtor_args;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3717___mcc_h1213 = _source172.dtor_dims;
            DAST._IType _3718___mcc_h1214 = _source172.dtor_typ;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3719___mcc_h1217 = _source172.dtor_path;
            Dafny.ISequence<DAST._IType> _3720___mcc_h1218 = _source172.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3721___mcc_h1219 = _source172.dtor_variant;
            bool _3722___mcc_h1220 = _source172.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3723___mcc_h1221 = _source172.dtor_contents;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Convert) {
            DAST._IExpression _3724___mcc_h1227 = _source172.dtor_value;
            DAST._IType _3725___mcc_h1228 = _source172.dtor_from;
            DAST._IType _3726___mcc_h1229 = _source172.dtor_typ;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_SeqConstruct) {
            DAST._IExpression _3727___mcc_h1233 = _source172.dtor_length;
            DAST._IExpression _3728___mcc_h1234 = _source172.dtor_elem;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3729___mcc_h1237 = _source172.dtor_elements;
            DAST._IType _3730___mcc_h1238 = _source172.dtor_typ;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3731___mcc_h1241 = _source172.dtor_elements;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3732___mcc_h1243 = _source172.dtor_mapElems;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_This) {
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Ite) {
            DAST._IExpression _3733___mcc_h1245 = _source172.dtor_cond;
            DAST._IExpression _3734___mcc_h1246 = _source172.dtor_thn;
            DAST._IExpression _3735___mcc_h1247 = _source172.dtor_els;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_UnOp) {
            DAST._IUnaryOp _3736___mcc_h1251 = _source172.dtor_unOp;
            DAST._IExpression _3737___mcc_h1252 = _source172.dtor_expr;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_BinOp) {
            DAST._IBinOp _3738___mcc_h1255 = _source172.dtor_op;
            DAST._IExpression _3739___mcc_h1256 = _source172.dtor_left;
            DAST._IExpression _3740___mcc_h1257 = _source172.dtor_right;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_ArrayLen) {
            DAST._IExpression _3741___mcc_h1261 = _source172.dtor_expr;
            BigInteger _3742___mcc_h1262 = _source172.dtor_dim;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Select) {
            DAST._IExpression _3743___mcc_h1265 = _source172.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3744___mcc_h1266 = _source172.dtor_field;
            bool _3745___mcc_h1267 = _source172.dtor_isConstant;
            bool _3746___mcc_h1268 = _source172.dtor_onDatatype;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_SelectFn) {
            DAST._IExpression _3747___mcc_h1273 = _source172.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3748___mcc_h1274 = _source172.dtor_field;
            bool _3749___mcc_h1275 = _source172.dtor_onDatatype;
            bool _3750___mcc_h1276 = _source172.dtor_isStatic;
            BigInteger _3751___mcc_h1277 = _source172.dtor_arity;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Index) {
            DAST._IExpression _3752___mcc_h1283 = _source172.dtor_expr;
            DAST._ICollKind _3753___mcc_h1284 = _source172.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3754___mcc_h1285 = _source172.dtor_indices;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_IndexRange) {
            DAST._IExpression _3755___mcc_h1289 = _source172.dtor_expr;
            bool _3756___mcc_h1290 = _source172.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3757___mcc_h1291 = _source172.dtor_low;
            DAST._IOptional<DAST._IExpression> _3758___mcc_h1292 = _source172.dtor_high;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_TupleSelect) {
            DAST._IExpression _3759___mcc_h1297 = _source172.dtor_expr;
            BigInteger _3760___mcc_h1298 = _source172.dtor_index;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Call) {
            DAST._IExpression _3761___mcc_h1301 = _source172.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3762___mcc_h1302 = _source172.dtor_name;
            Dafny.ISequence<DAST._IType> _3763___mcc_h1303 = _source172.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3764___mcc_h1304 = _source172.dtor_args;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3765___mcc_h1309 = _source172.dtor_params;
            DAST._IType _3766___mcc_h1310 = _source172.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3767___mcc_h1311 = _source172.dtor_body;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3768___mcc_h1315 = _source172.dtor_values;
            DAST._IType _3769___mcc_h1316 = _source172.dtor_retType;
            DAST._IExpression _3770___mcc_h1317 = _source172.dtor_expr;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3771___mcc_h1321 = _source172.dtor_name;
            DAST._IType _3772___mcc_h1322 = _source172.dtor_typ;
            DAST._IExpression _3773___mcc_h1323 = _source172.dtor_value;
            DAST._IExpression _3774___mcc_h1324 = _source172.dtor_iifeBody;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_Apply) {
            DAST._IExpression _3775___mcc_h1329 = _source172.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3776___mcc_h1330 = _source172.dtor_args;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_TypeTest) {
            DAST._IExpression _3777___mcc_h1333 = _source172.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3778___mcc_h1334 = _source172.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3779___mcc_h1335 = _source172.dtor_variant;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_InitializationValue) {
            DAST._IType _3780___mcc_h1339 = _source172.dtor_typ;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_BoolBoundedPool) {
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_SetBoundedPool) {
            DAST._IExpression _3781___mcc_h1341 = _source172.dtor_of;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else if (_source172.is_SeqBoundedPool) {
            DAST._IExpression _3782___mcc_h1343 = _source172.dtor_of;
            bool _3783___mcc_h1344 = _source172.dtor_includeDuplicates;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          } else {
            DAST._IExpression _3784___mcc_h1347 = _source172.dtor_lo;
            DAST._IExpression _3785___mcc_h1348 = _source172.dtor_hi;
            {
              _3706_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3706_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3695_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3706_enclosingString, _3697_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3700_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source107.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3786___mcc_h216 = _source107.dtor_params;
        DAST._IType _3787___mcc_h217 = _source107.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3788___mcc_h218 = _source107.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3789_body = _3788___mcc_h218;
        DAST._IType _3790_retType = _3787___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3791_params = _3786___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3792_paramNames;
          _3792_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3793_i;
          _3793_i = BigInteger.Zero;
          while ((_3793_i) < (new BigInteger((_3791_params).Count))) {
            _3792_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3792_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3791_params).Select(_3793_i)).dtor_name));
            _3793_i = (_3793_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3794_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3795_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1710;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1711;
          DCOMP.COMP.GenStmts(_3789_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3792_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1710, out _out1711);
          _3794_recursiveGen = _out1710;
          _3795_recIdents = _out1711;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3796_allReadCloned;
          _3796_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3795_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3797_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_3795_recIdents).Elements) {
              _3797_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_3795_recIdents).Contains(_3797_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3797_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3796_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3796_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3792_paramNames).Contains(_3797_next))) {
              _3796_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3796_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3797_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3797_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3797_next));
            }
            _3795_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3795_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3797_next));
          }
          Dafny.ISequence<Dafny.Rune> _3798_paramsString;
          _3798_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3799_paramTypes;
          _3799_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3793_i = BigInteger.Zero;
          while ((_3793_i) < (new BigInteger((_3791_params).Count))) {
            if ((_3793_i).Sign == 1) {
              _3798_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3798_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3799_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3799_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3800_typStr;
            Dafny.ISequence<Dafny.Rune> _out1712;
            _out1712 = DCOMP.COMP.GenType(((_3791_params).Select(_3793_i)).dtor_typ, false, true);
            _3800_typStr = _out1712;
            _3798_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3798_paramsString, ((_3791_params).Select(_3793_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3800_typStr);
            _3799_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3799_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3800_typStr);
            _3793_i = (_3793_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3801_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1713;
          _out1713 = DCOMP.COMP.GenType(_3790_retType, false, true);
          _3801_retTypeGen = _out1713;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3799_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3801_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3796_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3798_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3801_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3794_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source107.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3802___mcc_h219 = _source107.dtor_values;
        DAST._IType _3803___mcc_h220 = _source107.dtor_retType;
        DAST._IExpression _3804___mcc_h221 = _source107.dtor_expr;
        DAST._IExpression _3805_expr = _3804___mcc_h221;
        DAST._IType _3806_retType = _3803___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3807_values = _3802___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3808_paramNames;
          _3808_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3809_paramNamesSet;
          _3809_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3810_i;
          _3810_i = BigInteger.Zero;
          while ((_3810_i) < (new BigInteger((_3807_values).Count))) {
            _3808_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3808_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3807_values).Select(_3810_i)).dtor__0).dtor_name));
            _3809_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3809_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3807_values).Select(_3810_i)).dtor__0).dtor_name));
            _3810_i = (_3810_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3811_paramsString;
          _3811_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3810_i = BigInteger.Zero;
          while ((_3810_i) < (new BigInteger((_3807_values).Count))) {
            if ((_3810_i).Sign == 1) {
              _3811_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3811_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3812_typStr;
            Dafny.ISequence<Dafny.Rune> _out1714;
            _out1714 = DCOMP.COMP.GenType((((_3807_values).Select(_3810_i)).dtor__0).dtor_typ, false, true);
            _3812_typStr = _out1714;
            Dafny.ISequence<Dafny.Rune> _3813_valueGen;
            bool _3814___v91;
            bool _3815_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3816_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1715;
            bool _out1716;
            bool _out1717;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
            DCOMP.COMP.GenExpr(((_3807_values).Select(_3810_i)).dtor__1, selfIdent, @params, true, out _out1715, out _out1716, out _out1717, out _out1718);
            _3813_valueGen = _out1715;
            _3814___v91 = _out1716;
            _3815_valueErased = _out1717;
            _3816_recIdents = _out1718;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3807_values).Select(_3810_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3812_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3816_recIdents);
            if (_3815_valueErased) {
              _3813_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3813_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3813_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3810_i = (_3810_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3817_recGen;
          bool _3818_recOwned;
          bool _3819_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3820_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1719;
          bool _out1720;
          bool _out1721;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1722;
          DCOMP.COMP.GenExpr(_3805_expr, selfIdent, _3808_paramNames, mustOwn, out _out1719, out _out1720, out _out1721, out _out1722);
          _3817_recGen = _out1719;
          _3818_recOwned = _out1720;
          _3819_recErased = _out1721;
          _3820_recIdents = _out1722;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3820_recIdents, _3809_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3817_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3818_recOwned;
          isErased = _3819_recErased;
        }
      } else if (_source107.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3821___mcc_h222 = _source107.dtor_name;
        DAST._IType _3822___mcc_h223 = _source107.dtor_typ;
        DAST._IExpression _3823___mcc_h224 = _source107.dtor_value;
        DAST._IExpression _3824___mcc_h225 = _source107.dtor_iifeBody;
        DAST._IExpression _3825_iifeBody = _3824___mcc_h225;
        DAST._IExpression _3826_value = _3823___mcc_h224;
        DAST._IType _3827_tpe = _3822___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3828_name = _3821___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3829_valueGen;
          bool _3830___v92;
          bool _3831_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3832_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1723;
          bool _out1724;
          bool _out1725;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1726;
          DCOMP.COMP.GenExpr(_3826_value, selfIdent, @params, true, out _out1723, out _out1724, out _out1725, out _out1726);
          _3829_valueGen = _out1723;
          _3830___v92 = _out1724;
          _3831_valueErased = _out1725;
          _3832_recIdents = _out1726;
          if (_3831_valueErased) {
            _3829_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3829_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3832_recIdents;
          Dafny.ISequence<Dafny.Rune> _3833_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1727;
          _out1727 = DCOMP.COMP.GenType(_3827_tpe, false, true);
          _3833_valueTypeGen = _out1727;
          Dafny.ISequence<Dafny.Rune> _3834_bodyGen;
          bool _3835___v93;
          bool _3836_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3837_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1728;
          bool _out1729;
          bool _out1730;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1731;
          DCOMP.COMP.GenExpr(_3825_iifeBody, selfIdent, @params, true, out _out1728, out _out1729, out _out1730, out _out1731);
          _3834_bodyGen = _out1728;
          _3835___v93 = _out1729;
          _3836_bodyErased = _out1730;
          _3837_bodyIdents = _out1731;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3837_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3828_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3828_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3833_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3829_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3834_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3836_bodyErased;
        }
      } else if (_source107.is_Apply) {
        DAST._IExpression _3838___mcc_h226 = _source107.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3839___mcc_h227 = _source107.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3840_args = _3839___mcc_h227;
        DAST._IExpression _3841_func = _3838___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3842_funcString;
          bool _3843___v94;
          bool _3844_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3845_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1732;
          bool _out1733;
          bool _out1734;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1735;
          DCOMP.COMP.GenExpr(_3841_func, selfIdent, @params, false, out _out1732, out _out1733, out _out1734, out _out1735);
          _3842_funcString = _out1732;
          _3843___v94 = _out1733;
          _3844_funcErased = _out1734;
          _3845_recIdents = _out1735;
          readIdents = _3845_recIdents;
          Dafny.ISequence<Dafny.Rune> _3846_argString;
          _3846_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3847_i;
          _3847_i = BigInteger.Zero;
          while ((_3847_i) < (new BigInteger((_3840_args).Count))) {
            if ((_3847_i).Sign == 1) {
              _3846_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3846_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3848_argExpr;
            bool _3849_isOwned;
            bool _3850_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3851_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1736;
            bool _out1737;
            bool _out1738;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
            DCOMP.COMP.GenExpr((_3840_args).Select(_3847_i), selfIdent, @params, false, out _out1736, out _out1737, out _out1738, out _out1739);
            _3848_argExpr = _out1736;
            _3849_isOwned = _out1737;
            _3850_argErased = _out1738;
            _3851_argIdents = _out1739;
            if (_3849_isOwned) {
              _3848_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3848_argExpr);
            }
            _3846_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3846_argString, _3848_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3851_argIdents);
            _3847_i = (_3847_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3842_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3846_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source107.is_TypeTest) {
        DAST._IExpression _3852___mcc_h228 = _source107.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3853___mcc_h229 = _source107.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3854___mcc_h230 = _source107.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3855_variant = _3854___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3856_dType = _3853___mcc_h229;
        DAST._IExpression _3857_on = _3852___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3858_exprGen;
          bool _3859___v95;
          bool _3860_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3861_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1740;
          bool _out1741;
          bool _out1742;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1743;
          DCOMP.COMP.GenExpr(_3857_on, selfIdent, @params, false, out _out1740, out _out1741, out _out1742, out _out1743);
          _3858_exprGen = _out1740;
          _3859___v95 = _out1741;
          _3860_exprErased = _out1742;
          _3861_recIdents = _out1743;
          Dafny.ISequence<Dafny.Rune> _3862_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1744;
          _out1744 = DCOMP.COMP.GenPath(_3856_dType);
          _3862_dTypePath = _out1744;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3858_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3862_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3855_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3861_recIdents;
        }
      } else if (_source107.is_InitializationValue) {
        DAST._IType _3863___mcc_h231 = _source107.dtor_typ;
        DAST._IType _3864_typ = _3863___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3865_typString;
          Dafny.ISequence<Dafny.Rune> _out1745;
          _out1745 = DCOMP.COMP.GenType(_3864_typ, false, false);
          _3865_typString = _out1745;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3865_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source107.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source107.is_SetBoundedPool) {
        DAST._IExpression _3866___mcc_h232 = _source107.dtor_of;
        DAST._IExpression _3867_of = _3866___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3868_exprGen;
          bool _3869___v96;
          bool _3870_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3871_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1746;
          bool _out1747;
          bool _out1748;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1749;
          DCOMP.COMP.GenExpr(_3867_of, selfIdent, @params, false, out _out1746, out _out1747, out _out1748, out _out1749);
          _3868_exprGen = _out1746;
          _3869___v96 = _out1747;
          _3870_exprErased = _out1748;
          _3871_recIdents = _out1749;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3868_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3870_exprErased;
          readIdents = _3871_recIdents;
        }
      } else if (_source107.is_SeqBoundedPool) {
        DAST._IExpression _3872___mcc_h233 = _source107.dtor_of;
        bool _3873___mcc_h234 = _source107.dtor_includeDuplicates;
        bool _3874_includeDuplicates = _3873___mcc_h234;
        DAST._IExpression _3875_of = _3872___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3876_exprGen;
          bool _3877___v97;
          bool _3878_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3879_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1750;
          bool _out1751;
          bool _out1752;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1753;
          DCOMP.COMP.GenExpr(_3875_of, selfIdent, @params, false, out _out1750, out _out1751, out _out1752, out _out1753);
          _3876_exprGen = _out1750;
          _3877___v97 = _out1751;
          _3878_exprErased = _out1752;
          _3879_recIdents = _out1753;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3876_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3874_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3878_exprErased;
          readIdents = _3879_recIdents;
        }
      } else {
        DAST._IExpression _3880___mcc_h235 = _source107.dtor_lo;
        DAST._IExpression _3881___mcc_h236 = _source107.dtor_hi;
        DAST._IExpression _3882_hi = _3881___mcc_h236;
        DAST._IExpression _3883_lo = _3880___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3884_loString;
          bool _3885___v98;
          bool _3886_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3887_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1754;
          bool _out1755;
          bool _out1756;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1757;
          DCOMP.COMP.GenExpr(_3883_lo, selfIdent, @params, true, out _out1754, out _out1755, out _out1756, out _out1757);
          _3884_loString = _out1754;
          _3885___v98 = _out1755;
          _3886_loErased = _out1756;
          _3887_recIdentsLo = _out1757;
          Dafny.ISequence<Dafny.Rune> _3888_hiString;
          bool _3889___v99;
          bool _3890_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3891_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1758;
          bool _out1759;
          bool _out1760;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1761;
          DCOMP.COMP.GenExpr(_3882_hi, selfIdent, @params, true, out _out1758, out _out1759, out _out1760, out _out1761);
          _3888_hiString = _out1758;
          _3889___v99 = _out1759;
          _3890_hiErased = _out1760;
          _3891_recIdentsHi = _out1761;
          if (!(_3886_loErased)) {
            _3884_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3884_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3890_hiErased)) {
            _3888_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3888_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3884_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3888_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3887_recIdentsLo, _3891_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3892_i;
      _3892_i = BigInteger.Zero;
      while ((_3892_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3893_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1762;
        _out1762 = DCOMP.COMP.GenModule((p).Select(_3892_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3893_generated = _out1762;
        if ((_3892_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3893_generated);
        _3892_i = (_3892_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3894_i;
      _3894_i = BigInteger.Zero;
      while ((_3894_i) < (new BigInteger((fullName).Count))) {
        if ((_3894_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3894_i));
        _3894_i = (_3894_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

