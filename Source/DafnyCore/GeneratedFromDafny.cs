// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM.Utils {

  public partial class __default {
    public static DAM.Utils._IOption<__A> SeqGet<__A>(Dafny.ISequence<__A> s, BigInteger idx) {
      if ((idx) < (new BigInteger((s).Count))) {
        return DAM.Utils.Option<__A>.create_Some((s).Select(idx));
      } else {
        return DAM.Utils.Option<__A>.create_None();
      }
    }
    public static _System._ITuple2<BigInteger, Dafny.ISequence<__A>> Extend<__A>(Dafny.ISequence<__A> s, __A elt) {
      return _System.Tuple2<BigInteger, Dafny.ISequence<__A>>.create(new BigInteger((s).Count), Dafny.Sequence<__A>.Concat(s, Dafny.Sequence<__A>.FromElements(elt)));
    }
    public static DAM.Utils._IOption<__V> mapGet<__K, __V>(Dafny.IMap<__K, __V> m, __K k) {
      if ((m).Contains(k)) {
        return DAM.Utils.Option<__V>.create_Some(Dafny.Map<__K, __V>.Select(m, k));
      } else {
        return DAM.Utils.Option<__V>.create_None();
      }
    }
    public static DAM.Utils._IOption<Dafny.IMap<__K, __V>> mapOption<__K, __V>(Dafny.IMap<__K, DAM.Utils._IOption<__V>> m) {
      if (Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, bool>>((m) => Dafny.Helpers.Quantifier<__K>((m).Keys.Elements, true, (((_forall_var_0) => {
        __K k = (__K)_forall_var_0;
        return !((m).Contains(k)) || ((Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).is_Some);
      }))))(m)) {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_Some(Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, Dafny.IMap<__K, __V>>>((m) => ((System.Func<Dafny.IMap<__K, __V>>)(() => {
          var _coll0 = new System.Collections.Generic.List<Dafny.Pair<__K, __V>>();
          foreach (__K _compr_0 in (m).Keys.Elements) {
            __K k = (__K)_compr_0;
            if ((m).Contains(k)) {
              _coll0.Add(new Dafny.Pair<__K, __V>(k, (Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).Extract()));
            }
          }
          return Dafny.Map<__K, __V>.FromCollection(_coll0);
        }))())(m));
      } else {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_None();
      }
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM.Utils._IOption<__B> PropagateFailure<__B>();
    A Extract();
    A GetOr(A @default);
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM.Utils._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM.Utils._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM.Utils._IOption<A>>(DAM.Utils.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM.Utils._IOption<__B> PropagateFailure<__B>() {
      return DAM.Utils.Option<__B>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
    public A GetOr(A @default) {
      DAM.Utils._IOption<A> _source0 = this;
      if (_source0.is_None) {
        return @default;
      } else {
        A __mcc_h0 = _source0.dtor_value;
        A v = __mcc_h0;
        return v;
      }
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Utils
namespace DAM.Syntax {

  public partial class __default {
    public static DAM.Syntax._IStmt Let(DAM.Syntax._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IPos ty, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Call(DAM.Syntax.Stmt.create_Func(var__, ty, rhs), lhs);
    }
    public static DAM.Syntax._INeg Command() {
      return DAM.Syntax.Neg.create_Value(DAM.Syntax.Pos.create_Unit());
    }
    public static DAM.Syntax._IStmt Then(DAM.Syntax._IStmt lhs, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Bind(lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), rhs);
    }
    public static DAM.Syntax._IStmt Skip() {
      return DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Unit());
    }
    public static DAM.Syntax._IStmt While(DAM.Syntax._IStmt guard, DAM.Syntax._IStmt body, DAM.Syntax._IStmt next) {
      return DAM.Syntax.Stmt.create_Rec(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), DAM.Syntax.__default.Command(), DAM.Syntax.Stmt.create_Bind(guard, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), DAM.Syntax.__default.Then(body, DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while")))), next)));
    }
  }

  public interface _IPos {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    DAM.Syntax._INeg dtor_neg { get; }
    DAM.Syntax._IPos dtor_ref { get; }
    DAM.Syntax._INeg dtor_start { get; }
    _IPos DowncastClone();
  }
  public abstract class Pos : _IPos {
    public Pos() {
    }
    private static readonly DAM.Syntax._IPos theDefault = create_Unit();
    public static DAM.Syntax._IPos Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IPos> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IPos>(DAM.Syntax.Pos.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IPos> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPos create_Unit() {
      return new Pos_Unit();
    }
    public static _IPos create_Bool() {
      return new Pos_Bool();
    }
    public static _IPos create_Int() {
      return new Pos_Int();
    }
    public static _IPos create_Thunk(DAM.Syntax._INeg neg) {
      return new Pos_Thunk(neg);
    }
    public static _IPos create_Ref(DAM.Syntax._IPos @ref) {
      return new Pos_Ref(@ref);
    }
    public static _IPos create_Stack(DAM.Syntax._INeg start) {
      return new Pos_Stack(start);
    }
    public bool is_Unit { get { return this is Pos_Unit; } }
    public bool is_Bool { get { return this is Pos_Bool; } }
    public bool is_Int { get { return this is Pos_Int; } }
    public bool is_Thunk { get { return this is Pos_Thunk; } }
    public bool is_Ref { get { return this is Pos_Ref; } }
    public bool is_Stack { get { return this is Pos_Stack; } }
    public DAM.Syntax._INeg dtor_neg {
      get {
        var d = this;
        return ((Pos_Thunk)d)._neg;
      }
    }
    public DAM.Syntax._IPos dtor_ref {
      get {
        var d = this;
        return ((Pos_Ref)d)._ref;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Pos_Stack)d)._start;
      }
    }
    public abstract _IPos DowncastClone();
  }
  public class Pos_Unit : Pos {
    public Pos_Unit() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Unit";
      return s;
    }
  }
  public class Pos_Bool : Pos {
    public Pos_Bool() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Bool";
      return s;
    }
  }
  public class Pos_Int : Pos {
    public Pos_Int() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Int";
      return s;
    }
  }
  public class Pos_Thunk : Pos {
    public readonly DAM.Syntax._INeg _neg;
    public Pos_Thunk(DAM.Syntax._INeg neg) : base() {
      this._neg = neg;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Thunk(_neg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Thunk;
      return oth != null && object.Equals(this._neg, oth._neg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._neg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._neg);
      s += ")";
      return s;
    }
  }
  public class Pos_Ref : Pos {
    public readonly DAM.Syntax._IPos _ref;
    public Pos_Ref(DAM.Syntax._IPos @ref) : base() {
      this._ref = @ref;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Ref(_ref);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Ref;
      return oth != null && object.Equals(this._ref, oth._ref);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ")";
      return s;
    }
  }
  public class Pos_Stack : Pos {
    public readonly DAM.Syntax._INeg _start;
    public Pos_Stack(DAM.Syntax._INeg start) : base() {
      this._start = start;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Stack(_start);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Stack;
      return oth != null && object.Equals(this._start, oth._start);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ")";
      return s;
    }
  }

  public interface _INeg {
    bool is_Value { get; }
    bool is_Function { get; }
    bool is_Record { get; }
    DAM.Syntax._IPos dtor_pos { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._INeg dtor_cod { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields { get; }
    _INeg DowncastClone();
  }
  public abstract class Neg : _INeg {
    public Neg() {
    }
    private static readonly DAM.Syntax._INeg theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>.Empty);
    public static DAM.Syntax._INeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._INeg> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._INeg>(DAM.Syntax.Neg.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._INeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INeg create_Value(DAM.Syntax._IPos pos) {
      return new Neg_Value(pos);
    }
    public static _INeg create_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) {
      return new Neg_Function(dom, cod);
    }
    public static _INeg create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) {
      return new Neg_Record(fields);
    }
    public bool is_Value { get { return this is Neg_Value; } }
    public bool is_Function { get { return this is Neg_Function; } }
    public bool is_Record { get { return this is Neg_Record; } }
    public DAM.Syntax._IPos dtor_pos {
      get {
        var d = this;
        return ((Neg_Value)d)._pos;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Neg_Function)d)._dom;
      }
    }
    public DAM.Syntax._INeg dtor_cod {
      get {
        var d = this;
        return ((Neg_Function)d)._cod;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields {
      get {
        var d = this;
        return ((Neg_Record)d)._fields;
      }
    }
    public abstract _INeg DowncastClone();
  }
  public class Neg_Value : Neg {
    public readonly DAM.Syntax._IPos _pos;
    public Neg_Value(DAM.Syntax._IPos pos) : base() {
      this._pos = pos;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Value(_pos);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Value;
      return oth != null && object.Equals(this._pos, oth._pos);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pos));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._pos);
      s += ")";
      return s;
    }
  }
  public class Neg_Function : Neg {
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._INeg _cod;
    public Neg_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) : base() {
      this._dom = dom;
      this._cod = cod;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Function(_dom, _cod);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Function;
      return oth != null && object.Equals(this._dom, oth._dom) && object.Equals(this._cod, oth._cod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Function";
      s += "(";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cod);
      s += ")";
      return s;
    }
  }
  public class Neg_Record : Neg {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _fields;
    public Neg_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) : base() {
      this._fields = fields;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    DAM.Syntax._IStmt dtor_Thunk_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM.Syntax._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM.Syntax._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IExpr>(DAM.Syntax.Expr.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Unit() {
      return new Expr_Unit();
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_Thunk(DAM.Syntax._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Unit { get { return this is Expr_Unit; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Unit : Expr {
    public Expr_Unit() : base() {
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Unit";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM.Syntax._IStmt _a0;
    public Expr_Thunk(DAM.Syntax._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Record { get; }
    bool is_Select { get; }
    bool is_Force { get; }
    bool is_New { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    bool is_Print { get; }
    bool is_Rec { get; }
    bool is_LetCS { get; }
    bool is_Throw { get; }
    DAM.Syntax._IExpr dtor_Pure_a0 { get; }
    DAM.Syntax._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM.Syntax._IStmt dtor_rhs { get; }
    DAM.Syntax._IExpr dtor_guard { get; }
    DAM.Syntax._IStmt dtor_then__ { get; }
    DAM.Syntax._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._IStmt dtor_body { get; }
    DAM.Syntax._IStmt dtor_func { get; }
    DAM.Syntax._IExpr dtor_arg { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields { get; }
    DAM.Syntax._IStmt dtor_record { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    DAM.Syntax._IExpr dtor_Force_a0 { get; }
    DAM.Syntax._IExpr dtor_init { get; }
    DAM.Syntax._IStmt dtor_next { get; }
    DAM.Syntax._IExpr dtor_ref { get; }
    DAM.Syntax._IExpr dtor_lvalue { get; }
    DAM.Syntax._IExpr dtor_rvalue { get; }
    DAM.Syntax._IExpr dtor_Print_a0 { get; }
    DAM.Syntax._INeg dtor_fix { get; }
    DAM.Syntax._IExpr dtor_stack { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM.Syntax._IStmt theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Empty);
    public static DAM.Syntax._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IStmt>(DAM.Syntax.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM.Syntax._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) {
      return new Stmt_Func(bound, dom, body);
    }
    public static _IStmt create_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) {
      return new Stmt_Record(fields);
    }
    public static _IStmt create_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) {
      return new Stmt_Select(record, field);
    }
    public static _IStmt create_Force(DAM.Syntax._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_New(init, var__, next);
    }
    public static _IStmt create_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_Read(@ref, var__, next);
    }
    public static _IStmt create_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) {
      return new Stmt_Write(lvalue, rvalue, next);
    }
    public static _IStmt create_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) {
      return new Stmt_Print(_a0, next);
    }
    public static _IStmt create_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) {
      return new Stmt_Rec(bound, fix, body);
    }
    public static _IStmt create_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IStmt body) {
      return new Stmt_LetCS(bound, body);
    }
    public static _IStmt create_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._IStmt next) {
      return new Stmt_Throw(stack, next);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Record { get { return this is Stmt_Record; } }
    public bool is_Select { get { return this is Stmt_Select; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_New { get { return this is Stmt_New; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public bool is_Print { get { return this is Stmt_Print; } }
    public bool is_Rec { get { return this is Stmt_Rec; } }
    public bool is_LetCS { get { return this is Stmt_LetCS; } }
    public bool is_Throw { get { return this is Stmt_Throw; } }
    public DAM.Syntax._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        if (d is Stmt_New) { return ((Stmt_New)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM.Syntax._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM.Syntax._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM.Syntax._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM.Syntax._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._bound; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._bound; }
        return ((Stmt_LetCS)d)._bound;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Stmt_Func)d)._dom;
      }
    }
    public DAM.Syntax._IStmt dtor_body {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._body; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._body; }
        return ((Stmt_LetCS)d)._body;
      }
    }
    public DAM.Syntax._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM.Syntax._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields {
      get {
        var d = this;
        return ((Stmt_Record)d)._fields;
      }
    }
    public DAM.Syntax._IStmt dtor_record {
      get {
        var d = this;
        return ((Stmt_Select)d)._record;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Stmt_Select)d)._field;
      }
    }
    public DAM.Syntax._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_init {
      get {
        var d = this;
        return ((Stmt_New)d)._init;
      }
    }
    public DAM.Syntax._IStmt dtor_next {
      get {
        var d = this;
        if (d is Stmt_New) { return ((Stmt_New)d)._next; }
        if (d is Stmt_Read) { return ((Stmt_Read)d)._next; }
        if (d is Stmt_Write) { return ((Stmt_Write)d)._next; }
        if (d is Stmt_Print) { return ((Stmt_Print)d)._next; }
        return ((Stmt_Throw)d)._next;
      }
    }
    public DAM.Syntax._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM.Syntax._IExpr dtor_lvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._lvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_rvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._rvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_Print_a0 {
      get {
        var d = this;
        return ((Stmt_Print)d)._a0;
      }
    }
    public DAM.Syntax._INeg dtor_fix {
      get {
        var d = this;
        return ((Stmt_Rec)d)._fix;
      }
    }
    public DAM.Syntax._IExpr dtor_stack {
      get {
        var d = this;
        return ((Stmt_Throw)d)._stack;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Pure(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM.Syntax._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _rhs;
    public Stmt_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM.Syntax._IExpr _guard;
    public readonly DAM.Syntax._IStmt _then__;
    public readonly DAM.Syntax._IStmt _else__;
    public Stmt_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._dom = dom;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _dom, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._dom, oth._dom) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM.Syntax._IStmt _func;
    public readonly DAM.Syntax._IExpr _arg;
    public Stmt_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Record : Stmt {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _fields;
    public Stmt_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) : base() {
      this._fields = fields;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Stmt_Select : Stmt {
    public readonly DAM.Syntax._IStmt _record;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Stmt_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._record = record;
      this._field = field;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Select(_record, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Select;
      return oth != null && object.Equals(this._record, oth._record) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._record));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._record);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Force(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_New : Stmt {
    public readonly DAM.Syntax._IExpr _init;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._init = init;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_New(_init, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_New;
      return oth != null && object.Equals(this._init, oth._init) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._init));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._init);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM.Syntax._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM.Syntax._IExpr _lvalue;
    public readonly DAM.Syntax._IExpr _rvalue;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) : base() {
      this._lvalue = lvalue;
      this._rvalue = rvalue;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_lvalue, _rvalue, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Write;
      return oth != null && object.Equals(this._lvalue, oth._lvalue) && object.Equals(this._rvalue, oth._rvalue) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._lvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Print : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) : base() {
      this._a0 = _a0;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Print(_a0, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Print;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Rec : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _fix;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._fix = fix;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Rec(_bound, _fix, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Rec;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._fix, oth._fix) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fix));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Rec";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fix);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_LetCS : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_LetCS(_bound, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_LetCS;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.LetCS";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Throw : Stmt {
    public readonly DAM.Syntax._IExpr _stack;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._IStmt next) : base() {
      this._stack = stack;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Throw(_stack, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Throw;
      return oth != null && object.Equals(this._stack, oth._stack) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Throw";
      s += "(";
      s += Dafny.Helpers.ToString(this._stack);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Syntax
namespace DAM.Machine {


  public interface _IVal {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    bool dtor_answer { get; }
    BigInteger dtor_Int_a0 { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure { get; }
    BigInteger dtor_addr { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Machine._IStack dtor_stack { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM.Machine._IVal theDefault = create_Unit();
    public static DAM.Machine._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IVal> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IVal>(DAM.Machine.Val.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Unit() {
      return new Val_Unit();
    }
    public static _IVal create_Bool(bool answer) {
      return new Val_Bool(answer);
    }
    public static _IVal create_Int(BigInteger _a0) {
      return new Val_Int(_a0);
    }
    public static _IVal create_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) {
      return new Val_Thunk(closure);
    }
    public static _IVal create_Ref(BigInteger addr) {
      return new Val_Ref(addr);
    }
    public static _IVal create_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
      return new Val_Stack(start, stack);
    }
    public bool is_Unit { get { return this is Val_Unit; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool is_Stack { get { return this is Val_Stack; } }
    public bool dtor_answer {
      get {
        var d = this;
        return ((Val_Bool)d)._answer;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Val_Int)d)._a0;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure {
      get {
        var d = this;
        return ((Val_Thunk)d)._closure;
      }
    }
    public BigInteger dtor_addr {
      get {
        var d = this;
        return ((Val_Ref)d)._addr;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Val_Stack)d)._start;
      }
    }
    public DAM.Machine._IStack dtor_stack {
      get {
        var d = this;
        return ((Val_Stack)d)._stack;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Unit : Val {
    public Val_Unit() : base() {
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Unit";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _answer;
    public Val_Bool(bool answer) : base() {
      this._answer = answer;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_answer);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Bool;
      return oth != null && this._answer == oth._answer;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._answer));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._answer);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _a0;
    public Val_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _closure;
    public Val_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) : base() {
      this._closure = closure;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_closure);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Thunk;
      return oth != null && object.Equals(this._closure, oth._closure);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._closure));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._closure);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly BigInteger _addr;
    public Val_Ref(BigInteger addr) : base() {
      this._addr = addr;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_addr);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Ref;
      return oth != null && this._addr == oth._addr;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._addr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._addr);
      s += ")";
      return s;
    }
  }
  public class Val_Stack : Val {
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Machine._IStack _stack;
    public Val_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) : base() {
      this._start = start;
      this._stack = stack;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Stack(_start, _stack);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Stack;
      return oth != null && object.Equals(this._start, oth._start) && object.Equals(this._stack, oth._stack);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._stack);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM.Machine._IFrame dtor_top { get; }
    DAM.Machine._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM.Machine._IStack theDefault = create_Empty();
    public static DAM.Machine._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IStack> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IStack>(DAM.Machine.Stack.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM.Machine._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM.Machine._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop() {
      DAM.Machine._IStack _source1 = this;
      if (_source1.is_Empty) {
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_None();
      } else {
        DAM.Machine._IFrame _10___mcc_h0 = _source1.dtor_top;
        DAM.Machine._IStack _11___mcc_h1 = _source1.dtor_rest;
        DAM.Machine._IStack _12_r = _11___mcc_h1;
        DAM.Machine._IFrame _13_t = _10___mcc_h0;
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_Some(_System.Tuple2<DAM.Machine._IFrame, DAM.Machine._IStack>.create(_13_t, _12_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM.Machine._IFrame _top;
    public readonly DAM.Machine._IStack _rest;
    public Stack_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM.Machine._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()));
    public static DAM.Machine._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IFrame>(DAM.Machine.Frame.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) {
      return new Frame_Call(arg);
    }
    public static _IFrame create_Select(Dafny.ISequence<Dafny.Rune> field) {
      return new Frame_Select(field);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public bool is_Select { get { return this is Frame_Select; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Frame_Select)d)._field;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _arg;
    public Frame_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Frame_Select : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Frame_Select(Dafny.ISequence<Dafny.Rune> field) : base() {
      this._field = field;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Select(_field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Select;
      return oth != null && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Select";
      s += "(";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IOutput {
    bool is_Next { get; }
    bool is_Terminal { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Next_a0 { get; }
    _IOutput DowncastClone();
  }
  public abstract class Output : _IOutput {
    public Output() {
    }
    private static readonly DAM.Machine._IOutput theDefault = create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()));
    public static DAM.Machine._IOutput Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IOutput> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IOutput>(DAM.Machine.Output.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IOutput> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOutput create_Next(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a0) {
      return new Output_Next(_a0);
    }
    public static _IOutput create_Terminal() {
      return new Output_Terminal();
    }
    public bool is_Next { get { return this is Output_Next; } }
    public bool is_Terminal { get { return this is Output_Terminal; } }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Next_a0 {
      get {
        var d = this;
        return ((Output_Next)d)._a0;
      }
    }
    public abstract _IOutput DowncastClone();
  }
  public class Output_Next : Output {
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a0;
    public Output_Next(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Next(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Next;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Next";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Output_Terminal : Output {
    public Output_Terminal() : base() {
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Terminal();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Terminal;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Terminal";
      return s;
    }
  }
} // end of namespace DAM.Machine
namespace DAM.Statics {

  public partial class __default {
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr expr) {
      DAM.Syntax._IExpr _source2 = expr;
      if (_source2.is_Var) {
        Dafny.ISequence<Dafny.Rune> _14___mcc_h0 = _source2.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _15_x = _14___mcc_h0;
        return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(g, _15_x);
      } else if (_source2.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source2.is_Bool) {
        bool _16___mcc_h1 = _source2.dtor_Bool_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source2.is_Int) {
        BigInteger _17___mcc_h2 = _source2.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else {
        DAM.Syntax._IStmt _18___mcc_h3 = _source2.dtor_Thunk_a0;
        DAM.Syntax._IStmt _19_s = _18___mcc_h3;
        DAM.Utils._IOption<DAM.Syntax._INeg> _20_valueOrError0 = DAM.Statics.__default.SynthStmt(g, _19_s);
        if ((_20_valueOrError0).IsFailure()) {
          return (_20_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._INeg _21_t = (_20_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_21_t));
        }
      }
    }
    public static bool CheckExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr e, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthExpr(g, e), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt) {
      DAM.Syntax._IStmt _source3 = stmt;
      if (_source3.is_Pure) {
        DAM.Syntax._IExpr _22___mcc_h0 = _source3.dtor_Pure_a0;
        DAM.Syntax._IExpr _23_e = _22___mcc_h0;
        DAM.Utils._IOption<DAM.Syntax._IPos> _24_valueOrError0 = DAM.Statics.__default.SynthExpr(g, _23_e);
        if ((_24_valueOrError0).IsFailure()) {
          return (_24_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _25_t = (_24_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Value(_25_t));
        }
      } else if (_source3.is_Bind) {
        DAM.Syntax._IStmt _26___mcc_h2 = _source3.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _27___mcc_h3 = _source3.dtor_var__;
        DAM.Syntax._IStmt _28___mcc_h4 = _source3.dtor_rhs;
        DAM.Syntax._IStmt _29_rhs = _28___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _30_var__ = _27___mcc_h3;
        DAM.Syntax._IStmt _31_lhs = _26___mcc_h2;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source4 = DAM.Statics.__default.SynthStmt(g, _31_lhs);
        if (_source4.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _32___mcc_h68 = _source4.dtor_value;
          DAM.Syntax._INeg _source5 = _32___mcc_h68;
          if (_source5.is_Value) {
            DAM.Syntax._IPos _33___mcc_h70 = _source5.dtor_pos;
            DAM.Syntax._IPos _34_t = _33___mcc_h70;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _30_var__, _34_t), _29_rhs);
          } else if (_source5.is_Function) {
            DAM.Syntax._IPos _35___mcc_h72 = _source5.dtor_dom;
            DAM.Syntax._INeg _36___mcc_h73 = _source5.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _37___mcc_h76 = _source5.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Ite) {
        DAM.Syntax._IExpr _38___mcc_h8 = _source3.dtor_guard;
        DAM.Syntax._IStmt _39___mcc_h9 = _source3.dtor_then__;
        DAM.Syntax._IStmt _40___mcc_h10 = _source3.dtor_else__;
        DAM.Syntax._IStmt _41_else__ = _40___mcc_h10;
        DAM.Syntax._IStmt _42_then__ = _39___mcc_h9;
        DAM.Syntax._IExpr _43_guard = _38___mcc_h8;
        if (DAM.Statics.__default.CheckExpr(g, _43_guard, DAM.Syntax.Pos.create_Bool())) {
          DAM.Utils._IOption<DAM.Syntax._INeg> _44_valueOrError1 = DAM.Statics.__default.SynthStmt(g, _42_then__);
          if ((_44_valueOrError1).IsFailure()) {
            return (_44_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _45_t = (_44_valueOrError1).Extract();
            if (DAM.Statics.__default.CheckStmt(g, _41_else__, _45_t)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_45_t);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_Func) {
        Dafny.ISequence<Dafny.Rune> _46___mcc_h14 = _source3.dtor_bound;
        DAM.Syntax._IPos _47___mcc_h15 = _source3.dtor_dom;
        DAM.Syntax._IStmt _48___mcc_h16 = _source3.dtor_body;
        DAM.Syntax._IStmt _49_body = _48___mcc_h16;
        DAM.Syntax._IPos _50_dom = _47___mcc_h15;
        Dafny.ISequence<Dafny.Rune> _51_bound = _46___mcc_h14;
        DAM.Utils._IOption<DAM.Syntax._INeg> _52_valueOrError2 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _51_bound, _50_dom), _49_body);
        if ((_52_valueOrError2).IsFailure()) {
          return (_52_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _53_cod = (_52_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Function(_50_dom, _53_cod));
        }
      } else if (_source3.is_Call) {
        DAM.Syntax._IStmt _54___mcc_h20 = _source3.dtor_func;
        DAM.Syntax._IExpr _55___mcc_h21 = _source3.dtor_arg;
        DAM.Syntax._IExpr _56_arg = _55___mcc_h21;
        DAM.Syntax._IStmt _57_func = _54___mcc_h20;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source6 = DAM.Statics.__default.SynthStmt(g, _57_func);
        if (_source6.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _58___mcc_h78 = _source6.dtor_value;
          DAM.Syntax._INeg _source7 = _58___mcc_h78;
          if (_source7.is_Value) {
            DAM.Syntax._IPos _59___mcc_h80 = _source7.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source7.is_Function) {
            DAM.Syntax._IPos _60___mcc_h82 = _source7.dtor_dom;
            DAM.Syntax._INeg _61___mcc_h83 = _source7.dtor_cod;
            DAM.Syntax._INeg _62_cod = _61___mcc_h83;
            DAM.Syntax._IPos _63_dom = _60___mcc_h82;
            if (DAM.Statics.__default.CheckExpr(g, _56_arg, _63_dom)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_62_cod);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _64___mcc_h86 = _source7.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _65___mcc_h24 = _source3.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _66_fields = _65___mcc_h24;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>> _67_valueOrError4 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>>((_68_fields, _69_g) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>)(() => {
          var _coll1 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_1 in (_68_fields).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _70_lbl = (Dafny.ISequence<Dafny.Rune>)_compr_1;
            if ((_68_fields).Contains(_70_lbl)) {
              _coll1.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>(_70_lbl, DAM.Statics.__default.SynthStmt(_69_g, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_68_fields, _70_lbl))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>.FromCollection(_coll1);
        }))())(_66_fields, g));
        if ((_67_valueOrError4).IsFailure()) {
          return (_67_valueOrError4).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _71_fields = (_67_valueOrError4).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Record(_71_fields));
        }
      } else if (_source3.is_Select) {
        DAM.Syntax._IStmt _72___mcc_h26 = _source3.dtor_record;
        Dafny.ISequence<Dafny.Rune> _73___mcc_h27 = _source3.dtor_field;
        Dafny.ISequence<Dafny.Rune> _74_lbl = _73___mcc_h27;
        DAM.Syntax._IStmt _75_record = _72___mcc_h26;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source8 = DAM.Statics.__default.SynthStmt(g, _75_record);
        if (_source8.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _76___mcc_h88 = _source8.dtor_value;
          DAM.Syntax._INeg _source9 = _76___mcc_h88;
          if (_source9.is_Value) {
            DAM.Syntax._IPos _77___mcc_h90 = _source9.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source9.is_Function) {
            DAM.Syntax._IPos _78___mcc_h92 = _source9.dtor_dom;
            DAM.Syntax._INeg _79___mcc_h93 = _source9.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _80___mcc_h96 = _source9.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _81_fields = _80___mcc_h96;
            return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_81_fields, _74_lbl);
          }
        }
      } else if (_source3.is_Force) {
        DAM.Syntax._IExpr _82___mcc_h30 = _source3.dtor_Force_a0;
        DAM.Syntax._IExpr _83_expr = _82___mcc_h30;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source10 = DAM.Statics.__default.SynthExpr(g, _83_expr);
        if (_source10.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _84___mcc_h98 = _source10.dtor_value;
          DAM.Syntax._IPos _source11 = _84___mcc_h98;
          if (_source11.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Thunk) {
            DAM.Syntax._INeg _85___mcc_h100 = _source11.dtor_neg;
            DAM.Syntax._INeg _86_t = _85___mcc_h100;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_86_t);
          } else if (_source11.is_Ref) {
            DAM.Syntax._IPos _87___mcc_h102 = _source11.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _88___mcc_h104 = _source11.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_New) {
        DAM.Syntax._IExpr _89___mcc_h32 = _source3.dtor_init;
        Dafny.ISequence<Dafny.Rune> _90___mcc_h33 = _source3.dtor_var__;
        DAM.Syntax._IStmt _91___mcc_h34 = _source3.dtor_next;
        DAM.Syntax._IStmt _92_next = _91___mcc_h34;
        Dafny.ISequence<Dafny.Rune> _93_var__ = _90___mcc_h33;
        DAM.Syntax._IExpr _94_init = _89___mcc_h32;
        DAM.Utils._IOption<DAM.Syntax._IPos> _95_valueOrError5 = DAM.Statics.__default.SynthExpr(g, _94_init);
        if ((_95_valueOrError5).IsFailure()) {
          return (_95_valueOrError5).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _96_t = (_95_valueOrError5).Extract();
          return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _93_var__, DAM.Syntax.Pos.create_Ref(_96_t)), _92_next);
        }
      } else if (_source3.is_Read) {
        DAM.Syntax._IExpr _97___mcc_h38 = _source3.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _98___mcc_h39 = _source3.dtor_var__;
        DAM.Syntax._IStmt _99___mcc_h40 = _source3.dtor_next;
        DAM.Syntax._IStmt _100_next = _99___mcc_h40;
        Dafny.ISequence<Dafny.Rune> _101_var__ = _98___mcc_h39;
        DAM.Syntax._IExpr _102_ref = _97___mcc_h38;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source12 = DAM.Statics.__default.SynthExpr(g, _102_ref);
        if (_source12.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _103___mcc_h106 = _source12.dtor_value;
          DAM.Syntax._IPos _source13 = _103___mcc_h106;
          if (_source13.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Thunk) {
            DAM.Syntax._INeg _104___mcc_h108 = _source13.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Ref) {
            DAM.Syntax._IPos _105___mcc_h110 = _source13.dtor_ref;
            DAM.Syntax._IPos _106_t = _105___mcc_h110;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _101_var__, _106_t), _100_next);
          } else {
            DAM.Syntax._INeg _107___mcc_h112 = _source13.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Write) {
        DAM.Syntax._IExpr _108___mcc_h44 = _source3.dtor_lvalue;
        DAM.Syntax._IExpr _109___mcc_h45 = _source3.dtor_rvalue;
        DAM.Syntax._IStmt _110___mcc_h46 = _source3.dtor_next;
        DAM.Syntax._IStmt _111_next = _110___mcc_h46;
        DAM.Syntax._IExpr _112_rhs = _109___mcc_h45;
        DAM.Syntax._IExpr _113_lhs = _108___mcc_h44;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source14 = DAM.Statics.__default.SynthExpr(g, _113_lhs);
        if (_source14.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _114___mcc_h114 = _source14.dtor_value;
          DAM.Syntax._IPos _source15 = _114___mcc_h114;
          if (_source15.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Thunk) {
            DAM.Syntax._INeg _115___mcc_h116 = _source15.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Ref) {
            DAM.Syntax._IPos _116___mcc_h118 = _source15.dtor_ref;
            DAM.Syntax._IPos _117_t = _116___mcc_h118;
            if (DAM.Statics.__default.CheckExpr(g, _112_rhs, _117_t)) {
              return DAM.Statics.__default.SynthStmt(g, _111_next);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            DAM.Syntax._INeg _118___mcc_h120 = _source15.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Print) {
        DAM.Syntax._IExpr _119___mcc_h50 = _source3.dtor_Print_a0;
        DAM.Syntax._IStmt _120___mcc_h51 = _source3.dtor_next;
        DAM.Syntax._IStmt _121_next = _120___mcc_h51;
        DAM.Syntax._IExpr _122_expr = _119___mcc_h50;
        DAM.Utils._IOption<DAM.Syntax._IPos> _123_valueOrError3 = DAM.Statics.__default.SynthExpr(g, _122_expr);
        if ((_123_valueOrError3).IsFailure()) {
          return (_123_valueOrError3).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _124___v14 = (_123_valueOrError3).Extract();
          return DAM.Statics.__default.SynthStmt(g, _121_next);
        }
      } else if (_source3.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _125___mcc_h54 = _source3.dtor_bound;
        DAM.Syntax._INeg _126___mcc_h55 = _source3.dtor_fix;
        DAM.Syntax._IStmt _127___mcc_h56 = _source3.dtor_body;
        DAM.Syntax._IStmt _128_body = _127___mcc_h56;
        DAM.Syntax._INeg _129_fix = _126___mcc_h55;
        Dafny.ISequence<Dafny.Rune> _130_self = _125___mcc_h54;
        if (DAM.Statics.__default.CheckStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _130_self, DAM.Syntax.Pos.create_Thunk(_129_fix)), _128_body, _129_fix)) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_129_fix);
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _131___mcc_h60 = _source3.dtor_bound;
        DAM.Syntax._IStmt _132___mcc_h61 = _source3.dtor_body;
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
      } else {
        DAM.Syntax._IExpr _133___mcc_h64 = _source3.dtor_stack;
        DAM.Syntax._IStmt _134___mcc_h65 = _source3.dtor_next;
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
      }
    }
    public static bool CheckStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt, DAM.Syntax._INeg t) {
      return object.Equals(DAM.Statics.__default.SynthStmt(g, stmt), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(t));
    }
    public static DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> SynthEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env) {
      return DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_135_env, _136_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
        var _coll2 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
        foreach (Dafny.ISequence<Dafny.Rune> _compr_2 in (_135_env).Keys.Elements) {
          Dafny.ISequence<Dafny.Rune> _137_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_2;
          if ((_135_env).Contains(_137_var__)) {
            _coll2.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_137_var__, DAM.Statics.__default.SynthVal(_136_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_135_env, _137_var__))));
          }
        }
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll2);
      }))())(env, s));
    }
    public static bool CheckEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g) {
      return object.Equals(DAM.Statics.__default.SynthEnv(s, env), DAM.Utils.Option<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>>.create_Some(g));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs0 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _138_env = _let_tmp_rhs0.dtor__0;
      DAM.Syntax._IExpr _139_expr = _let_tmp_rhs0.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _140_valueOrError0 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_141_env, _142_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
        var _coll3 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
        foreach (Dafny.ISequence<Dafny.Rune> _compr_3 in (_141_env).Keys.Elements) {
          Dafny.ISequence<Dafny.Rune> _143_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_3;
          if ((_141_env).Contains(_143_var__)) {
            _coll3.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_143_var__, DAM.Statics.__default.SynthVal(_142_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_141_env, _143_var__))));
          }
        }
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll3);
      }))())(_138_env, s));
      if ((_140_valueOrError0).IsFailure()) {
        return (_140_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _144_g = (_140_valueOrError0).Extract();
        return DAM.Statics.__default.SynthExpr(_144_g, _139_expr);
      }
    }
    public static bool CheckClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthClosedExpr(s, expr), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthClosedStmt(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> stmt) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs1 = stmt;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _145_env = _let_tmp_rhs1.dtor__0;
      DAM.Syntax._IStmt _146_stmt = _let_tmp_rhs1.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _147_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _145_env);
      if ((_147_valueOrError0).IsFailure()) {
        return (_147_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _148_g = (_147_valueOrError0).Extract();
        return DAM.Statics.__default.SynthStmt(_148_g, _146_stmt);
      }
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
    TAIL_CALL_START:;
      DAM.Machine._IStack _source16 = stack;
      if (_source16.is_Empty) {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(start);
      } else {
        DAM.Machine._IFrame _149___mcc_h0 = _source16.dtor_top;
        DAM.Machine._IStack _150___mcc_h1 = _source16.dtor_rest;
        DAM.Machine._IFrame _source17 = _149___mcc_h0;
        if (_source17.is_Bind) {
          Dafny.ISequence<Dafny.Rune> _151___mcc_h2 = _source17.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _152___mcc_h3 = _source17.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source18 = _152___mcc_h3;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _153___mcc_h4 = _source18.dtor__0;
          DAM.Syntax._IStmt _154___mcc_h5 = _source18.dtor__1;
          DAM.Machine._IStack _155_stack = _150___mcc_h1;
          DAM.Syntax._IStmt _156_rhs = _154___mcc_h5;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _157_env = _153___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _158_var__ = _151___mcc_h2;
          DAM.Syntax._INeg _source19 = start;
          if (_source19.is_Value) {
            DAM.Syntax._IPos _159___mcc_h8 = _source19.dtor_pos;
            DAM.Syntax._IPos _160_t = _159___mcc_h8;
            DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _161_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _157_env);
            if ((_161_valueOrError0).IsFailure()) {
              return (_161_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _162_g = (_161_valueOrError0).Extract();
              DAM.Utils._IOption<DAM.Syntax._INeg> _163_valueOrError1 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_162_g, _158_var__, _160_t), _156_rhs);
              if ((_163_valueOrError1).IsFailure()) {
                return (_163_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
              } else {
                DAM.Syntax._INeg _164_start = (_163_valueOrError1).Extract();
                Dafny.ISequence<DAM.Syntax._IPos> _in0 = s;
                DAM.Syntax._INeg _in1 = _164_start;
                DAM.Machine._IStack _in2 = _155_stack;
                s = _in0;
                start = _in1;
                stack = _in2;
                goto TAIL_CALL_START;
              }
            }
          } else if (_source19.is_Function) {
            DAM.Syntax._IPos _165___mcc_h10 = _source19.dtor_dom;
            DAM.Syntax._INeg _166___mcc_h11 = _source19.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _167___mcc_h14 = _source19.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else if (_source17.is_Call) {
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _168___mcc_h6 = _source17.dtor_arg;
          DAM.Machine._IStack _169_stack = _150___mcc_h1;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _170_arg = _168___mcc_h6;
          DAM.Syntax._INeg _source20 = start;
          if (_source20.is_Value) {
            DAM.Syntax._IPos _171___mcc_h16 = _source20.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source20.is_Function) {
            DAM.Syntax._IPos _172___mcc_h18 = _source20.dtor_dom;
            DAM.Syntax._INeg _173___mcc_h19 = _source20.dtor_cod;
            DAM.Syntax._INeg _174_cod = _173___mcc_h19;
            DAM.Syntax._IPos _175_dom = _172___mcc_h18;
            if (DAM.Statics.__default.CheckClosedExpr(s, _170_arg, _175_dom)) {
              Dafny.ISequence<DAM.Syntax._IPos> _in3 = s;
              DAM.Syntax._INeg _in4 = _174_cod;
              DAM.Machine._IStack _in5 = _169_stack;
              s = _in3;
              start = _in4;
              stack = _in5;
              goto TAIL_CALL_START;
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _176___mcc_h22 = _source20.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _177___mcc_h7 = _source17.dtor_field;
          DAM.Machine._IStack _178_stack = _150___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _179_lbl = _177___mcc_h7;
          DAM.Syntax._INeg _source21 = start;
          if (_source21.is_Value) {
            DAM.Syntax._IPos _180___mcc_h24 = _source21.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source21.is_Function) {
            DAM.Syntax._IPos _181___mcc_h26 = _source21.dtor_dom;
            DAM.Syntax._INeg _182___mcc_h27 = _source21.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _183___mcc_h30 = _source21.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _184_fields = _183___mcc_h30;
            DAM.Utils._IOption<DAM.Syntax._INeg> _185_valueOrError2 = DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_184_fields, _179_lbl);
            if ((_185_valueOrError2).IsFailure()) {
              return (_185_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              DAM.Syntax._INeg _186_start = (_185_valueOrError2).Extract();
              Dafny.ISequence<DAM.Syntax._IPos> _in6 = s;
              DAM.Syntax._INeg _in7 = _186_start;
              DAM.Machine._IStack _in8 = _178_stack;
              s = _in6;
              start = _in7;
              stack = _in8;
              goto TAIL_CALL_START;
            }
          }
        }
      }
    }
    public static bool CheckStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthStack(s, start, stack), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val) {
      DAM.Machine._IVal _source22 = val;
      if (_source22.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source22.is_Bool) {
        bool _187___mcc_h0 = _source22.dtor_answer;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source22.is_Int) {
        BigInteger _188___mcc_h1 = _source22.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source22.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _189___mcc_h2 = _source22.dtor_closure;
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source23 = _189___mcc_h2;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _190___mcc_h3 = _source23.dtor__0;
        DAM.Syntax._IStmt _191___mcc_h4 = _source23.dtor__1;
        DAM.Syntax._IStmt _192_stmt = _191___mcc_h4;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _193_env = _190___mcc_h3;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _194_valueOrError0 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_195_env, _196_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
          var _coll4 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_4 in (_195_env).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _197_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_4;
            if ((_195_env).Contains(_197_var__)) {
              _coll4.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_197_var__, DAM.Statics.__default.SynthVal(_196_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_195_env, _197_var__))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll4);
        }))())(_193_env, s));
        if ((_194_valueOrError0).IsFailure()) {
          return (_194_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _198_g = (_194_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _199_valueOrError1 = DAM.Statics.__default.SynthStmt(_198_g, _192_stmt);
          if ((_199_valueOrError1).IsFailure()) {
            return (_199_valueOrError1).PropagateFailure<DAM.Syntax._IPos>();
          } else {
            DAM.Syntax._INeg _200_t = (_199_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_200_t));
          }
        }
      } else if (_source22.is_Ref) {
        BigInteger _201___mcc_h5 = _source22.dtor_addr;
        BigInteger _202_addr = _201___mcc_h5;
        DAM.Utils._IOption<DAM.Syntax._IPos> _203_valueOrError2 = DAM.Utils.__default.SeqGet<DAM.Syntax._IPos>(s, _202_addr);
        if ((_203_valueOrError2).IsFailure()) {
          return (_203_valueOrError2).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._IPos _204_t = (_203_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Ref(_204_t));
        }
      } else {
        DAM.Syntax._INeg _205___mcc_h6 = _source22.dtor_start;
        DAM.Machine._IStack _206___mcc_h7 = _source22.dtor_stack;
        DAM.Machine._IStack _207_stack = _206___mcc_h7;
        DAM.Syntax._INeg _208_start = _205___mcc_h6;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
      }
    }
    public static bool CheckVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthVal(s, val), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static bool CheckStore(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.ISequence<DAM.Machine._IVal> store) {
      return ((new BigInteger((store).Count)) == (new BigInteger((s).Count))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, bool>>((_209_store, _210_s) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((_209_store).Count)), true, (((_forall_var_1) => {
        BigInteger _211_addr = (BigInteger)_forall_var_1;
        return !(((_211_addr).Sign != -1) && ((_211_addr) < (new BigInteger((_209_store).Count)))) || (DAM.Statics.__default.CheckVal(_210_s, (_209_store).Select(_211_addr), (_210_s).Select(_211_addr)));
      }))))(store, s));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs2 = input;
      Dafny.ISequence<DAM.Machine._IVal> _212_sto = _let_tmp_rhs2.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _213_stmt = _let_tmp_rhs2.dtor__1;
      DAM.Machine._IStack _214_stack = _let_tmp_rhs2.dtor__2;
      if (DAM.Statics.__default.CheckStore(s, _212_sto)) {
        DAM.Utils._IOption<DAM.Syntax._INeg> _215_valueOrError0 = DAM.Statics.__default.SynthClosedStmt(s, _213_stmt);
        if ((_215_valueOrError0).IsFailure()) {
          return (_215_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _216_start = (_215_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _217_valueOrError1 = DAM.Statics.__default.SynthStack(s, _216_start, _214_stack);
          if ((_217_valueOrError1).IsFailure()) {
            return (_217_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _218_end = (_217_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_218_end);
          }
        }
      } else {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
      }
    }
    public static bool CheckInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthInput(s, input), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static bool CheckOutput(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IOutput @out, DAM.Syntax._INeg end) {
      DAM.Machine._IOutput _source24 = @out;
      if (_source24.is_Next) {
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _219___mcc_h0 = _source24.dtor_Next_a0;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _220_next = _219___mcc_h0;
        return DAM.Statics.__default.CheckInput(s, _220_next, end);
      } else {
        return true;
      }
    }
  }
} // end of namespace DAM.Statics
namespace DAM.Dynamics {

  public partial class __default {
    public static DAM.Machine._IVal Eval(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs3 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _221_env = _let_tmp_rhs3.dtor__0;
      DAM.Syntax._IExpr _222_expr = _let_tmp_rhs3.dtor__1;
      DAM.Syntax._IExpr _source25 = _222_expr;
      if (_source25.is_Var) {
        Dafny.ISequence<Dafny.Rune> _223___mcc_h0 = _source25.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _224_x = _223___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_221_env, _224_x);
      } else if (_source25.is_Unit) {
        return DAM.Machine.Val.create_Unit();
      } else if (_source25.is_Bool) {
        bool _225___mcc_h1 = _source25.dtor_Bool_a0;
        bool _226_b = _225___mcc_h1;
        return DAM.Machine.Val.create_Bool(_226_b);
      } else if (_source25.is_Int) {
        BigInteger _227___mcc_h2 = _source25.dtor_Int_a0;
        BigInteger _228_i = _227___mcc_h2;
        return DAM.Machine.Val.create_Int(_228_i);
      } else {
        DAM.Syntax._IStmt _229___mcc_h3 = _source25.dtor_Thunk_a0;
        DAM.Syntax._IStmt _230_stmt = _229___mcc_h3;
        return DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_221_env, _230_stmt));
      }
    }
    public static DAM.Machine._IOutput Step(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs4 = input;
      Dafny.ISequence<DAM.Machine._IVal> _231_store = _let_tmp_rhs4.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs5 = _let_tmp_rhs4.dtor__1;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _232_env = _let_tmp_rhs5.dtor__0;
      DAM.Syntax._IStmt _233_stmt = _let_tmp_rhs5.dtor__1;
      DAM.Machine._IStack _234_stack = _let_tmp_rhs4.dtor__2;
      DAM.Syntax._IStmt _source26 = _233_stmt;
      if (_source26.is_Pure) {
        DAM.Syntax._IExpr _235___mcc_h0 = _source26.dtor_Pure_a0;
        DAM.Syntax._IExpr _236_expr = _235___mcc_h0;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source27 = (_234_stack).Pop();
        if (_source27.is_None) {
          DAM.Machine._IOutput _237_output = DAM.Machine.Output.create_Terminal();
          return _237_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _238___mcc_h34 = _source27.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source28 = _238___mcc_h34;
          DAM.Machine._IFrame _239___mcc_h35 = _source28.dtor__0;
          DAM.Machine._IStack _240___mcc_h36 = _source28.dtor__1;
          DAM.Machine._IFrame _source29 = _239___mcc_h35;
          Dafny.ISequence<Dafny.Rune> _241___mcc_h37 = _source29.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _242___mcc_h38 = _source29.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source30 = _242___mcc_h38;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _243___mcc_h39 = _source30.dtor__0;
          DAM.Syntax._IStmt _244___mcc_h40 = _source30.dtor__1;
          DAM.Machine._IStack _245_stack = _240___mcc_h36;
          DAM.Syntax._IStmt _246_rhs = _244___mcc_h40;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _247_env_k = _243___mcc_h39;
          Dafny.ISequence<Dafny.Rune> _248_var__ = _241___mcc_h37;
          DAM.Machine._IVal _249_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_232_env, _236_expr));
          DAM.Machine._IOutput _250_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_247_env_k, _248_var__, _249_val), _246_rhs), _245_stack));
          return _250_output;
        }
      } else if (_source26.is_Bind) {
        DAM.Syntax._IStmt _251___mcc_h1 = _source26.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _252___mcc_h2 = _source26.dtor_var__;
        DAM.Syntax._IStmt _253___mcc_h3 = _source26.dtor_rhs;
        DAM.Syntax._IStmt _254_rhs = _253___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _255_var__ = _252___mcc_h2;
        DAM.Syntax._IStmt _256_lhs = _251___mcc_h1;
        DAM.Machine._IOutput _257_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, _256_lhs), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Bind(_255_var__, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, _254_rhs)), _234_stack)));
        return _257_output;
      } else if (_source26.is_Ite) {
        DAM.Syntax._IExpr _258___mcc_h4 = _source26.dtor_guard;
        DAM.Syntax._IStmt _259___mcc_h5 = _source26.dtor_then__;
        DAM.Syntax._IStmt _260___mcc_h6 = _source26.dtor_else__;
        DAM.Syntax._IStmt _261_else__ = _260___mcc_h6;
        DAM.Syntax._IStmt _262_then__ = _259___mcc_h5;
        DAM.Syntax._IExpr _263_guard = _258___mcc_h4;
        DAM.Machine._IVal _264_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_232_env, _263_guard));
        DAM.Machine._IOutput _265_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, (((_264_val).dtor_answer) ? (_262_then__) : (_261_else__))), _234_stack));
        return _265_output;
      } else if (_source26.is_Func) {
        Dafny.ISequence<Dafny.Rune> _266___mcc_h7 = _source26.dtor_bound;
        DAM.Syntax._IPos _267___mcc_h8 = _source26.dtor_dom;
        DAM.Syntax._IStmt _268___mcc_h9 = _source26.dtor_body;
        DAM.Syntax._IStmt _269_body = _268___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _270_bound = _266___mcc_h7;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source31 = (_234_stack).Pop();
        if (_source31.is_None) {
          DAM.Machine._IOutput _271_output = DAM.Machine.Output.create_Terminal();
          return _271_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _272___mcc_h43 = _source31.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source32 = _272___mcc_h43;
          DAM.Machine._IFrame _273___mcc_h44 = _source32.dtor__0;
          DAM.Machine._IStack _274___mcc_h45 = _source32.dtor__1;
          DAM.Machine._IFrame _source33 = _273___mcc_h44;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _275___mcc_h48 = _source33.dtor_arg;
          DAM.Machine._IStack _276_stack = _274___mcc_h45;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _277_arg = _275___mcc_h48;
          DAM.Machine._IVal _278_val = DAM.Dynamics.__default.Eval(_277_arg);
          DAM.Machine._IOutput _279_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_232_env, _270_bound, _278_val), _269_body), _276_stack));
          return _279_output;
        }
      } else if (_source26.is_Call) {
        DAM.Syntax._IStmt _280___mcc_h10 = _source26.dtor_func;
        DAM.Syntax._IExpr _281___mcc_h11 = _source26.dtor_arg;
        DAM.Syntax._IExpr _282_arg = _281___mcc_h11;
        DAM.Syntax._IStmt _283_func = _280___mcc_h10;
        DAM.Machine._IOutput _284_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, _283_func), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Call(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_232_env, _282_arg)), _234_stack)));
        return _284_output;
      } else if (_source26.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _285___mcc_h12 = _source26.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _286_fields = _285___mcc_h12;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source34 = (_234_stack).Pop();
        if (_source34.is_None) {
          DAM.Machine._IOutput _287_output = DAM.Machine.Output.create_Terminal();
          return _287_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _288___mcc_h50 = _source34.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source35 = _288___mcc_h50;
          DAM.Machine._IFrame _289___mcc_h51 = _source35.dtor__0;
          DAM.Machine._IStack _290___mcc_h52 = _source35.dtor__1;
          DAM.Machine._IFrame _source36 = _289___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _291___mcc_h56 = _source36.dtor_field;
          DAM.Machine._IStack _292_stack = _290___mcc_h52;
          Dafny.ISequence<Dafny.Rune> _293_lbl = _291___mcc_h56;
          DAM.Machine._IOutput _294_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_286_fields, _293_lbl)), _292_stack));
          return _294_output;
        }
      } else if (_source26.is_Select) {
        DAM.Syntax._IStmt _295___mcc_h13 = _source26.dtor_record;
        Dafny.ISequence<Dafny.Rune> _296___mcc_h14 = _source26.dtor_field;
        Dafny.ISequence<Dafny.Rune> _297_field = _296___mcc_h14;
        DAM.Syntax._IStmt _298_record = _295___mcc_h13;
        DAM.Machine._IOutput _299_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, _298_record), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Select(_297_field), _234_stack)));
        return _299_output;
      } else if (_source26.is_Force) {
        DAM.Syntax._IExpr _300___mcc_h15 = _source26.dtor_Force_a0;
        DAM.Syntax._IExpr _301_thunk = _300___mcc_h15;
        DAM.Machine._IVal _302_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_232_env, _301_thunk));
        DAM.Machine._IOutput _303_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, (_302_val).dtor_closure, _234_stack));
        return _303_output;
      } else if (_source26.is_New) {
        DAM.Syntax._IExpr _304___mcc_h16 = _source26.dtor_init;
        Dafny.ISequence<Dafny.Rune> _305___mcc_h17 = _source26.dtor_var__;
        DAM.Syntax._IStmt _306___mcc_h18 = _source26.dtor_next;
        DAM.Syntax._IStmt _307_next = _306___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _308_var__ = _305___mcc_h17;
        DAM.Syntax._IExpr _309_init = _304___mcc_h16;
        DAM.Machine._IVal _310_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_232_env, _309_init));
        _System._ITuple2<BigInteger, Dafny.ISequence<DAM.Machine._IVal>> _let_tmp_rhs6 = DAM.Utils.__default.Extend<DAM.Machine._IVal>(_231_store, _310_val);
        BigInteger _311_addr = _let_tmp_rhs6.dtor__0;
        Dafny.ISequence<DAM.Machine._IVal> _312_store_k = _let_tmp_rhs6.dtor__1;
        DAM.Machine._IOutput _313_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_312_store_k, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_232_env, _308_var__, DAM.Machine.Val.create_Ref(_311_addr)), _307_next), _234_stack));
        return _313_output;
      } else if (_source26.is_Read) {
        DAM.Syntax._IExpr _314___mcc_h19 = _source26.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _315___mcc_h20 = _source26.dtor_var__;
        DAM.Syntax._IStmt _316___mcc_h21 = _source26.dtor_next;
        DAM.Syntax._IStmt _317_next = _316___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _318_var__ = _315___mcc_h20;
        DAM.Syntax._IExpr _319_ref = _314___mcc_h19;
        DAM.Machine._IVal _320_val = (_231_store).Select((DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_232_env, _319_ref))).dtor_addr);
        DAM.Machine._IOutput _321_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_232_env, _318_var__, _320_val), _317_next), _234_stack));
        return _321_output;
      } else if (_source26.is_Write) {
        DAM.Syntax._IExpr _322___mcc_h22 = _source26.dtor_lvalue;
        DAM.Syntax._IExpr _323___mcc_h23 = _source26.dtor_rvalue;
        DAM.Syntax._IStmt _324___mcc_h24 = _source26.dtor_next;
        DAM.Syntax._IStmt _325_next = _324___mcc_h24;
        DAM.Syntax._IExpr _326_rhs = _323___mcc_h23;
        DAM.Syntax._IExpr _327_lhs = _322___mcc_h22;
        BigInteger _328_lval = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_232_env, _327_lhs))).dtor_addr;
        DAM.Machine._IVal _329_rval = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_232_env, _326_rhs));
        DAM.Machine._IOutput _330_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.Update(_231_store, _328_lval, _329_rval), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, _325_next), _234_stack));
        return _330_output;
      } else if (_source26.is_Print) {
        DAM.Syntax._IExpr _331___mcc_h25 = _source26.dtor_Print_a0;
        DAM.Syntax._IStmt _332___mcc_h26 = _source26.dtor_next;
        DAM.Syntax._IStmt _333_next = _332___mcc_h26;
        DAM.Syntax._IExpr _334_expr = _331___mcc_h25;
        DAM.Machine._IVal _335_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_232_env, _334_expr));
        DAM.Machine._IOutput _336_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, _333_next), _234_stack));
        return _336_output;
      } else {
        Dafny.ISequence<Dafny.Rune> _337___mcc_h27 = _source26.dtor_bound;
        DAM.Syntax._INeg _338___mcc_h28 = _source26.dtor_fix;
        DAM.Syntax._IStmt _339___mcc_h29 = _source26.dtor_body;
        DAM.Syntax._IStmt _340_body = _339___mcc_h29;
        DAM.Syntax._INeg _341_fix = _338___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _342_self = _337___mcc_h27;
        DAM.Machine._IVal _343_val = DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, _233_stmt));
        DAM.Machine._IOutput _344_output = DAM.Machine.Output.create_Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_231_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_232_env, _342_self, _343_val), _340_body), _234_stack));
        return _344_output;
      }
    }
    public static DAM.Dynamics._ITrace Run(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      DAM.Machine._IOutput _source37 = DAM.Dynamics.__default.Step(input);
      if (_source37.is_Next) {
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _345___mcc_h0 = _source37.dtor_Next_a0;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _346_next = _345___mcc_h0;
        return new DAM.Dynamics.Trace__Lazy(() => { return new DAM.Dynamics.Trace_Stepping(_346_next, DAM.Dynamics.__default.Run(_346_next)); });
      } else {
        return DAM.Dynamics.Trace.create_Done();
      }
    }
    public static _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> Initial(DAM.Syntax._IStmt stmt) {
      return _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.FromElements(), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.FromElements(), stmt), DAM.Machine.Stack.create_Empty());
    }
    public static DAM.Utils._IOption<DAM.Dynamics._ITrace> RunChecked(DAM.Syntax._IStmt stmt) {
      DAM.Utils._IOption<DAM.Syntax._INeg> _347_valueOrError0 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), stmt);
      if ((_347_valueOrError0).IsFailure()) {
        return (_347_valueOrError0).PropagateFailure<DAM.Dynamics._ITrace>();
      } else {
        DAM.Syntax._INeg _348_end = (_347_valueOrError0).Extract();
        return DAM.Utils.Option<DAM.Dynamics._ITrace>.create_Some(DAM.Dynamics.__default.Run(DAM.Dynamics.__default.Initial(stmt)));
      }
    }
  }

  public interface _ITrace {
    _ITrace _Get();
    bool is_Stepping { get; }
    bool is_Done { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a0 { get; }
    DAM.Dynamics._ITrace dtor_Stepping_a1 { get; }
    _ITrace DowncastClone();
  }
  public abstract class Trace : _ITrace {
    public Trace() {
    }
    private static readonly DAM.Dynamics._ITrace theDefault = new DAM.Dynamics.Trace__Lazy(() => { return create_Stepping(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()), DAM.Dynamics.Trace.Default()); });
    public static DAM.Dynamics._ITrace Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TYPE = new Dafny.TypeDescriptor<DAM.Dynamics._ITrace>(DAM.Dynamics.Trace.Default());
    public static Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TypeDescriptor() {
      return _TYPE;
    }
    public abstract _ITrace _Get();
    public static _ITrace create_Stepping(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a0, DAM.Dynamics._ITrace _a1) {
      return new Trace_Stepping(_a0, _a1);
    }
    public static _ITrace create_Done() {
      return new Trace_Done();
    }
    public bool is_Stepping { get { return this is Trace_Stepping; } }
    public bool is_Done { get { return this is Trace_Done; } }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a0 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a0;
      }
    }
    public DAM.Dynamics._ITrace dtor_Stepping_a1 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a1;
      }
    }
    public abstract _ITrace DowncastClone();
  }
  public class Trace__Lazy : Trace {
    public delegate _ITrace Computer();
    Computer c;
    _ITrace d;
    public Trace__Lazy(Computer c) : base() {
      this.c = c;
    }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new DAM.Dynamics.Trace__Lazy(() => _Get().DowncastClone());
    }
    public override _ITrace _Get() { if (c != null) { d = c(); c = null; } return d; }
    public override string ToString() { return _Get().ToString(); }
  }
  public class Trace_Stepping : Trace {
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a0;
    public readonly DAM.Dynamics._ITrace _a1;
    public Trace_Stepping(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a0, DAM.Dynamics._ITrace _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Stepping(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Stepping;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Stepping";
    }
  }
  public class Trace_Done : Trace {
    public Trace_Done() : base() {
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Done();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Done;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Done";
    }
  }
} // end of namespace DAM.Dynamics


namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _349_i = BigInteger.Zero; _349_i < _hi0; _349_i++) {
        Dafny.ISequence<Dafny.Rune> _350_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_349_i));
        _350_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _350_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _351_i = BigInteger.Zero; _351_i < _hi1; _351_i++) {
        DAST._IModuleItem _source38 = ((mod).dtor_body).Select(_351_i);
        if (_source38.is_Module) {
          DAST._IModule _352___mcc_h0 = _source38.dtor_Module_a0;
          DAST._IModule _353_m = _352___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _354_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_353_m);
          _354_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _354_s_k);
        } else if (_source38.is_Class) {
          DAST._IClass _355___mcc_h1 = _source38.dtor_Class_a0;
          DAST._IClass _356_c = _355___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _357_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_356_c);
          _357_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _357_s_k);
        } else if (_source38.is_Trait) {
          DAST._ITrait _358___mcc_h2 = _source38.dtor_Trait_a0;
          DAST._ITrait _359_c = _358___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source38.is_Newtype) {
          DAST._INewtype _360___mcc_h3 = _source38.dtor_Newtype_a0;
          DAST._INewtype _361_n = _360___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _362___mcc_h4 = _source38.dtor_Datatype_a0;
          DAST._IDatatype _363_d = _362___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _364_i = BigInteger.Zero; _364_i < _hi2; _364_i++) {
        DAST._IMethod _source39 = ((c).dtor_body).Select(_364_i);
        DAST._IMethod _365___mcc_h0 = _source39;
        DAST._IMethod _366_m = _365___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _367_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_366_m);
        _367_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _367_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _368_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _368_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _368_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _368_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _368_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _369_i = BigInteger.Zero; _369_i < _hi3; _369_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_369_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _370_i = BigInteger.Zero; _370_i < _hi4; _370_i++) {
        Dafny.ISequence<Dafny.Rune> _371_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_370_i));
        _371_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _371_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source40 = st;
      if (_source40.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _372___mcc_h0 = _source40.dtor_name;
        DAST._IType _373___mcc_h1 = _source40.dtor_typ;
        DAST._IOptional<DAST._IExpression> _374___mcc_h2 = _source40.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_Assign) {
        DAST._IAssignLhs _375___mcc_h6 = _source40.dtor_lhs;
        DAST._IExpression _376___mcc_h7 = _source40.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_If) {
        DAST._IExpression _377___mcc_h10 = _source40.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _378___mcc_h11 = _source40.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _379___mcc_h12 = _source40.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _380___mcc_h16 = _source40.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _381___mcc_h17 = _source40.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_While) {
        DAST._IExpression _382___mcc_h20 = _source40.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _383___mcc_h21 = _source40.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _384___mcc_h24 = _source40.dtor_boundName;
        DAST._IType _385___mcc_h25 = _source40.dtor_boundType;
        DAST._IExpression _386___mcc_h26 = _source40.dtor_over;
        Dafny.ISequence<DAST._IStatement> _387___mcc_h27 = _source40.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_Call) {
        DAST._IExpression _388___mcc_h32 = _source40.dtor_on;
        Dafny.ISequence<Dafny.Rune> _389___mcc_h33 = _source40.dtor_name;
        Dafny.ISequence<DAST._IType> _390___mcc_h34 = _source40.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _391___mcc_h35 = _source40.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _392___mcc_h36 = _source40.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_Return) {
        DAST._IExpression _393___mcc_h42 = _source40.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source40.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _394___mcc_h44 = _source40.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _395___mcc_h46 = _source40.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source40.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _396___mcc_h48 = _source40.dtor_Print_a0;
        DAST._IExpression _397_e = _396___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _398_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_397_e);
        _398_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _398_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source41 = e;
      if (_source41.is_Literal) {
        DAST._ILiteral _399___mcc_h0 = _source41.dtor_Literal_a0;
        DAST._ILiteral _400_l = _399___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_400_l);
        s = _out9;
      } else if (_source41.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _401___mcc_h2 = _source41.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _402___mcc_h4 = _source41.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _403___mcc_h6 = _source41.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _404___mcc_h8 = _source41.dtor_path;
        Dafny.ISequence<DAST._IType> _405___mcc_h9 = _source41.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _406___mcc_h10 = _source41.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _407___mcc_h14 = _source41.dtor_dims;
        DAST._IType _408___mcc_h15 = _source41.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _409___mcc_h18 = _source41.dtor_path;
        Dafny.ISequence<DAST._IType> _410___mcc_h19 = _source41.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _411___mcc_h20 = _source41.dtor_variant;
        bool _412___mcc_h21 = _source41.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _413___mcc_h22 = _source41.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_Convert) {
        DAST._IExpression _414___mcc_h28 = _source41.dtor_value;
        DAST._IType _415___mcc_h29 = _source41.dtor_from;
        DAST._IType _416___mcc_h30 = _source41.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_SeqConstruct) {
        DAST._IExpression _417___mcc_h34 = _source41.dtor_length;
        DAST._IExpression _418___mcc_h35 = _source41.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _419___mcc_h38 = _source41.dtor_elements;
        DAST._IType _420___mcc_h39 = _source41.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _421___mcc_h42 = _source41.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _422___mcc_h44 = _source41.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_Ite) {
        DAST._IExpression _423___mcc_h46 = _source41.dtor_cond;
        DAST._IExpression _424___mcc_h47 = _source41.dtor_thn;
        DAST._IExpression _425___mcc_h48 = _source41.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_UnOp) {
        DAST._IUnaryOp _426___mcc_h52 = _source41.dtor_unOp;
        DAST._IExpression _427___mcc_h53 = _source41.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_BinOp) {
        DAST._IBinOp _428___mcc_h56 = _source41.dtor_op;
        DAST._IExpression _429___mcc_h57 = _source41.dtor_left;
        DAST._IExpression _430___mcc_h58 = _source41.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_ArrayLen) {
        DAST._IExpression _431___mcc_h62 = _source41.dtor_expr;
        BigInteger _432___mcc_h63 = _source41.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_Select) {
        DAST._IExpression _433___mcc_h66 = _source41.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _434___mcc_h67 = _source41.dtor_field;
        bool _435___mcc_h68 = _source41.dtor_isConstant;
        bool _436___mcc_h69 = _source41.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_SelectFn) {
        DAST._IExpression _437___mcc_h74 = _source41.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _438___mcc_h75 = _source41.dtor_field;
        bool _439___mcc_h76 = _source41.dtor_onDatatype;
        bool _440___mcc_h77 = _source41.dtor_isStatic;
        BigInteger _441___mcc_h78 = _source41.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_Index) {
        DAST._IExpression _442___mcc_h84 = _source41.dtor_expr;
        DAST._ICollKind _443___mcc_h85 = _source41.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _444___mcc_h86 = _source41.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_IndexRange) {
        DAST._IExpression _445___mcc_h90 = _source41.dtor_expr;
        bool _446___mcc_h91 = _source41.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _447___mcc_h92 = _source41.dtor_low;
        DAST._IOptional<DAST._IExpression> _448___mcc_h93 = _source41.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_TupleSelect) {
        DAST._IExpression _449___mcc_h98 = _source41.dtor_expr;
        BigInteger _450___mcc_h99 = _source41.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_Call) {
        DAST._IExpression _451___mcc_h102 = _source41.dtor_on;
        Dafny.ISequence<Dafny.Rune> _452___mcc_h103 = _source41.dtor_name;
        Dafny.ISequence<DAST._IType> _453___mcc_h104 = _source41.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _454___mcc_h105 = _source41.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _455___mcc_h110 = _source41.dtor_params;
        DAST._IType _456___mcc_h111 = _source41.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _457___mcc_h112 = _source41.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _458___mcc_h116 = _source41.dtor_values;
        DAST._IType _459___mcc_h117 = _source41.dtor_retType;
        DAST._IExpression _460___mcc_h118 = _source41.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _461___mcc_h122 = _source41.dtor_name;
        DAST._IType _462___mcc_h123 = _source41.dtor_typ;
        DAST._IExpression _463___mcc_h124 = _source41.dtor_value;
        DAST._IExpression _464___mcc_h125 = _source41.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_Apply) {
        DAST._IExpression _465___mcc_h130 = _source41.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _466___mcc_h131 = _source41.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_TypeTest) {
        DAST._IExpression _467___mcc_h134 = _source41.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _468___mcc_h135 = _source41.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _469___mcc_h136 = _source41.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_InitializationValue) {
        DAST._IType _470___mcc_h140 = _source41.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_SetBoundedPool) {
        DAST._IExpression _471___mcc_h142 = _source41.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source41.is_SeqBoundedPool) {
        DAST._IExpression _472___mcc_h144 = _source41.dtor_of;
        bool _473___mcc_h145 = _source41.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _474___mcc_h148 = _source41.dtor_lo;
        DAST._IExpression _475___mcc_h149 = _source41.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source42 = l;
      if (_source42.is_BoolLiteral) {
        bool _476___mcc_h0 = _source42.dtor_BoolLiteral_a0;
        bool _477_b = _476___mcc_h0;
        s = ((_477_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source42.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _478___mcc_h1 = _source42.dtor_IntLiteral_a0;
        DAST._IType _479___mcc_h2 = _source42.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _480_i = _478___mcc_h1;
        s = _480_i;
      } else if (_source42.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _481___mcc_h3 = _source42.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _482___mcc_h4 = _source42.dtor_DecLiteral_a1;
        DAST._IType _483___mcc_h5 = _source42.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _484_r = _482___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _485_l = _481___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_485_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _484_r);
      } else if (_source42.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _486___mcc_h6 = _source42.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _487_s_k = _486___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _487_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source42.is_CharLiteral) {
        Dafny.Rune _488___mcc_h7 = _source42.dtor_CharLiteral_a0;
        Dafny.Rune _489_c = _488___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_489_c);
      } else {
        DAST._IType _490___mcc_h8 = _source42.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out10;
      _out10 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out10;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
    public static DAM.Syntax._IPos PolarizePos(DAST._IType t) {
      DAM.Syntax._IPos p = DAM.Syntax.Pos.Default();
      DAST._IType _source43 = t;
      if (_source43.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _491___mcc_h0 = _source43.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _492___mcc_h1 = _source43.dtor_typeArgs;
        DAST._IResolvedType _493___mcc_h2 = _source43.dtor_resolved;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source43.is_Nullable) {
        DAST._IType _494___mcc_h6 = _source43.dtor_Nullable_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source43.is_Tuple) {
        Dafny.ISequence<DAST._IType> _495___mcc_h8 = _source43.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source43.is_Array) {
        DAST._IType _496___mcc_h10 = _source43.dtor_element;
        BigInteger _497___mcc_h11 = _source43.dtor_dims;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source43.is_Seq) {
        DAST._IType _498___mcc_h14 = _source43.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source43.is_Set) {
        DAST._IType _499___mcc_h16 = _source43.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source43.is_Multiset) {
        DAST._IType _500___mcc_h18 = _source43.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source43.is_Map) {
        DAST._IType _501___mcc_h20 = _source43.dtor_key;
        DAST._IType _502___mcc_h21 = _source43.dtor_value;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source43.is_Arrow) {
        Dafny.ISequence<DAST._IType> _503___mcc_h24 = _source43.dtor_args;
        DAST._IType _504___mcc_h25 = _source43.dtor_result;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source43.is_Primitive) {
        DAST._IPrimitive _505___mcc_h28 = _source43.dtor_Primitive_a0;
        DAST._IPrimitive _source44 = _505___mcc_h28;
        if (_source44.is_Int) {
          p = DAM.Syntax.Pos.create_Int();
          return p;
        } else if (_source44.is_Real) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source44.is_String) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source44.is_Bool) {
          p = DAM.Syntax.Pos.create_Bool();
          return p;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        }
      } else if (_source43.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _506___mcc_h30 = _source43.dtor_Passthrough_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else {
        Dafny.ISequence<Dafny.Rune> _507___mcc_h32 = _source43.dtor_TypeArg_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      }
      return p;
    }
    public static DAM.Syntax._IStmt EmitModule(DAST._IModule m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _508_members;
      _508_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi5 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _509_i = BigInteger.Zero; _509_i < _hi5; _509_i++) {
        DAST._IModuleItem _source45 = ((m).dtor_body).Select(_509_i);
        if (_source45.is_Module) {
          DAST._IModule _510___mcc_h0 = _source45.dtor_Module_a0;
          DAST._IModule _511_m = _510___mcc_h0;
          DAM.Syntax._IStmt _512_mod;
          DAM.Syntax._IStmt _out11;
          _out11 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule(_511_m);
          _512_mod = _out11;
          _508_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_508_members, (_511_m).dtor_name, _512_mod);
        } else if (_source45.is_Class) {
          DAST._IClass _513___mcc_h2 = _source45.dtor_Class_a0;
          DAST._IClass _514_c = _513___mcc_h2;
          DAM.Syntax._IStmt _515_cls;
          DAM.Syntax._IStmt _out12;
          _out12 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitClass(_514_c);
          _515_cls = _out12;
          _508_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_508_members, (_514_c).dtor_name, _515_cls);
        } else if (_source45.is_Trait) {
          DAST._ITrait _516___mcc_h4 = _source45.dtor_Trait_a0;
          goto continue_0;
        } else if (_source45.is_Newtype) {
          DAST._INewtype _517___mcc_h6 = _source45.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _518___mcc_h8 = _source45.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      s = DAM.Syntax.Stmt.create_Record(_508_members);
      return s;
    }
    public static DAM.Syntax._IStmt EmitClass(DAST._IClass c) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _519_fields;
      _519_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi6 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _520_i = BigInteger.Zero; _520_i < _hi6; _520_i++) {
        DAST._IMethod _source46 = ((c).dtor_body).Select(_520_i);
        DAST._IMethod _521___mcc_h0 = _source46;
        DAST._IMethod _522_m = _521___mcc_h0;
        DAM.Syntax._IStmt _523_meth;
        DAM.Syntax._IStmt _out13;
        _out13 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitMethod(_522_m);
        _523_meth = _out13;
        _519_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_519_fields, (_522_m).dtor_name, _523_meth);
      }
      s = DAM.Syntax.Stmt.create_Record(_519_fields);
      return s;
    }
    public static DAM.Syntax._IStmt EmitMethod(DAST._IMethod m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAM.Syntax._IStmt _524_body;
      DAM.Syntax._IStmt _out14;
      _out14 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock((m).dtor_body);
      _524_body = _out14;
      s = DAM.Syntax.Stmt.create_LetCS(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), _524_body);
      DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source47 = (m).dtor_outVars;
      if (_source47.is_Some) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _525___mcc_h0 = _source47.dtor_Some_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _526_outs = _525___mcc_h0;
        {
          BigInteger _hi7 = new BigInteger((_526_outs).Count);
          for (BigInteger _527_i = BigInteger.Zero; _527_i < _hi7; _527_i++) {
            Dafny.ISequence<Dafny.Rune> _source48 = (_526_outs).Select(((new BigInteger((_526_outs).Count)) - (_527_i)) - (BigInteger.One));
            Dafny.ISequence<Dafny.Rune> _528___mcc_h1 = _source48;
            Dafny.ISequence<Dafny.Rune> _529_ret = _528___mcc_h1;
            if (!((_527_i) < (new BigInteger(((m).dtor_outTypes).Count)))) {
              throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(126,12): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
            }
            DAM.Syntax._IPos _530_cod;
            DAM.Syntax._IPos _out15;
            _out15 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(((m).dtor_outTypes).Select(_527_i));
            _530_cod = _out15;
            s = DAM.Syntax.Stmt.create_Func(_529_ret, DAM.Syntax.Pos.create_Ref(_530_cod), s);
          }
        }
      } else {
        BigInteger _hi8 = new BigInteger(((m).dtor_params).Count);
        for (BigInteger _531_i = BigInteger.Zero; _531_i < _hi8; _531_i++) {
          DAST._IFormal _source49 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_531_i)) - (BigInteger.One));
          Dafny.ISequence<Dafny.Rune> _532___mcc_h2 = _source49.dtor_name;
          DAST._IType _533___mcc_h3 = _source49.dtor_typ;
          DAST._IType _534_dom = _533___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _535_arg = _532___mcc_h2;
          DAM.Syntax._IPos _536_dom;
          DAM.Syntax._IPos _out16;
          _out16 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(_534_dom);
          _536_dom = _out16;
          s = DAM.Syntax.Stmt.create_Func(_535_arg, DAM.Syntax.Pos.create_Ref(_536_dom), s);
        }
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitExpr(DAST._IExpression e) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAST._IExpression _source50 = e;
      if (_source50.is_Literal) {
        DAST._ILiteral _537___mcc_h0 = _source50.dtor_Literal_a0;
        DAST._ILiteral _source51 = _537___mcc_h0;
        if (_source51.is_BoolLiteral) {
          bool _538___mcc_h2 = _source51.dtor_BoolLiteral_a0;
          bool _539_b = _538___mcc_h2;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(_539_b));
          return s;
        } else if (_source51.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _540___mcc_h4 = _source51.dtor_IntLiteral_a0;
          DAST._IType _541___mcc_h5 = _source51.dtor_IntLiteral_a1;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source51.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _542___mcc_h8 = _source51.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _543___mcc_h9 = _source51.dtor_DecLiteral_a1;
          DAST._IType _544___mcc_h10 = _source51.dtor_DecLiteral_a2;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source51.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _545___mcc_h14 = _source51.dtor_StringLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source51.is_CharLiteral) {
          Dafny.Rune _546___mcc_h16 = _source51.dtor_CharLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          DAST._IType _547___mcc_h18 = _source51.dtor_Null_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source50.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _548___mcc_h20 = _source50.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _549_v = _548___mcc_h20;
        s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(_549_v));
        return s;
      } else if (_source50.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _550___mcc_h22 = _source50.dtor_Companion_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _551___mcc_h24 = _source50.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _552___mcc_h26 = _source50.dtor_path;
        Dafny.ISequence<DAST._IType> _553___mcc_h27 = _source50.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _554___mcc_h28 = _source50.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _555___mcc_h32 = _source50.dtor_dims;
        DAST._IType _556___mcc_h33 = _source50.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _557___mcc_h36 = _source50.dtor_path;
        Dafny.ISequence<DAST._IType> _558___mcc_h37 = _source50.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _559___mcc_h38 = _source50.dtor_variant;
        bool _560___mcc_h39 = _source50.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _561___mcc_h40 = _source50.dtor_contents;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_Convert) {
        DAST._IExpression _562___mcc_h46 = _source50.dtor_value;
        DAST._IType _563___mcc_h47 = _source50.dtor_from;
        DAST._IType _564___mcc_h48 = _source50.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_SeqConstruct) {
        DAST._IExpression _565___mcc_h52 = _source50.dtor_length;
        DAST._IExpression _566___mcc_h53 = _source50.dtor_elem;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _567___mcc_h56 = _source50.dtor_elements;
        DAST._IType _568___mcc_h57 = _source50.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _569___mcc_h60 = _source50.dtor_elements;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _570___mcc_h62 = _source50.dtor_mapElems;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_This) {
        s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")));
        return s;
      } else if (_source50.is_Ite) {
        DAST._IExpression _571___mcc_h64 = _source50.dtor_cond;
        DAST._IExpression _572___mcc_h65 = _source50.dtor_thn;
        DAST._IExpression _573___mcc_h66 = _source50.dtor_els;
        DAST._IExpression _574_els = _573___mcc_h66;
        DAST._IExpression _575_thn = _572___mcc_h65;
        DAST._IExpression _576_cond = _571___mcc_h64;
        DAM.Syntax._IStmt _577_cond;
        DAM.Syntax._IStmt _out17;
        _out17 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_576_cond);
        _577_cond = _out17;
        DAM.Syntax._IStmt _578_thn;
        DAM.Syntax._IStmt _out18;
        _out18 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_575_thn);
        _578_thn = _out18;
        DAM.Syntax._IStmt _579_els;
        DAM.Syntax._IStmt _out19;
        _out19 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_574_els);
        _579_els = _out19;
        s = DAM.Syntax.Stmt.create_Bind(_577_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _578_thn, _579_els));
      } else if (_source50.is_UnOp) {
        DAST._IUnaryOp _580___mcc_h70 = _source50.dtor_unOp;
        DAST._IExpression _581___mcc_h71 = _source50.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_BinOp) {
        DAST._IBinOp _582___mcc_h74 = _source50.dtor_op;
        DAST._IExpression _583___mcc_h75 = _source50.dtor_left;
        DAST._IExpression _584___mcc_h76 = _source50.dtor_right;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_ArrayLen) {
        DAST._IExpression _585___mcc_h80 = _source50.dtor_expr;
        BigInteger _586___mcc_h81 = _source50.dtor_dim;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_Select) {
        DAST._IExpression _587___mcc_h84 = _source50.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _588___mcc_h85 = _source50.dtor_field;
        bool _589___mcc_h86 = _source50.dtor_isConstant;
        bool _590___mcc_h87 = _source50.dtor_onDatatype;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_SelectFn) {
        DAST._IExpression _591___mcc_h92 = _source50.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _592___mcc_h93 = _source50.dtor_field;
        bool _593___mcc_h94 = _source50.dtor_onDatatype;
        bool _594___mcc_h95 = _source50.dtor_isStatic;
        BigInteger _595___mcc_h96 = _source50.dtor_arity;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_Index) {
        DAST._IExpression _596___mcc_h102 = _source50.dtor_expr;
        DAST._ICollKind _597___mcc_h103 = _source50.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _598___mcc_h104 = _source50.dtor_indices;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_IndexRange) {
        DAST._IExpression _599___mcc_h108 = _source50.dtor_expr;
        bool _600___mcc_h109 = _source50.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _601___mcc_h110 = _source50.dtor_low;
        DAST._IOptional<DAST._IExpression> _602___mcc_h111 = _source50.dtor_high;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_TupleSelect) {
        DAST._IExpression _603___mcc_h116 = _source50.dtor_expr;
        BigInteger _604___mcc_h117 = _source50.dtor_index;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_Call) {
        DAST._IExpression _605___mcc_h120 = _source50.dtor_on;
        Dafny.ISequence<Dafny.Rune> _606___mcc_h121 = _source50.dtor_name;
        Dafny.ISequence<DAST._IType> _607___mcc_h122 = _source50.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _608___mcc_h123 = _source50.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _609___mcc_h128 = _source50.dtor_params;
        DAST._IType _610___mcc_h129 = _source50.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _611___mcc_h130 = _source50.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _612___mcc_h134 = _source50.dtor_values;
        DAST._IType _613___mcc_h135 = _source50.dtor_retType;
        DAST._IExpression _614___mcc_h136 = _source50.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _615___mcc_h140 = _source50.dtor_name;
        DAST._IType _616___mcc_h141 = _source50.dtor_typ;
        DAST._IExpression _617___mcc_h142 = _source50.dtor_value;
        DAST._IExpression _618___mcc_h143 = _source50.dtor_iifeBody;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_Apply) {
        DAST._IExpression _619___mcc_h148 = _source50.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _620___mcc_h149 = _source50.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_TypeTest) {
        DAST._IExpression _621___mcc_h152 = _source50.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _622___mcc_h153 = _source50.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _623___mcc_h154 = _source50.dtor_variant;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_InitializationValue) {
        DAST._IType _624___mcc_h158 = _source50.dtor_typ;
        DAST._IType _source52 = _624___mcc_h158;
        if (_source52.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _625___mcc_h160 = _source52.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _626___mcc_h161 = _source52.dtor_typeArgs;
          DAST._IResolvedType _627___mcc_h162 = _source52.dtor_resolved;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source52.is_Nullable) {
          DAST._IType _628___mcc_h166 = _source52.dtor_Nullable_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source52.is_Tuple) {
          Dafny.ISequence<DAST._IType> _629___mcc_h168 = _source52.dtor_Tuple_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source52.is_Array) {
          DAST._IType _630___mcc_h170 = _source52.dtor_element;
          BigInteger _631___mcc_h171 = _source52.dtor_dims;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source52.is_Seq) {
          DAST._IType _632___mcc_h174 = _source52.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source52.is_Set) {
          DAST._IType _633___mcc_h176 = _source52.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source52.is_Multiset) {
          DAST._IType _634___mcc_h178 = _source52.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source52.is_Map) {
          DAST._IType _635___mcc_h180 = _source52.dtor_key;
          DAST._IType _636___mcc_h181 = _source52.dtor_value;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source52.is_Arrow) {
          Dafny.ISequence<DAST._IType> _637___mcc_h184 = _source52.dtor_args;
          DAST._IType _638___mcc_h185 = _source52.dtor_result;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source52.is_Primitive) {
          DAST._IPrimitive _639___mcc_h188 = _source52.dtor_Primitive_a0;
          DAST._IPrimitive _source53 = _639___mcc_h188;
          if (_source53.is_Int) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
            return s;
          } else if (_source53.is_Real) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source53.is_String) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source53.is_Bool) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
            return s;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          }
        } else if (_source52.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _640___mcc_h190 = _source52.dtor_Passthrough_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _641___mcc_h192 = _source52.dtor_TypeArg_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source50.is_BoolBoundedPool) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_SetBoundedPool) {
        DAST._IExpression _642___mcc_h194 = _source50.dtor_of;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source50.is_SeqBoundedPool) {
        DAST._IExpression _643___mcc_h196 = _source50.dtor_of;
        bool _644___mcc_h197 = _source50.dtor_includeDuplicates;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else {
        DAST._IExpression _645___mcc_h200 = _source50.dtor_lo;
        DAST._IExpression _646___mcc_h201 = _source50.dtor_hi;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitBlock(Dafny.ISequence<DAST._IStatement> block) {
      DAM.Syntax._IStmt st = DAM.Syntax.Stmt.Default();
      if ((new BigInteger((block).Count)).Sign != 1) {
        st = DAM.Syntax.__default.Skip();
        return st;
      }
      Dafny.ISequence<DAST._IStatement> _647_next;
      _647_next = (block).Drop(BigInteger.One);
      DAST._IStatement _source54 = (block).Select(BigInteger.Zero);
      if (_source54.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _648___mcc_h0 = _source54.dtor_name;
        DAST._IType _649___mcc_h1 = _source54.dtor_typ;
        DAST._IOptional<DAST._IExpression> _650___mcc_h2 = _source54.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source55 = _650___mcc_h2;
        if (_source55.is_Some) {
          DAST._IExpression _651___mcc_h6 = _source55.dtor_Some_a0;
          DAST._IExpression _652_init = _651___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _653_var__ = _648___mcc_h0;
          DAM.Syntax._IStmt _654_init;
          DAM.Syntax._IStmt _out20;
          _out20 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_652_init);
          _654_init = _out20;
          DAM.Syntax._IStmt _655_next;
          DAM.Syntax._IStmt _out21;
          _out21 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_647_next);
          _655_next = _out21;
          st = DAM.Syntax.Stmt.create_Bind(_654_init, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _653_var__, _655_next));
          return st;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          st = DAM.Syntax.__default.Skip();
          return st;
        }
      } else if (_source54.is_Assign) {
        DAST._IAssignLhs _656___mcc_h8 = _source54.dtor_lhs;
        DAST._IExpression _657___mcc_h9 = _source54.dtor_value;
        DAST._IExpression _658_rhs = _657___mcc_h9;
        DAST._IAssignLhs _659_lhs = _656___mcc_h8;
        {
          DAM.Syntax._IStmt _660_rhs;
          DAM.Syntax._IStmt _out22;
          _out22 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_658_rhs);
          _660_rhs = _out22;
          DAM.Syntax._IStmt _661_next;
          DAM.Syntax._IStmt _out23;
          _out23 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_647_next);
          _661_next = _out23;
          DAST._IAssignLhs _source56 = _659_lhs;
          if (_source56.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _662___mcc_h52 = _source56.dtor_Ident_a0;
            Dafny.ISequence<Dafny.Rune> _source57 = _662___mcc_h52;
            Dafny.ISequence<Dafny.Rune> _663___mcc_h54 = _source57;
            Dafny.ISequence<Dafny.Rune> _664_v = _663___mcc_h54;
            st = DAM.Syntax.Stmt.create_Bind(_660_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Write(DAM.Syntax.Expr.create_Var(_664_v), DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _661_next));
            return st;
          } else if (_source56.is_Select) {
            DAST._IExpression _665___mcc_h56 = _source56.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _666___mcc_h57 = _source56.dtor_field;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          } else {
            DAST._IExpression _667___mcc_h60 = _source56.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _668___mcc_h61 = _source56.dtor_indices;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source54.is_If) {
        DAST._IExpression _669___mcc_h12 = _source54.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _670___mcc_h13 = _source54.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _671___mcc_h14 = _source54.dtor_els;
        Dafny.ISequence<DAST._IStatement> _672_els = _671___mcc_h14;
        Dafny.ISequence<DAST._IStatement> _673_thn = _670___mcc_h13;
        DAST._IExpression _674_cond = _669___mcc_h12;
        DAM.Syntax._IStmt _675_cond;
        DAM.Syntax._IStmt _out24;
        _out24 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_674_cond);
        _675_cond = _out24;
        DAM.Syntax._IStmt _676_thn;
        DAM.Syntax._IStmt _out25;
        _out25 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_673_thn);
        _676_thn = _out25;
        DAM.Syntax._IStmt _677_els;
        DAM.Syntax._IStmt _out26;
        _out26 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_672_els);
        _677_els = _out26;
        DAM.Syntax._IStmt _678_next;
        DAM.Syntax._IStmt _out27;
        _out27 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_647_next);
        _678_next = _out27;
        st = DAM.Syntax.__default.Then(DAM.Syntax.Stmt.create_Bind(_675_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _676_thn, _677_els)), _678_next);
      } else if (_source54.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _679___mcc_h18 = _source54.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _680___mcc_h19 = _source54.dtor_body;
        Dafny.ISequence<DAST._IStatement> _681_stmt = _680___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _682_lab = _679___mcc_h18;
        DAM.Syntax._IStmt _683_block;
        DAM.Syntax._IStmt _out28;
        _out28 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(Dafny.Sequence<DAST._IStatement>.Concat(_681_stmt, _647_next));
        _683_block = _out28;
        st = DAM.Syntax.Stmt.create_LetCS(_682_lab, _683_block);
        return st;
      } else if (_source54.is_While) {
        DAST._IExpression _684___mcc_h22 = _source54.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _685___mcc_h23 = _source54.dtor_body;
        Dafny.ISequence<DAST._IStatement> _686_body = _685___mcc_h23;
        DAST._IExpression _687_guard = _684___mcc_h22;
        DAM.Syntax._IStmt _688_guard;
        DAM.Syntax._IStmt _out29;
        _out29 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_687_guard);
        _688_guard = _out29;
        DAM.Syntax._IStmt _689_body;
        DAM.Syntax._IStmt _out30;
        _out30 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_686_body);
        _689_body = _out30;
        DAM.Syntax._IStmt _690_next;
        DAM.Syntax._IStmt _out31;
        _out31 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_647_next);
        _690_next = _out31;
        st = DAM.Syntax.__default.While(_688_guard, _689_body, _690_next);
      } else if (_source54.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _691___mcc_h26 = _source54.dtor_boundName;
        DAST._IType _692___mcc_h27 = _source54.dtor_boundType;
        DAST._IExpression _693___mcc_h28 = _source54.dtor_over;
        Dafny.ISequence<DAST._IStatement> _694___mcc_h29 = _source54.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source54.is_Call) {
        DAST._IExpression _695___mcc_h34 = _source54.dtor_on;
        Dafny.ISequence<Dafny.Rune> _696___mcc_h35 = _source54.dtor_name;
        Dafny.ISequence<DAST._IType> _697___mcc_h36 = _source54.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _698___mcc_h37 = _source54.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _699___mcc_h38 = _source54.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _700_outs = _699___mcc_h38;
        Dafny.ISequence<DAST._IExpression> _701_args = _698___mcc_h37;
        Dafny.ISequence<Dafny.Rune> _702_meth = _696___mcc_h35;
        DAST._IExpression _703_obj = _695___mcc_h34;
        {
          DAM.Syntax._IStmt _704_obj;
          DAM.Syntax._IStmt _out32;
          _out32 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_703_obj);
          _704_obj = _out32;
          st = DAM.Syntax.Stmt.create_Select(_704_obj, _702_meth);
          BigInteger _hi9 = new BigInteger((_701_args).Count);
          for (BigInteger _705_i = BigInteger.Zero; _705_i < _hi9; _705_i++) {
            DAM.Syntax._IStmt _706_arg;
            DAM.Syntax._IStmt _out33;
            _out33 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr((_701_args).Select(_705_i));
            _706_arg = _out33;
            st = DAM.Syntax.Stmt.create_Bind(_706_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
          }
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source58 = _700_outs;
          if (_source58.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _707___mcc_h64 = _source58.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _708_outs = _707___mcc_h64;
            BigInteger _hi10 = new BigInteger((_708_outs).Count);
            for (BigInteger _709_i = BigInteger.Zero; _709_i < _hi10; _709_i++) {
              st = DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(((_708_outs).Select(_709_i))));
            }
          } else {
            DAM.Syntax._IStmt _710_next;
            DAM.Syntax._IStmt _out34;
            _out34 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_647_next);
            _710_next = _out34;
            st = DAM.Syntax.__default.Then(st, _710_next);
          }
        }
      } else if (_source54.is_Return) {
        DAST._IExpression _711___mcc_h44 = _source54.dtor_expr;
        DAST._IExpression _712_expr = _711___mcc_h44;
        DAM.Syntax._IStmt _713_ret;
        DAM.Syntax._IStmt _out35;
        _out35 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_712_expr);
        _713_ret = _out35;
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), _713_ret);
        return st;
      } else if (_source54.is_EarlyReturn) {
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Skip());
        return st;
      } else if (_source54.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _714___mcc_h46 = _source54.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _715_lab = _714___mcc_h46;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source59 = _715_lab;
          if (_source59.is_Some) {
            Dafny.ISequence<Dafny.Rune> _716___mcc_h65 = _source59.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _717_lab = _716___mcc_h65;
            st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(_717_lab), DAM.Syntax.__default.Skip());
            return st;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source54.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _718___mcc_h48 = _source54.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source54.is_JumpTailCallStart) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source54.is_Halt) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else {
        DAST._IExpression _719___mcc_h50 = _source54.dtor_Print_a0;
        DAST._IExpression _720_expr = _719___mcc_h50;
        DAM.Syntax._IStmt _721_arg;
        DAM.Syntax._IStmt _out36;
        _out36 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_720_expr);
        _721_arg = _out36;
        DAM.Syntax._IStmt _722_next;
        DAM.Syntax._IStmt _out37;
        _out37 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_647_next);
        _722_next = _out37;
        st = DAM.Syntax.Stmt.create_Bind(_721_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Print(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _722_next));
        return st;
      }
      return st;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _723___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_723___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _723___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_723___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in9 = (i).Drop(BigInteger.One);
          i = _in9;
          goto TAIL_CALL_START;
        } else {
          _723___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_723___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in10 = (i).Drop(BigInteger.One);
          i = _in10;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _724_body;
      Dafny.ISequence<Dafny.Rune> _out38;
      _out38 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _724_body = _out38;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _724_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _725_i;
      _725_i = BigInteger.Zero;
      while ((_725_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _726_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source60 = (body).Select(_725_i);
        if (_source60.is_Module) {
          DAST._IModule _727___mcc_h0 = _source60.dtor_Module_a0;
          DAST._IModule _728_m = _727___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out39;
          _out39 = DCOMP.COMP.GenModule(_728_m, containingPath);
          _726_generated = _out39;
        } else if (_source60.is_Class) {
          DAST._IClass _729___mcc_h1 = _source60.dtor_Class_a0;
          DAST._IClass _730_c = _729___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out40;
          _out40 = DCOMP.COMP.GenClass(_730_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_730_c).dtor_name)));
          _726_generated = _out40;
        } else if (_source60.is_Trait) {
          DAST._ITrait _731___mcc_h2 = _source60.dtor_Trait_a0;
          DAST._ITrait _732_t = _731___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out41;
          _out41 = DCOMP.COMP.GenTrait(_732_t, containingPath);
          _726_generated = _out41;
        } else if (_source60.is_Newtype) {
          DAST._INewtype _733___mcc_h3 = _source60.dtor_Newtype_a0;
          DAST._INewtype _734_n = _733___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out42;
          _out42 = DCOMP.COMP.GenNewtype(_734_n);
          _726_generated = _out42;
        } else {
          DAST._IDatatype _735___mcc_h4 = _source60.dtor_Datatype_a0;
          DAST._IDatatype _736_d = _735___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out43;
          _out43 = DCOMP.COMP.GenDatatype(_736_d);
          _726_generated = _out43;
        }
        if ((_725_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _726_generated);
        _725_i = (_725_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _737_tpI;
      _737_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_737_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _738_tp;
          _738_tp = (@params).Select(_737_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_738_tp));
          Dafny.ISequence<Dafny.Rune> _739_genTp;
          Dafny.ISequence<Dafny.Rune> _out44;
          _out44 = DCOMP.COMP.GenType(_738_tp, false, false);
          _739_genTp = _out44;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _739_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _740_baseConstraints;
          _740_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _739_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _739_genTp), _740_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _739_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _739_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _739_genTp), _740_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _739_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _739_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _739_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _737_tpI = (_737_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _741_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _742_typeParams;
      Dafny.ISequence<Dafny.Rune> _743_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _744_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _745_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _746_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _747_erasedParams;
      Dafny.ISet<DAST._IType> _out45;
      Dafny.ISequence<Dafny.Rune> _out46;
      Dafny.ISequence<Dafny.Rune> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      Dafny.ISequence<Dafny.Rune> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      Dafny.ISequence<Dafny.Rune> _out51;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out45, out _out46, out _out47, out _out48, out _out49, out _out50, out _out51);
      _741_typeParamsSet = _out45;
      _742_typeParams = _out46;
      _743_constrainedTypeParams = _out47;
      _744_whereConstraints = _out48;
      _745_constrainedEraseParams = _out49;
      _746_unerasedParams = _out50;
      _747_erasedParams = _out51;
      Dafny.ISequence<Dafny.Rune> _748_fields;
      _748_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _749_fieldInits;
      _749_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _750_fieldI;
      _750_fieldI = BigInteger.Zero;
      while ((_750_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _751_field;
        _751_field = ((c).dtor_fields).Select(_750_fieldI);
        Dafny.ISequence<Dafny.Rune> _752_fieldType;
        Dafny.ISequence<Dafny.Rune> _out52;
        _out52 = DCOMP.COMP.GenType(((_751_field).dtor_formal).dtor_typ, false, false);
        _752_fieldType = _out52;
        _748_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_748_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_751_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _752_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source61 = (_751_field).dtor_defaultValue;
        if (_source61.is_Some) {
          DAST._IExpression _753___mcc_h0 = _source61.dtor_Some_a0;
          DAST._IExpression _754_e = _753___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _755_eStr;
            bool _756___v1;
            bool _757___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _758___v3;
            Dafny.ISequence<Dafny.Rune> _out53;
            bool _out54;
            bool _out55;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out56;
            DCOMP.COMP.GenExpr(_754_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out53, out _out54, out _out55, out _out56);
            _755_eStr = _out53;
            _756___v1 = _out54;
            _757___v2 = _out55;
            _758___v3 = _out56;
            _749_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_749_fieldInits, DCOMP.__default.escapeIdent(((_751_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _755_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _749_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_749_fieldInits, DCOMP.__default.escapeIdent(((_751_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _750_fieldI = (_750_fieldI) + (BigInteger.One);
      }
      BigInteger _759_typeParamI;
      _759_typeParamI = BigInteger.Zero;
      while ((_759_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _760_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out57;
        _out57 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_759_typeParamI), false, false);
        _760_tpeGen = _out57;
        _748_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_748_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_759_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _760_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _749_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_749_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_759_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _759_typeParamI = (_759_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _742_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _748_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _761_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _762_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out58;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out59;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _741_typeParamsSet, out _out58, out _out59);
      _761_implBody = _out58;
      _762_traitBodies = _out59;
      _761_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _749_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _761_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _743_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _742_typeParams), _744_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _761_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _763_i;
        _763_i = BigInteger.Zero;
        while ((_763_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _764_superClass;
          _764_superClass = ((c).dtor_superClasses).Select(_763_i);
          DAST._IType _source62 = _764_superClass;
          if (_source62.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _765___mcc_h1 = _source62.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _766___mcc_h2 = _source62.dtor_typeArgs;
            DAST._IResolvedType _767___mcc_h3 = _source62.dtor_resolved;
            DAST._IResolvedType _source63 = _767___mcc_h3;
            if (_source63.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _768___mcc_h7 = _source63.dtor_path;
            } else if (_source63.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _769___mcc_h9 = _source63.dtor_path;
              Dafny.ISequence<DAST._IType> _770_typeArgs = _766___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _771_traitPath = _765___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _772_pathStr;
                Dafny.ISequence<Dafny.Rune> _out60;
                _out60 = DCOMP.COMP.GenPath(_771_traitPath);
                _772_pathStr = _out60;
                Dafny.ISequence<Dafny.Rune> _773_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out61;
                _out61 = DCOMP.COMP.GenTypeArgs(_770_typeArgs, false, false);
                _773_typeArgs = _out61;
                Dafny.ISequence<Dafny.Rune> _774_body;
                _774_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_762_traitBodies).Contains(_771_traitPath)) {
                  _774_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_762_traitBodies, _771_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _775_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out62;
                _out62 = DCOMP.COMP.GenPath(path);
                _775_genSelfPath = _out62;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _743_constrainedTypeParams), _772_pathStr), _773_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _775_genSelfPath), _742_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _744_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _774_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _776___mcc_h11 = _source63.dtor_Newtype_a0;
            }
          } else if (_source62.is_Nullable) {
            DAST._IType _777___mcc_h13 = _source62.dtor_Nullable_a0;
          } else if (_source62.is_Tuple) {
            Dafny.ISequence<DAST._IType> _778___mcc_h15 = _source62.dtor_Tuple_a0;
          } else if (_source62.is_Array) {
            DAST._IType _779___mcc_h17 = _source62.dtor_element;
            BigInteger _780___mcc_h18 = _source62.dtor_dims;
          } else if (_source62.is_Seq) {
            DAST._IType _781___mcc_h21 = _source62.dtor_element;
          } else if (_source62.is_Set) {
            DAST._IType _782___mcc_h23 = _source62.dtor_element;
          } else if (_source62.is_Multiset) {
            DAST._IType _783___mcc_h25 = _source62.dtor_element;
          } else if (_source62.is_Map) {
            DAST._IType _784___mcc_h27 = _source62.dtor_key;
            DAST._IType _785___mcc_h28 = _source62.dtor_value;
          } else if (_source62.is_Arrow) {
            Dafny.ISequence<DAST._IType> _786___mcc_h31 = _source62.dtor_args;
            DAST._IType _787___mcc_h32 = _source62.dtor_result;
          } else if (_source62.is_Primitive) {
            DAST._IPrimitive _788___mcc_h35 = _source62.dtor_Primitive_a0;
          } else if (_source62.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _789___mcc_h37 = _source62.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _790___mcc_h39 = _source62.dtor_TypeArg_a0;
          }
          _763_i = (_763_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _791_defaultImpl;
      _791_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _743_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _742_typeParams), _744_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _791_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_791_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _791_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_791_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _791_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_791_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _791_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_791_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _792_printImpl;
      _792_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _743_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _742_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _792_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_792_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _793_ptrPartialEqImpl;
      _793_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _742_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _742_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _793_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_793_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _793_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_793_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _793_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_793_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _794_identEraseImpls;
      _794_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _743_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _742_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _747_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _794_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_794_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _745_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _746_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _742_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _791_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _792_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _793_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _794_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _795_typeParamsSet;
      _795_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _796_typeParams;
      _796_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _797_tpI;
      _797_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _796_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_797_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _798_tp;
          _798_tp = ((t).dtor_typeParams).Select(_797_tpI);
          _795_typeParamsSet = Dafny.Set<DAST._IType>.Union(_795_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_798_tp));
          Dafny.ISequence<Dafny.Rune> _799_genTp;
          Dafny.ISequence<Dafny.Rune> _out63;
          _out63 = DCOMP.COMP.GenType(_798_tp, false, false);
          _799_genTp = _out63;
          _796_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_796_typeParams, _799_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _797_tpI = (_797_tpI) + (BigInteger.One);
        }
        _796_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_796_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _800_fullPath;
      _800_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _801_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _802___v6;
      Dafny.ISequence<Dafny.Rune> _out64;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out65;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_800_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_800_fullPath)), _795_typeParamsSet, out _out64, out _out65);
      _801_implBody = _out64;
      _802___v6 = _out65;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _796_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _801_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _803_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _804_typeParams;
      Dafny.ISequence<Dafny.Rune> _805_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _806_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _807___v7;
      Dafny.ISequence<Dafny.Rune> _808___v8;
      Dafny.ISequence<Dafny.Rune> _809___v9;
      Dafny.ISet<DAST._IType> _out66;
      Dafny.ISequence<Dafny.Rune> _out67;
      Dafny.ISequence<Dafny.Rune> _out68;
      Dafny.ISequence<Dafny.Rune> _out69;
      Dafny.ISequence<Dafny.Rune> _out70;
      Dafny.ISequence<Dafny.Rune> _out71;
      Dafny.ISequence<Dafny.Rune> _out72;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out66, out _out67, out _out68, out _out69, out _out70, out _out71, out _out72);
      _803_typeParamsSet = _out66;
      _804_typeParams = _out67;
      _805_constrainedTypeParams = _out68;
      _806_whereConstraints = _out69;
      _807___v7 = _out70;
      _808___v8 = _out71;
      _809___v9 = _out72;
      Dafny.ISequence<Dafny.Rune> _810_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out73;
      _out73 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _810_underlyingType = _out73;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _804_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _810_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _805_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _804_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _810_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _805_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _810_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _804_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _805_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _804_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _804_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _805_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _804_typeParams), _806_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source64 = (c).dtor_witnessExpr;
      if (_source64.is_Some) {
        DAST._IExpression _811___mcc_h0 = _source64.dtor_Some_a0;
        DAST._IExpression _812_e = _811___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _813_eStr;
          bool _814___v10;
          bool _815___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _816___v12;
          Dafny.ISequence<Dafny.Rune> _out74;
          bool _out75;
          bool _out76;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out77;
          DCOMP.COMP.GenExpr(_812_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out74, out _out75, out _out76, out _out77);
          _813_eStr = _out74;
          _814___v10 = _out75;
          _815___v11 = _out76;
          _816___v12 = _out77;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _813_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _805_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _804_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _805_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _804_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _810_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _817_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _818_typeParams;
      Dafny.ISequence<Dafny.Rune> _819_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _820_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _821_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _822_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _823_erasedParams;
      Dafny.ISet<DAST._IType> _out78;
      Dafny.ISequence<Dafny.Rune> _out79;
      Dafny.ISequence<Dafny.Rune> _out80;
      Dafny.ISequence<Dafny.Rune> _out81;
      Dafny.ISequence<Dafny.Rune> _out82;
      Dafny.ISequence<Dafny.Rune> _out83;
      Dafny.ISequence<Dafny.Rune> _out84;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out78, out _out79, out _out80, out _out81, out _out82, out _out83, out _out84);
      _817_typeParamsSet = _out78;
      _818_typeParams = _out79;
      _819_constrainedTypeParams = _out80;
      _820_whereConstraints = _out81;
      _821_constrainedEraseParams = _out82;
      _822_unerasedParams = _out83;
      _823_erasedParams = _out84;
      Dafny.ISequence<Dafny.Rune> _824_ctors;
      _824_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _825_i;
      _825_i = BigInteger.Zero;
      while ((_825_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _826_ctor;
        _826_ctor = ((c).dtor_ctors).Select(_825_i);
        Dafny.ISequence<Dafny.Rune> _827_ctorBody;
        _827_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_826_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _828_j;
        _828_j = BigInteger.Zero;
        while ((_828_j) < (new BigInteger(((_826_ctor).dtor_args).Count))) {
          DAST._IFormal _829_formal;
          _829_formal = ((_826_ctor).dtor_args).Select(_828_j);
          Dafny.ISequence<Dafny.Rune> _830_formalType;
          Dafny.ISequence<Dafny.Rune> _out85;
          _out85 = DCOMP.COMP.GenType((_829_formal).dtor_typ, false, false);
          _830_formalType = _out85;
          if ((c).dtor_isCo) {
            _827_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_827_ctorBody, DCOMP.__default.escapeIdent((_829_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _830_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _827_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_827_ctorBody, DCOMP.__default.escapeIdent((_829_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _830_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _828_j = (_828_j) + (BigInteger.One);
        }
        _827_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_827_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _824_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_824_ctors, _827_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _825_i = (_825_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _831_selfPath;
      _831_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _832_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _833_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out86;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out87;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_831_selfPath)), _817_typeParamsSet, out _out86, out _out87);
      _832_implBody = _out86;
      _833_traitBodies = _out87;
      _825_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _834_emittedFields;
      _834_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_825_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _835_ctor;
        _835_ctor = ((c).dtor_ctors).Select(_825_i);
        BigInteger _836_j;
        _836_j = BigInteger.Zero;
        while ((_836_j) < (new BigInteger(((_835_ctor).dtor_args).Count))) {
          DAST._IFormal _837_formal;
          _837_formal = ((_835_ctor).dtor_args).Select(_836_j);
          if (!((_834_emittedFields).Contains((_837_formal).dtor_name))) {
            _834_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_834_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_837_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _838_formalType;
            Dafny.ISequence<Dafny.Rune> _out88;
            _out88 = DCOMP.COMP.GenType((_837_formal).dtor_typ, false, false);
            _838_formalType = _out88;
            Dafny.ISequence<Dafny.Rune> _839_methodBody;
            _839_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _840_k;
            _840_k = BigInteger.Zero;
            while ((_840_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _841_ctor2;
              _841_ctor2 = ((c).dtor_ctors).Select(_840_k);
              Dafny.ISequence<Dafny.Rune> _842_ctorMatch;
              _842_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_841_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _843_l;
              _843_l = BigInteger.Zero;
              bool _844_hasMatchingField;
              _844_hasMatchingField = false;
              while ((_843_l) < (new BigInteger(((_841_ctor2).dtor_args).Count))) {
                DAST._IFormal _845_formal2;
                _845_formal2 = ((_841_ctor2).dtor_args).Select(_843_l);
                if (((_837_formal).dtor_name).Equals((_845_formal2).dtor_name)) {
                  _844_hasMatchingField = true;
                }
                _842_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_842_ctorMatch, DCOMP.__default.escapeIdent((_845_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _843_l = (_843_l) + (BigInteger.One);
              }
              if (_844_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _842_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_842_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_837_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _842_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_842_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_837_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _842_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_842_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _839_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_839_methodBody, _842_ctorMatch);
              _840_k = (_840_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _839_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_839_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _839_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_839_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _832_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_832_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_837_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _838_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _839_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _836_j = (_836_j) + (BigInteger.One);
        }
        _825_i = (_825_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _824_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_824_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _846_typeI;
        _846_typeI = BigInteger.Zero;
        while ((_846_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_846_typeI).Sign == 1) {
            _824_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_824_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _847_genTp;
          Dafny.ISequence<Dafny.Rune> _out89;
          _out89 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_846_typeI), false, false);
          _847_genTp = _out89;
          _824_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_824_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _847_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _846_typeI = (_846_typeI) + (BigInteger.One);
        }
        _824_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_824_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _848_enumBody;
      _848_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _818_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _824_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _819_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _818_typeParams), _820_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _832_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _849_identEraseImpls;
      _849_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _819_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _818_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _823_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _849_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_849_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _821_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _822_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _818_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _850_printImpl;
      _850_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _819_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _818_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _825_i = BigInteger.Zero;
      while ((_825_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _851_ctor;
        _851_ctor = ((c).dtor_ctors).Select(_825_i);
        Dafny.ISequence<Dafny.Rune> _852_ctorMatch;
        _852_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_851_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _853_modulePrefix;
        _853_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _854_printRhs;
        _854_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _853_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_851_ctor).dtor_name), (((_851_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _855_j;
        _855_j = BigInteger.Zero;
        while ((_855_j) < (new BigInteger(((_851_ctor).dtor_args).Count))) {
          DAST._IFormal _856_formal;
          _856_formal = ((_851_ctor).dtor_args).Select(_855_j);
          _852_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_852_ctorMatch, DCOMP.__default.escapeIdent((_856_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_855_j).Sign == 1) {
            _854_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_854_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _854_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_854_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_856_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _855_j = (_855_j) + (BigInteger.One);
        }
        _852_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_852_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_851_ctor).dtor_hasAnyArgs) {
          _854_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_854_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _854_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_854_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _850_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_850_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _852_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _854_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _825_i = (_825_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _850_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_850_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _850_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_850_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _857_defaultImpl;
      _857_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _857_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _819_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _818_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _825_i = BigInteger.Zero;
        while ((_825_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _858_formal;
          _858_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_825_i);
          _857_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_857_defaultImpl, DCOMP.__default.escapeIdent((_858_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _825_i = (_825_i) + (BigInteger.One);
        }
        _857_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_857_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_848_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _849_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _850_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _857_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _859_i;
        _859_i = BigInteger.Zero;
        while ((_859_i) < (new BigInteger((p).Count))) {
          if ((_859_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_859_i))));
          _859_i = (_859_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _860_i;
        _860_i = BigInteger.Zero;
        while ((_860_i) < (new BigInteger((args).Count))) {
          if ((_860_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _861_genTp;
          Dafny.ISequence<Dafny.Rune> _out90;
          _out90 = DCOMP.COMP.GenType((args).Select(_860_i), inBinding, inFn);
          _861_genTp = _out90;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _861_genTp);
          _860_i = (_860_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source65 = c;
      if (_source65.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _862___mcc_h0 = _source65.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _863___mcc_h1 = _source65.dtor_typeArgs;
        DAST._IResolvedType _864___mcc_h2 = _source65.dtor_resolved;
        DAST._IResolvedType _865_resolved = _864___mcc_h2;
        Dafny.ISequence<DAST._IType> _866_args = _863___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _867_p = _862___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out91;
          _out91 = DCOMP.COMP.GenPath(_867_p);
          s = _out91;
          Dafny.ISequence<Dafny.Rune> _868_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out92;
          _out92 = DCOMP.COMP.GenTypeArgs(_866_args, inBinding, inFn);
          _868_typeArgs = _out92;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _868_typeArgs);
          DAST._IResolvedType _source66 = _865_resolved;
          if (_source66.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _869___mcc_h18 = _source66.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source66.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _870___mcc_h20 = _source66.dtor_path;
            {
              if ((_867_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _871___mcc_h22 = _source66.dtor_Newtype_a0;
            DAST._IResolvedType _872_Primitive = _865_resolved;
          }
        }
      } else if (_source65.is_Nullable) {
        DAST._IType _873___mcc_h3 = _source65.dtor_Nullable_a0;
        DAST._IType _874_inner = _873___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _875_innerStr;
          Dafny.ISequence<Dafny.Rune> _out93;
          _out93 = DCOMP.COMP.GenType(_874_inner, inBinding, inFn);
          _875_innerStr = _out93;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _875_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source65.is_Tuple) {
        Dafny.ISequence<DAST._IType> _876___mcc_h4 = _source65.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _877_types = _876___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _878_i;
          _878_i = BigInteger.Zero;
          while ((_878_i) < (new BigInteger((_877_types).Count))) {
            if ((_878_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _879_generated;
            Dafny.ISequence<Dafny.Rune> _out94;
            _out94 = DCOMP.COMP.GenType((_877_types).Select(_878_i), inBinding, inFn);
            _879_generated = _out94;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _879_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _878_i = (_878_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source65.is_Array) {
        DAST._IType _880___mcc_h5 = _source65.dtor_element;
        BigInteger _881___mcc_h6 = _source65.dtor_dims;
        BigInteger _882_dims = _881___mcc_h6;
        DAST._IType _883_element = _880___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _884_elemStr;
          Dafny.ISequence<Dafny.Rune> _out95;
          _out95 = DCOMP.COMP.GenType(_883_element, inBinding, inFn);
          _884_elemStr = _out95;
          s = _884_elemStr;
          BigInteger _885_i;
          _885_i = BigInteger.Zero;
          while ((_885_i) < (_882_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _885_i = (_885_i) + (BigInteger.One);
          }
        }
      } else if (_source65.is_Seq) {
        DAST._IType _886___mcc_h7 = _source65.dtor_element;
        DAST._IType _887_element = _886___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _888_elemStr;
          Dafny.ISequence<Dafny.Rune> _out96;
          _out96 = DCOMP.COMP.GenType(_887_element, inBinding, inFn);
          _888_elemStr = _out96;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _888_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source65.is_Set) {
        DAST._IType _889___mcc_h8 = _source65.dtor_element;
        DAST._IType _890_element = _889___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _891_elemStr;
          Dafny.ISequence<Dafny.Rune> _out97;
          _out97 = DCOMP.COMP.GenType(_890_element, inBinding, inFn);
          _891_elemStr = _out97;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _891_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source65.is_Multiset) {
        DAST._IType _892___mcc_h9 = _source65.dtor_element;
        DAST._IType _893_element = _892___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _894_elemStr;
          Dafny.ISequence<Dafny.Rune> _out98;
          _out98 = DCOMP.COMP.GenType(_893_element, inBinding, inFn);
          _894_elemStr = _out98;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _894_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source65.is_Map) {
        DAST._IType _895___mcc_h10 = _source65.dtor_key;
        DAST._IType _896___mcc_h11 = _source65.dtor_value;
        DAST._IType _897_value = _896___mcc_h11;
        DAST._IType _898_key = _895___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _899_keyStr;
          Dafny.ISequence<Dafny.Rune> _out99;
          _out99 = DCOMP.COMP.GenType(_898_key, inBinding, inFn);
          _899_keyStr = _out99;
          Dafny.ISequence<Dafny.Rune> _900_valueStr;
          Dafny.ISequence<Dafny.Rune> _out100;
          _out100 = DCOMP.COMP.GenType(_897_value, inBinding, inFn);
          _900_valueStr = _out100;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _899_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _900_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source65.is_Arrow) {
        Dafny.ISequence<DAST._IType> _901___mcc_h12 = _source65.dtor_args;
        DAST._IType _902___mcc_h13 = _source65.dtor_result;
        DAST._IType _903_result = _902___mcc_h13;
        Dafny.ISequence<DAST._IType> _904_args = _901___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _905_i;
          _905_i = BigInteger.Zero;
          while ((_905_i) < (new BigInteger((_904_args).Count))) {
            if ((_905_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _906_generated;
            Dafny.ISequence<Dafny.Rune> _out101;
            _out101 = DCOMP.COMP.GenType((_904_args).Select(_905_i), inBinding, true);
            _906_generated = _out101;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _906_generated);
            _905_i = (_905_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _907_resultType;
          Dafny.ISequence<Dafny.Rune> _out102;
          _out102 = DCOMP.COMP.GenType(_903_result, inBinding, (inFn) || (inBinding));
          _907_resultType = _out102;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _907_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source65.is_Primitive) {
        DAST._IPrimitive _908___mcc_h14 = _source65.dtor_Primitive_a0;
        DAST._IPrimitive _909_p = _908___mcc_h14;
        {
          DAST._IPrimitive _source67 = _909_p;
          if (_source67.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source67.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source67.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source67.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source65.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _910___mcc_h15 = _source65.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _911_v = _910___mcc_h15;
        s = _911_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _912___mcc_h16 = _source65.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source68 = _912___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _913___mcc_h17 = _source68;
        Dafny.ISequence<Dafny.Rune> _914_name = _913___mcc_h17;
        s = DCOMP.__default.escapeIdent(_914_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _915_i;
      _915_i = BigInteger.Zero;
      while ((_915_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source69 = (body).Select(_915_i);
        DAST._IMethod _916___mcc_h0 = _source69;
        DAST._IMethod _917_m = _916___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source70 = (_917_m).dtor_overridingPath;
          if (_source70.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _918___mcc_h1 = _source70.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _919_p = _918___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _920_existing;
              _920_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_919_p)) {
                _920_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _919_p);
              }
              if ((new BigInteger((_920_existing).Count)).Sign == 1) {
                _920_existing = Dafny.Sequence<Dafny.Rune>.Concat(_920_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _921_genMethod;
              Dafny.ISequence<Dafny.Rune> _out103;
              _out103 = DCOMP.COMP.GenMethod(_917_m, true, enclosingType, enclosingTypeParams);
              _921_genMethod = _out103;
              _920_existing = Dafny.Sequence<Dafny.Rune>.Concat(_920_existing, _921_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_919_p, _920_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _922_generated;
              Dafny.ISequence<Dafny.Rune> _out104;
              _out104 = DCOMP.COMP.GenMethod(_917_m, forTrait, enclosingType, enclosingTypeParams);
              _922_generated = _out104;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _922_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _915_i = (_915_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _923_i;
      _923_i = BigInteger.Zero;
      while ((_923_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _924_param;
        _924_param = (@params).Select(_923_i);
        Dafny.ISequence<Dafny.Rune> _925_paramType;
        Dafny.ISequence<Dafny.Rune> _out105;
        _out105 = DCOMP.COMP.GenType((_924_param).dtor_typ, false, false);
        _925_paramType = _out105;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_924_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _925_paramType);
        if ((_923_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _923_i = (_923_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _926_params;
      Dafny.ISequence<Dafny.Rune> _out106;
      _out106 = DCOMP.COMP.GenParams((m).dtor_params);
      _926_params = _out106;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _927_paramNames;
      _927_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _928_paramI;
      _928_paramI = BigInteger.Zero;
      while ((_928_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _927_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_927_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_928_paramI)).dtor_name));
        _928_paramI = (_928_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _926_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _926_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _929_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out107;
          _out107 = DCOMP.COMP.GenType(enclosingType, false, false);
          _929_enclosingTypeString = _out107;
          _926_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _929_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _926_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _930_retType;
      _930_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _931_typeI;
      _931_typeI = BigInteger.Zero;
      while ((_931_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_931_typeI).Sign == 1) {
          _930_retType = Dafny.Sequence<Dafny.Rune>.Concat(_930_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _932_typeString;
        Dafny.ISequence<Dafny.Rune> _out108;
        _out108 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_931_typeI), false, false);
        _932_typeString = _out108;
        _930_retType = Dafny.Sequence<Dafny.Rune>.Concat(_930_retType, _932_typeString);
        _931_typeI = (_931_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _930_retType = Dafny.Sequence<Dafny.Rune>.Concat(_930_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _933_typeParamsFiltered;
      _933_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _934_typeParamI;
      _934_typeParamI = BigInteger.Zero;
      while ((_934_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _935_typeParam;
        _935_typeParam = ((m).dtor_typeParams).Select(_934_typeParamI);
        if (!((enclosingTypeParams).Contains(_935_typeParam))) {
          _933_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_933_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_935_typeParam));
        }
        _934_typeParamI = (_934_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _936_whereClauses;
      _936_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_933_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _936_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_936_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _937_i;
        _937_i = BigInteger.Zero;
        while ((_937_i) < (new BigInteger((_933_typeParamsFiltered).Count))) {
          if ((_937_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _936_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_936_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _938_typeString;
          Dafny.ISequence<Dafny.Rune> _out109;
          _out109 = DCOMP.COMP.GenType((_933_typeParamsFiltered).Select(_937_i), false, false);
          _938_typeString = _out109;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _938_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _938_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _936_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_936_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _938_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _937_i = (_937_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _926_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _930_retType), _936_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _939_earlyReturn;
        _939_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source71 = (m).dtor_outVars;
        if (_source71.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _940___mcc_h0 = _source71.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _941_outVars = _940___mcc_h0;
          {
            _939_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _942_outI;
            _942_outI = BigInteger.Zero;
            while ((_942_outI) < (new BigInteger((_941_outVars).Count))) {
              if ((_942_outI).Sign == 1) {
                _939_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_939_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _943_outVar;
              _943_outVar = (_941_outVars).Select(_942_outI);
              _939_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_939_earlyReturn, DCOMP.__default.escapeIdent((_943_outVar)));
              _942_outI = (_942_outI) + (BigInteger.One);
            }
            _939_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_939_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _944_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _945___v15;
        Dafny.ISequence<Dafny.Rune> _out110;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _927_paramNames, true, _939_earlyReturn, out _out110, out _out111);
        _944_body = _out110;
        _945___v15 = _out111;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _944_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _946_declarations;
      _946_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _947_i;
      _947_i = BigInteger.Zero;
      while ((_947_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _948_stmt;
        _948_stmt = (stmts).Select(_947_i);
        Dafny.ISequence<Dafny.Rune> _949_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _950_recIdents;
        Dafny.ISequence<Dafny.Rune> _out112;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out113;
        DCOMP.COMP.GenStmt(_948_stmt, selfIdent, @params, (isLast) && ((_947_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out112, out _out113);
        _949_stmtString = _out112;
        _950_recIdents = _out113;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_950_recIdents, _946_declarations));
        DAST._IStatement _source72 = _948_stmt;
        if (_source72.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _951___mcc_h0 = _source72.dtor_name;
          DAST._IType _952___mcc_h1 = _source72.dtor_typ;
          DAST._IOptional<DAST._IExpression> _953___mcc_h2 = _source72.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _954_name = _951___mcc_h0;
          {
            _946_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_946_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_954_name));
          }
        } else if (_source72.is_Assign) {
          DAST._IAssignLhs _955___mcc_h6 = _source72.dtor_lhs;
          DAST._IExpression _956___mcc_h7 = _source72.dtor_value;
        } else if (_source72.is_If) {
          DAST._IExpression _957___mcc_h10 = _source72.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _958___mcc_h11 = _source72.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _959___mcc_h12 = _source72.dtor_els;
        } else if (_source72.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _960___mcc_h16 = _source72.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _961___mcc_h17 = _source72.dtor_body;
        } else if (_source72.is_While) {
          DAST._IExpression _962___mcc_h20 = _source72.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _963___mcc_h21 = _source72.dtor_body;
        } else if (_source72.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _964___mcc_h24 = _source72.dtor_boundName;
          DAST._IType _965___mcc_h25 = _source72.dtor_boundType;
          DAST._IExpression _966___mcc_h26 = _source72.dtor_over;
          Dafny.ISequence<DAST._IStatement> _967___mcc_h27 = _source72.dtor_body;
        } else if (_source72.is_Call) {
          DAST._IExpression _968___mcc_h32 = _source72.dtor_on;
          Dafny.ISequence<Dafny.Rune> _969___mcc_h33 = _source72.dtor_name;
          Dafny.ISequence<DAST._IType> _970___mcc_h34 = _source72.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _971___mcc_h35 = _source72.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _972___mcc_h36 = _source72.dtor_outs;
        } else if (_source72.is_Return) {
          DAST._IExpression _973___mcc_h42 = _source72.dtor_expr;
        } else if (_source72.is_EarlyReturn) {
        } else if (_source72.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _974___mcc_h44 = _source72.dtor_toLabel;
        } else if (_source72.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _975___mcc_h46 = _source72.dtor_body;
        } else if (_source72.is_JumpTailCallStart) {
        } else if (_source72.is_Halt) {
        } else {
          DAST._IExpression _976___mcc_h48 = _source72.dtor_Print_a0;
        }
        if ((_947_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _949_stmtString);
        _947_i = (_947_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source73 = lhs;
      if (_source73.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _977___mcc_h0 = _source73.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source74 = _977___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _978___mcc_h1 = _source74;
        Dafny.ISequence<Dafny.Rune> _979_id = _978___mcc_h1;
        {
          if ((@params).Contains(_979_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_979_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_979_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_979_id);
          needsIIFE = false;
        }
      } else if (_source73.is_Select) {
        DAST._IExpression _980___mcc_h2 = _source73.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _981___mcc_h3 = _source73.dtor_field;
        Dafny.ISequence<Dafny.Rune> _982_field = _981___mcc_h3;
        DAST._IExpression _983_on = _980___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _984_onExpr;
          bool _985_onOwned;
          bool _986_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _987_recIdents;
          Dafny.ISequence<Dafny.Rune> _out114;
          bool _out115;
          bool _out116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out117;
          DCOMP.COMP.GenExpr(_983_on, selfIdent, @params, false, out _out114, out _out115, out _out116, out _out117);
          _984_onExpr = _out114;
          _985_onOwned = _out115;
          _986_onErased = _out116;
          _987_recIdents = _out117;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _984_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _982_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _987_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _988___mcc_h4 = _source73.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _989___mcc_h5 = _source73.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _990_indices = _989___mcc_h5;
        DAST._IExpression _991_on = _988___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _992_onExpr;
          bool _993_onOwned;
          bool _994_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _995_recIdents;
          Dafny.ISequence<Dafny.Rune> _out118;
          bool _out119;
          bool _out120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out121;
          DCOMP.COMP.GenExpr(_991_on, selfIdent, @params, false, out _out118, out _out119, out _out120, out _out121);
          _992_onExpr = _out118;
          _993_onOwned = _out119;
          _994_onErased = _out120;
          _995_recIdents = _out121;
          readIdents = _995_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _996_i;
          _996_i = BigInteger.Zero;
          while ((_996_i) < (new BigInteger((_990_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _997_idx;
            bool _998___v19;
            bool _999_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1000_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out122;
            bool _out123;
            bool _out124;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
            DCOMP.COMP.GenExpr((_990_indices).Select(_996_i), selfIdent, @params, true, out _out122, out _out123, out _out124, out _out125);
            _997_idx = _out122;
            _998___v19 = _out123;
            _999_idxErased = _out124;
            _1000_recIdentsIdx = _out125;
            if (!(_999_idxErased)) {
              _997_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _997_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_996_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _997_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1000_recIdentsIdx);
            _996_i = (_996_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _992_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _996_i = BigInteger.Zero;
          while ((_996_i) < (new BigInteger((_990_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_996_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _996_i = (_996_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source75 = stmt;
      if (_source75.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1001___mcc_h0 = _source75.dtor_name;
        DAST._IType _1002___mcc_h1 = _source75.dtor_typ;
        DAST._IOptional<DAST._IExpression> _1003___mcc_h2 = _source75.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source76 = _1003___mcc_h2;
        if (_source76.is_Some) {
          DAST._IExpression _1004___mcc_h3 = _source76.dtor_Some_a0;
          DAST._IExpression _1005_expression = _1004___mcc_h3;
          DAST._IType _1006_typ = _1002___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1007_name = _1001___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1008_typeString;
            Dafny.ISequence<Dafny.Rune> _out126;
            _out126 = DCOMP.COMP.GenType(_1006_typ, true, false);
            _1008_typeString = _out126;
            Dafny.ISequence<Dafny.Rune> _1009_expr;
            bool _1010___v20;
            bool _1011_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1012_recIdents;
            Dafny.ISequence<Dafny.Rune> _out127;
            bool _out128;
            bool _out129;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out130;
            DCOMP.COMP.GenExpr(_1005_expression, selfIdent, @params, true, out _out127, out _out128, out _out129, out _out130);
            _1009_expr = _out127;
            _1010___v20 = _out128;
            _1011_recErased = _out129;
            _1012_recIdents = _out130;
            if (!(_1011_recErased)) {
              _1009_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1009_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1009_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1008_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1009_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1007_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1008_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1009_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1012_recIdents;
          }
        } else {
          DAST._IType _1013_typ = _1002___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1014_name = _1001___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1015_typeString;
            Dafny.ISequence<Dafny.Rune> _out131;
            _out131 = DCOMP.COMP.GenType(_1013_typ, true, false);
            _1015_typeString = _out131;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1014_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1015_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source75.is_Assign) {
        DAST._IAssignLhs _1016___mcc_h4 = _source75.dtor_lhs;
        DAST._IExpression _1017___mcc_h5 = _source75.dtor_value;
        DAST._IExpression _1018_expression = _1017___mcc_h5;
        DAST._IAssignLhs _1019_lhs = _1016___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1020_lhsGen;
          bool _1021_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1022_recIdents;
          Dafny.ISequence<Dafny.Rune> _out132;
          bool _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenAssignLhs(_1019_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out132, out _out133, out _out134);
          _1020_lhsGen = _out132;
          _1021_needsIIFE = _out133;
          _1022_recIdents = _out134;
          Dafny.ISequence<Dafny.Rune> _1023_exprGen;
          bool _1024___v21;
          bool _1025_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1026_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out135;
          bool _out136;
          bool _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenExpr(_1018_expression, selfIdent, @params, true, out _out135, out _out136, out _out137, out _out138);
          _1023_exprGen = _out135;
          _1024___v21 = _out136;
          _1025_exprErased = _out137;
          _1026_exprIdents = _out138;
          if (!(_1025_exprErased)) {
            _1023_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1023_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1023_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1023_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1021_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1023_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1020_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1020_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1023_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1022_recIdents, _1026_exprIdents);
        }
      } else if (_source75.is_If) {
        DAST._IExpression _1027___mcc_h6 = _source75.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1028___mcc_h7 = _source75.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1029___mcc_h8 = _source75.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1030_els = _1029___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1031_thn = _1028___mcc_h7;
        DAST._IExpression _1032_cond = _1027___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1033_condString;
          bool _1034___v22;
          bool _1035_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1036_recIdents;
          Dafny.ISequence<Dafny.Rune> _out139;
          bool _out140;
          bool _out141;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out142;
          DCOMP.COMP.GenExpr(_1032_cond, selfIdent, @params, true, out _out139, out _out140, out _out141, out _out142);
          _1033_condString = _out139;
          _1034___v22 = _out140;
          _1035_condErased = _out141;
          _1036_recIdents = _out142;
          if (!(_1035_condErased)) {
            _1033_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1033_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1036_recIdents;
          Dafny.ISequence<Dafny.Rune> _1037_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1038_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
          DCOMP.COMP.GenStmts(_1031_thn, selfIdent, @params, isLast, earlyReturn, out _out143, out _out144);
          _1037_thnString = _out143;
          _1038_thnIdents = _out144;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1038_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1039_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1040_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out145;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out146;
          DCOMP.COMP.GenStmts(_1030_els, selfIdent, @params, isLast, earlyReturn, out _out145, out _out146);
          _1039_elsString = _out145;
          _1040_elsIdents = _out146;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1040_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1033_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1037_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1039_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source75.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1041___mcc_h9 = _source75.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1042___mcc_h10 = _source75.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1043_body = _1042___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1044_lbl = _1041___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1045_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1046_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out147;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out148;
          DCOMP.COMP.GenStmts(_1043_body, selfIdent, @params, isLast, earlyReturn, out _out147, out _out148);
          _1045_bodyString = _out147;
          _1046_bodyIdents = _out148;
          readIdents = _1046_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1044_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1045_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source75.is_While) {
        DAST._IExpression _1047___mcc_h11 = _source75.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1048___mcc_h12 = _source75.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1049_body = _1048___mcc_h12;
        DAST._IExpression _1050_cond = _1047___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _1051_condString;
          bool _1052___v23;
          bool _1053_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1054_recIdents;
          Dafny.ISequence<Dafny.Rune> _out149;
          bool _out150;
          bool _out151;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out152;
          DCOMP.COMP.GenExpr(_1050_cond, selfIdent, @params, true, out _out149, out _out150, out _out151, out _out152);
          _1051_condString = _out149;
          _1052___v23 = _out150;
          _1053_condErased = _out151;
          _1054_recIdents = _out152;
          if (!(_1053_condErased)) {
            _1051_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1051_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1054_recIdents;
          Dafny.ISequence<Dafny.Rune> _1055_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1056_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out153;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out154;
          DCOMP.COMP.GenStmts(_1049_body, selfIdent, @params, false, earlyReturn, out _out153, out _out154);
          _1055_bodyString = _out153;
          _1056_bodyIdents = _out154;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1056_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _1051_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1055_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source75.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1057___mcc_h13 = _source75.dtor_boundName;
        DAST._IType _1058___mcc_h14 = _source75.dtor_boundType;
        DAST._IExpression _1059___mcc_h15 = _source75.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1060___mcc_h16 = _source75.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1061_body = _1060___mcc_h16;
        DAST._IExpression _1062_over = _1059___mcc_h15;
        DAST._IType _1063_boundType = _1058___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1064_boundName = _1057___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1065_overString;
          bool _1066___v24;
          bool _1067_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1068_recIdents;
          Dafny.ISequence<Dafny.Rune> _out155;
          bool _out156;
          bool _out157;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out158;
          DCOMP.COMP.GenExpr(_1062_over, selfIdent, @params, true, out _out155, out _out156, out _out157, out _out158);
          _1065_overString = _out155;
          _1066___v24 = _out156;
          _1067_overErased = _out157;
          _1068_recIdents = _out158;
          Dafny.ISequence<Dafny.Rune> _1069_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out159;
          _out159 = DCOMP.COMP.GenType(_1063_boundType, false, false);
          _1069_boundTypeStr = _out159;
          readIdents = _1068_recIdents;
          Dafny.ISequence<Dafny.Rune> _1070_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1071_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out160;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out161;
          DCOMP.COMP.GenStmts(_1061_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1064_boundName)), false, earlyReturn, out _out160, out _out161);
          _1070_bodyString = _out160;
          _1071_bodyIdents = _out161;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1071_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1064_boundName));
          Dafny.ISequence<Dafny.Rune> _1072_unerasedIter;
          _1072_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_1067_overErased) {
            _1072_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1069_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1072_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _1065_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1064_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1072_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1070_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source75.is_Call) {
        DAST._IExpression _1073___mcc_h17 = _source75.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1074___mcc_h18 = _source75.dtor_name;
        Dafny.ISequence<DAST._IType> _1075___mcc_h19 = _source75.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1076___mcc_h20 = _source75.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1077___mcc_h21 = _source75.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1078_maybeOutVars = _1077___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1079_args = _1076___mcc_h20;
        Dafny.ISequence<DAST._IType> _1080_typeArgs = _1075___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1081_name = _1074___mcc_h18;
        DAST._IExpression _1082_on = _1073___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1083_typeArgString;
          _1083_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1080_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1084_typeI;
            _1084_typeI = BigInteger.Zero;
            _1083_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_1084_typeI) < (new BigInteger((_1080_typeArgs).Count))) {
              if ((_1084_typeI).Sign == 1) {
                _1083_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1083_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1085_typeString;
              Dafny.ISequence<Dafny.Rune> _out162;
              _out162 = DCOMP.COMP.GenType((_1080_typeArgs).Select(_1084_typeI), false, false);
              _1085_typeString = _out162;
              _1083_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1083_typeArgString, _1085_typeString);
              _1084_typeI = (_1084_typeI) + (BigInteger.One);
            }
            _1083_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1083_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _1086_argString;
          _1086_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1087_i;
          _1087_i = BigInteger.Zero;
          while ((_1087_i) < (new BigInteger((_1079_args).Count))) {
            if ((_1087_i).Sign == 1) {
              _1086_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1086_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1088_argExpr;
            bool _1089_isOwned;
            bool _1090_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1091_argIdents;
            Dafny.ISequence<Dafny.Rune> _out163;
            bool _out164;
            bool _out165;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out166;
            DCOMP.COMP.GenExpr((_1079_args).Select(_1087_i), selfIdent, @params, false, out _out163, out _out164, out _out165, out _out166);
            _1088_argExpr = _out163;
            _1089_isOwned = _out164;
            _1090_argErased = _out165;
            _1091_argIdents = _out166;
            if (_1089_isOwned) {
              _1088_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1088_argExpr);
            }
            _1086_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1086_argString, _1088_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1091_argIdents);
            _1087_i = (_1087_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1092_enclosingString;
          bool _1093___v25;
          bool _1094___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1095_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out167;
          bool _out168;
          bool _out169;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out170;
          DCOMP.COMP.GenExpr(_1082_on, selfIdent, @params, false, out _out167, out _out168, out _out169, out _out170);
          _1092_enclosingString = _out167;
          _1093___v25 = _out168;
          _1094___v26 = _out169;
          _1095_enclosingIdents = _out170;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1095_enclosingIdents);
          DAST._IExpression _source77 = _1082_on;
          if (_source77.is_Literal) {
            DAST._ILiteral _1096___mcc_h26 = _source77.dtor_Literal_a0;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1097___mcc_h28 = _source77.dtor_Ident_a0;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1098___mcc_h30 = _source77.dtor_Companion_a0;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1092_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source77.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1099___mcc_h32 = _source77.dtor_Tuple_a0;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1100___mcc_h34 = _source77.dtor_path;
            Dafny.ISequence<DAST._IType> _1101___mcc_h35 = _source77.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1102___mcc_h36 = _source77.dtor_args;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1103___mcc_h40 = _source77.dtor_dims;
            DAST._IType _1104___mcc_h41 = _source77.dtor_typ;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1105___mcc_h44 = _source77.dtor_path;
            Dafny.ISequence<DAST._IType> _1106___mcc_h45 = _source77.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1107___mcc_h46 = _source77.dtor_variant;
            bool _1108___mcc_h47 = _source77.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1109___mcc_h48 = _source77.dtor_contents;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_Convert) {
            DAST._IExpression _1110___mcc_h54 = _source77.dtor_value;
            DAST._IType _1111___mcc_h55 = _source77.dtor_from;
            DAST._IType _1112___mcc_h56 = _source77.dtor_typ;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_SeqConstruct) {
            DAST._IExpression _1113___mcc_h60 = _source77.dtor_length;
            DAST._IExpression _1114___mcc_h61 = _source77.dtor_elem;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _1115___mcc_h64 = _source77.dtor_elements;
            DAST._IType _1116___mcc_h65 = _source77.dtor_typ;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _1117___mcc_h68 = _source77.dtor_elements;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1118___mcc_h70 = _source77.dtor_mapElems;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_This) {
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_Ite) {
            DAST._IExpression _1119___mcc_h72 = _source77.dtor_cond;
            DAST._IExpression _1120___mcc_h73 = _source77.dtor_thn;
            DAST._IExpression _1121___mcc_h74 = _source77.dtor_els;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_UnOp) {
            DAST._IUnaryOp _1122___mcc_h78 = _source77.dtor_unOp;
            DAST._IExpression _1123___mcc_h79 = _source77.dtor_expr;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_BinOp) {
            DAST._IBinOp _1124___mcc_h82 = _source77.dtor_op;
            DAST._IExpression _1125___mcc_h83 = _source77.dtor_left;
            DAST._IExpression _1126___mcc_h84 = _source77.dtor_right;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_ArrayLen) {
            DAST._IExpression _1127___mcc_h88 = _source77.dtor_expr;
            BigInteger _1128___mcc_h89 = _source77.dtor_dim;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_Select) {
            DAST._IExpression _1129___mcc_h92 = _source77.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1130___mcc_h93 = _source77.dtor_field;
            bool _1131___mcc_h94 = _source77.dtor_isConstant;
            bool _1132___mcc_h95 = _source77.dtor_onDatatype;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_SelectFn) {
            DAST._IExpression _1133___mcc_h100 = _source77.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1134___mcc_h101 = _source77.dtor_field;
            bool _1135___mcc_h102 = _source77.dtor_onDatatype;
            bool _1136___mcc_h103 = _source77.dtor_isStatic;
            BigInteger _1137___mcc_h104 = _source77.dtor_arity;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_Index) {
            DAST._IExpression _1138___mcc_h110 = _source77.dtor_expr;
            DAST._ICollKind _1139___mcc_h111 = _source77.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1140___mcc_h112 = _source77.dtor_indices;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_IndexRange) {
            DAST._IExpression _1141___mcc_h116 = _source77.dtor_expr;
            bool _1142___mcc_h117 = _source77.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _1143___mcc_h118 = _source77.dtor_low;
            DAST._IOptional<DAST._IExpression> _1144___mcc_h119 = _source77.dtor_high;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_TupleSelect) {
            DAST._IExpression _1145___mcc_h124 = _source77.dtor_expr;
            BigInteger _1146___mcc_h125 = _source77.dtor_index;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_Call) {
            DAST._IExpression _1147___mcc_h128 = _source77.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1148___mcc_h129 = _source77.dtor_name;
            Dafny.ISequence<DAST._IType> _1149___mcc_h130 = _source77.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1150___mcc_h131 = _source77.dtor_args;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1151___mcc_h136 = _source77.dtor_params;
            DAST._IType _1152___mcc_h137 = _source77.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1153___mcc_h138 = _source77.dtor_body;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1154___mcc_h142 = _source77.dtor_values;
            DAST._IType _1155___mcc_h143 = _source77.dtor_retType;
            DAST._IExpression _1156___mcc_h144 = _source77.dtor_expr;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1157___mcc_h148 = _source77.dtor_name;
            DAST._IType _1158___mcc_h149 = _source77.dtor_typ;
            DAST._IExpression _1159___mcc_h150 = _source77.dtor_value;
            DAST._IExpression _1160___mcc_h151 = _source77.dtor_iifeBody;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_Apply) {
            DAST._IExpression _1161___mcc_h156 = _source77.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1162___mcc_h157 = _source77.dtor_args;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_TypeTest) {
            DAST._IExpression _1163___mcc_h160 = _source77.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1164___mcc_h161 = _source77.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1165___mcc_h162 = _source77.dtor_variant;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_InitializationValue) {
            DAST._IType _1166___mcc_h166 = _source77.dtor_typ;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_BoolBoundedPool) {
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_SetBoundedPool) {
            DAST._IExpression _1167___mcc_h168 = _source77.dtor_of;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source77.is_SeqBoundedPool) {
            DAST._IExpression _1168___mcc_h170 = _source77.dtor_of;
            bool _1169___mcc_h171 = _source77.dtor_includeDuplicates;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1170___mcc_h174 = _source77.dtor_lo;
            DAST._IExpression _1171___mcc_h175 = _source77.dtor_hi;
            {
              _1092_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1092_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1172_receiver;
          _1172_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source78 = _1078_maybeOutVars;
          if (_source78.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1173___mcc_h178 = _source78.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1174_outVars = _1173___mcc_h178;
            {
              if ((new BigInteger((_1174_outVars).Count)) > (BigInteger.One)) {
                _1172_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1175_outI;
              _1175_outI = BigInteger.Zero;
              while ((_1175_outI) < (new BigInteger((_1174_outVars).Count))) {
                if ((_1175_outI).Sign == 1) {
                  _1172_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1172_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1176_outVar;
                _1176_outVar = (_1174_outVars).Select(_1175_outI);
                _1172_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1172_receiver, (_1176_outVar));
                _1175_outI = (_1175_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1174_outVars).Count)) > (BigInteger.One)) {
                _1172_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1172_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1172_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1172_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1092_enclosingString), DCOMP.__default.escapeIdent(_1081_name)), _1083_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1086_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source75.is_Return) {
        DAST._IExpression _1177___mcc_h22 = _source75.dtor_expr;
        DAST._IExpression _1178_expr = _1177___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1179_exprString;
          bool _1180___v29;
          bool _1181_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1182_recIdents;
          Dafny.ISequence<Dafny.Rune> _out171;
          bool _out172;
          bool _out173;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out174;
          DCOMP.COMP.GenExpr(_1178_expr, selfIdent, @params, true, out _out171, out _out172, out _out173, out _out174);
          _1179_exprString = _out171;
          _1180___v29 = _out172;
          _1181_recErased = _out173;
          _1182_recIdents = _out174;
          _1179_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1179_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1182_recIdents;
          if (isLast) {
            generated = _1179_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1179_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source75.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source75.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1183___mcc_h23 = _source75.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1184_toLabel = _1183___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source79 = _1184_toLabel;
          if (_source79.is_Some) {
            Dafny.ISequence<Dafny.Rune> _1185___mcc_h179 = _source79.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _1186_lbl = _1185___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1186_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source75.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1187___mcc_h24 = _source75.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1188_body = _1187___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1189_paramI;
          _1189_paramI = BigInteger.Zero;
          while ((_1189_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1190_param;
            _1190_param = (@params).Select(_1189_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1190_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1190_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1189_paramI = (_1189_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1191_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1192_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out175;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out176;
          DCOMP.COMP.GenStmts(_1188_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out175, out _out176);
          _1191_bodyString = _out175;
          _1192_bodyIdents = _out176;
          readIdents = _1192_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1191_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source75.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source75.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1193___mcc_h25 = _source75.dtor_Print_a0;
        DAST._IExpression _1194_e = _1193___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1195_printedExpr;
          bool _1196_isOwned;
          bool _1197___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1198_recIdents;
          Dafny.ISequence<Dafny.Rune> _out177;
          bool _out178;
          bool _out179;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out180;
          DCOMP.COMP.GenExpr(_1194_e, selfIdent, @params, false, out _out177, out _out178, out _out179, out _out180);
          _1195_printedExpr = _out177;
          _1196_isOwned = _out178;
          _1197___v30 = _out179;
          _1198_recIdents = _out180;
          if (_1196_isOwned) {
            _1195_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1195_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1195_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1198_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source80 = e;
      if (_source80.is_Literal) {
        DAST._ILiteral _1199___mcc_h0 = _source80.dtor_Literal_a0;
        DAST._ILiteral _source81 = _1199___mcc_h0;
        if (_source81.is_BoolLiteral) {
          bool _1200___mcc_h1 = _source81.dtor_BoolLiteral_a0;
          if ((_1200___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source81.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1201___mcc_h2 = _source81.dtor_IntLiteral_a0;
          DAST._IType _1202___mcc_h3 = _source81.dtor_IntLiteral_a1;
          DAST._IType _1203_t = _1202___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1204_i = _1201___mcc_h2;
          {
            DAST._IType _source82 = _1203_t;
            if (_source82.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1205___mcc_h237 = _source82.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1206___mcc_h238 = _source82.dtor_typeArgs;
              DAST._IResolvedType _1207___mcc_h239 = _source82.dtor_resolved;
              DAST._IType _1208_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1209_genType;
                Dafny.ISequence<Dafny.Rune> _out181;
                _out181 = DCOMP.COMP.GenType(_1208_o, false, false);
                _1209_genType = _out181;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1209_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source82.is_Nullable) {
              DAST._IType _1210___mcc_h243 = _source82.dtor_Nullable_a0;
              DAST._IType _1211_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1212_genType;
                Dafny.ISequence<Dafny.Rune> _out182;
                _out182 = DCOMP.COMP.GenType(_1211_o, false, false);
                _1212_genType = _out182;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1212_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source82.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1213___mcc_h245 = _source82.dtor_Tuple_a0;
              DAST._IType _1214_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1215_genType;
                Dafny.ISequence<Dafny.Rune> _out183;
                _out183 = DCOMP.COMP.GenType(_1214_o, false, false);
                _1215_genType = _out183;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1215_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source82.is_Array) {
              DAST._IType _1216___mcc_h247 = _source82.dtor_element;
              BigInteger _1217___mcc_h248 = _source82.dtor_dims;
              DAST._IType _1218_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1219_genType;
                Dafny.ISequence<Dafny.Rune> _out184;
                _out184 = DCOMP.COMP.GenType(_1218_o, false, false);
                _1219_genType = _out184;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1219_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source82.is_Seq) {
              DAST._IType _1220___mcc_h251 = _source82.dtor_element;
              DAST._IType _1221_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1222_genType;
                Dafny.ISequence<Dafny.Rune> _out185;
                _out185 = DCOMP.COMP.GenType(_1221_o, false, false);
                _1222_genType = _out185;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1222_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source82.is_Set) {
              DAST._IType _1223___mcc_h253 = _source82.dtor_element;
              DAST._IType _1224_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1225_genType;
                Dafny.ISequence<Dafny.Rune> _out186;
                _out186 = DCOMP.COMP.GenType(_1224_o, false, false);
                _1225_genType = _out186;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1225_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source82.is_Multiset) {
              DAST._IType _1226___mcc_h255 = _source82.dtor_element;
              DAST._IType _1227_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1228_genType;
                Dafny.ISequence<Dafny.Rune> _out187;
                _out187 = DCOMP.COMP.GenType(_1227_o, false, false);
                _1228_genType = _out187;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1228_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source82.is_Map) {
              DAST._IType _1229___mcc_h257 = _source82.dtor_key;
              DAST._IType _1230___mcc_h258 = _source82.dtor_value;
              DAST._IType _1231_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1232_genType;
                Dafny.ISequence<Dafny.Rune> _out188;
                _out188 = DCOMP.COMP.GenType(_1231_o, false, false);
                _1232_genType = _out188;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1232_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source82.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1233___mcc_h261 = _source82.dtor_args;
              DAST._IType _1234___mcc_h262 = _source82.dtor_result;
              DAST._IType _1235_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1236_genType;
                Dafny.ISequence<Dafny.Rune> _out189;
                _out189 = DCOMP.COMP.GenType(_1235_o, false, false);
                _1236_genType = _out189;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1236_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source82.is_Primitive) {
              DAST._IPrimitive _1237___mcc_h265 = _source82.dtor_Primitive_a0;
              DAST._IPrimitive _source83 = _1237___mcc_h265;
              if (_source83.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source83.is_Real) {
                DAST._IType _1238_o = _1203_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1239_genType;
                  Dafny.ISequence<Dafny.Rune> _out190;
                  _out190 = DCOMP.COMP.GenType(_1238_o, false, false);
                  _1239_genType = _out190;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1239_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source83.is_String) {
                DAST._IType _1240_o = _1203_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1241_genType;
                  Dafny.ISequence<Dafny.Rune> _out191;
                  _out191 = DCOMP.COMP.GenType(_1240_o, false, false);
                  _1241_genType = _out191;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1241_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source83.is_Bool) {
                DAST._IType _1242_o = _1203_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1243_genType;
                  Dafny.ISequence<Dafny.Rune> _out192;
                  _out192 = DCOMP.COMP.GenType(_1242_o, false, false);
                  _1243_genType = _out192;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1243_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1244_o = _1203_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1245_genType;
                  Dafny.ISequence<Dafny.Rune> _out193;
                  _out193 = DCOMP.COMP.GenType(_1244_o, false, false);
                  _1245_genType = _out193;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1245_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source82.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1246___mcc_h267 = _source82.dtor_Passthrough_a0;
              DAST._IType _1247_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1248_genType;
                Dafny.ISequence<Dafny.Rune> _out194;
                _out194 = DCOMP.COMP.GenType(_1247_o, false, false);
                _1248_genType = _out194;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1248_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1249___mcc_h269 = _source82.dtor_TypeArg_a0;
              DAST._IType _1250_o = _1203_t;
              {
                Dafny.ISequence<Dafny.Rune> _1251_genType;
                Dafny.ISequence<Dafny.Rune> _out195;
                _out195 = DCOMP.COMP.GenType(_1250_o, false, false);
                _1251_genType = _out195;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1251_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source81.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1252___mcc_h4 = _source81.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1253___mcc_h5 = _source81.dtor_DecLiteral_a1;
          DAST._IType _1254___mcc_h6 = _source81.dtor_DecLiteral_a2;
          DAST._IType _1255_t = _1254___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1256_d = _1253___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1257_n = _1252___mcc_h4;
          {
            DAST._IType _source84 = _1255_t;
            if (_source84.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1258___mcc_h271 = _source84.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1259___mcc_h272 = _source84.dtor_typeArgs;
              DAST._IResolvedType _1260___mcc_h273 = _source84.dtor_resolved;
              DAST._IType _1261_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1262_genType;
                Dafny.ISequence<Dafny.Rune> _out196;
                _out196 = DCOMP.COMP.GenType(_1261_o, false, false);
                _1262_genType = _out196;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1262_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source84.is_Nullable) {
              DAST._IType _1263___mcc_h277 = _source84.dtor_Nullable_a0;
              DAST._IType _1264_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1265_genType;
                Dafny.ISequence<Dafny.Rune> _out197;
                _out197 = DCOMP.COMP.GenType(_1264_o, false, false);
                _1265_genType = _out197;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1265_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source84.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1266___mcc_h279 = _source84.dtor_Tuple_a0;
              DAST._IType _1267_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1268_genType;
                Dafny.ISequence<Dafny.Rune> _out198;
                _out198 = DCOMP.COMP.GenType(_1267_o, false, false);
                _1268_genType = _out198;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1268_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source84.is_Array) {
              DAST._IType _1269___mcc_h281 = _source84.dtor_element;
              BigInteger _1270___mcc_h282 = _source84.dtor_dims;
              DAST._IType _1271_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1272_genType;
                Dafny.ISequence<Dafny.Rune> _out199;
                _out199 = DCOMP.COMP.GenType(_1271_o, false, false);
                _1272_genType = _out199;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1272_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source84.is_Seq) {
              DAST._IType _1273___mcc_h285 = _source84.dtor_element;
              DAST._IType _1274_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1275_genType;
                Dafny.ISequence<Dafny.Rune> _out200;
                _out200 = DCOMP.COMP.GenType(_1274_o, false, false);
                _1275_genType = _out200;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1275_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source84.is_Set) {
              DAST._IType _1276___mcc_h287 = _source84.dtor_element;
              DAST._IType _1277_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1278_genType;
                Dafny.ISequence<Dafny.Rune> _out201;
                _out201 = DCOMP.COMP.GenType(_1277_o, false, false);
                _1278_genType = _out201;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1278_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source84.is_Multiset) {
              DAST._IType _1279___mcc_h289 = _source84.dtor_element;
              DAST._IType _1280_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1281_genType;
                Dafny.ISequence<Dafny.Rune> _out202;
                _out202 = DCOMP.COMP.GenType(_1280_o, false, false);
                _1281_genType = _out202;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1281_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source84.is_Map) {
              DAST._IType _1282___mcc_h291 = _source84.dtor_key;
              DAST._IType _1283___mcc_h292 = _source84.dtor_value;
              DAST._IType _1284_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1285_genType;
                Dafny.ISequence<Dafny.Rune> _out203;
                _out203 = DCOMP.COMP.GenType(_1284_o, false, false);
                _1285_genType = _out203;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1285_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source84.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1286___mcc_h295 = _source84.dtor_args;
              DAST._IType _1287___mcc_h296 = _source84.dtor_result;
              DAST._IType _1288_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1289_genType;
                Dafny.ISequence<Dafny.Rune> _out204;
                _out204 = DCOMP.COMP.GenType(_1288_o, false, false);
                _1289_genType = _out204;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1289_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source84.is_Primitive) {
              DAST._IPrimitive _1290___mcc_h299 = _source84.dtor_Primitive_a0;
              DAST._IPrimitive _source85 = _1290___mcc_h299;
              if (_source85.is_Int) {
                DAST._IType _1291_o = _1255_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1292_genType;
                  Dafny.ISequence<Dafny.Rune> _out205;
                  _out205 = DCOMP.COMP.GenType(_1291_o, false, false);
                  _1292_genType = _out205;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1292_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source85.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source85.is_String) {
                DAST._IType _1293_o = _1255_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1294_genType;
                  Dafny.ISequence<Dafny.Rune> _out206;
                  _out206 = DCOMP.COMP.GenType(_1293_o, false, false);
                  _1294_genType = _out206;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1294_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source85.is_Bool) {
                DAST._IType _1295_o = _1255_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1296_genType;
                  Dafny.ISequence<Dafny.Rune> _out207;
                  _out207 = DCOMP.COMP.GenType(_1295_o, false, false);
                  _1296_genType = _out207;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1296_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1297_o = _1255_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1298_genType;
                  Dafny.ISequence<Dafny.Rune> _out208;
                  _out208 = DCOMP.COMP.GenType(_1297_o, false, false);
                  _1298_genType = _out208;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1298_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source84.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1299___mcc_h301 = _source84.dtor_Passthrough_a0;
              DAST._IType _1300_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1301_genType;
                Dafny.ISequence<Dafny.Rune> _out209;
                _out209 = DCOMP.COMP.GenType(_1300_o, false, false);
                _1301_genType = _out209;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1301_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1302___mcc_h303 = _source84.dtor_TypeArg_a0;
              DAST._IType _1303_o = _1255_t;
              {
                Dafny.ISequence<Dafny.Rune> _1304_genType;
                Dafny.ISequence<Dafny.Rune> _out210;
                _out210 = DCOMP.COMP.GenType(_1303_o, false, false);
                _1304_genType = _out210;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1257_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1256_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1304_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source81.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1305___mcc_h7 = _source81.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1306_l = _1305___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1306_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source81.is_CharLiteral) {
          Dafny.Rune _1307___mcc_h8 = _source81.dtor_CharLiteral_a0;
          Dafny.Rune _1308_c = _1307___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_1308_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1309___mcc_h9 = _source81.dtor_Null_a0;
          DAST._IType _1310_tpe = _1309___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1311_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out211;
            _out211 = DCOMP.COMP.GenType(_1310_tpe, false, false);
            _1311_tpeGen = _out211;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1311_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source80.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1312___mcc_h10 = _source80.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1313_name = _1312___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1313_name);
          if (!((@params).Contains(_1313_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1313_name);
        }
      } else if (_source80.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1314___mcc_h11 = _source80.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1315_path = _1314___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out212;
          _out212 = DCOMP.COMP.GenPath(_1315_path);
          s = _out212;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source80.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1316___mcc_h12 = _source80.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1317_values = _1316___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1318_i;
          _1318_i = BigInteger.Zero;
          while ((_1318_i) < (new BigInteger((_1317_values).Count))) {
            if ((_1318_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1319_recursiveGen;
            bool _1320___v31;
            bool _1321_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1322_recIdents;
            Dafny.ISequence<Dafny.Rune> _out213;
            bool _out214;
            bool _out215;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out216;
            DCOMP.COMP.GenExpr((_1317_values).Select(_1318_i), selfIdent, @params, true, out _out213, out _out214, out _out215, out _out216);
            _1319_recursiveGen = _out213;
            _1320___v31 = _out214;
            _1321_isErased = _out215;
            _1322_recIdents = _out216;
            if (_1321_isErased) {
              _1319_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1319_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1319_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1322_recIdents);
            _1318_i = (_1318_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source80.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1323___mcc_h13 = _source80.dtor_path;
        Dafny.ISequence<DAST._IType> _1324___mcc_h14 = _source80.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1325___mcc_h15 = _source80.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1326_args = _1325___mcc_h15;
        Dafny.ISequence<DAST._IType> _1327_typeArgs = _1324___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1328_path = _1323___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1329_path;
          Dafny.ISequence<Dafny.Rune> _out217;
          _out217 = DCOMP.COMP.GenPath(_1328_path);
          _1329_path = _out217;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1329_path);
          if ((new BigInteger((_1327_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1330_i;
            _1330_i = BigInteger.Zero;
            while ((_1330_i) < (new BigInteger((_1327_typeArgs).Count))) {
              if ((_1330_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1331_typeString;
              Dafny.ISequence<Dafny.Rune> _out218;
              _out218 = DCOMP.COMP.GenType((_1327_typeArgs).Select(_1330_i), false, false);
              _1331_typeString = _out218;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1331_typeString);
              _1330_i = (_1330_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1332_i;
          _1332_i = BigInteger.Zero;
          while ((_1332_i) < (new BigInteger((_1326_args).Count))) {
            if ((_1332_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1333_recursiveGen;
            bool _1334___v32;
            bool _1335_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1336_recIdents;
            Dafny.ISequence<Dafny.Rune> _out219;
            bool _out220;
            bool _out221;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
            DCOMP.COMP.GenExpr((_1326_args).Select(_1332_i), selfIdent, @params, true, out _out219, out _out220, out _out221, out _out222);
            _1333_recursiveGen = _out219;
            _1334___v32 = _out220;
            _1335_isErased = _out221;
            _1336_recIdents = _out222;
            if (_1335_isErased) {
              _1333_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1333_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1333_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1336_recIdents);
            _1332_i = (_1332_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source80.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1337___mcc_h16 = _source80.dtor_dims;
        DAST._IType _1338___mcc_h17 = _source80.dtor_typ;
        DAST._IType _1339_typ = _1338___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1340_dims = _1337___mcc_h16;
        {
          BigInteger _1341_i;
          _1341_i = (new BigInteger((_1340_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1342_genTyp;
          Dafny.ISequence<Dafny.Rune> _out223;
          _out223 = DCOMP.COMP.GenType(_1339_typ, false, false);
          _1342_genTyp = _out223;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1342_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1341_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1343_recursiveGen;
            bool _1344___v33;
            bool _1345_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1346_recIdents;
            Dafny.ISequence<Dafny.Rune> _out224;
            bool _out225;
            bool _out226;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out227;
            DCOMP.COMP.GenExpr((_1340_dims).Select(_1341_i), selfIdent, @params, true, out _out224, out _out225, out _out226, out _out227);
            _1343_recursiveGen = _out224;
            _1344___v33 = _out225;
            _1345_isErased = _out226;
            _1346_recIdents = _out227;
            if (!(_1345_isErased)) {
              _1343_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1343_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1343_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1346_recIdents);
            _1341_i = (_1341_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source80.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1347___mcc_h18 = _source80.dtor_path;
        Dafny.ISequence<DAST._IType> _1348___mcc_h19 = _source80.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1349___mcc_h20 = _source80.dtor_variant;
        bool _1350___mcc_h21 = _source80.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1351___mcc_h22 = _source80.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1352_values = _1351___mcc_h22;
        bool _1353_isCo = _1350___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1354_variant = _1349___mcc_h20;
        Dafny.ISequence<DAST._IType> _1355_typeArgs = _1348___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1356_path = _1347___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1357_path;
          Dafny.ISequence<Dafny.Rune> _out228;
          _out228 = DCOMP.COMP.GenPath(_1356_path);
          _1357_path = _out228;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1357_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1355_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1358_i;
            _1358_i = BigInteger.Zero;
            while ((_1358_i) < (new BigInteger((_1355_typeArgs).Count))) {
              if ((_1358_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1359_typeString;
              Dafny.ISequence<Dafny.Rune> _out229;
              _out229 = DCOMP.COMP.GenType((_1355_typeArgs).Select(_1358_i), false, false);
              _1359_typeString = _out229;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1359_typeString);
              _1358_i = (_1358_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1354_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1360_i;
          _1360_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1360_i) < (new BigInteger((_1352_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs7 = (_1352_values).Select(_1360_i);
            Dafny.ISequence<Dafny.Rune> _1361_name = _let_tmp_rhs7.dtor__0;
            DAST._IExpression _1362_value = _let_tmp_rhs7.dtor__1;
            if ((_1360_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1353_isCo) {
              Dafny.ISequence<Dafny.Rune> _1363_recursiveGen;
              bool _1364___v34;
              bool _1365_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1366_recIdents;
              Dafny.ISequence<Dafny.Rune> _out230;
              bool _out231;
              bool _out232;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out233;
              DCOMP.COMP.GenExpr(_1362_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out230, out _out231, out _out232, out _out233);
              _1363_recursiveGen = _out230;
              _1364___v34 = _out231;
              _1365_isErased = _out232;
              _1366_recIdents = _out233;
              if (!(_1365_isErased)) {
                _1363_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1363_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1363_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1363_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1366_recIdents);
              Dafny.ISequence<Dafny.Rune> _1367_allReadCloned;
              _1367_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1366_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1368_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_1366_recIdents).Elements) {
                  _1368_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_1366_recIdents).Contains(_1368_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _1367_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1367_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1368_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1368_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1366_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1366_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1368_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1361_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1367_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1363_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1369_recursiveGen;
              bool _1370___v35;
              bool _1371_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1372_recIdents;
              Dafny.ISequence<Dafny.Rune> _out234;
              bool _out235;
              bool _out236;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out237;
              DCOMP.COMP.GenExpr(_1362_value, selfIdent, @params, true, out _out234, out _out235, out _out236, out _out237);
              _1369_recursiveGen = _out234;
              _1370___v35 = _out235;
              _1371_isErased = _out236;
              _1372_recIdents = _out237;
              if (!(_1371_isErased)) {
                _1369_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1369_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1369_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1369_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1361_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1369_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1372_recIdents);
            }
            _1360_i = (_1360_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source80.is_Convert) {
        DAST._IExpression _1373___mcc_h23 = _source80.dtor_value;
        DAST._IType _1374___mcc_h24 = _source80.dtor_from;
        DAST._IType _1375___mcc_h25 = _source80.dtor_typ;
        DAST._IType _1376_toTpe = _1375___mcc_h25;
        DAST._IType _1377_fromTpe = _1374___mcc_h24;
        DAST._IExpression _1378_expr = _1373___mcc_h23;
        {
          if (object.Equals(_1377_fromTpe, _1376_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1379_recursiveGen;
            bool _1380_recOwned;
            bool _1381_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1382_recIdents;
            Dafny.ISequence<Dafny.Rune> _out238;
            bool _out239;
            bool _out240;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out241;
            DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out238, out _out239, out _out240, out _out241);
            _1379_recursiveGen = _out238;
            _1380_recOwned = _out239;
            _1381_recErased = _out240;
            _1382_recIdents = _out241;
            s = _1379_recursiveGen;
            isOwned = _1380_recOwned;
            isErased = _1381_recErased;
            readIdents = _1382_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source86 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1377_fromTpe, _1376_toTpe);
            DAST._IType _1383___mcc_h305 = _source86.dtor__0;
            DAST._IType _1384___mcc_h306 = _source86.dtor__1;
            DAST._IType _source87 = _1383___mcc_h305;
            if (_source87.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1385___mcc_h309 = _source87.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1386___mcc_h310 = _source87.dtor_typeArgs;
              DAST._IResolvedType _1387___mcc_h311 = _source87.dtor_resolved;
              DAST._IResolvedType _source88 = _1387___mcc_h311;
              if (_source88.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1388___mcc_h321 = _source88.dtor_path;
                DAST._IType _source89 = _1384___mcc_h306;
                if (_source89.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1389___mcc_h325 = _source89.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1390___mcc_h326 = _source89.dtor_typeArgs;
                  DAST._IResolvedType _1391___mcc_h327 = _source89.dtor_resolved;
                  DAST._IResolvedType _source90 = _1391___mcc_h327;
                  if (_source90.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1392___mcc_h331 = _source90.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1393_recursiveGen;
                      bool _1394_recOwned;
                      bool _1395_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1396_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out242;
                      bool _out243;
                      bool _out244;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out245;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out242, out _out243, out _out244, out _out245);
                      _1393_recursiveGen = _out242;
                      _1394_recOwned = _out243;
                      _1395_recErased = _out244;
                      _1396_recIdents = _out245;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1393_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1394_recOwned;
                      isErased = _1395_recErased;
                      readIdents = _1396_recIdents;
                    }
                  } else if (_source90.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1397___mcc_h333 = _source90.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1398_recursiveGen;
                      bool _1399_recOwned;
                      bool _1400_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1401_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out246;
                      bool _out247;
                      bool _out248;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out249;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out246, out _out247, out _out248, out _out249);
                      _1398_recursiveGen = _out246;
                      _1399_recOwned = _out247;
                      _1400_recErased = _out248;
                      _1401_recIdents = _out249;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1398_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1399_recOwned;
                      isErased = _1400_recErased;
                      readIdents = _1401_recIdents;
                    }
                  } else {
                    DAST._IType _1402___mcc_h335 = _source90.dtor_Newtype_a0;
                    DAST._IType _1403_b = _1402___mcc_h335;
                    {
                      if (object.Equals(_1377_fromTpe, _1403_b)) {
                        Dafny.ISequence<Dafny.Rune> _1404_recursiveGen;
                        bool _1405_recOwned;
                        bool _1406_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1407_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out250;
                        bool _out251;
                        bool _out252;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out253;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out250, out _out251, out _out252, out _out253);
                        _1404_recursiveGen = _out250;
                        _1405_recOwned = _out251;
                        _1406_recErased = _out252;
                        _1407_recIdents = _out253;
                        Dafny.ISequence<Dafny.Rune> _1408_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out254;
                        _out254 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                        _1408_rhsType = _out254;
                        Dafny.ISequence<Dafny.Rune> _1409_uneraseFn;
                        _1409_uneraseFn = ((_1405_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1408_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1409_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1404_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1405_recOwned;
                        isErased = false;
                        readIdents = _1407_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out255;
                        bool _out256;
                        bool _out257;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out258;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1403_b), _1403_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out255, out _out256, out _out257, out _out258);
                        s = _out255;
                        isOwned = _out256;
                        isErased = _out257;
                        readIdents = _out258;
                      }
                    }
                  }
                } else if (_source89.is_Nullable) {
                  DAST._IType _1410___mcc_h337 = _source89.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1411_recursiveGen;
                    bool _1412_recOwned;
                    bool _1413_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1414_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out259;
                    bool _out260;
                    bool _out261;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out262;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out259, out _out260, out _out261, out _out262);
                    _1411_recursiveGen = _out259;
                    _1412_recOwned = _out260;
                    _1413_recErased = _out261;
                    _1414_recIdents = _out262;
                    if (!(_1412_recOwned)) {
                      _1411_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1411_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1411_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1413_recErased;
                    readIdents = _1414_recIdents;
                  }
                } else if (_source89.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1415___mcc_h339 = _source89.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1416_recursiveGen;
                    bool _1417_recOwned;
                    bool _1418_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1419_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out263;
                    bool _out264;
                    bool _out265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out266;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out263, out _out264, out _out265, out _out266);
                    _1416_recursiveGen = _out263;
                    _1417_recOwned = _out264;
                    _1418_recErased = _out265;
                    _1419_recIdents = _out266;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1416_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1417_recOwned;
                    isErased = _1418_recErased;
                    readIdents = _1419_recIdents;
                  }
                } else if (_source89.is_Array) {
                  DAST._IType _1420___mcc_h341 = _source89.dtor_element;
                  BigInteger _1421___mcc_h342 = _source89.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1422_recursiveGen;
                    bool _1423_recOwned;
                    bool _1424_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1425_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out267;
                    bool _out268;
                    bool _out269;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out267, out _out268, out _out269, out _out270);
                    _1422_recursiveGen = _out267;
                    _1423_recOwned = _out268;
                    _1424_recErased = _out269;
                    _1425_recIdents = _out270;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1422_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1423_recOwned;
                    isErased = _1424_recErased;
                    readIdents = _1425_recIdents;
                  }
                } else if (_source89.is_Seq) {
                  DAST._IType _1426___mcc_h345 = _source89.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1427_recursiveGen;
                    bool _1428_recOwned;
                    bool _1429_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1430_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out271;
                    bool _out272;
                    bool _out273;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out274;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out271, out _out272, out _out273, out _out274);
                    _1427_recursiveGen = _out271;
                    _1428_recOwned = _out272;
                    _1429_recErased = _out273;
                    _1430_recIdents = _out274;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1427_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1428_recOwned;
                    isErased = _1429_recErased;
                    readIdents = _1430_recIdents;
                  }
                } else if (_source89.is_Set) {
                  DAST._IType _1431___mcc_h347 = _source89.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1432_recursiveGen;
                    bool _1433_recOwned;
                    bool _1434_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1435_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out275;
                    bool _out276;
                    bool _out277;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                    _1432_recursiveGen = _out275;
                    _1433_recOwned = _out276;
                    _1434_recErased = _out277;
                    _1435_recIdents = _out278;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1432_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1433_recOwned;
                    isErased = _1434_recErased;
                    readIdents = _1435_recIdents;
                  }
                } else if (_source89.is_Multiset) {
                  DAST._IType _1436___mcc_h349 = _source89.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1437_recursiveGen;
                    bool _1438_recOwned;
                    bool _1439_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1440_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out279;
                    bool _out280;
                    bool _out281;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out282;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out279, out _out280, out _out281, out _out282);
                    _1437_recursiveGen = _out279;
                    _1438_recOwned = _out280;
                    _1439_recErased = _out281;
                    _1440_recIdents = _out282;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1437_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1438_recOwned;
                    isErased = _1439_recErased;
                    readIdents = _1440_recIdents;
                  }
                } else if (_source89.is_Map) {
                  DAST._IType _1441___mcc_h351 = _source89.dtor_key;
                  DAST._IType _1442___mcc_h352 = _source89.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1443_recursiveGen;
                    bool _1444_recOwned;
                    bool _1445_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1446_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out283;
                    bool _out284;
                    bool _out285;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out286;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out283, out _out284, out _out285, out _out286);
                    _1443_recursiveGen = _out283;
                    _1444_recOwned = _out284;
                    _1445_recErased = _out285;
                    _1446_recIdents = _out286;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1443_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1444_recOwned;
                    isErased = _1445_recErased;
                    readIdents = _1446_recIdents;
                  }
                } else if (_source89.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1447___mcc_h355 = _source89.dtor_args;
                  DAST._IType _1448___mcc_h356 = _source89.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1449_recursiveGen;
                    bool _1450_recOwned;
                    bool _1451_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1452_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out287;
                    bool _out288;
                    bool _out289;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out287, out _out288, out _out289, out _out290);
                    _1449_recursiveGen = _out287;
                    _1450_recOwned = _out288;
                    _1451_recErased = _out289;
                    _1452_recIdents = _out290;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1449_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1450_recOwned;
                    isErased = _1451_recErased;
                    readIdents = _1452_recIdents;
                  }
                } else if (_source89.is_Primitive) {
                  DAST._IPrimitive _1453___mcc_h359 = _source89.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1454_recursiveGen;
                    bool _1455_recOwned;
                    bool _1456_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1457_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out291;
                    bool _out292;
                    bool _out293;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out294;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out291, out _out292, out _out293, out _out294);
                    _1454_recursiveGen = _out291;
                    _1455_recOwned = _out292;
                    _1456_recErased = _out293;
                    _1457_recIdents = _out294;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1454_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1455_recOwned;
                    isErased = _1456_recErased;
                    readIdents = _1457_recIdents;
                  }
                } else if (_source89.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1458___mcc_h361 = _source89.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1459_recursiveGen;
                    bool _1460_recOwned;
                    bool _1461_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1462_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out295;
                    bool _out296;
                    bool _out297;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out298;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out295, out _out296, out _out297, out _out298);
                    _1459_recursiveGen = _out295;
                    _1460_recOwned = _out296;
                    _1461_recErased = _out297;
                    _1462_recIdents = _out298;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1459_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1460_recOwned;
                    isErased = _1461_recErased;
                    readIdents = _1462_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1463___mcc_h363 = _source89.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1464_recursiveGen;
                    bool _1465_recOwned;
                    bool _1466_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1467_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out299;
                    bool _out300;
                    bool _out301;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out302;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out299, out _out300, out _out301, out _out302);
                    _1464_recursiveGen = _out299;
                    _1465_recOwned = _out300;
                    _1466_recErased = _out301;
                    _1467_recIdents = _out302;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1464_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1465_recOwned;
                    isErased = _1466_recErased;
                    readIdents = _1467_recIdents;
                  }
                }
              } else if (_source88.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1468___mcc_h365 = _source88.dtor_path;
                DAST._IType _source91 = _1384___mcc_h306;
                if (_source91.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1469___mcc_h369 = _source91.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1470___mcc_h370 = _source91.dtor_typeArgs;
                  DAST._IResolvedType _1471___mcc_h371 = _source91.dtor_resolved;
                  DAST._IResolvedType _source92 = _1471___mcc_h371;
                  if (_source92.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1472___mcc_h375 = _source92.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1473_recursiveGen;
                      bool _1474_recOwned;
                      bool _1475_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1476_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out303;
                      bool _out304;
                      bool _out305;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out306;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out303, out _out304, out _out305, out _out306);
                      _1473_recursiveGen = _out303;
                      _1474_recOwned = _out304;
                      _1475_recErased = _out305;
                      _1476_recIdents = _out306;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1473_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1474_recOwned;
                      isErased = _1475_recErased;
                      readIdents = _1476_recIdents;
                    }
                  } else if (_source92.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1477___mcc_h377 = _source92.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1478_recursiveGen;
                      bool _1479_recOwned;
                      bool _1480_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1481_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out307;
                      bool _out308;
                      bool _out309;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out310;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out307, out _out308, out _out309, out _out310);
                      _1478_recursiveGen = _out307;
                      _1479_recOwned = _out308;
                      _1480_recErased = _out309;
                      _1481_recIdents = _out310;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1478_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1479_recOwned;
                      isErased = _1480_recErased;
                      readIdents = _1481_recIdents;
                    }
                  } else {
                    DAST._IType _1482___mcc_h379 = _source92.dtor_Newtype_a0;
                    DAST._IType _1483_b = _1482___mcc_h379;
                    {
                      if (object.Equals(_1377_fromTpe, _1483_b)) {
                        Dafny.ISequence<Dafny.Rune> _1484_recursiveGen;
                        bool _1485_recOwned;
                        bool _1486_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1487_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out311;
                        bool _out312;
                        bool _out313;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out314;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out311, out _out312, out _out313, out _out314);
                        _1484_recursiveGen = _out311;
                        _1485_recOwned = _out312;
                        _1486_recErased = _out313;
                        _1487_recIdents = _out314;
                        Dafny.ISequence<Dafny.Rune> _1488_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out315;
                        _out315 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                        _1488_rhsType = _out315;
                        Dafny.ISequence<Dafny.Rune> _1489_uneraseFn;
                        _1489_uneraseFn = ((_1485_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1488_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1489_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1484_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1485_recOwned;
                        isErased = false;
                        readIdents = _1487_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out316;
                        bool _out317;
                        bool _out318;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out319;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1483_b), _1483_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out316, out _out317, out _out318, out _out319);
                        s = _out316;
                        isOwned = _out317;
                        isErased = _out318;
                        readIdents = _out319;
                      }
                    }
                  }
                } else if (_source91.is_Nullable) {
                  DAST._IType _1490___mcc_h381 = _source91.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1491_recursiveGen;
                    bool _1492_recOwned;
                    bool _1493_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1494_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out320;
                    bool _out321;
                    bool _out322;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out320, out _out321, out _out322, out _out323);
                    _1491_recursiveGen = _out320;
                    _1492_recOwned = _out321;
                    _1493_recErased = _out322;
                    _1494_recIdents = _out323;
                    if (!(_1492_recOwned)) {
                      _1491_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1491_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1491_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1493_recErased;
                    readIdents = _1494_recIdents;
                  }
                } else if (_source91.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1495___mcc_h383 = _source91.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1496_recursiveGen;
                    bool _1497_recOwned;
                    bool _1498_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1499_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out324;
                    bool _out325;
                    bool _out326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out327;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out324, out _out325, out _out326, out _out327);
                    _1496_recursiveGen = _out324;
                    _1497_recOwned = _out325;
                    _1498_recErased = _out326;
                    _1499_recIdents = _out327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1496_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1497_recOwned;
                    isErased = _1498_recErased;
                    readIdents = _1499_recIdents;
                  }
                } else if (_source91.is_Array) {
                  DAST._IType _1500___mcc_h385 = _source91.dtor_element;
                  BigInteger _1501___mcc_h386 = _source91.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1502_recursiveGen;
                    bool _1503_recOwned;
                    bool _1504_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1505_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out328;
                    bool _out329;
                    bool _out330;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out328, out _out329, out _out330, out _out331);
                    _1502_recursiveGen = _out328;
                    _1503_recOwned = _out329;
                    _1504_recErased = _out330;
                    _1505_recIdents = _out331;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1502_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1503_recOwned;
                    isErased = _1504_recErased;
                    readIdents = _1505_recIdents;
                  }
                } else if (_source91.is_Seq) {
                  DAST._IType _1506___mcc_h389 = _source91.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1507_recursiveGen;
                    bool _1508_recOwned;
                    bool _1509_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1510_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out332;
                    bool _out333;
                    bool _out334;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out335;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out332, out _out333, out _out334, out _out335);
                    _1507_recursiveGen = _out332;
                    _1508_recOwned = _out333;
                    _1509_recErased = _out334;
                    _1510_recIdents = _out335;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1507_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1508_recOwned;
                    isErased = _1509_recErased;
                    readIdents = _1510_recIdents;
                  }
                } else if (_source91.is_Set) {
                  DAST._IType _1511___mcc_h391 = _source91.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1512_recursiveGen;
                    bool _1513_recOwned;
                    bool _1514_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1515_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out336;
                    bool _out337;
                    bool _out338;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                    _1512_recursiveGen = _out336;
                    _1513_recOwned = _out337;
                    _1514_recErased = _out338;
                    _1515_recIdents = _out339;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1512_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1513_recOwned;
                    isErased = _1514_recErased;
                    readIdents = _1515_recIdents;
                  }
                } else if (_source91.is_Multiset) {
                  DAST._IType _1516___mcc_h393 = _source91.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1517_recursiveGen;
                    bool _1518_recOwned;
                    bool _1519_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1520_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out340;
                    bool _out341;
                    bool _out342;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                    _1517_recursiveGen = _out340;
                    _1518_recOwned = _out341;
                    _1519_recErased = _out342;
                    _1520_recIdents = _out343;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1517_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1518_recOwned;
                    isErased = _1519_recErased;
                    readIdents = _1520_recIdents;
                  }
                } else if (_source91.is_Map) {
                  DAST._IType _1521___mcc_h395 = _source91.dtor_key;
                  DAST._IType _1522___mcc_h396 = _source91.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1523_recursiveGen;
                    bool _1524_recOwned;
                    bool _1525_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1526_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out344;
                    bool _out345;
                    bool _out346;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                    _1523_recursiveGen = _out344;
                    _1524_recOwned = _out345;
                    _1525_recErased = _out346;
                    _1526_recIdents = _out347;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1523_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1524_recOwned;
                    isErased = _1525_recErased;
                    readIdents = _1526_recIdents;
                  }
                } else if (_source91.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1527___mcc_h399 = _source91.dtor_args;
                  DAST._IType _1528___mcc_h400 = _source91.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1529_recursiveGen;
                    bool _1530_recOwned;
                    bool _1531_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1532_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out348;
                    bool _out349;
                    bool _out350;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out348, out _out349, out _out350, out _out351);
                    _1529_recursiveGen = _out348;
                    _1530_recOwned = _out349;
                    _1531_recErased = _out350;
                    _1532_recIdents = _out351;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1529_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1530_recOwned;
                    isErased = _1531_recErased;
                    readIdents = _1532_recIdents;
                  }
                } else if (_source91.is_Primitive) {
                  DAST._IPrimitive _1533___mcc_h403 = _source91.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1534_recursiveGen;
                    bool _1535_recOwned;
                    bool _1536_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1537_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out352;
                    bool _out353;
                    bool _out354;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out355;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out352, out _out353, out _out354, out _out355);
                    _1534_recursiveGen = _out352;
                    _1535_recOwned = _out353;
                    _1536_recErased = _out354;
                    _1537_recIdents = _out355;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1534_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1535_recOwned;
                    isErased = _1536_recErased;
                    readIdents = _1537_recIdents;
                  }
                } else if (_source91.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1538___mcc_h405 = _source91.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1539_recursiveGen;
                    bool _1540_recOwned;
                    bool _1541_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1542_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out356;
                    bool _out357;
                    bool _out358;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out359;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out356, out _out357, out _out358, out _out359);
                    _1539_recursiveGen = _out356;
                    _1540_recOwned = _out357;
                    _1541_recErased = _out358;
                    _1542_recIdents = _out359;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1539_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1540_recOwned;
                    isErased = _1541_recErased;
                    readIdents = _1542_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1543___mcc_h407 = _source91.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1544_recursiveGen;
                    bool _1545_recOwned;
                    bool _1546_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1547_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out360;
                    bool _out361;
                    bool _out362;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out363;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out360, out _out361, out _out362, out _out363);
                    _1544_recursiveGen = _out360;
                    _1545_recOwned = _out361;
                    _1546_recErased = _out362;
                    _1547_recIdents = _out363;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1544_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1545_recOwned;
                    isErased = _1546_recErased;
                    readIdents = _1547_recIdents;
                  }
                }
              } else {
                DAST._IType _1548___mcc_h409 = _source88.dtor_Newtype_a0;
                DAST._IType _source93 = _1384___mcc_h306;
                if (_source93.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1549___mcc_h413 = _source93.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1550___mcc_h414 = _source93.dtor_typeArgs;
                  DAST._IResolvedType _1551___mcc_h415 = _source93.dtor_resolved;
                  DAST._IResolvedType _source94 = _1551___mcc_h415;
                  if (_source94.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1552___mcc_h422 = _source94.dtor_path;
                    DAST._IType _1553_b = _1548___mcc_h409;
                    {
                      if (object.Equals(_1553_b, _1376_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1554_recursiveGen;
                        bool _1555_recOwned;
                        bool _1556_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1557_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out364;
                        bool _out365;
                        bool _out366;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out367;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out364, out _out365, out _out366, out _out367);
                        _1554_recursiveGen = _out364;
                        _1555_recOwned = _out365;
                        _1556_recErased = _out366;
                        _1557_recIdents = _out367;
                        Dafny.ISequence<Dafny.Rune> _1558_uneraseFn;
                        _1558_uneraseFn = ((_1555_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1558_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1554_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1555_recOwned;
                        isErased = true;
                        readIdents = _1557_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out368;
                        bool _out369;
                        bool _out370;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1553_b), _1553_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out368, out _out369, out _out370, out _out371);
                        s = _out368;
                        isOwned = _out369;
                        isErased = _out370;
                        readIdents = _out371;
                      }
                    }
                  } else if (_source94.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1559___mcc_h425 = _source94.dtor_path;
                    DAST._IType _1560_b = _1548___mcc_h409;
                    {
                      if (object.Equals(_1560_b, _1376_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1561_recursiveGen;
                        bool _1562_recOwned;
                        bool _1563_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1564_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out372;
                        bool _out373;
                        bool _out374;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out375;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out372, out _out373, out _out374, out _out375);
                        _1561_recursiveGen = _out372;
                        _1562_recOwned = _out373;
                        _1563_recErased = _out374;
                        _1564_recIdents = _out375;
                        Dafny.ISequence<Dafny.Rune> _1565_uneraseFn;
                        _1565_uneraseFn = ((_1562_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1565_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1561_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1562_recOwned;
                        isErased = true;
                        readIdents = _1564_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out376;
                        bool _out377;
                        bool _out378;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out379;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1560_b), _1560_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out376, out _out377, out _out378, out _out379);
                        s = _out376;
                        isOwned = _out377;
                        isErased = _out378;
                        readIdents = _out379;
                      }
                    }
                  } else {
                    DAST._IType _1566___mcc_h428 = _source94.dtor_Newtype_a0;
                    DAST._IType _1567_b = _1566___mcc_h428;
                    {
                      if (object.Equals(_1377_fromTpe, _1567_b)) {
                        Dafny.ISequence<Dafny.Rune> _1568_recursiveGen;
                        bool _1569_recOwned;
                        bool _1570_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1571_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out380;
                        bool _out381;
                        bool _out382;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out383;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out380, out _out381, out _out382, out _out383);
                        _1568_recursiveGen = _out380;
                        _1569_recOwned = _out381;
                        _1570_recErased = _out382;
                        _1571_recIdents = _out383;
                        Dafny.ISequence<Dafny.Rune> _1572_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out384;
                        _out384 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                        _1572_rhsType = _out384;
                        Dafny.ISequence<Dafny.Rune> _1573_uneraseFn;
                        _1573_uneraseFn = ((_1569_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1572_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1573_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1568_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1569_recOwned;
                        isErased = false;
                        readIdents = _1571_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out385;
                        bool _out386;
                        bool _out387;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1567_b), _1567_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out385, out _out386, out _out387, out _out388);
                        s = _out385;
                        isOwned = _out386;
                        isErased = _out387;
                        readIdents = _out388;
                      }
                    }
                  }
                } else if (_source93.is_Nullable) {
                  DAST._IType _1574___mcc_h431 = _source93.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1575_recursiveGen;
                    bool _1576_recOwned;
                    bool _1577_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1578_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out389;
                    bool _out390;
                    bool _out391;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out389, out _out390, out _out391, out _out392);
                    _1575_recursiveGen = _out389;
                    _1576_recOwned = _out390;
                    _1577_recErased = _out391;
                    _1578_recIdents = _out392;
                    if (!(_1576_recOwned)) {
                      _1575_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1575_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1575_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1577_recErased;
                    readIdents = _1578_recIdents;
                  }
                } else if (_source93.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1579___mcc_h434 = _source93.dtor_Tuple_a0;
                  DAST._IType _1580_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1580_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1581_recursiveGen;
                      bool _1582_recOwned;
                      bool _1583_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1584_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out393;
                      bool _out394;
                      bool _out395;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out393, out _out394, out _out395, out _out396);
                      _1581_recursiveGen = _out393;
                      _1582_recOwned = _out394;
                      _1583_recErased = _out395;
                      _1584_recIdents = _out396;
                      Dafny.ISequence<Dafny.Rune> _1585_uneraseFn;
                      _1585_uneraseFn = ((_1582_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1585_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1581_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1582_recOwned;
                      isErased = true;
                      readIdents = _1584_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out397;
                      bool _out398;
                      bool _out399;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1580_b), _1580_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out397, out _out398, out _out399, out _out400);
                      s = _out397;
                      isOwned = _out398;
                      isErased = _out399;
                      readIdents = _out400;
                    }
                  }
                } else if (_source93.is_Array) {
                  DAST._IType _1586___mcc_h437 = _source93.dtor_element;
                  BigInteger _1587___mcc_h438 = _source93.dtor_dims;
                  DAST._IType _1588_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1588_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1589_recursiveGen;
                      bool _1590_recOwned;
                      bool _1591_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1592_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out401;
                      bool _out402;
                      bool _out403;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out401, out _out402, out _out403, out _out404);
                      _1589_recursiveGen = _out401;
                      _1590_recOwned = _out402;
                      _1591_recErased = _out403;
                      _1592_recIdents = _out404;
                      Dafny.ISequence<Dafny.Rune> _1593_uneraseFn;
                      _1593_uneraseFn = ((_1590_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1593_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1589_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1590_recOwned;
                      isErased = true;
                      readIdents = _1592_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out405;
                      bool _out406;
                      bool _out407;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1588_b), _1588_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                      s = _out405;
                      isOwned = _out406;
                      isErased = _out407;
                      readIdents = _out408;
                    }
                  }
                } else if (_source93.is_Seq) {
                  DAST._IType _1594___mcc_h443 = _source93.dtor_element;
                  DAST._IType _1595_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1595_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1596_recursiveGen;
                      bool _1597_recOwned;
                      bool _1598_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1599_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out409;
                      bool _out410;
                      bool _out411;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                      _1596_recursiveGen = _out409;
                      _1597_recOwned = _out410;
                      _1598_recErased = _out411;
                      _1599_recIdents = _out412;
                      Dafny.ISequence<Dafny.Rune> _1600_uneraseFn;
                      _1600_uneraseFn = ((_1597_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1600_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1596_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1597_recOwned;
                      isErased = true;
                      readIdents = _1599_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out413;
                      bool _out414;
                      bool _out415;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1595_b), _1595_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                      s = _out413;
                      isOwned = _out414;
                      isErased = _out415;
                      readIdents = _out416;
                    }
                  }
                } else if (_source93.is_Set) {
                  DAST._IType _1601___mcc_h446 = _source93.dtor_element;
                  DAST._IType _1602_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1602_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1603_recursiveGen;
                      bool _1604_recOwned;
                      bool _1605_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1606_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out417;
                      bool _out418;
                      bool _out419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out417, out _out418, out _out419, out _out420);
                      _1603_recursiveGen = _out417;
                      _1604_recOwned = _out418;
                      _1605_recErased = _out419;
                      _1606_recIdents = _out420;
                      Dafny.ISequence<Dafny.Rune> _1607_uneraseFn;
                      _1607_uneraseFn = ((_1604_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1607_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1603_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1604_recOwned;
                      isErased = true;
                      readIdents = _1606_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out421;
                      bool _out422;
                      bool _out423;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1602_b), _1602_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out421, out _out422, out _out423, out _out424);
                      s = _out421;
                      isOwned = _out422;
                      isErased = _out423;
                      readIdents = _out424;
                    }
                  }
                } else if (_source93.is_Multiset) {
                  DAST._IType _1608___mcc_h449 = _source93.dtor_element;
                  DAST._IType _1609_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1609_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1610_recursiveGen;
                      bool _1611_recOwned;
                      bool _1612_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1613_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out425;
                      bool _out426;
                      bool _out427;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out425, out _out426, out _out427, out _out428);
                      _1610_recursiveGen = _out425;
                      _1611_recOwned = _out426;
                      _1612_recErased = _out427;
                      _1613_recIdents = _out428;
                      Dafny.ISequence<Dafny.Rune> _1614_uneraseFn;
                      _1614_uneraseFn = ((_1611_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1614_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1610_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1611_recOwned;
                      isErased = true;
                      readIdents = _1613_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out429;
                      bool _out430;
                      bool _out431;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1609_b), _1609_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out429, out _out430, out _out431, out _out432);
                      s = _out429;
                      isOwned = _out430;
                      isErased = _out431;
                      readIdents = _out432;
                    }
                  }
                } else if (_source93.is_Map) {
                  DAST._IType _1615___mcc_h452 = _source93.dtor_key;
                  DAST._IType _1616___mcc_h453 = _source93.dtor_value;
                  DAST._IType _1617_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1617_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1618_recursiveGen;
                      bool _1619_recOwned;
                      bool _1620_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1621_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out433;
                      bool _out434;
                      bool _out435;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out433, out _out434, out _out435, out _out436);
                      _1618_recursiveGen = _out433;
                      _1619_recOwned = _out434;
                      _1620_recErased = _out435;
                      _1621_recIdents = _out436;
                      Dafny.ISequence<Dafny.Rune> _1622_uneraseFn;
                      _1622_uneraseFn = ((_1619_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1622_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1618_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1619_recOwned;
                      isErased = true;
                      readIdents = _1621_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out437;
                      bool _out438;
                      bool _out439;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1617_b), _1617_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out437, out _out438, out _out439, out _out440);
                      s = _out437;
                      isOwned = _out438;
                      isErased = _out439;
                      readIdents = _out440;
                    }
                  }
                } else if (_source93.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1623___mcc_h458 = _source93.dtor_args;
                  DAST._IType _1624___mcc_h459 = _source93.dtor_result;
                  DAST._IType _1625_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1625_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1626_recursiveGen;
                      bool _1627_recOwned;
                      bool _1628_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1629_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out441;
                      bool _out442;
                      bool _out443;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out444;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out441, out _out442, out _out443, out _out444);
                      _1626_recursiveGen = _out441;
                      _1627_recOwned = _out442;
                      _1628_recErased = _out443;
                      _1629_recIdents = _out444;
                      Dafny.ISequence<Dafny.Rune> _1630_uneraseFn;
                      _1630_uneraseFn = ((_1627_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1630_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1626_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1627_recOwned;
                      isErased = true;
                      readIdents = _1629_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out445;
                      bool _out446;
                      bool _out447;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1625_b), _1625_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out445, out _out446, out _out447, out _out448);
                      s = _out445;
                      isOwned = _out446;
                      isErased = _out447;
                      readIdents = _out448;
                    }
                  }
                } else if (_source93.is_Primitive) {
                  DAST._IPrimitive _1631___mcc_h464 = _source93.dtor_Primitive_a0;
                  DAST._IType _1632_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1632_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1633_recursiveGen;
                      bool _1634_recOwned;
                      bool _1635_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1636_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out449;
                      bool _out450;
                      bool _out451;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out449, out _out450, out _out451, out _out452);
                      _1633_recursiveGen = _out449;
                      _1634_recOwned = _out450;
                      _1635_recErased = _out451;
                      _1636_recIdents = _out452;
                      Dafny.ISequence<Dafny.Rune> _1637_uneraseFn;
                      _1637_uneraseFn = ((_1634_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1637_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1633_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1634_recOwned;
                      isErased = true;
                      readIdents = _1636_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out453;
                      bool _out454;
                      bool _out455;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1632_b), _1632_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out453, out _out454, out _out455, out _out456);
                      s = _out453;
                      isOwned = _out454;
                      isErased = _out455;
                      readIdents = _out456;
                    }
                  }
                } else if (_source93.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1638___mcc_h467 = _source93.dtor_Passthrough_a0;
                  DAST._IType _1639_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1639_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1640_recursiveGen;
                      bool _1641_recOwned;
                      bool _1642_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1643_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out457;
                      bool _out458;
                      bool _out459;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out457, out _out458, out _out459, out _out460);
                      _1640_recursiveGen = _out457;
                      _1641_recOwned = _out458;
                      _1642_recErased = _out459;
                      _1643_recIdents = _out460;
                      Dafny.ISequence<Dafny.Rune> _1644_uneraseFn;
                      _1644_uneraseFn = ((_1641_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1644_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1640_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1641_recOwned;
                      isErased = true;
                      readIdents = _1643_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out461;
                      bool _out462;
                      bool _out463;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1639_b), _1639_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out461, out _out462, out _out463, out _out464);
                      s = _out461;
                      isOwned = _out462;
                      isErased = _out463;
                      readIdents = _out464;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1645___mcc_h470 = _source93.dtor_TypeArg_a0;
                  DAST._IType _1646_b = _1548___mcc_h409;
                  {
                    if (object.Equals(_1646_b, _1376_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1647_recursiveGen;
                      bool _1648_recOwned;
                      bool _1649_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1650_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out465;
                      bool _out466;
                      bool _out467;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out468;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out465, out _out466, out _out467, out _out468);
                      _1647_recursiveGen = _out465;
                      _1648_recOwned = _out466;
                      _1649_recErased = _out467;
                      _1650_recIdents = _out468;
                      Dafny.ISequence<Dafny.Rune> _1651_uneraseFn;
                      _1651_uneraseFn = ((_1648_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1651_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1647_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1648_recOwned;
                      isErased = true;
                      readIdents = _1650_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out469;
                      bool _out470;
                      bool _out471;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1646_b), _1646_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out469, out _out470, out _out471, out _out472);
                      s = _out469;
                      isOwned = _out470;
                      isErased = _out471;
                      readIdents = _out472;
                    }
                  }
                }
              }
            } else if (_source87.is_Nullable) {
              DAST._IType _1652___mcc_h473 = _source87.dtor_Nullable_a0;
              DAST._IType _source95 = _1384___mcc_h306;
              if (_source95.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1653___mcc_h477 = _source95.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1654___mcc_h478 = _source95.dtor_typeArgs;
                DAST._IResolvedType _1655___mcc_h479 = _source95.dtor_resolved;
                DAST._IResolvedType _source96 = _1655___mcc_h479;
                if (_source96.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1656___mcc_h486 = _source96.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1657_recursiveGen;
                    bool _1658_recOwned;
                    bool _1659_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1660_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out473;
                    bool _out474;
                    bool _out475;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out473, out _out474, out _out475, out _out476);
                    _1657_recursiveGen = _out473;
                    _1658_recOwned = _out474;
                    _1659_recErased = _out475;
                    _1660_recIdents = _out476;
                    if (!(_1658_recOwned)) {
                      _1657_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1657_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1657_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1658_recOwned;
                    isErased = _1659_recErased;
                    readIdents = _1660_recIdents;
                  }
                } else if (_source96.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1661___mcc_h489 = _source96.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1662_recursiveGen;
                    bool _1663_recOwned;
                    bool _1664_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1665_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out477;
                    bool _out478;
                    bool _out479;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479, out _out480);
                    _1662_recursiveGen = _out477;
                    _1663_recOwned = _out478;
                    _1664_recErased = _out479;
                    _1665_recIdents = _out480;
                    if (!(_1663_recOwned)) {
                      _1662_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1662_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1662_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1663_recOwned;
                    isErased = _1664_recErased;
                    readIdents = _1665_recIdents;
                  }
                } else {
                  DAST._IType _1666___mcc_h492 = _source96.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1667_recursiveGen;
                    bool _1668_recOwned;
                    bool _1669_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1670_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out481;
                    bool _out482;
                    bool _out483;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out481, out _out482, out _out483, out _out484);
                    _1667_recursiveGen = _out481;
                    _1668_recOwned = _out482;
                    _1669_recErased = _out483;
                    _1670_recIdents = _out484;
                    if (!(_1668_recOwned)) {
                      _1667_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1667_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1667_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1668_recOwned;
                    isErased = _1669_recErased;
                    readIdents = _1670_recIdents;
                  }
                }
              } else if (_source95.is_Nullable) {
                DAST._IType _1671___mcc_h495 = _source95.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1672_recursiveGen;
                  bool _1673_recOwned;
                  bool _1674_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1675_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out485;
                  bool _out486;
                  bool _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out485, out _out486, out _out487, out _out488);
                  _1672_recursiveGen = _out485;
                  _1673_recOwned = _out486;
                  _1674_recErased = _out487;
                  _1675_recIdents = _out488;
                  if (!(_1673_recOwned)) {
                    _1672_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1672_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1672_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1673_recOwned;
                  isErased = _1674_recErased;
                  readIdents = _1675_recIdents;
                }
              } else if (_source95.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1676___mcc_h498 = _source95.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1677_recursiveGen;
                  bool _1678_recOwned;
                  bool _1679_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1680_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out489;
                  bool _out490;
                  bool _out491;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out492;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out489, out _out490, out _out491, out _out492);
                  _1677_recursiveGen = _out489;
                  _1678_recOwned = _out490;
                  _1679_recErased = _out491;
                  _1680_recIdents = _out492;
                  if (!(_1678_recOwned)) {
                    _1677_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1677_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1677_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1678_recOwned;
                  isErased = _1679_recErased;
                  readIdents = _1680_recIdents;
                }
              } else if (_source95.is_Array) {
                DAST._IType _1681___mcc_h501 = _source95.dtor_element;
                BigInteger _1682___mcc_h502 = _source95.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1683_recursiveGen;
                  bool _1684_recOwned;
                  bool _1685_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1686_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out493;
                  bool _out494;
                  bool _out495;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out493, out _out494, out _out495, out _out496);
                  _1683_recursiveGen = _out493;
                  _1684_recOwned = _out494;
                  _1685_recErased = _out495;
                  _1686_recIdents = _out496;
                  if (!(_1684_recOwned)) {
                    _1683_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1683_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1683_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1684_recOwned;
                  isErased = _1685_recErased;
                  readIdents = _1686_recIdents;
                }
              } else if (_source95.is_Seq) {
                DAST._IType _1687___mcc_h507 = _source95.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1688_recursiveGen;
                  bool _1689_recOwned;
                  bool _1690_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1691_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out497;
                  bool _out498;
                  bool _out499;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out497, out _out498, out _out499, out _out500);
                  _1688_recursiveGen = _out497;
                  _1689_recOwned = _out498;
                  _1690_recErased = _out499;
                  _1691_recIdents = _out500;
                  if (!(_1689_recOwned)) {
                    _1688_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1688_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1688_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1689_recOwned;
                  isErased = _1690_recErased;
                  readIdents = _1691_recIdents;
                }
              } else if (_source95.is_Set) {
                DAST._IType _1692___mcc_h510 = _source95.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1693_recursiveGen;
                  bool _1694_recOwned;
                  bool _1695_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1696_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out501;
                  bool _out502;
                  bool _out503;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503, out _out504);
                  _1693_recursiveGen = _out501;
                  _1694_recOwned = _out502;
                  _1695_recErased = _out503;
                  _1696_recIdents = _out504;
                  if (!(_1694_recOwned)) {
                    _1693_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1693_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1693_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1694_recOwned;
                  isErased = _1695_recErased;
                  readIdents = _1696_recIdents;
                }
              } else if (_source95.is_Multiset) {
                DAST._IType _1697___mcc_h513 = _source95.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1698_recursiveGen;
                  bool _1699_recOwned;
                  bool _1700_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1701_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out505;
                  bool _out506;
                  bool _out507;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out508;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out505, out _out506, out _out507, out _out508);
                  _1698_recursiveGen = _out505;
                  _1699_recOwned = _out506;
                  _1700_recErased = _out507;
                  _1701_recIdents = _out508;
                  if (!(_1699_recOwned)) {
                    _1698_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1698_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1698_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1699_recOwned;
                  isErased = _1700_recErased;
                  readIdents = _1701_recIdents;
                }
              } else if (_source95.is_Map) {
                DAST._IType _1702___mcc_h516 = _source95.dtor_key;
                DAST._IType _1703___mcc_h517 = _source95.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1704_recursiveGen;
                  bool _1705_recOwned;
                  bool _1706_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1707_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out509;
                  bool _out510;
                  bool _out511;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out512;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out509, out _out510, out _out511, out _out512);
                  _1704_recursiveGen = _out509;
                  _1705_recOwned = _out510;
                  _1706_recErased = _out511;
                  _1707_recIdents = _out512;
                  if (!(_1705_recOwned)) {
                    _1704_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1704_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1704_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1705_recOwned;
                  isErased = _1706_recErased;
                  readIdents = _1707_recIdents;
                }
              } else if (_source95.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1708___mcc_h522 = _source95.dtor_args;
                DAST._IType _1709___mcc_h523 = _source95.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1710_recursiveGen;
                  bool _1711_recOwned;
                  bool _1712_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1713_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out513;
                  bool _out514;
                  bool _out515;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out516;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out513, out _out514, out _out515, out _out516);
                  _1710_recursiveGen = _out513;
                  _1711_recOwned = _out514;
                  _1712_recErased = _out515;
                  _1713_recIdents = _out516;
                  if (!(_1711_recOwned)) {
                    _1710_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1710_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1710_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1711_recOwned;
                  isErased = _1712_recErased;
                  readIdents = _1713_recIdents;
                }
              } else if (_source95.is_Primitive) {
                DAST._IPrimitive _1714___mcc_h528 = _source95.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1715_recursiveGen;
                  bool _1716_recOwned;
                  bool _1717_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1718_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out517;
                  bool _out518;
                  bool _out519;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out520;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out517, out _out518, out _out519, out _out520);
                  _1715_recursiveGen = _out517;
                  _1716_recOwned = _out518;
                  _1717_recErased = _out519;
                  _1718_recIdents = _out520;
                  if (!(_1716_recOwned)) {
                    _1715_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1715_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1715_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1716_recOwned;
                  isErased = _1717_recErased;
                  readIdents = _1718_recIdents;
                }
              } else if (_source95.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1719___mcc_h531 = _source95.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1720_recursiveGen;
                  bool _1721_recOwned;
                  bool _1722_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1723_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out521;
                  bool _out522;
                  bool _out523;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out524;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out521, out _out522, out _out523, out _out524);
                  _1720_recursiveGen = _out521;
                  _1721_recOwned = _out522;
                  _1722_recErased = _out523;
                  _1723_recIdents = _out524;
                  if (!(_1721_recOwned)) {
                    _1720_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1720_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1720_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1721_recOwned;
                  isErased = _1722_recErased;
                  readIdents = _1723_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1724___mcc_h534 = _source95.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1725_recursiveGen;
                  bool _1726_recOwned;
                  bool _1727_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1728_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out525;
                  bool _out526;
                  bool _out527;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out528;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out525, out _out526, out _out527, out _out528);
                  _1725_recursiveGen = _out525;
                  _1726_recOwned = _out526;
                  _1727_recErased = _out527;
                  _1728_recIdents = _out528;
                  if (!(_1726_recOwned)) {
                    _1725_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1725_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1725_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1726_recOwned;
                  isErased = _1727_recErased;
                  readIdents = _1728_recIdents;
                }
              }
            } else if (_source87.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1729___mcc_h537 = _source87.dtor_Tuple_a0;
              DAST._IType _source97 = _1384___mcc_h306;
              if (_source97.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1730___mcc_h541 = _source97.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1731___mcc_h542 = _source97.dtor_typeArgs;
                DAST._IResolvedType _1732___mcc_h543 = _source97.dtor_resolved;
                DAST._IResolvedType _source98 = _1732___mcc_h543;
                if (_source98.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1733___mcc_h547 = _source98.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1734_recursiveGen;
                    bool _1735_recOwned;
                    bool _1736_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1737_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out529;
                    bool _out530;
                    bool _out531;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out532;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out529, out _out530, out _out531, out _out532);
                    _1734_recursiveGen = _out529;
                    _1735_recOwned = _out530;
                    _1736_recErased = _out531;
                    _1737_recIdents = _out532;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1734_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1735_recOwned;
                    isErased = _1736_recErased;
                    readIdents = _1737_recIdents;
                  }
                } else if (_source98.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1738___mcc_h549 = _source98.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1739_recursiveGen;
                    bool _1740_recOwned;
                    bool _1741_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1742_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out533;
                    bool _out534;
                    bool _out535;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out536;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out533, out _out534, out _out535, out _out536);
                    _1739_recursiveGen = _out533;
                    _1740_recOwned = _out534;
                    _1741_recErased = _out535;
                    _1742_recIdents = _out536;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1739_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1740_recOwned;
                    isErased = _1741_recErased;
                    readIdents = _1742_recIdents;
                  }
                } else {
                  DAST._IType _1743___mcc_h551 = _source98.dtor_Newtype_a0;
                  DAST._IType _1744_b = _1743___mcc_h551;
                  {
                    if (object.Equals(_1377_fromTpe, _1744_b)) {
                      Dafny.ISequence<Dafny.Rune> _1745_recursiveGen;
                      bool _1746_recOwned;
                      bool _1747_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1748_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out537;
                      bool _out538;
                      bool _out539;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out540;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out537, out _out538, out _out539, out _out540);
                      _1745_recursiveGen = _out537;
                      _1746_recOwned = _out538;
                      _1747_recErased = _out539;
                      _1748_recIdents = _out540;
                      Dafny.ISequence<Dafny.Rune> _1749_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out541;
                      _out541 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _1749_rhsType = _out541;
                      Dafny.ISequence<Dafny.Rune> _1750_uneraseFn;
                      _1750_uneraseFn = ((_1746_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1749_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1750_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1745_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1746_recOwned;
                      isErased = false;
                      readIdents = _1748_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out542;
                      bool _out543;
                      bool _out544;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out545;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1744_b), _1744_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out542, out _out543, out _out544, out _out545);
                      s = _out542;
                      isOwned = _out543;
                      isErased = _out544;
                      readIdents = _out545;
                    }
                  }
                }
              } else if (_source97.is_Nullable) {
                DAST._IType _1751___mcc_h553 = _source97.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1752_recursiveGen;
                  bool _1753_recOwned;
                  bool _1754_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1755_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out546;
                  bool _out547;
                  bool _out548;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out546, out _out547, out _out548, out _out549);
                  _1752_recursiveGen = _out546;
                  _1753_recOwned = _out547;
                  _1754_recErased = _out548;
                  _1755_recIdents = _out549;
                  if (!(_1753_recOwned)) {
                    _1752_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1752_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1752_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1754_recErased;
                  readIdents = _1755_recIdents;
                }
              } else if (_source97.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1756___mcc_h555 = _source97.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1757_recursiveGen;
                  bool _1758_recOwned;
                  bool _1759_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1760_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out550;
                  bool _out551;
                  bool _out552;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out553;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out550, out _out551, out _out552, out _out553);
                  _1757_recursiveGen = _out550;
                  _1758_recOwned = _out551;
                  _1759_recErased = _out552;
                  _1760_recIdents = _out553;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1757_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1758_recOwned;
                  isErased = _1759_recErased;
                  readIdents = _1760_recIdents;
                }
              } else if (_source97.is_Array) {
                DAST._IType _1761___mcc_h557 = _source97.dtor_element;
                BigInteger _1762___mcc_h558 = _source97.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1763_recursiveGen;
                  bool _1764_recOwned;
                  bool _1765_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1766_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out554;
                  bool _out555;
                  bool _out556;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out557;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out554, out _out555, out _out556, out _out557);
                  _1763_recursiveGen = _out554;
                  _1764_recOwned = _out555;
                  _1765_recErased = _out556;
                  _1766_recIdents = _out557;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1763_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1764_recOwned;
                  isErased = _1765_recErased;
                  readIdents = _1766_recIdents;
                }
              } else if (_source97.is_Seq) {
                DAST._IType _1767___mcc_h561 = _source97.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1768_recursiveGen;
                  bool _1769_recOwned;
                  bool _1770_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1771_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out558;
                  bool _out559;
                  bool _out560;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out561;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out558, out _out559, out _out560, out _out561);
                  _1768_recursiveGen = _out558;
                  _1769_recOwned = _out559;
                  _1770_recErased = _out560;
                  _1771_recIdents = _out561;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1768_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1769_recOwned;
                  isErased = _1770_recErased;
                  readIdents = _1771_recIdents;
                }
              } else if (_source97.is_Set) {
                DAST._IType _1772___mcc_h563 = _source97.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1773_recursiveGen;
                  bool _1774_recOwned;
                  bool _1775_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1776_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out562;
                  bool _out563;
                  bool _out564;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                  _1773_recursiveGen = _out562;
                  _1774_recOwned = _out563;
                  _1775_recErased = _out564;
                  _1776_recIdents = _out565;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1774_recOwned;
                  isErased = _1775_recErased;
                  readIdents = _1776_recIdents;
                }
              } else if (_source97.is_Multiset) {
                DAST._IType _1777___mcc_h565 = _source97.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1778_recursiveGen;
                  bool _1779_recOwned;
                  bool _1780_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1781_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out566;
                  bool _out567;
                  bool _out568;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out569;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out566, out _out567, out _out568, out _out569);
                  _1778_recursiveGen = _out566;
                  _1779_recOwned = _out567;
                  _1780_recErased = _out568;
                  _1781_recIdents = _out569;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1778_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1779_recOwned;
                  isErased = _1780_recErased;
                  readIdents = _1781_recIdents;
                }
              } else if (_source97.is_Map) {
                DAST._IType _1782___mcc_h567 = _source97.dtor_key;
                DAST._IType _1783___mcc_h568 = _source97.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1784_recursiveGen;
                  bool _1785_recOwned;
                  bool _1786_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1787_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out570;
                  bool _out571;
                  bool _out572;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out573;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out570, out _out571, out _out572, out _out573);
                  _1784_recursiveGen = _out570;
                  _1785_recOwned = _out571;
                  _1786_recErased = _out572;
                  _1787_recIdents = _out573;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1785_recOwned;
                  isErased = _1786_recErased;
                  readIdents = _1787_recIdents;
                }
              } else if (_source97.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1788___mcc_h571 = _source97.dtor_args;
                DAST._IType _1789___mcc_h572 = _source97.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1790_recursiveGen;
                  bool _1791_recOwned;
                  bool _1792_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1793_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out574;
                  bool _out575;
                  bool _out576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out577;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out574, out _out575, out _out576, out _out577);
                  _1790_recursiveGen = _out574;
                  _1791_recOwned = _out575;
                  _1792_recErased = _out576;
                  _1793_recIdents = _out577;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1790_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1791_recOwned;
                  isErased = _1792_recErased;
                  readIdents = _1793_recIdents;
                }
              } else if (_source97.is_Primitive) {
                DAST._IPrimitive _1794___mcc_h575 = _source97.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1795_recursiveGen;
                  bool _1796_recOwned;
                  bool _1797_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1798_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out578;
                  bool _out579;
                  bool _out580;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out581;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out578, out _out579, out _out580, out _out581);
                  _1795_recursiveGen = _out578;
                  _1796_recOwned = _out579;
                  _1797_recErased = _out580;
                  _1798_recIdents = _out581;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1795_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1796_recOwned;
                  isErased = _1797_recErased;
                  readIdents = _1798_recIdents;
                }
              } else if (_source97.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1799___mcc_h577 = _source97.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1800_recursiveGen;
                  bool _1801_recOwned;
                  bool _1802_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1803_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out582;
                  bool _out583;
                  bool _out584;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out585;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out582, out _out583, out _out584, out _out585);
                  _1800_recursiveGen = _out582;
                  _1801_recOwned = _out583;
                  _1802_recErased = _out584;
                  _1803_recIdents = _out585;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1801_recOwned;
                  isErased = _1802_recErased;
                  readIdents = _1803_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1804___mcc_h579 = _source97.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1805_recursiveGen;
                  bool _1806_recOwned;
                  bool _1807_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1808_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out586;
                  bool _out587;
                  bool _out588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out586, out _out587, out _out588, out _out589);
                  _1805_recursiveGen = _out586;
                  _1806_recOwned = _out587;
                  _1807_recErased = _out588;
                  _1808_recIdents = _out589;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1805_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1806_recOwned;
                  isErased = _1807_recErased;
                  readIdents = _1808_recIdents;
                }
              }
            } else if (_source87.is_Array) {
              DAST._IType _1809___mcc_h581 = _source87.dtor_element;
              BigInteger _1810___mcc_h582 = _source87.dtor_dims;
              DAST._IType _source99 = _1384___mcc_h306;
              if (_source99.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1811___mcc_h589 = _source99.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1812___mcc_h590 = _source99.dtor_typeArgs;
                DAST._IResolvedType _1813___mcc_h591 = _source99.dtor_resolved;
                DAST._IResolvedType _source100 = _1813___mcc_h591;
                if (_source100.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1814___mcc_h595 = _source100.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1815_recursiveGen;
                    bool _1816_recOwned;
                    bool _1817_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1818_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out590;
                    bool _out591;
                    bool _out592;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out593;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out590, out _out591, out _out592, out _out593);
                    _1815_recursiveGen = _out590;
                    _1816_recOwned = _out591;
                    _1817_recErased = _out592;
                    _1818_recIdents = _out593;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1815_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1816_recOwned;
                    isErased = _1817_recErased;
                    readIdents = _1818_recIdents;
                  }
                } else if (_source100.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1819___mcc_h597 = _source100.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1820_recursiveGen;
                    bool _1821_recOwned;
                    bool _1822_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1823_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out594;
                    bool _out595;
                    bool _out596;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out597;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out594, out _out595, out _out596, out _out597);
                    _1820_recursiveGen = _out594;
                    _1821_recOwned = _out595;
                    _1822_recErased = _out596;
                    _1823_recIdents = _out597;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1820_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1821_recOwned;
                    isErased = _1822_recErased;
                    readIdents = _1823_recIdents;
                  }
                } else {
                  DAST._IType _1824___mcc_h599 = _source100.dtor_Newtype_a0;
                  DAST._IType _1825_b = _1824___mcc_h599;
                  {
                    if (object.Equals(_1377_fromTpe, _1825_b)) {
                      Dafny.ISequence<Dafny.Rune> _1826_recursiveGen;
                      bool _1827_recOwned;
                      bool _1828_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1829_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out598;
                      bool _out599;
                      bool _out600;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out601;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out598, out _out599, out _out600, out _out601);
                      _1826_recursiveGen = _out598;
                      _1827_recOwned = _out599;
                      _1828_recErased = _out600;
                      _1829_recIdents = _out601;
                      Dafny.ISequence<Dafny.Rune> _1830_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out602;
                      _out602 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _1830_rhsType = _out602;
                      Dafny.ISequence<Dafny.Rune> _1831_uneraseFn;
                      _1831_uneraseFn = ((_1827_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1830_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1831_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1826_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1827_recOwned;
                      isErased = false;
                      readIdents = _1829_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out603;
                      bool _out604;
                      bool _out605;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out606;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1825_b), _1825_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out603, out _out604, out _out605, out _out606);
                      s = _out603;
                      isOwned = _out604;
                      isErased = _out605;
                      readIdents = _out606;
                    }
                  }
                }
              } else if (_source99.is_Nullable) {
                DAST._IType _1832___mcc_h601 = _source99.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1833_recursiveGen;
                  bool _1834_recOwned;
                  bool _1835_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1836_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out607;
                  bool _out608;
                  bool _out609;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out607, out _out608, out _out609, out _out610);
                  _1833_recursiveGen = _out607;
                  _1834_recOwned = _out608;
                  _1835_recErased = _out609;
                  _1836_recIdents = _out610;
                  if (!(_1834_recOwned)) {
                    _1833_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1833_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1833_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1835_recErased;
                  readIdents = _1836_recIdents;
                }
              } else if (_source99.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1837___mcc_h603 = _source99.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1838_recursiveGen;
                  bool _1839_recOwned;
                  bool _1840_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1841_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out611;
                  bool _out612;
                  bool _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out611, out _out612, out _out613, out _out614);
                  _1838_recursiveGen = _out611;
                  _1839_recOwned = _out612;
                  _1840_recErased = _out613;
                  _1841_recIdents = _out614;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1838_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1839_recOwned;
                  isErased = _1840_recErased;
                  readIdents = _1841_recIdents;
                }
              } else if (_source99.is_Array) {
                DAST._IType _1842___mcc_h605 = _source99.dtor_element;
                BigInteger _1843___mcc_h606 = _source99.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1844_recursiveGen;
                  bool _1845_recOwned;
                  bool _1846_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1847_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out615;
                  bool _out616;
                  bool _out617;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out618;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out615, out _out616, out _out617, out _out618);
                  _1844_recursiveGen = _out615;
                  _1845_recOwned = _out616;
                  _1846_recErased = _out617;
                  _1847_recIdents = _out618;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1844_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1845_recOwned;
                  isErased = _1846_recErased;
                  readIdents = _1847_recIdents;
                }
              } else if (_source99.is_Seq) {
                DAST._IType _1848___mcc_h609 = _source99.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1849_recursiveGen;
                  bool _1850_recOwned;
                  bool _1851_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1852_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out619;
                  bool _out620;
                  bool _out621;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out619, out _out620, out _out621, out _out622);
                  _1849_recursiveGen = _out619;
                  _1850_recOwned = _out620;
                  _1851_recErased = _out621;
                  _1852_recIdents = _out622;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1849_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1850_recOwned;
                  isErased = _1851_recErased;
                  readIdents = _1852_recIdents;
                }
              } else if (_source99.is_Set) {
                DAST._IType _1853___mcc_h611 = _source99.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1854_recursiveGen;
                  bool _1855_recOwned;
                  bool _1856_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1857_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out623;
                  bool _out624;
                  bool _out625;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                  _1854_recursiveGen = _out623;
                  _1855_recOwned = _out624;
                  _1856_recErased = _out625;
                  _1857_recIdents = _out626;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1854_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1855_recOwned;
                  isErased = _1856_recErased;
                  readIdents = _1857_recIdents;
                }
              } else if (_source99.is_Multiset) {
                DAST._IType _1858___mcc_h613 = _source99.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1859_recursiveGen;
                  bool _1860_recOwned;
                  bool _1861_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1862_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out627;
                  bool _out628;
                  bool _out629;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out627, out _out628, out _out629, out _out630);
                  _1859_recursiveGen = _out627;
                  _1860_recOwned = _out628;
                  _1861_recErased = _out629;
                  _1862_recIdents = _out630;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1859_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1860_recOwned;
                  isErased = _1861_recErased;
                  readIdents = _1862_recIdents;
                }
              } else if (_source99.is_Map) {
                DAST._IType _1863___mcc_h615 = _source99.dtor_key;
                DAST._IType _1864___mcc_h616 = _source99.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1865_recursiveGen;
                  bool _1866_recOwned;
                  bool _1867_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1868_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out631;
                  bool _out632;
                  bool _out633;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out634;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out631, out _out632, out _out633, out _out634);
                  _1865_recursiveGen = _out631;
                  _1866_recOwned = _out632;
                  _1867_recErased = _out633;
                  _1868_recIdents = _out634;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1865_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1866_recOwned;
                  isErased = _1867_recErased;
                  readIdents = _1868_recIdents;
                }
              } else if (_source99.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1869___mcc_h619 = _source99.dtor_args;
                DAST._IType _1870___mcc_h620 = _source99.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1871_recursiveGen;
                  bool _1872_recOwned;
                  bool _1873_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1874_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out635;
                  bool _out636;
                  bool _out637;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out635, out _out636, out _out637, out _out638);
                  _1871_recursiveGen = _out635;
                  _1872_recOwned = _out636;
                  _1873_recErased = _out637;
                  _1874_recIdents = _out638;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1871_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1872_recOwned;
                  isErased = _1873_recErased;
                  readIdents = _1874_recIdents;
                }
              } else if (_source99.is_Primitive) {
                DAST._IPrimitive _1875___mcc_h623 = _source99.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1876_recursiveGen;
                  bool _1877_recOwned;
                  bool _1878_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1879_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out639;
                  bool _out640;
                  bool _out641;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out642;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out639, out _out640, out _out641, out _out642);
                  _1876_recursiveGen = _out639;
                  _1877_recOwned = _out640;
                  _1878_recErased = _out641;
                  _1879_recIdents = _out642;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1876_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1877_recOwned;
                  isErased = _1878_recErased;
                  readIdents = _1879_recIdents;
                }
              } else if (_source99.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1880___mcc_h625 = _source99.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1881_recursiveGen;
                  bool _1882_recOwned;
                  bool _1883_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1884_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out643;
                  bool _out644;
                  bool _out645;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out646;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out643, out _out644, out _out645, out _out646);
                  _1881_recursiveGen = _out643;
                  _1882_recOwned = _out644;
                  _1883_recErased = _out645;
                  _1884_recIdents = _out646;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1881_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1882_recOwned;
                  isErased = _1883_recErased;
                  readIdents = _1884_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1885___mcc_h627 = _source99.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1886_recursiveGen;
                  bool _1887_recOwned;
                  bool _1888_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1889_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out647;
                  bool _out648;
                  bool _out649;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out650;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out647, out _out648, out _out649, out _out650);
                  _1886_recursiveGen = _out647;
                  _1887_recOwned = _out648;
                  _1888_recErased = _out649;
                  _1889_recIdents = _out650;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1886_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1887_recOwned;
                  isErased = _1888_recErased;
                  readIdents = _1889_recIdents;
                }
              }
            } else if (_source87.is_Seq) {
              DAST._IType _1890___mcc_h629 = _source87.dtor_element;
              DAST._IType _source101 = _1384___mcc_h306;
              if (_source101.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1891___mcc_h633 = _source101.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1892___mcc_h634 = _source101.dtor_typeArgs;
                DAST._IResolvedType _1893___mcc_h635 = _source101.dtor_resolved;
                DAST._IResolvedType _source102 = _1893___mcc_h635;
                if (_source102.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1894___mcc_h639 = _source102.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1895_recursiveGen;
                    bool _1896_recOwned;
                    bool _1897_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1898_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out651;
                    bool _out652;
                    bool _out653;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out654;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out651, out _out652, out _out653, out _out654);
                    _1895_recursiveGen = _out651;
                    _1896_recOwned = _out652;
                    _1897_recErased = _out653;
                    _1898_recIdents = _out654;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1895_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1896_recOwned;
                    isErased = _1897_recErased;
                    readIdents = _1898_recIdents;
                  }
                } else if (_source102.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1899___mcc_h641 = _source102.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1900_recursiveGen;
                    bool _1901_recOwned;
                    bool _1902_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1903_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out655;
                    bool _out656;
                    bool _out657;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out658;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out655, out _out656, out _out657, out _out658);
                    _1900_recursiveGen = _out655;
                    _1901_recOwned = _out656;
                    _1902_recErased = _out657;
                    _1903_recIdents = _out658;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1900_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1901_recOwned;
                    isErased = _1902_recErased;
                    readIdents = _1903_recIdents;
                  }
                } else {
                  DAST._IType _1904___mcc_h643 = _source102.dtor_Newtype_a0;
                  DAST._IType _1905_b = _1904___mcc_h643;
                  {
                    if (object.Equals(_1377_fromTpe, _1905_b)) {
                      Dafny.ISequence<Dafny.Rune> _1906_recursiveGen;
                      bool _1907_recOwned;
                      bool _1908_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1909_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out659;
                      bool _out660;
                      bool _out661;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out662;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out659, out _out660, out _out661, out _out662);
                      _1906_recursiveGen = _out659;
                      _1907_recOwned = _out660;
                      _1908_recErased = _out661;
                      _1909_recIdents = _out662;
                      Dafny.ISequence<Dafny.Rune> _1910_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out663;
                      _out663 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _1910_rhsType = _out663;
                      Dafny.ISequence<Dafny.Rune> _1911_uneraseFn;
                      _1911_uneraseFn = ((_1907_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1910_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1911_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1906_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1907_recOwned;
                      isErased = false;
                      readIdents = _1909_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out664;
                      bool _out665;
                      bool _out666;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out667;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1905_b), _1905_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out664, out _out665, out _out666, out _out667);
                      s = _out664;
                      isOwned = _out665;
                      isErased = _out666;
                      readIdents = _out667;
                    }
                  }
                }
              } else if (_source101.is_Nullable) {
                DAST._IType _1912___mcc_h645 = _source101.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1913_recursiveGen;
                  bool _1914_recOwned;
                  bool _1915_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1916_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out668;
                  bool _out669;
                  bool _out670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out668, out _out669, out _out670, out _out671);
                  _1913_recursiveGen = _out668;
                  _1914_recOwned = _out669;
                  _1915_recErased = _out670;
                  _1916_recIdents = _out671;
                  if (!(_1914_recOwned)) {
                    _1913_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1913_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1913_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1915_recErased;
                  readIdents = _1916_recIdents;
                }
              } else if (_source101.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1917___mcc_h647 = _source101.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1918_recursiveGen;
                  bool _1919_recOwned;
                  bool _1920_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1921_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out672;
                  bool _out673;
                  bool _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out672, out _out673, out _out674, out _out675);
                  _1918_recursiveGen = _out672;
                  _1919_recOwned = _out673;
                  _1920_recErased = _out674;
                  _1921_recIdents = _out675;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1918_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1919_recOwned;
                  isErased = _1920_recErased;
                  readIdents = _1921_recIdents;
                }
              } else if (_source101.is_Array) {
                DAST._IType _1922___mcc_h649 = _source101.dtor_element;
                BigInteger _1923___mcc_h650 = _source101.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1924_recursiveGen;
                  bool _1925_recOwned;
                  bool _1926_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1927_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out676;
                  bool _out677;
                  bool _out678;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out679;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out676, out _out677, out _out678, out _out679);
                  _1924_recursiveGen = _out676;
                  _1925_recOwned = _out677;
                  _1926_recErased = _out678;
                  _1927_recIdents = _out679;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1925_recOwned;
                  isErased = _1926_recErased;
                  readIdents = _1927_recIdents;
                }
              } else if (_source101.is_Seq) {
                DAST._IType _1928___mcc_h653 = _source101.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1929_recursiveGen;
                  bool _1930_recOwned;
                  bool _1931_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1932_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out680;
                  bool _out681;
                  bool _out682;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out683;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out680, out _out681, out _out682, out _out683);
                  _1929_recursiveGen = _out680;
                  _1930_recOwned = _out681;
                  _1931_recErased = _out682;
                  _1932_recIdents = _out683;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1929_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1930_recOwned;
                  isErased = _1931_recErased;
                  readIdents = _1932_recIdents;
                }
              } else if (_source101.is_Set) {
                DAST._IType _1933___mcc_h655 = _source101.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1934_recursiveGen;
                  bool _1935_recOwned;
                  bool _1936_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1937_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out684;
                  bool _out685;
                  bool _out686;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                  _1934_recursiveGen = _out684;
                  _1935_recOwned = _out685;
                  _1936_recErased = _out686;
                  _1937_recIdents = _out687;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1934_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1935_recOwned;
                  isErased = _1936_recErased;
                  readIdents = _1937_recIdents;
                }
              } else if (_source101.is_Multiset) {
                DAST._IType _1938___mcc_h657 = _source101.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1939_recursiveGen;
                  bool _1940_recOwned;
                  bool _1941_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1942_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out688;
                  bool _out689;
                  bool _out690;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out688, out _out689, out _out690, out _out691);
                  _1939_recursiveGen = _out688;
                  _1940_recOwned = _out689;
                  _1941_recErased = _out690;
                  _1942_recIdents = _out691;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1940_recOwned;
                  isErased = _1941_recErased;
                  readIdents = _1942_recIdents;
                }
              } else if (_source101.is_Map) {
                DAST._IType _1943___mcc_h659 = _source101.dtor_key;
                DAST._IType _1944___mcc_h660 = _source101.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1945_recursiveGen;
                  bool _1946_recOwned;
                  bool _1947_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1948_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out692;
                  bool _out693;
                  bool _out694;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out695;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out692, out _out693, out _out694, out _out695);
                  _1945_recursiveGen = _out692;
                  _1946_recOwned = _out693;
                  _1947_recErased = _out694;
                  _1948_recIdents = _out695;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1945_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1946_recOwned;
                  isErased = _1947_recErased;
                  readIdents = _1948_recIdents;
                }
              } else if (_source101.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1949___mcc_h663 = _source101.dtor_args;
                DAST._IType _1950___mcc_h664 = _source101.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1951_recursiveGen;
                  bool _1952_recOwned;
                  bool _1953_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1954_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out696;
                  bool _out697;
                  bool _out698;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out699;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out696, out _out697, out _out698, out _out699);
                  _1951_recursiveGen = _out696;
                  _1952_recOwned = _out697;
                  _1953_recErased = _out698;
                  _1954_recIdents = _out699;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1952_recOwned;
                  isErased = _1953_recErased;
                  readIdents = _1954_recIdents;
                }
              } else if (_source101.is_Primitive) {
                DAST._IPrimitive _1955___mcc_h667 = _source101.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1956_recursiveGen;
                  bool _1957_recOwned;
                  bool _1958_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1959_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out700;
                  bool _out701;
                  bool _out702;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out703;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out700, out _out701, out _out702, out _out703);
                  _1956_recursiveGen = _out700;
                  _1957_recOwned = _out701;
                  _1958_recErased = _out702;
                  _1959_recIdents = _out703;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1957_recOwned;
                  isErased = _1958_recErased;
                  readIdents = _1959_recIdents;
                }
              } else if (_source101.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1960___mcc_h669 = _source101.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1961_recursiveGen;
                  bool _1962_recOwned;
                  bool _1963_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1964_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out704;
                  bool _out705;
                  bool _out706;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out707;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out704, out _out705, out _out706, out _out707);
                  _1961_recursiveGen = _out704;
                  _1962_recOwned = _out705;
                  _1963_recErased = _out706;
                  _1964_recIdents = _out707;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1961_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1962_recOwned;
                  isErased = _1963_recErased;
                  readIdents = _1964_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1965___mcc_h671 = _source101.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1966_recursiveGen;
                  bool _1967_recOwned;
                  bool _1968_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1969_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out708;
                  bool _out709;
                  bool _out710;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out708, out _out709, out _out710, out _out711);
                  _1966_recursiveGen = _out708;
                  _1967_recOwned = _out709;
                  _1968_recErased = _out710;
                  _1969_recIdents = _out711;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1966_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1967_recOwned;
                  isErased = _1968_recErased;
                  readIdents = _1969_recIdents;
                }
              }
            } else if (_source87.is_Set) {
              DAST._IType _1970___mcc_h673 = _source87.dtor_element;
              DAST._IType _source103 = _1384___mcc_h306;
              if (_source103.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1971___mcc_h677 = _source103.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1972___mcc_h678 = _source103.dtor_typeArgs;
                DAST._IResolvedType _1973___mcc_h679 = _source103.dtor_resolved;
                DAST._IResolvedType _source104 = _1973___mcc_h679;
                if (_source104.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1974___mcc_h683 = _source104.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1975_recursiveGen;
                    bool _1976_recOwned;
                    bool _1977_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1978_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out712;
                    bool _out713;
                    bool _out714;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out715;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out712, out _out713, out _out714, out _out715);
                    _1975_recursiveGen = _out712;
                    _1976_recOwned = _out713;
                    _1977_recErased = _out714;
                    _1978_recIdents = _out715;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1975_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1976_recOwned;
                    isErased = _1977_recErased;
                    readIdents = _1978_recIdents;
                  }
                } else if (_source104.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1979___mcc_h685 = _source104.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1980_recursiveGen;
                    bool _1981_recOwned;
                    bool _1982_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1983_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out716;
                    bool _out717;
                    bool _out718;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out719;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out716, out _out717, out _out718, out _out719);
                    _1980_recursiveGen = _out716;
                    _1981_recOwned = _out717;
                    _1982_recErased = _out718;
                    _1983_recIdents = _out719;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1980_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1981_recOwned;
                    isErased = _1982_recErased;
                    readIdents = _1983_recIdents;
                  }
                } else {
                  DAST._IType _1984___mcc_h687 = _source104.dtor_Newtype_a0;
                  DAST._IType _1985_b = _1984___mcc_h687;
                  {
                    if (object.Equals(_1377_fromTpe, _1985_b)) {
                      Dafny.ISequence<Dafny.Rune> _1986_recursiveGen;
                      bool _1987_recOwned;
                      bool _1988_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1989_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out720;
                      bool _out721;
                      bool _out722;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out723;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out720, out _out721, out _out722, out _out723);
                      _1986_recursiveGen = _out720;
                      _1987_recOwned = _out721;
                      _1988_recErased = _out722;
                      _1989_recIdents = _out723;
                      Dafny.ISequence<Dafny.Rune> _1990_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out724;
                      _out724 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _1990_rhsType = _out724;
                      Dafny.ISequence<Dafny.Rune> _1991_uneraseFn;
                      _1991_uneraseFn = ((_1987_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1990_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1991_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1986_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1987_recOwned;
                      isErased = false;
                      readIdents = _1989_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out725;
                      bool _out726;
                      bool _out727;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out728;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _1985_b), _1985_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out725, out _out726, out _out727, out _out728);
                      s = _out725;
                      isOwned = _out726;
                      isErased = _out727;
                      readIdents = _out728;
                    }
                  }
                }
              } else if (_source103.is_Nullable) {
                DAST._IType _1992___mcc_h689 = _source103.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1993_recursiveGen;
                  bool _1994_recOwned;
                  bool _1995_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1996_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out729;
                  bool _out730;
                  bool _out731;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out732;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out729, out _out730, out _out731, out _out732);
                  _1993_recursiveGen = _out729;
                  _1994_recOwned = _out730;
                  _1995_recErased = _out731;
                  _1996_recIdents = _out732;
                  if (!(_1994_recOwned)) {
                    _1993_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1993_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1993_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1995_recErased;
                  readIdents = _1996_recIdents;
                }
              } else if (_source103.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1997___mcc_h691 = _source103.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1998_recursiveGen;
                  bool _1999_recOwned;
                  bool _2000_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2001_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out733;
                  bool _out734;
                  bool _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out733, out _out734, out _out735, out _out736);
                  _1998_recursiveGen = _out733;
                  _1999_recOwned = _out734;
                  _2000_recErased = _out735;
                  _2001_recIdents = _out736;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1999_recOwned;
                  isErased = _2000_recErased;
                  readIdents = _2001_recIdents;
                }
              } else if (_source103.is_Array) {
                DAST._IType _2002___mcc_h693 = _source103.dtor_element;
                BigInteger _2003___mcc_h694 = _source103.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2004_recursiveGen;
                  bool _2005_recOwned;
                  bool _2006_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2007_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out737;
                  bool _out738;
                  bool _out739;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out737, out _out738, out _out739, out _out740);
                  _2004_recursiveGen = _out737;
                  _2005_recOwned = _out738;
                  _2006_recErased = _out739;
                  _2007_recIdents = _out740;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2004_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2005_recOwned;
                  isErased = _2006_recErased;
                  readIdents = _2007_recIdents;
                }
              } else if (_source103.is_Seq) {
                DAST._IType _2008___mcc_h697 = _source103.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2009_recursiveGen;
                  bool _2010_recOwned;
                  bool _2011_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2012_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out741;
                  bool _out742;
                  bool _out743;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out744;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out741, out _out742, out _out743, out _out744);
                  _2009_recursiveGen = _out741;
                  _2010_recOwned = _out742;
                  _2011_recErased = _out743;
                  _2012_recIdents = _out744;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2009_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2010_recOwned;
                  isErased = _2011_recErased;
                  readIdents = _2012_recIdents;
                }
              } else if (_source103.is_Set) {
                DAST._IType _2013___mcc_h699 = _source103.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2014_recursiveGen;
                  bool _2015_recOwned;
                  bool _2016_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2017_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out745;
                  bool _out746;
                  bool _out747;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                  _2014_recursiveGen = _out745;
                  _2015_recOwned = _out746;
                  _2016_recErased = _out747;
                  _2017_recIdents = _out748;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2014_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2015_recOwned;
                  isErased = _2016_recErased;
                  readIdents = _2017_recIdents;
                }
              } else if (_source103.is_Multiset) {
                DAST._IType _2018___mcc_h701 = _source103.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2019_recursiveGen;
                  bool _2020_recOwned;
                  bool _2021_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2022_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out749;
                  bool _out750;
                  bool _out751;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out752;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out749, out _out750, out _out751, out _out752);
                  _2019_recursiveGen = _out749;
                  _2020_recOwned = _out750;
                  _2021_recErased = _out751;
                  _2022_recIdents = _out752;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2019_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2020_recOwned;
                  isErased = _2021_recErased;
                  readIdents = _2022_recIdents;
                }
              } else if (_source103.is_Map) {
                DAST._IType _2023___mcc_h703 = _source103.dtor_key;
                DAST._IType _2024___mcc_h704 = _source103.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2025_recursiveGen;
                  bool _2026_recOwned;
                  bool _2027_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2028_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out753;
                  bool _out754;
                  bool _out755;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out756;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out753, out _out754, out _out755, out _out756);
                  _2025_recursiveGen = _out753;
                  _2026_recOwned = _out754;
                  _2027_recErased = _out755;
                  _2028_recIdents = _out756;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2025_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2026_recOwned;
                  isErased = _2027_recErased;
                  readIdents = _2028_recIdents;
                }
              } else if (_source103.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2029___mcc_h707 = _source103.dtor_args;
                DAST._IType _2030___mcc_h708 = _source103.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2031_recursiveGen;
                  bool _2032_recOwned;
                  bool _2033_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2034_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out757;
                  bool _out758;
                  bool _out759;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out760;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out757, out _out758, out _out759, out _out760);
                  _2031_recursiveGen = _out757;
                  _2032_recOwned = _out758;
                  _2033_recErased = _out759;
                  _2034_recIdents = _out760;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2031_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2032_recOwned;
                  isErased = _2033_recErased;
                  readIdents = _2034_recIdents;
                }
              } else if (_source103.is_Primitive) {
                DAST._IPrimitive _2035___mcc_h711 = _source103.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2036_recursiveGen;
                  bool _2037_recOwned;
                  bool _2038_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2039_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out761;
                  bool _out762;
                  bool _out763;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out764;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out761, out _out762, out _out763, out _out764);
                  _2036_recursiveGen = _out761;
                  _2037_recOwned = _out762;
                  _2038_recErased = _out763;
                  _2039_recIdents = _out764;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2036_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2037_recOwned;
                  isErased = _2038_recErased;
                  readIdents = _2039_recIdents;
                }
              } else if (_source103.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2040___mcc_h713 = _source103.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2041_recursiveGen;
                  bool _2042_recOwned;
                  bool _2043_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2044_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out765;
                  bool _out766;
                  bool _out767;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out768;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out765, out _out766, out _out767, out _out768);
                  _2041_recursiveGen = _out765;
                  _2042_recOwned = _out766;
                  _2043_recErased = _out767;
                  _2044_recIdents = _out768;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2041_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2042_recOwned;
                  isErased = _2043_recErased;
                  readIdents = _2044_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2045___mcc_h715 = _source103.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2046_recursiveGen;
                  bool _2047_recOwned;
                  bool _2048_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2049_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out769;
                  bool _out770;
                  bool _out771;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out772;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out769, out _out770, out _out771, out _out772);
                  _2046_recursiveGen = _out769;
                  _2047_recOwned = _out770;
                  _2048_recErased = _out771;
                  _2049_recIdents = _out772;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2046_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2047_recOwned;
                  isErased = _2048_recErased;
                  readIdents = _2049_recIdents;
                }
              }
            } else if (_source87.is_Multiset) {
              DAST._IType _2050___mcc_h717 = _source87.dtor_element;
              DAST._IType _source105 = _1384___mcc_h306;
              if (_source105.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2051___mcc_h721 = _source105.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2052___mcc_h722 = _source105.dtor_typeArgs;
                DAST._IResolvedType _2053___mcc_h723 = _source105.dtor_resolved;
                DAST._IResolvedType _source106 = _2053___mcc_h723;
                if (_source106.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2054___mcc_h727 = _source106.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2055_recursiveGen;
                    bool _2056_recOwned;
                    bool _2057_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2058_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out773;
                    bool _out774;
                    bool _out775;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out776;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out773, out _out774, out _out775, out _out776);
                    _2055_recursiveGen = _out773;
                    _2056_recOwned = _out774;
                    _2057_recErased = _out775;
                    _2058_recIdents = _out776;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2055_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2056_recOwned;
                    isErased = _2057_recErased;
                    readIdents = _2058_recIdents;
                  }
                } else if (_source106.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2059___mcc_h729 = _source106.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2060_recursiveGen;
                    bool _2061_recOwned;
                    bool _2062_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2063_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out777;
                    bool _out778;
                    bool _out779;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out780;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out777, out _out778, out _out779, out _out780);
                    _2060_recursiveGen = _out777;
                    _2061_recOwned = _out778;
                    _2062_recErased = _out779;
                    _2063_recIdents = _out780;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2060_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2061_recOwned;
                    isErased = _2062_recErased;
                    readIdents = _2063_recIdents;
                  }
                } else {
                  DAST._IType _2064___mcc_h731 = _source106.dtor_Newtype_a0;
                  DAST._IType _2065_b = _2064___mcc_h731;
                  {
                    if (object.Equals(_1377_fromTpe, _2065_b)) {
                      Dafny.ISequence<Dafny.Rune> _2066_recursiveGen;
                      bool _2067_recOwned;
                      bool _2068_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2069_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out781;
                      bool _out782;
                      bool _out783;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out784;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out781, out _out782, out _out783, out _out784);
                      _2066_recursiveGen = _out781;
                      _2067_recOwned = _out782;
                      _2068_recErased = _out783;
                      _2069_recIdents = _out784;
                      Dafny.ISequence<Dafny.Rune> _2070_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out785;
                      _out785 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _2070_rhsType = _out785;
                      Dafny.ISequence<Dafny.Rune> _2071_uneraseFn;
                      _2071_uneraseFn = ((_2067_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2070_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2071_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2066_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2067_recOwned;
                      isErased = false;
                      readIdents = _2069_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out786;
                      bool _out787;
                      bool _out788;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out789;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2065_b), _2065_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out786, out _out787, out _out788, out _out789);
                      s = _out786;
                      isOwned = _out787;
                      isErased = _out788;
                      readIdents = _out789;
                    }
                  }
                }
              } else if (_source105.is_Nullable) {
                DAST._IType _2072___mcc_h733 = _source105.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2073_recursiveGen;
                  bool _2074_recOwned;
                  bool _2075_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2076_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out790;
                  bool _out791;
                  bool _out792;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out790, out _out791, out _out792, out _out793);
                  _2073_recursiveGen = _out790;
                  _2074_recOwned = _out791;
                  _2075_recErased = _out792;
                  _2076_recIdents = _out793;
                  if (!(_2074_recOwned)) {
                    _2073_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2073_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2073_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2075_recErased;
                  readIdents = _2076_recIdents;
                }
              } else if (_source105.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2077___mcc_h735 = _source105.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2078_recursiveGen;
                  bool _2079_recOwned;
                  bool _2080_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2081_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out794;
                  bool _out795;
                  bool _out796;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out794, out _out795, out _out796, out _out797);
                  _2078_recursiveGen = _out794;
                  _2079_recOwned = _out795;
                  _2080_recErased = _out796;
                  _2081_recIdents = _out797;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2078_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2079_recOwned;
                  isErased = _2080_recErased;
                  readIdents = _2081_recIdents;
                }
              } else if (_source105.is_Array) {
                DAST._IType _2082___mcc_h737 = _source105.dtor_element;
                BigInteger _2083___mcc_h738 = _source105.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2084_recursiveGen;
                  bool _2085_recOwned;
                  bool _2086_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2087_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out798;
                  bool _out799;
                  bool _out800;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out801;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out798, out _out799, out _out800, out _out801);
                  _2084_recursiveGen = _out798;
                  _2085_recOwned = _out799;
                  _2086_recErased = _out800;
                  _2087_recIdents = _out801;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2084_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2085_recOwned;
                  isErased = _2086_recErased;
                  readIdents = _2087_recIdents;
                }
              } else if (_source105.is_Seq) {
                DAST._IType _2088___mcc_h741 = _source105.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2089_recursiveGen;
                  bool _2090_recOwned;
                  bool _2091_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2092_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out802;
                  bool _out803;
                  bool _out804;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out805;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out802, out _out803, out _out804, out _out805);
                  _2089_recursiveGen = _out802;
                  _2090_recOwned = _out803;
                  _2091_recErased = _out804;
                  _2092_recIdents = _out805;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2089_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2090_recOwned;
                  isErased = _2091_recErased;
                  readIdents = _2092_recIdents;
                }
              } else if (_source105.is_Set) {
                DAST._IType _2093___mcc_h743 = _source105.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2094_recursiveGen;
                  bool _2095_recOwned;
                  bool _2096_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2097_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out806;
                  bool _out807;
                  bool _out808;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                  _2094_recursiveGen = _out806;
                  _2095_recOwned = _out807;
                  _2096_recErased = _out808;
                  _2097_recIdents = _out809;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2094_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2095_recOwned;
                  isErased = _2096_recErased;
                  readIdents = _2097_recIdents;
                }
              } else if (_source105.is_Multiset) {
                DAST._IType _2098___mcc_h745 = _source105.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2099_recursiveGen;
                  bool _2100_recOwned;
                  bool _2101_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2102_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out810;
                  bool _out811;
                  bool _out812;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out813;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out810, out _out811, out _out812, out _out813);
                  _2099_recursiveGen = _out810;
                  _2100_recOwned = _out811;
                  _2101_recErased = _out812;
                  _2102_recIdents = _out813;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2099_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2100_recOwned;
                  isErased = _2101_recErased;
                  readIdents = _2102_recIdents;
                }
              } else if (_source105.is_Map) {
                DAST._IType _2103___mcc_h747 = _source105.dtor_key;
                DAST._IType _2104___mcc_h748 = _source105.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2105_recursiveGen;
                  bool _2106_recOwned;
                  bool _2107_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2108_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out814;
                  bool _out815;
                  bool _out816;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out814, out _out815, out _out816, out _out817);
                  _2105_recursiveGen = _out814;
                  _2106_recOwned = _out815;
                  _2107_recErased = _out816;
                  _2108_recIdents = _out817;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2105_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2106_recOwned;
                  isErased = _2107_recErased;
                  readIdents = _2108_recIdents;
                }
              } else if (_source105.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2109___mcc_h751 = _source105.dtor_args;
                DAST._IType _2110___mcc_h752 = _source105.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2111_recursiveGen;
                  bool _2112_recOwned;
                  bool _2113_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2114_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out818;
                  bool _out819;
                  bool _out820;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out821;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out818, out _out819, out _out820, out _out821);
                  _2111_recursiveGen = _out818;
                  _2112_recOwned = _out819;
                  _2113_recErased = _out820;
                  _2114_recIdents = _out821;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2111_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2112_recOwned;
                  isErased = _2113_recErased;
                  readIdents = _2114_recIdents;
                }
              } else if (_source105.is_Primitive) {
                DAST._IPrimitive _2115___mcc_h755 = _source105.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2116_recursiveGen;
                  bool _2117_recOwned;
                  bool _2118_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2119_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out822;
                  bool _out823;
                  bool _out824;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out825;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out822, out _out823, out _out824, out _out825);
                  _2116_recursiveGen = _out822;
                  _2117_recOwned = _out823;
                  _2118_recErased = _out824;
                  _2119_recIdents = _out825;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2117_recOwned;
                  isErased = _2118_recErased;
                  readIdents = _2119_recIdents;
                }
              } else if (_source105.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2120___mcc_h757 = _source105.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2121_recursiveGen;
                  bool _2122_recOwned;
                  bool _2123_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2124_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out826;
                  bool _out827;
                  bool _out828;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out829;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out826, out _out827, out _out828, out _out829);
                  _2121_recursiveGen = _out826;
                  _2122_recOwned = _out827;
                  _2123_recErased = _out828;
                  _2124_recIdents = _out829;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2121_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2122_recOwned;
                  isErased = _2123_recErased;
                  readIdents = _2124_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2125___mcc_h759 = _source105.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2126_recursiveGen;
                  bool _2127_recOwned;
                  bool _2128_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2129_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out830;
                  bool _out831;
                  bool _out832;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out833;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out830, out _out831, out _out832, out _out833);
                  _2126_recursiveGen = _out830;
                  _2127_recOwned = _out831;
                  _2128_recErased = _out832;
                  _2129_recIdents = _out833;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2126_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2127_recOwned;
                  isErased = _2128_recErased;
                  readIdents = _2129_recIdents;
                }
              }
            } else if (_source87.is_Map) {
              DAST._IType _2130___mcc_h761 = _source87.dtor_key;
              DAST._IType _2131___mcc_h762 = _source87.dtor_value;
              DAST._IType _source107 = _1384___mcc_h306;
              if (_source107.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2132___mcc_h769 = _source107.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2133___mcc_h770 = _source107.dtor_typeArgs;
                DAST._IResolvedType _2134___mcc_h771 = _source107.dtor_resolved;
                DAST._IResolvedType _source108 = _2134___mcc_h771;
                if (_source108.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2135___mcc_h775 = _source108.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2136_recursiveGen;
                    bool _2137_recOwned;
                    bool _2138_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2139_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out834;
                    bool _out835;
                    bool _out836;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out837;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out834, out _out835, out _out836, out _out837);
                    _2136_recursiveGen = _out834;
                    _2137_recOwned = _out835;
                    _2138_recErased = _out836;
                    _2139_recIdents = _out837;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2136_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2137_recOwned;
                    isErased = _2138_recErased;
                    readIdents = _2139_recIdents;
                  }
                } else if (_source108.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2140___mcc_h777 = _source108.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2141_recursiveGen;
                    bool _2142_recOwned;
                    bool _2143_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2144_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out838;
                    bool _out839;
                    bool _out840;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out841;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out838, out _out839, out _out840, out _out841);
                    _2141_recursiveGen = _out838;
                    _2142_recOwned = _out839;
                    _2143_recErased = _out840;
                    _2144_recIdents = _out841;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2141_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2142_recOwned;
                    isErased = _2143_recErased;
                    readIdents = _2144_recIdents;
                  }
                } else {
                  DAST._IType _2145___mcc_h779 = _source108.dtor_Newtype_a0;
                  DAST._IType _2146_b = _2145___mcc_h779;
                  {
                    if (object.Equals(_1377_fromTpe, _2146_b)) {
                      Dafny.ISequence<Dafny.Rune> _2147_recursiveGen;
                      bool _2148_recOwned;
                      bool _2149_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2150_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out842;
                      bool _out843;
                      bool _out844;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out845;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out842, out _out843, out _out844, out _out845);
                      _2147_recursiveGen = _out842;
                      _2148_recOwned = _out843;
                      _2149_recErased = _out844;
                      _2150_recIdents = _out845;
                      Dafny.ISequence<Dafny.Rune> _2151_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out846;
                      _out846 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _2151_rhsType = _out846;
                      Dafny.ISequence<Dafny.Rune> _2152_uneraseFn;
                      _2152_uneraseFn = ((_2148_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2151_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2152_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2147_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2148_recOwned;
                      isErased = false;
                      readIdents = _2150_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out847;
                      bool _out848;
                      bool _out849;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2146_b), _2146_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out847, out _out848, out _out849, out _out850);
                      s = _out847;
                      isOwned = _out848;
                      isErased = _out849;
                      readIdents = _out850;
                    }
                  }
                }
              } else if (_source107.is_Nullable) {
                DAST._IType _2153___mcc_h781 = _source107.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2154_recursiveGen;
                  bool _2155_recOwned;
                  bool _2156_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2157_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out851;
                  bool _out852;
                  bool _out853;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out851, out _out852, out _out853, out _out854);
                  _2154_recursiveGen = _out851;
                  _2155_recOwned = _out852;
                  _2156_recErased = _out853;
                  _2157_recIdents = _out854;
                  if (!(_2155_recOwned)) {
                    _2154_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2154_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2154_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2156_recErased;
                  readIdents = _2157_recIdents;
                }
              } else if (_source107.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2158___mcc_h783 = _source107.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2159_recursiveGen;
                  bool _2160_recOwned;
                  bool _2161_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2162_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out855;
                  bool _out856;
                  bool _out857;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out855, out _out856, out _out857, out _out858);
                  _2159_recursiveGen = _out855;
                  _2160_recOwned = _out856;
                  _2161_recErased = _out857;
                  _2162_recIdents = _out858;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2159_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2160_recOwned;
                  isErased = _2161_recErased;
                  readIdents = _2162_recIdents;
                }
              } else if (_source107.is_Array) {
                DAST._IType _2163___mcc_h785 = _source107.dtor_element;
                BigInteger _2164___mcc_h786 = _source107.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2165_recursiveGen;
                  bool _2166_recOwned;
                  bool _2167_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2168_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out859;
                  bool _out860;
                  bool _out861;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out862;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out859, out _out860, out _out861, out _out862);
                  _2165_recursiveGen = _out859;
                  _2166_recOwned = _out860;
                  _2167_recErased = _out861;
                  _2168_recIdents = _out862;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2165_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2166_recOwned;
                  isErased = _2167_recErased;
                  readIdents = _2168_recIdents;
                }
              } else if (_source107.is_Seq) {
                DAST._IType _2169___mcc_h789 = _source107.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2170_recursiveGen;
                  bool _2171_recOwned;
                  bool _2172_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2173_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out863;
                  bool _out864;
                  bool _out865;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out866;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out863, out _out864, out _out865, out _out866);
                  _2170_recursiveGen = _out863;
                  _2171_recOwned = _out864;
                  _2172_recErased = _out865;
                  _2173_recIdents = _out866;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2170_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2171_recOwned;
                  isErased = _2172_recErased;
                  readIdents = _2173_recIdents;
                }
              } else if (_source107.is_Set) {
                DAST._IType _2174___mcc_h791 = _source107.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2175_recursiveGen;
                  bool _2176_recOwned;
                  bool _2177_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2178_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out867;
                  bool _out868;
                  bool _out869;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                  _2175_recursiveGen = _out867;
                  _2176_recOwned = _out868;
                  _2177_recErased = _out869;
                  _2178_recIdents = _out870;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2176_recOwned;
                  isErased = _2177_recErased;
                  readIdents = _2178_recIdents;
                }
              } else if (_source107.is_Multiset) {
                DAST._IType _2179___mcc_h793 = _source107.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2180_recursiveGen;
                  bool _2181_recOwned;
                  bool _2182_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2183_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out871;
                  bool _out872;
                  bool _out873;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out874;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out871, out _out872, out _out873, out _out874);
                  _2180_recursiveGen = _out871;
                  _2181_recOwned = _out872;
                  _2182_recErased = _out873;
                  _2183_recIdents = _out874;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2180_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2181_recOwned;
                  isErased = _2182_recErased;
                  readIdents = _2183_recIdents;
                }
              } else if (_source107.is_Map) {
                DAST._IType _2184___mcc_h795 = _source107.dtor_key;
                DAST._IType _2185___mcc_h796 = _source107.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2186_recursiveGen;
                  bool _2187_recOwned;
                  bool _2188_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2189_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out875;
                  bool _out876;
                  bool _out877;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out875, out _out876, out _out877, out _out878);
                  _2186_recursiveGen = _out875;
                  _2187_recOwned = _out876;
                  _2188_recErased = _out877;
                  _2189_recIdents = _out878;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2186_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2187_recOwned;
                  isErased = _2188_recErased;
                  readIdents = _2189_recIdents;
                }
              } else if (_source107.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2190___mcc_h799 = _source107.dtor_args;
                DAST._IType _2191___mcc_h800 = _source107.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2192_recursiveGen;
                  bool _2193_recOwned;
                  bool _2194_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2195_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out879;
                  bool _out880;
                  bool _out881;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out882;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out879, out _out880, out _out881, out _out882);
                  _2192_recursiveGen = _out879;
                  _2193_recOwned = _out880;
                  _2194_recErased = _out881;
                  _2195_recIdents = _out882;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2192_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2193_recOwned;
                  isErased = _2194_recErased;
                  readIdents = _2195_recIdents;
                }
              } else if (_source107.is_Primitive) {
                DAST._IPrimitive _2196___mcc_h803 = _source107.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2197_recursiveGen;
                  bool _2198_recOwned;
                  bool _2199_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2200_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out883;
                  bool _out884;
                  bool _out885;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out886;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out883, out _out884, out _out885, out _out886);
                  _2197_recursiveGen = _out883;
                  _2198_recOwned = _out884;
                  _2199_recErased = _out885;
                  _2200_recIdents = _out886;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2197_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2198_recOwned;
                  isErased = _2199_recErased;
                  readIdents = _2200_recIdents;
                }
              } else if (_source107.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2201___mcc_h805 = _source107.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2202_recursiveGen;
                  bool _2203_recOwned;
                  bool _2204_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2205_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out887;
                  bool _out888;
                  bool _out889;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out890;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out887, out _out888, out _out889, out _out890);
                  _2202_recursiveGen = _out887;
                  _2203_recOwned = _out888;
                  _2204_recErased = _out889;
                  _2205_recIdents = _out890;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2202_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2203_recOwned;
                  isErased = _2204_recErased;
                  readIdents = _2205_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2206___mcc_h807 = _source107.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2207_recursiveGen;
                  bool _2208_recOwned;
                  bool _2209_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2210_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out891;
                  bool _out892;
                  bool _out893;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out894;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out891, out _out892, out _out893, out _out894);
                  _2207_recursiveGen = _out891;
                  _2208_recOwned = _out892;
                  _2209_recErased = _out893;
                  _2210_recIdents = _out894;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2207_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2208_recOwned;
                  isErased = _2209_recErased;
                  readIdents = _2210_recIdents;
                }
              }
            } else if (_source87.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2211___mcc_h809 = _source87.dtor_args;
              DAST._IType _2212___mcc_h810 = _source87.dtor_result;
              DAST._IType _source109 = _1384___mcc_h306;
              if (_source109.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2213___mcc_h817 = _source109.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2214___mcc_h818 = _source109.dtor_typeArgs;
                DAST._IResolvedType _2215___mcc_h819 = _source109.dtor_resolved;
                DAST._IResolvedType _source110 = _2215___mcc_h819;
                if (_source110.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2216___mcc_h823 = _source110.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2217_recursiveGen;
                    bool _2218_recOwned;
                    bool _2219_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2220_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out895;
                    bool _out896;
                    bool _out897;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out895, out _out896, out _out897, out _out898);
                    _2217_recursiveGen = _out895;
                    _2218_recOwned = _out896;
                    _2219_recErased = _out897;
                    _2220_recIdents = _out898;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2217_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2218_recOwned;
                    isErased = _2219_recErased;
                    readIdents = _2220_recIdents;
                  }
                } else if (_source110.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2221___mcc_h825 = _source110.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2222_recursiveGen;
                    bool _2223_recOwned;
                    bool _2224_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2225_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out899;
                    bool _out900;
                    bool _out901;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out902;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out899, out _out900, out _out901, out _out902);
                    _2222_recursiveGen = _out899;
                    _2223_recOwned = _out900;
                    _2224_recErased = _out901;
                    _2225_recIdents = _out902;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2222_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2223_recOwned;
                    isErased = _2224_recErased;
                    readIdents = _2225_recIdents;
                  }
                } else {
                  DAST._IType _2226___mcc_h827 = _source110.dtor_Newtype_a0;
                  DAST._IType _2227_b = _2226___mcc_h827;
                  {
                    if (object.Equals(_1377_fromTpe, _2227_b)) {
                      Dafny.ISequence<Dafny.Rune> _2228_recursiveGen;
                      bool _2229_recOwned;
                      bool _2230_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2231_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out903;
                      bool _out904;
                      bool _out905;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out906;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out903, out _out904, out _out905, out _out906);
                      _2228_recursiveGen = _out903;
                      _2229_recOwned = _out904;
                      _2230_recErased = _out905;
                      _2231_recIdents = _out906;
                      Dafny.ISequence<Dafny.Rune> _2232_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out907;
                      _out907 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _2232_rhsType = _out907;
                      Dafny.ISequence<Dafny.Rune> _2233_uneraseFn;
                      _2233_uneraseFn = ((_2229_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2232_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2233_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2228_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2229_recOwned;
                      isErased = false;
                      readIdents = _2231_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out908;
                      bool _out909;
                      bool _out910;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out911;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2227_b), _2227_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out908, out _out909, out _out910, out _out911);
                      s = _out908;
                      isOwned = _out909;
                      isErased = _out910;
                      readIdents = _out911;
                    }
                  }
                }
              } else if (_source109.is_Nullable) {
                DAST._IType _2234___mcc_h829 = _source109.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2235_recursiveGen;
                  bool _2236_recOwned;
                  bool _2237_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2238_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out912;
                  bool _out913;
                  bool _out914;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out915;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out912, out _out913, out _out914, out _out915);
                  _2235_recursiveGen = _out912;
                  _2236_recOwned = _out913;
                  _2237_recErased = _out914;
                  _2238_recIdents = _out915;
                  if (!(_2236_recOwned)) {
                    _2235_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2235_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2235_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2237_recErased;
                  readIdents = _2238_recIdents;
                }
              } else if (_source109.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2239___mcc_h831 = _source109.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2240_recursiveGen;
                  bool _2241_recOwned;
                  bool _2242_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2243_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out916;
                  bool _out917;
                  bool _out918;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out916, out _out917, out _out918, out _out919);
                  _2240_recursiveGen = _out916;
                  _2241_recOwned = _out917;
                  _2242_recErased = _out918;
                  _2243_recIdents = _out919;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2240_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2241_recOwned;
                  isErased = _2242_recErased;
                  readIdents = _2243_recIdents;
                }
              } else if (_source109.is_Array) {
                DAST._IType _2244___mcc_h833 = _source109.dtor_element;
                BigInteger _2245___mcc_h834 = _source109.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2246_recursiveGen;
                  bool _2247_recOwned;
                  bool _2248_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2249_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out920;
                  bool _out921;
                  bool _out922;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out920, out _out921, out _out922, out _out923);
                  _2246_recursiveGen = _out920;
                  _2247_recOwned = _out921;
                  _2248_recErased = _out922;
                  _2249_recIdents = _out923;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2246_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2247_recOwned;
                  isErased = _2248_recErased;
                  readIdents = _2249_recIdents;
                }
              } else if (_source109.is_Seq) {
                DAST._IType _2250___mcc_h837 = _source109.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2251_recursiveGen;
                  bool _2252_recOwned;
                  bool _2253_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2254_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out924;
                  bool _out925;
                  bool _out926;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out927;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out924, out _out925, out _out926, out _out927);
                  _2251_recursiveGen = _out924;
                  _2252_recOwned = _out925;
                  _2253_recErased = _out926;
                  _2254_recIdents = _out927;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2251_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2252_recOwned;
                  isErased = _2253_recErased;
                  readIdents = _2254_recIdents;
                }
              } else if (_source109.is_Set) {
                DAST._IType _2255___mcc_h839 = _source109.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2256_recursiveGen;
                  bool _2257_recOwned;
                  bool _2258_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2259_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out928;
                  bool _out929;
                  bool _out930;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                  _2256_recursiveGen = _out928;
                  _2257_recOwned = _out929;
                  _2258_recErased = _out930;
                  _2259_recIdents = _out931;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2256_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2257_recOwned;
                  isErased = _2258_recErased;
                  readIdents = _2259_recIdents;
                }
              } else if (_source109.is_Multiset) {
                DAST._IType _2260___mcc_h841 = _source109.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2261_recursiveGen;
                  bool _2262_recOwned;
                  bool _2263_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2264_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out932;
                  bool _out933;
                  bool _out934;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out935;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out932, out _out933, out _out934, out _out935);
                  _2261_recursiveGen = _out932;
                  _2262_recOwned = _out933;
                  _2263_recErased = _out934;
                  _2264_recIdents = _out935;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2261_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2262_recOwned;
                  isErased = _2263_recErased;
                  readIdents = _2264_recIdents;
                }
              } else if (_source109.is_Map) {
                DAST._IType _2265___mcc_h843 = _source109.dtor_key;
                DAST._IType _2266___mcc_h844 = _source109.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2267_recursiveGen;
                  bool _2268_recOwned;
                  bool _2269_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2270_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out936;
                  bool _out937;
                  bool _out938;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out939;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out936, out _out937, out _out938, out _out939);
                  _2267_recursiveGen = _out936;
                  _2268_recOwned = _out937;
                  _2269_recErased = _out938;
                  _2270_recIdents = _out939;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2268_recOwned;
                  isErased = _2269_recErased;
                  readIdents = _2270_recIdents;
                }
              } else if (_source109.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2271___mcc_h847 = _source109.dtor_args;
                DAST._IType _2272___mcc_h848 = _source109.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2273_recursiveGen;
                  bool _2274_recOwned;
                  bool _2275_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2276_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out940;
                  bool _out941;
                  bool _out942;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out943;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out940, out _out941, out _out942, out _out943);
                  _2273_recursiveGen = _out940;
                  _2274_recOwned = _out941;
                  _2275_recErased = _out942;
                  _2276_recIdents = _out943;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2273_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2274_recOwned;
                  isErased = _2275_recErased;
                  readIdents = _2276_recIdents;
                }
              } else if (_source109.is_Primitive) {
                DAST._IPrimitive _2277___mcc_h851 = _source109.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2278_recursiveGen;
                  bool _2279_recOwned;
                  bool _2280_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2281_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out944;
                  bool _out945;
                  bool _out946;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out947;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out944, out _out945, out _out946, out _out947);
                  _2278_recursiveGen = _out944;
                  _2279_recOwned = _out945;
                  _2280_recErased = _out946;
                  _2281_recIdents = _out947;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2278_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2279_recOwned;
                  isErased = _2280_recErased;
                  readIdents = _2281_recIdents;
                }
              } else if (_source109.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2282___mcc_h853 = _source109.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2283_recursiveGen;
                  bool _2284_recOwned;
                  bool _2285_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2286_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out948;
                  bool _out949;
                  bool _out950;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out951;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out948, out _out949, out _out950, out _out951);
                  _2283_recursiveGen = _out948;
                  _2284_recOwned = _out949;
                  _2285_recErased = _out950;
                  _2286_recIdents = _out951;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2283_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2284_recOwned;
                  isErased = _2285_recErased;
                  readIdents = _2286_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2287___mcc_h855 = _source109.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2288_recursiveGen;
                  bool _2289_recOwned;
                  bool _2290_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2291_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out952;
                  bool _out953;
                  bool _out954;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out955;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out952, out _out953, out _out954, out _out955);
                  _2288_recursiveGen = _out952;
                  _2289_recOwned = _out953;
                  _2290_recErased = _out954;
                  _2291_recIdents = _out955;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2288_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2289_recOwned;
                  isErased = _2290_recErased;
                  readIdents = _2291_recIdents;
                }
              }
            } else if (_source87.is_Primitive) {
              DAST._IPrimitive _2292___mcc_h857 = _source87.dtor_Primitive_a0;
              DAST._IPrimitive _source111 = _2292___mcc_h857;
              if (_source111.is_Int) {
                DAST._IType _source112 = _1384___mcc_h306;
                if (_source112.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2293___mcc_h861 = _source112.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2294___mcc_h862 = _source112.dtor_typeArgs;
                  DAST._IResolvedType _2295___mcc_h863 = _source112.dtor_resolved;
                  DAST._IResolvedType _source113 = _2295___mcc_h863;
                  if (_source113.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2296___mcc_h867 = _source113.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2297_recursiveGen;
                      bool _2298_recOwned;
                      bool _2299_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2300_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out956;
                      bool _out957;
                      bool _out958;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out956, out _out957, out _out958, out _out959);
                      _2297_recursiveGen = _out956;
                      _2298_recOwned = _out957;
                      _2299_recErased = _out958;
                      _2300_recIdents = _out959;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2297_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2298_recOwned;
                      isErased = _2299_recErased;
                      readIdents = _2300_recIdents;
                    }
                  } else if (_source113.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2301___mcc_h869 = _source113.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2302_recursiveGen;
                      bool _2303_recOwned;
                      bool _2304_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2305_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out960;
                      bool _out961;
                      bool _out962;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out963;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out960, out _out961, out _out962, out _out963);
                      _2302_recursiveGen = _out960;
                      _2303_recOwned = _out961;
                      _2304_recErased = _out962;
                      _2305_recIdents = _out963;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2302_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2303_recOwned;
                      isErased = _2304_recErased;
                      readIdents = _2305_recIdents;
                    }
                  } else {
                    DAST._IType _2306___mcc_h871 = _source113.dtor_Newtype_a0;
                    DAST._IType _2307_b = _2306___mcc_h871;
                    {
                      if (object.Equals(_1377_fromTpe, _2307_b)) {
                        Dafny.ISequence<Dafny.Rune> _2308_recursiveGen;
                        bool _2309_recOwned;
                        bool _2310_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2311_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out964;
                        bool _out965;
                        bool _out966;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out967;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out964, out _out965, out _out966, out _out967);
                        _2308_recursiveGen = _out964;
                        _2309_recOwned = _out965;
                        _2310_recErased = _out966;
                        _2311_recIdents = _out967;
                        Dafny.ISequence<Dafny.Rune> _2312_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out968;
                        _out968 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                        _2312_rhsType = _out968;
                        Dafny.ISequence<Dafny.Rune> _2313_uneraseFn;
                        _2313_uneraseFn = ((_2309_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2312_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2313_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2308_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2309_recOwned;
                        isErased = false;
                        readIdents = _2311_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out969;
                        bool _out970;
                        bool _out971;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out972;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2307_b), _2307_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out969, out _out970, out _out971, out _out972);
                        s = _out969;
                        isOwned = _out970;
                        isErased = _out971;
                        readIdents = _out972;
                      }
                    }
                  }
                } else if (_source112.is_Nullable) {
                  DAST._IType _2314___mcc_h873 = _source112.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2315_recursiveGen;
                    bool _2316_recOwned;
                    bool _2317_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2318_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out973;
                    bool _out974;
                    bool _out975;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out976;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out973, out _out974, out _out975, out _out976);
                    _2315_recursiveGen = _out973;
                    _2316_recOwned = _out974;
                    _2317_recErased = _out975;
                    _2318_recIdents = _out976;
                    if (!(_2316_recOwned)) {
                      _2315_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2315_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2315_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2317_recErased;
                    readIdents = _2318_recIdents;
                  }
                } else if (_source112.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2319___mcc_h875 = _source112.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2320_recursiveGen;
                    bool _2321_recOwned;
                    bool _2322_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2323_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out977;
                    bool _out978;
                    bool _out979;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out980;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out977, out _out978, out _out979, out _out980);
                    _2320_recursiveGen = _out977;
                    _2321_recOwned = _out978;
                    _2322_recErased = _out979;
                    _2323_recIdents = _out980;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2320_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2321_recOwned;
                    isErased = _2322_recErased;
                    readIdents = _2323_recIdents;
                  }
                } else if (_source112.is_Array) {
                  DAST._IType _2324___mcc_h877 = _source112.dtor_element;
                  BigInteger _2325___mcc_h878 = _source112.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2326_recursiveGen;
                    bool _2327_recOwned;
                    bool _2328_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2329_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out981;
                    bool _out982;
                    bool _out983;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out981, out _out982, out _out983, out _out984);
                    _2326_recursiveGen = _out981;
                    _2327_recOwned = _out982;
                    _2328_recErased = _out983;
                    _2329_recIdents = _out984;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2326_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2327_recOwned;
                    isErased = _2328_recErased;
                    readIdents = _2329_recIdents;
                  }
                } else if (_source112.is_Seq) {
                  DAST._IType _2330___mcc_h881 = _source112.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2331_recursiveGen;
                    bool _2332_recOwned;
                    bool _2333_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2334_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out985;
                    bool _out986;
                    bool _out987;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out988;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out985, out _out986, out _out987, out _out988);
                    _2331_recursiveGen = _out985;
                    _2332_recOwned = _out986;
                    _2333_recErased = _out987;
                    _2334_recIdents = _out988;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2331_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2332_recOwned;
                    isErased = _2333_recErased;
                    readIdents = _2334_recIdents;
                  }
                } else if (_source112.is_Set) {
                  DAST._IType _2335___mcc_h883 = _source112.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2336_recursiveGen;
                    bool _2337_recOwned;
                    bool _2338_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2339_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out989;
                    bool _out990;
                    bool _out991;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out992;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out989, out _out990, out _out991, out _out992);
                    _2336_recursiveGen = _out989;
                    _2337_recOwned = _out990;
                    _2338_recErased = _out991;
                    _2339_recIdents = _out992;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2336_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2337_recOwned;
                    isErased = _2338_recErased;
                    readIdents = _2339_recIdents;
                  }
                } else if (_source112.is_Multiset) {
                  DAST._IType _2340___mcc_h885 = _source112.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2341_recursiveGen;
                    bool _2342_recOwned;
                    bool _2343_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2344_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out993;
                    bool _out994;
                    bool _out995;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out996;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out993, out _out994, out _out995, out _out996);
                    _2341_recursiveGen = _out993;
                    _2342_recOwned = _out994;
                    _2343_recErased = _out995;
                    _2344_recIdents = _out996;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2341_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2342_recOwned;
                    isErased = _2343_recErased;
                    readIdents = _2344_recIdents;
                  }
                } else if (_source112.is_Map) {
                  DAST._IType _2345___mcc_h887 = _source112.dtor_key;
                  DAST._IType _2346___mcc_h888 = _source112.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2347_recursiveGen;
                    bool _2348_recOwned;
                    bool _2349_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2350_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out997;
                    bool _out998;
                    bool _out999;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1000;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out997, out _out998, out _out999, out _out1000);
                    _2347_recursiveGen = _out997;
                    _2348_recOwned = _out998;
                    _2349_recErased = _out999;
                    _2350_recIdents = _out1000;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2347_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2348_recOwned;
                    isErased = _2349_recErased;
                    readIdents = _2350_recIdents;
                  }
                } else if (_source112.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2351___mcc_h891 = _source112.dtor_args;
                  DAST._IType _2352___mcc_h892 = _source112.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2353_recursiveGen;
                    bool _2354_recOwned;
                    bool _2355_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2356_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1001;
                    bool _out1002;
                    bool _out1003;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1001, out _out1002, out _out1003, out _out1004);
                    _2353_recursiveGen = _out1001;
                    _2354_recOwned = _out1002;
                    _2355_recErased = _out1003;
                    _2356_recIdents = _out1004;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2353_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2354_recOwned;
                    isErased = _2355_recErased;
                    readIdents = _2356_recIdents;
                  }
                } else if (_source112.is_Primitive) {
                  DAST._IPrimitive _2357___mcc_h895 = _source112.dtor_Primitive_a0;
                  DAST._IPrimitive _source114 = _2357___mcc_h895;
                  if (_source114.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2358_recursiveGen;
                      bool _2359_recOwned;
                      bool _2360_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2361_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1005;
                      bool _out1006;
                      bool _out1007;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1008;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1005, out _out1006, out _out1007, out _out1008);
                      _2358_recursiveGen = _out1005;
                      _2359_recOwned = _out1006;
                      _2360_recErased = _out1007;
                      _2361_recIdents = _out1008;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2359_recOwned;
                      isErased = _2360_recErased;
                      readIdents = _2361_recIdents;
                    }
                  } else if (_source114.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2362_recursiveGen;
                      bool _2363___v46;
                      bool _2364___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2365_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1009;
                      bool _out1010;
                      bool _out1011;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1012;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, true, out _out1009, out _out1010, out _out1011, out _out1012);
                      _2362_recursiveGen = _out1009;
                      _2363___v46 = _out1010;
                      _2364___v47 = _out1011;
                      _2365_recIdents = _out1012;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2362_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2365_recIdents;
                    }
                  } else if (_source114.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2366_recursiveGen;
                      bool _2367_recOwned;
                      bool _2368_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2369_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1013;
                      bool _out1014;
                      bool _out1015;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1016;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1013, out _out1014, out _out1015, out _out1016);
                      _2366_recursiveGen = _out1013;
                      _2367_recOwned = _out1014;
                      _2368_recErased = _out1015;
                      _2369_recIdents = _out1016;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2366_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2367_recOwned;
                      isErased = _2368_recErased;
                      readIdents = _2369_recIdents;
                    }
                  } else if (_source114.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2370_recursiveGen;
                      bool _2371_recOwned;
                      bool _2372_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2373_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1017;
                      bool _out1018;
                      bool _out1019;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1020;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1017, out _out1018, out _out1019, out _out1020);
                      _2370_recursiveGen = _out1017;
                      _2371_recOwned = _out1018;
                      _2372_recErased = _out1019;
                      _2373_recIdents = _out1020;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2370_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2371_recOwned;
                      isErased = _2372_recErased;
                      readIdents = _2373_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2374_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1021;
                      _out1021 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _2374_rhsType = _out1021;
                      Dafny.ISequence<Dafny.Rune> _2375_recursiveGen;
                      bool _2376___v56;
                      bool _2377___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2378_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1022;
                      bool _out1023;
                      bool _out1024;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1025;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, true, out _out1022, out _out1023, out _out1024, out _out1025);
                      _2375_recursiveGen = _out1022;
                      _2376___v56 = _out1023;
                      _2377___v57 = _out1024;
                      _2378_recIdents = _out1025;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2375_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2378_recIdents;
                    }
                  }
                } else if (_source112.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2379___mcc_h897 = _source112.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2380_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1026;
                    _out1026 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                    _2380_rhsType = _out1026;
                    Dafny.ISequence<Dafny.Rune> _2381_recursiveGen;
                    bool _2382___v51;
                    bool _2383___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2384_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1027;
                    bool _out1028;
                    bool _out1029;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1030;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, true, out _out1027, out _out1028, out _out1029, out _out1030);
                    _2381_recursiveGen = _out1027;
                    _2382___v51 = _out1028;
                    _2383___v52 = _out1029;
                    _2384_recIdents = _out1030;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2380_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2381_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2384_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2385___mcc_h899 = _source112.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2386_recursiveGen;
                    bool _2387_recOwned;
                    bool _2388_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2389_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1031;
                    bool _out1032;
                    bool _out1033;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1034;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1031, out _out1032, out _out1033, out _out1034);
                    _2386_recursiveGen = _out1031;
                    _2387_recOwned = _out1032;
                    _2388_recErased = _out1033;
                    _2389_recIdents = _out1034;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2386_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2387_recOwned;
                    isErased = _2388_recErased;
                    readIdents = _2389_recIdents;
                  }
                }
              } else if (_source111.is_Real) {
                DAST._IType _source115 = _1384___mcc_h306;
                if (_source115.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2390___mcc_h901 = _source115.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2391___mcc_h902 = _source115.dtor_typeArgs;
                  DAST._IResolvedType _2392___mcc_h903 = _source115.dtor_resolved;
                  DAST._IResolvedType _source116 = _2392___mcc_h903;
                  if (_source116.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2393___mcc_h907 = _source116.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2394_recursiveGen;
                      bool _2395_recOwned;
                      bool _2396_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2397_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1035;
                      bool _out1036;
                      bool _out1037;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1038;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1035, out _out1036, out _out1037, out _out1038);
                      _2394_recursiveGen = _out1035;
                      _2395_recOwned = _out1036;
                      _2396_recErased = _out1037;
                      _2397_recIdents = _out1038;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2394_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2395_recOwned;
                      isErased = _2396_recErased;
                      readIdents = _2397_recIdents;
                    }
                  } else if (_source116.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2398___mcc_h909 = _source116.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2399_recursiveGen;
                      bool _2400_recOwned;
                      bool _2401_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2402_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1039;
                      bool _out1040;
                      bool _out1041;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1042;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1039, out _out1040, out _out1041, out _out1042);
                      _2399_recursiveGen = _out1039;
                      _2400_recOwned = _out1040;
                      _2401_recErased = _out1041;
                      _2402_recIdents = _out1042;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2399_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2400_recOwned;
                      isErased = _2401_recErased;
                      readIdents = _2402_recIdents;
                    }
                  } else {
                    DAST._IType _2403___mcc_h911 = _source116.dtor_Newtype_a0;
                    DAST._IType _2404_b = _2403___mcc_h911;
                    {
                      if (object.Equals(_1377_fromTpe, _2404_b)) {
                        Dafny.ISequence<Dafny.Rune> _2405_recursiveGen;
                        bool _2406_recOwned;
                        bool _2407_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2408_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1043;
                        bool _out1044;
                        bool _out1045;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1046;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1043, out _out1044, out _out1045, out _out1046);
                        _2405_recursiveGen = _out1043;
                        _2406_recOwned = _out1044;
                        _2407_recErased = _out1045;
                        _2408_recIdents = _out1046;
                        Dafny.ISequence<Dafny.Rune> _2409_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1047;
                        _out1047 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                        _2409_rhsType = _out1047;
                        Dafny.ISequence<Dafny.Rune> _2410_uneraseFn;
                        _2410_uneraseFn = ((_2406_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2409_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2410_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2405_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2406_recOwned;
                        isErased = false;
                        readIdents = _2408_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1048;
                        bool _out1049;
                        bool _out1050;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1051;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2404_b), _2404_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out1048, out _out1049, out _out1050, out _out1051);
                        s = _out1048;
                        isOwned = _out1049;
                        isErased = _out1050;
                        readIdents = _out1051;
                      }
                    }
                  }
                } else if (_source115.is_Nullable) {
                  DAST._IType _2411___mcc_h913 = _source115.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2412_recursiveGen;
                    bool _2413_recOwned;
                    bool _2414_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2415_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1052;
                    bool _out1053;
                    bool _out1054;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1052, out _out1053, out _out1054, out _out1055);
                    _2412_recursiveGen = _out1052;
                    _2413_recOwned = _out1053;
                    _2414_recErased = _out1054;
                    _2415_recIdents = _out1055;
                    if (!(_2413_recOwned)) {
                      _2412_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2412_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2414_recErased;
                    readIdents = _2415_recIdents;
                  }
                } else if (_source115.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2416___mcc_h915 = _source115.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2417_recursiveGen;
                    bool _2418_recOwned;
                    bool _2419_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2420_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1056;
                    bool _out1057;
                    bool _out1058;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1059;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1056, out _out1057, out _out1058, out _out1059);
                    _2417_recursiveGen = _out1056;
                    _2418_recOwned = _out1057;
                    _2419_recErased = _out1058;
                    _2420_recIdents = _out1059;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2417_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2418_recOwned;
                    isErased = _2419_recErased;
                    readIdents = _2420_recIdents;
                  }
                } else if (_source115.is_Array) {
                  DAST._IType _2421___mcc_h917 = _source115.dtor_element;
                  BigInteger _2422___mcc_h918 = _source115.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2423_recursiveGen;
                    bool _2424_recOwned;
                    bool _2425_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2426_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1060;
                    bool _out1061;
                    bool _out1062;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1063;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1060, out _out1061, out _out1062, out _out1063);
                    _2423_recursiveGen = _out1060;
                    _2424_recOwned = _out1061;
                    _2425_recErased = _out1062;
                    _2426_recIdents = _out1063;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2423_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2424_recOwned;
                    isErased = _2425_recErased;
                    readIdents = _2426_recIdents;
                  }
                } else if (_source115.is_Seq) {
                  DAST._IType _2427___mcc_h921 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2428_recursiveGen;
                    bool _2429_recOwned;
                    bool _2430_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2431_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1064;
                    bool _out1065;
                    bool _out1066;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1067;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1064, out _out1065, out _out1066, out _out1067);
                    _2428_recursiveGen = _out1064;
                    _2429_recOwned = _out1065;
                    _2430_recErased = _out1066;
                    _2431_recIdents = _out1067;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2428_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2429_recOwned;
                    isErased = _2430_recErased;
                    readIdents = _2431_recIdents;
                  }
                } else if (_source115.is_Set) {
                  DAST._IType _2432___mcc_h923 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2433_recursiveGen;
                    bool _2434_recOwned;
                    bool _2435_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2436_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1068;
                    bool _out1069;
                    bool _out1070;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                    _2433_recursiveGen = _out1068;
                    _2434_recOwned = _out1069;
                    _2435_recErased = _out1070;
                    _2436_recIdents = _out1071;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2433_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2434_recOwned;
                    isErased = _2435_recErased;
                    readIdents = _2436_recIdents;
                  }
                } else if (_source115.is_Multiset) {
                  DAST._IType _2437___mcc_h925 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2438_recursiveGen;
                    bool _2439_recOwned;
                    bool _2440_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2441_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1072;
                    bool _out1073;
                    bool _out1074;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                    _2438_recursiveGen = _out1072;
                    _2439_recOwned = _out1073;
                    _2440_recErased = _out1074;
                    _2441_recIdents = _out1075;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2438_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2439_recOwned;
                    isErased = _2440_recErased;
                    readIdents = _2441_recIdents;
                  }
                } else if (_source115.is_Map) {
                  DAST._IType _2442___mcc_h927 = _source115.dtor_key;
                  DAST._IType _2443___mcc_h928 = _source115.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2444_recursiveGen;
                    bool _2445_recOwned;
                    bool _2446_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2447_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1076;
                    bool _out1077;
                    bool _out1078;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                    _2444_recursiveGen = _out1076;
                    _2445_recOwned = _out1077;
                    _2446_recErased = _out1078;
                    _2447_recIdents = _out1079;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2444_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2445_recOwned;
                    isErased = _2446_recErased;
                    readIdents = _2447_recIdents;
                  }
                } else if (_source115.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2448___mcc_h931 = _source115.dtor_args;
                  DAST._IType _2449___mcc_h932 = _source115.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2450_recursiveGen;
                    bool _2451_recOwned;
                    bool _2452_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2453_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1080;
                    bool _out1081;
                    bool _out1082;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1080, out _out1081, out _out1082, out _out1083);
                    _2450_recursiveGen = _out1080;
                    _2451_recOwned = _out1081;
                    _2452_recErased = _out1082;
                    _2453_recIdents = _out1083;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2450_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2451_recOwned;
                    isErased = _2452_recErased;
                    readIdents = _2453_recIdents;
                  }
                } else if (_source115.is_Primitive) {
                  DAST._IPrimitive _2454___mcc_h935 = _source115.dtor_Primitive_a0;
                  DAST._IPrimitive _source117 = _2454___mcc_h935;
                  if (_source117.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2455_recursiveGen;
                      bool _2456___v48;
                      bool _2457___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2458_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1084;
                      bool _out1085;
                      bool _out1086;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, false, out _out1084, out _out1085, out _out1086, out _out1087);
                      _2455_recursiveGen = _out1084;
                      _2456___v48 = _out1085;
                      _2457___v49 = _out1086;
                      _2458_recIdents = _out1087;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2455_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2458_recIdents;
                    }
                  } else if (_source117.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2459_recursiveGen;
                      bool _2460_recOwned;
                      bool _2461_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2462_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1088;
                      bool _out1089;
                      bool _out1090;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1091;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1088, out _out1089, out _out1090, out _out1091);
                      _2459_recursiveGen = _out1088;
                      _2460_recOwned = _out1089;
                      _2461_recErased = _out1090;
                      _2462_recIdents = _out1091;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2459_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2460_recOwned;
                      isErased = _2461_recErased;
                      readIdents = _2462_recIdents;
                    }
                  } else if (_source117.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2463_recursiveGen;
                      bool _2464_recOwned;
                      bool _2465_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2466_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1092;
                      bool _out1093;
                      bool _out1094;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1092, out _out1093, out _out1094, out _out1095);
                      _2463_recursiveGen = _out1092;
                      _2464_recOwned = _out1093;
                      _2465_recErased = _out1094;
                      _2466_recIdents = _out1095;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2463_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2464_recOwned;
                      isErased = _2465_recErased;
                      readIdents = _2466_recIdents;
                    }
                  } else if (_source117.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2467_recursiveGen;
                      bool _2468_recOwned;
                      bool _2469_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2470_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1096;
                      bool _out1097;
                      bool _out1098;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1099;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1096, out _out1097, out _out1098, out _out1099);
                      _2467_recursiveGen = _out1096;
                      _2468_recOwned = _out1097;
                      _2469_recErased = _out1098;
                      _2470_recIdents = _out1099;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2467_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2468_recOwned;
                      isErased = _2469_recErased;
                      readIdents = _2470_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2471_recursiveGen;
                      bool _2472_recOwned;
                      bool _2473_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2474_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1100;
                      bool _out1101;
                      bool _out1102;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1103;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1100, out _out1101, out _out1102, out _out1103);
                      _2471_recursiveGen = _out1100;
                      _2472_recOwned = _out1101;
                      _2473_recErased = _out1102;
                      _2474_recIdents = _out1103;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2471_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2472_recOwned;
                      isErased = _2473_recErased;
                      readIdents = _2474_recIdents;
                    }
                  }
                } else if (_source115.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2475___mcc_h937 = _source115.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2476_recursiveGen;
                    bool _2477_recOwned;
                    bool _2478_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2479_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1104;
                    bool _out1105;
                    bool _out1106;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1107;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1104, out _out1105, out _out1106, out _out1107);
                    _2476_recursiveGen = _out1104;
                    _2477_recOwned = _out1105;
                    _2478_recErased = _out1106;
                    _2479_recIdents = _out1107;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2476_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2477_recOwned;
                    isErased = _2478_recErased;
                    readIdents = _2479_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2480___mcc_h939 = _source115.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2481_recursiveGen;
                    bool _2482_recOwned;
                    bool _2483_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2484_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1108;
                    bool _out1109;
                    bool _out1110;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1111;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1108, out _out1109, out _out1110, out _out1111);
                    _2481_recursiveGen = _out1108;
                    _2482_recOwned = _out1109;
                    _2483_recErased = _out1110;
                    _2484_recIdents = _out1111;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2481_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2482_recOwned;
                    isErased = _2483_recErased;
                    readIdents = _2484_recIdents;
                  }
                }
              } else if (_source111.is_String) {
                DAST._IType _source118 = _1384___mcc_h306;
                if (_source118.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2485___mcc_h941 = _source118.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2486___mcc_h942 = _source118.dtor_typeArgs;
                  DAST._IResolvedType _2487___mcc_h943 = _source118.dtor_resolved;
                  DAST._IResolvedType _source119 = _2487___mcc_h943;
                  if (_source119.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2488___mcc_h947 = _source119.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2489_recursiveGen;
                      bool _2490_recOwned;
                      bool _2491_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2492_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1112;
                      bool _out1113;
                      bool _out1114;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1115;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1112, out _out1113, out _out1114, out _out1115);
                      _2489_recursiveGen = _out1112;
                      _2490_recOwned = _out1113;
                      _2491_recErased = _out1114;
                      _2492_recIdents = _out1115;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2489_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2490_recOwned;
                      isErased = _2491_recErased;
                      readIdents = _2492_recIdents;
                    }
                  } else if (_source119.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2493___mcc_h949 = _source119.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2494_recursiveGen;
                      bool _2495_recOwned;
                      bool _2496_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2497_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1116;
                      bool _out1117;
                      bool _out1118;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1119;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1116, out _out1117, out _out1118, out _out1119);
                      _2494_recursiveGen = _out1116;
                      _2495_recOwned = _out1117;
                      _2496_recErased = _out1118;
                      _2497_recIdents = _out1119;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2494_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2495_recOwned;
                      isErased = _2496_recErased;
                      readIdents = _2497_recIdents;
                    }
                  } else {
                    DAST._IType _2498___mcc_h951 = _source119.dtor_Newtype_a0;
                    DAST._IType _2499_b = _2498___mcc_h951;
                    {
                      if (object.Equals(_1377_fromTpe, _2499_b)) {
                        Dafny.ISequence<Dafny.Rune> _2500_recursiveGen;
                        bool _2501_recOwned;
                        bool _2502_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2503_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1120;
                        bool _out1121;
                        bool _out1122;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1123;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1120, out _out1121, out _out1122, out _out1123);
                        _2500_recursiveGen = _out1120;
                        _2501_recOwned = _out1121;
                        _2502_recErased = _out1122;
                        _2503_recIdents = _out1123;
                        Dafny.ISequence<Dafny.Rune> _2504_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1124;
                        _out1124 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                        _2504_rhsType = _out1124;
                        Dafny.ISequence<Dafny.Rune> _2505_uneraseFn;
                        _2505_uneraseFn = ((_2501_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2504_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2505_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2500_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2501_recOwned;
                        isErased = false;
                        readIdents = _2503_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1125;
                        bool _out1126;
                        bool _out1127;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2499_b), _2499_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out1125, out _out1126, out _out1127, out _out1128);
                        s = _out1125;
                        isOwned = _out1126;
                        isErased = _out1127;
                        readIdents = _out1128;
                      }
                    }
                  }
                } else if (_source118.is_Nullable) {
                  DAST._IType _2506___mcc_h953 = _source118.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2507_recursiveGen;
                    bool _2508_recOwned;
                    bool _2509_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2510_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1129;
                    bool _out1130;
                    bool _out1131;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1132;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1129, out _out1130, out _out1131, out _out1132);
                    _2507_recursiveGen = _out1129;
                    _2508_recOwned = _out1130;
                    _2509_recErased = _out1131;
                    _2510_recIdents = _out1132;
                    if (!(_2508_recOwned)) {
                      _2507_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2507_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2507_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2509_recErased;
                    readIdents = _2510_recIdents;
                  }
                } else if (_source118.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2511___mcc_h955 = _source118.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2512_recursiveGen;
                    bool _2513_recOwned;
                    bool _2514_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2515_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1133;
                    bool _out1134;
                    bool _out1135;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1133, out _out1134, out _out1135, out _out1136);
                    _2512_recursiveGen = _out1133;
                    _2513_recOwned = _out1134;
                    _2514_recErased = _out1135;
                    _2515_recIdents = _out1136;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2512_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2513_recOwned;
                    isErased = _2514_recErased;
                    readIdents = _2515_recIdents;
                  }
                } else if (_source118.is_Array) {
                  DAST._IType _2516___mcc_h957 = _source118.dtor_element;
                  BigInteger _2517___mcc_h958 = _source118.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2518_recursiveGen;
                    bool _2519_recOwned;
                    bool _2520_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2521_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1137;
                    bool _out1138;
                    bool _out1139;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1140;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1137, out _out1138, out _out1139, out _out1140);
                    _2518_recursiveGen = _out1137;
                    _2519_recOwned = _out1138;
                    _2520_recErased = _out1139;
                    _2521_recIdents = _out1140;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2518_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2519_recOwned;
                    isErased = _2520_recErased;
                    readIdents = _2521_recIdents;
                  }
                } else if (_source118.is_Seq) {
                  DAST._IType _2522___mcc_h961 = _source118.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2523_recursiveGen;
                    bool _2524_recOwned;
                    bool _2525_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2526_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1141;
                    bool _out1142;
                    bool _out1143;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1144;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1141, out _out1142, out _out1143, out _out1144);
                    _2523_recursiveGen = _out1141;
                    _2524_recOwned = _out1142;
                    _2525_recErased = _out1143;
                    _2526_recIdents = _out1144;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2523_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2524_recOwned;
                    isErased = _2525_recErased;
                    readIdents = _2526_recIdents;
                  }
                } else if (_source118.is_Set) {
                  DAST._IType _2527___mcc_h963 = _source118.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2528_recursiveGen;
                    bool _2529_recOwned;
                    bool _2530_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2531_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1145;
                    bool _out1146;
                    bool _out1147;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                    _2528_recursiveGen = _out1145;
                    _2529_recOwned = _out1146;
                    _2530_recErased = _out1147;
                    _2531_recIdents = _out1148;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2528_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2529_recOwned;
                    isErased = _2530_recErased;
                    readIdents = _2531_recIdents;
                  }
                } else if (_source118.is_Multiset) {
                  DAST._IType _2532___mcc_h965 = _source118.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2533_recursiveGen;
                    bool _2534_recOwned;
                    bool _2535_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2536_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1149;
                    bool _out1150;
                    bool _out1151;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1152;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1149, out _out1150, out _out1151, out _out1152);
                    _2533_recursiveGen = _out1149;
                    _2534_recOwned = _out1150;
                    _2535_recErased = _out1151;
                    _2536_recIdents = _out1152;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2533_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2534_recOwned;
                    isErased = _2535_recErased;
                    readIdents = _2536_recIdents;
                  }
                } else if (_source118.is_Map) {
                  DAST._IType _2537___mcc_h967 = _source118.dtor_key;
                  DAST._IType _2538___mcc_h968 = _source118.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2539_recursiveGen;
                    bool _2540_recOwned;
                    bool _2541_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2542_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1153;
                    bool _out1154;
                    bool _out1155;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1153, out _out1154, out _out1155, out _out1156);
                    _2539_recursiveGen = _out1153;
                    _2540_recOwned = _out1154;
                    _2541_recErased = _out1155;
                    _2542_recIdents = _out1156;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2539_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2540_recOwned;
                    isErased = _2541_recErased;
                    readIdents = _2542_recIdents;
                  }
                } else if (_source118.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2543___mcc_h971 = _source118.dtor_args;
                  DAST._IType _2544___mcc_h972 = _source118.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2545_recursiveGen;
                    bool _2546_recOwned;
                    bool _2547_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2548_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1157;
                    bool _out1158;
                    bool _out1159;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1160;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1157, out _out1158, out _out1159, out _out1160);
                    _2545_recursiveGen = _out1157;
                    _2546_recOwned = _out1158;
                    _2547_recErased = _out1159;
                    _2548_recIdents = _out1160;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2545_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2546_recOwned;
                    isErased = _2547_recErased;
                    readIdents = _2548_recIdents;
                  }
                } else if (_source118.is_Primitive) {
                  DAST._IPrimitive _2549___mcc_h975 = _source118.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2550_recursiveGen;
                    bool _2551_recOwned;
                    bool _2552_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2553_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1161;
                    bool _out1162;
                    bool _out1163;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1164;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1161, out _out1162, out _out1163, out _out1164);
                    _2550_recursiveGen = _out1161;
                    _2551_recOwned = _out1162;
                    _2552_recErased = _out1163;
                    _2553_recIdents = _out1164;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2550_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2551_recOwned;
                    isErased = _2552_recErased;
                    readIdents = _2553_recIdents;
                  }
                } else if (_source118.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2554___mcc_h977 = _source118.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2555_recursiveGen;
                    bool _2556_recOwned;
                    bool _2557_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2558_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1165;
                    bool _out1166;
                    bool _out1167;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1168;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1165, out _out1166, out _out1167, out _out1168);
                    _2555_recursiveGen = _out1165;
                    _2556_recOwned = _out1166;
                    _2557_recErased = _out1167;
                    _2558_recIdents = _out1168;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2555_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2556_recOwned;
                    isErased = _2557_recErased;
                    readIdents = _2558_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2559___mcc_h979 = _source118.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2560_recursiveGen;
                    bool _2561_recOwned;
                    bool _2562_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2563_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1169;
                    bool _out1170;
                    bool _out1171;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1172;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1169, out _out1170, out _out1171, out _out1172);
                    _2560_recursiveGen = _out1169;
                    _2561_recOwned = _out1170;
                    _2562_recErased = _out1171;
                    _2563_recIdents = _out1172;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2560_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2561_recOwned;
                    isErased = _2562_recErased;
                    readIdents = _2563_recIdents;
                  }
                }
              } else if (_source111.is_Bool) {
                DAST._IType _source120 = _1384___mcc_h306;
                if (_source120.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2564___mcc_h981 = _source120.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2565___mcc_h982 = _source120.dtor_typeArgs;
                  DAST._IResolvedType _2566___mcc_h983 = _source120.dtor_resolved;
                  DAST._IResolvedType _source121 = _2566___mcc_h983;
                  if (_source121.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2567___mcc_h987 = _source121.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2568_recursiveGen;
                      bool _2569_recOwned;
                      bool _2570_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2571_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1173;
                      bool _out1174;
                      bool _out1175;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1173, out _out1174, out _out1175, out _out1176);
                      _2568_recursiveGen = _out1173;
                      _2569_recOwned = _out1174;
                      _2570_recErased = _out1175;
                      _2571_recIdents = _out1176;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2568_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2569_recOwned;
                      isErased = _2570_recErased;
                      readIdents = _2571_recIdents;
                    }
                  } else if (_source121.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2572___mcc_h989 = _source121.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2573_recursiveGen;
                      bool _2574_recOwned;
                      bool _2575_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2576_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1177;
                      bool _out1178;
                      bool _out1179;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1180;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1177, out _out1178, out _out1179, out _out1180);
                      _2573_recursiveGen = _out1177;
                      _2574_recOwned = _out1178;
                      _2575_recErased = _out1179;
                      _2576_recIdents = _out1180;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2573_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2574_recOwned;
                      isErased = _2575_recErased;
                      readIdents = _2576_recIdents;
                    }
                  } else {
                    DAST._IType _2577___mcc_h991 = _source121.dtor_Newtype_a0;
                    DAST._IType _2578_b = _2577___mcc_h991;
                    {
                      if (object.Equals(_1377_fromTpe, _2578_b)) {
                        Dafny.ISequence<Dafny.Rune> _2579_recursiveGen;
                        bool _2580_recOwned;
                        bool _2581_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2582_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1181;
                        bool _out1182;
                        bool _out1183;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1184;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1181, out _out1182, out _out1183, out _out1184);
                        _2579_recursiveGen = _out1181;
                        _2580_recOwned = _out1182;
                        _2581_recErased = _out1183;
                        _2582_recIdents = _out1184;
                        Dafny.ISequence<Dafny.Rune> _2583_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1185;
                        _out1185 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                        _2583_rhsType = _out1185;
                        Dafny.ISequence<Dafny.Rune> _2584_uneraseFn;
                        _2584_uneraseFn = ((_2580_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2583_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2584_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2579_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2580_recOwned;
                        isErased = false;
                        readIdents = _2582_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1186;
                        bool _out1187;
                        bool _out1188;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1189;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2578_b), _2578_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out1186, out _out1187, out _out1188, out _out1189);
                        s = _out1186;
                        isOwned = _out1187;
                        isErased = _out1188;
                        readIdents = _out1189;
                      }
                    }
                  }
                } else if (_source120.is_Nullable) {
                  DAST._IType _2585___mcc_h993 = _source120.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2586_recursiveGen;
                    bool _2587_recOwned;
                    bool _2588_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2589_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1190;
                    bool _out1191;
                    bool _out1192;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1190, out _out1191, out _out1192, out _out1193);
                    _2586_recursiveGen = _out1190;
                    _2587_recOwned = _out1191;
                    _2588_recErased = _out1192;
                    _2589_recIdents = _out1193;
                    if (!(_2587_recOwned)) {
                      _2586_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2586_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2586_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2588_recErased;
                    readIdents = _2589_recIdents;
                  }
                } else if (_source120.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2590___mcc_h995 = _source120.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2591_recursiveGen;
                    bool _2592_recOwned;
                    bool _2593_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2594_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1194;
                    bool _out1195;
                    bool _out1196;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1197;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1194, out _out1195, out _out1196, out _out1197);
                    _2591_recursiveGen = _out1194;
                    _2592_recOwned = _out1195;
                    _2593_recErased = _out1196;
                    _2594_recIdents = _out1197;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2591_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2592_recOwned;
                    isErased = _2593_recErased;
                    readIdents = _2594_recIdents;
                  }
                } else if (_source120.is_Array) {
                  DAST._IType _2595___mcc_h997 = _source120.dtor_element;
                  BigInteger _2596___mcc_h998 = _source120.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2597_recursiveGen;
                    bool _2598_recOwned;
                    bool _2599_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2600_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1198;
                    bool _out1199;
                    bool _out1200;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1201;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1198, out _out1199, out _out1200, out _out1201);
                    _2597_recursiveGen = _out1198;
                    _2598_recOwned = _out1199;
                    _2599_recErased = _out1200;
                    _2600_recIdents = _out1201;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2597_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2598_recOwned;
                    isErased = _2599_recErased;
                    readIdents = _2600_recIdents;
                  }
                } else if (_source120.is_Seq) {
                  DAST._IType _2601___mcc_h1001 = _source120.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2602_recursiveGen;
                    bool _2603_recOwned;
                    bool _2604_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2605_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1202;
                    bool _out1203;
                    bool _out1204;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1202, out _out1203, out _out1204, out _out1205);
                    _2602_recursiveGen = _out1202;
                    _2603_recOwned = _out1203;
                    _2604_recErased = _out1204;
                    _2605_recIdents = _out1205;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2602_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2603_recOwned;
                    isErased = _2604_recErased;
                    readIdents = _2605_recIdents;
                  }
                } else if (_source120.is_Set) {
                  DAST._IType _2606___mcc_h1003 = _source120.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2607_recursiveGen;
                    bool _2608_recOwned;
                    bool _2609_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2610_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1206;
                    bool _out1207;
                    bool _out1208;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                    _2607_recursiveGen = _out1206;
                    _2608_recOwned = _out1207;
                    _2609_recErased = _out1208;
                    _2610_recIdents = _out1209;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2607_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2608_recOwned;
                    isErased = _2609_recErased;
                    readIdents = _2610_recIdents;
                  }
                } else if (_source120.is_Multiset) {
                  DAST._IType _2611___mcc_h1005 = _source120.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2612_recursiveGen;
                    bool _2613_recOwned;
                    bool _2614_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2615_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1210;
                    bool _out1211;
                    bool _out1212;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1213;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1210, out _out1211, out _out1212, out _out1213);
                    _2612_recursiveGen = _out1210;
                    _2613_recOwned = _out1211;
                    _2614_recErased = _out1212;
                    _2615_recIdents = _out1213;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2612_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2613_recOwned;
                    isErased = _2614_recErased;
                    readIdents = _2615_recIdents;
                  }
                } else if (_source120.is_Map) {
                  DAST._IType _2616___mcc_h1007 = _source120.dtor_key;
                  DAST._IType _2617___mcc_h1008 = _source120.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2618_recursiveGen;
                    bool _2619_recOwned;
                    bool _2620_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2621_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1214;
                    bool _out1215;
                    bool _out1216;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1214, out _out1215, out _out1216, out _out1217);
                    _2618_recursiveGen = _out1214;
                    _2619_recOwned = _out1215;
                    _2620_recErased = _out1216;
                    _2621_recIdents = _out1217;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2618_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2619_recOwned;
                    isErased = _2620_recErased;
                    readIdents = _2621_recIdents;
                  }
                } else if (_source120.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2622___mcc_h1011 = _source120.dtor_args;
                  DAST._IType _2623___mcc_h1012 = _source120.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2624_recursiveGen;
                    bool _2625_recOwned;
                    bool _2626_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2627_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1218;
                    bool _out1219;
                    bool _out1220;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1221;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1218, out _out1219, out _out1220, out _out1221);
                    _2624_recursiveGen = _out1218;
                    _2625_recOwned = _out1219;
                    _2626_recErased = _out1220;
                    _2627_recIdents = _out1221;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2624_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2625_recOwned;
                    isErased = _2626_recErased;
                    readIdents = _2627_recIdents;
                  }
                } else if (_source120.is_Primitive) {
                  DAST._IPrimitive _2628___mcc_h1015 = _source120.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2629_recursiveGen;
                    bool _2630_recOwned;
                    bool _2631_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2632_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1222;
                    bool _out1223;
                    bool _out1224;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1225;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1222, out _out1223, out _out1224, out _out1225);
                    _2629_recursiveGen = _out1222;
                    _2630_recOwned = _out1223;
                    _2631_recErased = _out1224;
                    _2632_recIdents = _out1225;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2629_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2630_recOwned;
                    isErased = _2631_recErased;
                    readIdents = _2632_recIdents;
                  }
                } else if (_source120.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2633___mcc_h1017 = _source120.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2634_recursiveGen;
                    bool _2635_recOwned;
                    bool _2636_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2637_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1226;
                    bool _out1227;
                    bool _out1228;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1226, out _out1227, out _out1228, out _out1229);
                    _2634_recursiveGen = _out1226;
                    _2635_recOwned = _out1227;
                    _2636_recErased = _out1228;
                    _2637_recIdents = _out1229;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2634_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2635_recOwned;
                    isErased = _2636_recErased;
                    readIdents = _2637_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2638___mcc_h1019 = _source120.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2639_recursiveGen;
                    bool _2640_recOwned;
                    bool _2641_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2642_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1230;
                    bool _out1231;
                    bool _out1232;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1233;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1230, out _out1231, out _out1232, out _out1233);
                    _2639_recursiveGen = _out1230;
                    _2640_recOwned = _out1231;
                    _2641_recErased = _out1232;
                    _2642_recIdents = _out1233;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2639_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2640_recOwned;
                    isErased = _2641_recErased;
                    readIdents = _2642_recIdents;
                  }
                }
              } else {
                DAST._IType _source122 = _1384___mcc_h306;
                if (_source122.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2643___mcc_h1021 = _source122.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2644___mcc_h1022 = _source122.dtor_typeArgs;
                  DAST._IResolvedType _2645___mcc_h1023 = _source122.dtor_resolved;
                  DAST._IResolvedType _source123 = _2645___mcc_h1023;
                  if (_source123.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2646___mcc_h1027 = _source123.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2647_recursiveGen;
                      bool _2648_recOwned;
                      bool _2649_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2650_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1234;
                      bool _out1235;
                      bool _out1236;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1234, out _out1235, out _out1236, out _out1237);
                      _2647_recursiveGen = _out1234;
                      _2648_recOwned = _out1235;
                      _2649_recErased = _out1236;
                      _2650_recIdents = _out1237;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2647_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2648_recOwned;
                      isErased = _2649_recErased;
                      readIdents = _2650_recIdents;
                    }
                  } else if (_source123.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2651___mcc_h1029 = _source123.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2652_recursiveGen;
                      bool _2653_recOwned;
                      bool _2654_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2655_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1238;
                      bool _out1239;
                      bool _out1240;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1241;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1238, out _out1239, out _out1240, out _out1241);
                      _2652_recursiveGen = _out1238;
                      _2653_recOwned = _out1239;
                      _2654_recErased = _out1240;
                      _2655_recIdents = _out1241;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2652_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2653_recOwned;
                      isErased = _2654_recErased;
                      readIdents = _2655_recIdents;
                    }
                  } else {
                    DAST._IType _2656___mcc_h1031 = _source123.dtor_Newtype_a0;
                    DAST._IType _2657_b = _2656___mcc_h1031;
                    {
                      if (object.Equals(_1377_fromTpe, _2657_b)) {
                        Dafny.ISequence<Dafny.Rune> _2658_recursiveGen;
                        bool _2659_recOwned;
                        bool _2660_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2661_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1242;
                        bool _out1243;
                        bool _out1244;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1245;
                        DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1242, out _out1243, out _out1244, out _out1245);
                        _2658_recursiveGen = _out1242;
                        _2659_recOwned = _out1243;
                        _2660_recErased = _out1244;
                        _2661_recIdents = _out1245;
                        Dafny.ISequence<Dafny.Rune> _2662_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1246;
                        _out1246 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                        _2662_rhsType = _out1246;
                        Dafny.ISequence<Dafny.Rune> _2663_uneraseFn;
                        _2663_uneraseFn = ((_2659_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2662_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2663_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2659_recOwned;
                        isErased = false;
                        readIdents = _2661_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1247;
                        bool _out1248;
                        bool _out1249;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1250;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2657_b), _2657_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out1247, out _out1248, out _out1249, out _out1250);
                        s = _out1247;
                        isOwned = _out1248;
                        isErased = _out1249;
                        readIdents = _out1250;
                      }
                    }
                  }
                } else if (_source122.is_Nullable) {
                  DAST._IType _2664___mcc_h1033 = _source122.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2665_recursiveGen;
                    bool _2666_recOwned;
                    bool _2667_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2668_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1251;
                    bool _out1252;
                    bool _out1253;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1254;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1251, out _out1252, out _out1253, out _out1254);
                    _2665_recursiveGen = _out1251;
                    _2666_recOwned = _out1252;
                    _2667_recErased = _out1253;
                    _2668_recIdents = _out1254;
                    if (!(_2666_recOwned)) {
                      _2665_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2665_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2665_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2667_recErased;
                    readIdents = _2668_recIdents;
                  }
                } else if (_source122.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2669___mcc_h1035 = _source122.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2670_recursiveGen;
                    bool _2671_recOwned;
                    bool _2672_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2673_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1255;
                    bool _out1256;
                    bool _out1257;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1258;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1255, out _out1256, out _out1257, out _out1258);
                    _2670_recursiveGen = _out1255;
                    _2671_recOwned = _out1256;
                    _2672_recErased = _out1257;
                    _2673_recIdents = _out1258;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2670_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2671_recOwned;
                    isErased = _2672_recErased;
                    readIdents = _2673_recIdents;
                  }
                } else if (_source122.is_Array) {
                  DAST._IType _2674___mcc_h1037 = _source122.dtor_element;
                  BigInteger _2675___mcc_h1038 = _source122.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2676_recursiveGen;
                    bool _2677_recOwned;
                    bool _2678_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2679_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1259;
                    bool _out1260;
                    bool _out1261;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1259, out _out1260, out _out1261, out _out1262);
                    _2676_recursiveGen = _out1259;
                    _2677_recOwned = _out1260;
                    _2678_recErased = _out1261;
                    _2679_recIdents = _out1262;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2676_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2677_recOwned;
                    isErased = _2678_recErased;
                    readIdents = _2679_recIdents;
                  }
                } else if (_source122.is_Seq) {
                  DAST._IType _2680___mcc_h1041 = _source122.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2681_recursiveGen;
                    bool _2682_recOwned;
                    bool _2683_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2684_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1263;
                    bool _out1264;
                    bool _out1265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1266;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1263, out _out1264, out _out1265, out _out1266);
                    _2681_recursiveGen = _out1263;
                    _2682_recOwned = _out1264;
                    _2683_recErased = _out1265;
                    _2684_recIdents = _out1266;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2681_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2682_recOwned;
                    isErased = _2683_recErased;
                    readIdents = _2684_recIdents;
                  }
                } else if (_source122.is_Set) {
                  DAST._IType _2685___mcc_h1043 = _source122.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2686_recursiveGen;
                    bool _2687_recOwned;
                    bool _2688_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2689_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1267;
                    bool _out1268;
                    bool _out1269;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1270;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1267, out _out1268, out _out1269, out _out1270);
                    _2686_recursiveGen = _out1267;
                    _2687_recOwned = _out1268;
                    _2688_recErased = _out1269;
                    _2689_recIdents = _out1270;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2687_recOwned;
                    isErased = _2688_recErased;
                    readIdents = _2689_recIdents;
                  }
                } else if (_source122.is_Multiset) {
                  DAST._IType _2690___mcc_h1045 = _source122.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2691_recursiveGen;
                    bool _2692_recOwned;
                    bool _2693_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2694_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1271;
                    bool _out1272;
                    bool _out1273;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1274;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1271, out _out1272, out _out1273, out _out1274);
                    _2691_recursiveGen = _out1271;
                    _2692_recOwned = _out1272;
                    _2693_recErased = _out1273;
                    _2694_recIdents = _out1274;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2692_recOwned;
                    isErased = _2693_recErased;
                    readIdents = _2694_recIdents;
                  }
                } else if (_source122.is_Map) {
                  DAST._IType _2695___mcc_h1047 = _source122.dtor_key;
                  DAST._IType _2696___mcc_h1048 = _source122.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2697_recursiveGen;
                    bool _2698_recOwned;
                    bool _2699_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2700_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1275;
                    bool _out1276;
                    bool _out1277;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1278;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1275, out _out1276, out _out1277, out _out1278);
                    _2697_recursiveGen = _out1275;
                    _2698_recOwned = _out1276;
                    _2699_recErased = _out1277;
                    _2700_recIdents = _out1278;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2697_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2698_recOwned;
                    isErased = _2699_recErased;
                    readIdents = _2700_recIdents;
                  }
                } else if (_source122.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2701___mcc_h1051 = _source122.dtor_args;
                  DAST._IType _2702___mcc_h1052 = _source122.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2703_recursiveGen;
                    bool _2704_recOwned;
                    bool _2705_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2706_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1279;
                    bool _out1280;
                    bool _out1281;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1282;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1279, out _out1280, out _out1281, out _out1282);
                    _2703_recursiveGen = _out1279;
                    _2704_recOwned = _out1280;
                    _2705_recErased = _out1281;
                    _2706_recIdents = _out1282;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2703_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2704_recOwned;
                    isErased = _2705_recErased;
                    readIdents = _2706_recIdents;
                  }
                } else if (_source122.is_Primitive) {
                  DAST._IPrimitive _2707___mcc_h1055 = _source122.dtor_Primitive_a0;
                  DAST._IPrimitive _source124 = _2707___mcc_h1055;
                  if (_source124.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2708_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1283;
                      _out1283 = DCOMP.COMP.GenType(_1377_fromTpe, true, false);
                      _2708_rhsType = _out1283;
                      Dafny.ISequence<Dafny.Rune> _2709_recursiveGen;
                      bool _2710___v58;
                      bool _2711___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2712_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1284;
                      bool _out1285;
                      bool _out1286;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, true, out _out1284, out _out1285, out _out1286, out _out1287);
                      _2709_recursiveGen = _out1284;
                      _2710___v58 = _out1285;
                      _2711___v59 = _out1286;
                      _2712_recIdents = _out1287;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2709_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2712_recIdents;
                    }
                  } else if (_source124.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2713_recursiveGen;
                      bool _2714_recOwned;
                      bool _2715_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2716_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1288;
                      bool _out1289;
                      bool _out1290;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1291;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1288, out _out1289, out _out1290, out _out1291);
                      _2713_recursiveGen = _out1288;
                      _2714_recOwned = _out1289;
                      _2715_recErased = _out1290;
                      _2716_recIdents = _out1291;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2713_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2714_recOwned;
                      isErased = _2715_recErased;
                      readIdents = _2716_recIdents;
                    }
                  } else if (_source124.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2717_recursiveGen;
                      bool _2718_recOwned;
                      bool _2719_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2720_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1292;
                      bool _out1293;
                      bool _out1294;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1295;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1292, out _out1293, out _out1294, out _out1295);
                      _2717_recursiveGen = _out1292;
                      _2718_recOwned = _out1293;
                      _2719_recErased = _out1294;
                      _2720_recIdents = _out1295;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2717_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2718_recOwned;
                      isErased = _2719_recErased;
                      readIdents = _2720_recIdents;
                    }
                  } else if (_source124.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2721_recursiveGen;
                      bool _2722_recOwned;
                      bool _2723_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2724_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1296;
                      bool _out1297;
                      bool _out1298;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1299;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1296, out _out1297, out _out1298, out _out1299);
                      _2721_recursiveGen = _out1296;
                      _2722_recOwned = _out1297;
                      _2723_recErased = _out1298;
                      _2724_recIdents = _out1299;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2721_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2722_recOwned;
                      isErased = _2723_recErased;
                      readIdents = _2724_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2725_recursiveGen;
                      bool _2726_recOwned;
                      bool _2727_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2728_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1300;
                      bool _out1301;
                      bool _out1302;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1303;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1300, out _out1301, out _out1302, out _out1303);
                      _2725_recursiveGen = _out1300;
                      _2726_recOwned = _out1301;
                      _2727_recErased = _out1302;
                      _2728_recIdents = _out1303;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2725_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2726_recOwned;
                      isErased = _2727_recErased;
                      readIdents = _2728_recIdents;
                    }
                  }
                } else if (_source122.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2729___mcc_h1057 = _source122.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2730_recursiveGen;
                    bool _2731_recOwned;
                    bool _2732_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2733_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1304;
                    bool _out1305;
                    bool _out1306;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1307;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1304, out _out1305, out _out1306, out _out1307);
                    _2730_recursiveGen = _out1304;
                    _2731_recOwned = _out1305;
                    _2732_recErased = _out1306;
                    _2733_recIdents = _out1307;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2730_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2731_recOwned;
                    isErased = _2732_recErased;
                    readIdents = _2733_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2734___mcc_h1059 = _source122.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2735_recursiveGen;
                    bool _2736_recOwned;
                    bool _2737_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2738_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1308;
                    bool _out1309;
                    bool _out1310;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1311;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1308, out _out1309, out _out1310, out _out1311);
                    _2735_recursiveGen = _out1308;
                    _2736_recOwned = _out1309;
                    _2737_recErased = _out1310;
                    _2738_recIdents = _out1311;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2735_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2736_recOwned;
                    isErased = _2737_recErased;
                    readIdents = _2738_recIdents;
                  }
                }
              }
            } else if (_source87.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2739___mcc_h1061 = _source87.dtor_Passthrough_a0;
              DAST._IType _source125 = _1384___mcc_h306;
              if (_source125.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2740___mcc_h1065 = _source125.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2741___mcc_h1066 = _source125.dtor_typeArgs;
                DAST._IResolvedType _2742___mcc_h1067 = _source125.dtor_resolved;
                DAST._IResolvedType _source126 = _2742___mcc_h1067;
                if (_source126.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2743___mcc_h1071 = _source126.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2744_recursiveGen;
                    bool _2745_recOwned;
                    bool _2746_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2747_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1312;
                    bool _out1313;
                    bool _out1314;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1315;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1312, out _out1313, out _out1314, out _out1315);
                    _2744_recursiveGen = _out1312;
                    _2745_recOwned = _out1313;
                    _2746_recErased = _out1314;
                    _2747_recIdents = _out1315;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2744_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2745_recOwned;
                    isErased = _2746_recErased;
                    readIdents = _2747_recIdents;
                  }
                } else if (_source126.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2748___mcc_h1073 = _source126.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2749_recursiveGen;
                    bool _2750_recOwned;
                    bool _2751_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2752_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1316;
                    bool _out1317;
                    bool _out1318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1319;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1316, out _out1317, out _out1318, out _out1319);
                    _2749_recursiveGen = _out1316;
                    _2750_recOwned = _out1317;
                    _2751_recErased = _out1318;
                    _2752_recIdents = _out1319;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2749_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2750_recOwned;
                    isErased = _2751_recErased;
                    readIdents = _2752_recIdents;
                  }
                } else {
                  DAST._IType _2753___mcc_h1075 = _source126.dtor_Newtype_a0;
                  DAST._IType _2754_b = _2753___mcc_h1075;
                  {
                    if (object.Equals(_1377_fromTpe, _2754_b)) {
                      Dafny.ISequence<Dafny.Rune> _2755_recursiveGen;
                      bool _2756_recOwned;
                      bool _2757_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2758_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1320;
                      bool _out1321;
                      bool _out1322;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1323;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1320, out _out1321, out _out1322, out _out1323);
                      _2755_recursiveGen = _out1320;
                      _2756_recOwned = _out1321;
                      _2757_recErased = _out1322;
                      _2758_recIdents = _out1323;
                      Dafny.ISequence<Dafny.Rune> _2759_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1324;
                      _out1324 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _2759_rhsType = _out1324;
                      Dafny.ISequence<Dafny.Rune> _2760_uneraseFn;
                      _2760_uneraseFn = ((_2756_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2759_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2760_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2755_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2756_recOwned;
                      isErased = false;
                      readIdents = _2758_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1325;
                      bool _out1326;
                      bool _out1327;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1328;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2754_b), _2754_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out1325, out _out1326, out _out1327, out _out1328);
                      s = _out1325;
                      isOwned = _out1326;
                      isErased = _out1327;
                      readIdents = _out1328;
                    }
                  }
                }
              } else if (_source125.is_Nullable) {
                DAST._IType _2761___mcc_h1077 = _source125.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2762_recursiveGen;
                  bool _2763_recOwned;
                  bool _2764_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2765_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1329;
                  bool _out1330;
                  bool _out1331;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1332;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1329, out _out1330, out _out1331, out _out1332);
                  _2762_recursiveGen = _out1329;
                  _2763_recOwned = _out1330;
                  _2764_recErased = _out1331;
                  _2765_recIdents = _out1332;
                  if (!(_2763_recOwned)) {
                    _2762_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2762_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2762_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2764_recErased;
                  readIdents = _2765_recIdents;
                }
              } else if (_source125.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2766___mcc_h1079 = _source125.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2767_recursiveGen;
                  bool _2768_recOwned;
                  bool _2769_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2770_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1333;
                  bool _out1334;
                  bool _out1335;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1336;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1333, out _out1334, out _out1335, out _out1336);
                  _2767_recursiveGen = _out1333;
                  _2768_recOwned = _out1334;
                  _2769_recErased = _out1335;
                  _2770_recIdents = _out1336;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2767_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2768_recOwned;
                  isErased = _2769_recErased;
                  readIdents = _2770_recIdents;
                }
              } else if (_source125.is_Array) {
                DAST._IType _2771___mcc_h1081 = _source125.dtor_element;
                BigInteger _2772___mcc_h1082 = _source125.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2773_recursiveGen;
                  bool _2774_recOwned;
                  bool _2775_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2776_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1337;
                  bool _out1338;
                  bool _out1339;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1340;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1337, out _out1338, out _out1339, out _out1340);
                  _2773_recursiveGen = _out1337;
                  _2774_recOwned = _out1338;
                  _2775_recErased = _out1339;
                  _2776_recIdents = _out1340;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2774_recOwned;
                  isErased = _2775_recErased;
                  readIdents = _2776_recIdents;
                }
              } else if (_source125.is_Seq) {
                DAST._IType _2777___mcc_h1085 = _source125.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2778_recursiveGen;
                  bool _2779_recOwned;
                  bool _2780_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2781_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1341;
                  bool _out1342;
                  bool _out1343;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1344;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1341, out _out1342, out _out1343, out _out1344);
                  _2778_recursiveGen = _out1341;
                  _2779_recOwned = _out1342;
                  _2780_recErased = _out1343;
                  _2781_recIdents = _out1344;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2778_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2779_recOwned;
                  isErased = _2780_recErased;
                  readIdents = _2781_recIdents;
                }
              } else if (_source125.is_Set) {
                DAST._IType _2782___mcc_h1087 = _source125.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2783_recursiveGen;
                  bool _2784_recOwned;
                  bool _2785_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2786_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1345;
                  bool _out1346;
                  bool _out1347;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1345, out _out1346, out _out1347, out _out1348);
                  _2783_recursiveGen = _out1345;
                  _2784_recOwned = _out1346;
                  _2785_recErased = _out1347;
                  _2786_recIdents = _out1348;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2783_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2784_recOwned;
                  isErased = _2785_recErased;
                  readIdents = _2786_recIdents;
                }
              } else if (_source125.is_Multiset) {
                DAST._IType _2787___mcc_h1089 = _source125.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2788_recursiveGen;
                  bool _2789_recOwned;
                  bool _2790_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2791_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1349;
                  bool _out1350;
                  bool _out1351;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1352;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1349, out _out1350, out _out1351, out _out1352);
                  _2788_recursiveGen = _out1349;
                  _2789_recOwned = _out1350;
                  _2790_recErased = _out1351;
                  _2791_recIdents = _out1352;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2788_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2789_recOwned;
                  isErased = _2790_recErased;
                  readIdents = _2791_recIdents;
                }
              } else if (_source125.is_Map) {
                DAST._IType _2792___mcc_h1091 = _source125.dtor_key;
                DAST._IType _2793___mcc_h1092 = _source125.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2794_recursiveGen;
                  bool _2795_recOwned;
                  bool _2796_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2797_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1353;
                  bool _out1354;
                  bool _out1355;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1356;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1353, out _out1354, out _out1355, out _out1356);
                  _2794_recursiveGen = _out1353;
                  _2795_recOwned = _out1354;
                  _2796_recErased = _out1355;
                  _2797_recIdents = _out1356;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2794_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2795_recOwned;
                  isErased = _2796_recErased;
                  readIdents = _2797_recIdents;
                }
              } else if (_source125.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2798___mcc_h1095 = _source125.dtor_args;
                DAST._IType _2799___mcc_h1096 = _source125.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2800_recursiveGen;
                  bool _2801_recOwned;
                  bool _2802_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2803_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1357;
                  bool _out1358;
                  bool _out1359;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1360;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1357, out _out1358, out _out1359, out _out1360);
                  _2800_recursiveGen = _out1357;
                  _2801_recOwned = _out1358;
                  _2802_recErased = _out1359;
                  _2803_recIdents = _out1360;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2801_recOwned;
                  isErased = _2802_recErased;
                  readIdents = _2803_recIdents;
                }
              } else if (_source125.is_Primitive) {
                DAST._IPrimitive _2804___mcc_h1099 = _source125.dtor_Primitive_a0;
                DAST._IPrimitive _source127 = _2804___mcc_h1099;
                if (_source127.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2805_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1361;
                    _out1361 = DCOMP.COMP.GenType(_1377_fromTpe, true, false);
                    _2805_rhsType = _out1361;
                    Dafny.ISequence<Dafny.Rune> _2806_recursiveGen;
                    bool _2807___v54;
                    bool _2808___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2809_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1362;
                    bool _out1363;
                    bool _out1364;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1365;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, true, out _out1362, out _out1363, out _out1364, out _out1365);
                    _2806_recursiveGen = _out1362;
                    _2807___v54 = _out1363;
                    _2808___v55 = _out1364;
                    _2809_recIdents = _out1365;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2806_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2809_recIdents;
                  }
                } else if (_source127.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2810_recursiveGen;
                    bool _2811_recOwned;
                    bool _2812_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2813_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1366;
                    bool _out1367;
                    bool _out1368;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1369;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1366, out _out1367, out _out1368, out _out1369);
                    _2810_recursiveGen = _out1366;
                    _2811_recOwned = _out1367;
                    _2812_recErased = _out1368;
                    _2813_recIdents = _out1369;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2810_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2811_recOwned;
                    isErased = _2812_recErased;
                    readIdents = _2813_recIdents;
                  }
                } else if (_source127.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2814_recursiveGen;
                    bool _2815_recOwned;
                    bool _2816_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2817_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1370;
                    bool _out1371;
                    bool _out1372;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1373;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1370, out _out1371, out _out1372, out _out1373);
                    _2814_recursiveGen = _out1370;
                    _2815_recOwned = _out1371;
                    _2816_recErased = _out1372;
                    _2817_recIdents = _out1373;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2814_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2815_recOwned;
                    isErased = _2816_recErased;
                    readIdents = _2817_recIdents;
                  }
                } else if (_source127.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2818_recursiveGen;
                    bool _2819_recOwned;
                    bool _2820_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2821_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1374;
                    bool _out1375;
                    bool _out1376;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1377;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1374, out _out1375, out _out1376, out _out1377);
                    _2818_recursiveGen = _out1374;
                    _2819_recOwned = _out1375;
                    _2820_recErased = _out1376;
                    _2821_recIdents = _out1377;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2818_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2819_recOwned;
                    isErased = _2820_recErased;
                    readIdents = _2821_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2822_recursiveGen;
                    bool _2823_recOwned;
                    bool _2824_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2825_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1378;
                    bool _out1379;
                    bool _out1380;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1381;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1378, out _out1379, out _out1380, out _out1381);
                    _2822_recursiveGen = _out1378;
                    _2823_recOwned = _out1379;
                    _2824_recErased = _out1380;
                    _2825_recIdents = _out1381;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2823_recOwned;
                    isErased = _2824_recErased;
                    readIdents = _2825_recIdents;
                  }
                }
              } else if (_source125.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2826___mcc_h1101 = _source125.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2827_recursiveGen;
                  bool _2828___v62;
                  bool _2829___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2830_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1382;
                  bool _out1383;
                  bool _out1384;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1385;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, true, out _out1382, out _out1383, out _out1384, out _out1385);
                  _2827_recursiveGen = _out1382;
                  _2828___v62 = _out1383;
                  _2829___v63 = _out1384;
                  _2830_recIdents = _out1385;
                  Dafny.ISequence<Dafny.Rune> _2831_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1386;
                  _out1386 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                  _2831_toTpeGen = _out1386;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2831_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2830_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2832___mcc_h1103 = _source125.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2833_recursiveGen;
                  bool _2834_recOwned;
                  bool _2835_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2836_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1387;
                  bool _out1388;
                  bool _out1389;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1390;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1387, out _out1388, out _out1389, out _out1390);
                  _2833_recursiveGen = _out1387;
                  _2834_recOwned = _out1388;
                  _2835_recErased = _out1389;
                  _2836_recIdents = _out1390;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2833_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2834_recOwned;
                  isErased = _2835_recErased;
                  readIdents = _2836_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2837___mcc_h1105 = _source87.dtor_TypeArg_a0;
              DAST._IType _source128 = _1384___mcc_h306;
              if (_source128.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2838___mcc_h1109 = _source128.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2839___mcc_h1110 = _source128.dtor_typeArgs;
                DAST._IResolvedType _2840___mcc_h1111 = _source128.dtor_resolved;
                DAST._IResolvedType _source129 = _2840___mcc_h1111;
                if (_source129.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2841___mcc_h1115 = _source129.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2842_recursiveGen;
                    bool _2843_recOwned;
                    bool _2844_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2845_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1391;
                    bool _out1392;
                    bool _out1393;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1394;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1391, out _out1392, out _out1393, out _out1394);
                    _2842_recursiveGen = _out1391;
                    _2843_recOwned = _out1392;
                    _2844_recErased = _out1393;
                    _2845_recIdents = _out1394;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2842_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2843_recOwned;
                    isErased = _2844_recErased;
                    readIdents = _2845_recIdents;
                  }
                } else if (_source129.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2846___mcc_h1117 = _source129.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2847_recursiveGen;
                    bool _2848_recOwned;
                    bool _2849_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2850_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1395;
                    bool _out1396;
                    bool _out1397;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1398;
                    DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1395, out _out1396, out _out1397, out _out1398);
                    _2847_recursiveGen = _out1395;
                    _2848_recOwned = _out1396;
                    _2849_recErased = _out1397;
                    _2850_recIdents = _out1398;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2847_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2848_recOwned;
                    isErased = _2849_recErased;
                    readIdents = _2850_recIdents;
                  }
                } else {
                  DAST._IType _2851___mcc_h1119 = _source129.dtor_Newtype_a0;
                  DAST._IType _2852_b = _2851___mcc_h1119;
                  {
                    if (object.Equals(_1377_fromTpe, _2852_b)) {
                      Dafny.ISequence<Dafny.Rune> _2853_recursiveGen;
                      bool _2854_recOwned;
                      bool _2855_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2856_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1399;
                      bool _out1400;
                      bool _out1401;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1402;
                      DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1399, out _out1400, out _out1401, out _out1402);
                      _2853_recursiveGen = _out1399;
                      _2854_recOwned = _out1400;
                      _2855_recErased = _out1401;
                      _2856_recIdents = _out1402;
                      Dafny.ISequence<Dafny.Rune> _2857_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1403;
                      _out1403 = DCOMP.COMP.GenType(_1376_toTpe, true, false);
                      _2857_rhsType = _out1403;
                      Dafny.ISequence<Dafny.Rune> _2858_uneraseFn;
                      _2858_uneraseFn = ((_2854_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2857_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2858_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2853_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2854_recOwned;
                      isErased = false;
                      readIdents = _2856_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1404;
                      bool _out1405;
                      bool _out1406;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1407;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1378_expr, _1377_fromTpe, _2852_b), _2852_b, _1376_toTpe), selfIdent, @params, mustOwn, out _out1404, out _out1405, out _out1406, out _out1407);
                      s = _out1404;
                      isOwned = _out1405;
                      isErased = _out1406;
                      readIdents = _out1407;
                    }
                  }
                }
              } else if (_source128.is_Nullable) {
                DAST._IType _2859___mcc_h1121 = _source128.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2860_recursiveGen;
                  bool _2861_recOwned;
                  bool _2862_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2863_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1408;
                  bool _out1409;
                  bool _out1410;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1411;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1408, out _out1409, out _out1410, out _out1411);
                  _2860_recursiveGen = _out1408;
                  _2861_recOwned = _out1409;
                  _2862_recErased = _out1410;
                  _2863_recIdents = _out1411;
                  if (!(_2861_recOwned)) {
                    _2860_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2860_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2860_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2862_recErased;
                  readIdents = _2863_recIdents;
                }
              } else if (_source128.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2864___mcc_h1123 = _source128.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2865_recursiveGen;
                  bool _2866_recOwned;
                  bool _2867_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2868_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1412;
                  bool _out1413;
                  bool _out1414;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1415;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1412, out _out1413, out _out1414, out _out1415);
                  _2865_recursiveGen = _out1412;
                  _2866_recOwned = _out1413;
                  _2867_recErased = _out1414;
                  _2868_recIdents = _out1415;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2865_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2866_recOwned;
                  isErased = _2867_recErased;
                  readIdents = _2868_recIdents;
                }
              } else if (_source128.is_Array) {
                DAST._IType _2869___mcc_h1125 = _source128.dtor_element;
                BigInteger _2870___mcc_h1126 = _source128.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2871_recursiveGen;
                  bool _2872_recOwned;
                  bool _2873_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2874_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1416;
                  bool _out1417;
                  bool _out1418;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1416, out _out1417, out _out1418, out _out1419);
                  _2871_recursiveGen = _out1416;
                  _2872_recOwned = _out1417;
                  _2873_recErased = _out1418;
                  _2874_recIdents = _out1419;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2871_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2872_recOwned;
                  isErased = _2873_recErased;
                  readIdents = _2874_recIdents;
                }
              } else if (_source128.is_Seq) {
                DAST._IType _2875___mcc_h1129 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2876_recursiveGen;
                  bool _2877_recOwned;
                  bool _2878_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2879_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1420;
                  bool _out1421;
                  bool _out1422;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1423;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1420, out _out1421, out _out1422, out _out1423);
                  _2876_recursiveGen = _out1420;
                  _2877_recOwned = _out1421;
                  _2878_recErased = _out1422;
                  _2879_recIdents = _out1423;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2876_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2877_recOwned;
                  isErased = _2878_recErased;
                  readIdents = _2879_recIdents;
                }
              } else if (_source128.is_Set) {
                DAST._IType _2880___mcc_h1131 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2881_recursiveGen;
                  bool _2882_recOwned;
                  bool _2883_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2884_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1424;
                  bool _out1425;
                  bool _out1426;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1427;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1424, out _out1425, out _out1426, out _out1427);
                  _2881_recursiveGen = _out1424;
                  _2882_recOwned = _out1425;
                  _2883_recErased = _out1426;
                  _2884_recIdents = _out1427;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2881_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2882_recOwned;
                  isErased = _2883_recErased;
                  readIdents = _2884_recIdents;
                }
              } else if (_source128.is_Multiset) {
                DAST._IType _2885___mcc_h1133 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2886_recursiveGen;
                  bool _2887_recOwned;
                  bool _2888_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2889_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1428;
                  bool _out1429;
                  bool _out1430;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1431;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1428, out _out1429, out _out1430, out _out1431);
                  _2886_recursiveGen = _out1428;
                  _2887_recOwned = _out1429;
                  _2888_recErased = _out1430;
                  _2889_recIdents = _out1431;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2886_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2887_recOwned;
                  isErased = _2888_recErased;
                  readIdents = _2889_recIdents;
                }
              } else if (_source128.is_Map) {
                DAST._IType _2890___mcc_h1135 = _source128.dtor_key;
                DAST._IType _2891___mcc_h1136 = _source128.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2892_recursiveGen;
                  bool _2893_recOwned;
                  bool _2894_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2895_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1432;
                  bool _out1433;
                  bool _out1434;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1435;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1432, out _out1433, out _out1434, out _out1435);
                  _2892_recursiveGen = _out1432;
                  _2893_recOwned = _out1433;
                  _2894_recErased = _out1434;
                  _2895_recIdents = _out1435;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2892_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2893_recOwned;
                  isErased = _2894_recErased;
                  readIdents = _2895_recIdents;
                }
              } else if (_source128.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2896___mcc_h1139 = _source128.dtor_args;
                DAST._IType _2897___mcc_h1140 = _source128.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2898_recursiveGen;
                  bool _2899_recOwned;
                  bool _2900_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2901_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1436;
                  bool _out1437;
                  bool _out1438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1436, out _out1437, out _out1438, out _out1439);
                  _2898_recursiveGen = _out1436;
                  _2899_recOwned = _out1437;
                  _2900_recErased = _out1438;
                  _2901_recIdents = _out1439;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2898_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2899_recOwned;
                  isErased = _2900_recErased;
                  readIdents = _2901_recIdents;
                }
              } else if (_source128.is_Primitive) {
                DAST._IPrimitive _2902___mcc_h1143 = _source128.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2903_recursiveGen;
                  bool _2904_recOwned;
                  bool _2905_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2906_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1440;
                  bool _out1441;
                  bool _out1442;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1443;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1440, out _out1441, out _out1442, out _out1443);
                  _2903_recursiveGen = _out1440;
                  _2904_recOwned = _out1441;
                  _2905_recErased = _out1442;
                  _2906_recIdents = _out1443;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2903_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2904_recOwned;
                  isErased = _2905_recErased;
                  readIdents = _2906_recIdents;
                }
              } else if (_source128.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2907___mcc_h1145 = _source128.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2908_recursiveGen;
                  bool _2909_recOwned;
                  bool _2910_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2911_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1444;
                  bool _out1445;
                  bool _out1446;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1447;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1444, out _out1445, out _out1446, out _out1447);
                  _2908_recursiveGen = _out1444;
                  _2909_recOwned = _out1445;
                  _2910_recErased = _out1446;
                  _2911_recIdents = _out1447;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2908_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2909_recOwned;
                  isErased = _2910_recErased;
                  readIdents = _2911_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2912___mcc_h1147 = _source128.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2913_recursiveGen;
                  bool _2914_recOwned;
                  bool _2915_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2916_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1448;
                  bool _out1449;
                  bool _out1450;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1451;
                  DCOMP.COMP.GenExpr(_1378_expr, selfIdent, @params, mustOwn, out _out1448, out _out1449, out _out1450, out _out1451);
                  _2913_recursiveGen = _out1448;
                  _2914_recOwned = _out1449;
                  _2915_recErased = _out1450;
                  _2916_recIdents = _out1451;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2913_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2914_recOwned;
                  isErased = _2915_recErased;
                  readIdents = _2916_recIdents;
                }
              }
            }
          }
        }
      } else if (_source80.is_SeqConstruct) {
        DAST._IExpression _2917___mcc_h26 = _source80.dtor_length;
        DAST._IExpression _2918___mcc_h27 = _source80.dtor_elem;
        DAST._IExpression _2919_expr = _2918___mcc_h27;
        DAST._IExpression _2920_length = _2917___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2921_recursiveGen;
          bool _2922___v65;
          bool _2923_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2924_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1452;
          bool _out1453;
          bool _out1454;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1455;
          DCOMP.COMP.GenExpr(_2919_expr, selfIdent, @params, true, out _out1452, out _out1453, out _out1454, out _out1455);
          _2921_recursiveGen = _out1452;
          _2922___v65 = _out1453;
          _2923_eErased = _out1454;
          _2924_recIdents = _out1455;
          Dafny.ISequence<Dafny.Rune> _2925_lengthGen;
          bool _2926___v66;
          bool _2927_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2928_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1456;
          bool _out1457;
          bool _out1458;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1459;
          DCOMP.COMP.GenExpr(_2920_length, selfIdent, @params, true, out _out1456, out _out1457, out _out1458, out _out1459);
          _2925_lengthGen = _out1456;
          _2926___v66 = _out1457;
          _2927_lengthErased = _out1458;
          _2928_lengthIdents = _out1459;
          if (!(_2927_lengthErased)) {
            _2925_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2925_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2921_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2925_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2924_recIdents, _2928_lengthIdents);
          isOwned = true;
          isErased = _2923_eErased;
        }
      } else if (_source80.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2929___mcc_h28 = _source80.dtor_elements;
        DAST._IType _2930___mcc_h29 = _source80.dtor_typ;
        DAST._IType _2931_typ = _2930___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2932_exprs = _2929___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2933_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1460;
          _out1460 = DCOMP.COMP.GenType(_2931_typ, false, false);
          _2933_genTpe = _out1460;
          BigInteger _2934_i;
          _2934_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2934_i = BigInteger.Zero;
          while ((_2934_i) < (new BigInteger((_2932_exprs).Count))) {
            if ((_2934_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2935_recursiveGen;
            bool _2936___v67;
            bool _2937_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2938_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1461;
            bool _out1462;
            bool _out1463;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
            DCOMP.COMP.GenExpr((_2932_exprs).Select(_2934_i), selfIdent, @params, true, out _out1461, out _out1462, out _out1463, out _out1464);
            _2935_recursiveGen = _out1461;
            _2936___v67 = _out1462;
            _2937_isErased = _out1463;
            _2938_recIdents = _out1464;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2938_recIdents);
            if (_2937_isErased) {
              _2935_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2935_recursiveGen);
            _2934_i = (_2934_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2933_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source80.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2939___mcc_h30 = _source80.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2940_exprs = _2939___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2941_generatedValues;
          _2941_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2942_i;
          _2942_i = BigInteger.Zero;
          bool _2943_allErased;
          _2943_allErased = true;
          while ((_2942_i) < (new BigInteger((_2940_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2944_recursiveGen;
            bool _2945___v68;
            bool _2946_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2947_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1465;
            bool _out1466;
            bool _out1467;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1468;
            DCOMP.COMP.GenExpr((_2940_exprs).Select(_2942_i), selfIdent, @params, true, out _out1465, out _out1466, out _out1467, out _out1468);
            _2944_recursiveGen = _out1465;
            _2945___v68 = _out1466;
            _2946_isErased = _out1467;
            _2947_recIdents = _out1468;
            _2943_allErased = (_2943_allErased) && (_2946_isErased);
            _2941_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2941_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2944_recursiveGen, _2946_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2947_recIdents);
            _2942_i = (_2942_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2942_i = BigInteger.Zero;
          while ((_2942_i) < (new BigInteger((_2941_generatedValues).Count))) {
            if ((_2942_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2948_gen;
            _2948_gen = ((_2941_generatedValues).Select(_2942_i)).dtor__0;
            if ((((_2941_generatedValues).Select(_2942_i)).dtor__1) && (!(_2943_allErased))) {
              _2948_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2948_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2948_gen);
            _2942_i = (_2942_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2943_allErased;
        }
      } else if (_source80.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2949___mcc_h31 = _source80.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2950_mapElems = _2949___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2951_generatedValues;
          _2951_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2952_i;
          _2952_i = BigInteger.Zero;
          bool _2953_allErased;
          _2953_allErased = true;
          while ((_2952_i) < (new BigInteger((_2950_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2954_recursiveGenKey;
            bool _2955___v69;
            bool _2956_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2957_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1469;
            bool _out1470;
            bool _out1471;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1472;
            DCOMP.COMP.GenExpr(((_2950_mapElems).Select(_2952_i)).dtor__0, selfIdent, @params, true, out _out1469, out _out1470, out _out1471, out _out1472);
            _2954_recursiveGenKey = _out1469;
            _2955___v69 = _out1470;
            _2956_isErasedKey = _out1471;
            _2957_recIdentsKey = _out1472;
            Dafny.ISequence<Dafny.Rune> _2958_recursiveGenValue;
            bool _2959___v70;
            bool _2960_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2961_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1473;
            bool _out1474;
            bool _out1475;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
            DCOMP.COMP.GenExpr(((_2950_mapElems).Select(_2952_i)).dtor__1, selfIdent, @params, true, out _out1473, out _out1474, out _out1475, out _out1476);
            _2958_recursiveGenValue = _out1473;
            _2959___v70 = _out1474;
            _2960_isErasedValue = _out1475;
            _2961_recIdentsValue = _out1476;
            _2953_allErased = ((_2953_allErased) && (_2956_isErasedKey)) && (_2960_isErasedValue);
            _2951_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2951_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2954_recursiveGenKey, _2958_recursiveGenValue, _2956_isErasedKey, _2960_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2957_recIdentsKey), _2961_recIdentsValue);
            _2952_i = (_2952_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2952_i = BigInteger.Zero;
          while ((_2952_i) < (new BigInteger((_2951_generatedValues).Count))) {
            if ((_2952_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2962_genKey;
            _2962_genKey = ((_2951_generatedValues).Select(_2952_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2963_genValue;
            _2963_genValue = ((_2951_generatedValues).Select(_2952_i)).dtor__1;
            if ((((_2951_generatedValues).Select(_2952_i)).dtor__2) && (!(_2953_allErased))) {
              _2962_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2962_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2951_generatedValues).Select(_2952_i)).dtor__3) && (!(_2953_allErased))) {
              _2963_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2963_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2962_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2963_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2952_i = (_2952_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2953_allErased;
        }
      } else if (_source80.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source130 = selfIdent;
          if (_source130.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2964___mcc_h1149 = _source130.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2965_id = _2964___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2965_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2965_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2965_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2965_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source80.is_Ite) {
        DAST._IExpression _2966___mcc_h32 = _source80.dtor_cond;
        DAST._IExpression _2967___mcc_h33 = _source80.dtor_thn;
        DAST._IExpression _2968___mcc_h34 = _source80.dtor_els;
        DAST._IExpression _2969_f = _2968___mcc_h34;
        DAST._IExpression _2970_t = _2967___mcc_h33;
        DAST._IExpression _2971_cond = _2966___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2972_condString;
          bool _2973___v71;
          bool _2974_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2975_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1477;
          bool _out1478;
          bool _out1479;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1480;
          DCOMP.COMP.GenExpr(_2971_cond, selfIdent, @params, true, out _out1477, out _out1478, out _out1479, out _out1480);
          _2972_condString = _out1477;
          _2973___v71 = _out1478;
          _2974_condErased = _out1479;
          _2975_recIdentsCond = _out1480;
          if (!(_2974_condErased)) {
            _2972_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2972_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2976___v72;
          bool _2977_tHasToBeOwned;
          bool _2978___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2979___v74;
          Dafny.ISequence<Dafny.Rune> _out1481;
          bool _out1482;
          bool _out1483;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
          DCOMP.COMP.GenExpr(_2970_t, selfIdent, @params, mustOwn, out _out1481, out _out1482, out _out1483, out _out1484);
          _2976___v72 = _out1481;
          _2977_tHasToBeOwned = _out1482;
          _2978___v73 = _out1483;
          _2979___v74 = _out1484;
          Dafny.ISequence<Dafny.Rune> _2980_fString;
          bool _2981_fOwned;
          bool _2982_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2983_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1485;
          bool _out1486;
          bool _out1487;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
          DCOMP.COMP.GenExpr(_2969_f, selfIdent, @params, _2977_tHasToBeOwned, out _out1485, out _out1486, out _out1487, out _out1488);
          _2980_fString = _out1485;
          _2981_fOwned = _out1486;
          _2982_fErased = _out1487;
          _2983_recIdentsF = _out1488;
          Dafny.ISequence<Dafny.Rune> _2984_tString;
          bool _2985___v75;
          bool _2986_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2987_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1489;
          bool _out1490;
          bool _out1491;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
          DCOMP.COMP.GenExpr(_2970_t, selfIdent, @params, _2981_fOwned, out _out1489, out _out1490, out _out1491, out _out1492);
          _2984_tString = _out1489;
          _2985___v75 = _out1490;
          _2986_tErased = _out1491;
          _2987_recIdentsT = _out1492;
          if ((!(_2982_fErased)) || (!(_2986_tErased))) {
            if (_2982_fErased) {
              _2980_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2980_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2986_tErased) {
              _2984_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2984_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2972_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2984_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2980_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2981_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2975_recIdentsCond, _2987_recIdentsT), _2983_recIdentsF);
          isErased = (_2982_fErased) || (_2986_tErased);
        }
      } else if (_source80.is_UnOp) {
        DAST._IUnaryOp _2988___mcc_h35 = _source80.dtor_unOp;
        DAST._IExpression _2989___mcc_h36 = _source80.dtor_expr;
        DAST._IUnaryOp _source131 = _2988___mcc_h35;
        if (_source131.is_Not) {
          DAST._IExpression _2990_e = _2989___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2991_recursiveGen;
            bool _2992___v76;
            bool _2993_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2994_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1493;
            bool _out1494;
            bool _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(_2990_e, selfIdent, @params, true, out _out1493, out _out1494, out _out1495, out _out1496);
            _2991_recursiveGen = _out1493;
            _2992___v76 = _out1494;
            _2993_recErased = _out1495;
            _2994_recIdents = _out1496;
            if (!(_2993_recErased)) {
              _2991_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2991_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2991_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2994_recIdents;
            isErased = true;
          }
        } else if (_source131.is_BitwiseNot) {
          DAST._IExpression _2995_e = _2989___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2996_recursiveGen;
            bool _2997___v77;
            bool _2998_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2999_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1497;
            bool _out1498;
            bool _out1499;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1500;
            DCOMP.COMP.GenExpr(_2995_e, selfIdent, @params, true, out _out1497, out _out1498, out _out1499, out _out1500);
            _2996_recursiveGen = _out1497;
            _2997___v77 = _out1498;
            _2998_recErased = _out1499;
            _2999_recIdents = _out1500;
            if (!(_2998_recErased)) {
              _2996_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2996_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2996_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2999_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _3000_e = _2989___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3001_recursiveGen;
            bool _3002_recOwned;
            bool _3003_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3004_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1501;
            bool _out1502;
            bool _out1503;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
            DCOMP.COMP.GenExpr(_3000_e, selfIdent, @params, false, out _out1501, out _out1502, out _out1503, out _out1504);
            _3001_recursiveGen = _out1501;
            _3002_recOwned = _out1502;
            _3003_recErased = _out1503;
            _3004_recIdents = _out1504;
            if (!(_3003_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3005_eraseFn;
              _3005_eraseFn = ((_3002_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3001_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3005_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3001_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3001_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3004_recIdents;
            isErased = true;
          }
        }
      } else if (_source80.is_BinOp) {
        DAST._IBinOp _3006___mcc_h37 = _source80.dtor_op;
        DAST._IExpression _3007___mcc_h38 = _source80.dtor_left;
        DAST._IExpression _3008___mcc_h39 = _source80.dtor_right;
        DAST._IExpression _3009_r = _3008___mcc_h39;
        DAST._IExpression _3010_l = _3007___mcc_h38;
        DAST._IBinOp _3011_op = _3006___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _3012_left;
          bool _3013___v78;
          bool _3014_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3015_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1505;
          bool _out1506;
          bool _out1507;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
          DCOMP.COMP.GenExpr(_3010_l, selfIdent, @params, true, out _out1505, out _out1506, out _out1507, out _out1508);
          _3012_left = _out1505;
          _3013___v78 = _out1506;
          _3014_leftErased = _out1507;
          _3015_recIdentsL = _out1508;
          Dafny.ISequence<Dafny.Rune> _3016_right;
          bool _3017___v79;
          bool _3018_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3019_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1509;
          bool _out1510;
          bool _out1511;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
          DCOMP.COMP.GenExpr(_3009_r, selfIdent, @params, true, out _out1509, out _out1510, out _out1511, out _out1512);
          _3016_right = _out1509;
          _3017___v79 = _out1510;
          _3018_rightErased = _out1511;
          _3019_recIdentsR = _out1512;
          DAST._IBinOp _source132 = _3011_op;
          if (_source132.is_Eq) {
            bool _3020___mcc_h1150 = _source132.dtor_referential;
            bool _3021___mcc_h1151 = _source132.dtor_nullable;
            {
              if (!(_3014_leftErased)) {
                _3012_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3018_rightErased)) {
                _3016_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source133 = _3011_op;
              if (_source133.is_Eq) {
                bool _3022___mcc_h1160 = _source133.dtor_referential;
                bool _3023___mcc_h1161 = _source133.dtor_nullable;
                bool _3024_nullable = _3023___mcc_h1161;
                bool _3025_referential = _3022___mcc_h1160;
                {
                  if (_3025_referential) {
                    if (_3024_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3016_right);
                  }
                }
              } else if (_source133.is_Neq) {
                bool _3026___mcc_h1162 = _source133.dtor_referential;
                bool _3027___mcc_h1163 = _source133.dtor_nullable;
                bool _3028_nullable = _3027___mcc_h1163;
                bool _3029_referential = _3026___mcc_h1162;
                {
                  if (_3029_referential) {
                    if (_3028_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3016_right);
                  }
                }
              } else if (_source133.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source133.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source133.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source133.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3030___mcc_h1164 = _source133.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3031_op = _3030___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3031_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source132.is_Neq) {
            bool _3032___mcc_h1154 = _source132.dtor_referential;
            bool _3033___mcc_h1155 = _source132.dtor_nullable;
            {
              if (!(_3014_leftErased)) {
                _3012_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3018_rightErased)) {
                _3016_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source134 = _3011_op;
              if (_source134.is_Eq) {
                bool _3034___mcc_h1165 = _source134.dtor_referential;
                bool _3035___mcc_h1166 = _source134.dtor_nullable;
                bool _3036_nullable = _3035___mcc_h1166;
                bool _3037_referential = _3034___mcc_h1165;
                {
                  if (_3037_referential) {
                    if (_3036_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3016_right);
                  }
                }
              } else if (_source134.is_Neq) {
                bool _3038___mcc_h1167 = _source134.dtor_referential;
                bool _3039___mcc_h1168 = _source134.dtor_nullable;
                bool _3040_nullable = _3039___mcc_h1168;
                bool _3041_referential = _3038___mcc_h1167;
                {
                  if (_3041_referential) {
                    if (_3040_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3016_right);
                  }
                }
              } else if (_source134.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source134.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source134.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source134.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3042___mcc_h1169 = _source134.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3043_op = _3042___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3043_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source132.is_Div) {
            {
              if (!(_3014_leftErased)) {
                _3012_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3018_rightErased)) {
                _3016_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source135 = _3011_op;
              if (_source135.is_Eq) {
                bool _3044___mcc_h1170 = _source135.dtor_referential;
                bool _3045___mcc_h1171 = _source135.dtor_nullable;
                bool _3046_nullable = _3045___mcc_h1171;
                bool _3047_referential = _3044___mcc_h1170;
                {
                  if (_3047_referential) {
                    if (_3046_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3016_right);
                  }
                }
              } else if (_source135.is_Neq) {
                bool _3048___mcc_h1172 = _source135.dtor_referential;
                bool _3049___mcc_h1173 = _source135.dtor_nullable;
                bool _3050_nullable = _3049___mcc_h1173;
                bool _3051_referential = _3048___mcc_h1172;
                {
                  if (_3051_referential) {
                    if (_3050_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3016_right);
                  }
                }
              } else if (_source135.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source135.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source135.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source135.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3052___mcc_h1174 = _source135.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3053_op = _3052___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3053_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source132.is_EuclidianDiv) {
            {
              if (!(_3014_leftErased)) {
                _3012_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3018_rightErased)) {
                _3016_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source136 = _3011_op;
              if (_source136.is_Eq) {
                bool _3054___mcc_h1175 = _source136.dtor_referential;
                bool _3055___mcc_h1176 = _source136.dtor_nullable;
                bool _3056_nullable = _3055___mcc_h1176;
                bool _3057_referential = _3054___mcc_h1175;
                {
                  if (_3057_referential) {
                    if (_3056_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3016_right);
                  }
                }
              } else if (_source136.is_Neq) {
                bool _3058___mcc_h1177 = _source136.dtor_referential;
                bool _3059___mcc_h1178 = _source136.dtor_nullable;
                bool _3060_nullable = _3059___mcc_h1178;
                bool _3061_referential = _3058___mcc_h1177;
                {
                  if (_3061_referential) {
                    if (_3060_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3016_right);
                  }
                }
              } else if (_source136.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source136.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source136.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source136.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3062___mcc_h1179 = _source136.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3063_op = _3062___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3063_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source132.is_Mod) {
            {
              if (!(_3014_leftErased)) {
                _3012_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3018_rightErased)) {
                _3016_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source137 = _3011_op;
              if (_source137.is_Eq) {
                bool _3064___mcc_h1180 = _source137.dtor_referential;
                bool _3065___mcc_h1181 = _source137.dtor_nullable;
                bool _3066_nullable = _3065___mcc_h1181;
                bool _3067_referential = _3064___mcc_h1180;
                {
                  if (_3067_referential) {
                    if (_3066_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3016_right);
                  }
                }
              } else if (_source137.is_Neq) {
                bool _3068___mcc_h1182 = _source137.dtor_referential;
                bool _3069___mcc_h1183 = _source137.dtor_nullable;
                bool _3070_nullable = _3069___mcc_h1183;
                bool _3071_referential = _3068___mcc_h1182;
                {
                  if (_3071_referential) {
                    if (_3070_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3016_right);
                  }
                }
              } else if (_source137.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source137.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source137.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source137.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3072___mcc_h1184 = _source137.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3073_op = _3072___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3073_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source132.is_EuclidianMod) {
            {
              if (!(_3014_leftErased)) {
                _3012_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3018_rightErased)) {
                _3016_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source138 = _3011_op;
              if (_source138.is_Eq) {
                bool _3074___mcc_h1185 = _source138.dtor_referential;
                bool _3075___mcc_h1186 = _source138.dtor_nullable;
                bool _3076_nullable = _3075___mcc_h1186;
                bool _3077_referential = _3074___mcc_h1185;
                {
                  if (_3077_referential) {
                    if (_3076_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3016_right);
                  }
                }
              } else if (_source138.is_Neq) {
                bool _3078___mcc_h1187 = _source138.dtor_referential;
                bool _3079___mcc_h1188 = _source138.dtor_nullable;
                bool _3080_nullable = _3079___mcc_h1188;
                bool _3081_referential = _3078___mcc_h1187;
                {
                  if (_3081_referential) {
                    if (_3080_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3016_right);
                  }
                }
              } else if (_source138.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source138.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source138.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source138.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3082___mcc_h1189 = _source138.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3083_op = _3082___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3083_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source132.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _3016_right);
            }
          } else if (_source132.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3016_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source132.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source132.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source132.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3084___mcc_h1158 = _source132.dtor_Passthrough_a0;
            {
              if (!(_3014_leftErased)) {
                _3012_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3018_rightErased)) {
                _3016_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source139 = _3011_op;
              if (_source139.is_Eq) {
                bool _3085___mcc_h1190 = _source139.dtor_referential;
                bool _3086___mcc_h1191 = _source139.dtor_nullable;
                bool _3087_nullable = _3086___mcc_h1191;
                bool _3088_referential = _3085___mcc_h1190;
                {
                  if (_3088_referential) {
                    if (_3087_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3016_right);
                  }
                }
              } else if (_source139.is_Neq) {
                bool _3089___mcc_h1192 = _source139.dtor_referential;
                bool _3090___mcc_h1193 = _source139.dtor_nullable;
                bool _3091_nullable = _3090___mcc_h1193;
                bool _3092_referential = _3089___mcc_h1192;
                {
                  if (_3092_referential) {
                    if (_3091_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3012_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3016_right);
                  }
                }
              } else if (_source139.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source139.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source139.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source139.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3093___mcc_h1194 = _source139.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3094_op = _3093___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3012_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3094_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3016_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3015_recIdentsL, _3019_recIdentsR);
          isErased = true;
        }
      } else if (_source80.is_ArrayLen) {
        DAST._IExpression _3095___mcc_h40 = _source80.dtor_expr;
        BigInteger _3096___mcc_h41 = _source80.dtor_dim;
        BigInteger _3097_dim = _3096___mcc_h41;
        DAST._IExpression _3098_expr = _3095___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _3099_recursiveGen;
          bool _3100___v81;
          bool _3101_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3102_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1513;
          bool _out1514;
          bool _out1515;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
          DCOMP.COMP.GenExpr(_3098_expr, selfIdent, @params, true, out _out1513, out _out1514, out _out1515, out _out1516);
          _3099_recursiveGen = _out1513;
          _3100___v81 = _out1514;
          _3101_recErased = _out1515;
          _3102_recIdents = _out1516;
          if ((_3097_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3099_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _3103_i;
            _3103_i = BigInteger.One;
            while ((_3103_i) < (_3097_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3103_i = (_3103_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3099_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _3102_recIdents;
          isErased = true;
        }
      } else if (_source80.is_Select) {
        DAST._IExpression _3104___mcc_h42 = _source80.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3105___mcc_h43 = _source80.dtor_field;
        bool _3106___mcc_h44 = _source80.dtor_isConstant;
        bool _3107___mcc_h45 = _source80.dtor_onDatatype;
        DAST._IExpression _source140 = _3104___mcc_h42;
        if (_source140.is_Literal) {
          DAST._ILiteral _3108___mcc_h46 = _source140.dtor_Literal_a0;
          bool _3109_isDatatype = _3107___mcc_h45;
          bool _3110_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3111_field = _3105___mcc_h43;
          DAST._IExpression _3112_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3113_onString;
            bool _3114_onOwned;
            bool _3115_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3116_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1517;
            bool _out1518;
            bool _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            DCOMP.COMP.GenExpr(_3112_on, selfIdent, @params, false, out _out1517, out _out1518, out _out1519, out _out1520);
            _3113_onString = _out1517;
            _3114_onOwned = _out1518;
            _3115_onErased = _out1519;
            _3116_recIdents = _out1520;
            if ((_3109_isDatatype) || (_3110_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3113_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3111_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3110_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3113_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3111_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3116_recIdents;
          }
        } else if (_source140.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3117___mcc_h48 = _source140.dtor_Ident_a0;
          bool _3118_isDatatype = _3107___mcc_h45;
          bool _3119_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3120_field = _3105___mcc_h43;
          DAST._IExpression _3121_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3122_onString;
            bool _3123_onOwned;
            bool _3124_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3125_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1521;
            bool _out1522;
            bool _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr(_3121_on, selfIdent, @params, false, out _out1521, out _out1522, out _out1523, out _out1524);
            _3122_onString = _out1521;
            _3123_onOwned = _out1522;
            _3124_onErased = _out1523;
            _3125_recIdents = _out1524;
            if ((_3118_isDatatype) || (_3119_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3122_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3120_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3119_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3122_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3120_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3125_recIdents;
          }
        } else if (_source140.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3126___mcc_h50 = _source140.dtor_Companion_a0;
          bool _3127_isDatatype = _3107___mcc_h45;
          bool _3128_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3129_field = _3105___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3130_c = _3126___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _3131_onString;
            bool _3132_onOwned;
            bool _3133_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3134_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1525;
            bool _out1526;
            bool _out1527;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1528;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3130_c), selfIdent, @params, false, out _out1525, out _out1526, out _out1527, out _out1528);
            _3131_onString = _out1525;
            _3132_onOwned = _out1526;
            _3133_onErased = _out1527;
            _3134_recIdents = _out1528;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3131_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3129_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3134_recIdents;
          }
        } else if (_source140.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3135___mcc_h52 = _source140.dtor_Tuple_a0;
          bool _3136_isDatatype = _3107___mcc_h45;
          bool _3137_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3138_field = _3105___mcc_h43;
          DAST._IExpression _3139_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3140_onString;
            bool _3141_onOwned;
            bool _3142_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3143_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1529;
            bool _out1530;
            bool _out1531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
            DCOMP.COMP.GenExpr(_3139_on, selfIdent, @params, false, out _out1529, out _out1530, out _out1531, out _out1532);
            _3140_onString = _out1529;
            _3141_onOwned = _out1530;
            _3142_onErased = _out1531;
            _3143_recIdents = _out1532;
            if ((_3136_isDatatype) || (_3137_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3140_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3138_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3137_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3140_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3138_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3143_recIdents;
          }
        } else if (_source140.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3144___mcc_h54 = _source140.dtor_path;
          Dafny.ISequence<DAST._IType> _3145___mcc_h55 = _source140.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3146___mcc_h56 = _source140.dtor_args;
          bool _3147_isDatatype = _3107___mcc_h45;
          bool _3148_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3149_field = _3105___mcc_h43;
          DAST._IExpression _3150_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3151_onString;
            bool _3152_onOwned;
            bool _3153_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3154_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1533;
            bool _out1534;
            bool _out1535;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
            DCOMP.COMP.GenExpr(_3150_on, selfIdent, @params, false, out _out1533, out _out1534, out _out1535, out _out1536);
            _3151_onString = _out1533;
            _3152_onOwned = _out1534;
            _3153_onErased = _out1535;
            _3154_recIdents = _out1536;
            if ((_3147_isDatatype) || (_3148_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3151_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3149_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3148_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3151_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3149_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3154_recIdents;
          }
        } else if (_source140.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3155___mcc_h60 = _source140.dtor_dims;
          DAST._IType _3156___mcc_h61 = _source140.dtor_typ;
          bool _3157_isDatatype = _3107___mcc_h45;
          bool _3158_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3159_field = _3105___mcc_h43;
          DAST._IExpression _3160_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3161_onString;
            bool _3162_onOwned;
            bool _3163_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3164_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1537;
            bool _out1538;
            bool _out1539;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
            DCOMP.COMP.GenExpr(_3160_on, selfIdent, @params, false, out _out1537, out _out1538, out _out1539, out _out1540);
            _3161_onString = _out1537;
            _3162_onOwned = _out1538;
            _3163_onErased = _out1539;
            _3164_recIdents = _out1540;
            if ((_3157_isDatatype) || (_3158_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3161_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3159_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3158_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3161_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3159_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3164_recIdents;
          }
        } else if (_source140.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3165___mcc_h64 = _source140.dtor_path;
          Dafny.ISequence<DAST._IType> _3166___mcc_h65 = _source140.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3167___mcc_h66 = _source140.dtor_variant;
          bool _3168___mcc_h67 = _source140.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3169___mcc_h68 = _source140.dtor_contents;
          bool _3170_isDatatype = _3107___mcc_h45;
          bool _3171_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3172_field = _3105___mcc_h43;
          DAST._IExpression _3173_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3174_onString;
            bool _3175_onOwned;
            bool _3176_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3177_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1541;
            bool _out1542;
            bool _out1543;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
            DCOMP.COMP.GenExpr(_3173_on, selfIdent, @params, false, out _out1541, out _out1542, out _out1543, out _out1544);
            _3174_onString = _out1541;
            _3175_onOwned = _out1542;
            _3176_onErased = _out1543;
            _3177_recIdents = _out1544;
            if ((_3170_isDatatype) || (_3171_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3174_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3172_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3171_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3174_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3172_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3177_recIdents;
          }
        } else if (_source140.is_Convert) {
          DAST._IExpression _3178___mcc_h74 = _source140.dtor_value;
          DAST._IType _3179___mcc_h75 = _source140.dtor_from;
          DAST._IType _3180___mcc_h76 = _source140.dtor_typ;
          bool _3181_isDatatype = _3107___mcc_h45;
          bool _3182_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3183_field = _3105___mcc_h43;
          DAST._IExpression _3184_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3185_onString;
            bool _3186_onOwned;
            bool _3187_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3188_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1545;
            bool _out1546;
            bool _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            DCOMP.COMP.GenExpr(_3184_on, selfIdent, @params, false, out _out1545, out _out1546, out _out1547, out _out1548);
            _3185_onString = _out1545;
            _3186_onOwned = _out1546;
            _3187_onErased = _out1547;
            _3188_recIdents = _out1548;
            if ((_3181_isDatatype) || (_3182_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3185_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3183_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3182_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3185_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3183_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3188_recIdents;
          }
        } else if (_source140.is_SeqConstruct) {
          DAST._IExpression _3189___mcc_h80 = _source140.dtor_length;
          DAST._IExpression _3190___mcc_h81 = _source140.dtor_elem;
          bool _3191_isDatatype = _3107___mcc_h45;
          bool _3192_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3193_field = _3105___mcc_h43;
          DAST._IExpression _3194_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3195_onString;
            bool _3196_onOwned;
            bool _3197_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3198_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1549;
            bool _out1550;
            bool _out1551;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
            DCOMP.COMP.GenExpr(_3194_on, selfIdent, @params, false, out _out1549, out _out1550, out _out1551, out _out1552);
            _3195_onString = _out1549;
            _3196_onOwned = _out1550;
            _3197_onErased = _out1551;
            _3198_recIdents = _out1552;
            if ((_3191_isDatatype) || (_3192_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3195_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3193_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3192_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3195_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3193_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3198_recIdents;
          }
        } else if (_source140.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3199___mcc_h84 = _source140.dtor_elements;
          DAST._IType _3200___mcc_h85 = _source140.dtor_typ;
          bool _3201_isDatatype = _3107___mcc_h45;
          bool _3202_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3203_field = _3105___mcc_h43;
          DAST._IExpression _3204_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3205_onString;
            bool _3206_onOwned;
            bool _3207_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3208_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1553;
            bool _out1554;
            bool _out1555;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1556;
            DCOMP.COMP.GenExpr(_3204_on, selfIdent, @params, false, out _out1553, out _out1554, out _out1555, out _out1556);
            _3205_onString = _out1553;
            _3206_onOwned = _out1554;
            _3207_onErased = _out1555;
            _3208_recIdents = _out1556;
            if ((_3201_isDatatype) || (_3202_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3205_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3203_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3202_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3205_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3203_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3208_recIdents;
          }
        } else if (_source140.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3209___mcc_h88 = _source140.dtor_elements;
          bool _3210_isDatatype = _3107___mcc_h45;
          bool _3211_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3212_field = _3105___mcc_h43;
          DAST._IExpression _3213_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3214_onString;
            bool _3215_onOwned;
            bool _3216_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3217_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1557;
            bool _out1558;
            bool _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            DCOMP.COMP.GenExpr(_3213_on, selfIdent, @params, false, out _out1557, out _out1558, out _out1559, out _out1560);
            _3214_onString = _out1557;
            _3215_onOwned = _out1558;
            _3216_onErased = _out1559;
            _3217_recIdents = _out1560;
            if ((_3210_isDatatype) || (_3211_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3214_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3212_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3211_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3214_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3212_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3217_recIdents;
          }
        } else if (_source140.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3218___mcc_h90 = _source140.dtor_mapElems;
          bool _3219_isDatatype = _3107___mcc_h45;
          bool _3220_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3221_field = _3105___mcc_h43;
          DAST._IExpression _3222_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3223_onString;
            bool _3224_onOwned;
            bool _3225_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3226_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1561;
            bool _out1562;
            bool _out1563;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1564;
            DCOMP.COMP.GenExpr(_3222_on, selfIdent, @params, false, out _out1561, out _out1562, out _out1563, out _out1564);
            _3223_onString = _out1561;
            _3224_onOwned = _out1562;
            _3225_onErased = _out1563;
            _3226_recIdents = _out1564;
            if ((_3219_isDatatype) || (_3220_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3223_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3221_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3220_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3223_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3221_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3226_recIdents;
          }
        } else if (_source140.is_This) {
          bool _3227_isDatatype = _3107___mcc_h45;
          bool _3228_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3229_field = _3105___mcc_h43;
          DAST._IExpression _3230_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3231_onString;
            bool _3232_onOwned;
            bool _3233_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3234_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1565;
            bool _out1566;
            bool _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            DCOMP.COMP.GenExpr(_3230_on, selfIdent, @params, false, out _out1565, out _out1566, out _out1567, out _out1568);
            _3231_onString = _out1565;
            _3232_onOwned = _out1566;
            _3233_onErased = _out1567;
            _3234_recIdents = _out1568;
            if ((_3227_isDatatype) || (_3228_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3231_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3229_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3228_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3231_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3229_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3234_recIdents;
          }
        } else if (_source140.is_Ite) {
          DAST._IExpression _3235___mcc_h92 = _source140.dtor_cond;
          DAST._IExpression _3236___mcc_h93 = _source140.dtor_thn;
          DAST._IExpression _3237___mcc_h94 = _source140.dtor_els;
          bool _3238_isDatatype = _3107___mcc_h45;
          bool _3239_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3240_field = _3105___mcc_h43;
          DAST._IExpression _3241_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3242_onString;
            bool _3243_onOwned;
            bool _3244_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3245_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1569;
            bool _out1570;
            bool _out1571;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
            DCOMP.COMP.GenExpr(_3241_on, selfIdent, @params, false, out _out1569, out _out1570, out _out1571, out _out1572);
            _3242_onString = _out1569;
            _3243_onOwned = _out1570;
            _3244_onErased = _out1571;
            _3245_recIdents = _out1572;
            if ((_3238_isDatatype) || (_3239_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3242_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3240_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3239_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3242_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3240_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3245_recIdents;
          }
        } else if (_source140.is_UnOp) {
          DAST._IUnaryOp _3246___mcc_h98 = _source140.dtor_unOp;
          DAST._IExpression _3247___mcc_h99 = _source140.dtor_expr;
          bool _3248_isDatatype = _3107___mcc_h45;
          bool _3249_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3250_field = _3105___mcc_h43;
          DAST._IExpression _3251_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3252_onString;
            bool _3253_onOwned;
            bool _3254_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3255_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1573;
            bool _out1574;
            bool _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            DCOMP.COMP.GenExpr(_3251_on, selfIdent, @params, false, out _out1573, out _out1574, out _out1575, out _out1576);
            _3252_onString = _out1573;
            _3253_onOwned = _out1574;
            _3254_onErased = _out1575;
            _3255_recIdents = _out1576;
            if ((_3248_isDatatype) || (_3249_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3252_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3250_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3249_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3252_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3250_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3255_recIdents;
          }
        } else if (_source140.is_BinOp) {
          DAST._IBinOp _3256___mcc_h102 = _source140.dtor_op;
          DAST._IExpression _3257___mcc_h103 = _source140.dtor_left;
          DAST._IExpression _3258___mcc_h104 = _source140.dtor_right;
          bool _3259_isDatatype = _3107___mcc_h45;
          bool _3260_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3261_field = _3105___mcc_h43;
          DAST._IExpression _3262_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3263_onString;
            bool _3264_onOwned;
            bool _3265_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3266_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1577;
            bool _out1578;
            bool _out1579;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
            DCOMP.COMP.GenExpr(_3262_on, selfIdent, @params, false, out _out1577, out _out1578, out _out1579, out _out1580);
            _3263_onString = _out1577;
            _3264_onOwned = _out1578;
            _3265_onErased = _out1579;
            _3266_recIdents = _out1580;
            if ((_3259_isDatatype) || (_3260_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3263_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3261_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3260_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3263_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3261_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3266_recIdents;
          }
        } else if (_source140.is_ArrayLen) {
          DAST._IExpression _3267___mcc_h108 = _source140.dtor_expr;
          BigInteger _3268___mcc_h109 = _source140.dtor_dim;
          bool _3269_isDatatype = _3107___mcc_h45;
          bool _3270_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3271_field = _3105___mcc_h43;
          DAST._IExpression _3272_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3273_onString;
            bool _3274_onOwned;
            bool _3275_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3276_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1581;
            bool _out1582;
            bool _out1583;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1584;
            DCOMP.COMP.GenExpr(_3272_on, selfIdent, @params, false, out _out1581, out _out1582, out _out1583, out _out1584);
            _3273_onString = _out1581;
            _3274_onOwned = _out1582;
            _3275_onErased = _out1583;
            _3276_recIdents = _out1584;
            if ((_3269_isDatatype) || (_3270_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3273_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3271_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3270_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3273_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3271_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3276_recIdents;
          }
        } else if (_source140.is_Select) {
          DAST._IExpression _3277___mcc_h112 = _source140.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3278___mcc_h113 = _source140.dtor_field;
          bool _3279___mcc_h114 = _source140.dtor_isConstant;
          bool _3280___mcc_h115 = _source140.dtor_onDatatype;
          bool _3281_isDatatype = _3107___mcc_h45;
          bool _3282_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3283_field = _3105___mcc_h43;
          DAST._IExpression _3284_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3285_onString;
            bool _3286_onOwned;
            bool _3287_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3288_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1585;
            bool _out1586;
            bool _out1587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1588;
            DCOMP.COMP.GenExpr(_3284_on, selfIdent, @params, false, out _out1585, out _out1586, out _out1587, out _out1588);
            _3285_onString = _out1585;
            _3286_onOwned = _out1586;
            _3287_onErased = _out1587;
            _3288_recIdents = _out1588;
            if ((_3281_isDatatype) || (_3282_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3285_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3283_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3282_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3285_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3283_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3288_recIdents;
          }
        } else if (_source140.is_SelectFn) {
          DAST._IExpression _3289___mcc_h120 = _source140.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3290___mcc_h121 = _source140.dtor_field;
          bool _3291___mcc_h122 = _source140.dtor_onDatatype;
          bool _3292___mcc_h123 = _source140.dtor_isStatic;
          BigInteger _3293___mcc_h124 = _source140.dtor_arity;
          bool _3294_isDatatype = _3107___mcc_h45;
          bool _3295_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3296_field = _3105___mcc_h43;
          DAST._IExpression _3297_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3298_onString;
            bool _3299_onOwned;
            bool _3300_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3301_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1589;
            bool _out1590;
            bool _out1591;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1592;
            DCOMP.COMP.GenExpr(_3297_on, selfIdent, @params, false, out _out1589, out _out1590, out _out1591, out _out1592);
            _3298_onString = _out1589;
            _3299_onOwned = _out1590;
            _3300_onErased = _out1591;
            _3301_recIdents = _out1592;
            if ((_3294_isDatatype) || (_3295_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3298_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3296_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3295_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3298_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3296_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3301_recIdents;
          }
        } else if (_source140.is_Index) {
          DAST._IExpression _3302___mcc_h130 = _source140.dtor_expr;
          DAST._ICollKind _3303___mcc_h131 = _source140.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3304___mcc_h132 = _source140.dtor_indices;
          bool _3305_isDatatype = _3107___mcc_h45;
          bool _3306_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3307_field = _3105___mcc_h43;
          DAST._IExpression _3308_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3309_onString;
            bool _3310_onOwned;
            bool _3311_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3312_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1593;
            bool _out1594;
            bool _out1595;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1596;
            DCOMP.COMP.GenExpr(_3308_on, selfIdent, @params, false, out _out1593, out _out1594, out _out1595, out _out1596);
            _3309_onString = _out1593;
            _3310_onOwned = _out1594;
            _3311_onErased = _out1595;
            _3312_recIdents = _out1596;
            if ((_3305_isDatatype) || (_3306_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3309_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3307_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3306_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3309_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3307_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3312_recIdents;
          }
        } else if (_source140.is_IndexRange) {
          DAST._IExpression _3313___mcc_h136 = _source140.dtor_expr;
          bool _3314___mcc_h137 = _source140.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _3315___mcc_h138 = _source140.dtor_low;
          DAST._IOptional<DAST._IExpression> _3316___mcc_h139 = _source140.dtor_high;
          bool _3317_isDatatype = _3107___mcc_h45;
          bool _3318_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3319_field = _3105___mcc_h43;
          DAST._IExpression _3320_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3321_onString;
            bool _3322_onOwned;
            bool _3323_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3324_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1597;
            bool _out1598;
            bool _out1599;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
            DCOMP.COMP.GenExpr(_3320_on, selfIdent, @params, false, out _out1597, out _out1598, out _out1599, out _out1600);
            _3321_onString = _out1597;
            _3322_onOwned = _out1598;
            _3323_onErased = _out1599;
            _3324_recIdents = _out1600;
            if ((_3317_isDatatype) || (_3318_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3321_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3319_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3318_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3321_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3319_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3324_recIdents;
          }
        } else if (_source140.is_TupleSelect) {
          DAST._IExpression _3325___mcc_h144 = _source140.dtor_expr;
          BigInteger _3326___mcc_h145 = _source140.dtor_index;
          bool _3327_isDatatype = _3107___mcc_h45;
          bool _3328_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3329_field = _3105___mcc_h43;
          DAST._IExpression _3330_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3331_onString;
            bool _3332_onOwned;
            bool _3333_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3334_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1601;
            bool _out1602;
            bool _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            DCOMP.COMP.GenExpr(_3330_on, selfIdent, @params, false, out _out1601, out _out1602, out _out1603, out _out1604);
            _3331_onString = _out1601;
            _3332_onOwned = _out1602;
            _3333_onErased = _out1603;
            _3334_recIdents = _out1604;
            if ((_3327_isDatatype) || (_3328_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3331_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3329_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3328_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3331_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3329_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3334_recIdents;
          }
        } else if (_source140.is_Call) {
          DAST._IExpression _3335___mcc_h148 = _source140.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3336___mcc_h149 = _source140.dtor_name;
          Dafny.ISequence<DAST._IType> _3337___mcc_h150 = _source140.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3338___mcc_h151 = _source140.dtor_args;
          bool _3339_isDatatype = _3107___mcc_h45;
          bool _3340_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3341_field = _3105___mcc_h43;
          DAST._IExpression _3342_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3343_onString;
            bool _3344_onOwned;
            bool _3345_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3346_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1605;
            bool _out1606;
            bool _out1607;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
            DCOMP.COMP.GenExpr(_3342_on, selfIdent, @params, false, out _out1605, out _out1606, out _out1607, out _out1608);
            _3343_onString = _out1605;
            _3344_onOwned = _out1606;
            _3345_onErased = _out1607;
            _3346_recIdents = _out1608;
            if ((_3339_isDatatype) || (_3340_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3343_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3341_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3340_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3343_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3341_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3346_recIdents;
          }
        } else if (_source140.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3347___mcc_h156 = _source140.dtor_params;
          DAST._IType _3348___mcc_h157 = _source140.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3349___mcc_h158 = _source140.dtor_body;
          bool _3350_isDatatype = _3107___mcc_h45;
          bool _3351_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3352_field = _3105___mcc_h43;
          DAST._IExpression _3353_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3354_onString;
            bool _3355_onOwned;
            bool _3356_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3357_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1609;
            bool _out1610;
            bool _out1611;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
            DCOMP.COMP.GenExpr(_3353_on, selfIdent, @params, false, out _out1609, out _out1610, out _out1611, out _out1612);
            _3354_onString = _out1609;
            _3355_onOwned = _out1610;
            _3356_onErased = _out1611;
            _3357_recIdents = _out1612;
            if ((_3350_isDatatype) || (_3351_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3354_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3352_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3351_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3354_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3352_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3357_recIdents;
          }
        } else if (_source140.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3358___mcc_h162 = _source140.dtor_values;
          DAST._IType _3359___mcc_h163 = _source140.dtor_retType;
          DAST._IExpression _3360___mcc_h164 = _source140.dtor_expr;
          bool _3361_isDatatype = _3107___mcc_h45;
          bool _3362_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3363_field = _3105___mcc_h43;
          DAST._IExpression _3364_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3365_onString;
            bool _3366_onOwned;
            bool _3367_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3368_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1613;
            bool _out1614;
            bool _out1615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1616;
            DCOMP.COMP.GenExpr(_3364_on, selfIdent, @params, false, out _out1613, out _out1614, out _out1615, out _out1616);
            _3365_onString = _out1613;
            _3366_onOwned = _out1614;
            _3367_onErased = _out1615;
            _3368_recIdents = _out1616;
            if ((_3361_isDatatype) || (_3362_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3365_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3363_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3362_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3365_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3363_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3368_recIdents;
          }
        } else if (_source140.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3369___mcc_h168 = _source140.dtor_name;
          DAST._IType _3370___mcc_h169 = _source140.dtor_typ;
          DAST._IExpression _3371___mcc_h170 = _source140.dtor_value;
          DAST._IExpression _3372___mcc_h171 = _source140.dtor_iifeBody;
          bool _3373_isDatatype = _3107___mcc_h45;
          bool _3374_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3375_field = _3105___mcc_h43;
          DAST._IExpression _3376_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3377_onString;
            bool _3378_onOwned;
            bool _3379_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3380_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1617;
            bool _out1618;
            bool _out1619;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1620;
            DCOMP.COMP.GenExpr(_3376_on, selfIdent, @params, false, out _out1617, out _out1618, out _out1619, out _out1620);
            _3377_onString = _out1617;
            _3378_onOwned = _out1618;
            _3379_onErased = _out1619;
            _3380_recIdents = _out1620;
            if ((_3373_isDatatype) || (_3374_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3377_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3375_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3374_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3377_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3375_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3380_recIdents;
          }
        } else if (_source140.is_Apply) {
          DAST._IExpression _3381___mcc_h176 = _source140.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3382___mcc_h177 = _source140.dtor_args;
          bool _3383_isDatatype = _3107___mcc_h45;
          bool _3384_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3385_field = _3105___mcc_h43;
          DAST._IExpression _3386_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3387_onString;
            bool _3388_onOwned;
            bool _3389_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3390_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1621;
            bool _out1622;
            bool _out1623;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1624;
            DCOMP.COMP.GenExpr(_3386_on, selfIdent, @params, false, out _out1621, out _out1622, out _out1623, out _out1624);
            _3387_onString = _out1621;
            _3388_onOwned = _out1622;
            _3389_onErased = _out1623;
            _3390_recIdents = _out1624;
            if ((_3383_isDatatype) || (_3384_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3387_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3385_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3384_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3387_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3385_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3390_recIdents;
          }
        } else if (_source140.is_TypeTest) {
          DAST._IExpression _3391___mcc_h180 = _source140.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3392___mcc_h181 = _source140.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3393___mcc_h182 = _source140.dtor_variant;
          bool _3394_isDatatype = _3107___mcc_h45;
          bool _3395_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3396_field = _3105___mcc_h43;
          DAST._IExpression _3397_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3398_onString;
            bool _3399_onOwned;
            bool _3400_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3401_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1625;
            bool _out1626;
            bool _out1627;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
            DCOMP.COMP.GenExpr(_3397_on, selfIdent, @params, false, out _out1625, out _out1626, out _out1627, out _out1628);
            _3398_onString = _out1625;
            _3399_onOwned = _out1626;
            _3400_onErased = _out1627;
            _3401_recIdents = _out1628;
            if ((_3394_isDatatype) || (_3395_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3398_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3396_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3395_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3398_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3396_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3401_recIdents;
          }
        } else if (_source140.is_InitializationValue) {
          DAST._IType _3402___mcc_h186 = _source140.dtor_typ;
          bool _3403_isDatatype = _3107___mcc_h45;
          bool _3404_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3405_field = _3105___mcc_h43;
          DAST._IExpression _3406_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3407_onString;
            bool _3408_onOwned;
            bool _3409_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3410_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1629;
            bool _out1630;
            bool _out1631;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
            DCOMP.COMP.GenExpr(_3406_on, selfIdent, @params, false, out _out1629, out _out1630, out _out1631, out _out1632);
            _3407_onString = _out1629;
            _3408_onOwned = _out1630;
            _3409_onErased = _out1631;
            _3410_recIdents = _out1632;
            if ((_3403_isDatatype) || (_3404_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3407_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3405_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3404_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3407_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3405_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3410_recIdents;
          }
        } else if (_source140.is_BoolBoundedPool) {
          bool _3411_isDatatype = _3107___mcc_h45;
          bool _3412_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3413_field = _3105___mcc_h43;
          DAST._IExpression _3414_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3415_onString;
            bool _3416_onOwned;
            bool _3417_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3418_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1633;
            bool _out1634;
            bool _out1635;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
            DCOMP.COMP.GenExpr(_3414_on, selfIdent, @params, false, out _out1633, out _out1634, out _out1635, out _out1636);
            _3415_onString = _out1633;
            _3416_onOwned = _out1634;
            _3417_onErased = _out1635;
            _3418_recIdents = _out1636;
            if ((_3411_isDatatype) || (_3412_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3415_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3413_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3412_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3415_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3413_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3418_recIdents;
          }
        } else if (_source140.is_SetBoundedPool) {
          DAST._IExpression _3419___mcc_h188 = _source140.dtor_of;
          bool _3420_isDatatype = _3107___mcc_h45;
          bool _3421_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3422_field = _3105___mcc_h43;
          DAST._IExpression _3423_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3424_onString;
            bool _3425_onOwned;
            bool _3426_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3427_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1637;
            bool _out1638;
            bool _out1639;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1640;
            DCOMP.COMP.GenExpr(_3423_on, selfIdent, @params, false, out _out1637, out _out1638, out _out1639, out _out1640);
            _3424_onString = _out1637;
            _3425_onOwned = _out1638;
            _3426_onErased = _out1639;
            _3427_recIdents = _out1640;
            if ((_3420_isDatatype) || (_3421_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3424_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3422_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3421_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3424_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3422_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3427_recIdents;
          }
        } else if (_source140.is_SeqBoundedPool) {
          DAST._IExpression _3428___mcc_h190 = _source140.dtor_of;
          bool _3429___mcc_h191 = _source140.dtor_includeDuplicates;
          bool _3430_isDatatype = _3107___mcc_h45;
          bool _3431_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3432_field = _3105___mcc_h43;
          DAST._IExpression _3433_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3434_onString;
            bool _3435_onOwned;
            bool _3436_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3437_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1641;
            bool _out1642;
            bool _out1643;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
            DCOMP.COMP.GenExpr(_3433_on, selfIdent, @params, false, out _out1641, out _out1642, out _out1643, out _out1644);
            _3434_onString = _out1641;
            _3435_onOwned = _out1642;
            _3436_onErased = _out1643;
            _3437_recIdents = _out1644;
            if ((_3430_isDatatype) || (_3431_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3434_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3432_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3431_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3434_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3432_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3437_recIdents;
          }
        } else {
          DAST._IExpression _3438___mcc_h194 = _source140.dtor_lo;
          DAST._IExpression _3439___mcc_h195 = _source140.dtor_hi;
          bool _3440_isDatatype = _3107___mcc_h45;
          bool _3441_isConstant = _3106___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3442_field = _3105___mcc_h43;
          DAST._IExpression _3443_on = _3104___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3444_onString;
            bool _3445_onOwned;
            bool _3446_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3447_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1645;
            bool _out1646;
            bool _out1647;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1648;
            DCOMP.COMP.GenExpr(_3443_on, selfIdent, @params, false, out _out1645, out _out1646, out _out1647, out _out1648);
            _3444_onString = _out1645;
            _3445_onOwned = _out1646;
            _3446_onErased = _out1647;
            _3447_recIdents = _out1648;
            if ((_3440_isDatatype) || (_3441_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3444_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3442_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3441_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3444_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3442_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3447_recIdents;
          }
        }
      } else if (_source80.is_SelectFn) {
        DAST._IExpression _3448___mcc_h198 = _source80.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3449___mcc_h199 = _source80.dtor_field;
        bool _3450___mcc_h200 = _source80.dtor_onDatatype;
        bool _3451___mcc_h201 = _source80.dtor_isStatic;
        BigInteger _3452___mcc_h202 = _source80.dtor_arity;
        BigInteger _3453_arity = _3452___mcc_h202;
        bool _3454_isStatic = _3451___mcc_h201;
        bool _3455_isDatatype = _3450___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3456_field = _3449___mcc_h199;
        DAST._IExpression _3457_on = _3448___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3458_onString;
          bool _3459_onOwned;
          bool _3460___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3461_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1649;
          bool _out1650;
          bool _out1651;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1652;
          DCOMP.COMP.GenExpr(_3457_on, selfIdent, @params, false, out _out1649, out _out1650, out _out1651, out _out1652);
          _3458_onString = _out1649;
          _3459_onOwned = _out1650;
          _3460___v82 = _out1651;
          _3461_recIdents = _out1652;
          if (_3454_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3458_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3456_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3458_onString), ((_3459_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3462_args;
            _3462_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3463_i;
            _3463_i = BigInteger.Zero;
            while ((_3463_i) < (_3453_arity)) {
              if ((_3463_i).Sign == 1) {
                _3462_args = Dafny.Sequence<Dafny.Rune>.Concat(_3462_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3462_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3462_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_3463_i));
              _3463_i = (_3463_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3462_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3456_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3462_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3464_typeShape;
          _3464_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3465_i;
          _3465_i = BigInteger.Zero;
          while ((_3465_i) < (_3453_arity)) {
            if ((_3465_i).Sign == 1) {
              _3464_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3464_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3464_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3464_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3465_i = (_3465_i) + (BigInteger.One);
          }
          _3464_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3464_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3464_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3461_recIdents;
        }
      } else if (_source80.is_Index) {
        DAST._IExpression _3466___mcc_h203 = _source80.dtor_expr;
        DAST._ICollKind _3467___mcc_h204 = _source80.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3468___mcc_h205 = _source80.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3469_indices = _3468___mcc_h205;
        DAST._ICollKind _3470_collKind = _3467___mcc_h204;
        DAST._IExpression _3471_on = _3466___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3472_onString;
          bool _3473_onOwned;
          bool _3474_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3475_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1653;
          bool _out1654;
          bool _out1655;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1656;
          DCOMP.COMP.GenExpr(_3471_on, selfIdent, @params, false, out _out1653, out _out1654, out _out1655, out _out1656);
          _3472_onString = _out1653;
          _3473_onOwned = _out1654;
          _3474_onErased = _out1655;
          _3475_recIdents = _out1656;
          readIdents = _3475_recIdents;
          s = _3472_onString;
          BigInteger _3476_i;
          _3476_i = BigInteger.Zero;
          while ((_3476_i) < (new BigInteger((_3469_indices).Count))) {
            if (object.Equals(_3470_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3470_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3477_idx;
              bool _3478_idxOwned;
              bool _3479_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3480_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1657;
              bool _out1658;
              bool _out1659;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1660;
              DCOMP.COMP.GenExpr((_3469_indices).Select(_3476_i), selfIdent, @params, false, out _out1657, out _out1658, out _out1659, out _out1660);
              _3477_idx = _out1657;
              _3478_idxOwned = _out1658;
              _3479_idxErased = _out1659;
              _3480_recIdentsIdx = _out1660;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3478_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3477_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3480_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3481_idx;
              bool _3482___v83;
              bool _3483_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3484_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1661;
              bool _out1662;
              bool _out1663;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1664;
              DCOMP.COMP.GenExpr((_3469_indices).Select(_3476_i), selfIdent, @params, true, out _out1661, out _out1662, out _out1663, out _out1664);
              _3481_idx = _out1661;
              _3482___v83 = _out1662;
              _3483_idxErased = _out1663;
              _3484_recIdentsIdx = _out1664;
              if (!(_3483_idxErased)) {
                _3481_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3481_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3481_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3484_recIdentsIdx);
            }
            _3476_i = (_3476_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3474_onErased;
        }
      } else if (_source80.is_IndexRange) {
        DAST._IExpression _3485___mcc_h206 = _source80.dtor_expr;
        bool _3486___mcc_h207 = _source80.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _3487___mcc_h208 = _source80.dtor_low;
        DAST._IOptional<DAST._IExpression> _3488___mcc_h209 = _source80.dtor_high;
        DAST._IOptional<DAST._IExpression> _3489_high = _3488___mcc_h209;
        DAST._IOptional<DAST._IExpression> _3490_low = _3487___mcc_h208;
        bool _3491_isArray = _3486___mcc_h207;
        DAST._IExpression _3492_on = _3485___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3493_onString;
          bool _3494_onOwned;
          bool _3495_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3496_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1665;
          bool _out1666;
          bool _out1667;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
          DCOMP.COMP.GenExpr(_3492_on, selfIdent, @params, false, out _out1665, out _out1666, out _out1667, out _out1668);
          _3493_onString = _out1665;
          _3494_onOwned = _out1666;
          _3495_onErased = _out1667;
          _3496_recIdents = _out1668;
          readIdents = _3496_recIdents;
          s = _3493_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3497_lowString;
          _3497_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source141 = _3490_low;
          if (_source141.is_Some) {
            DAST._IExpression _3498___mcc_h1195 = _source141.dtor_Some_a0;
            DAST._IExpression _3499_l = _3498___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3500_lString;
              bool _3501___v84;
              bool _3502_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3503_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1669;
              bool _out1670;
              bool _out1671;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1672;
              DCOMP.COMP.GenExpr(_3499_l, selfIdent, @params, true, out _out1669, out _out1670, out _out1671, out _out1672);
              _3500_lString = _out1669;
              _3501___v84 = _out1670;
              _3502_lErased = _out1671;
              _3503_recIdentsL = _out1672;
              if (!(_3502_lErased)) {
                _3500_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3500_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3497_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3500_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3503_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3504_highString;
          _3504_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source142 = _3489_high;
          if (_source142.is_Some) {
            DAST._IExpression _3505___mcc_h1196 = _source142.dtor_Some_a0;
            DAST._IExpression _3506_h = _3505___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3507_hString;
              bool _3508___v85;
              bool _3509_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3510_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1673;
              bool _out1674;
              bool _out1675;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1676;
              DCOMP.COMP.GenExpr(_3506_h, selfIdent, @params, true, out _out1673, out _out1674, out _out1675, out _out1676);
              _3507_hString = _out1673;
              _3508___v85 = _out1674;
              _3509_hErased = _out1675;
              _3510_recIdentsH = _out1676;
              if (!(_3509_hErased)) {
                _3507_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3507_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3504_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3507_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3510_recIdentsH);
            }
          } else {
          }
          if (_3491_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source143) => {
            if (_source143.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3511___mcc_h1197 = _source143.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3512_l = _3511___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3512_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3497_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source144) => {
            if (_source144.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3513___mcc_h1198 = _source144.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3514_h = _3513___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3514_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3504_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3495_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source80.is_TupleSelect) {
        DAST._IExpression _3515___mcc_h210 = _source80.dtor_expr;
        BigInteger _3516___mcc_h211 = _source80.dtor_index;
        BigInteger _3517_idx = _3516___mcc_h211;
        DAST._IExpression _3518_on = _3515___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3519_onString;
          bool _3520___v86;
          bool _3521_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3522_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1677;
          bool _out1678;
          bool _out1679;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1680;
          DCOMP.COMP.GenExpr(_3518_on, selfIdent, @params, false, out _out1677, out _out1678, out _out1679, out _out1680);
          _3519_onString = _out1677;
          _3520___v86 = _out1678;
          _3521_tupErased = _out1679;
          _3522_recIdents = _out1680;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3519_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_3517_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3521_tupErased;
          readIdents = _3522_recIdents;
        }
      } else if (_source80.is_Call) {
        DAST._IExpression _3523___mcc_h212 = _source80.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3524___mcc_h213 = _source80.dtor_name;
        Dafny.ISequence<DAST._IType> _3525___mcc_h214 = _source80.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3526___mcc_h215 = _source80.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3527_args = _3526___mcc_h215;
        Dafny.ISequence<DAST._IType> _3528_typeArgs = _3525___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3529_name = _3524___mcc_h213;
        DAST._IExpression _3530_on = _3523___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3531_typeArgString;
          _3531_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3528_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3532_typeI;
            _3532_typeI = BigInteger.Zero;
            _3531_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3532_typeI) < (new BigInteger((_3528_typeArgs).Count))) {
              if ((_3532_typeI).Sign == 1) {
                _3531_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3531_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3533_typeString;
              Dafny.ISequence<Dafny.Rune> _out1681;
              _out1681 = DCOMP.COMP.GenType((_3528_typeArgs).Select(_3532_typeI), false, false);
              _3533_typeString = _out1681;
              _3531_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3531_typeArgString, _3533_typeString);
              _3532_typeI = (_3532_typeI) + (BigInteger.One);
            }
            _3531_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3531_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3534_argString;
          _3534_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3535_i;
          _3535_i = BigInteger.Zero;
          while ((_3535_i) < (new BigInteger((_3527_args).Count))) {
            if ((_3535_i).Sign == 1) {
              _3534_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3534_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3536_argExpr;
            bool _3537_isOwned;
            bool _3538_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3539_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1682;
            bool _out1683;
            bool _out1684;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1685;
            DCOMP.COMP.GenExpr((_3527_args).Select(_3535_i), selfIdent, @params, false, out _out1682, out _out1683, out _out1684, out _out1685);
            _3536_argExpr = _out1682;
            _3537_isOwned = _out1683;
            _3538_argErased = _out1684;
            _3539_argIdents = _out1685;
            if (_3537_isOwned) {
              _3536_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3536_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3538_argErased)) {
              _3536_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3536_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3536_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3536_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3534_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3534_argString, _3536_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3539_argIdents);
            _3535_i = (_3535_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3540_enclosingString;
          bool _3541___v87;
          bool _3542___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3543_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1686;
          bool _out1687;
          bool _out1688;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1689;
          DCOMP.COMP.GenExpr(_3530_on, selfIdent, @params, false, out _out1686, out _out1687, out _out1688, out _out1689);
          _3540_enclosingString = _out1686;
          _3541___v87 = _out1687;
          _3542___v88 = _out1688;
          _3543_recIdents = _out1689;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3543_recIdents);
          DAST._IExpression _source145 = _3530_on;
          if (_source145.is_Literal) {
            DAST._ILiteral _3544___mcc_h1199 = _source145.dtor_Literal_a0;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3545___mcc_h1201 = _source145.dtor_Ident_a0;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3546___mcc_h1203 = _source145.dtor_Companion_a0;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3540_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3547___mcc_h1205 = _source145.dtor_Tuple_a0;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3548___mcc_h1207 = _source145.dtor_path;
            Dafny.ISequence<DAST._IType> _3549___mcc_h1208 = _source145.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3550___mcc_h1209 = _source145.dtor_args;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3551___mcc_h1213 = _source145.dtor_dims;
            DAST._IType _3552___mcc_h1214 = _source145.dtor_typ;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3553___mcc_h1217 = _source145.dtor_path;
            Dafny.ISequence<DAST._IType> _3554___mcc_h1218 = _source145.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3555___mcc_h1219 = _source145.dtor_variant;
            bool _3556___mcc_h1220 = _source145.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3557___mcc_h1221 = _source145.dtor_contents;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Convert) {
            DAST._IExpression _3558___mcc_h1227 = _source145.dtor_value;
            DAST._IType _3559___mcc_h1228 = _source145.dtor_from;
            DAST._IType _3560___mcc_h1229 = _source145.dtor_typ;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_SeqConstruct) {
            DAST._IExpression _3561___mcc_h1233 = _source145.dtor_length;
            DAST._IExpression _3562___mcc_h1234 = _source145.dtor_elem;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3563___mcc_h1237 = _source145.dtor_elements;
            DAST._IType _3564___mcc_h1238 = _source145.dtor_typ;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3565___mcc_h1241 = _source145.dtor_elements;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3566___mcc_h1243 = _source145.dtor_mapElems;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_This) {
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Ite) {
            DAST._IExpression _3567___mcc_h1245 = _source145.dtor_cond;
            DAST._IExpression _3568___mcc_h1246 = _source145.dtor_thn;
            DAST._IExpression _3569___mcc_h1247 = _source145.dtor_els;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_UnOp) {
            DAST._IUnaryOp _3570___mcc_h1251 = _source145.dtor_unOp;
            DAST._IExpression _3571___mcc_h1252 = _source145.dtor_expr;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_BinOp) {
            DAST._IBinOp _3572___mcc_h1255 = _source145.dtor_op;
            DAST._IExpression _3573___mcc_h1256 = _source145.dtor_left;
            DAST._IExpression _3574___mcc_h1257 = _source145.dtor_right;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_ArrayLen) {
            DAST._IExpression _3575___mcc_h1261 = _source145.dtor_expr;
            BigInteger _3576___mcc_h1262 = _source145.dtor_dim;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Select) {
            DAST._IExpression _3577___mcc_h1265 = _source145.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3578___mcc_h1266 = _source145.dtor_field;
            bool _3579___mcc_h1267 = _source145.dtor_isConstant;
            bool _3580___mcc_h1268 = _source145.dtor_onDatatype;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_SelectFn) {
            DAST._IExpression _3581___mcc_h1273 = _source145.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3582___mcc_h1274 = _source145.dtor_field;
            bool _3583___mcc_h1275 = _source145.dtor_onDatatype;
            bool _3584___mcc_h1276 = _source145.dtor_isStatic;
            BigInteger _3585___mcc_h1277 = _source145.dtor_arity;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Index) {
            DAST._IExpression _3586___mcc_h1283 = _source145.dtor_expr;
            DAST._ICollKind _3587___mcc_h1284 = _source145.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3588___mcc_h1285 = _source145.dtor_indices;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_IndexRange) {
            DAST._IExpression _3589___mcc_h1289 = _source145.dtor_expr;
            bool _3590___mcc_h1290 = _source145.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3591___mcc_h1291 = _source145.dtor_low;
            DAST._IOptional<DAST._IExpression> _3592___mcc_h1292 = _source145.dtor_high;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_TupleSelect) {
            DAST._IExpression _3593___mcc_h1297 = _source145.dtor_expr;
            BigInteger _3594___mcc_h1298 = _source145.dtor_index;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Call) {
            DAST._IExpression _3595___mcc_h1301 = _source145.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3596___mcc_h1302 = _source145.dtor_name;
            Dafny.ISequence<DAST._IType> _3597___mcc_h1303 = _source145.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3598___mcc_h1304 = _source145.dtor_args;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3599___mcc_h1309 = _source145.dtor_params;
            DAST._IType _3600___mcc_h1310 = _source145.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3601___mcc_h1311 = _source145.dtor_body;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3602___mcc_h1315 = _source145.dtor_values;
            DAST._IType _3603___mcc_h1316 = _source145.dtor_retType;
            DAST._IExpression _3604___mcc_h1317 = _source145.dtor_expr;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3605___mcc_h1321 = _source145.dtor_name;
            DAST._IType _3606___mcc_h1322 = _source145.dtor_typ;
            DAST._IExpression _3607___mcc_h1323 = _source145.dtor_value;
            DAST._IExpression _3608___mcc_h1324 = _source145.dtor_iifeBody;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_Apply) {
            DAST._IExpression _3609___mcc_h1329 = _source145.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3610___mcc_h1330 = _source145.dtor_args;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_TypeTest) {
            DAST._IExpression _3611___mcc_h1333 = _source145.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3612___mcc_h1334 = _source145.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3613___mcc_h1335 = _source145.dtor_variant;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_InitializationValue) {
            DAST._IType _3614___mcc_h1339 = _source145.dtor_typ;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_BoolBoundedPool) {
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_SetBoundedPool) {
            DAST._IExpression _3615___mcc_h1341 = _source145.dtor_of;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else if (_source145.is_SeqBoundedPool) {
            DAST._IExpression _3616___mcc_h1343 = _source145.dtor_of;
            bool _3617___mcc_h1344 = _source145.dtor_includeDuplicates;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          } else {
            DAST._IExpression _3618___mcc_h1347 = _source145.dtor_lo;
            DAST._IExpression _3619___mcc_h1348 = _source145.dtor_hi;
            {
              _3540_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3540_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3529_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3540_enclosingString, _3531_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3534_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source80.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3620___mcc_h216 = _source80.dtor_params;
        DAST._IType _3621___mcc_h217 = _source80.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3622___mcc_h218 = _source80.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3623_body = _3622___mcc_h218;
        DAST._IType _3624_retType = _3621___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3625_params = _3620___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3626_paramNames;
          _3626_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3627_i;
          _3627_i = BigInteger.Zero;
          while ((_3627_i) < (new BigInteger((_3625_params).Count))) {
            _3626_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3626_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3625_params).Select(_3627_i)).dtor_name));
            _3627_i = (_3627_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3628_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3629_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1690;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1691;
          DCOMP.COMP.GenStmts(_3623_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3626_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1690, out _out1691);
          _3628_recursiveGen = _out1690;
          _3629_recIdents = _out1691;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3630_allReadCloned;
          _3630_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3629_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3631_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_3629_recIdents).Elements) {
              _3631_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_3629_recIdents).Contains(_3631_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3631_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3630_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3630_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3626_paramNames).Contains(_3631_next))) {
              _3630_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3630_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3631_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3631_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3631_next));
            }
            _3629_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3629_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3631_next));
          }
          Dafny.ISequence<Dafny.Rune> _3632_paramsString;
          _3632_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3633_paramTypes;
          _3633_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3627_i = BigInteger.Zero;
          while ((_3627_i) < (new BigInteger((_3625_params).Count))) {
            if ((_3627_i).Sign == 1) {
              _3632_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3632_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3633_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3633_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3634_typStr;
            Dafny.ISequence<Dafny.Rune> _out1692;
            _out1692 = DCOMP.COMP.GenType(((_3625_params).Select(_3627_i)).dtor_typ, false, true);
            _3634_typStr = _out1692;
            _3632_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3632_paramsString, ((_3625_params).Select(_3627_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3634_typStr);
            _3633_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3633_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3634_typStr);
            _3627_i = (_3627_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3635_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1693;
          _out1693 = DCOMP.COMP.GenType(_3624_retType, false, true);
          _3635_retTypeGen = _out1693;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3633_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3635_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3630_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3632_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3635_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3628_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source80.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3636___mcc_h219 = _source80.dtor_values;
        DAST._IType _3637___mcc_h220 = _source80.dtor_retType;
        DAST._IExpression _3638___mcc_h221 = _source80.dtor_expr;
        DAST._IExpression _3639_expr = _3638___mcc_h221;
        DAST._IType _3640_retType = _3637___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3641_values = _3636___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3642_paramNames;
          _3642_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3643_paramNamesSet;
          _3643_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3644_i;
          _3644_i = BigInteger.Zero;
          while ((_3644_i) < (new BigInteger((_3641_values).Count))) {
            _3642_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3642_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3641_values).Select(_3644_i)).dtor__0).dtor_name));
            _3643_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3643_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3641_values).Select(_3644_i)).dtor__0).dtor_name));
            _3644_i = (_3644_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3645_paramsString;
          _3645_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3644_i = BigInteger.Zero;
          while ((_3644_i) < (new BigInteger((_3641_values).Count))) {
            if ((_3644_i).Sign == 1) {
              _3645_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3645_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3646_typStr;
            Dafny.ISequence<Dafny.Rune> _out1694;
            _out1694 = DCOMP.COMP.GenType((((_3641_values).Select(_3644_i)).dtor__0).dtor_typ, false, true);
            _3646_typStr = _out1694;
            Dafny.ISequence<Dafny.Rune> _3647_valueGen;
            bool _3648___v91;
            bool _3649_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3650_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1695;
            bool _out1696;
            bool _out1697;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1698;
            DCOMP.COMP.GenExpr(((_3641_values).Select(_3644_i)).dtor__1, selfIdent, @params, true, out _out1695, out _out1696, out _out1697, out _out1698);
            _3647_valueGen = _out1695;
            _3648___v91 = _out1696;
            _3649_valueErased = _out1697;
            _3650_recIdents = _out1698;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3641_values).Select(_3644_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3646_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3650_recIdents);
            if (_3649_valueErased) {
              _3647_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3647_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3647_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3644_i = (_3644_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3651_recGen;
          bool _3652_recOwned;
          bool _3653_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3654_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1699;
          bool _out1700;
          bool _out1701;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1702;
          DCOMP.COMP.GenExpr(_3639_expr, selfIdent, _3642_paramNames, mustOwn, out _out1699, out _out1700, out _out1701, out _out1702);
          _3651_recGen = _out1699;
          _3652_recOwned = _out1700;
          _3653_recErased = _out1701;
          _3654_recIdents = _out1702;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3654_recIdents, _3643_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3651_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3652_recOwned;
          isErased = _3653_recErased;
        }
      } else if (_source80.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3655___mcc_h222 = _source80.dtor_name;
        DAST._IType _3656___mcc_h223 = _source80.dtor_typ;
        DAST._IExpression _3657___mcc_h224 = _source80.dtor_value;
        DAST._IExpression _3658___mcc_h225 = _source80.dtor_iifeBody;
        DAST._IExpression _3659_iifeBody = _3658___mcc_h225;
        DAST._IExpression _3660_value = _3657___mcc_h224;
        DAST._IType _3661_tpe = _3656___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3662_name = _3655___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3663_valueGen;
          bool _3664___v92;
          bool _3665_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3666_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1703;
          bool _out1704;
          bool _out1705;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1706;
          DCOMP.COMP.GenExpr(_3660_value, selfIdent, @params, true, out _out1703, out _out1704, out _out1705, out _out1706);
          _3663_valueGen = _out1703;
          _3664___v92 = _out1704;
          _3665_valueErased = _out1705;
          _3666_recIdents = _out1706;
          if (_3665_valueErased) {
            _3663_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3663_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3666_recIdents;
          Dafny.ISequence<Dafny.Rune> _3667_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1707;
          _out1707 = DCOMP.COMP.GenType(_3661_tpe, false, true);
          _3667_valueTypeGen = _out1707;
          Dafny.ISequence<Dafny.Rune> _3668_bodyGen;
          bool _3669___v93;
          bool _3670_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3671_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1708;
          bool _out1709;
          bool _out1710;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1711;
          DCOMP.COMP.GenExpr(_3659_iifeBody, selfIdent, @params, true, out _out1708, out _out1709, out _out1710, out _out1711);
          _3668_bodyGen = _out1708;
          _3669___v93 = _out1709;
          _3670_bodyErased = _out1710;
          _3671_bodyIdents = _out1711;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3671_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3662_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3662_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3667_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3663_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3668_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3670_bodyErased;
        }
      } else if (_source80.is_Apply) {
        DAST._IExpression _3672___mcc_h226 = _source80.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3673___mcc_h227 = _source80.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3674_args = _3673___mcc_h227;
        DAST._IExpression _3675_func = _3672___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3676_funcString;
          bool _3677___v94;
          bool _3678_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3679_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1712;
          bool _out1713;
          bool _out1714;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1715;
          DCOMP.COMP.GenExpr(_3675_func, selfIdent, @params, false, out _out1712, out _out1713, out _out1714, out _out1715);
          _3676_funcString = _out1712;
          _3677___v94 = _out1713;
          _3678_funcErased = _out1714;
          _3679_recIdents = _out1715;
          readIdents = _3679_recIdents;
          Dafny.ISequence<Dafny.Rune> _3680_argString;
          _3680_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3681_i;
          _3681_i = BigInteger.Zero;
          while ((_3681_i) < (new BigInteger((_3674_args).Count))) {
            if ((_3681_i).Sign == 1) {
              _3680_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3680_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3682_argExpr;
            bool _3683_isOwned;
            bool _3684_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3685_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1716;
            bool _out1717;
            bool _out1718;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1719;
            DCOMP.COMP.GenExpr((_3674_args).Select(_3681_i), selfIdent, @params, false, out _out1716, out _out1717, out _out1718, out _out1719);
            _3682_argExpr = _out1716;
            _3683_isOwned = _out1717;
            _3684_argErased = _out1718;
            _3685_argIdents = _out1719;
            if (_3683_isOwned) {
              _3682_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3682_argExpr);
            }
            _3680_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3680_argString, _3682_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3685_argIdents);
            _3681_i = (_3681_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3676_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3680_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source80.is_TypeTest) {
        DAST._IExpression _3686___mcc_h228 = _source80.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3687___mcc_h229 = _source80.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3688___mcc_h230 = _source80.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3689_variant = _3688___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3690_dType = _3687___mcc_h229;
        DAST._IExpression _3691_on = _3686___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3692_exprGen;
          bool _3693___v95;
          bool _3694_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3695_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1720;
          bool _out1721;
          bool _out1722;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1723;
          DCOMP.COMP.GenExpr(_3691_on, selfIdent, @params, false, out _out1720, out _out1721, out _out1722, out _out1723);
          _3692_exprGen = _out1720;
          _3693___v95 = _out1721;
          _3694_exprErased = _out1722;
          _3695_recIdents = _out1723;
          Dafny.ISequence<Dafny.Rune> _3696_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1724;
          _out1724 = DCOMP.COMP.GenPath(_3690_dType);
          _3696_dTypePath = _out1724;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3692_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3696_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3689_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3695_recIdents;
        }
      } else if (_source80.is_InitializationValue) {
        DAST._IType _3697___mcc_h231 = _source80.dtor_typ;
        DAST._IType _3698_typ = _3697___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3699_typString;
          Dafny.ISequence<Dafny.Rune> _out1725;
          _out1725 = DCOMP.COMP.GenType(_3698_typ, false, false);
          _3699_typString = _out1725;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3699_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source80.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source80.is_SetBoundedPool) {
        DAST._IExpression _3700___mcc_h232 = _source80.dtor_of;
        DAST._IExpression _3701_of = _3700___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3702_exprGen;
          bool _3703___v96;
          bool _3704_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3705_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1726;
          bool _out1727;
          bool _out1728;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1729;
          DCOMP.COMP.GenExpr(_3701_of, selfIdent, @params, false, out _out1726, out _out1727, out _out1728, out _out1729);
          _3702_exprGen = _out1726;
          _3703___v96 = _out1727;
          _3704_exprErased = _out1728;
          _3705_recIdents = _out1729;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3702_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3704_exprErased;
          readIdents = _3705_recIdents;
        }
      } else if (_source80.is_SeqBoundedPool) {
        DAST._IExpression _3706___mcc_h233 = _source80.dtor_of;
        bool _3707___mcc_h234 = _source80.dtor_includeDuplicates;
        bool _3708_includeDuplicates = _3707___mcc_h234;
        DAST._IExpression _3709_of = _3706___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3710_exprGen;
          bool _3711___v97;
          bool _3712_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3713_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1730;
          bool _out1731;
          bool _out1732;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1733;
          DCOMP.COMP.GenExpr(_3709_of, selfIdent, @params, false, out _out1730, out _out1731, out _out1732, out _out1733);
          _3710_exprGen = _out1730;
          _3711___v97 = _out1731;
          _3712_exprErased = _out1732;
          _3713_recIdents = _out1733;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3710_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3708_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3712_exprErased;
          readIdents = _3713_recIdents;
        }
      } else {
        DAST._IExpression _3714___mcc_h235 = _source80.dtor_lo;
        DAST._IExpression _3715___mcc_h236 = _source80.dtor_hi;
        DAST._IExpression _3716_hi = _3715___mcc_h236;
        DAST._IExpression _3717_lo = _3714___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3718_loString;
          bool _3719___v98;
          bool _3720_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3721_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1734;
          bool _out1735;
          bool _out1736;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1737;
          DCOMP.COMP.GenExpr(_3717_lo, selfIdent, @params, true, out _out1734, out _out1735, out _out1736, out _out1737);
          _3718_loString = _out1734;
          _3719___v98 = _out1735;
          _3720_loErased = _out1736;
          _3721_recIdentsLo = _out1737;
          Dafny.ISequence<Dafny.Rune> _3722_hiString;
          bool _3723___v99;
          bool _3724_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3725_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1738;
          bool _out1739;
          bool _out1740;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1741;
          DCOMP.COMP.GenExpr(_3716_hi, selfIdent, @params, true, out _out1738, out _out1739, out _out1740, out _out1741);
          _3722_hiString = _out1738;
          _3723___v99 = _out1739;
          _3724_hiErased = _out1740;
          _3725_recIdentsHi = _out1741;
          if (!(_3720_loErased)) {
            _3718_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3718_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3724_hiErased)) {
            _3722_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3722_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3718_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3722_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3721_recIdentsLo, _3725_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3726_i;
      _3726_i = BigInteger.Zero;
      while ((_3726_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3727_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1742;
        _out1742 = DCOMP.COMP.GenModule((p).Select(_3726_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3727_generated = _out1742;
        if ((_3726_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3727_generated);
        _3726_i = (_3726_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3728_i;
      _3728_i = BigInteger.Zero;
      while ((_3728_i) < (new BigInteger((fullName).Count))) {
        if ((_3728_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3728_i));
        _3728_i = (_3728_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

