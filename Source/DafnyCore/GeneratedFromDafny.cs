// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM.Utils {

  public partial class __default {
    public static DAM.Utils._IOption<__A> SeqGet<__A>(Dafny.ISequence<__A> s, BigInteger idx) {
      if ((idx) < (new BigInteger((s).Count))) {
        return DAM.Utils.Option<__A>.create_Some((s).Select(idx));
      } else {
        return DAM.Utils.Option<__A>.create_None();
      }
    }
    public static _System._ITuple2<BigInteger, Dafny.ISequence<__A>> Extend<__A>(Dafny.ISequence<__A> s, __A elt) {
      return _System.Tuple2<BigInteger, Dafny.ISequence<__A>>.create(new BigInteger((s).Count), Dafny.Sequence<__A>.Concat(s, Dafny.Sequence<__A>.FromElements(elt)));
    }
    public static DAM.Utils._IOption<__V> mapGet<__K, __V>(Dafny.IMap<__K, __V> m, __K k) {
      if ((m).Contains(k)) {
        return DAM.Utils.Option<__V>.create_Some(Dafny.Map<__K, __V>.Select(m, k));
      } else {
        return DAM.Utils.Option<__V>.create_None();
      }
    }
    public static DAM.Utils._IOption<Dafny.IMap<__K, __V>> mapOption<__K, __V>(Dafny.IMap<__K, DAM.Utils._IOption<__V>> m) {
      if (Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, bool>>((m) => Dafny.Helpers.Quantifier<__K>((m).Keys.Elements, true, (((_forall_var_0) => {
        __K k = (__K)_forall_var_0;
        return !((m).Contains(k)) || ((Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).is_Some);
      }))))(m)) {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_Some(Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, Dafny.IMap<__K, __V>>>((m) => ((System.Func<Dafny.IMap<__K, __V>>)(() => {
          var _coll0 = new System.Collections.Generic.List<Dafny.Pair<__K, __V>>();
          foreach (__K _compr_0 in (m).Keys.Elements) {
            __K k = (__K)_compr_0;
            if ((m).Contains(k)) {
              _coll0.Add(new Dafny.Pair<__K, __V>(k, (Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).Extract()));
            }
          }
          return Dafny.Map<__K, __V>.FromCollection(_coll0);
        }))())(m));
      } else {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_None();
      }
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM.Utils._IOption<__B> PropagateFailure<__B>();
    A Extract();
    A GetOr(A @default);
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM.Utils._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM.Utils._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM.Utils._IOption<A>>(DAM.Utils.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM.Utils._IOption<__B> PropagateFailure<__B>() {
      return DAM.Utils.Option<__B>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
    public A GetOr(A @default) {
      DAM.Utils._IOption<A> _source0 = this;
      if (_source0.is_None) {
        return @default;
      } else {
        A __mcc_h0 = _source0.dtor_value;
        A v = __mcc_h0;
        return v;
      }
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Utils
namespace DAM.Syntax {

  public partial class __default {
    public static DAM.Syntax._IStmt Let(DAM.Syntax._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IPos ty, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Call(DAM.Syntax.Stmt.create_Func(var__, ty, rhs), lhs);
    }
    public static DAM.Syntax._INeg Command() {
      return DAM.Syntax.Neg.create_Value(DAM.Syntax.Pos.create_Unit());
    }
    public static DAM.Syntax._IStmt Then(DAM.Syntax._IStmt lhs, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Bind(lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), rhs);
    }
    public static DAM.Syntax._IStmt Skip() {
      return DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Unit());
    }
    public static DAM.Syntax._IStmt While(DAM.Syntax._IStmt guard, DAM.Syntax._IStmt body, DAM.Syntax._IStmt next) {
      return DAM.Syntax.__default.Then(DAM.Syntax.Stmt.create_Rec(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), DAM.Syntax.__default.Command(), DAM.Syntax.Stmt.create_Bind(guard, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), DAM.Syntax.__default.Then(body, DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while")))), DAM.Syntax.__default.Skip()))), next);
    }
  }

  public interface _IPos {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_String { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    DAM.Syntax._INeg dtor_neg { get; }
    DAM.Syntax._IPos dtor_ref { get; }
    DAM.Syntax._INeg dtor_start { get; }
    _IPos DowncastClone();
  }
  public abstract class Pos : _IPos {
    public Pos() {
    }
    private static readonly DAM.Syntax._IPos theDefault = create_Unit();
    public static DAM.Syntax._IPos Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IPos> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IPos>(DAM.Syntax.Pos.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IPos> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPos create_Unit() {
      return new Pos_Unit();
    }
    public static _IPos create_Bool() {
      return new Pos_Bool();
    }
    public static _IPos create_Int() {
      return new Pos_Int();
    }
    public static _IPos create_String() {
      return new Pos_String();
    }
    public static _IPos create_Thunk(DAM.Syntax._INeg neg) {
      return new Pos_Thunk(neg);
    }
    public static _IPos create_Ref(DAM.Syntax._IPos @ref) {
      return new Pos_Ref(@ref);
    }
    public static _IPos create_Stack(DAM.Syntax._INeg start) {
      return new Pos_Stack(start);
    }
    public bool is_Unit { get { return this is Pos_Unit; } }
    public bool is_Bool { get { return this is Pos_Bool; } }
    public bool is_Int { get { return this is Pos_Int; } }
    public bool is_String { get { return this is Pos_String; } }
    public bool is_Thunk { get { return this is Pos_Thunk; } }
    public bool is_Ref { get { return this is Pos_Ref; } }
    public bool is_Stack { get { return this is Pos_Stack; } }
    public DAM.Syntax._INeg dtor_neg {
      get {
        var d = this;
        return ((Pos_Thunk)d)._neg;
      }
    }
    public DAM.Syntax._IPos dtor_ref {
      get {
        var d = this;
        return ((Pos_Ref)d)._ref;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Pos_Stack)d)._start;
      }
    }
    public abstract _IPos DowncastClone();
  }
  public class Pos_Unit : Pos {
    public Pos_Unit() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Unit";
      return s;
    }
  }
  public class Pos_Bool : Pos {
    public Pos_Bool() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Bool";
      return s;
    }
  }
  public class Pos_Int : Pos {
    public Pos_Int() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Int";
      return s;
    }
  }
  public class Pos_String : Pos {
    public Pos_String() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.String";
      return s;
    }
  }
  public class Pos_Thunk : Pos {
    public readonly DAM.Syntax._INeg _neg;
    public Pos_Thunk(DAM.Syntax._INeg neg) : base() {
      this._neg = neg;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Thunk(_neg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Thunk;
      return oth != null && object.Equals(this._neg, oth._neg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._neg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._neg);
      s += ")";
      return s;
    }
  }
  public class Pos_Ref : Pos {
    public readonly DAM.Syntax._IPos _ref;
    public Pos_Ref(DAM.Syntax._IPos @ref) : base() {
      this._ref = @ref;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Ref(_ref);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Ref;
      return oth != null && object.Equals(this._ref, oth._ref);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ")";
      return s;
    }
  }
  public class Pos_Stack : Pos {
    public readonly DAM.Syntax._INeg _start;
    public Pos_Stack(DAM.Syntax._INeg start) : base() {
      this._start = start;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Stack(_start);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Stack;
      return oth != null && object.Equals(this._start, oth._start);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ")";
      return s;
    }
  }

  public interface _INeg {
    bool is_Value { get; }
    bool is_Function { get; }
    bool is_Record { get; }
    DAM.Syntax._IPos dtor_pos { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._INeg dtor_cod { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields { get; }
    _INeg DowncastClone();
  }
  public abstract class Neg : _INeg {
    public Neg() {
    }
    private static readonly DAM.Syntax._INeg theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>.Empty);
    public static DAM.Syntax._INeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._INeg> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._INeg>(DAM.Syntax.Neg.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._INeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INeg create_Value(DAM.Syntax._IPos pos) {
      return new Neg_Value(pos);
    }
    public static _INeg create_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) {
      return new Neg_Function(dom, cod);
    }
    public static _INeg create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) {
      return new Neg_Record(fields);
    }
    public bool is_Value { get { return this is Neg_Value; } }
    public bool is_Function { get { return this is Neg_Function; } }
    public bool is_Record { get { return this is Neg_Record; } }
    public DAM.Syntax._IPos dtor_pos {
      get {
        var d = this;
        return ((Neg_Value)d)._pos;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Neg_Function)d)._dom;
      }
    }
    public DAM.Syntax._INeg dtor_cod {
      get {
        var d = this;
        return ((Neg_Function)d)._cod;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields {
      get {
        var d = this;
        return ((Neg_Record)d)._fields;
      }
    }
    public abstract _INeg DowncastClone();
  }
  public class Neg_Value : Neg {
    public readonly DAM.Syntax._IPos _pos;
    public Neg_Value(DAM.Syntax._IPos pos) : base() {
      this._pos = pos;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Value(_pos);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Value;
      return oth != null && object.Equals(this._pos, oth._pos);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pos));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._pos);
      s += ")";
      return s;
    }
  }
  public class Neg_Function : Neg {
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._INeg _cod;
    public Neg_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) : base() {
      this._dom = dom;
      this._cod = cod;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Function(_dom, _cod);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Function;
      return oth != null && object.Equals(this._dom, oth._dom) && object.Equals(this._cod, oth._cod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Function";
      s += "(";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cod);
      s += ")";
      return s;
    }
  }
  public class Neg_Record : Neg {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _fields;
    public Neg_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) : base() {
      this._fields = fields;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_String { get; }
    bool is_LT { get; }
    bool is_Plus { get; }
    bool is_Thunk { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_String_a0 { get; }
    DAM.Syntax._IExpr dtor_LT_a0 { get; }
    DAM.Syntax._IExpr dtor_LT_a1 { get; }
    DAM.Syntax._IExpr dtor_Plus_a0 { get; }
    DAM.Syntax._IExpr dtor_Plus_a1 { get; }
    DAM.Syntax._IStmt dtor_Thunk_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM.Syntax._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM.Syntax._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IExpr>(DAM.Syntax.Expr.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Unit() {
      return new Expr_Unit();
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_String(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_String(_a0);
    }
    public static _IExpr create_LT(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) {
      return new Expr_LT(_a0, _a1);
    }
    public static _IExpr create_Plus(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) {
      return new Expr_Plus(_a0, _a1);
    }
    public static _IExpr create_Thunk(DAM.Syntax._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Unit { get { return this is Expr_Unit; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_String { get { return this is Expr_String; } }
    public bool is_LT { get { return this is Expr_LT; } }
    public bool is_Plus { get { return this is Expr_Plus; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_String_a0 {
      get {
        var d = this;
        return ((Expr_String)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_LT_a0 {
      get {
        var d = this;
        return ((Expr_LT)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_LT_a1 {
      get {
        var d = this;
        return ((Expr_LT)d)._a1;
      }
    }
    public DAM.Syntax._IExpr dtor_Plus_a0 {
      get {
        var d = this;
        return ((Expr_Plus)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_Plus_a1 {
      get {
        var d = this;
        return ((Expr_Plus)d)._a1;
      }
    }
    public DAM.Syntax._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Unit : Expr {
    public Expr_Unit() : base() {
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Unit";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_String : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_String(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_String(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_String;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.String";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_LT : Expr {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IExpr _a1;
    public Expr_LT(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LT(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_LT;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.LT";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Expr_Plus : Expr {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IExpr _a1;
    public Expr_Plus(DAM.Syntax._IExpr _a0, DAM.Syntax._IExpr _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Plus(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Plus;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Plus";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM.Syntax._IStmt _a0;
    public Expr_Thunk(DAM.Syntax._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Record { get; }
    bool is_Select { get; }
    bool is_Force { get; }
    bool is_New { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    bool is_Print { get; }
    bool is_Rec { get; }
    bool is_LetCS { get; }
    bool is_Throw { get; }
    DAM.Syntax._IExpr dtor_Pure_a0 { get; }
    DAM.Syntax._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM.Syntax._IStmt dtor_rhs { get; }
    DAM.Syntax._IExpr dtor_guard { get; }
    DAM.Syntax._IStmt dtor_then__ { get; }
    DAM.Syntax._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._IStmt dtor_body { get; }
    DAM.Syntax._IStmt dtor_func { get; }
    DAM.Syntax._IExpr dtor_arg { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields { get; }
    DAM.Syntax._IStmt dtor_record { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    DAM.Syntax._IExpr dtor_Force_a0 { get; }
    DAM.Syntax._IExpr dtor_init { get; }
    DAM.Syntax._IStmt dtor_next { get; }
    DAM.Syntax._IExpr dtor_ref { get; }
    DAM.Syntax._IExpr dtor_lvalue { get; }
    DAM.Syntax._IExpr dtor_rvalue { get; }
    DAM.Syntax._IExpr dtor_Print_a0 { get; }
    DAM.Syntax._INeg dtor_fix { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Syntax._IExpr dtor_stack { get; }
    DAM.Syntax._INeg dtor_oldstart { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM.Syntax._IStmt theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Empty);
    public static DAM.Syntax._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IStmt>(DAM.Syntax.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM.Syntax._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) {
      return new Stmt_Func(bound, dom, body);
    }
    public static _IStmt create_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) {
      return new Stmt_Record(fields);
    }
    public static _IStmt create_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) {
      return new Stmt_Select(record, field);
    }
    public static _IStmt create_Force(DAM.Syntax._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_New(init, var__, next);
    }
    public static _IStmt create_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_Read(@ref, var__, next);
    }
    public static _IStmt create_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) {
      return new Stmt_Write(lvalue, rvalue, next);
    }
    public static _IStmt create_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) {
      return new Stmt_Print(_a0, next);
    }
    public static _IStmt create_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) {
      return new Stmt_Rec(bound, fix, body);
    }
    public static _IStmt create_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) {
      return new Stmt_LetCS(bound, start, body);
    }
    public static _IStmt create_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) {
      return new Stmt_Throw(stack, oldstart, next);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Record { get { return this is Stmt_Record; } }
    public bool is_Select { get { return this is Stmt_Select; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_New { get { return this is Stmt_New; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public bool is_Print { get { return this is Stmt_Print; } }
    public bool is_Rec { get { return this is Stmt_Rec; } }
    public bool is_LetCS { get { return this is Stmt_LetCS; } }
    public bool is_Throw { get { return this is Stmt_Throw; } }
    public DAM.Syntax._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        if (d is Stmt_New) { return ((Stmt_New)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM.Syntax._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM.Syntax._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM.Syntax._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM.Syntax._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._bound; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._bound; }
        return ((Stmt_LetCS)d)._bound;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Stmt_Func)d)._dom;
      }
    }
    public DAM.Syntax._IStmt dtor_body {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._body; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._body; }
        return ((Stmt_LetCS)d)._body;
      }
    }
    public DAM.Syntax._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM.Syntax._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields {
      get {
        var d = this;
        return ((Stmt_Record)d)._fields;
      }
    }
    public DAM.Syntax._IStmt dtor_record {
      get {
        var d = this;
        return ((Stmt_Select)d)._record;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Stmt_Select)d)._field;
      }
    }
    public DAM.Syntax._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_init {
      get {
        var d = this;
        return ((Stmt_New)d)._init;
      }
    }
    public DAM.Syntax._IStmt dtor_next {
      get {
        var d = this;
        if (d is Stmt_New) { return ((Stmt_New)d)._next; }
        if (d is Stmt_Read) { return ((Stmt_Read)d)._next; }
        if (d is Stmt_Write) { return ((Stmt_Write)d)._next; }
        if (d is Stmt_Print) { return ((Stmt_Print)d)._next; }
        return ((Stmt_Throw)d)._next;
      }
    }
    public DAM.Syntax._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM.Syntax._IExpr dtor_lvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._lvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_rvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._rvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_Print_a0 {
      get {
        var d = this;
        return ((Stmt_Print)d)._a0;
      }
    }
    public DAM.Syntax._INeg dtor_fix {
      get {
        var d = this;
        return ((Stmt_Rec)d)._fix;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Stmt_LetCS)d)._start;
      }
    }
    public DAM.Syntax._IExpr dtor_stack {
      get {
        var d = this;
        return ((Stmt_Throw)d)._stack;
      }
    }
    public DAM.Syntax._INeg dtor_oldstart {
      get {
        var d = this;
        return ((Stmt_Throw)d)._oldstart;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Pure(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM.Syntax._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _rhs;
    public Stmt_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM.Syntax._IExpr _guard;
    public readonly DAM.Syntax._IStmt _then__;
    public readonly DAM.Syntax._IStmt _else__;
    public Stmt_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._dom = dom;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _dom, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._dom, oth._dom) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM.Syntax._IStmt _func;
    public readonly DAM.Syntax._IExpr _arg;
    public Stmt_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Record : Stmt {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _fields;
    public Stmt_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) : base() {
      this._fields = fields;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Stmt_Select : Stmt {
    public readonly DAM.Syntax._IStmt _record;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Stmt_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._record = record;
      this._field = field;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Select(_record, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Select;
      return oth != null && object.Equals(this._record, oth._record) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._record));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._record);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Force(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_New : Stmt {
    public readonly DAM.Syntax._IExpr _init;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._init = init;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_New(_init, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_New;
      return oth != null && object.Equals(this._init, oth._init) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._init));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._init);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM.Syntax._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM.Syntax._IExpr _lvalue;
    public readonly DAM.Syntax._IExpr _rvalue;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) : base() {
      this._lvalue = lvalue;
      this._rvalue = rvalue;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_lvalue, _rvalue, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Write;
      return oth != null && object.Equals(this._lvalue, oth._lvalue) && object.Equals(this._rvalue, oth._rvalue) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._lvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Print : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) : base() {
      this._a0 = _a0;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Print(_a0, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Print;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Rec : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _fix;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._fix = fix;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Rec(_bound, _fix, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Rec;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._fix, oth._fix) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fix));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Rec";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fix);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_LetCS : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._start = start;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_LetCS(_bound, _start, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_LetCS;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._start, oth._start) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.LetCS";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Throw : Stmt {
    public readonly DAM.Syntax._IExpr _stack;
    public readonly DAM.Syntax._INeg _oldstart;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) : base() {
      this._stack = stack;
      this._oldstart = oldstart;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Throw(_stack, _oldstart, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Throw;
      return oth != null && object.Equals(this._stack, oth._stack) && object.Equals(this._oldstart, oth._oldstart) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._oldstart));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Throw";
      s += "(";
      s += Dafny.Helpers.ToString(this._stack);
      s += ", ";
      s += Dafny.Helpers.ToString(this._oldstart);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Syntax
namespace DAM.Machine {

  public partial class __default {
    public static DAM.Machine._IOutput Next(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Silent(), next);
    }
  }

  public interface _IVal {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_String { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    bool dtor_answer { get; }
    BigInteger dtor_number { get; }
    Dafny.ISequence<Dafny.Rune> dtor_str { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure { get; }
    BigInteger dtor_addr { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Machine._IStack dtor_stack { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM.Machine._IVal theDefault = create_Unit();
    public static DAM.Machine._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IVal> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IVal>(DAM.Machine.Val.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Unit() {
      return new Val_Unit();
    }
    public static _IVal create_Bool(bool answer) {
      return new Val_Bool(answer);
    }
    public static _IVal create_Int(BigInteger number) {
      return new Val_Int(number);
    }
    public static _IVal create_String(Dafny.ISequence<Dafny.Rune> str) {
      return new Val_String(str);
    }
    public static _IVal create_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) {
      return new Val_Thunk(closure);
    }
    public static _IVal create_Ref(BigInteger addr) {
      return new Val_Ref(addr);
    }
    public static _IVal create_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
      return new Val_Stack(start, stack);
    }
    public bool is_Unit { get { return this is Val_Unit; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_String { get { return this is Val_String; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool is_Stack { get { return this is Val_Stack; } }
    public bool dtor_answer {
      get {
        var d = this;
        return ((Val_Bool)d)._answer;
      }
    }
    public BigInteger dtor_number {
      get {
        var d = this;
        return ((Val_Int)d)._number;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_str {
      get {
        var d = this;
        return ((Val_String)d)._str;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure {
      get {
        var d = this;
        return ((Val_Thunk)d)._closure;
      }
    }
    public BigInteger dtor_addr {
      get {
        var d = this;
        return ((Val_Ref)d)._addr;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Val_Stack)d)._start;
      }
    }
    public DAM.Machine._IStack dtor_stack {
      get {
        var d = this;
        return ((Val_Stack)d)._stack;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Unit : Val {
    public Val_Unit() : base() {
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Unit";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _answer;
    public Val_Bool(bool answer) : base() {
      this._answer = answer;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_answer);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Bool;
      return oth != null && this._answer == oth._answer;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._answer));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._answer);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _number;
    public Val_Int(BigInteger number) : base() {
      this._number = number;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_number);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Int;
      return oth != null && this._number == oth._number;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._number));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._number);
      s += ")";
      return s;
    }
  }
  public class Val_String : Val {
    public readonly Dafny.ISequence<Dafny.Rune> _str;
    public Val_String(Dafny.ISequence<Dafny.Rune> str) : base() {
      this._str = str;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_String(_str);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_String;
      return oth != null && object.Equals(this._str, oth._str);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._str));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.String";
      s += "(";
      s += this._str.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _closure;
    public Val_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) : base() {
      this._closure = closure;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_closure);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Thunk;
      return oth != null && object.Equals(this._closure, oth._closure);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._closure));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._closure);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly BigInteger _addr;
    public Val_Ref(BigInteger addr) : base() {
      this._addr = addr;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_addr);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Ref;
      return oth != null && this._addr == oth._addr;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._addr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._addr);
      s += ")";
      return s;
    }
  }
  public class Val_Stack : Val {
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Machine._IStack _stack;
    public Val_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) : base() {
      this._start = start;
      this._stack = stack;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Stack(_start, _stack);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Stack;
      return oth != null && object.Equals(this._start, oth._start) && object.Equals(this._stack, oth._stack);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._stack);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM.Machine._IFrame dtor_top { get; }
    DAM.Machine._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM.Machine._IStack theDefault = create_Empty();
    public static DAM.Machine._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IStack> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IStack>(DAM.Machine.Stack.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM.Machine._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM.Machine._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop() {
      DAM.Machine._IStack _source1 = this;
      if (_source1.is_Empty) {
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_None();
      } else {
        DAM.Machine._IFrame _10___mcc_h0 = _source1.dtor_top;
        DAM.Machine._IStack _11___mcc_h1 = _source1.dtor_rest;
        DAM.Machine._IStack _12_r = _11___mcc_h1;
        DAM.Machine._IFrame _13_t = _10___mcc_h0;
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_Some(_System.Tuple2<DAM.Machine._IFrame, DAM.Machine._IStack>.create(_13_t, _12_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM.Machine._IFrame _top;
    public readonly DAM.Machine._IStack _rest;
    public Stack_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM.Machine._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()));
    public static DAM.Machine._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IFrame>(DAM.Machine.Frame.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) {
      return new Frame_Call(arg);
    }
    public static _IFrame create_Select(Dafny.ISequence<Dafny.Rune> field) {
      return new Frame_Select(field);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public bool is_Select { get { return this is Frame_Select; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Frame_Select)d)._field;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _arg;
    public Frame_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Frame_Select : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Frame_Select(Dafny.ISequence<Dafny.Rune> field) : base() {
      this._field = field;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Select(_field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Select;
      return oth != null && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Select";
      s += "(";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IEvent {
    bool is_Silent { get; }
    bool is_Print { get; }
    DAM.Machine._IVal dtor_Print_a0 { get; }
    _IEvent DowncastClone();
  }
  public abstract class Event : _IEvent {
    public Event() {
    }
    private static readonly DAM.Machine._IEvent theDefault = create_Silent();
    public static DAM.Machine._IEvent Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IEvent> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IEvent>(DAM.Machine.Event.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IEvent> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEvent create_Silent() {
      return new Event_Silent();
    }
    public static _IEvent create_Print(DAM.Machine._IVal _a0) {
      return new Event_Print(_a0);
    }
    public bool is_Silent { get { return this is Event_Silent; } }
    public bool is_Print { get { return this is Event_Print; } }
    public DAM.Machine._IVal dtor_Print_a0 {
      get {
        var d = this;
        return ((Event_Print)d)._a0;
      }
    }
    public abstract _IEvent DowncastClone();
  }
  public class Event_Silent : Event {
    public Event_Silent() : base() {
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Silent();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Silent;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Silent";
      return s;
    }
  }
  public class Event_Print : Event {
    public readonly DAM.Machine._IVal _a0;
    public Event_Print(DAM.Machine._IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IOutput {
    bool is_Raise { get; }
    bool is_Terminal { get; }
    DAM.Machine._IEvent dtor_event { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next { get; }
    _IOutput DowncastClone();
  }
  public abstract class Output : _IOutput {
    public Output() {
    }
    private static readonly DAM.Machine._IOutput theDefault = create_Raise(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()));
    public static DAM.Machine._IOutput Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IOutput> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IOutput>(DAM.Machine.Output.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IOutput> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOutput create_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return new Output_Raise(@event, next);
    }
    public static _IOutput create_Terminal() {
      return new Output_Terminal();
    }
    public bool is_Raise { get { return this is Output_Raise; } }
    public bool is_Terminal { get { return this is Output_Terminal; } }
    public DAM.Machine._IEvent dtor_event {
      get {
        var d = this;
        return ((Output_Raise)d)._event;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next {
      get {
        var d = this;
        return ((Output_Raise)d)._next;
      }
    }
    public abstract _IOutput DowncastClone();
  }
  public class Output_Raise : Output {
    public readonly DAM.Machine._IEvent _event;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _next;
    public Output_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) : base() {
      this._event = @event;
      this._next = next;
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Raise(_event, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Raise;
      return oth != null && object.Equals(this._event, oth._event) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._event));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Raise";
      s += "(";
      s += Dafny.Helpers.ToString(this._event);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Output_Terminal : Output {
    public Output_Terminal() : base() {
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Terminal();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Terminal;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Terminal";
      return s;
    }
  }
} // end of namespace DAM.Machine
namespace DAM.Statics {

  public partial class __default {
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr expr) {
      DAM.Syntax._IExpr _source2 = expr;
      if (_source2.is_Var) {
        Dafny.ISequence<Dafny.Rune> _14___mcc_h0 = _source2.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _15_x = _14___mcc_h0;
        return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(g, _15_x);
      } else if (_source2.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source2.is_Bool) {
        bool _16___mcc_h1 = _source2.dtor_Bool_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source2.is_Int) {
        BigInteger _17___mcc_h2 = _source2.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source2.is_String) {
        Dafny.ISequence<Dafny.Rune> _18___mcc_h3 = _source2.dtor_String_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_String());
      } else if (_source2.is_LT) {
        DAM.Syntax._IExpr _19___mcc_h4 = _source2.dtor_LT_a0;
        DAM.Syntax._IExpr _20___mcc_h5 = _source2.dtor_LT_a1;
        DAM.Syntax._IExpr _21_rhs = _20___mcc_h5;
        DAM.Syntax._IExpr _22_lhs = _19___mcc_h4;
        if ((DAM.Statics.__default.CheckExpr(g, _22_lhs, DAM.Syntax.Pos.create_Int())) && (DAM.Statics.__default.CheckExpr(g, _21_rhs, DAM.Syntax.Pos.create_Int()))) {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
        } else {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
        }
      } else if (_source2.is_Plus) {
        DAM.Syntax._IExpr _23___mcc_h6 = _source2.dtor_Plus_a0;
        DAM.Syntax._IExpr _24___mcc_h7 = _source2.dtor_Plus_a1;
        DAM.Syntax._IExpr _25_rhs = _24___mcc_h7;
        DAM.Syntax._IExpr _26_lhs = _23___mcc_h6;
        if ((DAM.Statics.__default.CheckExpr(g, _26_lhs, DAM.Syntax.Pos.create_Int())) && (DAM.Statics.__default.CheckExpr(g, _25_rhs, DAM.Syntax.Pos.create_Int()))) {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
        } else {
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
        }
      } else {
        DAM.Syntax._IStmt _27___mcc_h8 = _source2.dtor_Thunk_a0;
        DAM.Syntax._IStmt _28_s = _27___mcc_h8;
        DAM.Utils._IOption<DAM.Syntax._INeg> _29_valueOrError0 = DAM.Statics.__default.SynthStmt(g, _28_s);
        if ((_29_valueOrError0).IsFailure()) {
          return (_29_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._INeg _30_t = (_29_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_30_t));
        }
      }
    }
    public static bool CheckExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr e, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthExpr(g, e), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt) {
      DAM.Syntax._IStmt _source3 = stmt;
      if (_source3.is_Pure) {
        DAM.Syntax._IExpr _31___mcc_h0 = _source3.dtor_Pure_a0;
        DAM.Syntax._IExpr _32_e = _31___mcc_h0;
        DAM.Utils._IOption<DAM.Syntax._IPos> _33_valueOrError0 = DAM.Statics.__default.SynthExpr(g, _32_e);
        if ((_33_valueOrError0).IsFailure()) {
          return (_33_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _34_t = (_33_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Value(_34_t));
        }
      } else if (_source3.is_Bind) {
        DAM.Syntax._IStmt _35___mcc_h1 = _source3.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _36___mcc_h2 = _source3.dtor_var__;
        DAM.Syntax._IStmt _37___mcc_h3 = _source3.dtor_rhs;
        DAM.Syntax._IStmt _38_rhs = _37___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _39_var__ = _36___mcc_h2;
        DAM.Syntax._IStmt _40_lhs = _35___mcc_h1;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source4 = DAM.Statics.__default.SynthStmt(g, _40_lhs);
        if (_source4.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _41___mcc_h36 = _source4.dtor_value;
          DAM.Syntax._INeg _source5 = _41___mcc_h36;
          if (_source5.is_Value) {
            DAM.Syntax._IPos _42___mcc_h38 = _source5.dtor_pos;
            DAM.Syntax._IPos _43_t = _42___mcc_h38;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _39_var__, _43_t), _38_rhs);
          } else if (_source5.is_Function) {
            DAM.Syntax._IPos _44___mcc_h40 = _source5.dtor_dom;
            DAM.Syntax._INeg _45___mcc_h41 = _source5.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _46___mcc_h44 = _source5.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Ite) {
        DAM.Syntax._IExpr _47___mcc_h4 = _source3.dtor_guard;
        DAM.Syntax._IStmt _48___mcc_h5 = _source3.dtor_then__;
        DAM.Syntax._IStmt _49___mcc_h6 = _source3.dtor_else__;
        DAM.Syntax._IStmt _50_else__ = _49___mcc_h6;
        DAM.Syntax._IStmt _51_then__ = _48___mcc_h5;
        DAM.Syntax._IExpr _52_guard = _47___mcc_h4;
        if (DAM.Statics.__default.CheckExpr(g, _52_guard, DAM.Syntax.Pos.create_Bool())) {
          DAM.Utils._IOption<DAM.Syntax._INeg> _53_valueOrError1 = DAM.Statics.__default.SynthStmt(g, _51_then__);
          if ((_53_valueOrError1).IsFailure()) {
            return (_53_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _54_t = (_53_valueOrError1).Extract();
            if (DAM.Statics.__default.CheckStmt(g, _50_else__, _54_t)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_54_t);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_Func) {
        Dafny.ISequence<Dafny.Rune> _55___mcc_h7 = _source3.dtor_bound;
        DAM.Syntax._IPos _56___mcc_h8 = _source3.dtor_dom;
        DAM.Syntax._IStmt _57___mcc_h9 = _source3.dtor_body;
        DAM.Syntax._IStmt _58_body = _57___mcc_h9;
        DAM.Syntax._IPos _59_dom = _56___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _60_bound = _55___mcc_h7;
        DAM.Utils._IOption<DAM.Syntax._INeg> _61_valueOrError2 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _60_bound, _59_dom), _58_body);
        if ((_61_valueOrError2).IsFailure()) {
          return (_61_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _62_cod = (_61_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Function(_59_dom, _62_cod));
        }
      } else if (_source3.is_Call) {
        DAM.Syntax._IStmt _63___mcc_h10 = _source3.dtor_func;
        DAM.Syntax._IExpr _64___mcc_h11 = _source3.dtor_arg;
        DAM.Syntax._IExpr _65_arg = _64___mcc_h11;
        DAM.Syntax._IStmt _66_func = _63___mcc_h10;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source6 = DAM.Statics.__default.SynthStmt(g, _66_func);
        if (_source6.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _67___mcc_h46 = _source6.dtor_value;
          DAM.Syntax._INeg _source7 = _67___mcc_h46;
          if (_source7.is_Value) {
            DAM.Syntax._IPos _68___mcc_h48 = _source7.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source7.is_Function) {
            DAM.Syntax._IPos _69___mcc_h50 = _source7.dtor_dom;
            DAM.Syntax._INeg _70___mcc_h51 = _source7.dtor_cod;
            DAM.Syntax._INeg _71_cod = _70___mcc_h51;
            DAM.Syntax._IPos _72_dom = _69___mcc_h50;
            if (DAM.Statics.__default.CheckExpr(g, _65_arg, _72_dom)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_71_cod);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _73___mcc_h54 = _source7.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _74___mcc_h12 = _source3.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _75_fields = _74___mcc_h12;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>> _76_valueOrError4 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>>((_77_fields, _78_g) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>)(() => {
          var _coll1 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_1 in (_77_fields).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _79_lbl = (Dafny.ISequence<Dafny.Rune>)_compr_1;
            if ((_77_fields).Contains(_79_lbl)) {
              _coll1.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>(_79_lbl, DAM.Statics.__default.SynthStmt(_78_g, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_77_fields, _79_lbl))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>.FromCollection(_coll1);
        }))())(_75_fields, g));
        if ((_76_valueOrError4).IsFailure()) {
          return (_76_valueOrError4).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _80_fields = (_76_valueOrError4).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Record(_80_fields));
        }
      } else if (_source3.is_Select) {
        DAM.Syntax._IStmt _81___mcc_h13 = _source3.dtor_record;
        Dafny.ISequence<Dafny.Rune> _82___mcc_h14 = _source3.dtor_field;
        Dafny.ISequence<Dafny.Rune> _83_lbl = _82___mcc_h14;
        DAM.Syntax._IStmt _84_record = _81___mcc_h13;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source8 = DAM.Statics.__default.SynthStmt(g, _84_record);
        if (_source8.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _85___mcc_h56 = _source8.dtor_value;
          DAM.Syntax._INeg _source9 = _85___mcc_h56;
          if (_source9.is_Value) {
            DAM.Syntax._IPos _86___mcc_h58 = _source9.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source9.is_Function) {
            DAM.Syntax._IPos _87___mcc_h60 = _source9.dtor_dom;
            DAM.Syntax._INeg _88___mcc_h61 = _source9.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _89___mcc_h64 = _source9.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _90_fields = _89___mcc_h64;
            return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_90_fields, _83_lbl);
          }
        }
      } else if (_source3.is_Force) {
        DAM.Syntax._IExpr _91___mcc_h15 = _source3.dtor_Force_a0;
        DAM.Syntax._IExpr _92_expr = _91___mcc_h15;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source10 = DAM.Statics.__default.SynthExpr(g, _92_expr);
        if (_source10.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _93___mcc_h66 = _source10.dtor_value;
          DAM.Syntax._IPos _source11 = _93___mcc_h66;
          if (_source11.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_String) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Thunk) {
            DAM.Syntax._INeg _94___mcc_h68 = _source11.dtor_neg;
            DAM.Syntax._INeg _95_t = _94___mcc_h68;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_95_t);
          } else if (_source11.is_Ref) {
            DAM.Syntax._IPos _96___mcc_h70 = _source11.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _97___mcc_h72 = _source11.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_New) {
        DAM.Syntax._IExpr _98___mcc_h16 = _source3.dtor_init;
        Dafny.ISequence<Dafny.Rune> _99___mcc_h17 = _source3.dtor_var__;
        DAM.Syntax._IStmt _100___mcc_h18 = _source3.dtor_next;
        DAM.Syntax._IStmt _101_next = _100___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _102_var__ = _99___mcc_h17;
        DAM.Syntax._IExpr _103_init = _98___mcc_h16;
        DAM.Utils._IOption<DAM.Syntax._IPos> _104_valueOrError5 = DAM.Statics.__default.SynthExpr(g, _103_init);
        if ((_104_valueOrError5).IsFailure()) {
          return (_104_valueOrError5).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _105_t = (_104_valueOrError5).Extract();
          return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _102_var__, DAM.Syntax.Pos.create_Ref(_105_t)), _101_next);
        }
      } else if (_source3.is_Read) {
        DAM.Syntax._IExpr _106___mcc_h19 = _source3.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _107___mcc_h20 = _source3.dtor_var__;
        DAM.Syntax._IStmt _108___mcc_h21 = _source3.dtor_next;
        DAM.Syntax._IStmt _109_next = _108___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _110_var__ = _107___mcc_h20;
        DAM.Syntax._IExpr _111_ref = _106___mcc_h19;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source12 = DAM.Statics.__default.SynthExpr(g, _111_ref);
        if (_source12.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _112___mcc_h74 = _source12.dtor_value;
          DAM.Syntax._IPos _source13 = _112___mcc_h74;
          if (_source13.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_String) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Thunk) {
            DAM.Syntax._INeg _113___mcc_h76 = _source13.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Ref) {
            DAM.Syntax._IPos _114___mcc_h78 = _source13.dtor_ref;
            DAM.Syntax._IPos _115_t = _114___mcc_h78;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _110_var__, _115_t), _109_next);
          } else {
            DAM.Syntax._INeg _116___mcc_h80 = _source13.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Write) {
        DAM.Syntax._IExpr _117___mcc_h22 = _source3.dtor_lvalue;
        DAM.Syntax._IExpr _118___mcc_h23 = _source3.dtor_rvalue;
        DAM.Syntax._IStmt _119___mcc_h24 = _source3.dtor_next;
        DAM.Syntax._IStmt _120_next = _119___mcc_h24;
        DAM.Syntax._IExpr _121_rhs = _118___mcc_h23;
        DAM.Syntax._IExpr _122_lhs = _117___mcc_h22;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source14 = DAM.Statics.__default.SynthExpr(g, _122_lhs);
        if (_source14.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _123___mcc_h82 = _source14.dtor_value;
          DAM.Syntax._IPos _source15 = _123___mcc_h82;
          if (_source15.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_String) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Thunk) {
            DAM.Syntax._INeg _124___mcc_h84 = _source15.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Ref) {
            DAM.Syntax._IPos _125___mcc_h86 = _source15.dtor_ref;
            DAM.Syntax._IPos _126_t = _125___mcc_h86;
            if (DAM.Statics.__default.CheckExpr(g, _121_rhs, _126_t)) {
              return DAM.Statics.__default.SynthStmt(g, _120_next);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            DAM.Syntax._INeg _127___mcc_h88 = _source15.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Print) {
        DAM.Syntax._IExpr _128___mcc_h25 = _source3.dtor_Print_a0;
        DAM.Syntax._IStmt _129___mcc_h26 = _source3.dtor_next;
        DAM.Syntax._IStmt _130_next = _129___mcc_h26;
        DAM.Syntax._IExpr _131_expr = _128___mcc_h25;
        DAM.Utils._IOption<DAM.Syntax._IPos> _132_valueOrError3 = DAM.Statics.__default.SynthExpr(g, _131_expr);
        if ((_132_valueOrError3).IsFailure()) {
          return (_132_valueOrError3).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _133___v19 = (_132_valueOrError3).Extract();
          return DAM.Statics.__default.SynthStmt(g, _130_next);
        }
      } else if (_source3.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _134___mcc_h27 = _source3.dtor_bound;
        DAM.Syntax._INeg _135___mcc_h28 = _source3.dtor_fix;
        DAM.Syntax._IStmt _136___mcc_h29 = _source3.dtor_body;
        DAM.Syntax._IStmt _137_body = _136___mcc_h29;
        DAM.Syntax._INeg _138_fix = _135___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _139_self = _134___mcc_h27;
        if (DAM.Statics.__default.CheckStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _139_self, DAM.Syntax.Pos.create_Thunk(_138_fix)), _137_body, _138_fix)) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_138_fix);
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _140___mcc_h30 = _source3.dtor_bound;
        DAM.Syntax._INeg _141___mcc_h31 = _source3.dtor_start;
        DAM.Syntax._IStmt _142___mcc_h32 = _source3.dtor_body;
        DAM.Syntax._IStmt _143_body = _142___mcc_h32;
        DAM.Syntax._INeg _144_start = _141___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _145_bound = _140___mcc_h30;
        return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _145_bound, DAM.Syntax.Pos.create_Stack(_144_start)), _143_body);
      } else {
        DAM.Syntax._IExpr _146___mcc_h33 = _source3.dtor_stack;
        DAM.Syntax._INeg _147___mcc_h34 = _source3.dtor_oldstart;
        DAM.Syntax._IStmt _148___mcc_h35 = _source3.dtor_next;
        DAM.Syntax._IStmt _149_next = _148___mcc_h35;
        DAM.Syntax._INeg _150_oldstart = _147___mcc_h34;
        DAM.Syntax._IExpr _151_stack = _146___mcc_h33;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source16 = DAM.Statics.__default.SynthExpr(g, _151_stack);
        if (_source16.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _152___mcc_h90 = _source16.dtor_value;
          DAM.Syntax._IPos _source17 = _152___mcc_h90;
          if (_source17.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_String) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Thunk) {
            DAM.Syntax._INeg _153___mcc_h92 = _source17.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Ref) {
            DAM.Syntax._IPos _154___mcc_h94 = _source17.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _155___mcc_h96 = _source17.dtor_start;
            DAM.Syntax._INeg _156_start = _155___mcc_h96;
            if (DAM.Statics.__default.CheckStmt(g, _149_next, _156_start)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_150_oldstart);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        }
      }
    }
    public static bool CheckStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt, DAM.Syntax._INeg t) {
      return object.Equals(DAM.Statics.__default.SynthStmt(g, stmt), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(t));
    }
    public static DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> SynthEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env) {
      return DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_157_env, _158_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
        var _coll2 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
        foreach (Dafny.ISequence<Dafny.Rune> _compr_2 in (_157_env).Keys.Elements) {
          Dafny.ISequence<Dafny.Rune> _159_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_2;
          if ((_157_env).Contains(_159_var__)) {
            _coll2.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_159_var__, DAM.Statics.__default.SynthVal(_158_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_157_env, _159_var__))));
          }
        }
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll2);
      }))())(env, s));
    }
    public static bool CheckEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g) {
      return object.Equals(DAM.Statics.__default.SynthEnv(s, env), DAM.Utils.Option<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>>.create_Some(g));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs0 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _160_env = _let_tmp_rhs0.dtor__0;
      DAM.Syntax._IExpr _161_expr = _let_tmp_rhs0.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _162_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _160_env);
      if ((_162_valueOrError0).IsFailure()) {
        return (_162_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _163_g = (_162_valueOrError0).Extract();
        return DAM.Statics.__default.SynthExpr(_163_g, _161_expr);
      }
    }
    public static bool CheckClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthClosedExpr(s, expr), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthClosedStmt(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> stmt) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs1 = stmt;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _164_env = _let_tmp_rhs1.dtor__0;
      DAM.Syntax._IStmt _165_stmt = _let_tmp_rhs1.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _166_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _164_env);
      if ((_166_valueOrError0).IsFailure()) {
        return (_166_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _167_g = (_166_valueOrError0).Extract();
        return DAM.Statics.__default.SynthStmt(_167_g, _165_stmt);
      }
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
    TAIL_CALL_START:;
      DAM.Machine._IStack _source18 = stack;
      if (_source18.is_Empty) {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(start);
      } else {
        DAM.Machine._IFrame _168___mcc_h0 = _source18.dtor_top;
        DAM.Machine._IStack _169___mcc_h1 = _source18.dtor_rest;
        DAM.Machine._IFrame _source19 = _168___mcc_h0;
        if (_source19.is_Bind) {
          Dafny.ISequence<Dafny.Rune> _170___mcc_h2 = _source19.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _171___mcc_h3 = _source19.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source20 = _171___mcc_h3;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _172___mcc_h4 = _source20.dtor__0;
          DAM.Syntax._IStmt _173___mcc_h5 = _source20.dtor__1;
          DAM.Machine._IStack _174_stack = _169___mcc_h1;
          DAM.Syntax._IStmt _175_rhs = _173___mcc_h5;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _176_env = _172___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _177_var__ = _170___mcc_h2;
          DAM.Syntax._INeg _source21 = start;
          if (_source21.is_Value) {
            DAM.Syntax._IPos _178___mcc_h8 = _source21.dtor_pos;
            DAM.Syntax._IPos _179_t = _178___mcc_h8;
            DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _180_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _176_env);
            if ((_180_valueOrError0).IsFailure()) {
              return (_180_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _181_g = (_180_valueOrError0).Extract();
              DAM.Utils._IOption<DAM.Syntax._INeg> _182_valueOrError1 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_181_g, _177_var__, _179_t), _175_rhs);
              if ((_182_valueOrError1).IsFailure()) {
                return (_182_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
              } else {
                DAM.Syntax._INeg _183_start = (_182_valueOrError1).Extract();
                Dafny.ISequence<DAM.Syntax._IPos> _in0 = s;
                DAM.Syntax._INeg _in1 = _183_start;
                DAM.Machine._IStack _in2 = _174_stack;
                s = _in0;
                start = _in1;
                stack = _in2;
                goto TAIL_CALL_START;
              }
            }
          } else if (_source21.is_Function) {
            DAM.Syntax._IPos _184___mcc_h10 = _source21.dtor_dom;
            DAM.Syntax._INeg _185___mcc_h11 = _source21.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _186___mcc_h14 = _source21.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else if (_source19.is_Call) {
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _187___mcc_h6 = _source19.dtor_arg;
          DAM.Machine._IStack _188_stack = _169___mcc_h1;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _189_arg = _187___mcc_h6;
          DAM.Syntax._INeg _source22 = start;
          if (_source22.is_Value) {
            DAM.Syntax._IPos _190___mcc_h16 = _source22.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source22.is_Function) {
            DAM.Syntax._IPos _191___mcc_h18 = _source22.dtor_dom;
            DAM.Syntax._INeg _192___mcc_h19 = _source22.dtor_cod;
            DAM.Syntax._INeg _193_cod = _192___mcc_h19;
            DAM.Syntax._IPos _194_dom = _191___mcc_h18;
            if (DAM.Statics.__default.CheckClosedExpr(s, _189_arg, _194_dom)) {
              Dafny.ISequence<DAM.Syntax._IPos> _in3 = s;
              DAM.Syntax._INeg _in4 = _193_cod;
              DAM.Machine._IStack _in5 = _188_stack;
              s = _in3;
              start = _in4;
              stack = _in5;
              goto TAIL_CALL_START;
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _195___mcc_h22 = _source22.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _196___mcc_h7 = _source19.dtor_field;
          DAM.Machine._IStack _197_stack = _169___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _198_lbl = _196___mcc_h7;
          DAM.Syntax._INeg _source23 = start;
          if (_source23.is_Value) {
            DAM.Syntax._IPos _199___mcc_h24 = _source23.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source23.is_Function) {
            DAM.Syntax._IPos _200___mcc_h26 = _source23.dtor_dom;
            DAM.Syntax._INeg _201___mcc_h27 = _source23.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _202___mcc_h30 = _source23.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _203_fields = _202___mcc_h30;
            DAM.Utils._IOption<DAM.Syntax._INeg> _204_valueOrError2 = DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_203_fields, _198_lbl);
            if ((_204_valueOrError2).IsFailure()) {
              return (_204_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              DAM.Syntax._INeg _205_start = (_204_valueOrError2).Extract();
              Dafny.ISequence<DAM.Syntax._IPos> _in6 = s;
              DAM.Syntax._INeg _in7 = _205_start;
              DAM.Machine._IStack _in8 = _197_stack;
              s = _in6;
              start = _in7;
              stack = _in8;
              goto TAIL_CALL_START;
            }
          }
        }
      }
    }
    public static bool CheckStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthStack(s, start, stack), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val) {
      DAM.Machine._IVal _source24 = val;
      if (_source24.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source24.is_Bool) {
        bool _206___mcc_h0 = _source24.dtor_answer;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source24.is_Int) {
        BigInteger _207___mcc_h1 = _source24.dtor_number;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source24.is_String) {
        Dafny.ISequence<Dafny.Rune> _208___mcc_h2 = _source24.dtor_str;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_String());
      } else if (_source24.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _209___mcc_h3 = _source24.dtor_closure;
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source25 = _209___mcc_h3;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _210___mcc_h4 = _source25.dtor__0;
        DAM.Syntax._IStmt _211___mcc_h5 = _source25.dtor__1;
        DAM.Syntax._IStmt _212_stmt = _211___mcc_h5;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _213_env = _210___mcc_h4;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _214_valueOrError0 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_215_env, _216_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
          var _coll3 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_3 in (_215_env).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _217_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_3;
            if ((_215_env).Contains(_217_var__)) {
              _coll3.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_217_var__, DAM.Statics.__default.SynthVal(_216_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_215_env, _217_var__))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll3);
        }))())(_213_env, s));
        if ((_214_valueOrError0).IsFailure()) {
          return (_214_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _218_g = (_214_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _219_valueOrError1 = DAM.Statics.__default.SynthStmt(_218_g, _212_stmt);
          if ((_219_valueOrError1).IsFailure()) {
            return (_219_valueOrError1).PropagateFailure<DAM.Syntax._IPos>();
          } else {
            DAM.Syntax._INeg _220_t = (_219_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_220_t));
          }
        }
      } else if (_source24.is_Ref) {
        BigInteger _221___mcc_h6 = _source24.dtor_addr;
        BigInteger _222_addr = _221___mcc_h6;
        DAM.Utils._IOption<DAM.Syntax._IPos> _223_valueOrError2 = DAM.Utils.__default.SeqGet<DAM.Syntax._IPos>(s, _222_addr);
        if ((_223_valueOrError2).IsFailure()) {
          return (_223_valueOrError2).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._IPos _224_t = (_223_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Ref(_224_t));
        }
      } else {
        DAM.Syntax._INeg _225___mcc_h7 = _source24.dtor_start;
        DAM.Machine._IStack _226___mcc_h8 = _source24.dtor_stack;
        DAM.Machine._IStack _227_stack = _226___mcc_h8;
        DAM.Syntax._INeg _228_start = _225___mcc_h7;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
      }
    }
    public static bool CheckVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthVal(s, val), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static bool CheckStore(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.ISequence<DAM.Machine._IVal> store) {
      return ((new BigInteger((store).Count)) == (new BigInteger((s).Count))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, bool>>((_229_store, _230_s) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((_229_store).Count)), true, (((_forall_var_1) => {
        BigInteger _231_addr = (BigInteger)_forall_var_1;
        return !(((_231_addr).Sign != -1) && ((_231_addr) < (new BigInteger((_229_store).Count)))) || (DAM.Statics.__default.CheckVal(_230_s, (_229_store).Select(_231_addr), (_230_s).Select(_231_addr)));
      }))))(store, s));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs2 = input;
      Dafny.ISequence<DAM.Machine._IVal> _232_sto = _let_tmp_rhs2.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _233_stmt = _let_tmp_rhs2.dtor__1;
      DAM.Machine._IStack _234_stack = _let_tmp_rhs2.dtor__2;
      if (DAM.Statics.__default.CheckStore(s, _232_sto)) {
        DAM.Utils._IOption<DAM.Syntax._INeg> _235_valueOrError0 = DAM.Statics.__default.SynthClosedStmt(s, _233_stmt);
        if ((_235_valueOrError0).IsFailure()) {
          return (_235_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _236_start = (_235_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _237_valueOrError1 = DAM.Statics.__default.SynthStack(s, _236_start, _234_stack);
          if ((_237_valueOrError1).IsFailure()) {
            return (_237_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _238_end = (_237_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_238_end);
          }
        }
      } else {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
      }
    }
    public static bool CheckInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthInput(s, input), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static bool CheckOutput(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IOutput @out, DAM.Syntax._INeg end) {
      DAM.Machine._IOutput _source26 = @out;
      if (_source26.is_Raise) {
        DAM.Machine._IEvent _239___mcc_h0 = _source26.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _240___mcc_h1 = _source26.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _241_next = _240___mcc_h1;
        return DAM.Statics.__default.CheckInput(s, _241_next, end);
      } else {
        return true;
      }
    }
  }
} // end of namespace DAM.Statics
namespace DAM.Dynamics {

  public partial class __default {
    public static DAM.Machine._IVal Eval(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs3 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _242_env = _let_tmp_rhs3.dtor__0;
      DAM.Syntax._IExpr _243_expr = _let_tmp_rhs3.dtor__1;
      DAM.Syntax._IExpr _source27 = _243_expr;
      if (_source27.is_Var) {
        Dafny.ISequence<Dafny.Rune> _244___mcc_h0 = _source27.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _245_x = _244___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_242_env, _245_x);
      } else if (_source27.is_Unit) {
        return DAM.Machine.Val.create_Unit();
      } else if (_source27.is_Bool) {
        bool _246___mcc_h1 = _source27.dtor_Bool_a0;
        bool _247_b = _246___mcc_h1;
        return DAM.Machine.Val.create_Bool(_247_b);
      } else if (_source27.is_Int) {
        BigInteger _248___mcc_h2 = _source27.dtor_Int_a0;
        BigInteger _249_i = _248___mcc_h2;
        return DAM.Machine.Val.create_Int(_249_i);
      } else if (_source27.is_String) {
        Dafny.ISequence<Dafny.Rune> _250___mcc_h3 = _source27.dtor_String_a0;
        Dafny.ISequence<Dafny.Rune> _251_s = _250___mcc_h3;
        return DAM.Machine.Val.create_String(_251_s);
      } else if (_source27.is_LT) {
        DAM.Syntax._IExpr _252___mcc_h4 = _source27.dtor_LT_a0;
        DAM.Syntax._IExpr _253___mcc_h5 = _source27.dtor_LT_a1;
        DAM.Syntax._IExpr _254_rhs = _253___mcc_h5;
        DAM.Syntax._IExpr _255_lhs = _252___mcc_h4;
        BigInteger _256_lhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_242_env, _255_lhs))).dtor_number;
        BigInteger _257_rhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_242_env, _254_rhs))).dtor_number;
        return DAM.Machine.Val.create_Bool((_256_lhs) < (_257_rhs));
      } else if (_source27.is_Plus) {
        DAM.Syntax._IExpr _258___mcc_h6 = _source27.dtor_Plus_a0;
        DAM.Syntax._IExpr _259___mcc_h7 = _source27.dtor_Plus_a1;
        DAM.Syntax._IExpr _260_rhs = _259___mcc_h7;
        DAM.Syntax._IExpr _261_lhs = _258___mcc_h6;
        BigInteger _262_lhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_242_env, _261_lhs))).dtor_number;
        BigInteger _263_rhs = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_242_env, _260_rhs))).dtor_number;
        return DAM.Machine.Val.create_Int((_262_lhs) + (_263_rhs));
      } else {
        DAM.Syntax._IStmt _264___mcc_h8 = _source27.dtor_Thunk_a0;
        DAM.Syntax._IStmt _265_stmt = _264___mcc_h8;
        return DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_242_env, _265_stmt));
      }
    }
    public static DAM.Machine._IOutput Step(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs4 = input;
      Dafny.ISequence<DAM.Machine._IVal> _266_store = _let_tmp_rhs4.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs5 = _let_tmp_rhs4.dtor__1;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _267_env = _let_tmp_rhs5.dtor__0;
      DAM.Syntax._IStmt _268_stmt = _let_tmp_rhs5.dtor__1;
      DAM.Machine._IStack _269_stack = _let_tmp_rhs4.dtor__2;
      DAM.Syntax._IStmt _source28 = _268_stmt;
      if (_source28.is_Pure) {
        DAM.Syntax._IExpr _270___mcc_h0 = _source28.dtor_Pure_a0;
        DAM.Syntax._IExpr _271_expr = _270___mcc_h0;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source29 = (_269_stack).Pop();
        if (_source29.is_None) {
          DAM.Machine._IOutput _272_output = DAM.Machine.Output.create_Terminal();
          return _272_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _273___mcc_h36 = _source29.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source30 = _273___mcc_h36;
          DAM.Machine._IFrame _274___mcc_h37 = _source30.dtor__0;
          DAM.Machine._IStack _275___mcc_h38 = _source30.dtor__1;
          DAM.Machine._IFrame _source31 = _274___mcc_h37;
          Dafny.ISequence<Dafny.Rune> _276___mcc_h39 = _source31.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _277___mcc_h40 = _source31.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source32 = _277___mcc_h40;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _278___mcc_h41 = _source32.dtor__0;
          DAM.Syntax._IStmt _279___mcc_h42 = _source32.dtor__1;
          DAM.Machine._IStack _280_stack = _275___mcc_h38;
          DAM.Syntax._IStmt _281_rhs = _279___mcc_h42;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _282_env_k = _278___mcc_h41;
          Dafny.ISequence<Dafny.Rune> _283_var__ = _276___mcc_h39;
          DAM.Machine._IVal _284_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _271_expr));
          DAM.Machine._IOutput _285_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_282_env_k, _283_var__, _284_val), _281_rhs), _280_stack));
          return _285_output;
        }
      } else if (_source28.is_Bind) {
        DAM.Syntax._IStmt _286___mcc_h1 = _source28.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _287___mcc_h2 = _source28.dtor_var__;
        DAM.Syntax._IStmt _288___mcc_h3 = _source28.dtor_rhs;
        DAM.Syntax._IStmt _289_rhs = _288___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _290_var__ = _287___mcc_h2;
        DAM.Syntax._IStmt _291_lhs = _286___mcc_h1;
        DAM.Machine._IOutput _292_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _291_lhs), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Bind(_290_var__, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _289_rhs)), _269_stack)));
        return _292_output;
      } else if (_source28.is_Ite) {
        DAM.Syntax._IExpr _293___mcc_h4 = _source28.dtor_guard;
        DAM.Syntax._IStmt _294___mcc_h5 = _source28.dtor_then__;
        DAM.Syntax._IStmt _295___mcc_h6 = _source28.dtor_else__;
        DAM.Syntax._IStmt _296_else__ = _295___mcc_h6;
        DAM.Syntax._IStmt _297_then__ = _294___mcc_h5;
        DAM.Syntax._IExpr _298_guard = _293___mcc_h4;
        DAM.Machine._IVal _299_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _298_guard));
        DAM.Machine._IOutput _300_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, (((_299_val).dtor_answer) ? (_297_then__) : (_296_else__))), _269_stack));
        return _300_output;
      } else if (_source28.is_Func) {
        Dafny.ISequence<Dafny.Rune> _301___mcc_h7 = _source28.dtor_bound;
        DAM.Syntax._IPos _302___mcc_h8 = _source28.dtor_dom;
        DAM.Syntax._IStmt _303___mcc_h9 = _source28.dtor_body;
        DAM.Syntax._IStmt _304_body = _303___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _305_bound = _301___mcc_h7;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source33 = (_269_stack).Pop();
        if (_source33.is_None) {
          DAM.Machine._IOutput _306_output = DAM.Machine.Output.create_Terminal();
          return _306_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _307___mcc_h45 = _source33.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source34 = _307___mcc_h45;
          DAM.Machine._IFrame _308___mcc_h46 = _source34.dtor__0;
          DAM.Machine._IStack _309___mcc_h47 = _source34.dtor__1;
          DAM.Machine._IFrame _source35 = _308___mcc_h46;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _310___mcc_h50 = _source35.dtor_arg;
          DAM.Machine._IStack _311_stack = _309___mcc_h47;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _312_arg = _310___mcc_h50;
          DAM.Machine._IVal _313_val = DAM.Dynamics.__default.Eval(_312_arg);
          DAM.Machine._IOutput _314_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _305_bound, _313_val), _304_body), _311_stack));
          return _314_output;
        }
      } else if (_source28.is_Call) {
        DAM.Syntax._IStmt _315___mcc_h10 = _source28.dtor_func;
        DAM.Syntax._IExpr _316___mcc_h11 = _source28.dtor_arg;
        DAM.Syntax._IExpr _317_arg = _316___mcc_h11;
        DAM.Syntax._IStmt _318_func = _315___mcc_h10;
        DAM.Machine._IOutput _319_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _318_func), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Call(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _317_arg)), _269_stack)));
        return _319_output;
      } else if (_source28.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _320___mcc_h12 = _source28.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _321_fields = _320___mcc_h12;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source36 = (_269_stack).Pop();
        if (_source36.is_None) {
          DAM.Machine._IOutput _322_output = DAM.Machine.Output.create_Terminal();
          return _322_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _323___mcc_h52 = _source36.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source37 = _323___mcc_h52;
          DAM.Machine._IFrame _324___mcc_h53 = _source37.dtor__0;
          DAM.Machine._IStack _325___mcc_h54 = _source37.dtor__1;
          DAM.Machine._IFrame _source38 = _324___mcc_h53;
          Dafny.ISequence<Dafny.Rune> _326___mcc_h58 = _source38.dtor_field;
          DAM.Machine._IStack _327_stack = _325___mcc_h54;
          Dafny.ISequence<Dafny.Rune> _328_lbl = _326___mcc_h58;
          DAM.Machine._IOutput _329_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_321_fields, _328_lbl)), _327_stack));
          return _329_output;
        }
      } else if (_source28.is_Select) {
        DAM.Syntax._IStmt _330___mcc_h13 = _source28.dtor_record;
        Dafny.ISequence<Dafny.Rune> _331___mcc_h14 = _source28.dtor_field;
        Dafny.ISequence<Dafny.Rune> _332_field = _331___mcc_h14;
        DAM.Syntax._IStmt _333_record = _330___mcc_h13;
        DAM.Machine._IOutput _334_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _333_record), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Select(_332_field), _269_stack)));
        return _334_output;
      } else if (_source28.is_Force) {
        DAM.Syntax._IExpr _335___mcc_h15 = _source28.dtor_Force_a0;
        DAM.Syntax._IExpr _336_thunk = _335___mcc_h15;
        DAM.Machine._IVal _337_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _336_thunk));
        DAM.Machine._IOutput _338_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, (_337_val).dtor_closure, _269_stack));
        return _338_output;
      } else if (_source28.is_New) {
        DAM.Syntax._IExpr _339___mcc_h16 = _source28.dtor_init;
        Dafny.ISequence<Dafny.Rune> _340___mcc_h17 = _source28.dtor_var__;
        DAM.Syntax._IStmt _341___mcc_h18 = _source28.dtor_next;
        DAM.Syntax._IStmt _342_next = _341___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _343_var__ = _340___mcc_h17;
        DAM.Syntax._IExpr _344_init = _339___mcc_h16;
        DAM.Machine._IVal _345_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _344_init));
        _System._ITuple2<BigInteger, Dafny.ISequence<DAM.Machine._IVal>> _let_tmp_rhs6 = DAM.Utils.__default.Extend<DAM.Machine._IVal>(_266_store, _345_val);
        BigInteger _346_addr = _let_tmp_rhs6.dtor__0;
        Dafny.ISequence<DAM.Machine._IVal> _347_store_k = _let_tmp_rhs6.dtor__1;
        DAM.Machine._IOutput _348_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_347_store_k, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _343_var__, DAM.Machine.Val.create_Ref(_346_addr)), _342_next), _269_stack));
        return _348_output;
      } else if (_source28.is_Read) {
        DAM.Syntax._IExpr _349___mcc_h19 = _source28.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _350___mcc_h20 = _source28.dtor_var__;
        DAM.Syntax._IStmt _351___mcc_h21 = _source28.dtor_next;
        DAM.Syntax._IStmt _352_next = _351___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _353_var__ = _350___mcc_h20;
        DAM.Syntax._IExpr _354_ref = _349___mcc_h19;
        DAM.Machine._IVal _355_val = (_266_store).Select((DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _354_ref))).dtor_addr);
        DAM.Machine._IOutput _356_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _353_var__, _355_val), _352_next), _269_stack));
        return _356_output;
      } else if (_source28.is_Write) {
        DAM.Syntax._IExpr _357___mcc_h22 = _source28.dtor_lvalue;
        DAM.Syntax._IExpr _358___mcc_h23 = _source28.dtor_rvalue;
        DAM.Syntax._IStmt _359___mcc_h24 = _source28.dtor_next;
        DAM.Syntax._IStmt _360_next = _359___mcc_h24;
        DAM.Syntax._IExpr _361_rhs = _358___mcc_h23;
        DAM.Syntax._IExpr _362_lhs = _357___mcc_h22;
        BigInteger _363_lval = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _362_lhs))).dtor_addr;
        DAM.Machine._IVal _364_rval = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _361_rhs));
        DAM.Machine._IOutput _365_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.Update(_266_store, _363_lval, _364_rval), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _360_next), _269_stack));
        return _365_output;
      } else if (_source28.is_Print) {
        DAM.Syntax._IExpr _366___mcc_h25 = _source28.dtor_Print_a0;
        DAM.Syntax._IStmt _367___mcc_h26 = _source28.dtor_next;
        DAM.Syntax._IStmt _368_next = _367___mcc_h26;
        DAM.Syntax._IExpr _369_expr = _366___mcc_h25;
        DAM.Machine._IVal _370_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _369_expr));
        DAM.Machine._IOutput _371_output = DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Print(_370_val), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _368_next), _269_stack));
        return _371_output;
      } else if (_source28.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _372___mcc_h27 = _source28.dtor_bound;
        DAM.Syntax._INeg _373___mcc_h28 = _source28.dtor_fix;
        DAM.Syntax._IStmt _374___mcc_h29 = _source28.dtor_body;
        DAM.Syntax._IStmt _375_body = _374___mcc_h29;
        DAM.Syntax._INeg _376_fix = _373___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _377_self = _372___mcc_h27;
        DAM.Machine._IVal _378_val = DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _268_stmt));
        DAM.Machine._IOutput _379_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _377_self, _378_val), _375_body), _269_stack));
        return _379_output;
      } else if (_source28.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _380___mcc_h30 = _source28.dtor_bound;
        DAM.Syntax._INeg _381___mcc_h31 = _source28.dtor_start;
        DAM.Syntax._IStmt _382___mcc_h32 = _source28.dtor_body;
        DAM.Syntax._IStmt _383_body = _382___mcc_h32;
        DAM.Syntax._INeg _384_start = _381___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _385_bound = _380___mcc_h30;
        DAM.Machine._IOutput _386_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_267_env, _385_bound, DAM.Machine.Val.create_Stack(_384_start, _269_stack)), _383_body), _269_stack));
        return _386_output;
      } else {
        DAM.Syntax._IExpr _387___mcc_h33 = _source28.dtor_stack;
        DAM.Syntax._INeg _388___mcc_h34 = _source28.dtor_oldstart;
        DAM.Syntax._IStmt _389___mcc_h35 = _source28.dtor_next;
        DAM.Syntax._IStmt _390_next = _389___mcc_h35;
        DAM.Syntax._IExpr _391_expr = _387___mcc_h33;
        DAM.Machine._IVal _392_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_267_env, _391_expr));
        DAM.Machine._IOutput _393_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_266_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_267_env, _390_next), (_392_val).dtor_stack));
        return _393_output;
      }
    }
    public static _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> Initial(DAM.Syntax._IStmt stmt) {
      return _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.FromElements(), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.FromElements(), stmt), DAM.Machine.Stack.create_Empty());
    }
    public static void PrintVal(DAM.Machine._IVal val) {
      DAM.Machine._IVal _source39 = val;
      if (_source39.is_Unit) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")).ToVerbatimString(false));
      } else if (_source39.is_Bool) {
        bool _394___mcc_h0 = _source39.dtor_answer;
        bool _395_b = _394___mcc_h0;
        Dafny.Helpers.Print((_395_b));
      } else if (_source39.is_Int) {
        BigInteger _396___mcc_h2 = _source39.dtor_number;
        BigInteger _397_i = _396___mcc_h2;
        Dafny.Helpers.Print((_397_i));
      } else if (_source39.is_String) {
        Dafny.ISequence<Dafny.Rune> _398___mcc_h4 = _source39.dtor_str;
        Dafny.ISequence<Dafny.Rune> _399_s = _398___mcc_h4;
        Dafny.Helpers.Print(((_399_s)).ToVerbatimString(false));
      } else if (_source39.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _400___mcc_h6 = _source39.dtor_closure;
        Dafny.Helpers.Print((val));
      } else if (_source39.is_Ref) {
        BigInteger _401___mcc_h8 = _source39.dtor_addr;
        Dafny.Helpers.Print((val));
      } else {
        DAM.Syntax._INeg _402___mcc_h10 = _source39.dtor_start;
        DAM.Machine._IStack _403___mcc_h11 = _source39.dtor_stack;
        Dafny.Helpers.Print((val));
      }
    }
    public static void Interpret(DAM.Syntax._IStmt stmt, bool traced) {
      DAM.Utils._IOption<DAM.Syntax._INeg> _404_endOption;
      _404_endOption = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), stmt);
      if ((_404_endOption).is_None) {
        if (traced) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Statement fails to typecheck.\n")).ToVerbatimString(false));
        }
        return;
      }
      DAM.Syntax._INeg _405_end;
      _405_end = (_404_endOption).Extract();
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _406_input;
      _406_input = DAM.Dynamics.__default.Initial(stmt);
      while (true) {
        DAM.Machine._IOutput _source40 = DAM.Dynamics.__default.Step(_406_input);
        if (_source40.is_Raise) {
          DAM.Machine._IEvent _407___mcc_h0 = _source40.dtor_event;
          _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _408___mcc_h1 = _source40.dtor_next;
          _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _409_output = _408___mcc_h1;
          DAM.Machine._IEvent _410_evt = _407___mcc_h0;
          if (traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("event: ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_410_evt));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", state: ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_409_output));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n\n")).ToVerbatimString(false));
          } else {
            DAM.Machine._IEvent _source41 = _410_evt;
            if (_source41.is_Silent) {
            } else {
              DAM.Machine._IVal _411___mcc_h2 = _source41.dtor_Print_a0;
              DAM.Machine._IVal _412_val = _411___mcc_h2;
              DAM.Dynamics.__default.PrintVal(_412_val);
            }
          }
          _406_input = _409_output;
        } else {
          if (traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("done.\n")).ToVerbatimString(false));
          }
          goto after_0;
        }
      continue_0:;
      }
    after_0:;
    }
    public static void Test() {
      DAM.Syntax._IExpr _413_fc;
      _413_fc = DAM.Syntax.Expr.create_Thunk(DAM.Syntax.Stmt.create_Func(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("y"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x")))));
      DAM.Syntax._IStmt _414_fv;
      _414_fv = DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f")));
      DAM.Syntax._IExpr _415_x1;
      _415_x1 = DAM.Syntax.Expr.create_Int(BigInteger.One);
      DAM.Syntax._IExpr _416_x2;
      _416_x2 = DAM.Syntax.Expr.create_Int(new BigInteger(2));
      DAM.Syntax._IExpr _417_z;
      _417_z = DAM.Syntax.Expr.create_Int(BigInteger.Zero);
      DAM.Syntax._IStmt _418_term;
      _418_term = DAM.Syntax.__default.Let(_415_x1, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.__default.Let(_413_fc, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("f"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.__default.Let(_416_x2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("x"), DAM.Syntax.Pos.create_Int(), DAM.Syntax.Stmt.create_Call(_414_fv, _417_z))));
    }
  }
} // end of namespace DAM.Dynamics


namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _419_i = BigInteger.Zero; _419_i < _hi0; _419_i++) {
        Dafny.ISequence<Dafny.Rune> _420_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_419_i));
        _420_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _420_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _421_i = BigInteger.Zero; _421_i < _hi1; _421_i++) {
        DAST._IModuleItem _source42 = ((mod).dtor_body).Select(_421_i);
        if (_source42.is_Module) {
          DAST._IModule _422___mcc_h0 = _source42.dtor_Module_a0;
          DAST._IModule _423_m = _422___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _424_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_423_m);
          _424_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _424_s_k);
        } else if (_source42.is_Class) {
          DAST._IClass _425___mcc_h1 = _source42.dtor_Class_a0;
          DAST._IClass _426_c = _425___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _427_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_426_c);
          _427_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _427_s_k);
        } else if (_source42.is_Trait) {
          DAST._ITrait _428___mcc_h2 = _source42.dtor_Trait_a0;
          DAST._ITrait _429_c = _428___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source42.is_Newtype) {
          DAST._INewtype _430___mcc_h3 = _source42.dtor_Newtype_a0;
          DAST._INewtype _431_n = _430___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _432___mcc_h4 = _source42.dtor_Datatype_a0;
          DAST._IDatatype _433_d = _432___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _434_i = BigInteger.Zero; _434_i < _hi2; _434_i++) {
        DAST._IMethod _source43 = ((c).dtor_body).Select(_434_i);
        DAST._IMethod _435___mcc_h0 = _source43;
        DAST._IMethod _436_m = _435___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _437_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_436_m);
        _437_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _437_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _438_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _438_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _438_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _438_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _438_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _439_i = BigInteger.Zero; _439_i < _hi3; _439_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_439_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _440_i = BigInteger.Zero; _440_i < _hi4; _440_i++) {
        Dafny.ISequence<Dafny.Rune> _441_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_440_i));
        _441_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _441_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source44 = st;
      if (_source44.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _442___mcc_h0 = _source44.dtor_name;
        DAST._IType _443___mcc_h1 = _source44.dtor_typ;
        DAST._IOptional<DAST._IExpression> _444___mcc_h2 = _source44.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Assign) {
        DAST._IAssignLhs _445___mcc_h6 = _source44.dtor_lhs;
        DAST._IExpression _446___mcc_h7 = _source44.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_If) {
        DAST._IExpression _447___mcc_h10 = _source44.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _448___mcc_h11 = _source44.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _449___mcc_h12 = _source44.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _450___mcc_h16 = _source44.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _451___mcc_h17 = _source44.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_While) {
        DAST._IExpression _452___mcc_h20 = _source44.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _453___mcc_h21 = _source44.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _454___mcc_h24 = _source44.dtor_boundName;
        DAST._IType _455___mcc_h25 = _source44.dtor_boundType;
        DAST._IExpression _456___mcc_h26 = _source44.dtor_over;
        Dafny.ISequence<DAST._IStatement> _457___mcc_h27 = _source44.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Call) {
        DAST._IExpression _458___mcc_h32 = _source44.dtor_on;
        Dafny.ISequence<Dafny.Rune> _459___mcc_h33 = _source44.dtor_name;
        Dafny.ISequence<DAST._IType> _460___mcc_h34 = _source44.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _461___mcc_h35 = _source44.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _462___mcc_h36 = _source44.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Return) {
        DAST._IExpression _463___mcc_h42 = _source44.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source44.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _464___mcc_h44 = _source44.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _465___mcc_h46 = _source44.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source44.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _466___mcc_h48 = _source44.dtor_Print_a0;
        DAST._IExpression _467_e = _466___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _468_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_467_e);
        _468_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _468_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source45 = e;
      if (_source45.is_Literal) {
        DAST._ILiteral _469___mcc_h0 = _source45.dtor_Literal_a0;
        DAST._ILiteral _470_l = _469___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_470_l);
        s = _out9;
      } else if (_source45.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _471___mcc_h2 = _source45.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _472___mcc_h4 = _source45.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _473___mcc_h6 = _source45.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _474___mcc_h8 = _source45.dtor_path;
        Dafny.ISequence<DAST._IType> _475___mcc_h9 = _source45.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _476___mcc_h10 = _source45.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _477___mcc_h14 = _source45.dtor_dims;
        DAST._IType _478___mcc_h15 = _source45.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _479___mcc_h18 = _source45.dtor_path;
        Dafny.ISequence<DAST._IType> _480___mcc_h19 = _source45.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _481___mcc_h20 = _source45.dtor_variant;
        bool _482___mcc_h21 = _source45.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _483___mcc_h22 = _source45.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Convert) {
        DAST._IExpression _484___mcc_h28 = _source45.dtor_value;
        DAST._IType _485___mcc_h29 = _source45.dtor_from;
        DAST._IType _486___mcc_h30 = _source45.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SeqConstruct) {
        DAST._IExpression _487___mcc_h34 = _source45.dtor_length;
        DAST._IExpression _488___mcc_h35 = _source45.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _489___mcc_h38 = _source45.dtor_elements;
        DAST._IType _490___mcc_h39 = _source45.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _491___mcc_h42 = _source45.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _492___mcc_h44 = _source45.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Ite) {
        DAST._IExpression _493___mcc_h46 = _source45.dtor_cond;
        DAST._IExpression _494___mcc_h47 = _source45.dtor_thn;
        DAST._IExpression _495___mcc_h48 = _source45.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_UnOp) {
        DAST._IUnaryOp _496___mcc_h52 = _source45.dtor_unOp;
        DAST._IExpression _497___mcc_h53 = _source45.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_BinOp) {
        DAST._IBinOp _498___mcc_h56 = _source45.dtor_op;
        DAST._IExpression _499___mcc_h57 = _source45.dtor_left;
        DAST._IExpression _500___mcc_h58 = _source45.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_ArrayLen) {
        DAST._IExpression _501___mcc_h62 = _source45.dtor_expr;
        BigInteger _502___mcc_h63 = _source45.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Select) {
        DAST._IExpression _503___mcc_h66 = _source45.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _504___mcc_h67 = _source45.dtor_field;
        bool _505___mcc_h68 = _source45.dtor_isConstant;
        bool _506___mcc_h69 = _source45.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SelectFn) {
        DAST._IExpression _507___mcc_h74 = _source45.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _508___mcc_h75 = _source45.dtor_field;
        bool _509___mcc_h76 = _source45.dtor_onDatatype;
        bool _510___mcc_h77 = _source45.dtor_isStatic;
        BigInteger _511___mcc_h78 = _source45.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Index) {
        DAST._IExpression _512___mcc_h84 = _source45.dtor_expr;
        DAST._ICollKind _513___mcc_h85 = _source45.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _514___mcc_h86 = _source45.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_IndexRange) {
        DAST._IExpression _515___mcc_h90 = _source45.dtor_expr;
        bool _516___mcc_h91 = _source45.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _517___mcc_h92 = _source45.dtor_low;
        DAST._IOptional<DAST._IExpression> _518___mcc_h93 = _source45.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_TupleSelect) {
        DAST._IExpression _519___mcc_h98 = _source45.dtor_expr;
        BigInteger _520___mcc_h99 = _source45.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Call) {
        DAST._IExpression _521___mcc_h102 = _source45.dtor_on;
        Dafny.ISequence<Dafny.Rune> _522___mcc_h103 = _source45.dtor_name;
        Dafny.ISequence<DAST._IType> _523___mcc_h104 = _source45.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _524___mcc_h105 = _source45.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _525___mcc_h110 = _source45.dtor_params;
        DAST._IType _526___mcc_h111 = _source45.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _527___mcc_h112 = _source45.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _528___mcc_h116 = _source45.dtor_values;
        DAST._IType _529___mcc_h117 = _source45.dtor_retType;
        DAST._IExpression _530___mcc_h118 = _source45.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _531___mcc_h122 = _source45.dtor_name;
        DAST._IType _532___mcc_h123 = _source45.dtor_typ;
        DAST._IExpression _533___mcc_h124 = _source45.dtor_value;
        DAST._IExpression _534___mcc_h125 = _source45.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_Apply) {
        DAST._IExpression _535___mcc_h130 = _source45.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _536___mcc_h131 = _source45.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_TypeTest) {
        DAST._IExpression _537___mcc_h134 = _source45.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _538___mcc_h135 = _source45.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _539___mcc_h136 = _source45.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_InitializationValue) {
        DAST._IType _540___mcc_h140 = _source45.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SetBoundedPool) {
        DAST._IExpression _541___mcc_h142 = _source45.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source45.is_SeqBoundedPool) {
        DAST._IExpression _542___mcc_h144 = _source45.dtor_of;
        bool _543___mcc_h145 = _source45.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _544___mcc_h148 = _source45.dtor_lo;
        DAST._IExpression _545___mcc_h149 = _source45.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source46 = l;
      if (_source46.is_BoolLiteral) {
        bool _546___mcc_h0 = _source46.dtor_BoolLiteral_a0;
        bool _547_b = _546___mcc_h0;
        s = ((_547_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source46.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _548___mcc_h1 = _source46.dtor_IntLiteral_a0;
        DAST._IType _549___mcc_h2 = _source46.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _550_i = _548___mcc_h1;
        s = _550_i;
      } else if (_source46.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _551___mcc_h3 = _source46.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _552___mcc_h4 = _source46.dtor_DecLiteral_a1;
        DAST._IType _553___mcc_h5 = _source46.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _554_r = _552___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _555_l = _551___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_555_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _554_r);
      } else if (_source46.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _556___mcc_h6 = _source46.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _557_s_k = _556___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _557_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source46.is_CharLiteral) {
        Dafny.Rune _558___mcc_h7 = _source46.dtor_CharLiteral_a0;
        Dafny.Rune _559_c = _558___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_559_c);
      } else {
        DAST._IType _560___mcc_h8 = _source46.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {

  public partial class __default {
    public static DAM.Utils._IOption<BigInteger> ToNat(Dafny.ISequence<Dafny.Rune> str) {
      Dafny.IMap<Dafny.Rune, BigInteger> _561_charToDigit = Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return DAM.Utils.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Dafny.Rune _562_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        DAM.Utils._IOption<BigInteger> _563_valueOrError0 = (((_561_charToDigit).Contains(_562_c)) ? (DAM.Utils.Option<BigInteger>.create_Some(Dafny.Map<Dafny.Rune, BigInteger>.Select(_561_charToDigit, _562_c))) : (DAM.Utils.Option<BigInteger>.create_None()));
        if ((_563_valueOrError0).IsFailure()) {
          return (_563_valueOrError0).PropagateFailure<BigInteger>();
        } else {
          BigInteger _564_d = (_563_valueOrError0).Extract();
          DAM.Utils._IOption<BigInteger> _565_valueOrError1 = ResolvedDesugaredExecutableDafnyPlugin.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)));
          if ((_565_valueOrError1).IsFailure()) {
            return (_565_valueOrError1).PropagateFailure<BigInteger>();
          } else {
            BigInteger _566_rest = (_565_valueOrError1).Extract();
            return DAM.Utils.Option<BigInteger>.create_Some(((_566_rest) * (new BigInteger(10))) + (_564_d));
          }
        }
      }
    }
    public static DAM.Utils._IOption<BigInteger> ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        DAM.Utils._IOption<BigInteger> _source47 = ResolvedDesugaredExecutableDafnyPlugin.__default.ToNat((str).Drop(BigInteger.One));
        if (_source47.is_None) {
          return DAM.Utils.Option<BigInteger>.create_None();
        } else {
          BigInteger _567___mcc_h0 = _source47.dtor_value;
          BigInteger _568_i = _567___mcc_h0;
          return DAM.Utils.Option<BigInteger>.create_Some((BigInteger.Zero) - (_568_i));
        }
      } else {
        return ResolvedDesugaredExecutableDafnyPlugin.__default.ToNat(str);
      }
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static DAM.Syntax._IPos PolarizePos(DAST._IType t) {
      DAM.Syntax._IPos p = DAM.Syntax.Pos.Default();
      DAST._IType _source48 = t;
      if (_source48.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _569___mcc_h0 = _source48.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _570___mcc_h1 = _source48.dtor_typeArgs;
        DAST._IResolvedType _571___mcc_h2 = _source48.dtor_resolved;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Nullable) {
        DAST._IType _572___mcc_h6 = _source48.dtor_Nullable_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Tuple) {
        Dafny.ISequence<DAST._IType> _573___mcc_h8 = _source48.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Array) {
        DAST._IType _574___mcc_h10 = _source48.dtor_element;
        BigInteger _575___mcc_h11 = _source48.dtor_dims;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Seq) {
        DAST._IType _576___mcc_h14 = _source48.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Set) {
        DAST._IType _577___mcc_h16 = _source48.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Multiset) {
        DAST._IType _578___mcc_h18 = _source48.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Map) {
        DAST._IType _579___mcc_h20 = _source48.dtor_key;
        DAST._IType _580___mcc_h21 = _source48.dtor_value;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Arrow) {
        Dafny.ISequence<DAST._IType> _581___mcc_h24 = _source48.dtor_args;
        DAST._IType _582___mcc_h25 = _source48.dtor_result;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source48.is_Primitive) {
        DAST._IPrimitive _583___mcc_h28 = _source48.dtor_Primitive_a0;
        DAST._IPrimitive _source49 = _583___mcc_h28;
        if (_source49.is_Int) {
          p = DAM.Syntax.Pos.create_Int();
          return p;
        } else if (_source49.is_Real) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source49.is_String) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source49.is_Bool) {
          p = DAM.Syntax.Pos.create_Bool();
          return p;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        }
      } else if (_source48.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _584___mcc_h30 = _source48.dtor_Passthrough_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else {
        Dafny.ISequence<Dafny.Rune> _585___mcc_h32 = _source48.dtor_TypeArg_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      }
      return p;
    }
    public static DAM.Syntax._IStmt EmitModule(DAST._IModule m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _586_members;
      _586_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi5 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _587_i = BigInteger.Zero; _587_i < _hi5; _587_i++) {
        DAST._IModuleItem _source50 = ((m).dtor_body).Select(_587_i);
        if (_source50.is_Module) {
          DAST._IModule _588___mcc_h0 = _source50.dtor_Module_a0;
          DAST._IModule _589_m = _588___mcc_h0;
          DAM.Syntax._IStmt _590_mod;
          DAM.Syntax._IStmt _out10;
          _out10 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule(_589_m);
          _590_mod = _out10;
          _586_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_586_members, (_589_m).dtor_name, _590_mod);
        } else if (_source50.is_Class) {
          DAST._IClass _591___mcc_h2 = _source50.dtor_Class_a0;
          DAST._IClass _592_c = _591___mcc_h2;
          DAM.Syntax._IStmt _593_cls;
          DAM.Syntax._IStmt _out11;
          _out11 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitClass(_592_c);
          _593_cls = _out11;
          _586_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_586_members, (_592_c).dtor_name, _593_cls);
        } else if (_source50.is_Trait) {
          DAST._ITrait _594___mcc_h4 = _source50.dtor_Trait_a0;
          goto continue_0;
        } else if (_source50.is_Newtype) {
          DAST._INewtype _595___mcc_h6 = _source50.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _596___mcc_h8 = _source50.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      s = DAM.Syntax.Stmt.create_Record(_586_members);
      return s;
    }
    public static DAM.Syntax._IStmt EmitClass(DAST._IClass c) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _597_fields;
      _597_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi6 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _598_i = BigInteger.Zero; _598_i < _hi6; _598_i++) {
        DAST._IMethod _source51 = ((c).dtor_body).Select(_598_i);
        DAST._IMethod _599___mcc_h0 = _source51;
        DAST._IMethod _600_m = _599___mcc_h0;
        DAM.Syntax._IStmt _601_meth;
        DAM.Syntax._IStmt _out12;
        _out12 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitMethod(_600_m);
        _601_meth = _out12;
        _597_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_597_fields, (_600_m).dtor_name, _601_meth);
      }
      s = DAM.Syntax.Stmt.create_Record(_597_fields);
      return s;
    }
    public static DAM.Syntax._IStmt EmitMethod(DAST._IMethod m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAM.Syntax._IStmt _602_body;
      DAM.Syntax._IStmt _out13;
      _out13 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock((m).dtor_body);
      _602_body = _out13;
      s = DAM.Syntax.Stmt.create_LetCS(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), DAM.Syntax.__default.Command(), _602_body);
      DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source52 = (m).dtor_outVars;
      if (_source52.is_Some) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _603___mcc_h0 = _source52.dtor_Some_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _604_outs = _603___mcc_h0;
        {
          BigInteger _hi7 = new BigInteger((_604_outs).Count);
          for (BigInteger _605_i = BigInteger.Zero; _605_i < _hi7; _605_i++) {
            Dafny.ISequence<Dafny.Rune> _source53 = (_604_outs).Select(((new BigInteger((_604_outs).Count)) - (_605_i)) - (BigInteger.One));
            Dafny.ISequence<Dafny.Rune> _606___mcc_h1 = _source53;
            Dafny.ISequence<Dafny.Rune> _607_ret = _606___mcc_h1;
            if (!((_605_i) < (new BigInteger(((m).dtor_outTypes).Count)))) {
              throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(114,12): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
            }
            DAM.Syntax._IPos _608_cod;
            DAM.Syntax._IPos _out14;
            _out14 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(((m).dtor_outTypes).Select(_605_i));
            _608_cod = _out14;
            s = DAM.Syntax.Stmt.create_Func(_607_ret, DAM.Syntax.Pos.create_Ref(_608_cod), s);
          }
        }
      } else {
      }
      BigInteger _hi8 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _609_i = BigInteger.Zero; _609_i < _hi8; _609_i++) {
        DAST._IFormal _source54 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_609_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _610___mcc_h2 = _source54.dtor_name;
        DAST._IType _611___mcc_h3 = _source54.dtor_typ;
        DAST._IType _612_dom = _611___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _613_arg = _610___mcc_h2;
        DAM.Syntax._IPos _614_dom;
        DAM.Syntax._IPos _out15;
        _out15 = ResolvedDesugaredExecutableDafnyPlugin.COMP.PolarizePos(_612_dom);
        _614_dom = _out15;
        s = DAM.Syntax.Stmt.create_Func(_613_arg, DAM.Syntax.Pos.create_Ref(_614_dom), s);
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitExpr(DAST._IExpression e) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAST._IExpression _source55 = e;
      if (_source55.is_Literal) {
        DAST._ILiteral _615___mcc_h0 = _source55.dtor_Literal_a0;
        DAST._ILiteral _source56 = _615___mcc_h0;
        if (_source56.is_BoolLiteral) {
          bool _616___mcc_h2 = _source56.dtor_BoolLiteral_a0;
          bool _617_b = _616___mcc_h2;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(_617_b));
          return s;
        } else if (_source56.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _618___mcc_h4 = _source56.dtor_IntLiteral_a0;
          DAST._IType _619___mcc_h5 = _source56.dtor_IntLiteral_a1;
          Dafny.ISequence<Dafny.Rune> _620_i = _618___mcc_h4;
          {
            DAM.Utils._IOption<BigInteger> _source57 = ResolvedDesugaredExecutableDafnyPlugin.__default.ToInt(_620_i, new Dafny.Rune('-'));
            if (_source57.is_None) {
              {
                Microsoft.Dafny.Compilers.WrapException.Throw();
                s = DAM.Syntax.__default.Skip();
                return s;
              }
            } else {
              BigInteger _621___mcc_h206 = _source57.dtor_value;
              BigInteger _622_i = _621___mcc_h206;
              s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(_622_i));
              return s;
            }
          }
        } else if (_source56.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _623___mcc_h8 = _source56.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _624___mcc_h9 = _source56.dtor_DecLiteral_a1;
          DAST._IType _625___mcc_h10 = _source56.dtor_DecLiteral_a2;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source56.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _626___mcc_h14 = _source56.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _627_str = _626___mcc_h14;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_String(_627_str));
          return s;
        } else if (_source56.is_CharLiteral) {
          Dafny.Rune _628___mcc_h16 = _source56.dtor_CharLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          DAST._IType _629___mcc_h18 = _source56.dtor_Null_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source55.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _630___mcc_h20 = _source55.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _631_v = _630___mcc_h20;
        s = DAM.Syntax.Stmt.create_Read(DAM.Syntax.Expr.create_Var(_631_v), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"))));
        return s;
      } else if (_source55.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _632___mcc_h22 = _source55.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _633_path = _632___mcc_h22;
        if (!((new BigInteger((_633_path).Count)).Sign == 1)) {
          throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(160,8): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
        }
        s = DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(((_633_path).Select(BigInteger.Zero))));
        BigInteger _hi9 = new BigInteger((_633_path).Count);
        for (BigInteger _634_i = BigInteger.One; _634_i < _hi9; _634_i++) {
          s = DAM.Syntax.Stmt.create_Select(s, ((_633_path).Select(_634_i)));
        }
      } else if (_source55.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _635___mcc_h24 = _source55.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _636___mcc_h26 = _source55.dtor_path;
        Dafny.ISequence<DAST._IType> _637___mcc_h27 = _source55.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _638___mcc_h28 = _source55.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _639___mcc_h32 = _source55.dtor_dims;
        DAST._IType _640___mcc_h33 = _source55.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _641___mcc_h36 = _source55.dtor_path;
        Dafny.ISequence<DAST._IType> _642___mcc_h37 = _source55.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _643___mcc_h38 = _source55.dtor_variant;
        bool _644___mcc_h39 = _source55.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _645___mcc_h40 = _source55.dtor_contents;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Convert) {
        DAST._IExpression _646___mcc_h46 = _source55.dtor_value;
        DAST._IType _647___mcc_h47 = _source55.dtor_from;
        DAST._IType _648___mcc_h48 = _source55.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SeqConstruct) {
        DAST._IExpression _649___mcc_h52 = _source55.dtor_length;
        DAST._IExpression _650___mcc_h53 = _source55.dtor_elem;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _651___mcc_h56 = _source55.dtor_elements;
        DAST._IType _652___mcc_h57 = _source55.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _653___mcc_h60 = _source55.dtor_elements;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _654___mcc_h62 = _source55.dtor_mapElems;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_This) {
        s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")));
        return s;
      } else if (_source55.is_Ite) {
        DAST._IExpression _655___mcc_h64 = _source55.dtor_cond;
        DAST._IExpression _656___mcc_h65 = _source55.dtor_thn;
        DAST._IExpression _657___mcc_h66 = _source55.dtor_els;
        DAST._IExpression _658_els = _657___mcc_h66;
        DAST._IExpression _659_thn = _656___mcc_h65;
        DAST._IExpression _660_cond = _655___mcc_h64;
        DAM.Syntax._IStmt _661_cond;
        DAM.Syntax._IStmt _out16;
        _out16 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_660_cond);
        _661_cond = _out16;
        DAM.Syntax._IStmt _662_thn;
        DAM.Syntax._IStmt _out17;
        _out17 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_659_thn);
        _662_thn = _out17;
        DAM.Syntax._IStmt _663_els;
        DAM.Syntax._IStmt _out18;
        _out18 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_658_els);
        _663_els = _out18;
        s = DAM.Syntax.Stmt.create_Bind(_661_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _662_thn, _663_els));
        return s;
      } else if (_source55.is_UnOp) {
        DAST._IUnaryOp _664___mcc_h70 = _source55.dtor_unOp;
        DAST._IExpression _665___mcc_h71 = _source55.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_BinOp) {
        DAST._IBinOp _666___mcc_h74 = _source55.dtor_op;
        DAST._IExpression _667___mcc_h75 = _source55.dtor_left;
        DAST._IExpression _668___mcc_h76 = _source55.dtor_right;
        DAST._IExpression _669_rhs = _668___mcc_h76;
        DAST._IExpression _670_lhs = _667___mcc_h75;
        DAST._IBinOp _671_op = _666___mcc_h74;
        DAM.Syntax._IStmt _672_lhs;
        DAM.Syntax._IStmt _out19;
        _out19 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_670_lhs);
        _672_lhs = _out19;
        DAM.Syntax._IStmt _673_rhs;
        DAM.Syntax._IStmt _out20;
        _out20 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_669_rhs);
        _673_rhs = _out20;
        DAM.Syntax._IExpr _674_lvar;
        _674_lvar = DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_lhs"));
        DAM.Syntax._IExpr _675_rvar;
        _675_rvar = DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_rhs"));
        DAM.Syntax._IStmt _676_end = DAM.Syntax.Stmt.Default();
        DAST._IBinOp _source58 = _671_op;
        if (_source58.is_Eq) {
          bool _677___mcc_h207 = _source58.dtor_referential;
          bool _678___mcc_h208 = _source58.dtor_nullable;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Neq) {
          bool _679___mcc_h211 = _source58.dtor_referential;
          bool _680___mcc_h212 = _source58.dtor_nullable;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Div) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_EuclidianDiv) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Mod) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_EuclidianMod) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Implies) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_In) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_NotIn) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_SetDifference) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else if (_source58.is_Concat) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          _676_end = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _681___mcc_h215 = _source58.dtor_Passthrough_a0;
          if (object.Equals(_681___mcc_h215, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
            _676_end = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Plus(_674_lvar, _675_rvar));
          } else if (object.Equals(_681___mcc_h215, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
            _676_end = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_LT(_674_lvar, _675_rvar));
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            _676_end = DAM.Syntax.__default.Skip();
          }
        }
        s = DAM.Syntax.Stmt.create_Bind(_672_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_lhs"), DAM.Syntax.Stmt.create_Bind(_673_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var_rhs"), _676_end));
        return s;
      } else if (_source55.is_ArrayLen) {
        DAST._IExpression _682___mcc_h80 = _source55.dtor_expr;
        BigInteger _683___mcc_h81 = _source55.dtor_dim;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Select) {
        DAST._IExpression _684___mcc_h84 = _source55.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _685___mcc_h85 = _source55.dtor_field;
        bool _686___mcc_h86 = _source55.dtor_isConstant;
        bool _687___mcc_h87 = _source55.dtor_onDatatype;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SelectFn) {
        DAST._IExpression _688___mcc_h92 = _source55.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _689___mcc_h93 = _source55.dtor_field;
        bool _690___mcc_h94 = _source55.dtor_onDatatype;
        bool _691___mcc_h95 = _source55.dtor_isStatic;
        BigInteger _692___mcc_h96 = _source55.dtor_arity;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Index) {
        DAST._IExpression _693___mcc_h102 = _source55.dtor_expr;
        DAST._ICollKind _694___mcc_h103 = _source55.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _695___mcc_h104 = _source55.dtor_indices;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_IndexRange) {
        DAST._IExpression _696___mcc_h108 = _source55.dtor_expr;
        bool _697___mcc_h109 = _source55.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _698___mcc_h110 = _source55.dtor_low;
        DAST._IOptional<DAST._IExpression> _699___mcc_h111 = _source55.dtor_high;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_TupleSelect) {
        DAST._IExpression _700___mcc_h116 = _source55.dtor_expr;
        BigInteger _701___mcc_h117 = _source55.dtor_index;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Call) {
        DAST._IExpression _702___mcc_h120 = _source55.dtor_on;
        Dafny.ISequence<Dafny.Rune> _703___mcc_h121 = _source55.dtor_name;
        Dafny.ISequence<DAST._IType> _704___mcc_h122 = _source55.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _705___mcc_h123 = _source55.dtor_args;
        Dafny.ISequence<Dafny.Rune> _source59 = _703___mcc_h121;
        Dafny.ISequence<Dafny.Rune> _706___mcc_h128 = _source59;
        Dafny.ISequence<DAST._IExpression> _707_args = _705___mcc_h123;
        Dafny.ISequence<Dafny.Rune> _708_meth = _706___mcc_h128;
        DAST._IExpression _709_obj = _702___mcc_h120;
        DAM.Syntax._IStmt _out21;
        _out21 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_709_obj);
        s = _out21;
        s = DAM.Syntax.Stmt.create_Select(s, _708_meth);
        BigInteger _hi10 = new BigInteger((_707_args).Count);
        for (BigInteger _710_i = BigInteger.Zero; _710_i < _hi10; _710_i++) {
          DAM.Syntax._IStmt _711_arg;
          DAM.Syntax._IStmt _out22;
          _out22 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr((_707_args).Select(_710_i));
          _711_arg = _out22;
          s = DAM.Syntax.Stmt.create_Bind(_711_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(s, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
        }
      } else if (_source55.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _712___mcc_h130 = _source55.dtor_params;
        DAST._IType _713___mcc_h131 = _source55.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _714___mcc_h132 = _source55.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _715___mcc_h136 = _source55.dtor_values;
        DAST._IType _716___mcc_h137 = _source55.dtor_retType;
        DAST._IExpression _717___mcc_h138 = _source55.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _718___mcc_h142 = _source55.dtor_name;
        DAST._IType _719___mcc_h143 = _source55.dtor_typ;
        DAST._IExpression _720___mcc_h144 = _source55.dtor_value;
        DAST._IExpression _721___mcc_h145 = _source55.dtor_iifeBody;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_Apply) {
        DAST._IExpression _722___mcc_h150 = _source55.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _723___mcc_h151 = _source55.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_TypeTest) {
        DAST._IExpression _724___mcc_h154 = _source55.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _725___mcc_h155 = _source55.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _726___mcc_h156 = _source55.dtor_variant;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_InitializationValue) {
        DAST._IType _727___mcc_h160 = _source55.dtor_typ;
        DAST._IType _source60 = _727___mcc_h160;
        if (_source60.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _728___mcc_h162 = _source60.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _729___mcc_h163 = _source60.dtor_typeArgs;
          DAST._IResolvedType _730___mcc_h164 = _source60.dtor_resolved;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Nullable) {
          DAST._IType _731___mcc_h168 = _source60.dtor_Nullable_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Tuple) {
          Dafny.ISequence<DAST._IType> _732___mcc_h170 = _source60.dtor_Tuple_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Array) {
          DAST._IType _733___mcc_h172 = _source60.dtor_element;
          BigInteger _734___mcc_h173 = _source60.dtor_dims;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Seq) {
          DAST._IType _735___mcc_h176 = _source60.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Set) {
          DAST._IType _736___mcc_h178 = _source60.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Multiset) {
          DAST._IType _737___mcc_h180 = _source60.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Map) {
          DAST._IType _738___mcc_h182 = _source60.dtor_key;
          DAST._IType _739___mcc_h183 = _source60.dtor_value;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Arrow) {
          Dafny.ISequence<DAST._IType> _740___mcc_h186 = _source60.dtor_args;
          DAST._IType _741___mcc_h187 = _source60.dtor_result;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source60.is_Primitive) {
          DAST._IPrimitive _742___mcc_h190 = _source60.dtor_Primitive_a0;
          DAST._IPrimitive _source61 = _742___mcc_h190;
          if (_source61.is_Int) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
            return s;
          } else if (_source61.is_Real) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source61.is_String) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source61.is_Bool) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
            return s;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          }
        } else if (_source60.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _743___mcc_h192 = _source60.dtor_Passthrough_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _744___mcc_h194 = _source60.dtor_TypeArg_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source55.is_BoolBoundedPool) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SetBoundedPool) {
        DAST._IExpression _745___mcc_h196 = _source55.dtor_of;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source55.is_SeqBoundedPool) {
        DAST._IExpression _746___mcc_h198 = _source55.dtor_of;
        bool _747___mcc_h199 = _source55.dtor_includeDuplicates;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else {
        DAST._IExpression _748___mcc_h202 = _source55.dtor_lo;
        DAST._IExpression _749___mcc_h203 = _source55.dtor_hi;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitBlock(Dafny.ISequence<DAST._IStatement> block) {
      DAM.Syntax._IStmt st = DAM.Syntax.Stmt.Default();
      if ((new BigInteger((block).Count)).Sign != 1) {
        st = DAM.Syntax.__default.Skip();
        return st;
      }
      Dafny.ISequence<DAST._IStatement> _750_next;
      _750_next = (block).Drop(BigInteger.One);
      DAST._IStatement _source62 = (block).Select(BigInteger.Zero);
      if (_source62.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _751___mcc_h0 = _source62.dtor_name;
        DAST._IType _752___mcc_h1 = _source62.dtor_typ;
        DAST._IOptional<DAST._IExpression> _753___mcc_h2 = _source62.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _754_init = _753___mcc_h2;
        DAST._IType _755_ty = _752___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _756_var__ = _751___mcc_h0;
        DAM.Syntax._IStmt _757_init;
        DAM.Syntax._IStmt _out23;
        _out23 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitRHS(_755_ty, _754_init);
        _757_init = _out23;
        DAM.Syntax._IStmt _758_next;
        DAM.Syntax._IStmt _out24;
        _out24 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_750_next);
        _758_next = _out24;
        st = DAM.Syntax.Stmt.create_Bind(_757_init, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _756_var__, _758_next));
        return st;
      } else if (_source62.is_Assign) {
        DAST._IAssignLhs _759___mcc_h6 = _source62.dtor_lhs;
        DAST._IExpression _760___mcc_h7 = _source62.dtor_value;
        DAST._IExpression _761_rhs = _760___mcc_h7;
        DAST._IAssignLhs _762_lhs = _759___mcc_h6;
        {
          DAM.Syntax._IStmt _763_rhs;
          DAM.Syntax._IStmt _out25;
          _out25 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_761_rhs);
          _763_rhs = _out25;
          DAM.Syntax._IStmt _764_next;
          DAM.Syntax._IStmt _out26;
          _out26 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_750_next);
          _764_next = _out26;
          DAST._IAssignLhs _source63 = _762_lhs;
          if (_source63.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _765___mcc_h50 = _source63.dtor_Ident_a0;
            Dafny.ISequence<Dafny.Rune> _source64 = _765___mcc_h50;
            Dafny.ISequence<Dafny.Rune> _766___mcc_h52 = _source64;
            Dafny.ISequence<Dafny.Rune> _767_v = _766___mcc_h52;
            st = DAM.Syntax.Stmt.create_Bind(_763_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Write(DAM.Syntax.Expr.create_Var(_767_v), DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _764_next));
            return st;
          } else if (_source63.is_Select) {
            DAST._IExpression _768___mcc_h54 = _source63.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _769___mcc_h55 = _source63.dtor_field;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          } else {
            DAST._IExpression _770___mcc_h58 = _source63.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _771___mcc_h59 = _source63.dtor_indices;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source62.is_If) {
        DAST._IExpression _772___mcc_h10 = _source62.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _773___mcc_h11 = _source62.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _774___mcc_h12 = _source62.dtor_els;
        Dafny.ISequence<DAST._IStatement> _775_els = _774___mcc_h12;
        Dafny.ISequence<DAST._IStatement> _776_thn = _773___mcc_h11;
        DAST._IExpression _777_cond = _772___mcc_h10;
        DAM.Syntax._IStmt _778_cond;
        DAM.Syntax._IStmt _out27;
        _out27 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_777_cond);
        _778_cond = _out27;
        DAM.Syntax._IStmt _779_thn;
        DAM.Syntax._IStmt _out28;
        _out28 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_776_thn);
        _779_thn = _out28;
        DAM.Syntax._IStmt _780_els;
        DAM.Syntax._IStmt _out29;
        _out29 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_775_els);
        _780_els = _out29;
        DAM.Syntax._IStmt _781_next;
        DAM.Syntax._IStmt _out30;
        _out30 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_750_next);
        _781_next = _out30;
        st = DAM.Syntax.__default.Then(DAM.Syntax.Stmt.create_Bind(_778_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _779_thn, _780_els)), _781_next);
      } else if (_source62.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _782___mcc_h16 = _source62.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _783___mcc_h17 = _source62.dtor_body;
        Dafny.ISequence<DAST._IStatement> _784_stmt = _783___mcc_h17;
        Dafny.ISequence<Dafny.Rune> _785_lab = _782___mcc_h16;
        DAM.Syntax._IStmt _786_block;
        DAM.Syntax._IStmt _out31;
        _out31 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(Dafny.Sequence<DAST._IStatement>.Concat(_784_stmt, _750_next));
        _786_block = _out31;
        st = DAM.Syntax.Stmt.create_LetCS(_785_lab, DAM.Syntax.__default.Command(), _786_block);
        return st;
      } else if (_source62.is_While) {
        DAST._IExpression _787___mcc_h20 = _source62.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _788___mcc_h21 = _source62.dtor_body;
        Dafny.ISequence<DAST._IStatement> _789_body = _788___mcc_h21;
        DAST._IExpression _790_guard = _787___mcc_h20;
        DAM.Syntax._IStmt _791_guard;
        DAM.Syntax._IStmt _out32;
        _out32 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_790_guard);
        _791_guard = _out32;
        DAM.Syntax._IStmt _792_body;
        DAM.Syntax._IStmt _out33;
        _out33 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_789_body);
        _792_body = _out33;
        DAM.Syntax._IStmt _793_next;
        DAM.Syntax._IStmt _out34;
        _out34 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_750_next);
        _793_next = _out34;
        st = DAM.Syntax.__default.While(_791_guard, _792_body, _793_next);
      } else if (_source62.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _794___mcc_h24 = _source62.dtor_boundName;
        DAST._IType _795___mcc_h25 = _source62.dtor_boundType;
        DAST._IExpression _796___mcc_h26 = _source62.dtor_over;
        Dafny.ISequence<DAST._IStatement> _797___mcc_h27 = _source62.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source62.is_Call) {
        DAST._IExpression _798___mcc_h32 = _source62.dtor_on;
        Dafny.ISequence<Dafny.Rune> _799___mcc_h33 = _source62.dtor_name;
        Dafny.ISequence<DAST._IType> _800___mcc_h34 = _source62.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _801___mcc_h35 = _source62.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _802___mcc_h36 = _source62.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _803_outs = _802___mcc_h36;
        Dafny.ISequence<DAST._IExpression> _804_args = _801___mcc_h35;
        Dafny.ISequence<Dafny.Rune> _805_meth = _799___mcc_h33;
        DAST._IExpression _806_obj = _798___mcc_h32;
        {
          DAM.Syntax._IStmt _807_obj;
          DAM.Syntax._IStmt _out35;
          _out35 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_806_obj);
          _807_obj = _out35;
          st = DAM.Syntax.Stmt.create_Select(_807_obj, _805_meth);
          BigInteger _hi11 = new BigInteger((_804_args).Count);
          for (BigInteger _808_i = BigInteger.Zero; _808_i < _hi11; _808_i++) {
            DAM.Syntax._IStmt _809_arg;
            DAM.Syntax._IStmt _out36;
            _out36 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr((_804_args).Select(_808_i));
            _809_arg = _out36;
            st = DAM.Syntax.Stmt.create_Bind(_809_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
          }
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source65 = _803_outs;
          if (_source65.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _810___mcc_h62 = _source65.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _811_outs = _810___mcc_h62;
            {
              BigInteger _hi12 = new BigInteger((_811_outs).Count);
              for (BigInteger _812_i = BigInteger.Zero; _812_i < _hi12; _812_i++) {
                st = DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(((_811_outs).Select(_812_i))));
              }
            }
          } else {
          }
          DAM.Syntax._IStmt _813_next;
          DAM.Syntax._IStmt _out37;
          _out37 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_750_next);
          _813_next = _out37;
          st = DAM.Syntax.__default.Then(st, _813_next);
        }
      } else if (_source62.is_Return) {
        DAST._IExpression _814___mcc_h42 = _source62.dtor_expr;
        DAST._IExpression _815_expr = _814___mcc_h42;
        DAM.Syntax._IStmt _816_ret;
        DAM.Syntax._IStmt _out38;
        _out38 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_815_expr);
        _816_ret = _out38;
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), _816_ret);
        return st;
      } else if (_source62.is_EarlyReturn) {
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
        return st;
      } else if (_source62.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _817___mcc_h44 = _source62.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _818_lab = _817___mcc_h44;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source66 = _818_lab;
          if (_source66.is_Some) {
            Dafny.ISequence<Dafny.Rune> _819___mcc_h63 = _source66.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _820_lab = _819___mcc_h63;
            st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(_820_lab), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
            return st;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source62.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _821___mcc_h46 = _source62.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source62.is_JumpTailCallStart) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source62.is_Halt) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else {
        DAST._IExpression _822___mcc_h48 = _source62.dtor_Print_a0;
        DAST._IExpression _823_expr = _822___mcc_h48;
        DAM.Syntax._IStmt _824_arg;
        DAM.Syntax._IStmt _out39;
        _out39 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_823_expr);
        _824_arg = _out39;
        DAM.Syntax._IStmt _825_next;
        DAM.Syntax._IStmt _out40;
        _out40 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitBlock(_750_next);
        _825_next = _out40;
        st = DAM.Syntax.Stmt.create_Bind(_824_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Print(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _825_next));
        return st;
      }
      return st;
    }
    public static DAM.Syntax._IStmt EmitRHS(DAST._IType type__, DAST._IOptional<DAST._IExpression> rhs) {
      DAM.Syntax._IStmt @out = DAM.Syntax.Stmt.Default();
      _System._ITuple2<DAST._IType, DAST._IOptional<DAST._IExpression>> _source67 = _System.Tuple2<DAST._IType, DAST._IOptional<DAST._IExpression>>.create(type__, rhs);
      DAST._IType _826___mcc_h0 = _source67.dtor__0;
      DAST._IOptional<DAST._IExpression> _827___mcc_h1 = _source67.dtor__1;
      DAST._IType _source68 = _826___mcc_h0;
      if (_source68.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _828___mcc_h4 = _source68.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _829___mcc_h5 = _source68.dtor_typeArgs;
        DAST._IResolvedType _830___mcc_h6 = _source68.dtor_resolved;
        DAST._IOptional<DAST._IExpression> _source69 = _827___mcc_h1;
        if (_source69.is_Some) {
          DAST._IExpression _831___mcc_h13 = _source69.dtor_Some_a0;
          DAST._IExpression _832_init = _831___mcc_h13;
          DAM.Syntax._IStmt _out41;
          _out41 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_832_init);
          @out = _out41;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Nullable) {
        DAST._IType _833___mcc_h15 = _source68.dtor_Nullable_a0;
        DAST._IOptional<DAST._IExpression> _source70 = _827___mcc_h1;
        if (_source70.is_Some) {
          DAST._IExpression _834___mcc_h18 = _source70.dtor_Some_a0;
          DAST._IExpression _835_init = _834___mcc_h18;
          DAM.Syntax._IStmt _out42;
          _out42 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_835_init);
          @out = _out42;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Tuple) {
        Dafny.ISequence<DAST._IType> _836___mcc_h20 = _source68.dtor_Tuple_a0;
        DAST._IOptional<DAST._IExpression> _source71 = _827___mcc_h1;
        if (_source71.is_Some) {
          DAST._IExpression _837___mcc_h23 = _source71.dtor_Some_a0;
          DAST._IExpression _838_init = _837___mcc_h23;
          DAM.Syntax._IStmt _out43;
          _out43 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_838_init);
          @out = _out43;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Array) {
        DAST._IType _839___mcc_h25 = _source68.dtor_element;
        BigInteger _840___mcc_h26 = _source68.dtor_dims;
        DAST._IOptional<DAST._IExpression> _source72 = _827___mcc_h1;
        if (_source72.is_Some) {
          DAST._IExpression _841___mcc_h31 = _source72.dtor_Some_a0;
          DAST._IExpression _842_init = _841___mcc_h31;
          DAM.Syntax._IStmt _out44;
          _out44 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_842_init);
          @out = _out44;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Seq) {
        DAST._IType _843___mcc_h33 = _source68.dtor_element;
        DAST._IOptional<DAST._IExpression> _source73 = _827___mcc_h1;
        if (_source73.is_Some) {
          DAST._IExpression _844___mcc_h36 = _source73.dtor_Some_a0;
          DAST._IExpression _845_init = _844___mcc_h36;
          DAM.Syntax._IStmt _out45;
          _out45 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_845_init);
          @out = _out45;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Set) {
        DAST._IType _846___mcc_h38 = _source68.dtor_element;
        DAST._IOptional<DAST._IExpression> _source74 = _827___mcc_h1;
        if (_source74.is_Some) {
          DAST._IExpression _847___mcc_h41 = _source74.dtor_Some_a0;
          DAST._IExpression _848_init = _847___mcc_h41;
          DAM.Syntax._IStmt _out46;
          _out46 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_848_init);
          @out = _out46;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Multiset) {
        DAST._IType _849___mcc_h43 = _source68.dtor_element;
        DAST._IOptional<DAST._IExpression> _source75 = _827___mcc_h1;
        if (_source75.is_Some) {
          DAST._IExpression _850___mcc_h46 = _source75.dtor_Some_a0;
          DAST._IExpression _851_init = _850___mcc_h46;
          DAM.Syntax._IStmt _out47;
          _out47 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_851_init);
          @out = _out47;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Map) {
        DAST._IType _852___mcc_h48 = _source68.dtor_key;
        DAST._IType _853___mcc_h49 = _source68.dtor_value;
        DAST._IOptional<DAST._IExpression> _source76 = _827___mcc_h1;
        if (_source76.is_Some) {
          DAST._IExpression _854___mcc_h54 = _source76.dtor_Some_a0;
          DAST._IExpression _855_init = _854___mcc_h54;
          DAM.Syntax._IStmt _out48;
          _out48 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_855_init);
          @out = _out48;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Arrow) {
        Dafny.ISequence<DAST._IType> _856___mcc_h56 = _source68.dtor_args;
        DAST._IType _857___mcc_h57 = _source68.dtor_result;
        DAST._IOptional<DAST._IExpression> _source77 = _827___mcc_h1;
        if (_source77.is_Some) {
          DAST._IExpression _858___mcc_h62 = _source77.dtor_Some_a0;
          DAST._IExpression _859_init = _858___mcc_h62;
          DAM.Syntax._IStmt _out49;
          _out49 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_859_init);
          @out = _out49;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source68.is_Primitive) {
        DAST._IPrimitive _860___mcc_h64 = _source68.dtor_Primitive_a0;
        DAST._IPrimitive _source78 = _860___mcc_h64;
        if (_source78.is_Int) {
          DAST._IOptional<DAST._IExpression> _source79 = _827___mcc_h1;
          if (_source79.is_Some) {
            DAST._IExpression _861___mcc_h67 = _source79.dtor_Some_a0;
            DAST._IExpression _862_init = _861___mcc_h67;
            DAM.Syntax._IStmt _out50;
            _out50 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_862_init);
            @out = _out50;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
          }
        } else if (_source78.is_Real) {
          DAST._IOptional<DAST._IExpression> _source80 = _827___mcc_h1;
          if (_source80.is_Some) {
            DAST._IExpression _863___mcc_h70 = _source80.dtor_Some_a0;
            DAST._IExpression _864_init = _863___mcc_h70;
            DAM.Syntax._IStmt _out51;
            _out51 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_864_init);
            @out = _out51;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source78.is_String) {
          DAST._IOptional<DAST._IExpression> _source81 = _827___mcc_h1;
          if (_source81.is_Some) {
            DAST._IExpression _865___mcc_h72 = _source81.dtor_Some_a0;
            DAST._IExpression _866_init = _865___mcc_h72;
            DAM.Syntax._IStmt _out52;
            _out52 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_866_init);
            @out = _out52;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source78.is_Bool) {
          DAST._IOptional<DAST._IExpression> _source82 = _827___mcc_h1;
          if (_source82.is_Some) {
            DAST._IExpression _867___mcc_h74 = _source82.dtor_Some_a0;
            DAST._IExpression _868_init = _867___mcc_h74;
            DAM.Syntax._IStmt _out53;
            _out53 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_868_init);
            @out = _out53;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
          }
        } else {
          DAST._IOptional<DAST._IExpression> _source83 = _827___mcc_h1;
          if (_source83.is_Some) {
            DAST._IExpression _869___mcc_h77 = _source83.dtor_Some_a0;
            DAST._IExpression _870_init = _869___mcc_h77;
            DAM.Syntax._IStmt _out54;
            _out54 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_870_init);
            @out = _out54;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        }
      } else if (_source68.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _871___mcc_h79 = _source68.dtor_Passthrough_a0;
        DAST._IOptional<DAST._IExpression> _source84 = _827___mcc_h1;
        if (_source84.is_Some) {
          DAST._IExpression _872___mcc_h82 = _source84.dtor_Some_a0;
          DAST._IExpression _873_init = _872___mcc_h82;
          DAM.Syntax._IStmt _out55;
          _out55 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_873_init);
          @out = _out55;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _874___mcc_h84 = _source68.dtor_TypeArg_a0;
        DAST._IOptional<DAST._IExpression> _source85 = _827___mcc_h1;
        if (_source85.is_Some) {
          DAST._IExpression _875___mcc_h87 = _source85.dtor_Some_a0;
          DAST._IExpression _876_init = _875___mcc_h87;
          DAM.Syntax._IStmt _out56;
          _out56 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitExpr(_876_init);
          @out = _out56;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      }
      return @out;
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      bool _877_traced;
      _877_traced = false;
      Dafny.ISequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>> _878_modules;
      _878_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _879_bindings;
      _879_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements();
      BigInteger _hi13 = new BigInteger((p).Count);
      for (BigInteger _880_i = BigInteger.Zero; _880_i < _hi13; _880_i++) {
        Dafny.ISequence<Dafny.Rune> _881_name;
        _881_name = ((p).Select(_880_i)).dtor_name;
        if (_877_traced) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Lowering module ")).ToVerbatimString(false));
          Dafny.Helpers.Print((_881_name).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" into the DAM instruction set...\n")).ToVerbatimString(false));
        }
        DAM.Syntax._IStmt _882_m;
        DAM.Syntax._IStmt _out57;
        _out57 = ResolvedDesugaredExecutableDafnyPlugin.COMP.EmitModule((p).Select(_880_i));
        _882_m = _out57;
        DAM.Syntax._IExpr _883_mthunk;
        _883_mthunk = DAM.Syntax.Expr.create_Thunk(_882_m);
        DAM.Utils._IOption<DAM.Syntax._IPos> _884_mtype;
        _884_mtype = DAM.Statics.__default.SynthExpr(_879_bindings, _883_mthunk);
        if ((_884_mtype).is_None) {
          if (_877_traced) {
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unable to synthesize type for module ")).ToVerbatimString(false));
            Dafny.Helpers.Print((_881_name).ToVerbatimString(false));
            Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!\n")).ToVerbatimString(false));
          }
          return s;
        }
        if (_877_traced) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Successfully synthesized type for module ")).ToVerbatimString(false));
          Dafny.Helpers.Print((_881_name).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        }
        _878_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.Concat(_878_modules, Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements(_System.Tuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>.create(_881_name, _883_mthunk, (_884_mtype).Extract())));
        _879_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_879_bindings, _881_name, (_884_mtype).Extract());
      }
      DAM.Syntax._IStmt _885_body;
      _885_body = DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__default")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Main"));
      BigInteger _hi14 = new BigInteger((_878_modules).Count);
      for (BigInteger _886_i = BigInteger.Zero; _886_i < _hi14; _886_i++) {
        _System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos> _let_tmp_rhs7 = (_878_modules).Select(((new BigInteger((_878_modules).Count)) - (_886_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _887_name = _let_tmp_rhs7.dtor__0;
        DAM.Syntax._IExpr _888_mod = _let_tmp_rhs7.dtor__1;
        DAM.Syntax._IPos _889_modtype = _let_tmp_rhs7.dtor__2;
        _885_body = DAM.Syntax.__default.Let(_888_mod, _887_name, _889_modtype, _885_body);
      }
      DAM.Utils._IOption<DAM.Syntax._INeg> _890_end;
      _890_end = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), _885_body);
      if (!((_890_end).is_Some)) {
        throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(355,6): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RDE Dafny -> DAM did not preserve typability!").ToVerbatimString(false));
      }
      if (_877_traced) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Tracing execution of _module.__default.Main() below\n")).ToVerbatimString(false));
      }
      DAM.Dynamics.__default.Interpret(_885_body, _877_traced);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _891___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_891___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _891___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_891___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in9 = (i).Drop(BigInteger.One);
          i = _in9;
          goto TAIL_CALL_START;
        } else {
          _891___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_891___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in10 = (i).Drop(BigInteger.One);
          i = _in10;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _892_body;
      Dafny.ISequence<Dafny.Rune> _out58;
      _out58 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _892_body = _out58;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _892_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _893_i;
      _893_i = BigInteger.Zero;
      while ((_893_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _894_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source86 = (body).Select(_893_i);
        if (_source86.is_Module) {
          DAST._IModule _895___mcc_h0 = _source86.dtor_Module_a0;
          DAST._IModule _896_m = _895___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out59;
          _out59 = DCOMP.COMP.GenModule(_896_m, containingPath);
          _894_generated = _out59;
        } else if (_source86.is_Class) {
          DAST._IClass _897___mcc_h1 = _source86.dtor_Class_a0;
          DAST._IClass _898_c = _897___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out60;
          _out60 = DCOMP.COMP.GenClass(_898_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_898_c).dtor_name)));
          _894_generated = _out60;
        } else if (_source86.is_Trait) {
          DAST._ITrait _899___mcc_h2 = _source86.dtor_Trait_a0;
          DAST._ITrait _900_t = _899___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out61;
          _out61 = DCOMP.COMP.GenTrait(_900_t, containingPath);
          _894_generated = _out61;
        } else if (_source86.is_Newtype) {
          DAST._INewtype _901___mcc_h3 = _source86.dtor_Newtype_a0;
          DAST._INewtype _902_n = _901___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenNewtype(_902_n);
          _894_generated = _out62;
        } else {
          DAST._IDatatype _903___mcc_h4 = _source86.dtor_Datatype_a0;
          DAST._IDatatype _904_d = _903___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out63;
          _out63 = DCOMP.COMP.GenDatatype(_904_d);
          _894_generated = _out63;
        }
        if ((_893_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _894_generated);
        _893_i = (_893_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _905_tpI;
      _905_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_905_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _906_tp;
          _906_tp = (@params).Select(_905_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_906_tp));
          Dafny.ISequence<Dafny.Rune> _907_genTp;
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenType(_906_tp, false, false);
          _907_genTp = _out64;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _907_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _908_baseConstraints;
          _908_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _907_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _907_genTp), _908_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _907_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _907_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _907_genTp), _908_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _907_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _907_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _907_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _905_tpI = (_905_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _909_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _910_typeParams;
      Dafny.ISequence<Dafny.Rune> _911_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _912_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _913_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _914_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _915_erasedParams;
      Dafny.ISet<DAST._IType> _out65;
      Dafny.ISequence<Dafny.Rune> _out66;
      Dafny.ISequence<Dafny.Rune> _out67;
      Dafny.ISequence<Dafny.Rune> _out68;
      Dafny.ISequence<Dafny.Rune> _out69;
      Dafny.ISequence<Dafny.Rune> _out70;
      Dafny.ISequence<Dafny.Rune> _out71;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out65, out _out66, out _out67, out _out68, out _out69, out _out70, out _out71);
      _909_typeParamsSet = _out65;
      _910_typeParams = _out66;
      _911_constrainedTypeParams = _out67;
      _912_whereConstraints = _out68;
      _913_constrainedEraseParams = _out69;
      _914_unerasedParams = _out70;
      _915_erasedParams = _out71;
      Dafny.ISequence<Dafny.Rune> _916_fields;
      _916_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _917_fieldInits;
      _917_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _918_fieldI;
      _918_fieldI = BigInteger.Zero;
      while ((_918_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _919_field;
        _919_field = ((c).dtor_fields).Select(_918_fieldI);
        Dafny.ISequence<Dafny.Rune> _920_fieldType;
        Dafny.ISequence<Dafny.Rune> _out72;
        _out72 = DCOMP.COMP.GenType(((_919_field).dtor_formal).dtor_typ, false, false);
        _920_fieldType = _out72;
        _916_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_916_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_919_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _920_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source87 = (_919_field).dtor_defaultValue;
        if (_source87.is_Some) {
          DAST._IExpression _921___mcc_h0 = _source87.dtor_Some_a0;
          DAST._IExpression _922_e = _921___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _923_eStr;
            bool _924___v1;
            bool _925___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _926___v3;
            Dafny.ISequence<Dafny.Rune> _out73;
            bool _out74;
            bool _out75;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out76;
            DCOMP.COMP.GenExpr(_922_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out73, out _out74, out _out75, out _out76);
            _923_eStr = _out73;
            _924___v1 = _out74;
            _925___v2 = _out75;
            _926___v3 = _out76;
            _917_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_917_fieldInits, DCOMP.__default.escapeIdent(((_919_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _923_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _917_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_917_fieldInits, DCOMP.__default.escapeIdent(((_919_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _918_fieldI = (_918_fieldI) + (BigInteger.One);
      }
      BigInteger _927_typeParamI;
      _927_typeParamI = BigInteger.Zero;
      while ((_927_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _928_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out77;
        _out77 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_927_typeParamI), false, false);
        _928_tpeGen = _out77;
        _916_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_916_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_927_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _928_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _917_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_917_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_927_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _927_typeParamI = (_927_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _910_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _916_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _929_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _930_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out78;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out79;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _909_typeParamsSet, out _out78, out _out79);
      _929_implBody = _out78;
      _930_traitBodies = _out79;
      _929_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _917_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _929_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _911_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _910_typeParams), _912_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _929_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _931_i;
        _931_i = BigInteger.Zero;
        while ((_931_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _932_superClass;
          _932_superClass = ((c).dtor_superClasses).Select(_931_i);
          DAST._IType _source88 = _932_superClass;
          if (_source88.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _933___mcc_h1 = _source88.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _934___mcc_h2 = _source88.dtor_typeArgs;
            DAST._IResolvedType _935___mcc_h3 = _source88.dtor_resolved;
            DAST._IResolvedType _source89 = _935___mcc_h3;
            if (_source89.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _936___mcc_h7 = _source89.dtor_path;
            } else if (_source89.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _937___mcc_h9 = _source89.dtor_path;
              Dafny.ISequence<DAST._IType> _938_typeArgs = _934___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _939_traitPath = _933___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _940_pathStr;
                Dafny.ISequence<Dafny.Rune> _out80;
                _out80 = DCOMP.COMP.GenPath(_939_traitPath);
                _940_pathStr = _out80;
                Dafny.ISequence<Dafny.Rune> _941_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out81;
                _out81 = DCOMP.COMP.GenTypeArgs(_938_typeArgs, false, false);
                _941_typeArgs = _out81;
                Dafny.ISequence<Dafny.Rune> _942_body;
                _942_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_930_traitBodies).Contains(_939_traitPath)) {
                  _942_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_930_traitBodies, _939_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _943_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out82;
                _out82 = DCOMP.COMP.GenPath(path);
                _943_genSelfPath = _out82;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _911_constrainedTypeParams), _940_pathStr), _941_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _943_genSelfPath), _910_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _912_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _942_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _944___mcc_h11 = _source89.dtor_Newtype_a0;
            }
          } else if (_source88.is_Nullable) {
            DAST._IType _945___mcc_h13 = _source88.dtor_Nullable_a0;
          } else if (_source88.is_Tuple) {
            Dafny.ISequence<DAST._IType> _946___mcc_h15 = _source88.dtor_Tuple_a0;
          } else if (_source88.is_Array) {
            DAST._IType _947___mcc_h17 = _source88.dtor_element;
            BigInteger _948___mcc_h18 = _source88.dtor_dims;
          } else if (_source88.is_Seq) {
            DAST._IType _949___mcc_h21 = _source88.dtor_element;
          } else if (_source88.is_Set) {
            DAST._IType _950___mcc_h23 = _source88.dtor_element;
          } else if (_source88.is_Multiset) {
            DAST._IType _951___mcc_h25 = _source88.dtor_element;
          } else if (_source88.is_Map) {
            DAST._IType _952___mcc_h27 = _source88.dtor_key;
            DAST._IType _953___mcc_h28 = _source88.dtor_value;
          } else if (_source88.is_Arrow) {
            Dafny.ISequence<DAST._IType> _954___mcc_h31 = _source88.dtor_args;
            DAST._IType _955___mcc_h32 = _source88.dtor_result;
          } else if (_source88.is_Primitive) {
            DAST._IPrimitive _956___mcc_h35 = _source88.dtor_Primitive_a0;
          } else if (_source88.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _957___mcc_h37 = _source88.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _958___mcc_h39 = _source88.dtor_TypeArg_a0;
          }
          _931_i = (_931_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _959_defaultImpl;
      _959_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _911_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _910_typeParams), _912_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _959_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_959_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _959_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_959_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _959_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_959_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _959_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_959_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _960_printImpl;
      _960_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _911_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _910_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _960_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_960_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _961_ptrPartialEqImpl;
      _961_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _910_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _910_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _961_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_961_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _961_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_961_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _961_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_961_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _962_identEraseImpls;
      _962_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _911_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _910_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _915_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _962_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_962_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _913_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _914_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _910_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _959_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _960_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _961_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _962_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _963_typeParamsSet;
      _963_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _964_typeParams;
      _964_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _965_tpI;
      _965_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _964_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_965_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _966_tp;
          _966_tp = ((t).dtor_typeParams).Select(_965_tpI);
          _963_typeParamsSet = Dafny.Set<DAST._IType>.Union(_963_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_966_tp));
          Dafny.ISequence<Dafny.Rune> _967_genTp;
          Dafny.ISequence<Dafny.Rune> _out83;
          _out83 = DCOMP.COMP.GenType(_966_tp, false, false);
          _967_genTp = _out83;
          _964_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_964_typeParams, _967_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _965_tpI = (_965_tpI) + (BigInteger.One);
        }
        _964_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_964_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _968_fullPath;
      _968_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _969_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _970___v6;
      Dafny.ISequence<Dafny.Rune> _out84;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out85;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_968_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_968_fullPath)), _963_typeParamsSet, out _out84, out _out85);
      _969_implBody = _out84;
      _970___v6 = _out85;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _964_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _969_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _971_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _972_typeParams;
      Dafny.ISequence<Dafny.Rune> _973_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _974_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _975___v7;
      Dafny.ISequence<Dafny.Rune> _976___v8;
      Dafny.ISequence<Dafny.Rune> _977___v9;
      Dafny.ISet<DAST._IType> _out86;
      Dafny.ISequence<Dafny.Rune> _out87;
      Dafny.ISequence<Dafny.Rune> _out88;
      Dafny.ISequence<Dafny.Rune> _out89;
      Dafny.ISequence<Dafny.Rune> _out90;
      Dafny.ISequence<Dafny.Rune> _out91;
      Dafny.ISequence<Dafny.Rune> _out92;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out86, out _out87, out _out88, out _out89, out _out90, out _out91, out _out92);
      _971_typeParamsSet = _out86;
      _972_typeParams = _out87;
      _973_constrainedTypeParams = _out88;
      _974_whereConstraints = _out89;
      _975___v7 = _out90;
      _976___v8 = _out91;
      _977___v9 = _out92;
      Dafny.ISequence<Dafny.Rune> _978_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out93;
      _out93 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _978_underlyingType = _out93;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _972_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _978_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _973_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _972_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _978_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _973_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _978_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _972_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _973_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _972_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _972_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _973_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _972_typeParams), _974_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source90 = (c).dtor_witnessExpr;
      if (_source90.is_Some) {
        DAST._IExpression _979___mcc_h0 = _source90.dtor_Some_a0;
        DAST._IExpression _980_e = _979___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _981_eStr;
          bool _982___v10;
          bool _983___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _984___v12;
          Dafny.ISequence<Dafny.Rune> _out94;
          bool _out95;
          bool _out96;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out97;
          DCOMP.COMP.GenExpr(_980_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out94, out _out95, out _out96, out _out97);
          _981_eStr = _out94;
          _982___v10 = _out95;
          _983___v11 = _out96;
          _984___v12 = _out97;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _981_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _973_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _972_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _973_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _972_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _978_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _985_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _986_typeParams;
      Dafny.ISequence<Dafny.Rune> _987_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _988_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _989_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _990_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _991_erasedParams;
      Dafny.ISet<DAST._IType> _out98;
      Dafny.ISequence<Dafny.Rune> _out99;
      Dafny.ISequence<Dafny.Rune> _out100;
      Dafny.ISequence<Dafny.Rune> _out101;
      Dafny.ISequence<Dafny.Rune> _out102;
      Dafny.ISequence<Dafny.Rune> _out103;
      Dafny.ISequence<Dafny.Rune> _out104;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out98, out _out99, out _out100, out _out101, out _out102, out _out103, out _out104);
      _985_typeParamsSet = _out98;
      _986_typeParams = _out99;
      _987_constrainedTypeParams = _out100;
      _988_whereConstraints = _out101;
      _989_constrainedEraseParams = _out102;
      _990_unerasedParams = _out103;
      _991_erasedParams = _out104;
      Dafny.ISequence<Dafny.Rune> _992_ctors;
      _992_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _993_i;
      _993_i = BigInteger.Zero;
      while ((_993_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _994_ctor;
        _994_ctor = ((c).dtor_ctors).Select(_993_i);
        Dafny.ISequence<Dafny.Rune> _995_ctorBody;
        _995_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_994_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _996_j;
        _996_j = BigInteger.Zero;
        while ((_996_j) < (new BigInteger(((_994_ctor).dtor_args).Count))) {
          DAST._IFormal _997_formal;
          _997_formal = ((_994_ctor).dtor_args).Select(_996_j);
          Dafny.ISequence<Dafny.Rune> _998_formalType;
          Dafny.ISequence<Dafny.Rune> _out105;
          _out105 = DCOMP.COMP.GenType((_997_formal).dtor_typ, false, false);
          _998_formalType = _out105;
          if ((c).dtor_isCo) {
            _995_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_995_ctorBody, DCOMP.__default.escapeIdent((_997_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _998_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _995_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_995_ctorBody, DCOMP.__default.escapeIdent((_997_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _998_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _996_j = (_996_j) + (BigInteger.One);
        }
        _995_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_995_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _992_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_992_ctors, _995_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _993_i = (_993_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _999_selfPath;
      _999_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _1000_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _1001_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out106;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out107;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_999_selfPath)), _985_typeParamsSet, out _out106, out _out107);
      _1000_implBody = _out106;
      _1001_traitBodies = _out107;
      _993_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1002_emittedFields;
      _1002_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_993_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1003_ctor;
        _1003_ctor = ((c).dtor_ctors).Select(_993_i);
        BigInteger _1004_j;
        _1004_j = BigInteger.Zero;
        while ((_1004_j) < (new BigInteger(((_1003_ctor).dtor_args).Count))) {
          DAST._IFormal _1005_formal;
          _1005_formal = ((_1003_ctor).dtor_args).Select(_1004_j);
          if (!((_1002_emittedFields).Contains((_1005_formal).dtor_name))) {
            _1002_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1002_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_1005_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _1006_formalType;
            Dafny.ISequence<Dafny.Rune> _out108;
            _out108 = DCOMP.COMP.GenType((_1005_formal).dtor_typ, false, false);
            _1006_formalType = _out108;
            Dafny.ISequence<Dafny.Rune> _1007_methodBody;
            _1007_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _1008_k;
            _1008_k = BigInteger.Zero;
            while ((_1008_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _1009_ctor2;
              _1009_ctor2 = ((c).dtor_ctors).Select(_1008_k);
              Dafny.ISequence<Dafny.Rune> _1010_ctorMatch;
              _1010_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_1009_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _1011_l;
              _1011_l = BigInteger.Zero;
              bool _1012_hasMatchingField;
              _1012_hasMatchingField = false;
              while ((_1011_l) < (new BigInteger(((_1009_ctor2).dtor_args).Count))) {
                DAST._IFormal _1013_formal2;
                _1013_formal2 = ((_1009_ctor2).dtor_args).Select(_1011_l);
                if (((_1005_formal).dtor_name).Equals((_1013_formal2).dtor_name)) {
                  _1012_hasMatchingField = true;
                }
                _1010_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1010_ctorMatch, DCOMP.__default.escapeIdent((_1013_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _1011_l = (_1011_l) + (BigInteger.One);
              }
              if (_1012_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _1010_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1010_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_1005_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _1010_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1010_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_1005_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _1010_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1010_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _1007_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_1007_methodBody, _1010_ctorMatch);
              _1008_k = (_1008_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _1007_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1007_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _1007_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_1007_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _1000_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1000_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_1005_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _1006_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1007_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _1004_j = (_1004_j) + (BigInteger.One);
        }
        _993_i = (_993_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _992_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_992_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _1014_typeI;
        _1014_typeI = BigInteger.Zero;
        while ((_1014_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_1014_typeI).Sign == 1) {
            _992_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_992_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1015_genTp;
          Dafny.ISequence<Dafny.Rune> _out109;
          _out109 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1014_typeI), false, false);
          _1015_genTp = _out109;
          _992_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_992_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _1015_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _1014_typeI = (_1014_typeI) + (BigInteger.One);
        }
        _992_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_992_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _1016_enumBody;
      _1016_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _986_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _992_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _987_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _986_typeParams), _988_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1000_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _1017_identEraseImpls;
      _1017_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _987_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _986_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _991_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _1017_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1017_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _989_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _990_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _986_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _1018_printImpl;
      _1018_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _987_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _986_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _993_i = BigInteger.Zero;
      while ((_993_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1019_ctor;
        _1019_ctor = ((c).dtor_ctors).Select(_993_i);
        Dafny.ISequence<Dafny.Rune> _1020_ctorMatch;
        _1020_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1019_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _1021_modulePrefix;
        _1021_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _1022_printRhs;
        _1022_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _1021_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_1019_ctor).dtor_name), (((_1019_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _1023_j;
        _1023_j = BigInteger.Zero;
        while ((_1023_j) < (new BigInteger(((_1019_ctor).dtor_args).Count))) {
          DAST._IFormal _1024_formal;
          _1024_formal = ((_1019_ctor).dtor_args).Select(_1023_j);
          _1020_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1020_ctorMatch, DCOMP.__default.escapeIdent((_1024_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_1023_j).Sign == 1) {
            _1022_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1022_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _1022_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1022_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_1024_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _1023_j = (_1023_j) + (BigInteger.One);
        }
        _1020_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1020_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_1019_ctor).dtor_hasAnyArgs) {
          _1022_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1022_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _1022_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_1022_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _1018_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1018_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _1020_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _1022_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _993_i = (_993_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _1018_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1018_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _1018_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1018_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _1025_defaultImpl;
      _1025_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _1025_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _987_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _986_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _993_i = BigInteger.Zero;
        while ((_993_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1026_formal;
          _1026_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_993_i);
          _1025_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1025_defaultImpl, DCOMP.__default.escapeIdent((_1026_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _993_i = (_993_i) + (BigInteger.One);
        }
        _1025_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_1025_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1016_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1017_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1018_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _1025_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1027_i;
        _1027_i = BigInteger.Zero;
        while ((_1027_i) < (new BigInteger((p).Count))) {
          if ((_1027_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1027_i))));
          _1027_i = (_1027_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _1028_i;
        _1028_i = BigInteger.Zero;
        while ((_1028_i) < (new BigInteger((args).Count))) {
          if ((_1028_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1029_genTp;
          Dafny.ISequence<Dafny.Rune> _out110;
          _out110 = DCOMP.COMP.GenType((args).Select(_1028_i), inBinding, inFn);
          _1029_genTp = _out110;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1029_genTp);
          _1028_i = (_1028_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source91 = c;
      if (_source91.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1030___mcc_h0 = _source91.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1031___mcc_h1 = _source91.dtor_typeArgs;
        DAST._IResolvedType _1032___mcc_h2 = _source91.dtor_resolved;
        DAST._IResolvedType _1033_resolved = _1032___mcc_h2;
        Dafny.ISequence<DAST._IType> _1034_args = _1031___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1035_p = _1030___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out111;
          _out111 = DCOMP.COMP.GenPath(_1035_p);
          s = _out111;
          Dafny.ISequence<Dafny.Rune> _1036_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out112;
          _out112 = DCOMP.COMP.GenTypeArgs(_1034_args, inBinding, inFn);
          _1036_typeArgs = _out112;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1036_typeArgs);
          DAST._IResolvedType _source92 = _1033_resolved;
          if (_source92.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1037___mcc_h18 = _source92.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source92.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1038___mcc_h20 = _source92.dtor_path;
            {
              if ((_1035_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _1039___mcc_h22 = _source92.dtor_Newtype_a0;
            DAST._IResolvedType _1040_Primitive = _1033_resolved;
          }
        }
      } else if (_source91.is_Nullable) {
        DAST._IType _1041___mcc_h3 = _source91.dtor_Nullable_a0;
        DAST._IType _1042_inner = _1041___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _1043_innerStr;
          Dafny.ISequence<Dafny.Rune> _out113;
          _out113 = DCOMP.COMP.GenType(_1042_inner, inBinding, inFn);
          _1043_innerStr = _out113;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _1043_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source91.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1044___mcc_h4 = _source91.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1045_types = _1044___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _1046_i;
          _1046_i = BigInteger.Zero;
          while ((_1046_i) < (new BigInteger((_1045_types).Count))) {
            if ((_1046_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1047_generated;
            Dafny.ISequence<Dafny.Rune> _out114;
            _out114 = DCOMP.COMP.GenType((_1045_types).Select(_1046_i), inBinding, inFn);
            _1047_generated = _out114;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1047_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _1046_i = (_1046_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source91.is_Array) {
        DAST._IType _1048___mcc_h5 = _source91.dtor_element;
        BigInteger _1049___mcc_h6 = _source91.dtor_dims;
        BigInteger _1050_dims = _1049___mcc_h6;
        DAST._IType _1051_element = _1048___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _1052_elemStr;
          Dafny.ISequence<Dafny.Rune> _out115;
          _out115 = DCOMP.COMP.GenType(_1051_element, inBinding, inFn);
          _1052_elemStr = _out115;
          s = _1052_elemStr;
          BigInteger _1053_i;
          _1053_i = BigInteger.Zero;
          while ((_1053_i) < (_1050_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _1053_i = (_1053_i) + (BigInteger.One);
          }
        }
      } else if (_source91.is_Seq) {
        DAST._IType _1054___mcc_h7 = _source91.dtor_element;
        DAST._IType _1055_element = _1054___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _1056_elemStr;
          Dafny.ISequence<Dafny.Rune> _out116;
          _out116 = DCOMP.COMP.GenType(_1055_element, inBinding, inFn);
          _1056_elemStr = _out116;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _1056_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source91.is_Set) {
        DAST._IType _1057___mcc_h8 = _source91.dtor_element;
        DAST._IType _1058_element = _1057___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _1059_elemStr;
          Dafny.ISequence<Dafny.Rune> _out117;
          _out117 = DCOMP.COMP.GenType(_1058_element, inBinding, inFn);
          _1059_elemStr = _out117;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _1059_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source91.is_Multiset) {
        DAST._IType _1060___mcc_h9 = _source91.dtor_element;
        DAST._IType _1061_element = _1060___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1062_elemStr;
          Dafny.ISequence<Dafny.Rune> _out118;
          _out118 = DCOMP.COMP.GenType(_1061_element, inBinding, inFn);
          _1062_elemStr = _out118;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1062_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source91.is_Map) {
        DAST._IType _1063___mcc_h10 = _source91.dtor_key;
        DAST._IType _1064___mcc_h11 = _source91.dtor_value;
        DAST._IType _1065_value = _1064___mcc_h11;
        DAST._IType _1066_key = _1063___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _1067_keyStr;
          Dafny.ISequence<Dafny.Rune> _out119;
          _out119 = DCOMP.COMP.GenType(_1066_key, inBinding, inFn);
          _1067_keyStr = _out119;
          Dafny.ISequence<Dafny.Rune> _1068_valueStr;
          Dafny.ISequence<Dafny.Rune> _out120;
          _out120 = DCOMP.COMP.GenType(_1065_value, inBinding, inFn);
          _1068_valueStr = _out120;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1067_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1068_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source91.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1069___mcc_h12 = _source91.dtor_args;
        DAST._IType _1070___mcc_h13 = _source91.dtor_result;
        DAST._IType _1071_result = _1070___mcc_h13;
        Dafny.ISequence<DAST._IType> _1072_args = _1069___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _1073_i;
          _1073_i = BigInteger.Zero;
          while ((_1073_i) < (new BigInteger((_1072_args).Count))) {
            if ((_1073_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1074_generated;
            Dafny.ISequence<Dafny.Rune> _out121;
            _out121 = DCOMP.COMP.GenType((_1072_args).Select(_1073_i), inBinding, true);
            _1074_generated = _out121;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _1074_generated);
            _1073_i = (_1073_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1075_resultType;
          Dafny.ISequence<Dafny.Rune> _out122;
          _out122 = DCOMP.COMP.GenType(_1071_result, inBinding, (inFn) || (inBinding));
          _1075_resultType = _out122;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1075_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source91.is_Primitive) {
        DAST._IPrimitive _1076___mcc_h14 = _source91.dtor_Primitive_a0;
        DAST._IPrimitive _1077_p = _1076___mcc_h14;
        {
          DAST._IPrimitive _source93 = _1077_p;
          if (_source93.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source93.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source93.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source93.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source91.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1078___mcc_h15 = _source91.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1079_v = _1078___mcc_h15;
        s = _1079_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _1080___mcc_h16 = _source91.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source94 = _1080___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1081___mcc_h17 = _source94;
        Dafny.ISequence<Dafny.Rune> _1082_name = _1081___mcc_h17;
        s = DCOMP.__default.escapeIdent(_1082_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1083_i;
      _1083_i = BigInteger.Zero;
      while ((_1083_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source95 = (body).Select(_1083_i);
        DAST._IMethod _1084___mcc_h0 = _source95;
        DAST._IMethod _1085_m = _1084___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source96 = (_1085_m).dtor_overridingPath;
          if (_source96.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1086___mcc_h1 = _source96.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1087_p = _1086___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _1088_existing;
              _1088_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_1087_p)) {
                _1088_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _1087_p);
              }
              if ((new BigInteger((_1088_existing).Count)).Sign == 1) {
                _1088_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1088_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _1089_genMethod;
              Dafny.ISequence<Dafny.Rune> _out123;
              _out123 = DCOMP.COMP.GenMethod(_1085_m, true, enclosingType, enclosingTypeParams);
              _1089_genMethod = _out123;
              _1088_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1088_existing, _1089_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_1087_p, _1088_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _1090_generated;
              Dafny.ISequence<Dafny.Rune> _out124;
              _out124 = DCOMP.COMP.GenMethod(_1085_m, forTrait, enclosingType, enclosingTypeParams);
              _1090_generated = _out124;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1090_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _1083_i = (_1083_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1091_i;
      _1091_i = BigInteger.Zero;
      while ((_1091_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1092_param;
        _1092_param = (@params).Select(_1091_i);
        Dafny.ISequence<Dafny.Rune> _1093_paramType;
        Dafny.ISequence<Dafny.Rune> _out125;
        _out125 = DCOMP.COMP.GenType((_1092_param).dtor_typ, false, false);
        _1093_paramType = _out125;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_1092_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _1093_paramType);
        if ((_1091_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _1091_i = (_1091_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _1094_params;
      Dafny.ISequence<Dafny.Rune> _out126;
      _out126 = DCOMP.COMP.GenParams((m).dtor_params);
      _1094_params = _out126;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1095_paramNames;
      _1095_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1096_paramI;
      _1096_paramI = BigInteger.Zero;
      while ((_1096_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1095_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1095_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1096_paramI)).dtor_name));
        _1096_paramI = (_1096_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1094_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1094_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _1097_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out127;
          _out127 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1097_enclosingTypeString = _out127;
          _1094_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _1097_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1094_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _1098_retType;
      _1098_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _1099_typeI;
      _1099_typeI = BigInteger.Zero;
      while ((_1099_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_1099_typeI).Sign == 1) {
          _1098_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1098_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _1100_typeString;
        Dafny.ISequence<Dafny.Rune> _out128;
        _out128 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1099_typeI), false, false);
        _1100_typeString = _out128;
        _1098_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1098_retType, _1100_typeString);
        _1099_typeI = (_1099_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _1098_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1098_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _1101_typeParamsFiltered;
      _1101_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1102_typeParamI;
      _1102_typeParamI = BigInteger.Zero;
      while ((_1102_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1103_typeParam;
        _1103_typeParam = ((m).dtor_typeParams).Select(_1102_typeParamI);
        if (!((enclosingTypeParams).Contains(_1103_typeParam))) {
          _1101_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1101_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1103_typeParam));
        }
        _1102_typeParamI = (_1102_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1104_whereClauses;
      _1104_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_1101_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _1104_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1104_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1105_i;
        _1105_i = BigInteger.Zero;
        while ((_1105_i) < (new BigInteger((_1101_typeParamsFiltered).Count))) {
          if ((_1105_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _1104_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1104_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1106_typeString;
          Dafny.ISequence<Dafny.Rune> _out129;
          _out129 = DCOMP.COMP.GenType((_1101_typeParamsFiltered).Select(_1105_i), false, false);
          _1106_typeString = _out129;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1106_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _1106_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _1104_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1104_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _1106_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _1105_i = (_1105_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1094_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1098_retType), _1104_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _1107_earlyReturn;
        _1107_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source97 = (m).dtor_outVars;
        if (_source97.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1108___mcc_h0 = _source97.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1109_outVars = _1108___mcc_h0;
          {
            _1107_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _1110_outI;
            _1110_outI = BigInteger.Zero;
            while ((_1110_outI) < (new BigInteger((_1109_outVars).Count))) {
              if ((_1110_outI).Sign == 1) {
                _1107_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1107_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1111_outVar;
              _1111_outVar = (_1109_outVars).Select(_1110_outI);
              _1107_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1107_earlyReturn, DCOMP.__default.escapeIdent((_1111_outVar)));
              _1110_outI = (_1110_outI) + (BigInteger.One);
            }
            _1107_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1107_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _1112_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1113___v15;
        Dafny.ISequence<Dafny.Rune> _out130;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1095_paramNames, true, _1107_earlyReturn, out _out130, out _out131);
        _1112_body = _out130;
        _1113___v15 = _out131;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1112_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1114_declarations;
      _1114_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1115_i;
      _1115_i = BigInteger.Zero;
      while ((_1115_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1116_stmt;
        _1116_stmt = (stmts).Select(_1115_i);
        Dafny.ISequence<Dafny.Rune> _1117_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1118_recIdents;
        Dafny.ISequence<Dafny.Rune> _out132;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out133;
        DCOMP.COMP.GenStmt(_1116_stmt, selfIdent, @params, (isLast) && ((_1115_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out132, out _out133);
        _1117_stmtString = _out132;
        _1118_recIdents = _out133;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1118_recIdents, _1114_declarations));
        DAST._IStatement _source98 = _1116_stmt;
        if (_source98.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1119___mcc_h0 = _source98.dtor_name;
          DAST._IType _1120___mcc_h1 = _source98.dtor_typ;
          DAST._IOptional<DAST._IExpression> _1121___mcc_h2 = _source98.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1122_name = _1119___mcc_h0;
          {
            _1114_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1114_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1122_name));
          }
        } else if (_source98.is_Assign) {
          DAST._IAssignLhs _1123___mcc_h6 = _source98.dtor_lhs;
          DAST._IExpression _1124___mcc_h7 = _source98.dtor_value;
        } else if (_source98.is_If) {
          DAST._IExpression _1125___mcc_h10 = _source98.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1126___mcc_h11 = _source98.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1127___mcc_h12 = _source98.dtor_els;
        } else if (_source98.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1128___mcc_h16 = _source98.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1129___mcc_h17 = _source98.dtor_body;
        } else if (_source98.is_While) {
          DAST._IExpression _1130___mcc_h20 = _source98.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1131___mcc_h21 = _source98.dtor_body;
        } else if (_source98.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1132___mcc_h24 = _source98.dtor_boundName;
          DAST._IType _1133___mcc_h25 = _source98.dtor_boundType;
          DAST._IExpression _1134___mcc_h26 = _source98.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1135___mcc_h27 = _source98.dtor_body;
        } else if (_source98.is_Call) {
          DAST._IExpression _1136___mcc_h32 = _source98.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1137___mcc_h33 = _source98.dtor_name;
          Dafny.ISequence<DAST._IType> _1138___mcc_h34 = _source98.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1139___mcc_h35 = _source98.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1140___mcc_h36 = _source98.dtor_outs;
        } else if (_source98.is_Return) {
          DAST._IExpression _1141___mcc_h42 = _source98.dtor_expr;
        } else if (_source98.is_EarlyReturn) {
        } else if (_source98.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1142___mcc_h44 = _source98.dtor_toLabel;
        } else if (_source98.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1143___mcc_h46 = _source98.dtor_body;
        } else if (_source98.is_JumpTailCallStart) {
        } else if (_source98.is_Halt) {
        } else {
          DAST._IExpression _1144___mcc_h48 = _source98.dtor_Print_a0;
        }
        if ((_1115_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _1117_stmtString);
        _1115_i = (_1115_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source99 = lhs;
      if (_source99.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1145___mcc_h0 = _source99.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source100 = _1145___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1146___mcc_h1 = _source100;
        Dafny.ISequence<Dafny.Rune> _1147_id = _1146___mcc_h1;
        {
          if ((@params).Contains(_1147_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1147_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1147_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1147_id);
          needsIIFE = false;
        }
      } else if (_source99.is_Select) {
        DAST._IExpression _1148___mcc_h2 = _source99.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1149___mcc_h3 = _source99.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1150_field = _1149___mcc_h3;
        DAST._IExpression _1151_on = _1148___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _1152_onExpr;
          bool _1153_onOwned;
          bool _1154_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1155_recIdents;
          Dafny.ISequence<Dafny.Rune> _out134;
          bool _out135;
          bool _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          DCOMP.COMP.GenExpr(_1151_on, selfIdent, @params, false, out _out134, out _out135, out _out136, out _out137);
          _1152_onExpr = _out134;
          _1153_onOwned = _out135;
          _1154_onErased = _out136;
          _1155_recIdents = _out137;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _1152_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1150_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1155_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1156___mcc_h4 = _source99.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1157___mcc_h5 = _source99.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1158_indices = _1157___mcc_h5;
        DAST._IExpression _1159_on = _1156___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1160_onExpr;
          bool _1161_onOwned;
          bool _1162_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1163_recIdents;
          Dafny.ISequence<Dafny.Rune> _out138;
          bool _out139;
          bool _out140;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out141;
          DCOMP.COMP.GenExpr(_1159_on, selfIdent, @params, false, out _out138, out _out139, out _out140, out _out141);
          _1160_onExpr = _out138;
          _1161_onOwned = _out139;
          _1162_onErased = _out140;
          _1163_recIdents = _out141;
          readIdents = _1163_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1164_i;
          _1164_i = BigInteger.Zero;
          while ((_1164_i) < (new BigInteger((_1158_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _1165_idx;
            bool _1166___v19;
            bool _1167_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1168_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out142;
            bool _out143;
            bool _out144;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out145;
            DCOMP.COMP.GenExpr((_1158_indices).Select(_1164_i), selfIdent, @params, true, out _out142, out _out143, out _out144, out _out145);
            _1165_idx = _out142;
            _1166___v19 = _out143;
            _1167_idxErased = _out144;
            _1168_recIdentsIdx = _out145;
            if (!(_1167_idxErased)) {
              _1165_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1165_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_1164_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _1165_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1168_recIdentsIdx);
            _1164_i = (_1164_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _1160_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1164_i = BigInteger.Zero;
          while ((_1164_i) < (new BigInteger((_1158_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_1164_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1164_i = (_1164_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source101 = stmt;
      if (_source101.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1169___mcc_h0 = _source101.dtor_name;
        DAST._IType _1170___mcc_h1 = _source101.dtor_typ;
        DAST._IOptional<DAST._IExpression> _1171___mcc_h2 = _source101.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source102 = _1171___mcc_h2;
        if (_source102.is_Some) {
          DAST._IExpression _1172___mcc_h3 = _source102.dtor_Some_a0;
          DAST._IExpression _1173_expression = _1172___mcc_h3;
          DAST._IType _1174_typ = _1170___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1175_name = _1169___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1176_typeString;
            Dafny.ISequence<Dafny.Rune> _out146;
            _out146 = DCOMP.COMP.GenType(_1174_typ, true, false);
            _1176_typeString = _out146;
            Dafny.ISequence<Dafny.Rune> _1177_expr;
            bool _1178___v20;
            bool _1179_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1180_recIdents;
            Dafny.ISequence<Dafny.Rune> _out147;
            bool _out148;
            bool _out149;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out150;
            DCOMP.COMP.GenExpr(_1173_expression, selfIdent, @params, true, out _out147, out _out148, out _out149, out _out150);
            _1177_expr = _out147;
            _1178___v20 = _out148;
            _1179_recErased = _out149;
            _1180_recIdents = _out150;
            if (!(_1179_recErased)) {
              _1177_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1177_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1177_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1176_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1177_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1175_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1176_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1177_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1180_recIdents;
          }
        } else {
          DAST._IType _1181_typ = _1170___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1182_name = _1169___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1183_typeString;
            Dafny.ISequence<Dafny.Rune> _out151;
            _out151 = DCOMP.COMP.GenType(_1181_typ, true, false);
            _1183_typeString = _out151;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1182_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1183_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source101.is_Assign) {
        DAST._IAssignLhs _1184___mcc_h4 = _source101.dtor_lhs;
        DAST._IExpression _1185___mcc_h5 = _source101.dtor_value;
        DAST._IExpression _1186_expression = _1185___mcc_h5;
        DAST._IAssignLhs _1187_lhs = _1184___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1188_lhsGen;
          bool _1189_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1190_recIdents;
          Dafny.ISequence<Dafny.Rune> _out152;
          bool _out153;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out154;
          DCOMP.COMP.GenAssignLhs(_1187_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out152, out _out153, out _out154);
          _1188_lhsGen = _out152;
          _1189_needsIIFE = _out153;
          _1190_recIdents = _out154;
          Dafny.ISequence<Dafny.Rune> _1191_exprGen;
          bool _1192___v21;
          bool _1193_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1194_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out155;
          bool _out156;
          bool _out157;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out158;
          DCOMP.COMP.GenExpr(_1186_expression, selfIdent, @params, true, out _out155, out _out156, out _out157, out _out158);
          _1191_exprGen = _out155;
          _1192___v21 = _out156;
          _1193_exprErased = _out157;
          _1194_exprIdents = _out158;
          if (!(_1193_exprErased)) {
            _1191_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1191_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1191_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1191_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1189_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1191_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1188_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1188_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1191_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1190_recIdents, _1194_exprIdents);
        }
      } else if (_source101.is_If) {
        DAST._IExpression _1195___mcc_h6 = _source101.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1196___mcc_h7 = _source101.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1197___mcc_h8 = _source101.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1198_els = _1197___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1199_thn = _1196___mcc_h7;
        DAST._IExpression _1200_cond = _1195___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1201_condString;
          bool _1202___v22;
          bool _1203_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1204_recIdents;
          Dafny.ISequence<Dafny.Rune> _out159;
          bool _out160;
          bool _out161;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out162;
          DCOMP.COMP.GenExpr(_1200_cond, selfIdent, @params, true, out _out159, out _out160, out _out161, out _out162);
          _1201_condString = _out159;
          _1202___v22 = _out160;
          _1203_condErased = _out161;
          _1204_recIdents = _out162;
          if (!(_1203_condErased)) {
            _1201_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1201_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1204_recIdents;
          Dafny.ISequence<Dafny.Rune> _1205_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1206_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out163;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out164;
          DCOMP.COMP.GenStmts(_1199_thn, selfIdent, @params, isLast, earlyReturn, out _out163, out _out164);
          _1205_thnString = _out163;
          _1206_thnIdents = _out164;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1206_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1207_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1208_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out165;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out166;
          DCOMP.COMP.GenStmts(_1198_els, selfIdent, @params, isLast, earlyReturn, out _out165, out _out166);
          _1207_elsString = _out165;
          _1208_elsIdents = _out166;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1208_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1201_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1205_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1207_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1209___mcc_h9 = _source101.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1210___mcc_h10 = _source101.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1211_body = _1210___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1212_lbl = _1209___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1213_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1214_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out167;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out168;
          DCOMP.COMP.GenStmts(_1211_body, selfIdent, @params, isLast, earlyReturn, out _out167, out _out168);
          _1213_bodyString = _out167;
          _1214_bodyIdents = _out168;
          readIdents = _1214_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1212_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1213_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_While) {
        DAST._IExpression _1215___mcc_h11 = _source101.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1216___mcc_h12 = _source101.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1217_body = _1216___mcc_h12;
        DAST._IExpression _1218_cond = _1215___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _1219_condString;
          bool _1220___v23;
          bool _1221_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1222_recIdents;
          Dafny.ISequence<Dafny.Rune> _out169;
          bool _out170;
          bool _out171;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out172;
          DCOMP.COMP.GenExpr(_1218_cond, selfIdent, @params, true, out _out169, out _out170, out _out171, out _out172);
          _1219_condString = _out169;
          _1220___v23 = _out170;
          _1221_condErased = _out171;
          _1222_recIdents = _out172;
          if (!(_1221_condErased)) {
            _1219_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1219_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1222_recIdents;
          Dafny.ISequence<Dafny.Rune> _1223_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1224_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out173;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out174;
          DCOMP.COMP.GenStmts(_1217_body, selfIdent, @params, false, earlyReturn, out _out173, out _out174);
          _1223_bodyString = _out173;
          _1224_bodyIdents = _out174;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1224_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _1219_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1223_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1225___mcc_h13 = _source101.dtor_boundName;
        DAST._IType _1226___mcc_h14 = _source101.dtor_boundType;
        DAST._IExpression _1227___mcc_h15 = _source101.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1228___mcc_h16 = _source101.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1229_body = _1228___mcc_h16;
        DAST._IExpression _1230_over = _1227___mcc_h15;
        DAST._IType _1231_boundType = _1226___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1232_boundName = _1225___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1233_overString;
          bool _1234___v24;
          bool _1235_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1236_recIdents;
          Dafny.ISequence<Dafny.Rune> _out175;
          bool _out176;
          bool _out177;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out178;
          DCOMP.COMP.GenExpr(_1230_over, selfIdent, @params, true, out _out175, out _out176, out _out177, out _out178);
          _1233_overString = _out175;
          _1234___v24 = _out176;
          _1235_overErased = _out177;
          _1236_recIdents = _out178;
          Dafny.ISequence<Dafny.Rune> _1237_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out179;
          _out179 = DCOMP.COMP.GenType(_1231_boundType, false, false);
          _1237_boundTypeStr = _out179;
          readIdents = _1236_recIdents;
          Dafny.ISequence<Dafny.Rune> _1238_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1239_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out180;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out181;
          DCOMP.COMP.GenStmts(_1229_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1232_boundName)), false, earlyReturn, out _out180, out _out181);
          _1238_bodyString = _out180;
          _1239_bodyIdents = _out181;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1239_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1232_boundName));
          Dafny.ISequence<Dafny.Rune> _1240_unerasedIter;
          _1240_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_1235_overErased) {
            _1240_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1237_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1240_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _1233_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1232_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1240_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1238_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_Call) {
        DAST._IExpression _1241___mcc_h17 = _source101.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1242___mcc_h18 = _source101.dtor_name;
        Dafny.ISequence<DAST._IType> _1243___mcc_h19 = _source101.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1244___mcc_h20 = _source101.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1245___mcc_h21 = _source101.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1246_maybeOutVars = _1245___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1247_args = _1244___mcc_h20;
        Dafny.ISequence<DAST._IType> _1248_typeArgs = _1243___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1249_name = _1242___mcc_h18;
        DAST._IExpression _1250_on = _1241___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1251_typeArgString;
          _1251_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1248_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1252_typeI;
            _1252_typeI = BigInteger.Zero;
            _1251_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_1252_typeI) < (new BigInteger((_1248_typeArgs).Count))) {
              if ((_1252_typeI).Sign == 1) {
                _1251_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1251_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1253_typeString;
              Dafny.ISequence<Dafny.Rune> _out182;
              _out182 = DCOMP.COMP.GenType((_1248_typeArgs).Select(_1252_typeI), false, false);
              _1253_typeString = _out182;
              _1251_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1251_typeArgString, _1253_typeString);
              _1252_typeI = (_1252_typeI) + (BigInteger.One);
            }
            _1251_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1251_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _1254_argString;
          _1254_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1255_i;
          _1255_i = BigInteger.Zero;
          while ((_1255_i) < (new BigInteger((_1247_args).Count))) {
            if ((_1255_i).Sign == 1) {
              _1254_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1254_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1256_argExpr;
            bool _1257_isOwned;
            bool _1258_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1259_argIdents;
            Dafny.ISequence<Dafny.Rune> _out183;
            bool _out184;
            bool _out185;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
            DCOMP.COMP.GenExpr((_1247_args).Select(_1255_i), selfIdent, @params, false, out _out183, out _out184, out _out185, out _out186);
            _1256_argExpr = _out183;
            _1257_isOwned = _out184;
            _1258_argErased = _out185;
            _1259_argIdents = _out186;
            if (_1257_isOwned) {
              _1256_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1256_argExpr);
            }
            _1254_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1254_argString, _1256_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1259_argIdents);
            _1255_i = (_1255_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1260_enclosingString;
          bool _1261___v25;
          bool _1262___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1263_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out187;
          bool _out188;
          bool _out189;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out190;
          DCOMP.COMP.GenExpr(_1250_on, selfIdent, @params, false, out _out187, out _out188, out _out189, out _out190);
          _1260_enclosingString = _out187;
          _1261___v25 = _out188;
          _1262___v26 = _out189;
          _1263_enclosingIdents = _out190;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1263_enclosingIdents);
          DAST._IExpression _source103 = _1250_on;
          if (_source103.is_Literal) {
            DAST._ILiteral _1264___mcc_h26 = _source103.dtor_Literal_a0;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1265___mcc_h28 = _source103.dtor_Ident_a0;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1266___mcc_h30 = _source103.dtor_Companion_a0;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1260_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source103.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1267___mcc_h32 = _source103.dtor_Tuple_a0;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1268___mcc_h34 = _source103.dtor_path;
            Dafny.ISequence<DAST._IType> _1269___mcc_h35 = _source103.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1270___mcc_h36 = _source103.dtor_args;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1271___mcc_h40 = _source103.dtor_dims;
            DAST._IType _1272___mcc_h41 = _source103.dtor_typ;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1273___mcc_h44 = _source103.dtor_path;
            Dafny.ISequence<DAST._IType> _1274___mcc_h45 = _source103.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1275___mcc_h46 = _source103.dtor_variant;
            bool _1276___mcc_h47 = _source103.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1277___mcc_h48 = _source103.dtor_contents;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Convert) {
            DAST._IExpression _1278___mcc_h54 = _source103.dtor_value;
            DAST._IType _1279___mcc_h55 = _source103.dtor_from;
            DAST._IType _1280___mcc_h56 = _source103.dtor_typ;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SeqConstruct) {
            DAST._IExpression _1281___mcc_h60 = _source103.dtor_length;
            DAST._IExpression _1282___mcc_h61 = _source103.dtor_elem;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _1283___mcc_h64 = _source103.dtor_elements;
            DAST._IType _1284___mcc_h65 = _source103.dtor_typ;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _1285___mcc_h68 = _source103.dtor_elements;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1286___mcc_h70 = _source103.dtor_mapElems;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_This) {
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Ite) {
            DAST._IExpression _1287___mcc_h72 = _source103.dtor_cond;
            DAST._IExpression _1288___mcc_h73 = _source103.dtor_thn;
            DAST._IExpression _1289___mcc_h74 = _source103.dtor_els;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_UnOp) {
            DAST._IUnaryOp _1290___mcc_h78 = _source103.dtor_unOp;
            DAST._IExpression _1291___mcc_h79 = _source103.dtor_expr;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_BinOp) {
            DAST._IBinOp _1292___mcc_h82 = _source103.dtor_op;
            DAST._IExpression _1293___mcc_h83 = _source103.dtor_left;
            DAST._IExpression _1294___mcc_h84 = _source103.dtor_right;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_ArrayLen) {
            DAST._IExpression _1295___mcc_h88 = _source103.dtor_expr;
            BigInteger _1296___mcc_h89 = _source103.dtor_dim;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Select) {
            DAST._IExpression _1297___mcc_h92 = _source103.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1298___mcc_h93 = _source103.dtor_field;
            bool _1299___mcc_h94 = _source103.dtor_isConstant;
            bool _1300___mcc_h95 = _source103.dtor_onDatatype;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SelectFn) {
            DAST._IExpression _1301___mcc_h100 = _source103.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1302___mcc_h101 = _source103.dtor_field;
            bool _1303___mcc_h102 = _source103.dtor_onDatatype;
            bool _1304___mcc_h103 = _source103.dtor_isStatic;
            BigInteger _1305___mcc_h104 = _source103.dtor_arity;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Index) {
            DAST._IExpression _1306___mcc_h110 = _source103.dtor_expr;
            DAST._ICollKind _1307___mcc_h111 = _source103.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1308___mcc_h112 = _source103.dtor_indices;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_IndexRange) {
            DAST._IExpression _1309___mcc_h116 = _source103.dtor_expr;
            bool _1310___mcc_h117 = _source103.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _1311___mcc_h118 = _source103.dtor_low;
            DAST._IOptional<DAST._IExpression> _1312___mcc_h119 = _source103.dtor_high;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_TupleSelect) {
            DAST._IExpression _1313___mcc_h124 = _source103.dtor_expr;
            BigInteger _1314___mcc_h125 = _source103.dtor_index;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Call) {
            DAST._IExpression _1315___mcc_h128 = _source103.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1316___mcc_h129 = _source103.dtor_name;
            Dafny.ISequence<DAST._IType> _1317___mcc_h130 = _source103.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1318___mcc_h131 = _source103.dtor_args;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1319___mcc_h136 = _source103.dtor_params;
            DAST._IType _1320___mcc_h137 = _source103.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1321___mcc_h138 = _source103.dtor_body;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1322___mcc_h142 = _source103.dtor_values;
            DAST._IType _1323___mcc_h143 = _source103.dtor_retType;
            DAST._IExpression _1324___mcc_h144 = _source103.dtor_expr;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1325___mcc_h148 = _source103.dtor_name;
            DAST._IType _1326___mcc_h149 = _source103.dtor_typ;
            DAST._IExpression _1327___mcc_h150 = _source103.dtor_value;
            DAST._IExpression _1328___mcc_h151 = _source103.dtor_iifeBody;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_Apply) {
            DAST._IExpression _1329___mcc_h156 = _source103.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1330___mcc_h157 = _source103.dtor_args;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_TypeTest) {
            DAST._IExpression _1331___mcc_h160 = _source103.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1332___mcc_h161 = _source103.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1333___mcc_h162 = _source103.dtor_variant;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_InitializationValue) {
            DAST._IType _1334___mcc_h166 = _source103.dtor_typ;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_BoolBoundedPool) {
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SetBoundedPool) {
            DAST._IExpression _1335___mcc_h168 = _source103.dtor_of;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source103.is_SeqBoundedPool) {
            DAST._IExpression _1336___mcc_h170 = _source103.dtor_of;
            bool _1337___mcc_h171 = _source103.dtor_includeDuplicates;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1338___mcc_h174 = _source103.dtor_lo;
            DAST._IExpression _1339___mcc_h175 = _source103.dtor_hi;
            {
              _1260_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1260_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1340_receiver;
          _1340_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source104 = _1246_maybeOutVars;
          if (_source104.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1341___mcc_h178 = _source104.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1342_outVars = _1341___mcc_h178;
            {
              if ((new BigInteger((_1342_outVars).Count)) > (BigInteger.One)) {
                _1340_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1343_outI;
              _1343_outI = BigInteger.Zero;
              while ((_1343_outI) < (new BigInteger((_1342_outVars).Count))) {
                if ((_1343_outI).Sign == 1) {
                  _1340_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1340_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1344_outVar;
                _1344_outVar = (_1342_outVars).Select(_1343_outI);
                _1340_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1340_receiver, (_1344_outVar));
                _1343_outI = (_1343_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1342_outVars).Count)) > (BigInteger.One)) {
                _1340_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1340_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1340_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1340_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1260_enclosingString), DCOMP.__default.escapeIdent(_1249_name)), _1251_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1254_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source101.is_Return) {
        DAST._IExpression _1345___mcc_h22 = _source101.dtor_expr;
        DAST._IExpression _1346_expr = _1345___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1347_exprString;
          bool _1348___v29;
          bool _1349_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1350_recIdents;
          Dafny.ISequence<Dafny.Rune> _out191;
          bool _out192;
          bool _out193;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
          DCOMP.COMP.GenExpr(_1346_expr, selfIdent, @params, true, out _out191, out _out192, out _out193, out _out194);
          _1347_exprString = _out191;
          _1348___v29 = _out192;
          _1349_recErased = _out193;
          _1350_recIdents = _out194;
          _1347_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1347_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1350_recIdents;
          if (isLast) {
            generated = _1347_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1347_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source101.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source101.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1351___mcc_h23 = _source101.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1352_toLabel = _1351___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source105 = _1352_toLabel;
          if (_source105.is_Some) {
            Dafny.ISequence<Dafny.Rune> _1353___mcc_h179 = _source105.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _1354_lbl = _1353___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1354_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source101.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1355___mcc_h24 = _source101.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1356_body = _1355___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1357_paramI;
          _1357_paramI = BigInteger.Zero;
          while ((_1357_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1358_param;
            _1358_param = (@params).Select(_1357_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1358_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1358_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1357_paramI = (_1357_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1359_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1360_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out195;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out196;
          DCOMP.COMP.GenStmts(_1356_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out195, out _out196);
          _1359_bodyString = _out195;
          _1360_bodyIdents = _out196;
          readIdents = _1360_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1359_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source101.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source101.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1361___mcc_h25 = _source101.dtor_Print_a0;
        DAST._IExpression _1362_e = _1361___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1363_printedExpr;
          bool _1364_isOwned;
          bool _1365___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1366_recIdents;
          Dafny.ISequence<Dafny.Rune> _out197;
          bool _out198;
          bool _out199;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out200;
          DCOMP.COMP.GenExpr(_1362_e, selfIdent, @params, false, out _out197, out _out198, out _out199, out _out200);
          _1363_printedExpr = _out197;
          _1364_isOwned = _out198;
          _1365___v30 = _out199;
          _1366_recIdents = _out200;
          if (_1364_isOwned) {
            _1363_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1363_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1363_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1366_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source106 = e;
      if (_source106.is_Literal) {
        DAST._ILiteral _1367___mcc_h0 = _source106.dtor_Literal_a0;
        DAST._ILiteral _source107 = _1367___mcc_h0;
        if (_source107.is_BoolLiteral) {
          bool _1368___mcc_h1 = _source107.dtor_BoolLiteral_a0;
          if ((_1368___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source107.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1369___mcc_h2 = _source107.dtor_IntLiteral_a0;
          DAST._IType _1370___mcc_h3 = _source107.dtor_IntLiteral_a1;
          DAST._IType _1371_t = _1370___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1372_i = _1369___mcc_h2;
          {
            DAST._IType _source108 = _1371_t;
            if (_source108.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1373___mcc_h237 = _source108.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1374___mcc_h238 = _source108.dtor_typeArgs;
              DAST._IResolvedType _1375___mcc_h239 = _source108.dtor_resolved;
              DAST._IType _1376_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1377_genType;
                Dafny.ISequence<Dafny.Rune> _out201;
                _out201 = DCOMP.COMP.GenType(_1376_o, false, false);
                _1377_genType = _out201;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1377_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Nullable) {
              DAST._IType _1378___mcc_h243 = _source108.dtor_Nullable_a0;
              DAST._IType _1379_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1380_genType;
                Dafny.ISequence<Dafny.Rune> _out202;
                _out202 = DCOMP.COMP.GenType(_1379_o, false, false);
                _1380_genType = _out202;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1380_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1381___mcc_h245 = _source108.dtor_Tuple_a0;
              DAST._IType _1382_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1383_genType;
                Dafny.ISequence<Dafny.Rune> _out203;
                _out203 = DCOMP.COMP.GenType(_1382_o, false, false);
                _1383_genType = _out203;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1383_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Array) {
              DAST._IType _1384___mcc_h247 = _source108.dtor_element;
              BigInteger _1385___mcc_h248 = _source108.dtor_dims;
              DAST._IType _1386_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1387_genType;
                Dafny.ISequence<Dafny.Rune> _out204;
                _out204 = DCOMP.COMP.GenType(_1386_o, false, false);
                _1387_genType = _out204;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1387_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Seq) {
              DAST._IType _1388___mcc_h251 = _source108.dtor_element;
              DAST._IType _1389_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1390_genType;
                Dafny.ISequence<Dafny.Rune> _out205;
                _out205 = DCOMP.COMP.GenType(_1389_o, false, false);
                _1390_genType = _out205;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1390_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Set) {
              DAST._IType _1391___mcc_h253 = _source108.dtor_element;
              DAST._IType _1392_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1393_genType;
                Dafny.ISequence<Dafny.Rune> _out206;
                _out206 = DCOMP.COMP.GenType(_1392_o, false, false);
                _1393_genType = _out206;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1393_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Multiset) {
              DAST._IType _1394___mcc_h255 = _source108.dtor_element;
              DAST._IType _1395_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1396_genType;
                Dafny.ISequence<Dafny.Rune> _out207;
                _out207 = DCOMP.COMP.GenType(_1395_o, false, false);
                _1396_genType = _out207;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1396_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Map) {
              DAST._IType _1397___mcc_h257 = _source108.dtor_key;
              DAST._IType _1398___mcc_h258 = _source108.dtor_value;
              DAST._IType _1399_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1400_genType;
                Dafny.ISequence<Dafny.Rune> _out208;
                _out208 = DCOMP.COMP.GenType(_1399_o, false, false);
                _1400_genType = _out208;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1400_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1401___mcc_h261 = _source108.dtor_args;
              DAST._IType _1402___mcc_h262 = _source108.dtor_result;
              DAST._IType _1403_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1404_genType;
                Dafny.ISequence<Dafny.Rune> _out209;
                _out209 = DCOMP.COMP.GenType(_1403_o, false, false);
                _1404_genType = _out209;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1404_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source108.is_Primitive) {
              DAST._IPrimitive _1405___mcc_h265 = _source108.dtor_Primitive_a0;
              DAST._IPrimitive _source109 = _1405___mcc_h265;
              if (_source109.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source109.is_Real) {
                DAST._IType _1406_o = _1371_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1407_genType;
                  Dafny.ISequence<Dafny.Rune> _out210;
                  _out210 = DCOMP.COMP.GenType(_1406_o, false, false);
                  _1407_genType = _out210;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1407_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source109.is_String) {
                DAST._IType _1408_o = _1371_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1409_genType;
                  Dafny.ISequence<Dafny.Rune> _out211;
                  _out211 = DCOMP.COMP.GenType(_1408_o, false, false);
                  _1409_genType = _out211;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1409_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source109.is_Bool) {
                DAST._IType _1410_o = _1371_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1411_genType;
                  Dafny.ISequence<Dafny.Rune> _out212;
                  _out212 = DCOMP.COMP.GenType(_1410_o, false, false);
                  _1411_genType = _out212;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1411_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1412_o = _1371_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1413_genType;
                  Dafny.ISequence<Dafny.Rune> _out213;
                  _out213 = DCOMP.COMP.GenType(_1412_o, false, false);
                  _1413_genType = _out213;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1413_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source108.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1414___mcc_h267 = _source108.dtor_Passthrough_a0;
              DAST._IType _1415_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1416_genType;
                Dafny.ISequence<Dafny.Rune> _out214;
                _out214 = DCOMP.COMP.GenType(_1415_o, false, false);
                _1416_genType = _out214;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1416_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1417___mcc_h269 = _source108.dtor_TypeArg_a0;
              DAST._IType _1418_o = _1371_t;
              {
                Dafny.ISequence<Dafny.Rune> _1419_genType;
                Dafny.ISequence<Dafny.Rune> _out215;
                _out215 = DCOMP.COMP.GenType(_1418_o, false, false);
                _1419_genType = _out215;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1372_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1419_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source107.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1420___mcc_h4 = _source107.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1421___mcc_h5 = _source107.dtor_DecLiteral_a1;
          DAST._IType _1422___mcc_h6 = _source107.dtor_DecLiteral_a2;
          DAST._IType _1423_t = _1422___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1424_d = _1421___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1425_n = _1420___mcc_h4;
          {
            DAST._IType _source110 = _1423_t;
            if (_source110.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1426___mcc_h271 = _source110.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1427___mcc_h272 = _source110.dtor_typeArgs;
              DAST._IResolvedType _1428___mcc_h273 = _source110.dtor_resolved;
              DAST._IType _1429_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1430_genType;
                Dafny.ISequence<Dafny.Rune> _out216;
                _out216 = DCOMP.COMP.GenType(_1429_o, false, false);
                _1430_genType = _out216;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1430_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Nullable) {
              DAST._IType _1431___mcc_h277 = _source110.dtor_Nullable_a0;
              DAST._IType _1432_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1433_genType;
                Dafny.ISequence<Dafny.Rune> _out217;
                _out217 = DCOMP.COMP.GenType(_1432_o, false, false);
                _1433_genType = _out217;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1433_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1434___mcc_h279 = _source110.dtor_Tuple_a0;
              DAST._IType _1435_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1436_genType;
                Dafny.ISequence<Dafny.Rune> _out218;
                _out218 = DCOMP.COMP.GenType(_1435_o, false, false);
                _1436_genType = _out218;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1436_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Array) {
              DAST._IType _1437___mcc_h281 = _source110.dtor_element;
              BigInteger _1438___mcc_h282 = _source110.dtor_dims;
              DAST._IType _1439_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1440_genType;
                Dafny.ISequence<Dafny.Rune> _out219;
                _out219 = DCOMP.COMP.GenType(_1439_o, false, false);
                _1440_genType = _out219;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1440_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Seq) {
              DAST._IType _1441___mcc_h285 = _source110.dtor_element;
              DAST._IType _1442_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1443_genType;
                Dafny.ISequence<Dafny.Rune> _out220;
                _out220 = DCOMP.COMP.GenType(_1442_o, false, false);
                _1443_genType = _out220;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1443_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Set) {
              DAST._IType _1444___mcc_h287 = _source110.dtor_element;
              DAST._IType _1445_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1446_genType;
                Dafny.ISequence<Dafny.Rune> _out221;
                _out221 = DCOMP.COMP.GenType(_1445_o, false, false);
                _1446_genType = _out221;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1446_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Multiset) {
              DAST._IType _1447___mcc_h289 = _source110.dtor_element;
              DAST._IType _1448_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1449_genType;
                Dafny.ISequence<Dafny.Rune> _out222;
                _out222 = DCOMP.COMP.GenType(_1448_o, false, false);
                _1449_genType = _out222;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1449_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Map) {
              DAST._IType _1450___mcc_h291 = _source110.dtor_key;
              DAST._IType _1451___mcc_h292 = _source110.dtor_value;
              DAST._IType _1452_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1453_genType;
                Dafny.ISequence<Dafny.Rune> _out223;
                _out223 = DCOMP.COMP.GenType(_1452_o, false, false);
                _1453_genType = _out223;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1453_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1454___mcc_h295 = _source110.dtor_args;
              DAST._IType _1455___mcc_h296 = _source110.dtor_result;
              DAST._IType _1456_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1457_genType;
                Dafny.ISequence<Dafny.Rune> _out224;
                _out224 = DCOMP.COMP.GenType(_1456_o, false, false);
                _1457_genType = _out224;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1457_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source110.is_Primitive) {
              DAST._IPrimitive _1458___mcc_h299 = _source110.dtor_Primitive_a0;
              DAST._IPrimitive _source111 = _1458___mcc_h299;
              if (_source111.is_Int) {
                DAST._IType _1459_o = _1423_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1460_genType;
                  Dafny.ISequence<Dafny.Rune> _out225;
                  _out225 = DCOMP.COMP.GenType(_1459_o, false, false);
                  _1460_genType = _out225;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1460_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source111.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source111.is_String) {
                DAST._IType _1461_o = _1423_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1462_genType;
                  Dafny.ISequence<Dafny.Rune> _out226;
                  _out226 = DCOMP.COMP.GenType(_1461_o, false, false);
                  _1462_genType = _out226;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1462_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source111.is_Bool) {
                DAST._IType _1463_o = _1423_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1464_genType;
                  Dafny.ISequence<Dafny.Rune> _out227;
                  _out227 = DCOMP.COMP.GenType(_1463_o, false, false);
                  _1464_genType = _out227;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1464_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1465_o = _1423_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1466_genType;
                  Dafny.ISequence<Dafny.Rune> _out228;
                  _out228 = DCOMP.COMP.GenType(_1465_o, false, false);
                  _1466_genType = _out228;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1466_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source110.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1467___mcc_h301 = _source110.dtor_Passthrough_a0;
              DAST._IType _1468_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1469_genType;
                Dafny.ISequence<Dafny.Rune> _out229;
                _out229 = DCOMP.COMP.GenType(_1468_o, false, false);
                _1469_genType = _out229;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1469_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1470___mcc_h303 = _source110.dtor_TypeArg_a0;
              DAST._IType _1471_o = _1423_t;
              {
                Dafny.ISequence<Dafny.Rune> _1472_genType;
                Dafny.ISequence<Dafny.Rune> _out230;
                _out230 = DCOMP.COMP.GenType(_1471_o, false, false);
                _1472_genType = _out230;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1425_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1424_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1472_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source107.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1473___mcc_h7 = _source107.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1474_l = _1473___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1474_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source107.is_CharLiteral) {
          Dafny.Rune _1475___mcc_h8 = _source107.dtor_CharLiteral_a0;
          Dafny.Rune _1476_c = _1475___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_1476_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1477___mcc_h9 = _source107.dtor_Null_a0;
          DAST._IType _1478_tpe = _1477___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1479_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out231;
            _out231 = DCOMP.COMP.GenType(_1478_tpe, false, false);
            _1479_tpeGen = _out231;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1479_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source106.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1480___mcc_h10 = _source106.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1481_name = _1480___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1481_name);
          if (!((@params).Contains(_1481_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1481_name);
        }
      } else if (_source106.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1482___mcc_h11 = _source106.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1483_path = _1482___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out232;
          _out232 = DCOMP.COMP.GenPath(_1483_path);
          s = _out232;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source106.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1484___mcc_h12 = _source106.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1485_values = _1484___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1486_i;
          _1486_i = BigInteger.Zero;
          while ((_1486_i) < (new BigInteger((_1485_values).Count))) {
            if ((_1486_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1487_recursiveGen;
            bool _1488___v31;
            bool _1489_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1490_recIdents;
            Dafny.ISequence<Dafny.Rune> _out233;
            bool _out234;
            bool _out235;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out236;
            DCOMP.COMP.GenExpr((_1485_values).Select(_1486_i), selfIdent, @params, true, out _out233, out _out234, out _out235, out _out236);
            _1487_recursiveGen = _out233;
            _1488___v31 = _out234;
            _1489_isErased = _out235;
            _1490_recIdents = _out236;
            if (_1489_isErased) {
              _1487_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1487_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1487_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1490_recIdents);
            _1486_i = (_1486_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1491___mcc_h13 = _source106.dtor_path;
        Dafny.ISequence<DAST._IType> _1492___mcc_h14 = _source106.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1493___mcc_h15 = _source106.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1494_args = _1493___mcc_h15;
        Dafny.ISequence<DAST._IType> _1495_typeArgs = _1492___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1496_path = _1491___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1497_path;
          Dafny.ISequence<Dafny.Rune> _out237;
          _out237 = DCOMP.COMP.GenPath(_1496_path);
          _1497_path = _out237;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1497_path);
          if ((new BigInteger((_1495_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1498_i;
            _1498_i = BigInteger.Zero;
            while ((_1498_i) < (new BigInteger((_1495_typeArgs).Count))) {
              if ((_1498_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1499_typeString;
              Dafny.ISequence<Dafny.Rune> _out238;
              _out238 = DCOMP.COMP.GenType((_1495_typeArgs).Select(_1498_i), false, false);
              _1499_typeString = _out238;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1499_typeString);
              _1498_i = (_1498_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1500_i;
          _1500_i = BigInteger.Zero;
          while ((_1500_i) < (new BigInteger((_1494_args).Count))) {
            if ((_1500_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1501_recursiveGen;
            bool _1502___v32;
            bool _1503_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1504_recIdents;
            Dafny.ISequence<Dafny.Rune> _out239;
            bool _out240;
            bool _out241;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
            DCOMP.COMP.GenExpr((_1494_args).Select(_1500_i), selfIdent, @params, true, out _out239, out _out240, out _out241, out _out242);
            _1501_recursiveGen = _out239;
            _1502___v32 = _out240;
            _1503_isErased = _out241;
            _1504_recIdents = _out242;
            if (_1503_isErased) {
              _1501_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1501_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1501_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1504_recIdents);
            _1500_i = (_1500_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source106.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1505___mcc_h16 = _source106.dtor_dims;
        DAST._IType _1506___mcc_h17 = _source106.dtor_typ;
        DAST._IType _1507_typ = _1506___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1508_dims = _1505___mcc_h16;
        {
          BigInteger _1509_i;
          _1509_i = (new BigInteger((_1508_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1510_genTyp;
          Dafny.ISequence<Dafny.Rune> _out243;
          _out243 = DCOMP.COMP.GenType(_1507_typ, false, false);
          _1510_genTyp = _out243;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1510_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1509_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1511_recursiveGen;
            bool _1512___v33;
            bool _1513_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1514_recIdents;
            Dafny.ISequence<Dafny.Rune> _out244;
            bool _out245;
            bool _out246;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
            DCOMP.COMP.GenExpr((_1508_dims).Select(_1509_i), selfIdent, @params, true, out _out244, out _out245, out _out246, out _out247);
            _1511_recursiveGen = _out244;
            _1512___v33 = _out245;
            _1513_isErased = _out246;
            _1514_recIdents = _out247;
            if (!(_1513_isErased)) {
              _1511_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1511_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1511_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1514_recIdents);
            _1509_i = (_1509_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1515___mcc_h18 = _source106.dtor_path;
        Dafny.ISequence<DAST._IType> _1516___mcc_h19 = _source106.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1517___mcc_h20 = _source106.dtor_variant;
        bool _1518___mcc_h21 = _source106.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1519___mcc_h22 = _source106.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1520_values = _1519___mcc_h22;
        bool _1521_isCo = _1518___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1522_variant = _1517___mcc_h20;
        Dafny.ISequence<DAST._IType> _1523_typeArgs = _1516___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1524_path = _1515___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1525_path;
          Dafny.ISequence<Dafny.Rune> _out248;
          _out248 = DCOMP.COMP.GenPath(_1524_path);
          _1525_path = _out248;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1525_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1523_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1526_i;
            _1526_i = BigInteger.Zero;
            while ((_1526_i) < (new BigInteger((_1523_typeArgs).Count))) {
              if ((_1526_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1527_typeString;
              Dafny.ISequence<Dafny.Rune> _out249;
              _out249 = DCOMP.COMP.GenType((_1523_typeArgs).Select(_1526_i), false, false);
              _1527_typeString = _out249;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1527_typeString);
              _1526_i = (_1526_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1522_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1528_i;
          _1528_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1528_i) < (new BigInteger((_1520_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs8 = (_1520_values).Select(_1528_i);
            Dafny.ISequence<Dafny.Rune> _1529_name = _let_tmp_rhs8.dtor__0;
            DAST._IExpression _1530_value = _let_tmp_rhs8.dtor__1;
            if ((_1528_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1521_isCo) {
              Dafny.ISequence<Dafny.Rune> _1531_recursiveGen;
              bool _1532___v34;
              bool _1533_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1534_recIdents;
              Dafny.ISequence<Dafny.Rune> _out250;
              bool _out251;
              bool _out252;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out253;
              DCOMP.COMP.GenExpr(_1530_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out250, out _out251, out _out252, out _out253);
              _1531_recursiveGen = _out250;
              _1532___v34 = _out251;
              _1533_isErased = _out252;
              _1534_recIdents = _out253;
              if (!(_1533_isErased)) {
                _1531_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1531_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1531_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1531_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1534_recIdents);
              Dafny.ISequence<Dafny.Rune> _1535_allReadCloned;
              _1535_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1534_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1536_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_1534_recIdents).Elements) {
                  _1536_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_1534_recIdents).Contains(_1536_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _1535_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1535_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1536_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1536_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1534_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1534_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1536_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1529_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1535_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1531_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1537_recursiveGen;
              bool _1538___v35;
              bool _1539_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1540_recIdents;
              Dafny.ISequence<Dafny.Rune> _out254;
              bool _out255;
              bool _out256;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out257;
              DCOMP.COMP.GenExpr(_1530_value, selfIdent, @params, true, out _out254, out _out255, out _out256, out _out257);
              _1537_recursiveGen = _out254;
              _1538___v35 = _out255;
              _1539_isErased = _out256;
              _1540_recIdents = _out257;
              if (!(_1539_isErased)) {
                _1537_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1537_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1537_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1537_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1529_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1537_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1540_recIdents);
            }
            _1528_i = (_1528_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_Convert) {
        DAST._IExpression _1541___mcc_h23 = _source106.dtor_value;
        DAST._IType _1542___mcc_h24 = _source106.dtor_from;
        DAST._IType _1543___mcc_h25 = _source106.dtor_typ;
        DAST._IType _1544_toTpe = _1543___mcc_h25;
        DAST._IType _1545_fromTpe = _1542___mcc_h24;
        DAST._IExpression _1546_expr = _1541___mcc_h23;
        {
          if (object.Equals(_1545_fromTpe, _1544_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1547_recursiveGen;
            bool _1548_recOwned;
            bool _1549_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1550_recIdents;
            Dafny.ISequence<Dafny.Rune> _out258;
            bool _out259;
            bool _out260;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out261;
            DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out258, out _out259, out _out260, out _out261);
            _1547_recursiveGen = _out258;
            _1548_recOwned = _out259;
            _1549_recErased = _out260;
            _1550_recIdents = _out261;
            s = _1547_recursiveGen;
            isOwned = _1548_recOwned;
            isErased = _1549_recErased;
            readIdents = _1550_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source112 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1545_fromTpe, _1544_toTpe);
            DAST._IType _1551___mcc_h305 = _source112.dtor__0;
            DAST._IType _1552___mcc_h306 = _source112.dtor__1;
            DAST._IType _source113 = _1551___mcc_h305;
            if (_source113.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1553___mcc_h309 = _source113.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1554___mcc_h310 = _source113.dtor_typeArgs;
              DAST._IResolvedType _1555___mcc_h311 = _source113.dtor_resolved;
              DAST._IResolvedType _source114 = _1555___mcc_h311;
              if (_source114.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1556___mcc_h321 = _source114.dtor_path;
                DAST._IType _source115 = _1552___mcc_h306;
                if (_source115.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1557___mcc_h325 = _source115.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1558___mcc_h326 = _source115.dtor_typeArgs;
                  DAST._IResolvedType _1559___mcc_h327 = _source115.dtor_resolved;
                  DAST._IResolvedType _source116 = _1559___mcc_h327;
                  if (_source116.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1560___mcc_h331 = _source116.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1561_recursiveGen;
                      bool _1562_recOwned;
                      bool _1563_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1564_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out262;
                      bool _out263;
                      bool _out264;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out265;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out262, out _out263, out _out264, out _out265);
                      _1561_recursiveGen = _out262;
                      _1562_recOwned = _out263;
                      _1563_recErased = _out264;
                      _1564_recIdents = _out265;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1561_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1562_recOwned;
                      isErased = _1563_recErased;
                      readIdents = _1564_recIdents;
                    }
                  } else if (_source116.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1565___mcc_h333 = _source116.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1566_recursiveGen;
                      bool _1567_recOwned;
                      bool _1568_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1569_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out266;
                      bool _out267;
                      bool _out268;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out269;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out266, out _out267, out _out268, out _out269);
                      _1566_recursiveGen = _out266;
                      _1567_recOwned = _out267;
                      _1568_recErased = _out268;
                      _1569_recIdents = _out269;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1566_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1567_recOwned;
                      isErased = _1568_recErased;
                      readIdents = _1569_recIdents;
                    }
                  } else {
                    DAST._IType _1570___mcc_h335 = _source116.dtor_Newtype_a0;
                    DAST._IType _1571_b = _1570___mcc_h335;
                    {
                      if (object.Equals(_1545_fromTpe, _1571_b)) {
                        Dafny.ISequence<Dafny.Rune> _1572_recursiveGen;
                        bool _1573_recOwned;
                        bool _1574_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1575_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out270;
                        bool _out271;
                        bool _out272;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out273;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out270, out _out271, out _out272, out _out273);
                        _1572_recursiveGen = _out270;
                        _1573_recOwned = _out271;
                        _1574_recErased = _out272;
                        _1575_recIdents = _out273;
                        Dafny.ISequence<Dafny.Rune> _1576_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out274;
                        _out274 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                        _1576_rhsType = _out274;
                        Dafny.ISequence<Dafny.Rune> _1577_uneraseFn;
                        _1577_uneraseFn = ((_1573_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1576_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1577_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1572_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1573_recOwned;
                        isErased = false;
                        readIdents = _1575_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out275;
                        bool _out276;
                        bool _out277;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1571_b), _1571_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                        s = _out275;
                        isOwned = _out276;
                        isErased = _out277;
                        readIdents = _out278;
                      }
                    }
                  }
                } else if (_source115.is_Nullable) {
                  DAST._IType _1578___mcc_h337 = _source115.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1579_recursiveGen;
                    bool _1580_recOwned;
                    bool _1581_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1582_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out279;
                    bool _out280;
                    bool _out281;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out282;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out279, out _out280, out _out281, out _out282);
                    _1579_recursiveGen = _out279;
                    _1580_recOwned = _out280;
                    _1581_recErased = _out281;
                    _1582_recIdents = _out282;
                    if (!(_1580_recOwned)) {
                      _1579_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1579_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1579_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1581_recErased;
                    readIdents = _1582_recIdents;
                  }
                } else if (_source115.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1583___mcc_h339 = _source115.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1584_recursiveGen;
                    bool _1585_recOwned;
                    bool _1586_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1587_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out283;
                    bool _out284;
                    bool _out285;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out286;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out283, out _out284, out _out285, out _out286);
                    _1584_recursiveGen = _out283;
                    _1585_recOwned = _out284;
                    _1586_recErased = _out285;
                    _1587_recIdents = _out286;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1584_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1585_recOwned;
                    isErased = _1586_recErased;
                    readIdents = _1587_recIdents;
                  }
                } else if (_source115.is_Array) {
                  DAST._IType _1588___mcc_h341 = _source115.dtor_element;
                  BigInteger _1589___mcc_h342 = _source115.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1590_recursiveGen;
                    bool _1591_recOwned;
                    bool _1592_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1593_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out287;
                    bool _out288;
                    bool _out289;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out287, out _out288, out _out289, out _out290);
                    _1590_recursiveGen = _out287;
                    _1591_recOwned = _out288;
                    _1592_recErased = _out289;
                    _1593_recIdents = _out290;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1590_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1591_recOwned;
                    isErased = _1592_recErased;
                    readIdents = _1593_recIdents;
                  }
                } else if (_source115.is_Seq) {
                  DAST._IType _1594___mcc_h345 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1595_recursiveGen;
                    bool _1596_recOwned;
                    bool _1597_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1598_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out291;
                    bool _out292;
                    bool _out293;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out294;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out291, out _out292, out _out293, out _out294);
                    _1595_recursiveGen = _out291;
                    _1596_recOwned = _out292;
                    _1597_recErased = _out293;
                    _1598_recIdents = _out294;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1595_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1596_recOwned;
                    isErased = _1597_recErased;
                    readIdents = _1598_recIdents;
                  }
                } else if (_source115.is_Set) {
                  DAST._IType _1599___mcc_h347 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1600_recursiveGen;
                    bool _1601_recOwned;
                    bool _1602_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1603_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out295;
                    bool _out296;
                    bool _out297;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out298;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out295, out _out296, out _out297, out _out298);
                    _1600_recursiveGen = _out295;
                    _1601_recOwned = _out296;
                    _1602_recErased = _out297;
                    _1603_recIdents = _out298;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1601_recOwned;
                    isErased = _1602_recErased;
                    readIdents = _1603_recIdents;
                  }
                } else if (_source115.is_Multiset) {
                  DAST._IType _1604___mcc_h349 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1605_recursiveGen;
                    bool _1606_recOwned;
                    bool _1607_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1608_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out299;
                    bool _out300;
                    bool _out301;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out302;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out299, out _out300, out _out301, out _out302);
                    _1605_recursiveGen = _out299;
                    _1606_recOwned = _out300;
                    _1607_recErased = _out301;
                    _1608_recIdents = _out302;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1605_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1606_recOwned;
                    isErased = _1607_recErased;
                    readIdents = _1608_recIdents;
                  }
                } else if (_source115.is_Map) {
                  DAST._IType _1609___mcc_h351 = _source115.dtor_key;
                  DAST._IType _1610___mcc_h352 = _source115.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1611_recursiveGen;
                    bool _1612_recOwned;
                    bool _1613_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1614_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out303;
                    bool _out304;
                    bool _out305;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out306;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out303, out _out304, out _out305, out _out306);
                    _1611_recursiveGen = _out303;
                    _1612_recOwned = _out304;
                    _1613_recErased = _out305;
                    _1614_recIdents = _out306;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1612_recOwned;
                    isErased = _1613_recErased;
                    readIdents = _1614_recIdents;
                  }
                } else if (_source115.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1615___mcc_h355 = _source115.dtor_args;
                  DAST._IType _1616___mcc_h356 = _source115.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1617_recursiveGen;
                    bool _1618_recOwned;
                    bool _1619_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1620_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out307;
                    bool _out308;
                    bool _out309;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out310;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out307, out _out308, out _out309, out _out310);
                    _1617_recursiveGen = _out307;
                    _1618_recOwned = _out308;
                    _1619_recErased = _out309;
                    _1620_recIdents = _out310;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1617_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1618_recOwned;
                    isErased = _1619_recErased;
                    readIdents = _1620_recIdents;
                  }
                } else if (_source115.is_Primitive) {
                  DAST._IPrimitive _1621___mcc_h359 = _source115.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1622_recursiveGen;
                    bool _1623_recOwned;
                    bool _1624_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1625_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out311;
                    bool _out312;
                    bool _out313;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out314;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out311, out _out312, out _out313, out _out314);
                    _1622_recursiveGen = _out311;
                    _1623_recOwned = _out312;
                    _1624_recErased = _out313;
                    _1625_recIdents = _out314;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1622_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1623_recOwned;
                    isErased = _1624_recErased;
                    readIdents = _1625_recIdents;
                  }
                } else if (_source115.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1626___mcc_h361 = _source115.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1627_recursiveGen;
                    bool _1628_recOwned;
                    bool _1629_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1630_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out315;
                    bool _out316;
                    bool _out317;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out318;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out315, out _out316, out _out317, out _out318);
                    _1627_recursiveGen = _out315;
                    _1628_recOwned = _out316;
                    _1629_recErased = _out317;
                    _1630_recIdents = _out318;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1627_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1628_recOwned;
                    isErased = _1629_recErased;
                    readIdents = _1630_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1631___mcc_h363 = _source115.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1632_recursiveGen;
                    bool _1633_recOwned;
                    bool _1634_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1635_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out319;
                    bool _out320;
                    bool _out321;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out322;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out319, out _out320, out _out321, out _out322);
                    _1632_recursiveGen = _out319;
                    _1633_recOwned = _out320;
                    _1634_recErased = _out321;
                    _1635_recIdents = _out322;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1632_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1633_recOwned;
                    isErased = _1634_recErased;
                    readIdents = _1635_recIdents;
                  }
                }
              } else if (_source114.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1636___mcc_h365 = _source114.dtor_path;
                DAST._IType _source117 = _1552___mcc_h306;
                if (_source117.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1637___mcc_h369 = _source117.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1638___mcc_h370 = _source117.dtor_typeArgs;
                  DAST._IResolvedType _1639___mcc_h371 = _source117.dtor_resolved;
                  DAST._IResolvedType _source118 = _1639___mcc_h371;
                  if (_source118.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1640___mcc_h375 = _source118.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1641_recursiveGen;
                      bool _1642_recOwned;
                      bool _1643_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1644_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out323;
                      bool _out324;
                      bool _out325;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out326;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out323, out _out324, out _out325, out _out326);
                      _1641_recursiveGen = _out323;
                      _1642_recOwned = _out324;
                      _1643_recErased = _out325;
                      _1644_recIdents = _out326;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1641_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1642_recOwned;
                      isErased = _1643_recErased;
                      readIdents = _1644_recIdents;
                    }
                  } else if (_source118.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1645___mcc_h377 = _source118.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1646_recursiveGen;
                      bool _1647_recOwned;
                      bool _1648_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1649_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out327;
                      bool _out328;
                      bool _out329;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out330;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out327, out _out328, out _out329, out _out330);
                      _1646_recursiveGen = _out327;
                      _1647_recOwned = _out328;
                      _1648_recErased = _out329;
                      _1649_recIdents = _out330;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1647_recOwned;
                      isErased = _1648_recErased;
                      readIdents = _1649_recIdents;
                    }
                  } else {
                    DAST._IType _1650___mcc_h379 = _source118.dtor_Newtype_a0;
                    DAST._IType _1651_b = _1650___mcc_h379;
                    {
                      if (object.Equals(_1545_fromTpe, _1651_b)) {
                        Dafny.ISequence<Dafny.Rune> _1652_recursiveGen;
                        bool _1653_recOwned;
                        bool _1654_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1655_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out331;
                        bool _out332;
                        bool _out333;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out334;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out331, out _out332, out _out333, out _out334);
                        _1652_recursiveGen = _out331;
                        _1653_recOwned = _out332;
                        _1654_recErased = _out333;
                        _1655_recIdents = _out334;
                        Dafny.ISequence<Dafny.Rune> _1656_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out335;
                        _out335 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                        _1656_rhsType = _out335;
                        Dafny.ISequence<Dafny.Rune> _1657_uneraseFn;
                        _1657_uneraseFn = ((_1653_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1656_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1657_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1652_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1653_recOwned;
                        isErased = false;
                        readIdents = _1655_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out336;
                        bool _out337;
                        bool _out338;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1651_b), _1651_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                        s = _out336;
                        isOwned = _out337;
                        isErased = _out338;
                        readIdents = _out339;
                      }
                    }
                  }
                } else if (_source117.is_Nullable) {
                  DAST._IType _1658___mcc_h381 = _source117.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1659_recursiveGen;
                    bool _1660_recOwned;
                    bool _1661_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1662_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out340;
                    bool _out341;
                    bool _out342;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                    _1659_recursiveGen = _out340;
                    _1660_recOwned = _out341;
                    _1661_recErased = _out342;
                    _1662_recIdents = _out343;
                    if (!(_1660_recOwned)) {
                      _1659_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1659_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1659_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1661_recErased;
                    readIdents = _1662_recIdents;
                  }
                } else if (_source117.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1663___mcc_h383 = _source117.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1664_recursiveGen;
                    bool _1665_recOwned;
                    bool _1666_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1667_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out344;
                    bool _out345;
                    bool _out346;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                    _1664_recursiveGen = _out344;
                    _1665_recOwned = _out345;
                    _1666_recErased = _out346;
                    _1667_recIdents = _out347;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1664_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1665_recOwned;
                    isErased = _1666_recErased;
                    readIdents = _1667_recIdents;
                  }
                } else if (_source117.is_Array) {
                  DAST._IType _1668___mcc_h385 = _source117.dtor_element;
                  BigInteger _1669___mcc_h386 = _source117.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1670_recursiveGen;
                    bool _1671_recOwned;
                    bool _1672_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1673_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out348;
                    bool _out349;
                    bool _out350;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out348, out _out349, out _out350, out _out351);
                    _1670_recursiveGen = _out348;
                    _1671_recOwned = _out349;
                    _1672_recErased = _out350;
                    _1673_recIdents = _out351;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1670_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1671_recOwned;
                    isErased = _1672_recErased;
                    readIdents = _1673_recIdents;
                  }
                } else if (_source117.is_Seq) {
                  DAST._IType _1674___mcc_h389 = _source117.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1675_recursiveGen;
                    bool _1676_recOwned;
                    bool _1677_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1678_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out352;
                    bool _out353;
                    bool _out354;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out355;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out352, out _out353, out _out354, out _out355);
                    _1675_recursiveGen = _out352;
                    _1676_recOwned = _out353;
                    _1677_recErased = _out354;
                    _1678_recIdents = _out355;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1675_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1676_recOwned;
                    isErased = _1677_recErased;
                    readIdents = _1678_recIdents;
                  }
                } else if (_source117.is_Set) {
                  DAST._IType _1679___mcc_h391 = _source117.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1680_recursiveGen;
                    bool _1681_recOwned;
                    bool _1682_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1683_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out356;
                    bool _out357;
                    bool _out358;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out359;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out356, out _out357, out _out358, out _out359);
                    _1680_recursiveGen = _out356;
                    _1681_recOwned = _out357;
                    _1682_recErased = _out358;
                    _1683_recIdents = _out359;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1680_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1681_recOwned;
                    isErased = _1682_recErased;
                    readIdents = _1683_recIdents;
                  }
                } else if (_source117.is_Multiset) {
                  DAST._IType _1684___mcc_h393 = _source117.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1685_recursiveGen;
                    bool _1686_recOwned;
                    bool _1687_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1688_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out360;
                    bool _out361;
                    bool _out362;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out363;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out360, out _out361, out _out362, out _out363);
                    _1685_recursiveGen = _out360;
                    _1686_recOwned = _out361;
                    _1687_recErased = _out362;
                    _1688_recIdents = _out363;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1686_recOwned;
                    isErased = _1687_recErased;
                    readIdents = _1688_recIdents;
                  }
                } else if (_source117.is_Map) {
                  DAST._IType _1689___mcc_h395 = _source117.dtor_key;
                  DAST._IType _1690___mcc_h396 = _source117.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1691_recursiveGen;
                    bool _1692_recOwned;
                    bool _1693_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1694_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out364;
                    bool _out365;
                    bool _out366;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out367;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out364, out _out365, out _out366, out _out367);
                    _1691_recursiveGen = _out364;
                    _1692_recOwned = _out365;
                    _1693_recErased = _out366;
                    _1694_recIdents = _out367;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1692_recOwned;
                    isErased = _1693_recErased;
                    readIdents = _1694_recIdents;
                  }
                } else if (_source117.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1695___mcc_h399 = _source117.dtor_args;
                  DAST._IType _1696___mcc_h400 = _source117.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1697_recursiveGen;
                    bool _1698_recOwned;
                    bool _1699_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1700_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out368;
                    bool _out369;
                    bool _out370;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out368, out _out369, out _out370, out _out371);
                    _1697_recursiveGen = _out368;
                    _1698_recOwned = _out369;
                    _1699_recErased = _out370;
                    _1700_recIdents = _out371;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1697_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1698_recOwned;
                    isErased = _1699_recErased;
                    readIdents = _1700_recIdents;
                  }
                } else if (_source117.is_Primitive) {
                  DAST._IPrimitive _1701___mcc_h403 = _source117.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1702_recursiveGen;
                    bool _1703_recOwned;
                    bool _1704_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1705_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out372;
                    bool _out373;
                    bool _out374;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out375;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out372, out _out373, out _out374, out _out375);
                    _1702_recursiveGen = _out372;
                    _1703_recOwned = _out373;
                    _1704_recErased = _out374;
                    _1705_recIdents = _out375;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1702_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1703_recOwned;
                    isErased = _1704_recErased;
                    readIdents = _1705_recIdents;
                  }
                } else if (_source117.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1706___mcc_h405 = _source117.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1707_recursiveGen;
                    bool _1708_recOwned;
                    bool _1709_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1710_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out376;
                    bool _out377;
                    bool _out378;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out379;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out376, out _out377, out _out378, out _out379);
                    _1707_recursiveGen = _out376;
                    _1708_recOwned = _out377;
                    _1709_recErased = _out378;
                    _1710_recIdents = _out379;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1707_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1708_recOwned;
                    isErased = _1709_recErased;
                    readIdents = _1710_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1711___mcc_h407 = _source117.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1712_recursiveGen;
                    bool _1713_recOwned;
                    bool _1714_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1715_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out380;
                    bool _out381;
                    bool _out382;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out383;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out380, out _out381, out _out382, out _out383);
                    _1712_recursiveGen = _out380;
                    _1713_recOwned = _out381;
                    _1714_recErased = _out382;
                    _1715_recIdents = _out383;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1712_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1713_recOwned;
                    isErased = _1714_recErased;
                    readIdents = _1715_recIdents;
                  }
                }
              } else {
                DAST._IType _1716___mcc_h409 = _source114.dtor_Newtype_a0;
                DAST._IType _source119 = _1552___mcc_h306;
                if (_source119.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1717___mcc_h413 = _source119.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1718___mcc_h414 = _source119.dtor_typeArgs;
                  DAST._IResolvedType _1719___mcc_h415 = _source119.dtor_resolved;
                  DAST._IResolvedType _source120 = _1719___mcc_h415;
                  if (_source120.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1720___mcc_h422 = _source120.dtor_path;
                    DAST._IType _1721_b = _1716___mcc_h409;
                    {
                      if (object.Equals(_1721_b, _1544_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1722_recursiveGen;
                        bool _1723_recOwned;
                        bool _1724_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1725_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out384;
                        bool _out385;
                        bool _out386;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out387;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out384, out _out385, out _out386, out _out387);
                        _1722_recursiveGen = _out384;
                        _1723_recOwned = _out385;
                        _1724_recErased = _out386;
                        _1725_recIdents = _out387;
                        Dafny.ISequence<Dafny.Rune> _1726_uneraseFn;
                        _1726_uneraseFn = ((_1723_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1726_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1722_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1723_recOwned;
                        isErased = true;
                        readIdents = _1725_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out388;
                        bool _out389;
                        bool _out390;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out391;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1721_b), _1721_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out388, out _out389, out _out390, out _out391);
                        s = _out388;
                        isOwned = _out389;
                        isErased = _out390;
                        readIdents = _out391;
                      }
                    }
                  } else if (_source120.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1727___mcc_h425 = _source120.dtor_path;
                    DAST._IType _1728_b = _1716___mcc_h409;
                    {
                      if (object.Equals(_1728_b, _1544_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1729_recursiveGen;
                        bool _1730_recOwned;
                        bool _1731_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1732_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out392;
                        bool _out393;
                        bool _out394;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out395;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out392, out _out393, out _out394, out _out395);
                        _1729_recursiveGen = _out392;
                        _1730_recOwned = _out393;
                        _1731_recErased = _out394;
                        _1732_recIdents = _out395;
                        Dafny.ISequence<Dafny.Rune> _1733_uneraseFn;
                        _1733_uneraseFn = ((_1730_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1733_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1729_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1730_recOwned;
                        isErased = true;
                        readIdents = _1732_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out396;
                        bool _out397;
                        bool _out398;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out399;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1728_b), _1728_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out396, out _out397, out _out398, out _out399);
                        s = _out396;
                        isOwned = _out397;
                        isErased = _out398;
                        readIdents = _out399;
                      }
                    }
                  } else {
                    DAST._IType _1734___mcc_h428 = _source120.dtor_Newtype_a0;
                    DAST._IType _1735_b = _1734___mcc_h428;
                    {
                      if (object.Equals(_1545_fromTpe, _1735_b)) {
                        Dafny.ISequence<Dafny.Rune> _1736_recursiveGen;
                        bool _1737_recOwned;
                        bool _1738_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1739_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out400;
                        bool _out401;
                        bool _out402;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out403;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out400, out _out401, out _out402, out _out403);
                        _1736_recursiveGen = _out400;
                        _1737_recOwned = _out401;
                        _1738_recErased = _out402;
                        _1739_recIdents = _out403;
                        Dafny.ISequence<Dafny.Rune> _1740_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out404;
                        _out404 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                        _1740_rhsType = _out404;
                        Dafny.ISequence<Dafny.Rune> _1741_uneraseFn;
                        _1741_uneraseFn = ((_1737_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1740_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1741_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1737_recOwned;
                        isErased = false;
                        readIdents = _1739_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out405;
                        bool _out406;
                        bool _out407;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1735_b), _1735_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                        s = _out405;
                        isOwned = _out406;
                        isErased = _out407;
                        readIdents = _out408;
                      }
                    }
                  }
                } else if (_source119.is_Nullable) {
                  DAST._IType _1742___mcc_h431 = _source119.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1743_recursiveGen;
                    bool _1744_recOwned;
                    bool _1745_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1746_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out409;
                    bool _out410;
                    bool _out411;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                    _1743_recursiveGen = _out409;
                    _1744_recOwned = _out410;
                    _1745_recErased = _out411;
                    _1746_recIdents = _out412;
                    if (!(_1744_recOwned)) {
                      _1743_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1743_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1743_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1745_recErased;
                    readIdents = _1746_recIdents;
                  }
                } else if (_source119.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1747___mcc_h434 = _source119.dtor_Tuple_a0;
                  DAST._IType _1748_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1748_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1749_recursiveGen;
                      bool _1750_recOwned;
                      bool _1751_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1752_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out413;
                      bool _out414;
                      bool _out415;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                      _1749_recursiveGen = _out413;
                      _1750_recOwned = _out414;
                      _1751_recErased = _out415;
                      _1752_recIdents = _out416;
                      Dafny.ISequence<Dafny.Rune> _1753_uneraseFn;
                      _1753_uneraseFn = ((_1750_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1753_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1749_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1750_recOwned;
                      isErased = true;
                      readIdents = _1752_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out417;
                      bool _out418;
                      bool _out419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1748_b), _1748_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out417, out _out418, out _out419, out _out420);
                      s = _out417;
                      isOwned = _out418;
                      isErased = _out419;
                      readIdents = _out420;
                    }
                  }
                } else if (_source119.is_Array) {
                  DAST._IType _1754___mcc_h437 = _source119.dtor_element;
                  BigInteger _1755___mcc_h438 = _source119.dtor_dims;
                  DAST._IType _1756_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1756_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1757_recursiveGen;
                      bool _1758_recOwned;
                      bool _1759_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1760_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out421;
                      bool _out422;
                      bool _out423;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out421, out _out422, out _out423, out _out424);
                      _1757_recursiveGen = _out421;
                      _1758_recOwned = _out422;
                      _1759_recErased = _out423;
                      _1760_recIdents = _out424;
                      Dafny.ISequence<Dafny.Rune> _1761_uneraseFn;
                      _1761_uneraseFn = ((_1758_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1761_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1757_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1758_recOwned;
                      isErased = true;
                      readIdents = _1760_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out425;
                      bool _out426;
                      bool _out427;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1756_b), _1756_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out425, out _out426, out _out427, out _out428);
                      s = _out425;
                      isOwned = _out426;
                      isErased = _out427;
                      readIdents = _out428;
                    }
                  }
                } else if (_source119.is_Seq) {
                  DAST._IType _1762___mcc_h443 = _source119.dtor_element;
                  DAST._IType _1763_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1763_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1764_recursiveGen;
                      bool _1765_recOwned;
                      bool _1766_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1767_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out429;
                      bool _out430;
                      bool _out431;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out429, out _out430, out _out431, out _out432);
                      _1764_recursiveGen = _out429;
                      _1765_recOwned = _out430;
                      _1766_recErased = _out431;
                      _1767_recIdents = _out432;
                      Dafny.ISequence<Dafny.Rune> _1768_uneraseFn;
                      _1768_uneraseFn = ((_1765_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1768_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1765_recOwned;
                      isErased = true;
                      readIdents = _1767_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out433;
                      bool _out434;
                      bool _out435;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1763_b), _1763_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out433, out _out434, out _out435, out _out436);
                      s = _out433;
                      isOwned = _out434;
                      isErased = _out435;
                      readIdents = _out436;
                    }
                  }
                } else if (_source119.is_Set) {
                  DAST._IType _1769___mcc_h446 = _source119.dtor_element;
                  DAST._IType _1770_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1770_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1771_recursiveGen;
                      bool _1772_recOwned;
                      bool _1773_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1774_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out437;
                      bool _out438;
                      bool _out439;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439, out _out440);
                      _1771_recursiveGen = _out437;
                      _1772_recOwned = _out438;
                      _1773_recErased = _out439;
                      _1774_recIdents = _out440;
                      Dafny.ISequence<Dafny.Rune> _1775_uneraseFn;
                      _1775_uneraseFn = ((_1772_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1775_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1771_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1772_recOwned;
                      isErased = true;
                      readIdents = _1774_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out441;
                      bool _out442;
                      bool _out443;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out444;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1770_b), _1770_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out441, out _out442, out _out443, out _out444);
                      s = _out441;
                      isOwned = _out442;
                      isErased = _out443;
                      readIdents = _out444;
                    }
                  }
                } else if (_source119.is_Multiset) {
                  DAST._IType _1776___mcc_h449 = _source119.dtor_element;
                  DAST._IType _1777_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1777_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1778_recursiveGen;
                      bool _1779_recOwned;
                      bool _1780_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1781_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out445;
                      bool _out446;
                      bool _out447;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out445, out _out446, out _out447, out _out448);
                      _1778_recursiveGen = _out445;
                      _1779_recOwned = _out446;
                      _1780_recErased = _out447;
                      _1781_recIdents = _out448;
                      Dafny.ISequence<Dafny.Rune> _1782_uneraseFn;
                      _1782_uneraseFn = ((_1779_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1782_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1778_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1779_recOwned;
                      isErased = true;
                      readIdents = _1781_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out449;
                      bool _out450;
                      bool _out451;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1777_b), _1777_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out449, out _out450, out _out451, out _out452);
                      s = _out449;
                      isOwned = _out450;
                      isErased = _out451;
                      readIdents = _out452;
                    }
                  }
                } else if (_source119.is_Map) {
                  DAST._IType _1783___mcc_h452 = _source119.dtor_key;
                  DAST._IType _1784___mcc_h453 = _source119.dtor_value;
                  DAST._IType _1785_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1785_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1786_recursiveGen;
                      bool _1787_recOwned;
                      bool _1788_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1789_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out453;
                      bool _out454;
                      bool _out455;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out453, out _out454, out _out455, out _out456);
                      _1786_recursiveGen = _out453;
                      _1787_recOwned = _out454;
                      _1788_recErased = _out455;
                      _1789_recIdents = _out456;
                      Dafny.ISequence<Dafny.Rune> _1790_uneraseFn;
                      _1790_uneraseFn = ((_1787_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1790_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1787_recOwned;
                      isErased = true;
                      readIdents = _1789_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out457;
                      bool _out458;
                      bool _out459;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1785_b), _1785_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out457, out _out458, out _out459, out _out460);
                      s = _out457;
                      isOwned = _out458;
                      isErased = _out459;
                      readIdents = _out460;
                    }
                  }
                } else if (_source119.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1791___mcc_h458 = _source119.dtor_args;
                  DAST._IType _1792___mcc_h459 = _source119.dtor_result;
                  DAST._IType _1793_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1793_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1794_recursiveGen;
                      bool _1795_recOwned;
                      bool _1796_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1797_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out461;
                      bool _out462;
                      bool _out463;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out461, out _out462, out _out463, out _out464);
                      _1794_recursiveGen = _out461;
                      _1795_recOwned = _out462;
                      _1796_recErased = _out463;
                      _1797_recIdents = _out464;
                      Dafny.ISequence<Dafny.Rune> _1798_uneraseFn;
                      _1798_uneraseFn = ((_1795_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1798_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1794_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1795_recOwned;
                      isErased = true;
                      readIdents = _1797_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out465;
                      bool _out466;
                      bool _out467;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out468;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1793_b), _1793_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out465, out _out466, out _out467, out _out468);
                      s = _out465;
                      isOwned = _out466;
                      isErased = _out467;
                      readIdents = _out468;
                    }
                  }
                } else if (_source119.is_Primitive) {
                  DAST._IPrimitive _1799___mcc_h464 = _source119.dtor_Primitive_a0;
                  DAST._IType _1800_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1800_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1801_recursiveGen;
                      bool _1802_recOwned;
                      bool _1803_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1804_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out469;
                      bool _out470;
                      bool _out471;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out469, out _out470, out _out471, out _out472);
                      _1801_recursiveGen = _out469;
                      _1802_recOwned = _out470;
                      _1803_recErased = _out471;
                      _1804_recIdents = _out472;
                      Dafny.ISequence<Dafny.Rune> _1805_uneraseFn;
                      _1805_uneraseFn = ((_1802_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1805_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1801_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1802_recOwned;
                      isErased = true;
                      readIdents = _1804_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out473;
                      bool _out474;
                      bool _out475;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1800_b), _1800_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out473, out _out474, out _out475, out _out476);
                      s = _out473;
                      isOwned = _out474;
                      isErased = _out475;
                      readIdents = _out476;
                    }
                  }
                } else if (_source119.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1806___mcc_h467 = _source119.dtor_Passthrough_a0;
                  DAST._IType _1807_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1807_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1808_recursiveGen;
                      bool _1809_recOwned;
                      bool _1810_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1811_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out477;
                      bool _out478;
                      bool _out479;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479, out _out480);
                      _1808_recursiveGen = _out477;
                      _1809_recOwned = _out478;
                      _1810_recErased = _out479;
                      _1811_recIdents = _out480;
                      Dafny.ISequence<Dafny.Rune> _1812_uneraseFn;
                      _1812_uneraseFn = ((_1809_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1812_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1808_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1809_recOwned;
                      isErased = true;
                      readIdents = _1811_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out481;
                      bool _out482;
                      bool _out483;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1807_b), _1807_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out481, out _out482, out _out483, out _out484);
                      s = _out481;
                      isOwned = _out482;
                      isErased = _out483;
                      readIdents = _out484;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1813___mcc_h470 = _source119.dtor_TypeArg_a0;
                  DAST._IType _1814_b = _1716___mcc_h409;
                  {
                    if (object.Equals(_1814_b, _1544_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1815_recursiveGen;
                      bool _1816_recOwned;
                      bool _1817_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1818_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out485;
                      bool _out486;
                      bool _out487;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out485, out _out486, out _out487, out _out488);
                      _1815_recursiveGen = _out485;
                      _1816_recOwned = _out486;
                      _1817_recErased = _out487;
                      _1818_recIdents = _out488;
                      Dafny.ISequence<Dafny.Rune> _1819_uneraseFn;
                      _1819_uneraseFn = ((_1816_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1819_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1815_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1816_recOwned;
                      isErased = true;
                      readIdents = _1818_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out489;
                      bool _out490;
                      bool _out491;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out492;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1814_b), _1814_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out489, out _out490, out _out491, out _out492);
                      s = _out489;
                      isOwned = _out490;
                      isErased = _out491;
                      readIdents = _out492;
                    }
                  }
                }
              }
            } else if (_source113.is_Nullable) {
              DAST._IType _1820___mcc_h473 = _source113.dtor_Nullable_a0;
              DAST._IType _source121 = _1552___mcc_h306;
              if (_source121.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1821___mcc_h477 = _source121.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1822___mcc_h478 = _source121.dtor_typeArgs;
                DAST._IResolvedType _1823___mcc_h479 = _source121.dtor_resolved;
                DAST._IResolvedType _source122 = _1823___mcc_h479;
                if (_source122.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1824___mcc_h486 = _source122.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1825_recursiveGen;
                    bool _1826_recOwned;
                    bool _1827_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1828_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out493;
                    bool _out494;
                    bool _out495;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out493, out _out494, out _out495, out _out496);
                    _1825_recursiveGen = _out493;
                    _1826_recOwned = _out494;
                    _1827_recErased = _out495;
                    _1828_recIdents = _out496;
                    if (!(_1826_recOwned)) {
                      _1825_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1825_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1825_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1826_recOwned;
                    isErased = _1827_recErased;
                    readIdents = _1828_recIdents;
                  }
                } else if (_source122.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1829___mcc_h489 = _source122.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1830_recursiveGen;
                    bool _1831_recOwned;
                    bool _1832_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1833_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out497;
                    bool _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out497, out _out498, out _out499, out _out500);
                    _1830_recursiveGen = _out497;
                    _1831_recOwned = _out498;
                    _1832_recErased = _out499;
                    _1833_recIdents = _out500;
                    if (!(_1831_recOwned)) {
                      _1830_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1830_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1830_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1831_recOwned;
                    isErased = _1832_recErased;
                    readIdents = _1833_recIdents;
                  }
                } else {
                  DAST._IType _1834___mcc_h492 = _source122.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1835_recursiveGen;
                    bool _1836_recOwned;
                    bool _1837_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1838_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out501;
                    bool _out502;
                    bool _out503;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503, out _out504);
                    _1835_recursiveGen = _out501;
                    _1836_recOwned = _out502;
                    _1837_recErased = _out503;
                    _1838_recIdents = _out504;
                    if (!(_1836_recOwned)) {
                      _1835_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1835_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1835_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1836_recOwned;
                    isErased = _1837_recErased;
                    readIdents = _1838_recIdents;
                  }
                }
              } else if (_source121.is_Nullable) {
                DAST._IType _1839___mcc_h495 = _source121.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1840_recursiveGen;
                  bool _1841_recOwned;
                  bool _1842_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1843_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out505;
                  bool _out506;
                  bool _out507;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out508;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out505, out _out506, out _out507, out _out508);
                  _1840_recursiveGen = _out505;
                  _1841_recOwned = _out506;
                  _1842_recErased = _out507;
                  _1843_recIdents = _out508;
                  if (!(_1841_recOwned)) {
                    _1840_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1840_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1840_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1841_recOwned;
                  isErased = _1842_recErased;
                  readIdents = _1843_recIdents;
                }
              } else if (_source121.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1844___mcc_h498 = _source121.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1845_recursiveGen;
                  bool _1846_recOwned;
                  bool _1847_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1848_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out509;
                  bool _out510;
                  bool _out511;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out512;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out509, out _out510, out _out511, out _out512);
                  _1845_recursiveGen = _out509;
                  _1846_recOwned = _out510;
                  _1847_recErased = _out511;
                  _1848_recIdents = _out512;
                  if (!(_1846_recOwned)) {
                    _1845_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1845_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1845_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1846_recOwned;
                  isErased = _1847_recErased;
                  readIdents = _1848_recIdents;
                }
              } else if (_source121.is_Array) {
                DAST._IType _1849___mcc_h501 = _source121.dtor_element;
                BigInteger _1850___mcc_h502 = _source121.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1851_recursiveGen;
                  bool _1852_recOwned;
                  bool _1853_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1854_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out513;
                  bool _out514;
                  bool _out515;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out516;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out513, out _out514, out _out515, out _out516);
                  _1851_recursiveGen = _out513;
                  _1852_recOwned = _out514;
                  _1853_recErased = _out515;
                  _1854_recIdents = _out516;
                  if (!(_1852_recOwned)) {
                    _1851_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1851_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1851_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1852_recOwned;
                  isErased = _1853_recErased;
                  readIdents = _1854_recIdents;
                }
              } else if (_source121.is_Seq) {
                DAST._IType _1855___mcc_h507 = _source121.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1856_recursiveGen;
                  bool _1857_recOwned;
                  bool _1858_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1859_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out517;
                  bool _out518;
                  bool _out519;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out520;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out517, out _out518, out _out519, out _out520);
                  _1856_recursiveGen = _out517;
                  _1857_recOwned = _out518;
                  _1858_recErased = _out519;
                  _1859_recIdents = _out520;
                  if (!(_1857_recOwned)) {
                    _1856_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1856_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1856_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1857_recOwned;
                  isErased = _1858_recErased;
                  readIdents = _1859_recIdents;
                }
              } else if (_source121.is_Set) {
                DAST._IType _1860___mcc_h510 = _source121.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1861_recursiveGen;
                  bool _1862_recOwned;
                  bool _1863_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1864_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out521;
                  bool _out522;
                  bool _out523;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out524;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out521, out _out522, out _out523, out _out524);
                  _1861_recursiveGen = _out521;
                  _1862_recOwned = _out522;
                  _1863_recErased = _out523;
                  _1864_recIdents = _out524;
                  if (!(_1862_recOwned)) {
                    _1861_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1861_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1861_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1862_recOwned;
                  isErased = _1863_recErased;
                  readIdents = _1864_recIdents;
                }
              } else if (_source121.is_Multiset) {
                DAST._IType _1865___mcc_h513 = _source121.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1866_recursiveGen;
                  bool _1867_recOwned;
                  bool _1868_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1869_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out525;
                  bool _out526;
                  bool _out527;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out528;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out525, out _out526, out _out527, out _out528);
                  _1866_recursiveGen = _out525;
                  _1867_recOwned = _out526;
                  _1868_recErased = _out527;
                  _1869_recIdents = _out528;
                  if (!(_1867_recOwned)) {
                    _1866_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1866_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1866_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1867_recOwned;
                  isErased = _1868_recErased;
                  readIdents = _1869_recIdents;
                }
              } else if (_source121.is_Map) {
                DAST._IType _1870___mcc_h516 = _source121.dtor_key;
                DAST._IType _1871___mcc_h517 = _source121.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1872_recursiveGen;
                  bool _1873_recOwned;
                  bool _1874_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1875_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out529;
                  bool _out530;
                  bool _out531;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out532;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out529, out _out530, out _out531, out _out532);
                  _1872_recursiveGen = _out529;
                  _1873_recOwned = _out530;
                  _1874_recErased = _out531;
                  _1875_recIdents = _out532;
                  if (!(_1873_recOwned)) {
                    _1872_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1872_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1872_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1873_recOwned;
                  isErased = _1874_recErased;
                  readIdents = _1875_recIdents;
                }
              } else if (_source121.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1876___mcc_h522 = _source121.dtor_args;
                DAST._IType _1877___mcc_h523 = _source121.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1878_recursiveGen;
                  bool _1879_recOwned;
                  bool _1880_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1881_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out533;
                  bool _out534;
                  bool _out535;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out536;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out533, out _out534, out _out535, out _out536);
                  _1878_recursiveGen = _out533;
                  _1879_recOwned = _out534;
                  _1880_recErased = _out535;
                  _1881_recIdents = _out536;
                  if (!(_1879_recOwned)) {
                    _1878_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1878_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1878_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1879_recOwned;
                  isErased = _1880_recErased;
                  readIdents = _1881_recIdents;
                }
              } else if (_source121.is_Primitive) {
                DAST._IPrimitive _1882___mcc_h528 = _source121.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1883_recursiveGen;
                  bool _1884_recOwned;
                  bool _1885_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1886_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out537;
                  bool _out538;
                  bool _out539;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out540;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out537, out _out538, out _out539, out _out540);
                  _1883_recursiveGen = _out537;
                  _1884_recOwned = _out538;
                  _1885_recErased = _out539;
                  _1886_recIdents = _out540;
                  if (!(_1884_recOwned)) {
                    _1883_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1883_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1883_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1884_recOwned;
                  isErased = _1885_recErased;
                  readIdents = _1886_recIdents;
                }
              } else if (_source121.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1887___mcc_h531 = _source121.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1888_recursiveGen;
                  bool _1889_recOwned;
                  bool _1890_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1891_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out541;
                  bool _out542;
                  bool _out543;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out544;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out541, out _out542, out _out543, out _out544);
                  _1888_recursiveGen = _out541;
                  _1889_recOwned = _out542;
                  _1890_recErased = _out543;
                  _1891_recIdents = _out544;
                  if (!(_1889_recOwned)) {
                    _1888_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1888_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1888_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1889_recOwned;
                  isErased = _1890_recErased;
                  readIdents = _1891_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1892___mcc_h534 = _source121.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1893_recursiveGen;
                  bool _1894_recOwned;
                  bool _1895_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1896_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out545;
                  bool _out546;
                  bool _out547;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out548;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out545, out _out546, out _out547, out _out548);
                  _1893_recursiveGen = _out545;
                  _1894_recOwned = _out546;
                  _1895_recErased = _out547;
                  _1896_recIdents = _out548;
                  if (!(_1894_recOwned)) {
                    _1893_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1893_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1893_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1894_recOwned;
                  isErased = _1895_recErased;
                  readIdents = _1896_recIdents;
                }
              }
            } else if (_source113.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1897___mcc_h537 = _source113.dtor_Tuple_a0;
              DAST._IType _source123 = _1552___mcc_h306;
              if (_source123.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1898___mcc_h541 = _source123.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1899___mcc_h542 = _source123.dtor_typeArgs;
                DAST._IResolvedType _1900___mcc_h543 = _source123.dtor_resolved;
                DAST._IResolvedType _source124 = _1900___mcc_h543;
                if (_source124.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1901___mcc_h547 = _source124.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1902_recursiveGen;
                    bool _1903_recOwned;
                    bool _1904_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1905_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out549;
                    bool _out550;
                    bool _out551;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out552;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out549, out _out550, out _out551, out _out552);
                    _1902_recursiveGen = _out549;
                    _1903_recOwned = _out550;
                    _1904_recErased = _out551;
                    _1905_recIdents = _out552;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1902_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1903_recOwned;
                    isErased = _1904_recErased;
                    readIdents = _1905_recIdents;
                  }
                } else if (_source124.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1906___mcc_h549 = _source124.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1907_recursiveGen;
                    bool _1908_recOwned;
                    bool _1909_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1910_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out553;
                    bool _out554;
                    bool _out555;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out556;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out553, out _out554, out _out555, out _out556);
                    _1907_recursiveGen = _out553;
                    _1908_recOwned = _out554;
                    _1909_recErased = _out555;
                    _1910_recIdents = _out556;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1907_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1908_recOwned;
                    isErased = _1909_recErased;
                    readIdents = _1910_recIdents;
                  }
                } else {
                  DAST._IType _1911___mcc_h551 = _source124.dtor_Newtype_a0;
                  DAST._IType _1912_b = _1911___mcc_h551;
                  {
                    if (object.Equals(_1545_fromTpe, _1912_b)) {
                      Dafny.ISequence<Dafny.Rune> _1913_recursiveGen;
                      bool _1914_recOwned;
                      bool _1915_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1916_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out557;
                      bool _out558;
                      bool _out559;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out560;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out557, out _out558, out _out559, out _out560);
                      _1913_recursiveGen = _out557;
                      _1914_recOwned = _out558;
                      _1915_recErased = _out559;
                      _1916_recIdents = _out560;
                      Dafny.ISequence<Dafny.Rune> _1917_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out561;
                      _out561 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _1917_rhsType = _out561;
                      Dafny.ISequence<Dafny.Rune> _1918_uneraseFn;
                      _1918_uneraseFn = ((_1914_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1917_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1918_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1913_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1914_recOwned;
                      isErased = false;
                      readIdents = _1916_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out562;
                      bool _out563;
                      bool _out564;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1912_b), _1912_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                      s = _out562;
                      isOwned = _out563;
                      isErased = _out564;
                      readIdents = _out565;
                    }
                  }
                }
              } else if (_source123.is_Nullable) {
                DAST._IType _1919___mcc_h553 = _source123.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1920_recursiveGen;
                  bool _1921_recOwned;
                  bool _1922_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1923_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out566;
                  bool _out567;
                  bool _out568;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out569;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out566, out _out567, out _out568, out _out569);
                  _1920_recursiveGen = _out566;
                  _1921_recOwned = _out567;
                  _1922_recErased = _out568;
                  _1923_recIdents = _out569;
                  if (!(_1921_recOwned)) {
                    _1920_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1920_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1920_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1922_recErased;
                  readIdents = _1923_recIdents;
                }
              } else if (_source123.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1924___mcc_h555 = _source123.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1925_recursiveGen;
                  bool _1926_recOwned;
                  bool _1927_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1928_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out570;
                  bool _out571;
                  bool _out572;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out573;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out570, out _out571, out _out572, out _out573);
                  _1925_recursiveGen = _out570;
                  _1926_recOwned = _out571;
                  _1927_recErased = _out572;
                  _1928_recIdents = _out573;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1926_recOwned;
                  isErased = _1927_recErased;
                  readIdents = _1928_recIdents;
                }
              } else if (_source123.is_Array) {
                DAST._IType _1929___mcc_h557 = _source123.dtor_element;
                BigInteger _1930___mcc_h558 = _source123.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1931_recursiveGen;
                  bool _1932_recOwned;
                  bool _1933_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1934_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out574;
                  bool _out575;
                  bool _out576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out577;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out574, out _out575, out _out576, out _out577);
                  _1931_recursiveGen = _out574;
                  _1932_recOwned = _out575;
                  _1933_recErased = _out576;
                  _1934_recIdents = _out577;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1931_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1932_recOwned;
                  isErased = _1933_recErased;
                  readIdents = _1934_recIdents;
                }
              } else if (_source123.is_Seq) {
                DAST._IType _1935___mcc_h561 = _source123.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1936_recursiveGen;
                  bool _1937_recOwned;
                  bool _1938_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1939_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out578;
                  bool _out579;
                  bool _out580;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out581;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out578, out _out579, out _out580, out _out581);
                  _1936_recursiveGen = _out578;
                  _1937_recOwned = _out579;
                  _1938_recErased = _out580;
                  _1939_recIdents = _out581;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1936_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1937_recOwned;
                  isErased = _1938_recErased;
                  readIdents = _1939_recIdents;
                }
              } else if (_source123.is_Set) {
                DAST._IType _1940___mcc_h563 = _source123.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1941_recursiveGen;
                  bool _1942_recOwned;
                  bool _1943_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1944_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out582;
                  bool _out583;
                  bool _out584;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out585;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out582, out _out583, out _out584, out _out585);
                  _1941_recursiveGen = _out582;
                  _1942_recOwned = _out583;
                  _1943_recErased = _out584;
                  _1944_recIdents = _out585;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1941_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1942_recOwned;
                  isErased = _1943_recErased;
                  readIdents = _1944_recIdents;
                }
              } else if (_source123.is_Multiset) {
                DAST._IType _1945___mcc_h565 = _source123.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1946_recursiveGen;
                  bool _1947_recOwned;
                  bool _1948_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1949_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out586;
                  bool _out587;
                  bool _out588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out586, out _out587, out _out588, out _out589);
                  _1946_recursiveGen = _out586;
                  _1947_recOwned = _out587;
                  _1948_recErased = _out588;
                  _1949_recIdents = _out589;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1947_recOwned;
                  isErased = _1948_recErased;
                  readIdents = _1949_recIdents;
                }
              } else if (_source123.is_Map) {
                DAST._IType _1950___mcc_h567 = _source123.dtor_key;
                DAST._IType _1951___mcc_h568 = _source123.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1952_recursiveGen;
                  bool _1953_recOwned;
                  bool _1954_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1955_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out590;
                  bool _out591;
                  bool _out592;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out593;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out590, out _out591, out _out592, out _out593);
                  _1952_recursiveGen = _out590;
                  _1953_recOwned = _out591;
                  _1954_recErased = _out592;
                  _1955_recIdents = _out593;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1952_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1953_recOwned;
                  isErased = _1954_recErased;
                  readIdents = _1955_recIdents;
                }
              } else if (_source123.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1956___mcc_h571 = _source123.dtor_args;
                DAST._IType _1957___mcc_h572 = _source123.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1958_recursiveGen;
                  bool _1959_recOwned;
                  bool _1960_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1961_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out594;
                  bool _out595;
                  bool _out596;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out597;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out594, out _out595, out _out596, out _out597);
                  _1958_recursiveGen = _out594;
                  _1959_recOwned = _out595;
                  _1960_recErased = _out596;
                  _1961_recIdents = _out597;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1958_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1959_recOwned;
                  isErased = _1960_recErased;
                  readIdents = _1961_recIdents;
                }
              } else if (_source123.is_Primitive) {
                DAST._IPrimitive _1962___mcc_h575 = _source123.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1963_recursiveGen;
                  bool _1964_recOwned;
                  bool _1965_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1966_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out598;
                  bool _out599;
                  bool _out600;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out601;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out598, out _out599, out _out600, out _out601);
                  _1963_recursiveGen = _out598;
                  _1964_recOwned = _out599;
                  _1965_recErased = _out600;
                  _1966_recIdents = _out601;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1963_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1964_recOwned;
                  isErased = _1965_recErased;
                  readIdents = _1966_recIdents;
                }
              } else if (_source123.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1967___mcc_h577 = _source123.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1968_recursiveGen;
                  bool _1969_recOwned;
                  bool _1970_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1971_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out602;
                  bool _out603;
                  bool _out604;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out605;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out602, out _out603, out _out604, out _out605);
                  _1968_recursiveGen = _out602;
                  _1969_recOwned = _out603;
                  _1970_recErased = _out604;
                  _1971_recIdents = _out605;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1968_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1969_recOwned;
                  isErased = _1970_recErased;
                  readIdents = _1971_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1972___mcc_h579 = _source123.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1973_recursiveGen;
                  bool _1974_recOwned;
                  bool _1975_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1976_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out606;
                  bool _out607;
                  bool _out608;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out609;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out606, out _out607, out _out608, out _out609);
                  _1973_recursiveGen = _out606;
                  _1974_recOwned = _out607;
                  _1975_recErased = _out608;
                  _1976_recIdents = _out609;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1973_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1974_recOwned;
                  isErased = _1975_recErased;
                  readIdents = _1976_recIdents;
                }
              }
            } else if (_source113.is_Array) {
              DAST._IType _1977___mcc_h581 = _source113.dtor_element;
              BigInteger _1978___mcc_h582 = _source113.dtor_dims;
              DAST._IType _source125 = _1552___mcc_h306;
              if (_source125.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1979___mcc_h589 = _source125.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1980___mcc_h590 = _source125.dtor_typeArgs;
                DAST._IResolvedType _1981___mcc_h591 = _source125.dtor_resolved;
                DAST._IResolvedType _source126 = _1981___mcc_h591;
                if (_source126.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1982___mcc_h595 = _source126.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1983_recursiveGen;
                    bool _1984_recOwned;
                    bool _1985_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1986_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out610;
                    bool _out611;
                    bool _out612;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out613;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out610, out _out611, out _out612, out _out613);
                    _1983_recursiveGen = _out610;
                    _1984_recOwned = _out611;
                    _1985_recErased = _out612;
                    _1986_recIdents = _out613;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1983_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1984_recOwned;
                    isErased = _1985_recErased;
                    readIdents = _1986_recIdents;
                  }
                } else if (_source126.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1987___mcc_h597 = _source126.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1988_recursiveGen;
                    bool _1989_recOwned;
                    bool _1990_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1991_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out614;
                    bool _out615;
                    bool _out616;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out617;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out614, out _out615, out _out616, out _out617);
                    _1988_recursiveGen = _out614;
                    _1989_recOwned = _out615;
                    _1990_recErased = _out616;
                    _1991_recIdents = _out617;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1988_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1989_recOwned;
                    isErased = _1990_recErased;
                    readIdents = _1991_recIdents;
                  }
                } else {
                  DAST._IType _1992___mcc_h599 = _source126.dtor_Newtype_a0;
                  DAST._IType _1993_b = _1992___mcc_h599;
                  {
                    if (object.Equals(_1545_fromTpe, _1993_b)) {
                      Dafny.ISequence<Dafny.Rune> _1994_recursiveGen;
                      bool _1995_recOwned;
                      bool _1996_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1997_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out618;
                      bool _out619;
                      bool _out620;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out621;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out618, out _out619, out _out620, out _out621);
                      _1994_recursiveGen = _out618;
                      _1995_recOwned = _out619;
                      _1996_recErased = _out620;
                      _1997_recIdents = _out621;
                      Dafny.ISequence<Dafny.Rune> _1998_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out622;
                      _out622 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _1998_rhsType = _out622;
                      Dafny.ISequence<Dafny.Rune> _1999_uneraseFn;
                      _1999_uneraseFn = ((_1995_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1998_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1999_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1994_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1995_recOwned;
                      isErased = false;
                      readIdents = _1997_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out623;
                      bool _out624;
                      bool _out625;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _1993_b), _1993_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                      s = _out623;
                      isOwned = _out624;
                      isErased = _out625;
                      readIdents = _out626;
                    }
                  }
                }
              } else if (_source125.is_Nullable) {
                DAST._IType _2000___mcc_h601 = _source125.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2001_recursiveGen;
                  bool _2002_recOwned;
                  bool _2003_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2004_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out627;
                  bool _out628;
                  bool _out629;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out627, out _out628, out _out629, out _out630);
                  _2001_recursiveGen = _out627;
                  _2002_recOwned = _out628;
                  _2003_recErased = _out629;
                  _2004_recIdents = _out630;
                  if (!(_2002_recOwned)) {
                    _2001_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2001_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2001_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2003_recErased;
                  readIdents = _2004_recIdents;
                }
              } else if (_source125.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2005___mcc_h603 = _source125.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2006_recursiveGen;
                  bool _2007_recOwned;
                  bool _2008_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2009_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out631;
                  bool _out632;
                  bool _out633;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out634;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out631, out _out632, out _out633, out _out634);
                  _2006_recursiveGen = _out631;
                  _2007_recOwned = _out632;
                  _2008_recErased = _out633;
                  _2009_recIdents = _out634;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2006_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2007_recOwned;
                  isErased = _2008_recErased;
                  readIdents = _2009_recIdents;
                }
              } else if (_source125.is_Array) {
                DAST._IType _2010___mcc_h605 = _source125.dtor_element;
                BigInteger _2011___mcc_h606 = _source125.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2012_recursiveGen;
                  bool _2013_recOwned;
                  bool _2014_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2015_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out635;
                  bool _out636;
                  bool _out637;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out635, out _out636, out _out637, out _out638);
                  _2012_recursiveGen = _out635;
                  _2013_recOwned = _out636;
                  _2014_recErased = _out637;
                  _2015_recIdents = _out638;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2012_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2013_recOwned;
                  isErased = _2014_recErased;
                  readIdents = _2015_recIdents;
                }
              } else if (_source125.is_Seq) {
                DAST._IType _2016___mcc_h609 = _source125.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2017_recursiveGen;
                  bool _2018_recOwned;
                  bool _2019_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2020_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out639;
                  bool _out640;
                  bool _out641;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out642;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out639, out _out640, out _out641, out _out642);
                  _2017_recursiveGen = _out639;
                  _2018_recOwned = _out640;
                  _2019_recErased = _out641;
                  _2020_recIdents = _out642;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2017_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2018_recOwned;
                  isErased = _2019_recErased;
                  readIdents = _2020_recIdents;
                }
              } else if (_source125.is_Set) {
                DAST._IType _2021___mcc_h611 = _source125.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2022_recursiveGen;
                  bool _2023_recOwned;
                  bool _2024_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2025_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out643;
                  bool _out644;
                  bool _out645;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out646;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out643, out _out644, out _out645, out _out646);
                  _2022_recursiveGen = _out643;
                  _2023_recOwned = _out644;
                  _2024_recErased = _out645;
                  _2025_recIdents = _out646;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2022_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2023_recOwned;
                  isErased = _2024_recErased;
                  readIdents = _2025_recIdents;
                }
              } else if (_source125.is_Multiset) {
                DAST._IType _2026___mcc_h613 = _source125.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2027_recursiveGen;
                  bool _2028_recOwned;
                  bool _2029_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2030_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out647;
                  bool _out648;
                  bool _out649;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out650;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out647, out _out648, out _out649, out _out650);
                  _2027_recursiveGen = _out647;
                  _2028_recOwned = _out648;
                  _2029_recErased = _out649;
                  _2030_recIdents = _out650;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2027_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2028_recOwned;
                  isErased = _2029_recErased;
                  readIdents = _2030_recIdents;
                }
              } else if (_source125.is_Map) {
                DAST._IType _2031___mcc_h615 = _source125.dtor_key;
                DAST._IType _2032___mcc_h616 = _source125.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2033_recursiveGen;
                  bool _2034_recOwned;
                  bool _2035_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2036_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out651;
                  bool _out652;
                  bool _out653;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out654;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out651, out _out652, out _out653, out _out654);
                  _2033_recursiveGen = _out651;
                  _2034_recOwned = _out652;
                  _2035_recErased = _out653;
                  _2036_recIdents = _out654;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2034_recOwned;
                  isErased = _2035_recErased;
                  readIdents = _2036_recIdents;
                }
              } else if (_source125.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2037___mcc_h619 = _source125.dtor_args;
                DAST._IType _2038___mcc_h620 = _source125.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2039_recursiveGen;
                  bool _2040_recOwned;
                  bool _2041_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2042_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out655;
                  bool _out656;
                  bool _out657;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out658;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out655, out _out656, out _out657, out _out658);
                  _2039_recursiveGen = _out655;
                  _2040_recOwned = _out656;
                  _2041_recErased = _out657;
                  _2042_recIdents = _out658;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2039_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2040_recOwned;
                  isErased = _2041_recErased;
                  readIdents = _2042_recIdents;
                }
              } else if (_source125.is_Primitive) {
                DAST._IPrimitive _2043___mcc_h623 = _source125.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2044_recursiveGen;
                  bool _2045_recOwned;
                  bool _2046_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2047_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out659;
                  bool _out660;
                  bool _out661;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out662;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out659, out _out660, out _out661, out _out662);
                  _2044_recursiveGen = _out659;
                  _2045_recOwned = _out660;
                  _2046_recErased = _out661;
                  _2047_recIdents = _out662;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2044_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2045_recOwned;
                  isErased = _2046_recErased;
                  readIdents = _2047_recIdents;
                }
              } else if (_source125.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2048___mcc_h625 = _source125.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2049_recursiveGen;
                  bool _2050_recOwned;
                  bool _2051_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2052_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out663;
                  bool _out664;
                  bool _out665;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out666;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out663, out _out664, out _out665, out _out666);
                  _2049_recursiveGen = _out663;
                  _2050_recOwned = _out664;
                  _2051_recErased = _out665;
                  _2052_recIdents = _out666;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2049_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2050_recOwned;
                  isErased = _2051_recErased;
                  readIdents = _2052_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2053___mcc_h627 = _source125.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2054_recursiveGen;
                  bool _2055_recOwned;
                  bool _2056_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2057_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out667;
                  bool _out668;
                  bool _out669;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out670;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out667, out _out668, out _out669, out _out670);
                  _2054_recursiveGen = _out667;
                  _2055_recOwned = _out668;
                  _2056_recErased = _out669;
                  _2057_recIdents = _out670;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2054_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2055_recOwned;
                  isErased = _2056_recErased;
                  readIdents = _2057_recIdents;
                }
              }
            } else if (_source113.is_Seq) {
              DAST._IType _2058___mcc_h629 = _source113.dtor_element;
              DAST._IType _source127 = _1552___mcc_h306;
              if (_source127.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2059___mcc_h633 = _source127.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2060___mcc_h634 = _source127.dtor_typeArgs;
                DAST._IResolvedType _2061___mcc_h635 = _source127.dtor_resolved;
                DAST._IResolvedType _source128 = _2061___mcc_h635;
                if (_source128.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2062___mcc_h639 = _source128.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2063_recursiveGen;
                    bool _2064_recOwned;
                    bool _2065_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2066_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out671;
                    bool _out672;
                    bool _out673;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out674;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out671, out _out672, out _out673, out _out674);
                    _2063_recursiveGen = _out671;
                    _2064_recOwned = _out672;
                    _2065_recErased = _out673;
                    _2066_recIdents = _out674;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2063_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2064_recOwned;
                    isErased = _2065_recErased;
                    readIdents = _2066_recIdents;
                  }
                } else if (_source128.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2067___mcc_h641 = _source128.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2068_recursiveGen;
                    bool _2069_recOwned;
                    bool _2070_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2071_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out675;
                    bool _out676;
                    bool _out677;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out678;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out675, out _out676, out _out677, out _out678);
                    _2068_recursiveGen = _out675;
                    _2069_recOwned = _out676;
                    _2070_recErased = _out677;
                    _2071_recIdents = _out678;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2068_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2069_recOwned;
                    isErased = _2070_recErased;
                    readIdents = _2071_recIdents;
                  }
                } else {
                  DAST._IType _2072___mcc_h643 = _source128.dtor_Newtype_a0;
                  DAST._IType _2073_b = _2072___mcc_h643;
                  {
                    if (object.Equals(_1545_fromTpe, _2073_b)) {
                      Dafny.ISequence<Dafny.Rune> _2074_recursiveGen;
                      bool _2075_recOwned;
                      bool _2076_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2077_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out679;
                      bool _out680;
                      bool _out681;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out682;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out679, out _out680, out _out681, out _out682);
                      _2074_recursiveGen = _out679;
                      _2075_recOwned = _out680;
                      _2076_recErased = _out681;
                      _2077_recIdents = _out682;
                      Dafny.ISequence<Dafny.Rune> _2078_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out683;
                      _out683 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _2078_rhsType = _out683;
                      Dafny.ISequence<Dafny.Rune> _2079_uneraseFn;
                      _2079_uneraseFn = ((_2075_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2078_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2079_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2074_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2075_recOwned;
                      isErased = false;
                      readIdents = _2077_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out684;
                      bool _out685;
                      bool _out686;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2073_b), _2073_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                      s = _out684;
                      isOwned = _out685;
                      isErased = _out686;
                      readIdents = _out687;
                    }
                  }
                }
              } else if (_source127.is_Nullable) {
                DAST._IType _2080___mcc_h645 = _source127.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2081_recursiveGen;
                  bool _2082_recOwned;
                  bool _2083_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2084_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out688;
                  bool _out689;
                  bool _out690;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out688, out _out689, out _out690, out _out691);
                  _2081_recursiveGen = _out688;
                  _2082_recOwned = _out689;
                  _2083_recErased = _out690;
                  _2084_recIdents = _out691;
                  if (!(_2082_recOwned)) {
                    _2081_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2081_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2081_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2083_recErased;
                  readIdents = _2084_recIdents;
                }
              } else if (_source127.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2085___mcc_h647 = _source127.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2086_recursiveGen;
                  bool _2087_recOwned;
                  bool _2088_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2089_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out692;
                  bool _out693;
                  bool _out694;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out695;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out692, out _out693, out _out694, out _out695);
                  _2086_recursiveGen = _out692;
                  _2087_recOwned = _out693;
                  _2088_recErased = _out694;
                  _2089_recIdents = _out695;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2087_recOwned;
                  isErased = _2088_recErased;
                  readIdents = _2089_recIdents;
                }
              } else if (_source127.is_Array) {
                DAST._IType _2090___mcc_h649 = _source127.dtor_element;
                BigInteger _2091___mcc_h650 = _source127.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2092_recursiveGen;
                  bool _2093_recOwned;
                  bool _2094_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2095_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out696;
                  bool _out697;
                  bool _out698;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out699;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out696, out _out697, out _out698, out _out699);
                  _2092_recursiveGen = _out696;
                  _2093_recOwned = _out697;
                  _2094_recErased = _out698;
                  _2095_recIdents = _out699;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2092_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2093_recOwned;
                  isErased = _2094_recErased;
                  readIdents = _2095_recIdents;
                }
              } else if (_source127.is_Seq) {
                DAST._IType _2096___mcc_h653 = _source127.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2097_recursiveGen;
                  bool _2098_recOwned;
                  bool _2099_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2100_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out700;
                  bool _out701;
                  bool _out702;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out703;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out700, out _out701, out _out702, out _out703);
                  _2097_recursiveGen = _out700;
                  _2098_recOwned = _out701;
                  _2099_recErased = _out702;
                  _2100_recIdents = _out703;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2097_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2098_recOwned;
                  isErased = _2099_recErased;
                  readIdents = _2100_recIdents;
                }
              } else if (_source127.is_Set) {
                DAST._IType _2101___mcc_h655 = _source127.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2102_recursiveGen;
                  bool _2103_recOwned;
                  bool _2104_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2105_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out704;
                  bool _out705;
                  bool _out706;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out707;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out704, out _out705, out _out706, out _out707);
                  _2102_recursiveGen = _out704;
                  _2103_recOwned = _out705;
                  _2104_recErased = _out706;
                  _2105_recIdents = _out707;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2102_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2103_recOwned;
                  isErased = _2104_recErased;
                  readIdents = _2105_recIdents;
                }
              } else if (_source127.is_Multiset) {
                DAST._IType _2106___mcc_h657 = _source127.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2107_recursiveGen;
                  bool _2108_recOwned;
                  bool _2109_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2110_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out708;
                  bool _out709;
                  bool _out710;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out708, out _out709, out _out710, out _out711);
                  _2107_recursiveGen = _out708;
                  _2108_recOwned = _out709;
                  _2109_recErased = _out710;
                  _2110_recIdents = _out711;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2107_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2108_recOwned;
                  isErased = _2109_recErased;
                  readIdents = _2110_recIdents;
                }
              } else if (_source127.is_Map) {
                DAST._IType _2111___mcc_h659 = _source127.dtor_key;
                DAST._IType _2112___mcc_h660 = _source127.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2113_recursiveGen;
                  bool _2114_recOwned;
                  bool _2115_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2116_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out712;
                  bool _out713;
                  bool _out714;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out715;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out712, out _out713, out _out714, out _out715);
                  _2113_recursiveGen = _out712;
                  _2114_recOwned = _out713;
                  _2115_recErased = _out714;
                  _2116_recIdents = _out715;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2113_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2114_recOwned;
                  isErased = _2115_recErased;
                  readIdents = _2116_recIdents;
                }
              } else if (_source127.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2117___mcc_h663 = _source127.dtor_args;
                DAST._IType _2118___mcc_h664 = _source127.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2119_recursiveGen;
                  bool _2120_recOwned;
                  bool _2121_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2122_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out716;
                  bool _out717;
                  bool _out718;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out719;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out716, out _out717, out _out718, out _out719);
                  _2119_recursiveGen = _out716;
                  _2120_recOwned = _out717;
                  _2121_recErased = _out718;
                  _2122_recIdents = _out719;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2119_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2120_recOwned;
                  isErased = _2121_recErased;
                  readIdents = _2122_recIdents;
                }
              } else if (_source127.is_Primitive) {
                DAST._IPrimitive _2123___mcc_h667 = _source127.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2124_recursiveGen;
                  bool _2125_recOwned;
                  bool _2126_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2127_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out720;
                  bool _out721;
                  bool _out722;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out723;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out720, out _out721, out _out722, out _out723);
                  _2124_recursiveGen = _out720;
                  _2125_recOwned = _out721;
                  _2126_recErased = _out722;
                  _2127_recIdents = _out723;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2124_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2125_recOwned;
                  isErased = _2126_recErased;
                  readIdents = _2127_recIdents;
                }
              } else if (_source127.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2128___mcc_h669 = _source127.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2129_recursiveGen;
                  bool _2130_recOwned;
                  bool _2131_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2132_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out724;
                  bool _out725;
                  bool _out726;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out727;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out724, out _out725, out _out726, out _out727);
                  _2129_recursiveGen = _out724;
                  _2130_recOwned = _out725;
                  _2131_recErased = _out726;
                  _2132_recIdents = _out727;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2129_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2130_recOwned;
                  isErased = _2131_recErased;
                  readIdents = _2132_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2133___mcc_h671 = _source127.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2134_recursiveGen;
                  bool _2135_recOwned;
                  bool _2136_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2137_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out728;
                  bool _out729;
                  bool _out730;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out731;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out728, out _out729, out _out730, out _out731);
                  _2134_recursiveGen = _out728;
                  _2135_recOwned = _out729;
                  _2136_recErased = _out730;
                  _2137_recIdents = _out731;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2134_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2135_recOwned;
                  isErased = _2136_recErased;
                  readIdents = _2137_recIdents;
                }
              }
            } else if (_source113.is_Set) {
              DAST._IType _2138___mcc_h673 = _source113.dtor_element;
              DAST._IType _source129 = _1552___mcc_h306;
              if (_source129.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2139___mcc_h677 = _source129.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2140___mcc_h678 = _source129.dtor_typeArgs;
                DAST._IResolvedType _2141___mcc_h679 = _source129.dtor_resolved;
                DAST._IResolvedType _source130 = _2141___mcc_h679;
                if (_source130.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2142___mcc_h683 = _source130.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2143_recursiveGen;
                    bool _2144_recOwned;
                    bool _2145_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2146_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out732;
                    bool _out733;
                    bool _out734;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out735;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out732, out _out733, out _out734, out _out735);
                    _2143_recursiveGen = _out732;
                    _2144_recOwned = _out733;
                    _2145_recErased = _out734;
                    _2146_recIdents = _out735;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2143_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2144_recOwned;
                    isErased = _2145_recErased;
                    readIdents = _2146_recIdents;
                  }
                } else if (_source130.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2147___mcc_h685 = _source130.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2148_recursiveGen;
                    bool _2149_recOwned;
                    bool _2150_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2151_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out736;
                    bool _out737;
                    bool _out738;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out739;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out736, out _out737, out _out738, out _out739);
                    _2148_recursiveGen = _out736;
                    _2149_recOwned = _out737;
                    _2150_recErased = _out738;
                    _2151_recIdents = _out739;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2148_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2149_recOwned;
                    isErased = _2150_recErased;
                    readIdents = _2151_recIdents;
                  }
                } else {
                  DAST._IType _2152___mcc_h687 = _source130.dtor_Newtype_a0;
                  DAST._IType _2153_b = _2152___mcc_h687;
                  {
                    if (object.Equals(_1545_fromTpe, _2153_b)) {
                      Dafny.ISequence<Dafny.Rune> _2154_recursiveGen;
                      bool _2155_recOwned;
                      bool _2156_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2157_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out740;
                      bool _out741;
                      bool _out742;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out743;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out740, out _out741, out _out742, out _out743);
                      _2154_recursiveGen = _out740;
                      _2155_recOwned = _out741;
                      _2156_recErased = _out742;
                      _2157_recIdents = _out743;
                      Dafny.ISequence<Dafny.Rune> _2158_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out744;
                      _out744 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _2158_rhsType = _out744;
                      Dafny.ISequence<Dafny.Rune> _2159_uneraseFn;
                      _2159_uneraseFn = ((_2155_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2158_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2159_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2154_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2155_recOwned;
                      isErased = false;
                      readIdents = _2157_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out745;
                      bool _out746;
                      bool _out747;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2153_b), _2153_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                      s = _out745;
                      isOwned = _out746;
                      isErased = _out747;
                      readIdents = _out748;
                    }
                  }
                }
              } else if (_source129.is_Nullable) {
                DAST._IType _2160___mcc_h689 = _source129.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2161_recursiveGen;
                  bool _2162_recOwned;
                  bool _2163_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2164_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out749;
                  bool _out750;
                  bool _out751;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out752;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out749, out _out750, out _out751, out _out752);
                  _2161_recursiveGen = _out749;
                  _2162_recOwned = _out750;
                  _2163_recErased = _out751;
                  _2164_recIdents = _out752;
                  if (!(_2162_recOwned)) {
                    _2161_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2161_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2161_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2163_recErased;
                  readIdents = _2164_recIdents;
                }
              } else if (_source129.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2165___mcc_h691 = _source129.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2166_recursiveGen;
                  bool _2167_recOwned;
                  bool _2168_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2169_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out753;
                  bool _out754;
                  bool _out755;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out756;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out753, out _out754, out _out755, out _out756);
                  _2166_recursiveGen = _out753;
                  _2167_recOwned = _out754;
                  _2168_recErased = _out755;
                  _2169_recIdents = _out756;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2166_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2167_recOwned;
                  isErased = _2168_recErased;
                  readIdents = _2169_recIdents;
                }
              } else if (_source129.is_Array) {
                DAST._IType _2170___mcc_h693 = _source129.dtor_element;
                BigInteger _2171___mcc_h694 = _source129.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2172_recursiveGen;
                  bool _2173_recOwned;
                  bool _2174_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2175_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out757;
                  bool _out758;
                  bool _out759;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out760;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out757, out _out758, out _out759, out _out760);
                  _2172_recursiveGen = _out757;
                  _2173_recOwned = _out758;
                  _2174_recErased = _out759;
                  _2175_recIdents = _out760;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2172_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2173_recOwned;
                  isErased = _2174_recErased;
                  readIdents = _2175_recIdents;
                }
              } else if (_source129.is_Seq) {
                DAST._IType _2176___mcc_h697 = _source129.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2177_recursiveGen;
                  bool _2178_recOwned;
                  bool _2179_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2180_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out761;
                  bool _out762;
                  bool _out763;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out764;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out761, out _out762, out _out763, out _out764);
                  _2177_recursiveGen = _out761;
                  _2178_recOwned = _out762;
                  _2179_recErased = _out763;
                  _2180_recIdents = _out764;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2177_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2178_recOwned;
                  isErased = _2179_recErased;
                  readIdents = _2180_recIdents;
                }
              } else if (_source129.is_Set) {
                DAST._IType _2181___mcc_h699 = _source129.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2182_recursiveGen;
                  bool _2183_recOwned;
                  bool _2184_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2185_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out765;
                  bool _out766;
                  bool _out767;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out768;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out765, out _out766, out _out767, out _out768);
                  _2182_recursiveGen = _out765;
                  _2183_recOwned = _out766;
                  _2184_recErased = _out767;
                  _2185_recIdents = _out768;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2182_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2183_recOwned;
                  isErased = _2184_recErased;
                  readIdents = _2185_recIdents;
                }
              } else if (_source129.is_Multiset) {
                DAST._IType _2186___mcc_h701 = _source129.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2187_recursiveGen;
                  bool _2188_recOwned;
                  bool _2189_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2190_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out769;
                  bool _out770;
                  bool _out771;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out772;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out769, out _out770, out _out771, out _out772);
                  _2187_recursiveGen = _out769;
                  _2188_recOwned = _out770;
                  _2189_recErased = _out771;
                  _2190_recIdents = _out772;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2187_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2188_recOwned;
                  isErased = _2189_recErased;
                  readIdents = _2190_recIdents;
                }
              } else if (_source129.is_Map) {
                DAST._IType _2191___mcc_h703 = _source129.dtor_key;
                DAST._IType _2192___mcc_h704 = _source129.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2193_recursiveGen;
                  bool _2194_recOwned;
                  bool _2195_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2196_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out773;
                  bool _out774;
                  bool _out775;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out776;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out773, out _out774, out _out775, out _out776);
                  _2193_recursiveGen = _out773;
                  _2194_recOwned = _out774;
                  _2195_recErased = _out775;
                  _2196_recIdents = _out776;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2193_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2194_recOwned;
                  isErased = _2195_recErased;
                  readIdents = _2196_recIdents;
                }
              } else if (_source129.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2197___mcc_h707 = _source129.dtor_args;
                DAST._IType _2198___mcc_h708 = _source129.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2199_recursiveGen;
                  bool _2200_recOwned;
                  bool _2201_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2202_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out777;
                  bool _out778;
                  bool _out779;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out780;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out777, out _out778, out _out779, out _out780);
                  _2199_recursiveGen = _out777;
                  _2200_recOwned = _out778;
                  _2201_recErased = _out779;
                  _2202_recIdents = _out780;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2199_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2200_recOwned;
                  isErased = _2201_recErased;
                  readIdents = _2202_recIdents;
                }
              } else if (_source129.is_Primitive) {
                DAST._IPrimitive _2203___mcc_h711 = _source129.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2204_recursiveGen;
                  bool _2205_recOwned;
                  bool _2206_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2207_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out781;
                  bool _out782;
                  bool _out783;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out784;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out781, out _out782, out _out783, out _out784);
                  _2204_recursiveGen = _out781;
                  _2205_recOwned = _out782;
                  _2206_recErased = _out783;
                  _2207_recIdents = _out784;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2204_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2205_recOwned;
                  isErased = _2206_recErased;
                  readIdents = _2207_recIdents;
                }
              } else if (_source129.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2208___mcc_h713 = _source129.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2209_recursiveGen;
                  bool _2210_recOwned;
                  bool _2211_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2212_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out785;
                  bool _out786;
                  bool _out787;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out788;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out785, out _out786, out _out787, out _out788);
                  _2209_recursiveGen = _out785;
                  _2210_recOwned = _out786;
                  _2211_recErased = _out787;
                  _2212_recIdents = _out788;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2209_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2210_recOwned;
                  isErased = _2211_recErased;
                  readIdents = _2212_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2213___mcc_h715 = _source129.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2214_recursiveGen;
                  bool _2215_recOwned;
                  bool _2216_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2217_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out789;
                  bool _out790;
                  bool _out791;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out792;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out789, out _out790, out _out791, out _out792);
                  _2214_recursiveGen = _out789;
                  _2215_recOwned = _out790;
                  _2216_recErased = _out791;
                  _2217_recIdents = _out792;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2214_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2215_recOwned;
                  isErased = _2216_recErased;
                  readIdents = _2217_recIdents;
                }
              }
            } else if (_source113.is_Multiset) {
              DAST._IType _2218___mcc_h717 = _source113.dtor_element;
              DAST._IType _source131 = _1552___mcc_h306;
              if (_source131.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2219___mcc_h721 = _source131.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2220___mcc_h722 = _source131.dtor_typeArgs;
                DAST._IResolvedType _2221___mcc_h723 = _source131.dtor_resolved;
                DAST._IResolvedType _source132 = _2221___mcc_h723;
                if (_source132.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2222___mcc_h727 = _source132.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2223_recursiveGen;
                    bool _2224_recOwned;
                    bool _2225_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2226_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out793;
                    bool _out794;
                    bool _out795;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out796;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out793, out _out794, out _out795, out _out796);
                    _2223_recursiveGen = _out793;
                    _2224_recOwned = _out794;
                    _2225_recErased = _out795;
                    _2226_recIdents = _out796;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2223_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2224_recOwned;
                    isErased = _2225_recErased;
                    readIdents = _2226_recIdents;
                  }
                } else if (_source132.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2227___mcc_h729 = _source132.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2228_recursiveGen;
                    bool _2229_recOwned;
                    bool _2230_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2231_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out797;
                    bool _out798;
                    bool _out799;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out800;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out797, out _out798, out _out799, out _out800);
                    _2228_recursiveGen = _out797;
                    _2229_recOwned = _out798;
                    _2230_recErased = _out799;
                    _2231_recIdents = _out800;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2228_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2229_recOwned;
                    isErased = _2230_recErased;
                    readIdents = _2231_recIdents;
                  }
                } else {
                  DAST._IType _2232___mcc_h731 = _source132.dtor_Newtype_a0;
                  DAST._IType _2233_b = _2232___mcc_h731;
                  {
                    if (object.Equals(_1545_fromTpe, _2233_b)) {
                      Dafny.ISequence<Dafny.Rune> _2234_recursiveGen;
                      bool _2235_recOwned;
                      bool _2236_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2237_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out801;
                      bool _out802;
                      bool _out803;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out804;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out801, out _out802, out _out803, out _out804);
                      _2234_recursiveGen = _out801;
                      _2235_recOwned = _out802;
                      _2236_recErased = _out803;
                      _2237_recIdents = _out804;
                      Dafny.ISequence<Dafny.Rune> _2238_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out805;
                      _out805 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _2238_rhsType = _out805;
                      Dafny.ISequence<Dafny.Rune> _2239_uneraseFn;
                      _2239_uneraseFn = ((_2235_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2238_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2239_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2234_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2235_recOwned;
                      isErased = false;
                      readIdents = _2237_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out806;
                      bool _out807;
                      bool _out808;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2233_b), _2233_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                      s = _out806;
                      isOwned = _out807;
                      isErased = _out808;
                      readIdents = _out809;
                    }
                  }
                }
              } else if (_source131.is_Nullable) {
                DAST._IType _2240___mcc_h733 = _source131.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2241_recursiveGen;
                  bool _2242_recOwned;
                  bool _2243_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2244_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out810;
                  bool _out811;
                  bool _out812;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out813;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out810, out _out811, out _out812, out _out813);
                  _2241_recursiveGen = _out810;
                  _2242_recOwned = _out811;
                  _2243_recErased = _out812;
                  _2244_recIdents = _out813;
                  if (!(_2242_recOwned)) {
                    _2241_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2241_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2243_recErased;
                  readIdents = _2244_recIdents;
                }
              } else if (_source131.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2245___mcc_h735 = _source131.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2246_recursiveGen;
                  bool _2247_recOwned;
                  bool _2248_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2249_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out814;
                  bool _out815;
                  bool _out816;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out814, out _out815, out _out816, out _out817);
                  _2246_recursiveGen = _out814;
                  _2247_recOwned = _out815;
                  _2248_recErased = _out816;
                  _2249_recIdents = _out817;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2246_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2247_recOwned;
                  isErased = _2248_recErased;
                  readIdents = _2249_recIdents;
                }
              } else if (_source131.is_Array) {
                DAST._IType _2250___mcc_h737 = _source131.dtor_element;
                BigInteger _2251___mcc_h738 = _source131.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2252_recursiveGen;
                  bool _2253_recOwned;
                  bool _2254_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2255_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out818;
                  bool _out819;
                  bool _out820;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out821;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out818, out _out819, out _out820, out _out821);
                  _2252_recursiveGen = _out818;
                  _2253_recOwned = _out819;
                  _2254_recErased = _out820;
                  _2255_recIdents = _out821;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2252_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2253_recOwned;
                  isErased = _2254_recErased;
                  readIdents = _2255_recIdents;
                }
              } else if (_source131.is_Seq) {
                DAST._IType _2256___mcc_h741 = _source131.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2257_recursiveGen;
                  bool _2258_recOwned;
                  bool _2259_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2260_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out822;
                  bool _out823;
                  bool _out824;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out825;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out822, out _out823, out _out824, out _out825);
                  _2257_recursiveGen = _out822;
                  _2258_recOwned = _out823;
                  _2259_recErased = _out824;
                  _2260_recIdents = _out825;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2257_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2258_recOwned;
                  isErased = _2259_recErased;
                  readIdents = _2260_recIdents;
                }
              } else if (_source131.is_Set) {
                DAST._IType _2261___mcc_h743 = _source131.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2262_recursiveGen;
                  bool _2263_recOwned;
                  bool _2264_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2265_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out826;
                  bool _out827;
                  bool _out828;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out829;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out826, out _out827, out _out828, out _out829);
                  _2262_recursiveGen = _out826;
                  _2263_recOwned = _out827;
                  _2264_recErased = _out828;
                  _2265_recIdents = _out829;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2262_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2263_recOwned;
                  isErased = _2264_recErased;
                  readIdents = _2265_recIdents;
                }
              } else if (_source131.is_Multiset) {
                DAST._IType _2266___mcc_h745 = _source131.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2267_recursiveGen;
                  bool _2268_recOwned;
                  bool _2269_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2270_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out830;
                  bool _out831;
                  bool _out832;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out833;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out830, out _out831, out _out832, out _out833);
                  _2267_recursiveGen = _out830;
                  _2268_recOwned = _out831;
                  _2269_recErased = _out832;
                  _2270_recIdents = _out833;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2268_recOwned;
                  isErased = _2269_recErased;
                  readIdents = _2270_recIdents;
                }
              } else if (_source131.is_Map) {
                DAST._IType _2271___mcc_h747 = _source131.dtor_key;
                DAST._IType _2272___mcc_h748 = _source131.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2273_recursiveGen;
                  bool _2274_recOwned;
                  bool _2275_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2276_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out834;
                  bool _out835;
                  bool _out836;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out837;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out834, out _out835, out _out836, out _out837);
                  _2273_recursiveGen = _out834;
                  _2274_recOwned = _out835;
                  _2275_recErased = _out836;
                  _2276_recIdents = _out837;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2273_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2274_recOwned;
                  isErased = _2275_recErased;
                  readIdents = _2276_recIdents;
                }
              } else if (_source131.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2277___mcc_h751 = _source131.dtor_args;
                DAST._IType _2278___mcc_h752 = _source131.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2279_recursiveGen;
                  bool _2280_recOwned;
                  bool _2281_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2282_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out838;
                  bool _out839;
                  bool _out840;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out841;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out838, out _out839, out _out840, out _out841);
                  _2279_recursiveGen = _out838;
                  _2280_recOwned = _out839;
                  _2281_recErased = _out840;
                  _2282_recIdents = _out841;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2279_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2280_recOwned;
                  isErased = _2281_recErased;
                  readIdents = _2282_recIdents;
                }
              } else if (_source131.is_Primitive) {
                DAST._IPrimitive _2283___mcc_h755 = _source131.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2284_recursiveGen;
                  bool _2285_recOwned;
                  bool _2286_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2287_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out842;
                  bool _out843;
                  bool _out844;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out845;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out842, out _out843, out _out844, out _out845);
                  _2284_recursiveGen = _out842;
                  _2285_recOwned = _out843;
                  _2286_recErased = _out844;
                  _2287_recIdents = _out845;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2284_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2285_recOwned;
                  isErased = _2286_recErased;
                  readIdents = _2287_recIdents;
                }
              } else if (_source131.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2288___mcc_h757 = _source131.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2289_recursiveGen;
                  bool _2290_recOwned;
                  bool _2291_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2292_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out846;
                  bool _out847;
                  bool _out848;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out849;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out846, out _out847, out _out848, out _out849);
                  _2289_recursiveGen = _out846;
                  _2290_recOwned = _out847;
                  _2291_recErased = _out848;
                  _2292_recIdents = _out849;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2290_recOwned;
                  isErased = _2291_recErased;
                  readIdents = _2292_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2293___mcc_h759 = _source131.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2294_recursiveGen;
                  bool _2295_recOwned;
                  bool _2296_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2297_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out850;
                  bool _out851;
                  bool _out852;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out853;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out850, out _out851, out _out852, out _out853);
                  _2294_recursiveGen = _out850;
                  _2295_recOwned = _out851;
                  _2296_recErased = _out852;
                  _2297_recIdents = _out853;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2294_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2295_recOwned;
                  isErased = _2296_recErased;
                  readIdents = _2297_recIdents;
                }
              }
            } else if (_source113.is_Map) {
              DAST._IType _2298___mcc_h761 = _source113.dtor_key;
              DAST._IType _2299___mcc_h762 = _source113.dtor_value;
              DAST._IType _source133 = _1552___mcc_h306;
              if (_source133.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2300___mcc_h769 = _source133.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2301___mcc_h770 = _source133.dtor_typeArgs;
                DAST._IResolvedType _2302___mcc_h771 = _source133.dtor_resolved;
                DAST._IResolvedType _source134 = _2302___mcc_h771;
                if (_source134.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2303___mcc_h775 = _source134.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2304_recursiveGen;
                    bool _2305_recOwned;
                    bool _2306_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2307_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out854;
                    bool _out855;
                    bool _out856;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out857;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out854, out _out855, out _out856, out _out857);
                    _2304_recursiveGen = _out854;
                    _2305_recOwned = _out855;
                    _2306_recErased = _out856;
                    _2307_recIdents = _out857;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2305_recOwned;
                    isErased = _2306_recErased;
                    readIdents = _2307_recIdents;
                  }
                } else if (_source134.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2308___mcc_h777 = _source134.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2309_recursiveGen;
                    bool _2310_recOwned;
                    bool _2311_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2312_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out858;
                    bool _out859;
                    bool _out860;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out861;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out858, out _out859, out _out860, out _out861);
                    _2309_recursiveGen = _out858;
                    _2310_recOwned = _out859;
                    _2311_recErased = _out860;
                    _2312_recIdents = _out861;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2309_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2310_recOwned;
                    isErased = _2311_recErased;
                    readIdents = _2312_recIdents;
                  }
                } else {
                  DAST._IType _2313___mcc_h779 = _source134.dtor_Newtype_a0;
                  DAST._IType _2314_b = _2313___mcc_h779;
                  {
                    if (object.Equals(_1545_fromTpe, _2314_b)) {
                      Dafny.ISequence<Dafny.Rune> _2315_recursiveGen;
                      bool _2316_recOwned;
                      bool _2317_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2318_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out862;
                      bool _out863;
                      bool _out864;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out865;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out862, out _out863, out _out864, out _out865);
                      _2315_recursiveGen = _out862;
                      _2316_recOwned = _out863;
                      _2317_recErased = _out864;
                      _2318_recIdents = _out865;
                      Dafny.ISequence<Dafny.Rune> _2319_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out866;
                      _out866 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _2319_rhsType = _out866;
                      Dafny.ISequence<Dafny.Rune> _2320_uneraseFn;
                      _2320_uneraseFn = ((_2316_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2319_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2320_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2315_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2316_recOwned;
                      isErased = false;
                      readIdents = _2318_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out867;
                      bool _out868;
                      bool _out869;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2314_b), _2314_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                      s = _out867;
                      isOwned = _out868;
                      isErased = _out869;
                      readIdents = _out870;
                    }
                  }
                }
              } else if (_source133.is_Nullable) {
                DAST._IType _2321___mcc_h781 = _source133.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2322_recursiveGen;
                  bool _2323_recOwned;
                  bool _2324_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2325_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out871;
                  bool _out872;
                  bool _out873;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out874;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out871, out _out872, out _out873, out _out874);
                  _2322_recursiveGen = _out871;
                  _2323_recOwned = _out872;
                  _2324_recErased = _out873;
                  _2325_recIdents = _out874;
                  if (!(_2323_recOwned)) {
                    _2322_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2322_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2322_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2324_recErased;
                  readIdents = _2325_recIdents;
                }
              } else if (_source133.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2326___mcc_h783 = _source133.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2327_recursiveGen;
                  bool _2328_recOwned;
                  bool _2329_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2330_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out875;
                  bool _out876;
                  bool _out877;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out875, out _out876, out _out877, out _out878);
                  _2327_recursiveGen = _out875;
                  _2328_recOwned = _out876;
                  _2329_recErased = _out877;
                  _2330_recIdents = _out878;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2327_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2328_recOwned;
                  isErased = _2329_recErased;
                  readIdents = _2330_recIdents;
                }
              } else if (_source133.is_Array) {
                DAST._IType _2331___mcc_h785 = _source133.dtor_element;
                BigInteger _2332___mcc_h786 = _source133.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2333_recursiveGen;
                  bool _2334_recOwned;
                  bool _2335_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2336_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out879;
                  bool _out880;
                  bool _out881;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out882;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out879, out _out880, out _out881, out _out882);
                  _2333_recursiveGen = _out879;
                  _2334_recOwned = _out880;
                  _2335_recErased = _out881;
                  _2336_recIdents = _out882;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2333_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2334_recOwned;
                  isErased = _2335_recErased;
                  readIdents = _2336_recIdents;
                }
              } else if (_source133.is_Seq) {
                DAST._IType _2337___mcc_h789 = _source133.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2338_recursiveGen;
                  bool _2339_recOwned;
                  bool _2340_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2341_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out883;
                  bool _out884;
                  bool _out885;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out886;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out883, out _out884, out _out885, out _out886);
                  _2338_recursiveGen = _out883;
                  _2339_recOwned = _out884;
                  _2340_recErased = _out885;
                  _2341_recIdents = _out886;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2338_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2339_recOwned;
                  isErased = _2340_recErased;
                  readIdents = _2341_recIdents;
                }
              } else if (_source133.is_Set) {
                DAST._IType _2342___mcc_h791 = _source133.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2343_recursiveGen;
                  bool _2344_recOwned;
                  bool _2345_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2346_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out887;
                  bool _out888;
                  bool _out889;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out890;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out887, out _out888, out _out889, out _out890);
                  _2343_recursiveGen = _out887;
                  _2344_recOwned = _out888;
                  _2345_recErased = _out889;
                  _2346_recIdents = _out890;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2343_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2344_recOwned;
                  isErased = _2345_recErased;
                  readIdents = _2346_recIdents;
                }
              } else if (_source133.is_Multiset) {
                DAST._IType _2347___mcc_h793 = _source133.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2348_recursiveGen;
                  bool _2349_recOwned;
                  bool _2350_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2351_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out891;
                  bool _out892;
                  bool _out893;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out894;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out891, out _out892, out _out893, out _out894);
                  _2348_recursiveGen = _out891;
                  _2349_recOwned = _out892;
                  _2350_recErased = _out893;
                  _2351_recIdents = _out894;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2348_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2349_recOwned;
                  isErased = _2350_recErased;
                  readIdents = _2351_recIdents;
                }
              } else if (_source133.is_Map) {
                DAST._IType _2352___mcc_h795 = _source133.dtor_key;
                DAST._IType _2353___mcc_h796 = _source133.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2354_recursiveGen;
                  bool _2355_recOwned;
                  bool _2356_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2357_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out895;
                  bool _out896;
                  bool _out897;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out895, out _out896, out _out897, out _out898);
                  _2354_recursiveGen = _out895;
                  _2355_recOwned = _out896;
                  _2356_recErased = _out897;
                  _2357_recIdents = _out898;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2354_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2355_recOwned;
                  isErased = _2356_recErased;
                  readIdents = _2357_recIdents;
                }
              } else if (_source133.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2358___mcc_h799 = _source133.dtor_args;
                DAST._IType _2359___mcc_h800 = _source133.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2360_recursiveGen;
                  bool _2361_recOwned;
                  bool _2362_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2363_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out899;
                  bool _out900;
                  bool _out901;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out902;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out899, out _out900, out _out901, out _out902);
                  _2360_recursiveGen = _out899;
                  _2361_recOwned = _out900;
                  _2362_recErased = _out901;
                  _2363_recIdents = _out902;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2360_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2361_recOwned;
                  isErased = _2362_recErased;
                  readIdents = _2363_recIdents;
                }
              } else if (_source133.is_Primitive) {
                DAST._IPrimitive _2364___mcc_h803 = _source133.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2365_recursiveGen;
                  bool _2366_recOwned;
                  bool _2367_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2368_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out903;
                  bool _out904;
                  bool _out905;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out906;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out903, out _out904, out _out905, out _out906);
                  _2365_recursiveGen = _out903;
                  _2366_recOwned = _out904;
                  _2367_recErased = _out905;
                  _2368_recIdents = _out906;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2365_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2366_recOwned;
                  isErased = _2367_recErased;
                  readIdents = _2368_recIdents;
                }
              } else if (_source133.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2369___mcc_h805 = _source133.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2370_recursiveGen;
                  bool _2371_recOwned;
                  bool _2372_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2373_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out907;
                  bool _out908;
                  bool _out909;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out910;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out907, out _out908, out _out909, out _out910);
                  _2370_recursiveGen = _out907;
                  _2371_recOwned = _out908;
                  _2372_recErased = _out909;
                  _2373_recIdents = _out910;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2370_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2371_recOwned;
                  isErased = _2372_recErased;
                  readIdents = _2373_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2374___mcc_h807 = _source133.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2375_recursiveGen;
                  bool _2376_recOwned;
                  bool _2377_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2378_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out911;
                  bool _out912;
                  bool _out913;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out914;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out911, out _out912, out _out913, out _out914);
                  _2375_recursiveGen = _out911;
                  _2376_recOwned = _out912;
                  _2377_recErased = _out913;
                  _2378_recIdents = _out914;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2375_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2376_recOwned;
                  isErased = _2377_recErased;
                  readIdents = _2378_recIdents;
                }
              }
            } else if (_source113.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2379___mcc_h809 = _source113.dtor_args;
              DAST._IType _2380___mcc_h810 = _source113.dtor_result;
              DAST._IType _source135 = _1552___mcc_h306;
              if (_source135.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2381___mcc_h817 = _source135.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2382___mcc_h818 = _source135.dtor_typeArgs;
                DAST._IResolvedType _2383___mcc_h819 = _source135.dtor_resolved;
                DAST._IResolvedType _source136 = _2383___mcc_h819;
                if (_source136.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2384___mcc_h823 = _source136.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2385_recursiveGen;
                    bool _2386_recOwned;
                    bool _2387_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2388_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out915;
                    bool _out916;
                    bool _out917;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out918;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out915, out _out916, out _out917, out _out918);
                    _2385_recursiveGen = _out915;
                    _2386_recOwned = _out916;
                    _2387_recErased = _out917;
                    _2388_recIdents = _out918;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2385_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2386_recOwned;
                    isErased = _2387_recErased;
                    readIdents = _2388_recIdents;
                  }
                } else if (_source136.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2389___mcc_h825 = _source136.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2390_recursiveGen;
                    bool _2391_recOwned;
                    bool _2392_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2393_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out919;
                    bool _out920;
                    bool _out921;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out922;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out919, out _out920, out _out921, out _out922);
                    _2390_recursiveGen = _out919;
                    _2391_recOwned = _out920;
                    _2392_recErased = _out921;
                    _2393_recIdents = _out922;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2390_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2391_recOwned;
                    isErased = _2392_recErased;
                    readIdents = _2393_recIdents;
                  }
                } else {
                  DAST._IType _2394___mcc_h827 = _source136.dtor_Newtype_a0;
                  DAST._IType _2395_b = _2394___mcc_h827;
                  {
                    if (object.Equals(_1545_fromTpe, _2395_b)) {
                      Dafny.ISequence<Dafny.Rune> _2396_recursiveGen;
                      bool _2397_recOwned;
                      bool _2398_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2399_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out923;
                      bool _out924;
                      bool _out925;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out926;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out923, out _out924, out _out925, out _out926);
                      _2396_recursiveGen = _out923;
                      _2397_recOwned = _out924;
                      _2398_recErased = _out925;
                      _2399_recIdents = _out926;
                      Dafny.ISequence<Dafny.Rune> _2400_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out927;
                      _out927 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _2400_rhsType = _out927;
                      Dafny.ISequence<Dafny.Rune> _2401_uneraseFn;
                      _2401_uneraseFn = ((_2397_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2400_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2401_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2396_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2397_recOwned;
                      isErased = false;
                      readIdents = _2399_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out928;
                      bool _out929;
                      bool _out930;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2395_b), _2395_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                      s = _out928;
                      isOwned = _out929;
                      isErased = _out930;
                      readIdents = _out931;
                    }
                  }
                }
              } else if (_source135.is_Nullable) {
                DAST._IType _2402___mcc_h829 = _source135.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2403_recursiveGen;
                  bool _2404_recOwned;
                  bool _2405_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2406_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out932;
                  bool _out933;
                  bool _out934;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out935;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out932, out _out933, out _out934, out _out935);
                  _2403_recursiveGen = _out932;
                  _2404_recOwned = _out933;
                  _2405_recErased = _out934;
                  _2406_recIdents = _out935;
                  if (!(_2404_recOwned)) {
                    _2403_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2403_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2403_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2405_recErased;
                  readIdents = _2406_recIdents;
                }
              } else if (_source135.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2407___mcc_h831 = _source135.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2408_recursiveGen;
                  bool _2409_recOwned;
                  bool _2410_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2411_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out936;
                  bool _out937;
                  bool _out938;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out939;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out936, out _out937, out _out938, out _out939);
                  _2408_recursiveGen = _out936;
                  _2409_recOwned = _out937;
                  _2410_recErased = _out938;
                  _2411_recIdents = _out939;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2408_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2409_recOwned;
                  isErased = _2410_recErased;
                  readIdents = _2411_recIdents;
                }
              } else if (_source135.is_Array) {
                DAST._IType _2412___mcc_h833 = _source135.dtor_element;
                BigInteger _2413___mcc_h834 = _source135.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2414_recursiveGen;
                  bool _2415_recOwned;
                  bool _2416_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2417_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out940;
                  bool _out941;
                  bool _out942;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out943;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out940, out _out941, out _out942, out _out943);
                  _2414_recursiveGen = _out940;
                  _2415_recOwned = _out941;
                  _2416_recErased = _out942;
                  _2417_recIdents = _out943;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2414_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2415_recOwned;
                  isErased = _2416_recErased;
                  readIdents = _2417_recIdents;
                }
              } else if (_source135.is_Seq) {
                DAST._IType _2418___mcc_h837 = _source135.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2419_recursiveGen;
                  bool _2420_recOwned;
                  bool _2421_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2422_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out944;
                  bool _out945;
                  bool _out946;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out947;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out944, out _out945, out _out946, out _out947);
                  _2419_recursiveGen = _out944;
                  _2420_recOwned = _out945;
                  _2421_recErased = _out946;
                  _2422_recIdents = _out947;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2419_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2420_recOwned;
                  isErased = _2421_recErased;
                  readIdents = _2422_recIdents;
                }
              } else if (_source135.is_Set) {
                DAST._IType _2423___mcc_h839 = _source135.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2424_recursiveGen;
                  bool _2425_recOwned;
                  bool _2426_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2427_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out948;
                  bool _out949;
                  bool _out950;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out951;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out948, out _out949, out _out950, out _out951);
                  _2424_recursiveGen = _out948;
                  _2425_recOwned = _out949;
                  _2426_recErased = _out950;
                  _2427_recIdents = _out951;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2424_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2425_recOwned;
                  isErased = _2426_recErased;
                  readIdents = _2427_recIdents;
                }
              } else if (_source135.is_Multiset) {
                DAST._IType _2428___mcc_h841 = _source135.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2429_recursiveGen;
                  bool _2430_recOwned;
                  bool _2431_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2432_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out952;
                  bool _out953;
                  bool _out954;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out955;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out952, out _out953, out _out954, out _out955);
                  _2429_recursiveGen = _out952;
                  _2430_recOwned = _out953;
                  _2431_recErased = _out954;
                  _2432_recIdents = _out955;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2429_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2430_recOwned;
                  isErased = _2431_recErased;
                  readIdents = _2432_recIdents;
                }
              } else if (_source135.is_Map) {
                DAST._IType _2433___mcc_h843 = _source135.dtor_key;
                DAST._IType _2434___mcc_h844 = _source135.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2435_recursiveGen;
                  bool _2436_recOwned;
                  bool _2437_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2438_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out956;
                  bool _out957;
                  bool _out958;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out956, out _out957, out _out958, out _out959);
                  _2435_recursiveGen = _out956;
                  _2436_recOwned = _out957;
                  _2437_recErased = _out958;
                  _2438_recIdents = _out959;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2435_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2436_recOwned;
                  isErased = _2437_recErased;
                  readIdents = _2438_recIdents;
                }
              } else if (_source135.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2439___mcc_h847 = _source135.dtor_args;
                DAST._IType _2440___mcc_h848 = _source135.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2441_recursiveGen;
                  bool _2442_recOwned;
                  bool _2443_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2444_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out960;
                  bool _out961;
                  bool _out962;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out963;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out960, out _out961, out _out962, out _out963);
                  _2441_recursiveGen = _out960;
                  _2442_recOwned = _out961;
                  _2443_recErased = _out962;
                  _2444_recIdents = _out963;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2441_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2442_recOwned;
                  isErased = _2443_recErased;
                  readIdents = _2444_recIdents;
                }
              } else if (_source135.is_Primitive) {
                DAST._IPrimitive _2445___mcc_h851 = _source135.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2446_recursiveGen;
                  bool _2447_recOwned;
                  bool _2448_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2449_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out964;
                  bool _out965;
                  bool _out966;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out967;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out964, out _out965, out _out966, out _out967);
                  _2446_recursiveGen = _out964;
                  _2447_recOwned = _out965;
                  _2448_recErased = _out966;
                  _2449_recIdents = _out967;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2446_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2447_recOwned;
                  isErased = _2448_recErased;
                  readIdents = _2449_recIdents;
                }
              } else if (_source135.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2450___mcc_h853 = _source135.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2451_recursiveGen;
                  bool _2452_recOwned;
                  bool _2453_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2454_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out968;
                  bool _out969;
                  bool _out970;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out971;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out968, out _out969, out _out970, out _out971);
                  _2451_recursiveGen = _out968;
                  _2452_recOwned = _out969;
                  _2453_recErased = _out970;
                  _2454_recIdents = _out971;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2451_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2452_recOwned;
                  isErased = _2453_recErased;
                  readIdents = _2454_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2455___mcc_h855 = _source135.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2456_recursiveGen;
                  bool _2457_recOwned;
                  bool _2458_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2459_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out972;
                  bool _out973;
                  bool _out974;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out975;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out972, out _out973, out _out974, out _out975);
                  _2456_recursiveGen = _out972;
                  _2457_recOwned = _out973;
                  _2458_recErased = _out974;
                  _2459_recIdents = _out975;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2456_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2457_recOwned;
                  isErased = _2458_recErased;
                  readIdents = _2459_recIdents;
                }
              }
            } else if (_source113.is_Primitive) {
              DAST._IPrimitive _2460___mcc_h857 = _source113.dtor_Primitive_a0;
              DAST._IPrimitive _source137 = _2460___mcc_h857;
              if (_source137.is_Int) {
                DAST._IType _source138 = _1552___mcc_h306;
                if (_source138.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2461___mcc_h861 = _source138.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2462___mcc_h862 = _source138.dtor_typeArgs;
                  DAST._IResolvedType _2463___mcc_h863 = _source138.dtor_resolved;
                  DAST._IResolvedType _source139 = _2463___mcc_h863;
                  if (_source139.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2464___mcc_h867 = _source139.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2465_recursiveGen;
                      bool _2466_recOwned;
                      bool _2467_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2468_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out976;
                      bool _out977;
                      bool _out978;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out976, out _out977, out _out978, out _out979);
                      _2465_recursiveGen = _out976;
                      _2466_recOwned = _out977;
                      _2467_recErased = _out978;
                      _2468_recIdents = _out979;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2465_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2466_recOwned;
                      isErased = _2467_recErased;
                      readIdents = _2468_recIdents;
                    }
                  } else if (_source139.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2469___mcc_h869 = _source139.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2470_recursiveGen;
                      bool _2471_recOwned;
                      bool _2472_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2473_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out980;
                      bool _out981;
                      bool _out982;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out983;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out980, out _out981, out _out982, out _out983);
                      _2470_recursiveGen = _out980;
                      _2471_recOwned = _out981;
                      _2472_recErased = _out982;
                      _2473_recIdents = _out983;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2470_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2471_recOwned;
                      isErased = _2472_recErased;
                      readIdents = _2473_recIdents;
                    }
                  } else {
                    DAST._IType _2474___mcc_h871 = _source139.dtor_Newtype_a0;
                    DAST._IType _2475_b = _2474___mcc_h871;
                    {
                      if (object.Equals(_1545_fromTpe, _2475_b)) {
                        Dafny.ISequence<Dafny.Rune> _2476_recursiveGen;
                        bool _2477_recOwned;
                        bool _2478_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2479_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out984;
                        bool _out985;
                        bool _out986;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out987;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out984, out _out985, out _out986, out _out987);
                        _2476_recursiveGen = _out984;
                        _2477_recOwned = _out985;
                        _2478_recErased = _out986;
                        _2479_recIdents = _out987;
                        Dafny.ISequence<Dafny.Rune> _2480_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out988;
                        _out988 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                        _2480_rhsType = _out988;
                        Dafny.ISequence<Dafny.Rune> _2481_uneraseFn;
                        _2481_uneraseFn = ((_2477_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2480_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2481_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2476_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2477_recOwned;
                        isErased = false;
                        readIdents = _2479_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out989;
                        bool _out990;
                        bool _out991;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out992;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2475_b), _2475_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out989, out _out990, out _out991, out _out992);
                        s = _out989;
                        isOwned = _out990;
                        isErased = _out991;
                        readIdents = _out992;
                      }
                    }
                  }
                } else if (_source138.is_Nullable) {
                  DAST._IType _2482___mcc_h873 = _source138.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2483_recursiveGen;
                    bool _2484_recOwned;
                    bool _2485_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2486_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out993;
                    bool _out994;
                    bool _out995;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out996;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out993, out _out994, out _out995, out _out996);
                    _2483_recursiveGen = _out993;
                    _2484_recOwned = _out994;
                    _2485_recErased = _out995;
                    _2486_recIdents = _out996;
                    if (!(_2484_recOwned)) {
                      _2483_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2483_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2483_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2485_recErased;
                    readIdents = _2486_recIdents;
                  }
                } else if (_source138.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2487___mcc_h875 = _source138.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2488_recursiveGen;
                    bool _2489_recOwned;
                    bool _2490_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2491_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out997;
                    bool _out998;
                    bool _out999;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1000;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out997, out _out998, out _out999, out _out1000);
                    _2488_recursiveGen = _out997;
                    _2489_recOwned = _out998;
                    _2490_recErased = _out999;
                    _2491_recIdents = _out1000;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2488_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2489_recOwned;
                    isErased = _2490_recErased;
                    readIdents = _2491_recIdents;
                  }
                } else if (_source138.is_Array) {
                  DAST._IType _2492___mcc_h877 = _source138.dtor_element;
                  BigInteger _2493___mcc_h878 = _source138.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2494_recursiveGen;
                    bool _2495_recOwned;
                    bool _2496_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2497_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1001;
                    bool _out1002;
                    bool _out1003;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1001, out _out1002, out _out1003, out _out1004);
                    _2494_recursiveGen = _out1001;
                    _2495_recOwned = _out1002;
                    _2496_recErased = _out1003;
                    _2497_recIdents = _out1004;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2494_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2495_recOwned;
                    isErased = _2496_recErased;
                    readIdents = _2497_recIdents;
                  }
                } else if (_source138.is_Seq) {
                  DAST._IType _2498___mcc_h881 = _source138.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2499_recursiveGen;
                    bool _2500_recOwned;
                    bool _2501_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2502_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1005;
                    bool _out1006;
                    bool _out1007;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1008;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1005, out _out1006, out _out1007, out _out1008);
                    _2499_recursiveGen = _out1005;
                    _2500_recOwned = _out1006;
                    _2501_recErased = _out1007;
                    _2502_recIdents = _out1008;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2499_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2500_recOwned;
                    isErased = _2501_recErased;
                    readIdents = _2502_recIdents;
                  }
                } else if (_source138.is_Set) {
                  DAST._IType _2503___mcc_h883 = _source138.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2504_recursiveGen;
                    bool _2505_recOwned;
                    bool _2506_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2507_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1009;
                    bool _out1010;
                    bool _out1011;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1012;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1009, out _out1010, out _out1011, out _out1012);
                    _2504_recursiveGen = _out1009;
                    _2505_recOwned = _out1010;
                    _2506_recErased = _out1011;
                    _2507_recIdents = _out1012;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2504_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2505_recOwned;
                    isErased = _2506_recErased;
                    readIdents = _2507_recIdents;
                  }
                } else if (_source138.is_Multiset) {
                  DAST._IType _2508___mcc_h885 = _source138.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2509_recursiveGen;
                    bool _2510_recOwned;
                    bool _2511_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2512_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1013;
                    bool _out1014;
                    bool _out1015;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1016;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1013, out _out1014, out _out1015, out _out1016);
                    _2509_recursiveGen = _out1013;
                    _2510_recOwned = _out1014;
                    _2511_recErased = _out1015;
                    _2512_recIdents = _out1016;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2509_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2510_recOwned;
                    isErased = _2511_recErased;
                    readIdents = _2512_recIdents;
                  }
                } else if (_source138.is_Map) {
                  DAST._IType _2513___mcc_h887 = _source138.dtor_key;
                  DAST._IType _2514___mcc_h888 = _source138.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2515_recursiveGen;
                    bool _2516_recOwned;
                    bool _2517_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2518_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1017;
                    bool _out1018;
                    bool _out1019;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1020;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1017, out _out1018, out _out1019, out _out1020);
                    _2515_recursiveGen = _out1017;
                    _2516_recOwned = _out1018;
                    _2517_recErased = _out1019;
                    _2518_recIdents = _out1020;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2515_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2516_recOwned;
                    isErased = _2517_recErased;
                    readIdents = _2518_recIdents;
                  }
                } else if (_source138.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2519___mcc_h891 = _source138.dtor_args;
                  DAST._IType _2520___mcc_h892 = _source138.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2521_recursiveGen;
                    bool _2522_recOwned;
                    bool _2523_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2524_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1021;
                    bool _out1022;
                    bool _out1023;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1021, out _out1022, out _out1023, out _out1024);
                    _2521_recursiveGen = _out1021;
                    _2522_recOwned = _out1022;
                    _2523_recErased = _out1023;
                    _2524_recIdents = _out1024;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2521_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2522_recOwned;
                    isErased = _2523_recErased;
                    readIdents = _2524_recIdents;
                  }
                } else if (_source138.is_Primitive) {
                  DAST._IPrimitive _2525___mcc_h895 = _source138.dtor_Primitive_a0;
                  DAST._IPrimitive _source140 = _2525___mcc_h895;
                  if (_source140.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2526_recursiveGen;
                      bool _2527_recOwned;
                      bool _2528_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2529_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1025;
                      bool _out1026;
                      bool _out1027;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027, out _out1028);
                      _2526_recursiveGen = _out1025;
                      _2527_recOwned = _out1026;
                      _2528_recErased = _out1027;
                      _2529_recIdents = _out1028;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2526_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2527_recOwned;
                      isErased = _2528_recErased;
                      readIdents = _2529_recIdents;
                    }
                  } else if (_source140.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2530_recursiveGen;
                      bool _2531___v46;
                      bool _2532___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2533_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1029;
                      bool _out1030;
                      bool _out1031;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, true, out _out1029, out _out1030, out _out1031, out _out1032);
                      _2530_recursiveGen = _out1029;
                      _2531___v46 = _out1030;
                      _2532___v47 = _out1031;
                      _2533_recIdents = _out1032;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2530_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2533_recIdents;
                    }
                  } else if (_source140.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2534_recursiveGen;
                      bool _2535_recOwned;
                      bool _2536_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2537_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1033;
                      bool _out1034;
                      bool _out1035;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1033, out _out1034, out _out1035, out _out1036);
                      _2534_recursiveGen = _out1033;
                      _2535_recOwned = _out1034;
                      _2536_recErased = _out1035;
                      _2537_recIdents = _out1036;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2534_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2535_recOwned;
                      isErased = _2536_recErased;
                      readIdents = _2537_recIdents;
                    }
                  } else if (_source140.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2538_recursiveGen;
                      bool _2539_recOwned;
                      bool _2540_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2541_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1037;
                      bool _out1038;
                      bool _out1039;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1037, out _out1038, out _out1039, out _out1040);
                      _2538_recursiveGen = _out1037;
                      _2539_recOwned = _out1038;
                      _2540_recErased = _out1039;
                      _2541_recIdents = _out1040;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2538_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2539_recOwned;
                      isErased = _2540_recErased;
                      readIdents = _2541_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2542_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1041;
                      _out1041 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _2542_rhsType = _out1041;
                      Dafny.ISequence<Dafny.Rune> _2543_recursiveGen;
                      bool _2544___v56;
                      bool _2545___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2546_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1042;
                      bool _out1043;
                      bool _out1044;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, true, out _out1042, out _out1043, out _out1044, out _out1045);
                      _2543_recursiveGen = _out1042;
                      _2544___v56 = _out1043;
                      _2545___v57 = _out1044;
                      _2546_recIdents = _out1045;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2543_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2546_recIdents;
                    }
                  }
                } else if (_source138.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2547___mcc_h897 = _source138.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2548_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1046;
                    _out1046 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                    _2548_rhsType = _out1046;
                    Dafny.ISequence<Dafny.Rune> _2549_recursiveGen;
                    bool _2550___v51;
                    bool _2551___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2552_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1047;
                    bool _out1048;
                    bool _out1049;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1050;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, true, out _out1047, out _out1048, out _out1049, out _out1050);
                    _2549_recursiveGen = _out1047;
                    _2550___v51 = _out1048;
                    _2551___v52 = _out1049;
                    _2552_recIdents = _out1050;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2548_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2549_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2552_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2553___mcc_h899 = _source138.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2554_recursiveGen;
                    bool _2555_recOwned;
                    bool _2556_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2557_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1051;
                    bool _out1052;
                    bool _out1053;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1054;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1051, out _out1052, out _out1053, out _out1054);
                    _2554_recursiveGen = _out1051;
                    _2555_recOwned = _out1052;
                    _2556_recErased = _out1053;
                    _2557_recIdents = _out1054;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2554_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2555_recOwned;
                    isErased = _2556_recErased;
                    readIdents = _2557_recIdents;
                  }
                }
              } else if (_source137.is_Real) {
                DAST._IType _source141 = _1552___mcc_h306;
                if (_source141.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2558___mcc_h901 = _source141.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2559___mcc_h902 = _source141.dtor_typeArgs;
                  DAST._IResolvedType _2560___mcc_h903 = _source141.dtor_resolved;
                  DAST._IResolvedType _source142 = _2560___mcc_h903;
                  if (_source142.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2561___mcc_h907 = _source142.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2562_recursiveGen;
                      bool _2563_recOwned;
                      bool _2564_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2565_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1055;
                      bool _out1056;
                      bool _out1057;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1058;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1055, out _out1056, out _out1057, out _out1058);
                      _2562_recursiveGen = _out1055;
                      _2563_recOwned = _out1056;
                      _2564_recErased = _out1057;
                      _2565_recIdents = _out1058;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2562_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2563_recOwned;
                      isErased = _2564_recErased;
                      readIdents = _2565_recIdents;
                    }
                  } else if (_source142.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2566___mcc_h909 = _source142.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2567_recursiveGen;
                      bool _2568_recOwned;
                      bool _2569_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2570_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1059;
                      bool _out1060;
                      bool _out1061;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1062;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1059, out _out1060, out _out1061, out _out1062);
                      _2567_recursiveGen = _out1059;
                      _2568_recOwned = _out1060;
                      _2569_recErased = _out1061;
                      _2570_recIdents = _out1062;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2567_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2568_recOwned;
                      isErased = _2569_recErased;
                      readIdents = _2570_recIdents;
                    }
                  } else {
                    DAST._IType _2571___mcc_h911 = _source142.dtor_Newtype_a0;
                    DAST._IType _2572_b = _2571___mcc_h911;
                    {
                      if (object.Equals(_1545_fromTpe, _2572_b)) {
                        Dafny.ISequence<Dafny.Rune> _2573_recursiveGen;
                        bool _2574_recOwned;
                        bool _2575_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2576_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1063;
                        bool _out1064;
                        bool _out1065;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1066;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1063, out _out1064, out _out1065, out _out1066);
                        _2573_recursiveGen = _out1063;
                        _2574_recOwned = _out1064;
                        _2575_recErased = _out1065;
                        _2576_recIdents = _out1066;
                        Dafny.ISequence<Dafny.Rune> _2577_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1067;
                        _out1067 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                        _2577_rhsType = _out1067;
                        Dafny.ISequence<Dafny.Rune> _2578_uneraseFn;
                        _2578_uneraseFn = ((_2574_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2577_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2578_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2573_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2574_recOwned;
                        isErased = false;
                        readIdents = _2576_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1068;
                        bool _out1069;
                        bool _out1070;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2572_b), _2572_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                        s = _out1068;
                        isOwned = _out1069;
                        isErased = _out1070;
                        readIdents = _out1071;
                      }
                    }
                  }
                } else if (_source141.is_Nullable) {
                  DAST._IType _2579___mcc_h913 = _source141.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2580_recursiveGen;
                    bool _2581_recOwned;
                    bool _2582_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2583_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1072;
                    bool _out1073;
                    bool _out1074;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                    _2580_recursiveGen = _out1072;
                    _2581_recOwned = _out1073;
                    _2582_recErased = _out1074;
                    _2583_recIdents = _out1075;
                    if (!(_2581_recOwned)) {
                      _2580_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2580_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2580_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2582_recErased;
                    readIdents = _2583_recIdents;
                  }
                } else if (_source141.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2584___mcc_h915 = _source141.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2585_recursiveGen;
                    bool _2586_recOwned;
                    bool _2587_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2588_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1076;
                    bool _out1077;
                    bool _out1078;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                    _2585_recursiveGen = _out1076;
                    _2586_recOwned = _out1077;
                    _2587_recErased = _out1078;
                    _2588_recIdents = _out1079;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2585_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2586_recOwned;
                    isErased = _2587_recErased;
                    readIdents = _2588_recIdents;
                  }
                } else if (_source141.is_Array) {
                  DAST._IType _2589___mcc_h917 = _source141.dtor_element;
                  BigInteger _2590___mcc_h918 = _source141.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2591_recursiveGen;
                    bool _2592_recOwned;
                    bool _2593_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2594_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1080;
                    bool _out1081;
                    bool _out1082;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1080, out _out1081, out _out1082, out _out1083);
                    _2591_recursiveGen = _out1080;
                    _2592_recOwned = _out1081;
                    _2593_recErased = _out1082;
                    _2594_recIdents = _out1083;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2591_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2592_recOwned;
                    isErased = _2593_recErased;
                    readIdents = _2594_recIdents;
                  }
                } else if (_source141.is_Seq) {
                  DAST._IType _2595___mcc_h921 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2596_recursiveGen;
                    bool _2597_recOwned;
                    bool _2598_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2599_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1084;
                    bool _out1085;
                    bool _out1086;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1084, out _out1085, out _out1086, out _out1087);
                    _2596_recursiveGen = _out1084;
                    _2597_recOwned = _out1085;
                    _2598_recErased = _out1086;
                    _2599_recIdents = _out1087;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2596_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2597_recOwned;
                    isErased = _2598_recErased;
                    readIdents = _2599_recIdents;
                  }
                } else if (_source141.is_Set) {
                  DAST._IType _2600___mcc_h923 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2601_recursiveGen;
                    bool _2602_recOwned;
                    bool _2603_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2604_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1088;
                    bool _out1089;
                    bool _out1090;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1091;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1088, out _out1089, out _out1090, out _out1091);
                    _2601_recursiveGen = _out1088;
                    _2602_recOwned = _out1089;
                    _2603_recErased = _out1090;
                    _2604_recIdents = _out1091;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2601_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2602_recOwned;
                    isErased = _2603_recErased;
                    readIdents = _2604_recIdents;
                  }
                } else if (_source141.is_Multiset) {
                  DAST._IType _2605___mcc_h925 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2606_recursiveGen;
                    bool _2607_recOwned;
                    bool _2608_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2609_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1092;
                    bool _out1093;
                    bool _out1094;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1092, out _out1093, out _out1094, out _out1095);
                    _2606_recursiveGen = _out1092;
                    _2607_recOwned = _out1093;
                    _2608_recErased = _out1094;
                    _2609_recIdents = _out1095;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2606_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2607_recOwned;
                    isErased = _2608_recErased;
                    readIdents = _2609_recIdents;
                  }
                } else if (_source141.is_Map) {
                  DAST._IType _2610___mcc_h927 = _source141.dtor_key;
                  DAST._IType _2611___mcc_h928 = _source141.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2612_recursiveGen;
                    bool _2613_recOwned;
                    bool _2614_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2615_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1096;
                    bool _out1097;
                    bool _out1098;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1099;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1096, out _out1097, out _out1098, out _out1099);
                    _2612_recursiveGen = _out1096;
                    _2613_recOwned = _out1097;
                    _2614_recErased = _out1098;
                    _2615_recIdents = _out1099;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2612_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2613_recOwned;
                    isErased = _2614_recErased;
                    readIdents = _2615_recIdents;
                  }
                } else if (_source141.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2616___mcc_h931 = _source141.dtor_args;
                  DAST._IType _2617___mcc_h932 = _source141.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2618_recursiveGen;
                    bool _2619_recOwned;
                    bool _2620_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2621_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1100;
                    bool _out1101;
                    bool _out1102;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1103;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1100, out _out1101, out _out1102, out _out1103);
                    _2618_recursiveGen = _out1100;
                    _2619_recOwned = _out1101;
                    _2620_recErased = _out1102;
                    _2621_recIdents = _out1103;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2618_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2619_recOwned;
                    isErased = _2620_recErased;
                    readIdents = _2621_recIdents;
                  }
                } else if (_source141.is_Primitive) {
                  DAST._IPrimitive _2622___mcc_h935 = _source141.dtor_Primitive_a0;
                  DAST._IPrimitive _source143 = _2622___mcc_h935;
                  if (_source143.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2623_recursiveGen;
                      bool _2624___v48;
                      bool _2625___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2626_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1104;
                      bool _out1105;
                      bool _out1106;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1107;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, false, out _out1104, out _out1105, out _out1106, out _out1107);
                      _2623_recursiveGen = _out1104;
                      _2624___v48 = _out1105;
                      _2625___v49 = _out1106;
                      _2626_recIdents = _out1107;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2623_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2626_recIdents;
                    }
                  } else if (_source143.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2627_recursiveGen;
                      bool _2628_recOwned;
                      bool _2629_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2630_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1108;
                      bool _out1109;
                      bool _out1110;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1111;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1108, out _out1109, out _out1110, out _out1111);
                      _2627_recursiveGen = _out1108;
                      _2628_recOwned = _out1109;
                      _2629_recErased = _out1110;
                      _2630_recIdents = _out1111;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2627_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2628_recOwned;
                      isErased = _2629_recErased;
                      readIdents = _2630_recIdents;
                    }
                  } else if (_source143.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2631_recursiveGen;
                      bool _2632_recOwned;
                      bool _2633_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2634_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1112;
                      bool _out1113;
                      bool _out1114;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1115;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1112, out _out1113, out _out1114, out _out1115);
                      _2631_recursiveGen = _out1112;
                      _2632_recOwned = _out1113;
                      _2633_recErased = _out1114;
                      _2634_recIdents = _out1115;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2631_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2632_recOwned;
                      isErased = _2633_recErased;
                      readIdents = _2634_recIdents;
                    }
                  } else if (_source143.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2635_recursiveGen;
                      bool _2636_recOwned;
                      bool _2637_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2638_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1116;
                      bool _out1117;
                      bool _out1118;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1119;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1116, out _out1117, out _out1118, out _out1119);
                      _2635_recursiveGen = _out1116;
                      _2636_recOwned = _out1117;
                      _2637_recErased = _out1118;
                      _2638_recIdents = _out1119;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2636_recOwned;
                      isErased = _2637_recErased;
                      readIdents = _2638_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2639_recursiveGen;
                      bool _2640_recOwned;
                      bool _2641_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2642_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1120;
                      bool _out1121;
                      bool _out1122;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1123;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1120, out _out1121, out _out1122, out _out1123);
                      _2639_recursiveGen = _out1120;
                      _2640_recOwned = _out1121;
                      _2641_recErased = _out1122;
                      _2642_recIdents = _out1123;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2639_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2640_recOwned;
                      isErased = _2641_recErased;
                      readIdents = _2642_recIdents;
                    }
                  }
                } else if (_source141.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2643___mcc_h937 = _source141.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2644_recursiveGen;
                    bool _2645_recOwned;
                    bool _2646_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2647_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1124;
                    bool _out1125;
                    bool _out1126;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1127;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1124, out _out1125, out _out1126, out _out1127);
                    _2644_recursiveGen = _out1124;
                    _2645_recOwned = _out1125;
                    _2646_recErased = _out1126;
                    _2647_recIdents = _out1127;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2644_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2645_recOwned;
                    isErased = _2646_recErased;
                    readIdents = _2647_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2648___mcc_h939 = _source141.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2649_recursiveGen;
                    bool _2650_recOwned;
                    bool _2651_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2652_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1128;
                    bool _out1129;
                    bool _out1130;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1131;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1128, out _out1129, out _out1130, out _out1131);
                    _2649_recursiveGen = _out1128;
                    _2650_recOwned = _out1129;
                    _2651_recErased = _out1130;
                    _2652_recIdents = _out1131;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2649_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2650_recOwned;
                    isErased = _2651_recErased;
                    readIdents = _2652_recIdents;
                  }
                }
              } else if (_source137.is_String) {
                DAST._IType _source144 = _1552___mcc_h306;
                if (_source144.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2653___mcc_h941 = _source144.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2654___mcc_h942 = _source144.dtor_typeArgs;
                  DAST._IResolvedType _2655___mcc_h943 = _source144.dtor_resolved;
                  DAST._IResolvedType _source145 = _2655___mcc_h943;
                  if (_source145.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2656___mcc_h947 = _source145.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2657_recursiveGen;
                      bool _2658_recOwned;
                      bool _2659_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2660_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1132;
                      bool _out1133;
                      bool _out1134;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1135;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1132, out _out1133, out _out1134, out _out1135);
                      _2657_recursiveGen = _out1132;
                      _2658_recOwned = _out1133;
                      _2659_recErased = _out1134;
                      _2660_recIdents = _out1135;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2657_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2658_recOwned;
                      isErased = _2659_recErased;
                      readIdents = _2660_recIdents;
                    }
                  } else if (_source145.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2661___mcc_h949 = _source145.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2662_recursiveGen;
                      bool _2663_recOwned;
                      bool _2664_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2665_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1136;
                      bool _out1137;
                      bool _out1138;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1139;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1136, out _out1137, out _out1138, out _out1139);
                      _2662_recursiveGen = _out1136;
                      _2663_recOwned = _out1137;
                      _2664_recErased = _out1138;
                      _2665_recIdents = _out1139;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2662_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2663_recOwned;
                      isErased = _2664_recErased;
                      readIdents = _2665_recIdents;
                    }
                  } else {
                    DAST._IType _2666___mcc_h951 = _source145.dtor_Newtype_a0;
                    DAST._IType _2667_b = _2666___mcc_h951;
                    {
                      if (object.Equals(_1545_fromTpe, _2667_b)) {
                        Dafny.ISequence<Dafny.Rune> _2668_recursiveGen;
                        bool _2669_recOwned;
                        bool _2670_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2671_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1140;
                        bool _out1141;
                        bool _out1142;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1143;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1140, out _out1141, out _out1142, out _out1143);
                        _2668_recursiveGen = _out1140;
                        _2669_recOwned = _out1141;
                        _2670_recErased = _out1142;
                        _2671_recIdents = _out1143;
                        Dafny.ISequence<Dafny.Rune> _2672_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1144;
                        _out1144 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                        _2672_rhsType = _out1144;
                        Dafny.ISequence<Dafny.Rune> _2673_uneraseFn;
                        _2673_uneraseFn = ((_2669_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2672_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2673_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2668_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2669_recOwned;
                        isErased = false;
                        readIdents = _2671_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1145;
                        bool _out1146;
                        bool _out1147;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2667_b), _2667_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                        s = _out1145;
                        isOwned = _out1146;
                        isErased = _out1147;
                        readIdents = _out1148;
                      }
                    }
                  }
                } else if (_source144.is_Nullable) {
                  DAST._IType _2674___mcc_h953 = _source144.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2675_recursiveGen;
                    bool _2676_recOwned;
                    bool _2677_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2678_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1149;
                    bool _out1150;
                    bool _out1151;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1152;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1149, out _out1150, out _out1151, out _out1152);
                    _2675_recursiveGen = _out1149;
                    _2676_recOwned = _out1150;
                    _2677_recErased = _out1151;
                    _2678_recIdents = _out1152;
                    if (!(_2676_recOwned)) {
                      _2675_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2675_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2675_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2677_recErased;
                    readIdents = _2678_recIdents;
                  }
                } else if (_source144.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2679___mcc_h955 = _source144.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2680_recursiveGen;
                    bool _2681_recOwned;
                    bool _2682_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2683_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1153;
                    bool _out1154;
                    bool _out1155;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1153, out _out1154, out _out1155, out _out1156);
                    _2680_recursiveGen = _out1153;
                    _2681_recOwned = _out1154;
                    _2682_recErased = _out1155;
                    _2683_recIdents = _out1156;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2680_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2681_recOwned;
                    isErased = _2682_recErased;
                    readIdents = _2683_recIdents;
                  }
                } else if (_source144.is_Array) {
                  DAST._IType _2684___mcc_h957 = _source144.dtor_element;
                  BigInteger _2685___mcc_h958 = _source144.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2686_recursiveGen;
                    bool _2687_recOwned;
                    bool _2688_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2689_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1157;
                    bool _out1158;
                    bool _out1159;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1160;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1157, out _out1158, out _out1159, out _out1160);
                    _2686_recursiveGen = _out1157;
                    _2687_recOwned = _out1158;
                    _2688_recErased = _out1159;
                    _2689_recIdents = _out1160;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2687_recOwned;
                    isErased = _2688_recErased;
                    readIdents = _2689_recIdents;
                  }
                } else if (_source144.is_Seq) {
                  DAST._IType _2690___mcc_h961 = _source144.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2691_recursiveGen;
                    bool _2692_recOwned;
                    bool _2693_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2694_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1161;
                    bool _out1162;
                    bool _out1163;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1164;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1161, out _out1162, out _out1163, out _out1164);
                    _2691_recursiveGen = _out1161;
                    _2692_recOwned = _out1162;
                    _2693_recErased = _out1163;
                    _2694_recIdents = _out1164;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2692_recOwned;
                    isErased = _2693_recErased;
                    readIdents = _2694_recIdents;
                  }
                } else if (_source144.is_Set) {
                  DAST._IType _2695___mcc_h963 = _source144.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2696_recursiveGen;
                    bool _2697_recOwned;
                    bool _2698_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2699_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1165;
                    bool _out1166;
                    bool _out1167;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1168;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1165, out _out1166, out _out1167, out _out1168);
                    _2696_recursiveGen = _out1165;
                    _2697_recOwned = _out1166;
                    _2698_recErased = _out1167;
                    _2699_recIdents = _out1168;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2696_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2697_recOwned;
                    isErased = _2698_recErased;
                    readIdents = _2699_recIdents;
                  }
                } else if (_source144.is_Multiset) {
                  DAST._IType _2700___mcc_h965 = _source144.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2701_recursiveGen;
                    bool _2702_recOwned;
                    bool _2703_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2704_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1169;
                    bool _out1170;
                    bool _out1171;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1172;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1169, out _out1170, out _out1171, out _out1172);
                    _2701_recursiveGen = _out1169;
                    _2702_recOwned = _out1170;
                    _2703_recErased = _out1171;
                    _2704_recIdents = _out1172;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2701_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2702_recOwned;
                    isErased = _2703_recErased;
                    readIdents = _2704_recIdents;
                  }
                } else if (_source144.is_Map) {
                  DAST._IType _2705___mcc_h967 = _source144.dtor_key;
                  DAST._IType _2706___mcc_h968 = _source144.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2707_recursiveGen;
                    bool _2708_recOwned;
                    bool _2709_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2710_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1173;
                    bool _out1174;
                    bool _out1175;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1173, out _out1174, out _out1175, out _out1176);
                    _2707_recursiveGen = _out1173;
                    _2708_recOwned = _out1174;
                    _2709_recErased = _out1175;
                    _2710_recIdents = _out1176;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2707_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2708_recOwned;
                    isErased = _2709_recErased;
                    readIdents = _2710_recIdents;
                  }
                } else if (_source144.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2711___mcc_h971 = _source144.dtor_args;
                  DAST._IType _2712___mcc_h972 = _source144.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2713_recursiveGen;
                    bool _2714_recOwned;
                    bool _2715_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2716_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1177;
                    bool _out1178;
                    bool _out1179;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1180;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1177, out _out1178, out _out1179, out _out1180);
                    _2713_recursiveGen = _out1177;
                    _2714_recOwned = _out1178;
                    _2715_recErased = _out1179;
                    _2716_recIdents = _out1180;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2713_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2714_recOwned;
                    isErased = _2715_recErased;
                    readIdents = _2716_recIdents;
                  }
                } else if (_source144.is_Primitive) {
                  DAST._IPrimitive _2717___mcc_h975 = _source144.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2718_recursiveGen;
                    bool _2719_recOwned;
                    bool _2720_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2721_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1181;
                    bool _out1182;
                    bool _out1183;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1184;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1181, out _out1182, out _out1183, out _out1184);
                    _2718_recursiveGen = _out1181;
                    _2719_recOwned = _out1182;
                    _2720_recErased = _out1183;
                    _2721_recIdents = _out1184;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2718_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2719_recOwned;
                    isErased = _2720_recErased;
                    readIdents = _2721_recIdents;
                  }
                } else if (_source144.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2722___mcc_h977 = _source144.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2723_recursiveGen;
                    bool _2724_recOwned;
                    bool _2725_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2726_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1185;
                    bool _out1186;
                    bool _out1187;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1188;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1185, out _out1186, out _out1187, out _out1188);
                    _2723_recursiveGen = _out1185;
                    _2724_recOwned = _out1186;
                    _2725_recErased = _out1187;
                    _2726_recIdents = _out1188;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2723_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2724_recOwned;
                    isErased = _2725_recErased;
                    readIdents = _2726_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2727___mcc_h979 = _source144.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2728_recursiveGen;
                    bool _2729_recOwned;
                    bool _2730_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2731_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1189;
                    bool _out1190;
                    bool _out1191;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1192;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1189, out _out1190, out _out1191, out _out1192);
                    _2728_recursiveGen = _out1189;
                    _2729_recOwned = _out1190;
                    _2730_recErased = _out1191;
                    _2731_recIdents = _out1192;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2728_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2729_recOwned;
                    isErased = _2730_recErased;
                    readIdents = _2731_recIdents;
                  }
                }
              } else if (_source137.is_Bool) {
                DAST._IType _source146 = _1552___mcc_h306;
                if (_source146.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2732___mcc_h981 = _source146.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2733___mcc_h982 = _source146.dtor_typeArgs;
                  DAST._IResolvedType _2734___mcc_h983 = _source146.dtor_resolved;
                  DAST._IResolvedType _source147 = _2734___mcc_h983;
                  if (_source147.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2735___mcc_h987 = _source147.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2736_recursiveGen;
                      bool _2737_recOwned;
                      bool _2738_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2739_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1193;
                      bool _out1194;
                      bool _out1195;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1193, out _out1194, out _out1195, out _out1196);
                      _2736_recursiveGen = _out1193;
                      _2737_recOwned = _out1194;
                      _2738_recErased = _out1195;
                      _2739_recIdents = _out1196;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2737_recOwned;
                      isErased = _2738_recErased;
                      readIdents = _2739_recIdents;
                    }
                  } else if (_source147.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2740___mcc_h989 = _source147.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2741_recursiveGen;
                      bool _2742_recOwned;
                      bool _2743_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2744_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1197;
                      bool _out1198;
                      bool _out1199;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1200;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1197, out _out1198, out _out1199, out _out1200);
                      _2741_recursiveGen = _out1197;
                      _2742_recOwned = _out1198;
                      _2743_recErased = _out1199;
                      _2744_recIdents = _out1200;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2741_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2742_recOwned;
                      isErased = _2743_recErased;
                      readIdents = _2744_recIdents;
                    }
                  } else {
                    DAST._IType _2745___mcc_h991 = _source147.dtor_Newtype_a0;
                    DAST._IType _2746_b = _2745___mcc_h991;
                    {
                      if (object.Equals(_1545_fromTpe, _2746_b)) {
                        Dafny.ISequence<Dafny.Rune> _2747_recursiveGen;
                        bool _2748_recOwned;
                        bool _2749_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2750_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1201;
                        bool _out1202;
                        bool _out1203;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1204;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1201, out _out1202, out _out1203, out _out1204);
                        _2747_recursiveGen = _out1201;
                        _2748_recOwned = _out1202;
                        _2749_recErased = _out1203;
                        _2750_recIdents = _out1204;
                        Dafny.ISequence<Dafny.Rune> _2751_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1205;
                        _out1205 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                        _2751_rhsType = _out1205;
                        Dafny.ISequence<Dafny.Rune> _2752_uneraseFn;
                        _2752_uneraseFn = ((_2748_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2751_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2752_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2747_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2748_recOwned;
                        isErased = false;
                        readIdents = _2750_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1206;
                        bool _out1207;
                        bool _out1208;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2746_b), _2746_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                        s = _out1206;
                        isOwned = _out1207;
                        isErased = _out1208;
                        readIdents = _out1209;
                      }
                    }
                  }
                } else if (_source146.is_Nullable) {
                  DAST._IType _2753___mcc_h993 = _source146.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2754_recursiveGen;
                    bool _2755_recOwned;
                    bool _2756_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2757_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1210;
                    bool _out1211;
                    bool _out1212;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1213;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1210, out _out1211, out _out1212, out _out1213);
                    _2754_recursiveGen = _out1210;
                    _2755_recOwned = _out1211;
                    _2756_recErased = _out1212;
                    _2757_recIdents = _out1213;
                    if (!(_2755_recOwned)) {
                      _2754_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2754_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2754_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2756_recErased;
                    readIdents = _2757_recIdents;
                  }
                } else if (_source146.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2758___mcc_h995 = _source146.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2759_recursiveGen;
                    bool _2760_recOwned;
                    bool _2761_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2762_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1214;
                    bool _out1215;
                    bool _out1216;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1214, out _out1215, out _out1216, out _out1217);
                    _2759_recursiveGen = _out1214;
                    _2760_recOwned = _out1215;
                    _2761_recErased = _out1216;
                    _2762_recIdents = _out1217;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2759_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2760_recOwned;
                    isErased = _2761_recErased;
                    readIdents = _2762_recIdents;
                  }
                } else if (_source146.is_Array) {
                  DAST._IType _2763___mcc_h997 = _source146.dtor_element;
                  BigInteger _2764___mcc_h998 = _source146.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2765_recursiveGen;
                    bool _2766_recOwned;
                    bool _2767_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2768_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1218;
                    bool _out1219;
                    bool _out1220;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1221;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1218, out _out1219, out _out1220, out _out1221);
                    _2765_recursiveGen = _out1218;
                    _2766_recOwned = _out1219;
                    _2767_recErased = _out1220;
                    _2768_recIdents = _out1221;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2765_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2766_recOwned;
                    isErased = _2767_recErased;
                    readIdents = _2768_recIdents;
                  }
                } else if (_source146.is_Seq) {
                  DAST._IType _2769___mcc_h1001 = _source146.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2770_recursiveGen;
                    bool _2771_recOwned;
                    bool _2772_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2773_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1222;
                    bool _out1223;
                    bool _out1224;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1225;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1222, out _out1223, out _out1224, out _out1225);
                    _2770_recursiveGen = _out1222;
                    _2771_recOwned = _out1223;
                    _2772_recErased = _out1224;
                    _2773_recIdents = _out1225;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2770_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2771_recOwned;
                    isErased = _2772_recErased;
                    readIdents = _2773_recIdents;
                  }
                } else if (_source146.is_Set) {
                  DAST._IType _2774___mcc_h1003 = _source146.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2775_recursiveGen;
                    bool _2776_recOwned;
                    bool _2777_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2778_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1226;
                    bool _out1227;
                    bool _out1228;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1226, out _out1227, out _out1228, out _out1229);
                    _2775_recursiveGen = _out1226;
                    _2776_recOwned = _out1227;
                    _2777_recErased = _out1228;
                    _2778_recIdents = _out1229;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2775_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2776_recOwned;
                    isErased = _2777_recErased;
                    readIdents = _2778_recIdents;
                  }
                } else if (_source146.is_Multiset) {
                  DAST._IType _2779___mcc_h1005 = _source146.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2780_recursiveGen;
                    bool _2781_recOwned;
                    bool _2782_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2783_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1230;
                    bool _out1231;
                    bool _out1232;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1233;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1230, out _out1231, out _out1232, out _out1233);
                    _2780_recursiveGen = _out1230;
                    _2781_recOwned = _out1231;
                    _2782_recErased = _out1232;
                    _2783_recIdents = _out1233;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2780_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2781_recOwned;
                    isErased = _2782_recErased;
                    readIdents = _2783_recIdents;
                  }
                } else if (_source146.is_Map) {
                  DAST._IType _2784___mcc_h1007 = _source146.dtor_key;
                  DAST._IType _2785___mcc_h1008 = _source146.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2786_recursiveGen;
                    bool _2787_recOwned;
                    bool _2788_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2789_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1234;
                    bool _out1235;
                    bool _out1236;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1234, out _out1235, out _out1236, out _out1237);
                    _2786_recursiveGen = _out1234;
                    _2787_recOwned = _out1235;
                    _2788_recErased = _out1236;
                    _2789_recIdents = _out1237;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2787_recOwned;
                    isErased = _2788_recErased;
                    readIdents = _2789_recIdents;
                  }
                } else if (_source146.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2790___mcc_h1011 = _source146.dtor_args;
                  DAST._IType _2791___mcc_h1012 = _source146.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2792_recursiveGen;
                    bool _2793_recOwned;
                    bool _2794_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2795_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1238;
                    bool _out1239;
                    bool _out1240;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1241;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1238, out _out1239, out _out1240, out _out1241);
                    _2792_recursiveGen = _out1238;
                    _2793_recOwned = _out1239;
                    _2794_recErased = _out1240;
                    _2795_recIdents = _out1241;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2792_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2793_recOwned;
                    isErased = _2794_recErased;
                    readIdents = _2795_recIdents;
                  }
                } else if (_source146.is_Primitive) {
                  DAST._IPrimitive _2796___mcc_h1015 = _source146.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2797_recursiveGen;
                    bool _2798_recOwned;
                    bool _2799_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2800_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1242;
                    bool _out1243;
                    bool _out1244;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1245;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1242, out _out1243, out _out1244, out _out1245);
                    _2797_recursiveGen = _out1242;
                    _2798_recOwned = _out1243;
                    _2799_recErased = _out1244;
                    _2800_recIdents = _out1245;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2797_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2798_recOwned;
                    isErased = _2799_recErased;
                    readIdents = _2800_recIdents;
                  }
                } else if (_source146.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2801___mcc_h1017 = _source146.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2802_recursiveGen;
                    bool _2803_recOwned;
                    bool _2804_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2805_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1246;
                    bool _out1247;
                    bool _out1248;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1249;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1246, out _out1247, out _out1248, out _out1249);
                    _2802_recursiveGen = _out1246;
                    _2803_recOwned = _out1247;
                    _2804_recErased = _out1248;
                    _2805_recIdents = _out1249;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2802_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2803_recOwned;
                    isErased = _2804_recErased;
                    readIdents = _2805_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2806___mcc_h1019 = _source146.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2807_recursiveGen;
                    bool _2808_recOwned;
                    bool _2809_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2810_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1250;
                    bool _out1251;
                    bool _out1252;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1253;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1250, out _out1251, out _out1252, out _out1253);
                    _2807_recursiveGen = _out1250;
                    _2808_recOwned = _out1251;
                    _2809_recErased = _out1252;
                    _2810_recIdents = _out1253;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2807_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2808_recOwned;
                    isErased = _2809_recErased;
                    readIdents = _2810_recIdents;
                  }
                }
              } else {
                DAST._IType _source148 = _1552___mcc_h306;
                if (_source148.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2811___mcc_h1021 = _source148.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2812___mcc_h1022 = _source148.dtor_typeArgs;
                  DAST._IResolvedType _2813___mcc_h1023 = _source148.dtor_resolved;
                  DAST._IResolvedType _source149 = _2813___mcc_h1023;
                  if (_source149.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2814___mcc_h1027 = _source149.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2815_recursiveGen;
                      bool _2816_recOwned;
                      bool _2817_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2818_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1254;
                      bool _out1255;
                      bool _out1256;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1254, out _out1255, out _out1256, out _out1257);
                      _2815_recursiveGen = _out1254;
                      _2816_recOwned = _out1255;
                      _2817_recErased = _out1256;
                      _2818_recIdents = _out1257;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2815_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2816_recOwned;
                      isErased = _2817_recErased;
                      readIdents = _2818_recIdents;
                    }
                  } else if (_source149.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2819___mcc_h1029 = _source149.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2820_recursiveGen;
                      bool _2821_recOwned;
                      bool _2822_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2823_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1258;
                      bool _out1259;
                      bool _out1260;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1261;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1258, out _out1259, out _out1260, out _out1261);
                      _2820_recursiveGen = _out1258;
                      _2821_recOwned = _out1259;
                      _2822_recErased = _out1260;
                      _2823_recIdents = _out1261;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2820_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2821_recOwned;
                      isErased = _2822_recErased;
                      readIdents = _2823_recIdents;
                    }
                  } else {
                    DAST._IType _2824___mcc_h1031 = _source149.dtor_Newtype_a0;
                    DAST._IType _2825_b = _2824___mcc_h1031;
                    {
                      if (object.Equals(_1545_fromTpe, _2825_b)) {
                        Dafny.ISequence<Dafny.Rune> _2826_recursiveGen;
                        bool _2827_recOwned;
                        bool _2828_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2829_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1262;
                        bool _out1263;
                        bool _out1264;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1265;
                        DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1262, out _out1263, out _out1264, out _out1265);
                        _2826_recursiveGen = _out1262;
                        _2827_recOwned = _out1263;
                        _2828_recErased = _out1264;
                        _2829_recIdents = _out1265;
                        Dafny.ISequence<Dafny.Rune> _2830_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1266;
                        _out1266 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                        _2830_rhsType = _out1266;
                        Dafny.ISequence<Dafny.Rune> _2831_uneraseFn;
                        _2831_uneraseFn = ((_2827_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2830_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2831_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2826_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2827_recOwned;
                        isErased = false;
                        readIdents = _2829_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1267;
                        bool _out1268;
                        bool _out1269;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1270;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2825_b), _2825_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out1267, out _out1268, out _out1269, out _out1270);
                        s = _out1267;
                        isOwned = _out1268;
                        isErased = _out1269;
                        readIdents = _out1270;
                      }
                    }
                  }
                } else if (_source148.is_Nullable) {
                  DAST._IType _2832___mcc_h1033 = _source148.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2833_recursiveGen;
                    bool _2834_recOwned;
                    bool _2835_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2836_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1271;
                    bool _out1272;
                    bool _out1273;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1274;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1271, out _out1272, out _out1273, out _out1274);
                    _2833_recursiveGen = _out1271;
                    _2834_recOwned = _out1272;
                    _2835_recErased = _out1273;
                    _2836_recIdents = _out1274;
                    if (!(_2834_recOwned)) {
                      _2833_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2833_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2833_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2835_recErased;
                    readIdents = _2836_recIdents;
                  }
                } else if (_source148.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2837___mcc_h1035 = _source148.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2838_recursiveGen;
                    bool _2839_recOwned;
                    bool _2840_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2841_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1275;
                    bool _out1276;
                    bool _out1277;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1278;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1275, out _out1276, out _out1277, out _out1278);
                    _2838_recursiveGen = _out1275;
                    _2839_recOwned = _out1276;
                    _2840_recErased = _out1277;
                    _2841_recIdents = _out1278;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2838_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2839_recOwned;
                    isErased = _2840_recErased;
                    readIdents = _2841_recIdents;
                  }
                } else if (_source148.is_Array) {
                  DAST._IType _2842___mcc_h1037 = _source148.dtor_element;
                  BigInteger _2843___mcc_h1038 = _source148.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2844_recursiveGen;
                    bool _2845_recOwned;
                    bool _2846_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2847_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1279;
                    bool _out1280;
                    bool _out1281;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1282;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1279, out _out1280, out _out1281, out _out1282);
                    _2844_recursiveGen = _out1279;
                    _2845_recOwned = _out1280;
                    _2846_recErased = _out1281;
                    _2847_recIdents = _out1282;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2844_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2845_recOwned;
                    isErased = _2846_recErased;
                    readIdents = _2847_recIdents;
                  }
                } else if (_source148.is_Seq) {
                  DAST._IType _2848___mcc_h1041 = _source148.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2849_recursiveGen;
                    bool _2850_recOwned;
                    bool _2851_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2852_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1283;
                    bool _out1284;
                    bool _out1285;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1286;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1283, out _out1284, out _out1285, out _out1286);
                    _2849_recursiveGen = _out1283;
                    _2850_recOwned = _out1284;
                    _2851_recErased = _out1285;
                    _2852_recIdents = _out1286;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2849_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2850_recOwned;
                    isErased = _2851_recErased;
                    readIdents = _2852_recIdents;
                  }
                } else if (_source148.is_Set) {
                  DAST._IType _2853___mcc_h1043 = _source148.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2854_recursiveGen;
                    bool _2855_recOwned;
                    bool _2856_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2857_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1287;
                    bool _out1288;
                    bool _out1289;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1290;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1287, out _out1288, out _out1289, out _out1290);
                    _2854_recursiveGen = _out1287;
                    _2855_recOwned = _out1288;
                    _2856_recErased = _out1289;
                    _2857_recIdents = _out1290;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2854_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2855_recOwned;
                    isErased = _2856_recErased;
                    readIdents = _2857_recIdents;
                  }
                } else if (_source148.is_Multiset) {
                  DAST._IType _2858___mcc_h1045 = _source148.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2859_recursiveGen;
                    bool _2860_recOwned;
                    bool _2861_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2862_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1291;
                    bool _out1292;
                    bool _out1293;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1294;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1291, out _out1292, out _out1293, out _out1294);
                    _2859_recursiveGen = _out1291;
                    _2860_recOwned = _out1292;
                    _2861_recErased = _out1293;
                    _2862_recIdents = _out1294;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2859_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2860_recOwned;
                    isErased = _2861_recErased;
                    readIdents = _2862_recIdents;
                  }
                } else if (_source148.is_Map) {
                  DAST._IType _2863___mcc_h1047 = _source148.dtor_key;
                  DAST._IType _2864___mcc_h1048 = _source148.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2865_recursiveGen;
                    bool _2866_recOwned;
                    bool _2867_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2868_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1295;
                    bool _out1296;
                    bool _out1297;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1298;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1295, out _out1296, out _out1297, out _out1298);
                    _2865_recursiveGen = _out1295;
                    _2866_recOwned = _out1296;
                    _2867_recErased = _out1297;
                    _2868_recIdents = _out1298;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2865_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2866_recOwned;
                    isErased = _2867_recErased;
                    readIdents = _2868_recIdents;
                  }
                } else if (_source148.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2869___mcc_h1051 = _source148.dtor_args;
                  DAST._IType _2870___mcc_h1052 = _source148.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2871_recursiveGen;
                    bool _2872_recOwned;
                    bool _2873_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2874_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1299;
                    bool _out1300;
                    bool _out1301;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1299, out _out1300, out _out1301, out _out1302);
                    _2871_recursiveGen = _out1299;
                    _2872_recOwned = _out1300;
                    _2873_recErased = _out1301;
                    _2874_recIdents = _out1302;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2871_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2872_recOwned;
                    isErased = _2873_recErased;
                    readIdents = _2874_recIdents;
                  }
                } else if (_source148.is_Primitive) {
                  DAST._IPrimitive _2875___mcc_h1055 = _source148.dtor_Primitive_a0;
                  DAST._IPrimitive _source150 = _2875___mcc_h1055;
                  if (_source150.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2876_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1303;
                      _out1303 = DCOMP.COMP.GenType(_1545_fromTpe, true, false);
                      _2876_rhsType = _out1303;
                      Dafny.ISequence<Dafny.Rune> _2877_recursiveGen;
                      bool _2878___v58;
                      bool _2879___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2880_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1304;
                      bool _out1305;
                      bool _out1306;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1307;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, true, out _out1304, out _out1305, out _out1306, out _out1307);
                      _2877_recursiveGen = _out1304;
                      _2878___v58 = _out1305;
                      _2879___v59 = _out1306;
                      _2880_recIdents = _out1307;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2877_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2880_recIdents;
                    }
                  } else if (_source150.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2881_recursiveGen;
                      bool _2882_recOwned;
                      bool _2883_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2884_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1308;
                      bool _out1309;
                      bool _out1310;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1311;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1308, out _out1309, out _out1310, out _out1311);
                      _2881_recursiveGen = _out1308;
                      _2882_recOwned = _out1309;
                      _2883_recErased = _out1310;
                      _2884_recIdents = _out1311;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2881_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2882_recOwned;
                      isErased = _2883_recErased;
                      readIdents = _2884_recIdents;
                    }
                  } else if (_source150.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2885_recursiveGen;
                      bool _2886_recOwned;
                      bool _2887_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2888_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1312;
                      bool _out1313;
                      bool _out1314;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1315;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1312, out _out1313, out _out1314, out _out1315);
                      _2885_recursiveGen = _out1312;
                      _2886_recOwned = _out1313;
                      _2887_recErased = _out1314;
                      _2888_recIdents = _out1315;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2885_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2886_recOwned;
                      isErased = _2887_recErased;
                      readIdents = _2888_recIdents;
                    }
                  } else if (_source150.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2889_recursiveGen;
                      bool _2890_recOwned;
                      bool _2891_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2892_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1316;
                      bool _out1317;
                      bool _out1318;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1319;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1316, out _out1317, out _out1318, out _out1319);
                      _2889_recursiveGen = _out1316;
                      _2890_recOwned = _out1317;
                      _2891_recErased = _out1318;
                      _2892_recIdents = _out1319;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2889_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2890_recOwned;
                      isErased = _2891_recErased;
                      readIdents = _2892_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2893_recursiveGen;
                      bool _2894_recOwned;
                      bool _2895_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2896_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1320;
                      bool _out1321;
                      bool _out1322;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1323;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1320, out _out1321, out _out1322, out _out1323);
                      _2893_recursiveGen = _out1320;
                      _2894_recOwned = _out1321;
                      _2895_recErased = _out1322;
                      _2896_recIdents = _out1323;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2893_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2894_recOwned;
                      isErased = _2895_recErased;
                      readIdents = _2896_recIdents;
                    }
                  }
                } else if (_source148.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2897___mcc_h1057 = _source148.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2898_recursiveGen;
                    bool _2899_recOwned;
                    bool _2900_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2901_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1324;
                    bool _out1325;
                    bool _out1326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1327;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1324, out _out1325, out _out1326, out _out1327);
                    _2898_recursiveGen = _out1324;
                    _2899_recOwned = _out1325;
                    _2900_recErased = _out1326;
                    _2901_recIdents = _out1327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2898_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2899_recOwned;
                    isErased = _2900_recErased;
                    readIdents = _2901_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2902___mcc_h1059 = _source148.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2903_recursiveGen;
                    bool _2904_recOwned;
                    bool _2905_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2906_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1328;
                    bool _out1329;
                    bool _out1330;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1331;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1328, out _out1329, out _out1330, out _out1331);
                    _2903_recursiveGen = _out1328;
                    _2904_recOwned = _out1329;
                    _2905_recErased = _out1330;
                    _2906_recIdents = _out1331;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2903_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2904_recOwned;
                    isErased = _2905_recErased;
                    readIdents = _2906_recIdents;
                  }
                }
              }
            } else if (_source113.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2907___mcc_h1061 = _source113.dtor_Passthrough_a0;
              DAST._IType _source151 = _1552___mcc_h306;
              if (_source151.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2908___mcc_h1065 = _source151.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2909___mcc_h1066 = _source151.dtor_typeArgs;
                DAST._IResolvedType _2910___mcc_h1067 = _source151.dtor_resolved;
                DAST._IResolvedType _source152 = _2910___mcc_h1067;
                if (_source152.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2911___mcc_h1071 = _source152.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2912_recursiveGen;
                    bool _2913_recOwned;
                    bool _2914_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2915_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1332;
                    bool _out1333;
                    bool _out1334;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1335;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1332, out _out1333, out _out1334, out _out1335);
                    _2912_recursiveGen = _out1332;
                    _2913_recOwned = _out1333;
                    _2914_recErased = _out1334;
                    _2915_recIdents = _out1335;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2913_recOwned;
                    isErased = _2914_recErased;
                    readIdents = _2915_recIdents;
                  }
                } else if (_source152.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2916___mcc_h1073 = _source152.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2917_recursiveGen;
                    bool _2918_recOwned;
                    bool _2919_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2920_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1336;
                    bool _out1337;
                    bool _out1338;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1339;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1336, out _out1337, out _out1338, out _out1339);
                    _2917_recursiveGen = _out1336;
                    _2918_recOwned = _out1337;
                    _2919_recErased = _out1338;
                    _2920_recIdents = _out1339;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2917_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2918_recOwned;
                    isErased = _2919_recErased;
                    readIdents = _2920_recIdents;
                  }
                } else {
                  DAST._IType _2921___mcc_h1075 = _source152.dtor_Newtype_a0;
                  DAST._IType _2922_b = _2921___mcc_h1075;
                  {
                    if (object.Equals(_1545_fromTpe, _2922_b)) {
                      Dafny.ISequence<Dafny.Rune> _2923_recursiveGen;
                      bool _2924_recOwned;
                      bool _2925_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2926_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1340;
                      bool _out1341;
                      bool _out1342;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1340, out _out1341, out _out1342, out _out1343);
                      _2923_recursiveGen = _out1340;
                      _2924_recOwned = _out1341;
                      _2925_recErased = _out1342;
                      _2926_recIdents = _out1343;
                      Dafny.ISequence<Dafny.Rune> _2927_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1344;
                      _out1344 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _2927_rhsType = _out1344;
                      Dafny.ISequence<Dafny.Rune> _2928_uneraseFn;
                      _2928_uneraseFn = ((_2924_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2927_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2928_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2923_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2924_recOwned;
                      isErased = false;
                      readIdents = _2926_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1345;
                      bool _out1346;
                      bool _out1347;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _2922_b), _2922_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out1345, out _out1346, out _out1347, out _out1348);
                      s = _out1345;
                      isOwned = _out1346;
                      isErased = _out1347;
                      readIdents = _out1348;
                    }
                  }
                }
              } else if (_source151.is_Nullable) {
                DAST._IType _2929___mcc_h1077 = _source151.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2930_recursiveGen;
                  bool _2931_recOwned;
                  bool _2932_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2933_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1349;
                  bool _out1350;
                  bool _out1351;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1352;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1349, out _out1350, out _out1351, out _out1352);
                  _2930_recursiveGen = _out1349;
                  _2931_recOwned = _out1350;
                  _2932_recErased = _out1351;
                  _2933_recIdents = _out1352;
                  if (!(_2931_recOwned)) {
                    _2930_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2930_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2932_recErased;
                  readIdents = _2933_recIdents;
                }
              } else if (_source151.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2934___mcc_h1079 = _source151.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2935_recursiveGen;
                  bool _2936_recOwned;
                  bool _2937_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2938_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1353;
                  bool _out1354;
                  bool _out1355;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1356;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1353, out _out1354, out _out1355, out _out1356);
                  _2935_recursiveGen = _out1353;
                  _2936_recOwned = _out1354;
                  _2937_recErased = _out1355;
                  _2938_recIdents = _out1356;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2936_recOwned;
                  isErased = _2937_recErased;
                  readIdents = _2938_recIdents;
                }
              } else if (_source151.is_Array) {
                DAST._IType _2939___mcc_h1081 = _source151.dtor_element;
                BigInteger _2940___mcc_h1082 = _source151.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2941_recursiveGen;
                  bool _2942_recOwned;
                  bool _2943_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2944_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1357;
                  bool _out1358;
                  bool _out1359;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1360;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1357, out _out1358, out _out1359, out _out1360);
                  _2941_recursiveGen = _out1357;
                  _2942_recOwned = _out1358;
                  _2943_recErased = _out1359;
                  _2944_recIdents = _out1360;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2941_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2942_recOwned;
                  isErased = _2943_recErased;
                  readIdents = _2944_recIdents;
                }
              } else if (_source151.is_Seq) {
                DAST._IType _2945___mcc_h1085 = _source151.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2946_recursiveGen;
                  bool _2947_recOwned;
                  bool _2948_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2949_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1361;
                  bool _out1362;
                  bool _out1363;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1364;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1361, out _out1362, out _out1363, out _out1364);
                  _2946_recursiveGen = _out1361;
                  _2947_recOwned = _out1362;
                  _2948_recErased = _out1363;
                  _2949_recIdents = _out1364;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2947_recOwned;
                  isErased = _2948_recErased;
                  readIdents = _2949_recIdents;
                }
              } else if (_source151.is_Set) {
                DAST._IType _2950___mcc_h1087 = _source151.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2951_recursiveGen;
                  bool _2952_recOwned;
                  bool _2953_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2954_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1365;
                  bool _out1366;
                  bool _out1367;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1368;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1365, out _out1366, out _out1367, out _out1368);
                  _2951_recursiveGen = _out1365;
                  _2952_recOwned = _out1366;
                  _2953_recErased = _out1367;
                  _2954_recIdents = _out1368;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2952_recOwned;
                  isErased = _2953_recErased;
                  readIdents = _2954_recIdents;
                }
              } else if (_source151.is_Multiset) {
                DAST._IType _2955___mcc_h1089 = _source151.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2956_recursiveGen;
                  bool _2957_recOwned;
                  bool _2958_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2959_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1369;
                  bool _out1370;
                  bool _out1371;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1372;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1369, out _out1370, out _out1371, out _out1372);
                  _2956_recursiveGen = _out1369;
                  _2957_recOwned = _out1370;
                  _2958_recErased = _out1371;
                  _2959_recIdents = _out1372;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2957_recOwned;
                  isErased = _2958_recErased;
                  readIdents = _2959_recIdents;
                }
              } else if (_source151.is_Map) {
                DAST._IType _2960___mcc_h1091 = _source151.dtor_key;
                DAST._IType _2961___mcc_h1092 = _source151.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2962_recursiveGen;
                  bool _2963_recOwned;
                  bool _2964_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2965_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1373;
                  bool _out1374;
                  bool _out1375;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1376;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1373, out _out1374, out _out1375, out _out1376);
                  _2962_recursiveGen = _out1373;
                  _2963_recOwned = _out1374;
                  _2964_recErased = _out1375;
                  _2965_recIdents = _out1376;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2963_recOwned;
                  isErased = _2964_recErased;
                  readIdents = _2965_recIdents;
                }
              } else if (_source151.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2966___mcc_h1095 = _source151.dtor_args;
                DAST._IType _2967___mcc_h1096 = _source151.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2968_recursiveGen;
                  bool _2969_recOwned;
                  bool _2970_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2971_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1377;
                  bool _out1378;
                  bool _out1379;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1380;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1377, out _out1378, out _out1379, out _out1380);
                  _2968_recursiveGen = _out1377;
                  _2969_recOwned = _out1378;
                  _2970_recErased = _out1379;
                  _2971_recIdents = _out1380;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2968_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2969_recOwned;
                  isErased = _2970_recErased;
                  readIdents = _2971_recIdents;
                }
              } else if (_source151.is_Primitive) {
                DAST._IPrimitive _2972___mcc_h1099 = _source151.dtor_Primitive_a0;
                DAST._IPrimitive _source153 = _2972___mcc_h1099;
                if (_source153.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2973_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1381;
                    _out1381 = DCOMP.COMP.GenType(_1545_fromTpe, true, false);
                    _2973_rhsType = _out1381;
                    Dafny.ISequence<Dafny.Rune> _2974_recursiveGen;
                    bool _2975___v54;
                    bool _2976___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2977_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1382;
                    bool _out1383;
                    bool _out1384;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1385;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, true, out _out1382, out _out1383, out _out1384, out _out1385);
                    _2974_recursiveGen = _out1382;
                    _2975___v54 = _out1383;
                    _2976___v55 = _out1384;
                    _2977_recIdents = _out1385;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2974_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2977_recIdents;
                  }
                } else if (_source153.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2978_recursiveGen;
                    bool _2979_recOwned;
                    bool _2980_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2981_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1386;
                    bool _out1387;
                    bool _out1388;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1386, out _out1387, out _out1388, out _out1389);
                    _2978_recursiveGen = _out1386;
                    _2979_recOwned = _out1387;
                    _2980_recErased = _out1388;
                    _2981_recIdents = _out1389;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2979_recOwned;
                    isErased = _2980_recErased;
                    readIdents = _2981_recIdents;
                  }
                } else if (_source153.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2982_recursiveGen;
                    bool _2983_recOwned;
                    bool _2984_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2985_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1390;
                    bool _out1391;
                    bool _out1392;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1393;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1390, out _out1391, out _out1392, out _out1393);
                    _2982_recursiveGen = _out1390;
                    _2983_recOwned = _out1391;
                    _2984_recErased = _out1392;
                    _2985_recIdents = _out1393;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2982_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2983_recOwned;
                    isErased = _2984_recErased;
                    readIdents = _2985_recIdents;
                  }
                } else if (_source153.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2986_recursiveGen;
                    bool _2987_recOwned;
                    bool _2988_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2989_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1394;
                    bool _out1395;
                    bool _out1396;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1397;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1394, out _out1395, out _out1396, out _out1397);
                    _2986_recursiveGen = _out1394;
                    _2987_recOwned = _out1395;
                    _2988_recErased = _out1396;
                    _2989_recIdents = _out1397;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2986_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2987_recOwned;
                    isErased = _2988_recErased;
                    readIdents = _2989_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2990_recursiveGen;
                    bool _2991_recOwned;
                    bool _2992_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2993_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1398;
                    bool _out1399;
                    bool _out1400;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1401;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1398, out _out1399, out _out1400, out _out1401);
                    _2990_recursiveGen = _out1398;
                    _2991_recOwned = _out1399;
                    _2992_recErased = _out1400;
                    _2993_recIdents = _out1401;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2990_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2991_recOwned;
                    isErased = _2992_recErased;
                    readIdents = _2993_recIdents;
                  }
                }
              } else if (_source151.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2994___mcc_h1101 = _source151.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2995_recursiveGen;
                  bool _2996___v62;
                  bool _2997___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2998_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1402;
                  bool _out1403;
                  bool _out1404;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1405;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, true, out _out1402, out _out1403, out _out1404, out _out1405);
                  _2995_recursiveGen = _out1402;
                  _2996___v62 = _out1403;
                  _2997___v63 = _out1404;
                  _2998_recIdents = _out1405;
                  Dafny.ISequence<Dafny.Rune> _2999_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1406;
                  _out1406 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                  _2999_toTpeGen = _out1406;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2995_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2999_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2998_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3000___mcc_h1103 = _source151.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3001_recursiveGen;
                  bool _3002_recOwned;
                  bool _3003_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3004_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1407;
                  bool _out1408;
                  bool _out1409;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1410;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1407, out _out1408, out _out1409, out _out1410);
                  _3001_recursiveGen = _out1407;
                  _3002_recOwned = _out1408;
                  _3003_recErased = _out1409;
                  _3004_recIdents = _out1410;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3001_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3002_recOwned;
                  isErased = _3003_recErased;
                  readIdents = _3004_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3005___mcc_h1105 = _source113.dtor_TypeArg_a0;
              DAST._IType _source154 = _1552___mcc_h306;
              if (_source154.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3006___mcc_h1109 = _source154.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3007___mcc_h1110 = _source154.dtor_typeArgs;
                DAST._IResolvedType _3008___mcc_h1111 = _source154.dtor_resolved;
                DAST._IResolvedType _source155 = _3008___mcc_h1111;
                if (_source155.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3009___mcc_h1115 = _source155.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3010_recursiveGen;
                    bool _3011_recOwned;
                    bool _3012_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3013_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1411;
                    bool _out1412;
                    bool _out1413;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1414;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1411, out _out1412, out _out1413, out _out1414);
                    _3010_recursiveGen = _out1411;
                    _3011_recOwned = _out1412;
                    _3012_recErased = _out1413;
                    _3013_recIdents = _out1414;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3010_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3011_recOwned;
                    isErased = _3012_recErased;
                    readIdents = _3013_recIdents;
                  }
                } else if (_source155.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3014___mcc_h1117 = _source155.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _3015_recursiveGen;
                    bool _3016_recOwned;
                    bool _3017_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3018_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1415;
                    bool _out1416;
                    bool _out1417;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1418;
                    DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1415, out _out1416, out _out1417, out _out1418);
                    _3015_recursiveGen = _out1415;
                    _3016_recOwned = _out1416;
                    _3017_recErased = _out1417;
                    _3018_recIdents = _out1418;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3015_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _3016_recOwned;
                    isErased = _3017_recErased;
                    readIdents = _3018_recIdents;
                  }
                } else {
                  DAST._IType _3019___mcc_h1119 = _source155.dtor_Newtype_a0;
                  DAST._IType _3020_b = _3019___mcc_h1119;
                  {
                    if (object.Equals(_1545_fromTpe, _3020_b)) {
                      Dafny.ISequence<Dafny.Rune> _3021_recursiveGen;
                      bool _3022_recOwned;
                      bool _3023_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3024_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1419;
                      bool _out1420;
                      bool _out1421;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1422;
                      DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1419, out _out1420, out _out1421, out _out1422);
                      _3021_recursiveGen = _out1419;
                      _3022_recOwned = _out1420;
                      _3023_recErased = _out1421;
                      _3024_recIdents = _out1422;
                      Dafny.ISequence<Dafny.Rune> _3025_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1423;
                      _out1423 = DCOMP.COMP.GenType(_1544_toTpe, true, false);
                      _3025_rhsType = _out1423;
                      Dafny.ISequence<Dafny.Rune> _3026_uneraseFn;
                      _3026_uneraseFn = ((_3022_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3025_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3026_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3021_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3022_recOwned;
                      isErased = false;
                      readIdents = _3024_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1424;
                      bool _out1425;
                      bool _out1426;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1427;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1546_expr, _1545_fromTpe, _3020_b), _3020_b, _1544_toTpe), selfIdent, @params, mustOwn, out _out1424, out _out1425, out _out1426, out _out1427);
                      s = _out1424;
                      isOwned = _out1425;
                      isErased = _out1426;
                      readIdents = _out1427;
                    }
                  }
                }
              } else if (_source154.is_Nullable) {
                DAST._IType _3027___mcc_h1121 = _source154.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3028_recursiveGen;
                  bool _3029_recOwned;
                  bool _3030_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3031_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1428;
                  bool _out1429;
                  bool _out1430;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1431;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1428, out _out1429, out _out1430, out _out1431);
                  _3028_recursiveGen = _out1428;
                  _3029_recOwned = _out1429;
                  _3030_recErased = _out1430;
                  _3031_recIdents = _out1431;
                  if (!(_3029_recOwned)) {
                    _3028_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3028_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3028_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3030_recErased;
                  readIdents = _3031_recIdents;
                }
              } else if (_source154.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3032___mcc_h1123 = _source154.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3033_recursiveGen;
                  bool _3034_recOwned;
                  bool _3035_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3036_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1432;
                  bool _out1433;
                  bool _out1434;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1435;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1432, out _out1433, out _out1434, out _out1435);
                  _3033_recursiveGen = _out1432;
                  _3034_recOwned = _out1433;
                  _3035_recErased = _out1434;
                  _3036_recIdents = _out1435;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3033_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3034_recOwned;
                  isErased = _3035_recErased;
                  readIdents = _3036_recIdents;
                }
              } else if (_source154.is_Array) {
                DAST._IType _3037___mcc_h1125 = _source154.dtor_element;
                BigInteger _3038___mcc_h1126 = _source154.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3039_recursiveGen;
                  bool _3040_recOwned;
                  bool _3041_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3042_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1436;
                  bool _out1437;
                  bool _out1438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1436, out _out1437, out _out1438, out _out1439);
                  _3039_recursiveGen = _out1436;
                  _3040_recOwned = _out1437;
                  _3041_recErased = _out1438;
                  _3042_recIdents = _out1439;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3039_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3040_recOwned;
                  isErased = _3041_recErased;
                  readIdents = _3042_recIdents;
                }
              } else if (_source154.is_Seq) {
                DAST._IType _3043___mcc_h1129 = _source154.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3044_recursiveGen;
                  bool _3045_recOwned;
                  bool _3046_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3047_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1440;
                  bool _out1441;
                  bool _out1442;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1443;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1440, out _out1441, out _out1442, out _out1443);
                  _3044_recursiveGen = _out1440;
                  _3045_recOwned = _out1441;
                  _3046_recErased = _out1442;
                  _3047_recIdents = _out1443;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3044_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3045_recOwned;
                  isErased = _3046_recErased;
                  readIdents = _3047_recIdents;
                }
              } else if (_source154.is_Set) {
                DAST._IType _3048___mcc_h1131 = _source154.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3049_recursiveGen;
                  bool _3050_recOwned;
                  bool _3051_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3052_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1444;
                  bool _out1445;
                  bool _out1446;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1447;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1444, out _out1445, out _out1446, out _out1447);
                  _3049_recursiveGen = _out1444;
                  _3050_recOwned = _out1445;
                  _3051_recErased = _out1446;
                  _3052_recIdents = _out1447;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3049_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3050_recOwned;
                  isErased = _3051_recErased;
                  readIdents = _3052_recIdents;
                }
              } else if (_source154.is_Multiset) {
                DAST._IType _3053___mcc_h1133 = _source154.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3054_recursiveGen;
                  bool _3055_recOwned;
                  bool _3056_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3057_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1448;
                  bool _out1449;
                  bool _out1450;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1451;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1448, out _out1449, out _out1450, out _out1451);
                  _3054_recursiveGen = _out1448;
                  _3055_recOwned = _out1449;
                  _3056_recErased = _out1450;
                  _3057_recIdents = _out1451;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3054_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3055_recOwned;
                  isErased = _3056_recErased;
                  readIdents = _3057_recIdents;
                }
              } else if (_source154.is_Map) {
                DAST._IType _3058___mcc_h1135 = _source154.dtor_key;
                DAST._IType _3059___mcc_h1136 = _source154.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3060_recursiveGen;
                  bool _3061_recOwned;
                  bool _3062_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3063_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1452;
                  bool _out1453;
                  bool _out1454;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1455;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1452, out _out1453, out _out1454, out _out1455);
                  _3060_recursiveGen = _out1452;
                  _3061_recOwned = _out1453;
                  _3062_recErased = _out1454;
                  _3063_recIdents = _out1455;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3060_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3061_recOwned;
                  isErased = _3062_recErased;
                  readIdents = _3063_recIdents;
                }
              } else if (_source154.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3064___mcc_h1139 = _source154.dtor_args;
                DAST._IType _3065___mcc_h1140 = _source154.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3066_recursiveGen;
                  bool _3067_recOwned;
                  bool _3068_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3069_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1456;
                  bool _out1457;
                  bool _out1458;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1459;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1456, out _out1457, out _out1458, out _out1459);
                  _3066_recursiveGen = _out1456;
                  _3067_recOwned = _out1457;
                  _3068_recErased = _out1458;
                  _3069_recIdents = _out1459;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3066_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3067_recOwned;
                  isErased = _3068_recErased;
                  readIdents = _3069_recIdents;
                }
              } else if (_source154.is_Primitive) {
                DAST._IPrimitive _3070___mcc_h1143 = _source154.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3071_recursiveGen;
                  bool _3072_recOwned;
                  bool _3073_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3074_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1460;
                  bool _out1461;
                  bool _out1462;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1463;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1460, out _out1461, out _out1462, out _out1463);
                  _3071_recursiveGen = _out1460;
                  _3072_recOwned = _out1461;
                  _3073_recErased = _out1462;
                  _3074_recIdents = _out1463;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3071_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3072_recOwned;
                  isErased = _3073_recErased;
                  readIdents = _3074_recIdents;
                }
              } else if (_source154.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3075___mcc_h1145 = _source154.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3076_recursiveGen;
                  bool _3077_recOwned;
                  bool _3078_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3079_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1464;
                  bool _out1465;
                  bool _out1466;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1467;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1464, out _out1465, out _out1466, out _out1467);
                  _3076_recursiveGen = _out1464;
                  _3077_recOwned = _out1465;
                  _3078_recErased = _out1466;
                  _3079_recIdents = _out1467;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3076_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3077_recOwned;
                  isErased = _3078_recErased;
                  readIdents = _3079_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3080___mcc_h1147 = _source154.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3081_recursiveGen;
                  bool _3082_recOwned;
                  bool _3083_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3084_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1468;
                  bool _out1469;
                  bool _out1470;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1471;
                  DCOMP.COMP.GenExpr(_1546_expr, selfIdent, @params, mustOwn, out _out1468, out _out1469, out _out1470, out _out1471);
                  _3081_recursiveGen = _out1468;
                  _3082_recOwned = _out1469;
                  _3083_recErased = _out1470;
                  _3084_recIdents = _out1471;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3081_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3082_recOwned;
                  isErased = _3083_recErased;
                  readIdents = _3084_recIdents;
                }
              }
            }
          }
        }
      } else if (_source106.is_SeqConstruct) {
        DAST._IExpression _3085___mcc_h26 = _source106.dtor_length;
        DAST._IExpression _3086___mcc_h27 = _source106.dtor_elem;
        DAST._IExpression _3087_expr = _3086___mcc_h27;
        DAST._IExpression _3088_length = _3085___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _3089_recursiveGen;
          bool _3090___v65;
          bool _3091_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3092_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1472;
          bool _out1473;
          bool _out1474;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1475;
          DCOMP.COMP.GenExpr(_3087_expr, selfIdent, @params, true, out _out1472, out _out1473, out _out1474, out _out1475);
          _3089_recursiveGen = _out1472;
          _3090___v65 = _out1473;
          _3091_eErased = _out1474;
          _3092_recIdents = _out1475;
          Dafny.ISequence<Dafny.Rune> _3093_lengthGen;
          bool _3094___v66;
          bool _3095_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3096_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1476;
          bool _out1477;
          bool _out1478;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1479;
          DCOMP.COMP.GenExpr(_3088_length, selfIdent, @params, true, out _out1476, out _out1477, out _out1478, out _out1479);
          _3093_lengthGen = _out1476;
          _3094___v66 = _out1477;
          _3095_lengthErased = _out1478;
          _3096_lengthIdents = _out1479;
          if (!(_3095_lengthErased)) {
            _3093_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3093_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _3089_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _3093_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3092_recIdents, _3096_lengthIdents);
          isOwned = true;
          isErased = _3091_eErased;
        }
      } else if (_source106.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3097___mcc_h28 = _source106.dtor_elements;
        DAST._IType _3098___mcc_h29 = _source106.dtor_typ;
        DAST._IType _3099_typ = _3098___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3100_exprs = _3097___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3101_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1480;
          _out1480 = DCOMP.COMP.GenType(_3099_typ, false, false);
          _3101_genTpe = _out1480;
          BigInteger _3102_i;
          _3102_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3102_i = BigInteger.Zero;
          while ((_3102_i) < (new BigInteger((_3100_exprs).Count))) {
            if ((_3102_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3103_recursiveGen;
            bool _3104___v67;
            bool _3105_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3106_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1481;
            bool _out1482;
            bool _out1483;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
            DCOMP.COMP.GenExpr((_3100_exprs).Select(_3102_i), selfIdent, @params, true, out _out1481, out _out1482, out _out1483, out _out1484);
            _3103_recursiveGen = _out1481;
            _3104___v67 = _out1482;
            _3105_isErased = _out1483;
            _3106_recIdents = _out1484;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3106_recIdents);
            if (_3105_isErased) {
              _3103_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3103_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3103_recursiveGen);
            _3102_i = (_3102_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _3101_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3107___mcc_h30 = _source106.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3108_exprs = _3107___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _3109_generatedValues;
          _3109_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3110_i;
          _3110_i = BigInteger.Zero;
          bool _3111_allErased;
          _3111_allErased = true;
          while ((_3110_i) < (new BigInteger((_3108_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _3112_recursiveGen;
            bool _3113___v68;
            bool _3114_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3115_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1485;
            bool _out1486;
            bool _out1487;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
            DCOMP.COMP.GenExpr((_3108_exprs).Select(_3110_i), selfIdent, @params, true, out _out1485, out _out1486, out _out1487, out _out1488);
            _3112_recursiveGen = _out1485;
            _3113___v68 = _out1486;
            _3114_isErased = _out1487;
            _3115_recIdents = _out1488;
            _3111_allErased = (_3111_allErased) && (_3114_isErased);
            _3109_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_3109_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_3112_recursiveGen, _3114_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3115_recIdents);
            _3110_i = (_3110_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3110_i = BigInteger.Zero;
          while ((_3110_i) < (new BigInteger((_3109_generatedValues).Count))) {
            if ((_3110_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3116_gen;
            _3116_gen = ((_3109_generatedValues).Select(_3110_i)).dtor__0;
            if ((((_3109_generatedValues).Select(_3110_i)).dtor__1) && (!(_3111_allErased))) {
              _3116_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3116_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3116_gen);
            _3110_i = (_3110_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _3111_allErased;
        }
      } else if (_source106.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3117___mcc_h31 = _source106.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3118_mapElems = _3117___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _3119_generatedValues;
          _3119_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3120_i;
          _3120_i = BigInteger.Zero;
          bool _3121_allErased;
          _3121_allErased = true;
          while ((_3120_i) < (new BigInteger((_3118_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _3122_recursiveGenKey;
            bool _3123___v69;
            bool _3124_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3125_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1489;
            bool _out1490;
            bool _out1491;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
            DCOMP.COMP.GenExpr(((_3118_mapElems).Select(_3120_i)).dtor__0, selfIdent, @params, true, out _out1489, out _out1490, out _out1491, out _out1492);
            _3122_recursiveGenKey = _out1489;
            _3123___v69 = _out1490;
            _3124_isErasedKey = _out1491;
            _3125_recIdentsKey = _out1492;
            Dafny.ISequence<Dafny.Rune> _3126_recursiveGenValue;
            bool _3127___v70;
            bool _3128_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3129_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1493;
            bool _out1494;
            bool _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(((_3118_mapElems).Select(_3120_i)).dtor__1, selfIdent, @params, true, out _out1493, out _out1494, out _out1495, out _out1496);
            _3126_recursiveGenValue = _out1493;
            _3127___v70 = _out1494;
            _3128_isErasedValue = _out1495;
            _3129_recIdentsValue = _out1496;
            _3121_allErased = ((_3121_allErased) && (_3124_isErasedKey)) && (_3128_isErasedValue);
            _3119_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_3119_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_3122_recursiveGenKey, _3126_recursiveGenValue, _3124_isErasedKey, _3128_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3125_recIdentsKey), _3129_recIdentsValue);
            _3120_i = (_3120_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3120_i = BigInteger.Zero;
          while ((_3120_i) < (new BigInteger((_3119_generatedValues).Count))) {
            if ((_3120_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3130_genKey;
            _3130_genKey = ((_3119_generatedValues).Select(_3120_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _3131_genValue;
            _3131_genValue = ((_3119_generatedValues).Select(_3120_i)).dtor__1;
            if ((((_3119_generatedValues).Select(_3120_i)).dtor__2) && (!(_3121_allErased))) {
              _3130_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3130_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_3119_generatedValues).Select(_3120_i)).dtor__3) && (!(_3121_allErased))) {
              _3131_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3131_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3130_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3131_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3120_i = (_3120_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _3121_allErased;
        }
      } else if (_source106.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source156 = selfIdent;
          if (_source156.is_Some) {
            Dafny.ISequence<Dafny.Rune> _3132___mcc_h1149 = _source156.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _3133_id = _3132___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_3133_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_3133_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3133_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3133_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source106.is_Ite) {
        DAST._IExpression _3134___mcc_h32 = _source106.dtor_cond;
        DAST._IExpression _3135___mcc_h33 = _source106.dtor_thn;
        DAST._IExpression _3136___mcc_h34 = _source106.dtor_els;
        DAST._IExpression _3137_f = _3136___mcc_h34;
        DAST._IExpression _3138_t = _3135___mcc_h33;
        DAST._IExpression _3139_cond = _3134___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _3140_condString;
          bool _3141___v71;
          bool _3142_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3143_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1497;
          bool _out1498;
          bool _out1499;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1500;
          DCOMP.COMP.GenExpr(_3139_cond, selfIdent, @params, true, out _out1497, out _out1498, out _out1499, out _out1500);
          _3140_condString = _out1497;
          _3141___v71 = _out1498;
          _3142_condErased = _out1499;
          _3143_recIdentsCond = _out1500;
          if (!(_3142_condErased)) {
            _3140_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3140_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _3144___v72;
          bool _3145_tHasToBeOwned;
          bool _3146___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3147___v74;
          Dafny.ISequence<Dafny.Rune> _out1501;
          bool _out1502;
          bool _out1503;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
          DCOMP.COMP.GenExpr(_3138_t, selfIdent, @params, mustOwn, out _out1501, out _out1502, out _out1503, out _out1504);
          _3144___v72 = _out1501;
          _3145_tHasToBeOwned = _out1502;
          _3146___v73 = _out1503;
          _3147___v74 = _out1504;
          Dafny.ISequence<Dafny.Rune> _3148_fString;
          bool _3149_fOwned;
          bool _3150_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3151_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1505;
          bool _out1506;
          bool _out1507;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
          DCOMP.COMP.GenExpr(_3137_f, selfIdent, @params, _3145_tHasToBeOwned, out _out1505, out _out1506, out _out1507, out _out1508);
          _3148_fString = _out1505;
          _3149_fOwned = _out1506;
          _3150_fErased = _out1507;
          _3151_recIdentsF = _out1508;
          Dafny.ISequence<Dafny.Rune> _3152_tString;
          bool _3153___v75;
          bool _3154_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3155_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1509;
          bool _out1510;
          bool _out1511;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
          DCOMP.COMP.GenExpr(_3138_t, selfIdent, @params, _3149_fOwned, out _out1509, out _out1510, out _out1511, out _out1512);
          _3152_tString = _out1509;
          _3153___v75 = _out1510;
          _3154_tErased = _out1511;
          _3155_recIdentsT = _out1512;
          if ((!(_3150_fErased)) || (!(_3154_tErased))) {
            if (_3150_fErased) {
              _3148_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3148_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_3154_tErased) {
              _3152_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3152_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3140_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3152_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3148_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _3149_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3143_recIdentsCond, _3155_recIdentsT), _3151_recIdentsF);
          isErased = (_3150_fErased) || (_3154_tErased);
        }
      } else if (_source106.is_UnOp) {
        DAST._IUnaryOp _3156___mcc_h35 = _source106.dtor_unOp;
        DAST._IExpression _3157___mcc_h36 = _source106.dtor_expr;
        DAST._IUnaryOp _source157 = _3156___mcc_h35;
        if (_source157.is_Not) {
          DAST._IExpression _3158_e = _3157___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3159_recursiveGen;
            bool _3160___v76;
            bool _3161_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3162_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1513;
            bool _out1514;
            bool _out1515;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
            DCOMP.COMP.GenExpr(_3158_e, selfIdent, @params, true, out _out1513, out _out1514, out _out1515, out _out1516);
            _3159_recursiveGen = _out1513;
            _3160___v76 = _out1514;
            _3161_recErased = _out1515;
            _3162_recIdents = _out1516;
            if (!(_3161_recErased)) {
              _3159_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3159_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3159_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3162_recIdents;
            isErased = true;
          }
        } else if (_source157.is_BitwiseNot) {
          DAST._IExpression _3163_e = _3157___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3164_recursiveGen;
            bool _3165___v77;
            bool _3166_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3167_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1517;
            bool _out1518;
            bool _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            DCOMP.COMP.GenExpr(_3163_e, selfIdent, @params, true, out _out1517, out _out1518, out _out1519, out _out1520);
            _3164_recursiveGen = _out1517;
            _3165___v77 = _out1518;
            _3166_recErased = _out1519;
            _3167_recIdents = _out1520;
            if (!(_3166_recErased)) {
              _3164_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3164_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _3164_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3167_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _3168_e = _3157___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3169_recursiveGen;
            bool _3170_recOwned;
            bool _3171_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3172_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1521;
            bool _out1522;
            bool _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr(_3168_e, selfIdent, @params, false, out _out1521, out _out1522, out _out1523, out _out1524);
            _3169_recursiveGen = _out1521;
            _3170_recOwned = _out1522;
            _3171_recErased = _out1523;
            _3172_recIdents = _out1524;
            if (!(_3171_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3173_eraseFn;
              _3173_eraseFn = ((_3170_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3169_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3173_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3169_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3169_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3172_recIdents;
            isErased = true;
          }
        }
      } else if (_source106.is_BinOp) {
        DAST._IBinOp _3174___mcc_h37 = _source106.dtor_op;
        DAST._IExpression _3175___mcc_h38 = _source106.dtor_left;
        DAST._IExpression _3176___mcc_h39 = _source106.dtor_right;
        DAST._IExpression _3177_r = _3176___mcc_h39;
        DAST._IExpression _3178_l = _3175___mcc_h38;
        DAST._IBinOp _3179_op = _3174___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _3180_left;
          bool _3181___v78;
          bool _3182_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3183_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1525;
          bool _out1526;
          bool _out1527;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1528;
          DCOMP.COMP.GenExpr(_3178_l, selfIdent, @params, true, out _out1525, out _out1526, out _out1527, out _out1528);
          _3180_left = _out1525;
          _3181___v78 = _out1526;
          _3182_leftErased = _out1527;
          _3183_recIdentsL = _out1528;
          Dafny.ISequence<Dafny.Rune> _3184_right;
          bool _3185___v79;
          bool _3186_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3187_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1529;
          bool _out1530;
          bool _out1531;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
          DCOMP.COMP.GenExpr(_3177_r, selfIdent, @params, true, out _out1529, out _out1530, out _out1531, out _out1532);
          _3184_right = _out1529;
          _3185___v79 = _out1530;
          _3186_rightErased = _out1531;
          _3187_recIdentsR = _out1532;
          DAST._IBinOp _source158 = _3179_op;
          if (_source158.is_Eq) {
            bool _3188___mcc_h1150 = _source158.dtor_referential;
            bool _3189___mcc_h1151 = _source158.dtor_nullable;
            {
              if (!(_3182_leftErased)) {
                _3180_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3186_rightErased)) {
                _3184_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source159 = _3179_op;
              if (_source159.is_Eq) {
                bool _3190___mcc_h1160 = _source159.dtor_referential;
                bool _3191___mcc_h1161 = _source159.dtor_nullable;
                bool _3192_nullable = _3191___mcc_h1161;
                bool _3193_referential = _3190___mcc_h1160;
                {
                  if (_3193_referential) {
                    if (_3192_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3184_right);
                  }
                }
              } else if (_source159.is_Neq) {
                bool _3194___mcc_h1162 = _source159.dtor_referential;
                bool _3195___mcc_h1163 = _source159.dtor_nullable;
                bool _3196_nullable = _3195___mcc_h1163;
                bool _3197_referential = _3194___mcc_h1162;
                {
                  if (_3197_referential) {
                    if (_3196_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3184_right);
                  }
                }
              } else if (_source159.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source159.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source159.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source159.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3198___mcc_h1164 = _source159.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3199_op = _3198___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3199_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_Neq) {
            bool _3200___mcc_h1154 = _source158.dtor_referential;
            bool _3201___mcc_h1155 = _source158.dtor_nullable;
            {
              if (!(_3182_leftErased)) {
                _3180_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3186_rightErased)) {
                _3184_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source160 = _3179_op;
              if (_source160.is_Eq) {
                bool _3202___mcc_h1165 = _source160.dtor_referential;
                bool _3203___mcc_h1166 = _source160.dtor_nullable;
                bool _3204_nullable = _3203___mcc_h1166;
                bool _3205_referential = _3202___mcc_h1165;
                {
                  if (_3205_referential) {
                    if (_3204_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3184_right);
                  }
                }
              } else if (_source160.is_Neq) {
                bool _3206___mcc_h1167 = _source160.dtor_referential;
                bool _3207___mcc_h1168 = _source160.dtor_nullable;
                bool _3208_nullable = _3207___mcc_h1168;
                bool _3209_referential = _3206___mcc_h1167;
                {
                  if (_3209_referential) {
                    if (_3208_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3184_right);
                  }
                }
              } else if (_source160.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3210___mcc_h1169 = _source160.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3211_op = _3210___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3211_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_Div) {
            {
              if (!(_3182_leftErased)) {
                _3180_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3186_rightErased)) {
                _3184_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source161 = _3179_op;
              if (_source161.is_Eq) {
                bool _3212___mcc_h1170 = _source161.dtor_referential;
                bool _3213___mcc_h1171 = _source161.dtor_nullable;
                bool _3214_nullable = _3213___mcc_h1171;
                bool _3215_referential = _3212___mcc_h1170;
                {
                  if (_3215_referential) {
                    if (_3214_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3184_right);
                  }
                }
              } else if (_source161.is_Neq) {
                bool _3216___mcc_h1172 = _source161.dtor_referential;
                bool _3217___mcc_h1173 = _source161.dtor_nullable;
                bool _3218_nullable = _3217___mcc_h1173;
                bool _3219_referential = _3216___mcc_h1172;
                {
                  if (_3219_referential) {
                    if (_3218_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3184_right);
                  }
                }
              } else if (_source161.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source161.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source161.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source161.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3220___mcc_h1174 = _source161.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3221_op = _3220___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3221_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_EuclidianDiv) {
            {
              if (!(_3182_leftErased)) {
                _3180_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3186_rightErased)) {
                _3184_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source162 = _3179_op;
              if (_source162.is_Eq) {
                bool _3222___mcc_h1175 = _source162.dtor_referential;
                bool _3223___mcc_h1176 = _source162.dtor_nullable;
                bool _3224_nullable = _3223___mcc_h1176;
                bool _3225_referential = _3222___mcc_h1175;
                {
                  if (_3225_referential) {
                    if (_3224_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3184_right);
                  }
                }
              } else if (_source162.is_Neq) {
                bool _3226___mcc_h1177 = _source162.dtor_referential;
                bool _3227___mcc_h1178 = _source162.dtor_nullable;
                bool _3228_nullable = _3227___mcc_h1178;
                bool _3229_referential = _3226___mcc_h1177;
                {
                  if (_3229_referential) {
                    if (_3228_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3184_right);
                  }
                }
              } else if (_source162.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source162.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source162.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source162.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3230___mcc_h1179 = _source162.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3231_op = _3230___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3231_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_Mod) {
            {
              if (!(_3182_leftErased)) {
                _3180_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3186_rightErased)) {
                _3184_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source163 = _3179_op;
              if (_source163.is_Eq) {
                bool _3232___mcc_h1180 = _source163.dtor_referential;
                bool _3233___mcc_h1181 = _source163.dtor_nullable;
                bool _3234_nullable = _3233___mcc_h1181;
                bool _3235_referential = _3232___mcc_h1180;
                {
                  if (_3235_referential) {
                    if (_3234_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3184_right);
                  }
                }
              } else if (_source163.is_Neq) {
                bool _3236___mcc_h1182 = _source163.dtor_referential;
                bool _3237___mcc_h1183 = _source163.dtor_nullable;
                bool _3238_nullable = _3237___mcc_h1183;
                bool _3239_referential = _3236___mcc_h1182;
                {
                  if (_3239_referential) {
                    if (_3238_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3184_right);
                  }
                }
              } else if (_source163.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source163.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source163.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source163.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3240___mcc_h1184 = _source163.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3241_op = _3240___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3241_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_EuclidianMod) {
            {
              if (!(_3182_leftErased)) {
                _3180_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3186_rightErased)) {
                _3184_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source164 = _3179_op;
              if (_source164.is_Eq) {
                bool _3242___mcc_h1185 = _source164.dtor_referential;
                bool _3243___mcc_h1186 = _source164.dtor_nullable;
                bool _3244_nullable = _3243___mcc_h1186;
                bool _3245_referential = _3242___mcc_h1185;
                {
                  if (_3245_referential) {
                    if (_3244_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3184_right);
                  }
                }
              } else if (_source164.is_Neq) {
                bool _3246___mcc_h1187 = _source164.dtor_referential;
                bool _3247___mcc_h1188 = _source164.dtor_nullable;
                bool _3248_nullable = _3247___mcc_h1188;
                bool _3249_referential = _3246___mcc_h1187;
                {
                  if (_3249_referential) {
                    if (_3248_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3184_right);
                  }
                }
              } else if (_source164.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source164.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source164.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source164.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3250___mcc_h1189 = _source164.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3251_op = _3250___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3251_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source158.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _3184_right);
            }
          } else if (_source158.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3184_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source158.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source158.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source158.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3252___mcc_h1158 = _source158.dtor_Passthrough_a0;
            {
              if (!(_3182_leftErased)) {
                _3180_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3186_rightErased)) {
                _3184_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source165 = _3179_op;
              if (_source165.is_Eq) {
                bool _3253___mcc_h1190 = _source165.dtor_referential;
                bool _3254___mcc_h1191 = _source165.dtor_nullable;
                bool _3255_nullable = _3254___mcc_h1191;
                bool _3256_referential = _3253___mcc_h1190;
                {
                  if (_3256_referential) {
                    if (_3255_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3184_right);
                  }
                }
              } else if (_source165.is_Neq) {
                bool _3257___mcc_h1192 = _source165.dtor_referential;
                bool _3258___mcc_h1193 = _source165.dtor_nullable;
                bool _3259_nullable = _3258___mcc_h1193;
                bool _3260_referential = _3257___mcc_h1192;
                {
                  if (_3260_referential) {
                    if (_3259_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3180_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3184_right);
                  }
                }
              } else if (_source165.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source165.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source165.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source165.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3261___mcc_h1194 = _source165.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3262_op = _3261___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3180_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3262_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3184_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3183_recIdentsL, _3187_recIdentsR);
          isErased = true;
        }
      } else if (_source106.is_ArrayLen) {
        DAST._IExpression _3263___mcc_h40 = _source106.dtor_expr;
        BigInteger _3264___mcc_h41 = _source106.dtor_dim;
        BigInteger _3265_dim = _3264___mcc_h41;
        DAST._IExpression _3266_expr = _3263___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _3267_recursiveGen;
          bool _3268___v81;
          bool _3269_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3270_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1533;
          bool _out1534;
          bool _out1535;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
          DCOMP.COMP.GenExpr(_3266_expr, selfIdent, @params, true, out _out1533, out _out1534, out _out1535, out _out1536);
          _3267_recursiveGen = _out1533;
          _3268___v81 = _out1534;
          _3269_recErased = _out1535;
          _3270_recIdents = _out1536;
          if ((_3265_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _3271_i;
            _3271_i = BigInteger.One;
            while ((_3271_i) < (_3265_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3271_i = (_3271_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _3270_recIdents;
          isErased = true;
        }
      } else if (_source106.is_Select) {
        DAST._IExpression _3272___mcc_h42 = _source106.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3273___mcc_h43 = _source106.dtor_field;
        bool _3274___mcc_h44 = _source106.dtor_isConstant;
        bool _3275___mcc_h45 = _source106.dtor_onDatatype;
        DAST._IExpression _source166 = _3272___mcc_h42;
        if (_source166.is_Literal) {
          DAST._ILiteral _3276___mcc_h46 = _source166.dtor_Literal_a0;
          bool _3277_isDatatype = _3275___mcc_h45;
          bool _3278_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3279_field = _3273___mcc_h43;
          DAST._IExpression _3280_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3281_onString;
            bool _3282_onOwned;
            bool _3283_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3284_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1537;
            bool _out1538;
            bool _out1539;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
            DCOMP.COMP.GenExpr(_3280_on, selfIdent, @params, false, out _out1537, out _out1538, out _out1539, out _out1540);
            _3281_onString = _out1537;
            _3282_onOwned = _out1538;
            _3283_onErased = _out1539;
            _3284_recIdents = _out1540;
            if ((_3277_isDatatype) || (_3278_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3281_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3279_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3278_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3281_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3279_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3284_recIdents;
          }
        } else if (_source166.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3285___mcc_h48 = _source166.dtor_Ident_a0;
          bool _3286_isDatatype = _3275___mcc_h45;
          bool _3287_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3288_field = _3273___mcc_h43;
          DAST._IExpression _3289_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3290_onString;
            bool _3291_onOwned;
            bool _3292_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3293_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1541;
            bool _out1542;
            bool _out1543;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
            DCOMP.COMP.GenExpr(_3289_on, selfIdent, @params, false, out _out1541, out _out1542, out _out1543, out _out1544);
            _3290_onString = _out1541;
            _3291_onOwned = _out1542;
            _3292_onErased = _out1543;
            _3293_recIdents = _out1544;
            if ((_3286_isDatatype) || (_3287_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3290_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3288_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3287_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3290_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3288_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3293_recIdents;
          }
        } else if (_source166.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3294___mcc_h50 = _source166.dtor_Companion_a0;
          bool _3295_isDatatype = _3275___mcc_h45;
          bool _3296_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3297_field = _3273___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3298_c = _3294___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _3299_onString;
            bool _3300_onOwned;
            bool _3301_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3302_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1545;
            bool _out1546;
            bool _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3298_c), selfIdent, @params, false, out _out1545, out _out1546, out _out1547, out _out1548);
            _3299_onString = _out1545;
            _3300_onOwned = _out1546;
            _3301_onErased = _out1547;
            _3302_recIdents = _out1548;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3299_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3297_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3302_recIdents;
          }
        } else if (_source166.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3303___mcc_h52 = _source166.dtor_Tuple_a0;
          bool _3304_isDatatype = _3275___mcc_h45;
          bool _3305_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3306_field = _3273___mcc_h43;
          DAST._IExpression _3307_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3308_onString;
            bool _3309_onOwned;
            bool _3310_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3311_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1549;
            bool _out1550;
            bool _out1551;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
            DCOMP.COMP.GenExpr(_3307_on, selfIdent, @params, false, out _out1549, out _out1550, out _out1551, out _out1552);
            _3308_onString = _out1549;
            _3309_onOwned = _out1550;
            _3310_onErased = _out1551;
            _3311_recIdents = _out1552;
            if ((_3304_isDatatype) || (_3305_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3308_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3306_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3305_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3308_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3306_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3311_recIdents;
          }
        } else if (_source166.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3312___mcc_h54 = _source166.dtor_path;
          Dafny.ISequence<DAST._IType> _3313___mcc_h55 = _source166.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3314___mcc_h56 = _source166.dtor_args;
          bool _3315_isDatatype = _3275___mcc_h45;
          bool _3316_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3317_field = _3273___mcc_h43;
          DAST._IExpression _3318_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3319_onString;
            bool _3320_onOwned;
            bool _3321_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3322_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1553;
            bool _out1554;
            bool _out1555;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1556;
            DCOMP.COMP.GenExpr(_3318_on, selfIdent, @params, false, out _out1553, out _out1554, out _out1555, out _out1556);
            _3319_onString = _out1553;
            _3320_onOwned = _out1554;
            _3321_onErased = _out1555;
            _3322_recIdents = _out1556;
            if ((_3315_isDatatype) || (_3316_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3319_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3317_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3316_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3319_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3317_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3322_recIdents;
          }
        } else if (_source166.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3323___mcc_h60 = _source166.dtor_dims;
          DAST._IType _3324___mcc_h61 = _source166.dtor_typ;
          bool _3325_isDatatype = _3275___mcc_h45;
          bool _3326_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3327_field = _3273___mcc_h43;
          DAST._IExpression _3328_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3329_onString;
            bool _3330_onOwned;
            bool _3331_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3332_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1557;
            bool _out1558;
            bool _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            DCOMP.COMP.GenExpr(_3328_on, selfIdent, @params, false, out _out1557, out _out1558, out _out1559, out _out1560);
            _3329_onString = _out1557;
            _3330_onOwned = _out1558;
            _3331_onErased = _out1559;
            _3332_recIdents = _out1560;
            if ((_3325_isDatatype) || (_3326_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3329_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3327_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3326_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3329_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3327_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3332_recIdents;
          }
        } else if (_source166.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3333___mcc_h64 = _source166.dtor_path;
          Dafny.ISequence<DAST._IType> _3334___mcc_h65 = _source166.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3335___mcc_h66 = _source166.dtor_variant;
          bool _3336___mcc_h67 = _source166.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3337___mcc_h68 = _source166.dtor_contents;
          bool _3338_isDatatype = _3275___mcc_h45;
          bool _3339_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3340_field = _3273___mcc_h43;
          DAST._IExpression _3341_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3342_onString;
            bool _3343_onOwned;
            bool _3344_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3345_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1561;
            bool _out1562;
            bool _out1563;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1564;
            DCOMP.COMP.GenExpr(_3341_on, selfIdent, @params, false, out _out1561, out _out1562, out _out1563, out _out1564);
            _3342_onString = _out1561;
            _3343_onOwned = _out1562;
            _3344_onErased = _out1563;
            _3345_recIdents = _out1564;
            if ((_3338_isDatatype) || (_3339_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3342_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3340_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3339_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3342_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3340_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3345_recIdents;
          }
        } else if (_source166.is_Convert) {
          DAST._IExpression _3346___mcc_h74 = _source166.dtor_value;
          DAST._IType _3347___mcc_h75 = _source166.dtor_from;
          DAST._IType _3348___mcc_h76 = _source166.dtor_typ;
          bool _3349_isDatatype = _3275___mcc_h45;
          bool _3350_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3351_field = _3273___mcc_h43;
          DAST._IExpression _3352_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3353_onString;
            bool _3354_onOwned;
            bool _3355_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3356_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1565;
            bool _out1566;
            bool _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            DCOMP.COMP.GenExpr(_3352_on, selfIdent, @params, false, out _out1565, out _out1566, out _out1567, out _out1568);
            _3353_onString = _out1565;
            _3354_onOwned = _out1566;
            _3355_onErased = _out1567;
            _3356_recIdents = _out1568;
            if ((_3349_isDatatype) || (_3350_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3353_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3351_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3350_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3353_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3351_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3356_recIdents;
          }
        } else if (_source166.is_SeqConstruct) {
          DAST._IExpression _3357___mcc_h80 = _source166.dtor_length;
          DAST._IExpression _3358___mcc_h81 = _source166.dtor_elem;
          bool _3359_isDatatype = _3275___mcc_h45;
          bool _3360_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3361_field = _3273___mcc_h43;
          DAST._IExpression _3362_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3363_onString;
            bool _3364_onOwned;
            bool _3365_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3366_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1569;
            bool _out1570;
            bool _out1571;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
            DCOMP.COMP.GenExpr(_3362_on, selfIdent, @params, false, out _out1569, out _out1570, out _out1571, out _out1572);
            _3363_onString = _out1569;
            _3364_onOwned = _out1570;
            _3365_onErased = _out1571;
            _3366_recIdents = _out1572;
            if ((_3359_isDatatype) || (_3360_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3363_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3361_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3360_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3363_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3361_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3366_recIdents;
          }
        } else if (_source166.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3367___mcc_h84 = _source166.dtor_elements;
          DAST._IType _3368___mcc_h85 = _source166.dtor_typ;
          bool _3369_isDatatype = _3275___mcc_h45;
          bool _3370_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3371_field = _3273___mcc_h43;
          DAST._IExpression _3372_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3373_onString;
            bool _3374_onOwned;
            bool _3375_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3376_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1573;
            bool _out1574;
            bool _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            DCOMP.COMP.GenExpr(_3372_on, selfIdent, @params, false, out _out1573, out _out1574, out _out1575, out _out1576);
            _3373_onString = _out1573;
            _3374_onOwned = _out1574;
            _3375_onErased = _out1575;
            _3376_recIdents = _out1576;
            if ((_3369_isDatatype) || (_3370_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3373_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3371_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3370_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3373_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3371_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3376_recIdents;
          }
        } else if (_source166.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3377___mcc_h88 = _source166.dtor_elements;
          bool _3378_isDatatype = _3275___mcc_h45;
          bool _3379_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3380_field = _3273___mcc_h43;
          DAST._IExpression _3381_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3382_onString;
            bool _3383_onOwned;
            bool _3384_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3385_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1577;
            bool _out1578;
            bool _out1579;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
            DCOMP.COMP.GenExpr(_3381_on, selfIdent, @params, false, out _out1577, out _out1578, out _out1579, out _out1580);
            _3382_onString = _out1577;
            _3383_onOwned = _out1578;
            _3384_onErased = _out1579;
            _3385_recIdents = _out1580;
            if ((_3378_isDatatype) || (_3379_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3382_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3380_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3379_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3382_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3380_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3385_recIdents;
          }
        } else if (_source166.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3386___mcc_h90 = _source166.dtor_mapElems;
          bool _3387_isDatatype = _3275___mcc_h45;
          bool _3388_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3389_field = _3273___mcc_h43;
          DAST._IExpression _3390_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3391_onString;
            bool _3392_onOwned;
            bool _3393_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3394_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1581;
            bool _out1582;
            bool _out1583;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1584;
            DCOMP.COMP.GenExpr(_3390_on, selfIdent, @params, false, out _out1581, out _out1582, out _out1583, out _out1584);
            _3391_onString = _out1581;
            _3392_onOwned = _out1582;
            _3393_onErased = _out1583;
            _3394_recIdents = _out1584;
            if ((_3387_isDatatype) || (_3388_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3391_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3389_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3388_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3391_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3389_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3394_recIdents;
          }
        } else if (_source166.is_This) {
          bool _3395_isDatatype = _3275___mcc_h45;
          bool _3396_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3397_field = _3273___mcc_h43;
          DAST._IExpression _3398_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3399_onString;
            bool _3400_onOwned;
            bool _3401_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3402_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1585;
            bool _out1586;
            bool _out1587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1588;
            DCOMP.COMP.GenExpr(_3398_on, selfIdent, @params, false, out _out1585, out _out1586, out _out1587, out _out1588);
            _3399_onString = _out1585;
            _3400_onOwned = _out1586;
            _3401_onErased = _out1587;
            _3402_recIdents = _out1588;
            if ((_3395_isDatatype) || (_3396_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3399_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3397_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3396_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3399_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3397_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3402_recIdents;
          }
        } else if (_source166.is_Ite) {
          DAST._IExpression _3403___mcc_h92 = _source166.dtor_cond;
          DAST._IExpression _3404___mcc_h93 = _source166.dtor_thn;
          DAST._IExpression _3405___mcc_h94 = _source166.dtor_els;
          bool _3406_isDatatype = _3275___mcc_h45;
          bool _3407_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3408_field = _3273___mcc_h43;
          DAST._IExpression _3409_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3410_onString;
            bool _3411_onOwned;
            bool _3412_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3413_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1589;
            bool _out1590;
            bool _out1591;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1592;
            DCOMP.COMP.GenExpr(_3409_on, selfIdent, @params, false, out _out1589, out _out1590, out _out1591, out _out1592);
            _3410_onString = _out1589;
            _3411_onOwned = _out1590;
            _3412_onErased = _out1591;
            _3413_recIdents = _out1592;
            if ((_3406_isDatatype) || (_3407_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3410_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3408_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3407_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3410_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3408_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3413_recIdents;
          }
        } else if (_source166.is_UnOp) {
          DAST._IUnaryOp _3414___mcc_h98 = _source166.dtor_unOp;
          DAST._IExpression _3415___mcc_h99 = _source166.dtor_expr;
          bool _3416_isDatatype = _3275___mcc_h45;
          bool _3417_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3418_field = _3273___mcc_h43;
          DAST._IExpression _3419_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3420_onString;
            bool _3421_onOwned;
            bool _3422_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3423_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1593;
            bool _out1594;
            bool _out1595;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1596;
            DCOMP.COMP.GenExpr(_3419_on, selfIdent, @params, false, out _out1593, out _out1594, out _out1595, out _out1596);
            _3420_onString = _out1593;
            _3421_onOwned = _out1594;
            _3422_onErased = _out1595;
            _3423_recIdents = _out1596;
            if ((_3416_isDatatype) || (_3417_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3420_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3418_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3417_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3420_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3418_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3423_recIdents;
          }
        } else if (_source166.is_BinOp) {
          DAST._IBinOp _3424___mcc_h102 = _source166.dtor_op;
          DAST._IExpression _3425___mcc_h103 = _source166.dtor_left;
          DAST._IExpression _3426___mcc_h104 = _source166.dtor_right;
          bool _3427_isDatatype = _3275___mcc_h45;
          bool _3428_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3429_field = _3273___mcc_h43;
          DAST._IExpression _3430_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3431_onString;
            bool _3432_onOwned;
            bool _3433_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3434_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1597;
            bool _out1598;
            bool _out1599;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
            DCOMP.COMP.GenExpr(_3430_on, selfIdent, @params, false, out _out1597, out _out1598, out _out1599, out _out1600);
            _3431_onString = _out1597;
            _3432_onOwned = _out1598;
            _3433_onErased = _out1599;
            _3434_recIdents = _out1600;
            if ((_3427_isDatatype) || (_3428_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3431_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3429_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3428_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3431_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3429_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3434_recIdents;
          }
        } else if (_source166.is_ArrayLen) {
          DAST._IExpression _3435___mcc_h108 = _source166.dtor_expr;
          BigInteger _3436___mcc_h109 = _source166.dtor_dim;
          bool _3437_isDatatype = _3275___mcc_h45;
          bool _3438_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3439_field = _3273___mcc_h43;
          DAST._IExpression _3440_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3441_onString;
            bool _3442_onOwned;
            bool _3443_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3444_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1601;
            bool _out1602;
            bool _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            DCOMP.COMP.GenExpr(_3440_on, selfIdent, @params, false, out _out1601, out _out1602, out _out1603, out _out1604);
            _3441_onString = _out1601;
            _3442_onOwned = _out1602;
            _3443_onErased = _out1603;
            _3444_recIdents = _out1604;
            if ((_3437_isDatatype) || (_3438_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3441_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3439_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3438_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3441_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3439_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3444_recIdents;
          }
        } else if (_source166.is_Select) {
          DAST._IExpression _3445___mcc_h112 = _source166.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3446___mcc_h113 = _source166.dtor_field;
          bool _3447___mcc_h114 = _source166.dtor_isConstant;
          bool _3448___mcc_h115 = _source166.dtor_onDatatype;
          bool _3449_isDatatype = _3275___mcc_h45;
          bool _3450_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3451_field = _3273___mcc_h43;
          DAST._IExpression _3452_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3453_onString;
            bool _3454_onOwned;
            bool _3455_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3456_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1605;
            bool _out1606;
            bool _out1607;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
            DCOMP.COMP.GenExpr(_3452_on, selfIdent, @params, false, out _out1605, out _out1606, out _out1607, out _out1608);
            _3453_onString = _out1605;
            _3454_onOwned = _out1606;
            _3455_onErased = _out1607;
            _3456_recIdents = _out1608;
            if ((_3449_isDatatype) || (_3450_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3453_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3451_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3450_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3453_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3451_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3456_recIdents;
          }
        } else if (_source166.is_SelectFn) {
          DAST._IExpression _3457___mcc_h120 = _source166.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3458___mcc_h121 = _source166.dtor_field;
          bool _3459___mcc_h122 = _source166.dtor_onDatatype;
          bool _3460___mcc_h123 = _source166.dtor_isStatic;
          BigInteger _3461___mcc_h124 = _source166.dtor_arity;
          bool _3462_isDatatype = _3275___mcc_h45;
          bool _3463_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3464_field = _3273___mcc_h43;
          DAST._IExpression _3465_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3466_onString;
            bool _3467_onOwned;
            bool _3468_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3469_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1609;
            bool _out1610;
            bool _out1611;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
            DCOMP.COMP.GenExpr(_3465_on, selfIdent, @params, false, out _out1609, out _out1610, out _out1611, out _out1612);
            _3466_onString = _out1609;
            _3467_onOwned = _out1610;
            _3468_onErased = _out1611;
            _3469_recIdents = _out1612;
            if ((_3462_isDatatype) || (_3463_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3466_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3464_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3463_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3466_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3464_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3469_recIdents;
          }
        } else if (_source166.is_Index) {
          DAST._IExpression _3470___mcc_h130 = _source166.dtor_expr;
          DAST._ICollKind _3471___mcc_h131 = _source166.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3472___mcc_h132 = _source166.dtor_indices;
          bool _3473_isDatatype = _3275___mcc_h45;
          bool _3474_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3475_field = _3273___mcc_h43;
          DAST._IExpression _3476_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3477_onString;
            bool _3478_onOwned;
            bool _3479_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3480_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1613;
            bool _out1614;
            bool _out1615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1616;
            DCOMP.COMP.GenExpr(_3476_on, selfIdent, @params, false, out _out1613, out _out1614, out _out1615, out _out1616);
            _3477_onString = _out1613;
            _3478_onOwned = _out1614;
            _3479_onErased = _out1615;
            _3480_recIdents = _out1616;
            if ((_3473_isDatatype) || (_3474_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3477_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3475_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3474_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3477_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3475_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3480_recIdents;
          }
        } else if (_source166.is_IndexRange) {
          DAST._IExpression _3481___mcc_h136 = _source166.dtor_expr;
          bool _3482___mcc_h137 = _source166.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _3483___mcc_h138 = _source166.dtor_low;
          DAST._IOptional<DAST._IExpression> _3484___mcc_h139 = _source166.dtor_high;
          bool _3485_isDatatype = _3275___mcc_h45;
          bool _3486_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3487_field = _3273___mcc_h43;
          DAST._IExpression _3488_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3489_onString;
            bool _3490_onOwned;
            bool _3491_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3492_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1617;
            bool _out1618;
            bool _out1619;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1620;
            DCOMP.COMP.GenExpr(_3488_on, selfIdent, @params, false, out _out1617, out _out1618, out _out1619, out _out1620);
            _3489_onString = _out1617;
            _3490_onOwned = _out1618;
            _3491_onErased = _out1619;
            _3492_recIdents = _out1620;
            if ((_3485_isDatatype) || (_3486_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3489_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3487_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3486_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3489_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3487_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3492_recIdents;
          }
        } else if (_source166.is_TupleSelect) {
          DAST._IExpression _3493___mcc_h144 = _source166.dtor_expr;
          BigInteger _3494___mcc_h145 = _source166.dtor_index;
          bool _3495_isDatatype = _3275___mcc_h45;
          bool _3496_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3497_field = _3273___mcc_h43;
          DAST._IExpression _3498_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3499_onString;
            bool _3500_onOwned;
            bool _3501_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3502_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1621;
            bool _out1622;
            bool _out1623;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1624;
            DCOMP.COMP.GenExpr(_3498_on, selfIdent, @params, false, out _out1621, out _out1622, out _out1623, out _out1624);
            _3499_onString = _out1621;
            _3500_onOwned = _out1622;
            _3501_onErased = _out1623;
            _3502_recIdents = _out1624;
            if ((_3495_isDatatype) || (_3496_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3499_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3497_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3496_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3499_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3497_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3502_recIdents;
          }
        } else if (_source166.is_Call) {
          DAST._IExpression _3503___mcc_h148 = _source166.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3504___mcc_h149 = _source166.dtor_name;
          Dafny.ISequence<DAST._IType> _3505___mcc_h150 = _source166.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3506___mcc_h151 = _source166.dtor_args;
          bool _3507_isDatatype = _3275___mcc_h45;
          bool _3508_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3509_field = _3273___mcc_h43;
          DAST._IExpression _3510_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3511_onString;
            bool _3512_onOwned;
            bool _3513_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3514_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1625;
            bool _out1626;
            bool _out1627;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
            DCOMP.COMP.GenExpr(_3510_on, selfIdent, @params, false, out _out1625, out _out1626, out _out1627, out _out1628);
            _3511_onString = _out1625;
            _3512_onOwned = _out1626;
            _3513_onErased = _out1627;
            _3514_recIdents = _out1628;
            if ((_3507_isDatatype) || (_3508_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3511_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3509_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3508_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3511_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3509_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3514_recIdents;
          }
        } else if (_source166.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3515___mcc_h156 = _source166.dtor_params;
          DAST._IType _3516___mcc_h157 = _source166.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3517___mcc_h158 = _source166.dtor_body;
          bool _3518_isDatatype = _3275___mcc_h45;
          bool _3519_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3520_field = _3273___mcc_h43;
          DAST._IExpression _3521_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3522_onString;
            bool _3523_onOwned;
            bool _3524_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3525_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1629;
            bool _out1630;
            bool _out1631;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
            DCOMP.COMP.GenExpr(_3521_on, selfIdent, @params, false, out _out1629, out _out1630, out _out1631, out _out1632);
            _3522_onString = _out1629;
            _3523_onOwned = _out1630;
            _3524_onErased = _out1631;
            _3525_recIdents = _out1632;
            if ((_3518_isDatatype) || (_3519_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3522_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3520_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3519_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3522_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3520_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3525_recIdents;
          }
        } else if (_source166.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3526___mcc_h162 = _source166.dtor_values;
          DAST._IType _3527___mcc_h163 = _source166.dtor_retType;
          DAST._IExpression _3528___mcc_h164 = _source166.dtor_expr;
          bool _3529_isDatatype = _3275___mcc_h45;
          bool _3530_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3531_field = _3273___mcc_h43;
          DAST._IExpression _3532_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3533_onString;
            bool _3534_onOwned;
            bool _3535_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3536_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1633;
            bool _out1634;
            bool _out1635;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
            DCOMP.COMP.GenExpr(_3532_on, selfIdent, @params, false, out _out1633, out _out1634, out _out1635, out _out1636);
            _3533_onString = _out1633;
            _3534_onOwned = _out1634;
            _3535_onErased = _out1635;
            _3536_recIdents = _out1636;
            if ((_3529_isDatatype) || (_3530_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3533_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3531_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3530_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3533_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3531_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3536_recIdents;
          }
        } else if (_source166.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3537___mcc_h168 = _source166.dtor_name;
          DAST._IType _3538___mcc_h169 = _source166.dtor_typ;
          DAST._IExpression _3539___mcc_h170 = _source166.dtor_value;
          DAST._IExpression _3540___mcc_h171 = _source166.dtor_iifeBody;
          bool _3541_isDatatype = _3275___mcc_h45;
          bool _3542_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3543_field = _3273___mcc_h43;
          DAST._IExpression _3544_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3545_onString;
            bool _3546_onOwned;
            bool _3547_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3548_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1637;
            bool _out1638;
            bool _out1639;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1640;
            DCOMP.COMP.GenExpr(_3544_on, selfIdent, @params, false, out _out1637, out _out1638, out _out1639, out _out1640);
            _3545_onString = _out1637;
            _3546_onOwned = _out1638;
            _3547_onErased = _out1639;
            _3548_recIdents = _out1640;
            if ((_3541_isDatatype) || (_3542_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3545_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3543_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3542_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3545_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3543_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3548_recIdents;
          }
        } else if (_source166.is_Apply) {
          DAST._IExpression _3549___mcc_h176 = _source166.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3550___mcc_h177 = _source166.dtor_args;
          bool _3551_isDatatype = _3275___mcc_h45;
          bool _3552_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3553_field = _3273___mcc_h43;
          DAST._IExpression _3554_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3555_onString;
            bool _3556_onOwned;
            bool _3557_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3558_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1641;
            bool _out1642;
            bool _out1643;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
            DCOMP.COMP.GenExpr(_3554_on, selfIdent, @params, false, out _out1641, out _out1642, out _out1643, out _out1644);
            _3555_onString = _out1641;
            _3556_onOwned = _out1642;
            _3557_onErased = _out1643;
            _3558_recIdents = _out1644;
            if ((_3551_isDatatype) || (_3552_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3555_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3553_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3552_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3555_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3553_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3558_recIdents;
          }
        } else if (_source166.is_TypeTest) {
          DAST._IExpression _3559___mcc_h180 = _source166.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3560___mcc_h181 = _source166.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3561___mcc_h182 = _source166.dtor_variant;
          bool _3562_isDatatype = _3275___mcc_h45;
          bool _3563_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3564_field = _3273___mcc_h43;
          DAST._IExpression _3565_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3566_onString;
            bool _3567_onOwned;
            bool _3568_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3569_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1645;
            bool _out1646;
            bool _out1647;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1648;
            DCOMP.COMP.GenExpr(_3565_on, selfIdent, @params, false, out _out1645, out _out1646, out _out1647, out _out1648);
            _3566_onString = _out1645;
            _3567_onOwned = _out1646;
            _3568_onErased = _out1647;
            _3569_recIdents = _out1648;
            if ((_3562_isDatatype) || (_3563_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3566_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3564_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3563_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3566_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3564_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3569_recIdents;
          }
        } else if (_source166.is_InitializationValue) {
          DAST._IType _3570___mcc_h186 = _source166.dtor_typ;
          bool _3571_isDatatype = _3275___mcc_h45;
          bool _3572_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3573_field = _3273___mcc_h43;
          DAST._IExpression _3574_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3575_onString;
            bool _3576_onOwned;
            bool _3577_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3578_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1649;
            bool _out1650;
            bool _out1651;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1652;
            DCOMP.COMP.GenExpr(_3574_on, selfIdent, @params, false, out _out1649, out _out1650, out _out1651, out _out1652);
            _3575_onString = _out1649;
            _3576_onOwned = _out1650;
            _3577_onErased = _out1651;
            _3578_recIdents = _out1652;
            if ((_3571_isDatatype) || (_3572_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3575_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3573_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3572_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3575_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3573_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3578_recIdents;
          }
        } else if (_source166.is_BoolBoundedPool) {
          bool _3579_isDatatype = _3275___mcc_h45;
          bool _3580_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3581_field = _3273___mcc_h43;
          DAST._IExpression _3582_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3583_onString;
            bool _3584_onOwned;
            bool _3585_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3586_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1653;
            bool _out1654;
            bool _out1655;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1656;
            DCOMP.COMP.GenExpr(_3582_on, selfIdent, @params, false, out _out1653, out _out1654, out _out1655, out _out1656);
            _3583_onString = _out1653;
            _3584_onOwned = _out1654;
            _3585_onErased = _out1655;
            _3586_recIdents = _out1656;
            if ((_3579_isDatatype) || (_3580_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3583_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3581_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3580_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3583_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3581_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3586_recIdents;
          }
        } else if (_source166.is_SetBoundedPool) {
          DAST._IExpression _3587___mcc_h188 = _source166.dtor_of;
          bool _3588_isDatatype = _3275___mcc_h45;
          bool _3589_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3590_field = _3273___mcc_h43;
          DAST._IExpression _3591_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3592_onString;
            bool _3593_onOwned;
            bool _3594_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3595_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1657;
            bool _out1658;
            bool _out1659;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1660;
            DCOMP.COMP.GenExpr(_3591_on, selfIdent, @params, false, out _out1657, out _out1658, out _out1659, out _out1660);
            _3592_onString = _out1657;
            _3593_onOwned = _out1658;
            _3594_onErased = _out1659;
            _3595_recIdents = _out1660;
            if ((_3588_isDatatype) || (_3589_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3592_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3590_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3589_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3592_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3590_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3595_recIdents;
          }
        } else if (_source166.is_SeqBoundedPool) {
          DAST._IExpression _3596___mcc_h190 = _source166.dtor_of;
          bool _3597___mcc_h191 = _source166.dtor_includeDuplicates;
          bool _3598_isDatatype = _3275___mcc_h45;
          bool _3599_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3600_field = _3273___mcc_h43;
          DAST._IExpression _3601_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3602_onString;
            bool _3603_onOwned;
            bool _3604_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3605_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1661;
            bool _out1662;
            bool _out1663;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1664;
            DCOMP.COMP.GenExpr(_3601_on, selfIdent, @params, false, out _out1661, out _out1662, out _out1663, out _out1664);
            _3602_onString = _out1661;
            _3603_onOwned = _out1662;
            _3604_onErased = _out1663;
            _3605_recIdents = _out1664;
            if ((_3598_isDatatype) || (_3599_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3602_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3600_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3599_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3602_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3600_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3605_recIdents;
          }
        } else {
          DAST._IExpression _3606___mcc_h194 = _source166.dtor_lo;
          DAST._IExpression _3607___mcc_h195 = _source166.dtor_hi;
          bool _3608_isDatatype = _3275___mcc_h45;
          bool _3609_isConstant = _3274___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3610_field = _3273___mcc_h43;
          DAST._IExpression _3611_on = _3272___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3612_onString;
            bool _3613_onOwned;
            bool _3614_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3615_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1665;
            bool _out1666;
            bool _out1667;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
            DCOMP.COMP.GenExpr(_3611_on, selfIdent, @params, false, out _out1665, out _out1666, out _out1667, out _out1668);
            _3612_onString = _out1665;
            _3613_onOwned = _out1666;
            _3614_onErased = _out1667;
            _3615_recIdents = _out1668;
            if ((_3608_isDatatype) || (_3609_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3612_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3610_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3609_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3612_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3610_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3615_recIdents;
          }
        }
      } else if (_source106.is_SelectFn) {
        DAST._IExpression _3616___mcc_h198 = _source106.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3617___mcc_h199 = _source106.dtor_field;
        bool _3618___mcc_h200 = _source106.dtor_onDatatype;
        bool _3619___mcc_h201 = _source106.dtor_isStatic;
        BigInteger _3620___mcc_h202 = _source106.dtor_arity;
        BigInteger _3621_arity = _3620___mcc_h202;
        bool _3622_isStatic = _3619___mcc_h201;
        bool _3623_isDatatype = _3618___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3624_field = _3617___mcc_h199;
        DAST._IExpression _3625_on = _3616___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3626_onString;
          bool _3627_onOwned;
          bool _3628___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3629_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1669;
          bool _out1670;
          bool _out1671;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1672;
          DCOMP.COMP.GenExpr(_3625_on, selfIdent, @params, false, out _out1669, out _out1670, out _out1671, out _out1672);
          _3626_onString = _out1669;
          _3627_onOwned = _out1670;
          _3628___v82 = _out1671;
          _3629_recIdents = _out1672;
          if (_3622_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3626_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3624_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3626_onString), ((_3627_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3630_args;
            _3630_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3631_i;
            _3631_i = BigInteger.Zero;
            while ((_3631_i) < (_3621_arity)) {
              if ((_3631_i).Sign == 1) {
                _3630_args = Dafny.Sequence<Dafny.Rune>.Concat(_3630_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3630_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3630_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_3631_i));
              _3631_i = (_3631_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3630_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3624_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3630_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3632_typeShape;
          _3632_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3633_i;
          _3633_i = BigInteger.Zero;
          while ((_3633_i) < (_3621_arity)) {
            if ((_3633_i).Sign == 1) {
              _3632_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3632_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3632_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3632_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3633_i = (_3633_i) + (BigInteger.One);
          }
          _3632_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3632_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3632_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3629_recIdents;
        }
      } else if (_source106.is_Index) {
        DAST._IExpression _3634___mcc_h203 = _source106.dtor_expr;
        DAST._ICollKind _3635___mcc_h204 = _source106.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3636___mcc_h205 = _source106.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3637_indices = _3636___mcc_h205;
        DAST._ICollKind _3638_collKind = _3635___mcc_h204;
        DAST._IExpression _3639_on = _3634___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3640_onString;
          bool _3641_onOwned;
          bool _3642_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3643_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1673;
          bool _out1674;
          bool _out1675;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1676;
          DCOMP.COMP.GenExpr(_3639_on, selfIdent, @params, false, out _out1673, out _out1674, out _out1675, out _out1676);
          _3640_onString = _out1673;
          _3641_onOwned = _out1674;
          _3642_onErased = _out1675;
          _3643_recIdents = _out1676;
          readIdents = _3643_recIdents;
          s = _3640_onString;
          BigInteger _3644_i;
          _3644_i = BigInteger.Zero;
          while ((_3644_i) < (new BigInteger((_3637_indices).Count))) {
            if (object.Equals(_3638_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3638_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3645_idx;
              bool _3646_idxOwned;
              bool _3647_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3648_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1677;
              bool _out1678;
              bool _out1679;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1680;
              DCOMP.COMP.GenExpr((_3637_indices).Select(_3644_i), selfIdent, @params, false, out _out1677, out _out1678, out _out1679, out _out1680);
              _3645_idx = _out1677;
              _3646_idxOwned = _out1678;
              _3647_idxErased = _out1679;
              _3648_recIdentsIdx = _out1680;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3646_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3645_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3648_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3649_idx;
              bool _3650___v83;
              bool _3651_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3652_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1681;
              bool _out1682;
              bool _out1683;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1684;
              DCOMP.COMP.GenExpr((_3637_indices).Select(_3644_i), selfIdent, @params, true, out _out1681, out _out1682, out _out1683, out _out1684);
              _3649_idx = _out1681;
              _3650___v83 = _out1682;
              _3651_idxErased = _out1683;
              _3652_recIdentsIdx = _out1684;
              if (!(_3651_idxErased)) {
                _3649_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3649_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3649_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3652_recIdentsIdx);
            }
            _3644_i = (_3644_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3642_onErased;
        }
      } else if (_source106.is_IndexRange) {
        DAST._IExpression _3653___mcc_h206 = _source106.dtor_expr;
        bool _3654___mcc_h207 = _source106.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _3655___mcc_h208 = _source106.dtor_low;
        DAST._IOptional<DAST._IExpression> _3656___mcc_h209 = _source106.dtor_high;
        DAST._IOptional<DAST._IExpression> _3657_high = _3656___mcc_h209;
        DAST._IOptional<DAST._IExpression> _3658_low = _3655___mcc_h208;
        bool _3659_isArray = _3654___mcc_h207;
        DAST._IExpression _3660_on = _3653___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3661_onString;
          bool _3662_onOwned;
          bool _3663_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3664_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1685;
          bool _out1686;
          bool _out1687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1688;
          DCOMP.COMP.GenExpr(_3660_on, selfIdent, @params, false, out _out1685, out _out1686, out _out1687, out _out1688);
          _3661_onString = _out1685;
          _3662_onOwned = _out1686;
          _3663_onErased = _out1687;
          _3664_recIdents = _out1688;
          readIdents = _3664_recIdents;
          s = _3661_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3665_lowString;
          _3665_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source167 = _3658_low;
          if (_source167.is_Some) {
            DAST._IExpression _3666___mcc_h1195 = _source167.dtor_Some_a0;
            DAST._IExpression _3667_l = _3666___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3668_lString;
              bool _3669___v84;
              bool _3670_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3671_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1689;
              bool _out1690;
              bool _out1691;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
              DCOMP.COMP.GenExpr(_3667_l, selfIdent, @params, true, out _out1689, out _out1690, out _out1691, out _out1692);
              _3668_lString = _out1689;
              _3669___v84 = _out1690;
              _3670_lErased = _out1691;
              _3671_recIdentsL = _out1692;
              if (!(_3670_lErased)) {
                _3668_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3668_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3665_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3668_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3671_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3672_highString;
          _3672_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source168 = _3657_high;
          if (_source168.is_Some) {
            DAST._IExpression _3673___mcc_h1196 = _source168.dtor_Some_a0;
            DAST._IExpression _3674_h = _3673___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3675_hString;
              bool _3676___v85;
              bool _3677_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3678_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1693;
              bool _out1694;
              bool _out1695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1696;
              DCOMP.COMP.GenExpr(_3674_h, selfIdent, @params, true, out _out1693, out _out1694, out _out1695, out _out1696);
              _3675_hString = _out1693;
              _3676___v85 = _out1694;
              _3677_hErased = _out1695;
              _3678_recIdentsH = _out1696;
              if (!(_3677_hErased)) {
                _3675_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3675_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3672_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3675_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3678_recIdentsH);
            }
          } else {
          }
          if (_3659_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source169) => {
            if (_source169.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3679___mcc_h1197 = _source169.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3680_l = _3679___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3680_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3665_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source170) => {
            if (_source170.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3681___mcc_h1198 = _source170.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3682_h = _3681___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3682_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3672_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3663_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source106.is_TupleSelect) {
        DAST._IExpression _3683___mcc_h210 = _source106.dtor_expr;
        BigInteger _3684___mcc_h211 = _source106.dtor_index;
        BigInteger _3685_idx = _3684___mcc_h211;
        DAST._IExpression _3686_on = _3683___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3687_onString;
          bool _3688___v86;
          bool _3689_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3690_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1697;
          bool _out1698;
          bool _out1699;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1700;
          DCOMP.COMP.GenExpr(_3686_on, selfIdent, @params, false, out _out1697, out _out1698, out _out1699, out _out1700);
          _3687_onString = _out1697;
          _3688___v86 = _out1698;
          _3689_tupErased = _out1699;
          _3690_recIdents = _out1700;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3687_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_3685_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3689_tupErased;
          readIdents = _3690_recIdents;
        }
      } else if (_source106.is_Call) {
        DAST._IExpression _3691___mcc_h212 = _source106.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3692___mcc_h213 = _source106.dtor_name;
        Dafny.ISequence<DAST._IType> _3693___mcc_h214 = _source106.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3694___mcc_h215 = _source106.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3695_args = _3694___mcc_h215;
        Dafny.ISequence<DAST._IType> _3696_typeArgs = _3693___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3697_name = _3692___mcc_h213;
        DAST._IExpression _3698_on = _3691___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3699_typeArgString;
          _3699_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3696_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3700_typeI;
            _3700_typeI = BigInteger.Zero;
            _3699_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3700_typeI) < (new BigInteger((_3696_typeArgs).Count))) {
              if ((_3700_typeI).Sign == 1) {
                _3699_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3699_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3701_typeString;
              Dafny.ISequence<Dafny.Rune> _out1701;
              _out1701 = DCOMP.COMP.GenType((_3696_typeArgs).Select(_3700_typeI), false, false);
              _3701_typeString = _out1701;
              _3699_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3699_typeArgString, _3701_typeString);
              _3700_typeI = (_3700_typeI) + (BigInteger.One);
            }
            _3699_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3699_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3702_argString;
          _3702_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3703_i;
          _3703_i = BigInteger.Zero;
          while ((_3703_i) < (new BigInteger((_3695_args).Count))) {
            if ((_3703_i).Sign == 1) {
              _3702_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3702_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3704_argExpr;
            bool _3705_isOwned;
            bool _3706_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3707_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1702;
            bool _out1703;
            bool _out1704;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
            DCOMP.COMP.GenExpr((_3695_args).Select(_3703_i), selfIdent, @params, false, out _out1702, out _out1703, out _out1704, out _out1705);
            _3704_argExpr = _out1702;
            _3705_isOwned = _out1703;
            _3706_argErased = _out1704;
            _3707_argIdents = _out1705;
            if (_3705_isOwned) {
              _3704_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3704_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3706_argErased)) {
              _3704_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3704_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3704_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3704_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3702_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3702_argString, _3704_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3707_argIdents);
            _3703_i = (_3703_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3708_enclosingString;
          bool _3709___v87;
          bool _3710___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3711_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1706;
          bool _out1707;
          bool _out1708;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1709;
          DCOMP.COMP.GenExpr(_3698_on, selfIdent, @params, false, out _out1706, out _out1707, out _out1708, out _out1709);
          _3708_enclosingString = _out1706;
          _3709___v87 = _out1707;
          _3710___v88 = _out1708;
          _3711_recIdents = _out1709;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3711_recIdents);
          DAST._IExpression _source171 = _3698_on;
          if (_source171.is_Literal) {
            DAST._ILiteral _3712___mcc_h1199 = _source171.dtor_Literal_a0;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3713___mcc_h1201 = _source171.dtor_Ident_a0;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3714___mcc_h1203 = _source171.dtor_Companion_a0;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3708_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3715___mcc_h1205 = _source171.dtor_Tuple_a0;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3716___mcc_h1207 = _source171.dtor_path;
            Dafny.ISequence<DAST._IType> _3717___mcc_h1208 = _source171.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3718___mcc_h1209 = _source171.dtor_args;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3719___mcc_h1213 = _source171.dtor_dims;
            DAST._IType _3720___mcc_h1214 = _source171.dtor_typ;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3721___mcc_h1217 = _source171.dtor_path;
            Dafny.ISequence<DAST._IType> _3722___mcc_h1218 = _source171.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3723___mcc_h1219 = _source171.dtor_variant;
            bool _3724___mcc_h1220 = _source171.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3725___mcc_h1221 = _source171.dtor_contents;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Convert) {
            DAST._IExpression _3726___mcc_h1227 = _source171.dtor_value;
            DAST._IType _3727___mcc_h1228 = _source171.dtor_from;
            DAST._IType _3728___mcc_h1229 = _source171.dtor_typ;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_SeqConstruct) {
            DAST._IExpression _3729___mcc_h1233 = _source171.dtor_length;
            DAST._IExpression _3730___mcc_h1234 = _source171.dtor_elem;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3731___mcc_h1237 = _source171.dtor_elements;
            DAST._IType _3732___mcc_h1238 = _source171.dtor_typ;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3733___mcc_h1241 = _source171.dtor_elements;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3734___mcc_h1243 = _source171.dtor_mapElems;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_This) {
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Ite) {
            DAST._IExpression _3735___mcc_h1245 = _source171.dtor_cond;
            DAST._IExpression _3736___mcc_h1246 = _source171.dtor_thn;
            DAST._IExpression _3737___mcc_h1247 = _source171.dtor_els;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_UnOp) {
            DAST._IUnaryOp _3738___mcc_h1251 = _source171.dtor_unOp;
            DAST._IExpression _3739___mcc_h1252 = _source171.dtor_expr;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_BinOp) {
            DAST._IBinOp _3740___mcc_h1255 = _source171.dtor_op;
            DAST._IExpression _3741___mcc_h1256 = _source171.dtor_left;
            DAST._IExpression _3742___mcc_h1257 = _source171.dtor_right;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_ArrayLen) {
            DAST._IExpression _3743___mcc_h1261 = _source171.dtor_expr;
            BigInteger _3744___mcc_h1262 = _source171.dtor_dim;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Select) {
            DAST._IExpression _3745___mcc_h1265 = _source171.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3746___mcc_h1266 = _source171.dtor_field;
            bool _3747___mcc_h1267 = _source171.dtor_isConstant;
            bool _3748___mcc_h1268 = _source171.dtor_onDatatype;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_SelectFn) {
            DAST._IExpression _3749___mcc_h1273 = _source171.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3750___mcc_h1274 = _source171.dtor_field;
            bool _3751___mcc_h1275 = _source171.dtor_onDatatype;
            bool _3752___mcc_h1276 = _source171.dtor_isStatic;
            BigInteger _3753___mcc_h1277 = _source171.dtor_arity;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Index) {
            DAST._IExpression _3754___mcc_h1283 = _source171.dtor_expr;
            DAST._ICollKind _3755___mcc_h1284 = _source171.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3756___mcc_h1285 = _source171.dtor_indices;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_IndexRange) {
            DAST._IExpression _3757___mcc_h1289 = _source171.dtor_expr;
            bool _3758___mcc_h1290 = _source171.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3759___mcc_h1291 = _source171.dtor_low;
            DAST._IOptional<DAST._IExpression> _3760___mcc_h1292 = _source171.dtor_high;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_TupleSelect) {
            DAST._IExpression _3761___mcc_h1297 = _source171.dtor_expr;
            BigInteger _3762___mcc_h1298 = _source171.dtor_index;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Call) {
            DAST._IExpression _3763___mcc_h1301 = _source171.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3764___mcc_h1302 = _source171.dtor_name;
            Dafny.ISequence<DAST._IType> _3765___mcc_h1303 = _source171.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3766___mcc_h1304 = _source171.dtor_args;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3767___mcc_h1309 = _source171.dtor_params;
            DAST._IType _3768___mcc_h1310 = _source171.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3769___mcc_h1311 = _source171.dtor_body;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3770___mcc_h1315 = _source171.dtor_values;
            DAST._IType _3771___mcc_h1316 = _source171.dtor_retType;
            DAST._IExpression _3772___mcc_h1317 = _source171.dtor_expr;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3773___mcc_h1321 = _source171.dtor_name;
            DAST._IType _3774___mcc_h1322 = _source171.dtor_typ;
            DAST._IExpression _3775___mcc_h1323 = _source171.dtor_value;
            DAST._IExpression _3776___mcc_h1324 = _source171.dtor_iifeBody;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_Apply) {
            DAST._IExpression _3777___mcc_h1329 = _source171.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3778___mcc_h1330 = _source171.dtor_args;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_TypeTest) {
            DAST._IExpression _3779___mcc_h1333 = _source171.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3780___mcc_h1334 = _source171.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3781___mcc_h1335 = _source171.dtor_variant;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_InitializationValue) {
            DAST._IType _3782___mcc_h1339 = _source171.dtor_typ;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_BoolBoundedPool) {
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_SetBoundedPool) {
            DAST._IExpression _3783___mcc_h1341 = _source171.dtor_of;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else if (_source171.is_SeqBoundedPool) {
            DAST._IExpression _3784___mcc_h1343 = _source171.dtor_of;
            bool _3785___mcc_h1344 = _source171.dtor_includeDuplicates;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          } else {
            DAST._IExpression _3786___mcc_h1347 = _source171.dtor_lo;
            DAST._IExpression _3787___mcc_h1348 = _source171.dtor_hi;
            {
              _3708_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3708_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3697_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3708_enclosingString, _3699_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3702_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3788___mcc_h216 = _source106.dtor_params;
        DAST._IType _3789___mcc_h217 = _source106.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3790___mcc_h218 = _source106.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3791_body = _3790___mcc_h218;
        DAST._IType _3792_retType = _3789___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3793_params = _3788___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3794_paramNames;
          _3794_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3795_i;
          _3795_i = BigInteger.Zero;
          while ((_3795_i) < (new BigInteger((_3793_params).Count))) {
            _3794_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3794_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3793_params).Select(_3795_i)).dtor_name));
            _3795_i = (_3795_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3796_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3797_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1710;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1711;
          DCOMP.COMP.GenStmts(_3791_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3794_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1710, out _out1711);
          _3796_recursiveGen = _out1710;
          _3797_recIdents = _out1711;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3798_allReadCloned;
          _3798_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3797_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3799_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_3797_recIdents).Elements) {
              _3799_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_3797_recIdents).Contains(_3799_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3799_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3798_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3798_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3794_paramNames).Contains(_3799_next))) {
              _3798_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3798_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3799_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3799_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3799_next));
            }
            _3797_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3797_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3799_next));
          }
          Dafny.ISequence<Dafny.Rune> _3800_paramsString;
          _3800_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3801_paramTypes;
          _3801_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3795_i = BigInteger.Zero;
          while ((_3795_i) < (new BigInteger((_3793_params).Count))) {
            if ((_3795_i).Sign == 1) {
              _3800_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3800_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3801_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3801_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3802_typStr;
            Dafny.ISequence<Dafny.Rune> _out1712;
            _out1712 = DCOMP.COMP.GenType(((_3793_params).Select(_3795_i)).dtor_typ, false, true);
            _3802_typStr = _out1712;
            _3800_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3800_paramsString, ((_3793_params).Select(_3795_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3802_typStr);
            _3801_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3801_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3802_typStr);
            _3795_i = (_3795_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3803_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1713;
          _out1713 = DCOMP.COMP.GenType(_3792_retType, false, true);
          _3803_retTypeGen = _out1713;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3801_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3803_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3798_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3800_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3803_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3796_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3804___mcc_h219 = _source106.dtor_values;
        DAST._IType _3805___mcc_h220 = _source106.dtor_retType;
        DAST._IExpression _3806___mcc_h221 = _source106.dtor_expr;
        DAST._IExpression _3807_expr = _3806___mcc_h221;
        DAST._IType _3808_retType = _3805___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3809_values = _3804___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3810_paramNames;
          _3810_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3811_paramNamesSet;
          _3811_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3812_i;
          _3812_i = BigInteger.Zero;
          while ((_3812_i) < (new BigInteger((_3809_values).Count))) {
            _3810_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3810_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3809_values).Select(_3812_i)).dtor__0).dtor_name));
            _3811_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3811_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3809_values).Select(_3812_i)).dtor__0).dtor_name));
            _3812_i = (_3812_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3813_paramsString;
          _3813_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3812_i = BigInteger.Zero;
          while ((_3812_i) < (new BigInteger((_3809_values).Count))) {
            if ((_3812_i).Sign == 1) {
              _3813_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3813_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3814_typStr;
            Dafny.ISequence<Dafny.Rune> _out1714;
            _out1714 = DCOMP.COMP.GenType((((_3809_values).Select(_3812_i)).dtor__0).dtor_typ, false, true);
            _3814_typStr = _out1714;
            Dafny.ISequence<Dafny.Rune> _3815_valueGen;
            bool _3816___v91;
            bool _3817_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3818_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1715;
            bool _out1716;
            bool _out1717;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
            DCOMP.COMP.GenExpr(((_3809_values).Select(_3812_i)).dtor__1, selfIdent, @params, true, out _out1715, out _out1716, out _out1717, out _out1718);
            _3815_valueGen = _out1715;
            _3816___v91 = _out1716;
            _3817_valueErased = _out1717;
            _3818_recIdents = _out1718;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3809_values).Select(_3812_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3814_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3818_recIdents);
            if (_3817_valueErased) {
              _3815_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3815_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3815_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3812_i = (_3812_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3819_recGen;
          bool _3820_recOwned;
          bool _3821_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3822_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1719;
          bool _out1720;
          bool _out1721;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1722;
          DCOMP.COMP.GenExpr(_3807_expr, selfIdent, _3810_paramNames, mustOwn, out _out1719, out _out1720, out _out1721, out _out1722);
          _3819_recGen = _out1719;
          _3820_recOwned = _out1720;
          _3821_recErased = _out1721;
          _3822_recIdents = _out1722;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3822_recIdents, _3811_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3819_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3820_recOwned;
          isErased = _3821_recErased;
        }
      } else if (_source106.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3823___mcc_h222 = _source106.dtor_name;
        DAST._IType _3824___mcc_h223 = _source106.dtor_typ;
        DAST._IExpression _3825___mcc_h224 = _source106.dtor_value;
        DAST._IExpression _3826___mcc_h225 = _source106.dtor_iifeBody;
        DAST._IExpression _3827_iifeBody = _3826___mcc_h225;
        DAST._IExpression _3828_value = _3825___mcc_h224;
        DAST._IType _3829_tpe = _3824___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3830_name = _3823___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3831_valueGen;
          bool _3832___v92;
          bool _3833_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3834_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1723;
          bool _out1724;
          bool _out1725;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1726;
          DCOMP.COMP.GenExpr(_3828_value, selfIdent, @params, true, out _out1723, out _out1724, out _out1725, out _out1726);
          _3831_valueGen = _out1723;
          _3832___v92 = _out1724;
          _3833_valueErased = _out1725;
          _3834_recIdents = _out1726;
          if (_3833_valueErased) {
            _3831_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3831_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3834_recIdents;
          Dafny.ISequence<Dafny.Rune> _3835_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1727;
          _out1727 = DCOMP.COMP.GenType(_3829_tpe, false, true);
          _3835_valueTypeGen = _out1727;
          Dafny.ISequence<Dafny.Rune> _3836_bodyGen;
          bool _3837___v93;
          bool _3838_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3839_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1728;
          bool _out1729;
          bool _out1730;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1731;
          DCOMP.COMP.GenExpr(_3827_iifeBody, selfIdent, @params, true, out _out1728, out _out1729, out _out1730, out _out1731);
          _3836_bodyGen = _out1728;
          _3837___v93 = _out1729;
          _3838_bodyErased = _out1730;
          _3839_bodyIdents = _out1731;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3839_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3830_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3830_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3835_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3831_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3836_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3838_bodyErased;
        }
      } else if (_source106.is_Apply) {
        DAST._IExpression _3840___mcc_h226 = _source106.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3841___mcc_h227 = _source106.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3842_args = _3841___mcc_h227;
        DAST._IExpression _3843_func = _3840___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3844_funcString;
          bool _3845___v94;
          bool _3846_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3847_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1732;
          bool _out1733;
          bool _out1734;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1735;
          DCOMP.COMP.GenExpr(_3843_func, selfIdent, @params, false, out _out1732, out _out1733, out _out1734, out _out1735);
          _3844_funcString = _out1732;
          _3845___v94 = _out1733;
          _3846_funcErased = _out1734;
          _3847_recIdents = _out1735;
          readIdents = _3847_recIdents;
          Dafny.ISequence<Dafny.Rune> _3848_argString;
          _3848_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3849_i;
          _3849_i = BigInteger.Zero;
          while ((_3849_i) < (new BigInteger((_3842_args).Count))) {
            if ((_3849_i).Sign == 1) {
              _3848_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3848_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3850_argExpr;
            bool _3851_isOwned;
            bool _3852_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3853_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1736;
            bool _out1737;
            bool _out1738;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
            DCOMP.COMP.GenExpr((_3842_args).Select(_3849_i), selfIdent, @params, false, out _out1736, out _out1737, out _out1738, out _out1739);
            _3850_argExpr = _out1736;
            _3851_isOwned = _out1737;
            _3852_argErased = _out1738;
            _3853_argIdents = _out1739;
            if (_3851_isOwned) {
              _3850_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3850_argExpr);
            }
            _3848_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3848_argString, _3850_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3853_argIdents);
            _3849_i = (_3849_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3844_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3848_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source106.is_TypeTest) {
        DAST._IExpression _3854___mcc_h228 = _source106.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3855___mcc_h229 = _source106.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3856___mcc_h230 = _source106.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3857_variant = _3856___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3858_dType = _3855___mcc_h229;
        DAST._IExpression _3859_on = _3854___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3860_exprGen;
          bool _3861___v95;
          bool _3862_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3863_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1740;
          bool _out1741;
          bool _out1742;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1743;
          DCOMP.COMP.GenExpr(_3859_on, selfIdent, @params, false, out _out1740, out _out1741, out _out1742, out _out1743);
          _3860_exprGen = _out1740;
          _3861___v95 = _out1741;
          _3862_exprErased = _out1742;
          _3863_recIdents = _out1743;
          Dafny.ISequence<Dafny.Rune> _3864_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1744;
          _out1744 = DCOMP.COMP.GenPath(_3858_dType);
          _3864_dTypePath = _out1744;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3860_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3864_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3857_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3863_recIdents;
        }
      } else if (_source106.is_InitializationValue) {
        DAST._IType _3865___mcc_h231 = _source106.dtor_typ;
        DAST._IType _3866_typ = _3865___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3867_typString;
          Dafny.ISequence<Dafny.Rune> _out1745;
          _out1745 = DCOMP.COMP.GenType(_3866_typ, false, false);
          _3867_typString = _out1745;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3867_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source106.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source106.is_SetBoundedPool) {
        DAST._IExpression _3868___mcc_h232 = _source106.dtor_of;
        DAST._IExpression _3869_of = _3868___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3870_exprGen;
          bool _3871___v96;
          bool _3872_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3873_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1746;
          bool _out1747;
          bool _out1748;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1749;
          DCOMP.COMP.GenExpr(_3869_of, selfIdent, @params, false, out _out1746, out _out1747, out _out1748, out _out1749);
          _3870_exprGen = _out1746;
          _3871___v96 = _out1747;
          _3872_exprErased = _out1748;
          _3873_recIdents = _out1749;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3870_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3872_exprErased;
          readIdents = _3873_recIdents;
        }
      } else if (_source106.is_SeqBoundedPool) {
        DAST._IExpression _3874___mcc_h233 = _source106.dtor_of;
        bool _3875___mcc_h234 = _source106.dtor_includeDuplicates;
        bool _3876_includeDuplicates = _3875___mcc_h234;
        DAST._IExpression _3877_of = _3874___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3878_exprGen;
          bool _3879___v97;
          bool _3880_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3881_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1750;
          bool _out1751;
          bool _out1752;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1753;
          DCOMP.COMP.GenExpr(_3877_of, selfIdent, @params, false, out _out1750, out _out1751, out _out1752, out _out1753);
          _3878_exprGen = _out1750;
          _3879___v97 = _out1751;
          _3880_exprErased = _out1752;
          _3881_recIdents = _out1753;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3878_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3876_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3880_exprErased;
          readIdents = _3881_recIdents;
        }
      } else {
        DAST._IExpression _3882___mcc_h235 = _source106.dtor_lo;
        DAST._IExpression _3883___mcc_h236 = _source106.dtor_hi;
        DAST._IExpression _3884_hi = _3883___mcc_h236;
        DAST._IExpression _3885_lo = _3882___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3886_loString;
          bool _3887___v98;
          bool _3888_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3889_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1754;
          bool _out1755;
          bool _out1756;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1757;
          DCOMP.COMP.GenExpr(_3885_lo, selfIdent, @params, true, out _out1754, out _out1755, out _out1756, out _out1757);
          _3886_loString = _out1754;
          _3887___v98 = _out1755;
          _3888_loErased = _out1756;
          _3889_recIdentsLo = _out1757;
          Dafny.ISequence<Dafny.Rune> _3890_hiString;
          bool _3891___v99;
          bool _3892_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3893_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1758;
          bool _out1759;
          bool _out1760;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1761;
          DCOMP.COMP.GenExpr(_3884_hi, selfIdent, @params, true, out _out1758, out _out1759, out _out1760, out _out1761);
          _3890_hiString = _out1758;
          _3891___v99 = _out1759;
          _3892_hiErased = _out1760;
          _3893_recIdentsHi = _out1761;
          if (!(_3888_loErased)) {
            _3886_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3886_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3892_hiErased)) {
            _3890_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3890_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3886_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3890_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3889_recIdentsLo, _3893_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3894_i;
      _3894_i = BigInteger.Zero;
      while ((_3894_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3895_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1762;
        _out1762 = DCOMP.COMP.GenModule((p).Select(_3894_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3895_generated = _out1762;
        if ((_3894_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3895_generated);
        _3894_i = (_3894_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3896_i;
      _3896_i = BigInteger.Zero;
      while ((_3896_i) < (new BigInteger((fullName).Count))) {
        if ((_3896_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3896_i));
        _3896_i = (_3896_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

