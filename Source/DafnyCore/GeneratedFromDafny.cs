// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error) {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default) {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error) {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs) {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).Elements) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
    TAIL_CALL_START:;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v) {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length) {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys) {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator) {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim) {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START:;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7231)");
      after__ASSIGN_SUCH_THAT_0:;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a) {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq) {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y) {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y) {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d) {
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d) {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d) {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m) {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e) {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START:;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow) {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit, _148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.HexConversion.__default.HEX__DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit, _165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.DecimalConversion.__default.DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape) {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineNotInner { get; }
    _IUnOpFormat DowncastClone();
  }
  public abstract class UnOpFormat : _IUnOpFormat {
    public UnOpFormat() {
    }
    private static readonly DAST.Format._IUnOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnOpFormat>(DAST.Format.UnOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnOpFormat create_NoFormat() {
      return new UnOpFormat_NoFormat();
    }
    public static _IUnOpFormat create_CombineNotInner() {
      return new UnOpFormat_CombineNotInner();
    }
    public bool is_NoFormat { get { return this is UnOpFormat_NoFormat; } }
    public bool is_CombineNotInner { get { return this is UnOpFormat_CombineNotInner; } }
    public static System.Collections.Generic.IEnumerable<_IUnOpFormat> AllSingletonConstructors {
      get {
        yield return UnOpFormat.create_NoFormat();
        yield return UnOpFormat.create_CombineNotInner();
      }
    }
    public abstract _IUnOpFormat DowncastClone();
  }
  public class UnOpFormat_NoFormat : UnOpFormat {
    public UnOpFormat_NoFormat() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.NoFormat";
      return s;
    }
  }
  public class UnOpFormat_CombineNotInner : UnOpFormat {
    public UnOpFormat_CombineNotInner() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_CombineNotInner();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_CombineNotInner;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.CombineNotInner";
      return s;
    }
  }

  public interface _IBinOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_Equivalence { get; }
    bool is_ReverseOperands { get; }
    _IBinOpFormat DowncastClone();
  }
  public abstract class BinOpFormat : _IBinOpFormat {
    public BinOpFormat() {
    }
    private static readonly DAST.Format._IBinOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinOpFormat>(DAST.Format.BinOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOpFormat create_NoFormat() {
      return new BinOpFormat_NoFormat();
    }
    public static _IBinOpFormat create_ImpliesFormat() {
      return new BinOpFormat_ImpliesFormat();
    }
    public static _IBinOpFormat create_Equivalence() {
      return new BinOpFormat_Equivalence();
    }
    public static _IBinOpFormat create_ReverseOperands() {
      return new BinOpFormat_ReverseOperands();
    }
    public bool is_NoFormat { get { return this is BinOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinOpFormat_ImpliesFormat; } }
    public bool is_Equivalence { get { return this is BinOpFormat_Equivalence; } }
    public bool is_ReverseOperands { get { return this is BinOpFormat_ReverseOperands; } }
    public static System.Collections.Generic.IEnumerable<_IBinOpFormat> AllSingletonConstructors {
      get {
        yield return BinOpFormat.create_NoFormat();
        yield return BinOpFormat.create_ImpliesFormat();
        yield return BinOpFormat.create_Equivalence();
        yield return BinOpFormat.create_ReverseOperands();
      }
    }
    public abstract _IBinOpFormat DowncastClone();
  }
  public class BinOpFormat_NoFormat : BinOpFormat {
    public BinOpFormat_NoFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.NoFormat";
      return s;
    }
  }
  public class BinOpFormat_ImpliesFormat : BinOpFormat {
    public BinOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinOpFormat_Equivalence : BinOpFormat {
    public BinOpFormat_Equivalence() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_Equivalence();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_Equivalence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.Equivalence";
      return s;
    }
  }
  public class BinOpFormat_ReverseOperands : BinOpFormat {
    public BinOpFormat_ReverseOperands() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ReverseOperands();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ReverseOperands;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ReverseOperands";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _INewtypeRange {
    bool is_U8 { get; }
    bool is_I8 { get; }
    bool is_U16 { get; }
    bool is_I16 { get; }
    bool is_U32 { get; }
    bool is_I32 { get; }
    bool is_U64 { get; }
    bool is_I64 { get; }
    bool is_U128 { get; }
    bool is_I128 { get; }
    bool is_BigInt { get; }
    bool is_NoRange { get; }
    _INewtypeRange DowncastClone();
  }
  public abstract class NewtypeRange : _INewtypeRange {
    public NewtypeRange() {
    }
    private static readonly DAST._INewtypeRange theDefault = create_U8();
    public static DAST._INewtypeRange Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtypeRange> _TYPE = new Dafny.TypeDescriptor<DAST._INewtypeRange>(DAST.NewtypeRange.Default());
    public static Dafny.TypeDescriptor<DAST._INewtypeRange> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtypeRange create_U8() {
      return new NewtypeRange_U8();
    }
    public static _INewtypeRange create_I8() {
      return new NewtypeRange_I8();
    }
    public static _INewtypeRange create_U16() {
      return new NewtypeRange_U16();
    }
    public static _INewtypeRange create_I16() {
      return new NewtypeRange_I16();
    }
    public static _INewtypeRange create_U32() {
      return new NewtypeRange_U32();
    }
    public static _INewtypeRange create_I32() {
      return new NewtypeRange_I32();
    }
    public static _INewtypeRange create_U64() {
      return new NewtypeRange_U64();
    }
    public static _INewtypeRange create_I64() {
      return new NewtypeRange_I64();
    }
    public static _INewtypeRange create_U128() {
      return new NewtypeRange_U128();
    }
    public static _INewtypeRange create_I128() {
      return new NewtypeRange_I128();
    }
    public static _INewtypeRange create_BigInt() {
      return new NewtypeRange_BigInt();
    }
    public static _INewtypeRange create_NoRange() {
      return new NewtypeRange_NoRange();
    }
    public bool is_U8 { get { return this is NewtypeRange_U8; } }
    public bool is_I8 { get { return this is NewtypeRange_I8; } }
    public bool is_U16 { get { return this is NewtypeRange_U16; } }
    public bool is_I16 { get { return this is NewtypeRange_I16; } }
    public bool is_U32 { get { return this is NewtypeRange_U32; } }
    public bool is_I32 { get { return this is NewtypeRange_I32; } }
    public bool is_U64 { get { return this is NewtypeRange_U64; } }
    public bool is_I64 { get { return this is NewtypeRange_I64; } }
    public bool is_U128 { get { return this is NewtypeRange_U128; } }
    public bool is_I128 { get { return this is NewtypeRange_I128; } }
    public bool is_BigInt { get { return this is NewtypeRange_BigInt; } }
    public bool is_NoRange { get { return this is NewtypeRange_NoRange; } }
    public static System.Collections.Generic.IEnumerable<_INewtypeRange> AllSingletonConstructors {
      get {
        yield return NewtypeRange.create_U8();
        yield return NewtypeRange.create_I8();
        yield return NewtypeRange.create_U16();
        yield return NewtypeRange.create_I16();
        yield return NewtypeRange.create_U32();
        yield return NewtypeRange.create_I32();
        yield return NewtypeRange.create_U64();
        yield return NewtypeRange.create_I64();
        yield return NewtypeRange.create_U128();
        yield return NewtypeRange.create_I128();
        yield return NewtypeRange.create_BigInt();
        yield return NewtypeRange.create_NoRange();
      }
    }
    public abstract _INewtypeRange DowncastClone();
  }
  public class NewtypeRange_U8 : NewtypeRange {
    public NewtypeRange_U8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U8";
      return s;
    }
  }
  public class NewtypeRange_I8 : NewtypeRange {
    public NewtypeRange_I8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I8";
      return s;
    }
  }
  public class NewtypeRange_U16 : NewtypeRange {
    public NewtypeRange_U16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U16";
      return s;
    }
  }
  public class NewtypeRange_I16 : NewtypeRange {
    public NewtypeRange_I16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I16";
      return s;
    }
  }
  public class NewtypeRange_U32 : NewtypeRange {
    public NewtypeRange_U32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U32";
      return s;
    }
  }
  public class NewtypeRange_I32 : NewtypeRange {
    public NewtypeRange_I32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I32";
      return s;
    }
  }
  public class NewtypeRange_U64 : NewtypeRange {
    public NewtypeRange_U64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U64";
      return s;
    }
  }
  public class NewtypeRange_I64 : NewtypeRange {
    public NewtypeRange_I64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I64";
      return s;
    }
  }
  public class NewtypeRange_U128 : NewtypeRange {
    public NewtypeRange_U128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U128";
      return s;
    }
  }
  public class NewtypeRange_I128 : NewtypeRange {
    public NewtypeRange_I128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I128";
      return s;
    }
  }
  public class NewtypeRange_BigInt : NewtypeRange {
    public NewtypeRange_BigInt() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_BigInt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_BigInt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.BigInt";
      return s;
    }
  }
  public class NewtypeRange_NoRange : NewtypeRange {
    public NewtypeRange_NoRange() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_NoRange();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_NoRange;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.NoRange";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_baseType { get; }
    DAST._INewtypeRange dtor_range { get; }
    bool dtor_erase { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) {
      return new ResolvedType_Newtype(baseType, range, erase);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_baseType {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._baseType;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._range;
      }
    }
    public bool dtor_erase {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._erase;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _baseType;
    public readonly DAST._INewtypeRange _range;
    public readonly bool _erase;
    public ResolvedType_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase) : base() {
      this._baseType = baseType;
      this._range = range;
      this._erase = erase;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_baseType, _range, _erase);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._baseType, oth._baseType) && object.Equals(this._range, oth._range) && this._erase == oth._erase;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._erase));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._erase);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    DAST._INewtypeRange dtor_range { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly DAST._INewtypeRange _range;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._range = range;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _range, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._range, oth._range) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), DAST.NewtypeRange.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, range, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        return this._range;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _ICallName {
    bool is_Name { get; }
    bool is_MapBuilderAdd { get; }
    bool is_MapBuilderBuild { get; }
    bool is_SetBuilderAdd { get; }
    bool is_SetBuilderBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    _ICallName DowncastClone();
  }
  public abstract class CallName : _ICallName {
    public CallName() {
    }
    private static readonly DAST._ICallName theDefault = create_Name(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._ICallName Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICallName> _TYPE = new Dafny.TypeDescriptor<DAST._ICallName>(DAST.CallName.Default());
    public static Dafny.TypeDescriptor<DAST._ICallName> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICallName create_Name(Dafny.ISequence<Dafny.Rune> name) {
      return new CallName_Name(name);
    }
    public static _ICallName create_MapBuilderAdd() {
      return new CallName_MapBuilderAdd();
    }
    public static _ICallName create_MapBuilderBuild() {
      return new CallName_MapBuilderBuild();
    }
    public static _ICallName create_SetBuilderAdd() {
      return new CallName_SetBuilderAdd();
    }
    public static _ICallName create_SetBuilderBuild() {
      return new CallName_SetBuilderBuild();
    }
    public bool is_Name { get { return this is CallName_Name; } }
    public bool is_MapBuilderAdd { get { return this is CallName_MapBuilderAdd; } }
    public bool is_MapBuilderBuild { get { return this is CallName_MapBuilderBuild; } }
    public bool is_SetBuilderAdd { get { return this is CallName_SetBuilderAdd; } }
    public bool is_SetBuilderBuild { get { return this is CallName_SetBuilderBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((CallName_Name)d)._name;
      }
    }
    public abstract _ICallName DowncastClone();
  }
  public class CallName_Name : CallName {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public CallName_Name(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_Name(_name);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_Name;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.Name";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class CallName_MapBuilderAdd : CallName {
    public CallName_MapBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderAdd";
      return s;
    }
  }
  public class CallName_MapBuilderBuild : CallName {
    public CallName_MapBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderBuild";
      return s;
    }
  }
  public class CallName_SetBuilderAdd : CallName {
    public CallName_SetBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderAdd";
      return s;
    }
  }
  public class CallName_SetBuilderBuild : CallName {
    public CallName_SetBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderBuild";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, callName, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Statement_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _callName, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_LtChar { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SetDifference { get; }
    bool is_MapMerge { get; }
    bool is_MapSubtraction { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_LtChar() {
      return new BinOp_LtChar();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_MapMerge() {
      return new BinOp_MapMerge();
    }
    public static _IBinOp create_MapSubtraction() {
      return new BinOp_MapSubtraction();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_LtChar { get { return this is BinOp_LtChar; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_MapMerge { get { return this is BinOp_MapMerge; } }
    public bool is_MapSubtraction { get { return this is BinOp_MapSubtraction; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_LtChar : BinOp {
    public BinOp_LtChar() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_LtChar();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_LtChar;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.LtChar";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_MapMerge : BinOp {
    public BinOp_MapMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapMerge";
      return s;
    }
  }
  public class BinOp_MapSubtraction : BinOp {
    public BinOp_MapSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapSubtraction";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_MapBuilder { get; }
    bool is_SetBuilder { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_MapKeys { get; }
    bool is_MapValues { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IType dtor_keyType { get; }
    DAST._IType dtor_valueType { get; }
    DAST._IType dtor_elemType { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST.Format._IUnOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_MapBuilder(DAST._IType keyType, DAST._IType valueType) {
      return new Expression_MapBuilder(keyType, valueType);
    }
    public static _IExpression create_SetBuilder(DAST._IType elemType) {
      return new Expression_SetBuilder(elemType);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_MapKeys(DAST._IExpression expr) {
      return new Expression_MapKeys(expr);
    }
    public static _IExpression create_MapValues(DAST._IExpression expr) {
      return new Expression_MapValues(expr);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, callName, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_MapBuilder { get { return this is Expression_MapBuilder; } }
    public bool is_SetBuilder { get { return this is Expression_SetBuilder; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_MapKeys { get { return this is Expression_MapKeys; } }
    public bool is_MapValues { get { return this is Expression_MapValues; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IType dtor_keyType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._keyType;
      }
    }
    public DAST._IType dtor_valueType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._valueType;
      }
    }
    public DAST._IType dtor_elemType {
      get {
        var d = this;
        return ((Expression_SetBuilder)d)._elemType;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_MapKeys) { return ((Expression_MapKeys)d)._expr; }
        if (d is Expression_MapValues) { return ((Expression_MapValues)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Expression_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expression_IIFE)d)._name;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_MapBuilder : Expression {
    public readonly DAST._IType _keyType;
    public readonly DAST._IType _valueType;
    public Expression_MapBuilder(DAST._IType keyType, DAST._IType valueType) : base() {
      this._keyType = keyType;
      this._valueType = valueType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapBuilder(_keyType, _valueType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapBuilder;
      return oth != null && object.Equals(this._keyType, oth._keyType) && object.Equals(this._valueType, oth._valueType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._keyType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._valueType));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._keyType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._valueType);
      s += ")";
      return s;
    }
  }
  public class Expression_SetBuilder : Expression {
    public readonly DAST._IType _elemType;
    public Expression_SetBuilder(DAST._IType elemType) : base() {
      this._elemType = elemType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBuilder(_elemType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBuilder;
      return oth != null && object.Equals(this._elemType, oth._elemType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elemType));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._elemType);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_MapKeys : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapKeys(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapKeys(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapKeys;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapKeys";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValues : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapValues(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValues(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValues;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValues";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _callName, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 36;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator) {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f) {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _801_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _802_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_801_i) < (_802_j)) {
          return _802_j;
        } else {
          return _801_i;
        }
      }
    }
    public static RAST._IType Rc(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc"), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RefCell(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell"), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType Vec(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec"), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IExpr NewVec(Dafny.ISequence<RAST._IExpr> elements) {
      return RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec!")), Dafny.Sequence<RAST._IType>.FromElements(), elements);
    }
    public static RAST._IType RawType(Dafny.ISequence<Dafny.Rune> content) {
      return RAST.Type.create_TypeApp(content, Dafny.Sequence<RAST._IType>.FromElements());
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _803___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j) {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static RAST._IExpr RcNew(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(underlying));
    }
    public static RAST._IType Self {
      get {
        return RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned());
      }
    }
    public static RAST._IType SelfMut {
      get {
        return RAST.Type.create_BorrowedMut(RAST.Type.create_SelfOwned());
      }
    }
    public static RAST._IType CloneTrait {
      get {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Clone"));
      }
    }
    public static RAST._IType DafnyPrintTrait {
      get {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"));
      }
    }
    public static RAST._IType DefaultTrait {
      get {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"));
      }
    }
    public static RAST._IType StaticTrait {
      get {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'static"));
      }
    }
    public static byte PUB {
      get {
        return (byte)(1);
      }
    }
    public static byte PRIV {
      get {
        return (byte)(0);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
      }
    }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _804___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _805___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _806_body = _805___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _807_name = _804___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _807_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_806_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_808_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_809_modDecl) => {
          return (_809_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_808_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _810___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _811_name = _810___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _811_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind) {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_812_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_813_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_813_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _812_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _INamelessFormal {
    bool is_NamelessFormal { get; }
    byte dtor_visibility { get; }
    RAST._IType dtor_tpe { get; }
    _INamelessFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class NamelessFormal : _INamelessFormal {
    public readonly byte _visibility;
    public readonly RAST._IType _tpe;
    public NamelessFormal(byte visibility, RAST._IType tpe) {
      this._visibility = visibility;
      this._tpe = tpe;
    }
    public _INamelessFormal DowncastClone() {
      if (this is _INamelessFormal dt) { return dt; }
      return new NamelessFormal(_visibility, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.NamelessFormal;
      return oth != null && this._visibility == oth._visibility && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visibility));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.NamelessFormal.NamelessFormal";
      s += "(";
      s += Dafny.Helpers.ToString(this._visibility);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._INamelessFormal theDefault = create(0, RAST.Type.Default());
    public static RAST._INamelessFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._INamelessFormal> _TYPE = new Dafny.TypeDescriptor<RAST._INamelessFormal>(RAST.NamelessFormal.Default());
    public static Dafny.TypeDescriptor<RAST._INamelessFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INamelessFormal create(byte visibility, RAST._IType tpe) {
      return new NamelessFormal(visibility, tpe);
    }
    public static _INamelessFormal create_NamelessFormal(byte visibility, RAST._IType tpe) {
      return create(visibility, tpe);
    }
    public bool is_NamelessFormal { get { return true; } }
    public byte dtor_visibility {
      get {
        return this._visibility;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(((((this).dtor_visibility) == (RAST.__default.PUB)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_tpe)._ToString(ind));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._INamelessFormal> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._INamelessFormal> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _814_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _815_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _816_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _815_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_817_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_818_field) => {
          return (_818_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_817_ind, RAST.__default.IND));
        })))(ind), _814_separator)), _816_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _819_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._INamelessFormal>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>)((_821_t) => {
          return (_821_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND));
        })))(ind), _819_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._INamelessFormal> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_823_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _822_ind), RAST.__default.IND), (_823_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<RAST._IType> dtor_constraints { get; }
    _ITypeParam DowncastClone();
    RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public readonly Dafny.ISequence<RAST._IType> _constraints;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      this._content = content;
      this._constraints = constraints;
    }
    public _ITypeParam DowncastClone() {
      if (this is _ITypeParam dt) { return dt; }
      return new TypeParam(_content, _constraints);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content) && object.Equals(this._constraints, oth._constraints);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._constraints));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._constraints);
      s += ")";
      return s;
    }
    private static readonly RAST._ITypeParam theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IType>.Empty);
    public static RAST._ITypeParam Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITypeParam> _TYPE = new Dafny.TypeDescriptor<RAST._ITypeParam>(RAST.TypeParam.Default());
    public static Dafny.TypeDescriptor<RAST._ITypeParam> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return new TypeParam(content, constraints);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return create(content, constraints);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_constraints {
      get {
        return this._constraints;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<Dafny.Rune> ind) {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._ITypeParam>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>)((_825_t) => {
          return (_825_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._ITypeParam> AddConstraintsMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IType> constraints) {
      Dafny.ISequence<RAST._ITypeParam> _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements());
      } else {
        _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements(((typeParams).Select(BigInteger.Zero)).AddConstraints(constraints)));
        Dafny.ISequence<RAST._ITypeParam> _in111 = (typeParams).Drop(BigInteger.One);
        Dafny.ISequence<RAST._IType> _in112 = constraints;
        typeParams = _in111;
        constraints = _in112;
        goto TAIL_CALL_START;
      }
    }
    public RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints) {
      RAST._ITypeParam _827_dt__update__tmp_h0 = this;
      Dafny.ISequence<RAST._IType> _828_dt__update_hconstraints_h0 = Dafny.Sequence<RAST._IType>.Concat((this).dtor_constraints, constraints);
      return RAST.TypeParam.create((_827_dt__update__tmp_h0).dtor_content, _828_dt__update_hconstraints_h0);
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_content, (((new BigInteger(((this).dtor_constraints).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), RAST.__default.SeqToString<RAST._IType>((this).dtor_constraints, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_829_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_830_t) => {
        return (_830_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_829_ind, RAST.__default.IND));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + "))))));
    }
  }

  public interface _IType {
    bool is_SelfOwned { get; }
    bool is_U8 { get; }
    bool is_U16 { get; }
    bool is_U32 { get; }
    bool is_U64 { get; }
    bool is_U128 { get; }
    bool is_I8 { get; }
    bool is_I16 { get; }
    bool is_I32 { get; }
    bool is_I64 { get; }
    bool is_I128 { get; }
    bool is_TypeApp { get; }
    bool is_Borrowed { get; }
    bool is_BorrowedMut { get; }
    bool is_ImplType { get; }
    bool is_DynType { get; }
    bool is_TupleType { get; }
    bool is_FnType { get; }
    bool is_IntersectionType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_baseName { get; }
    Dafny.ISequence<RAST._IType> dtor_arguments { get; }
    RAST._IType dtor_underlying { get; }
    RAST._IType dtor_returnType { get; }
    RAST._IType dtor_left { get; }
    RAST._IType dtor_right { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_SelfOwned();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_U8() {
      return new Type_U8();
    }
    public static _IType create_U16() {
      return new Type_U16();
    }
    public static _IType create_U32() {
      return new Type_U32();
    }
    public static _IType create_U64() {
      return new Type_U64();
    }
    public static _IType create_U128() {
      return new Type_U128();
    }
    public static _IType create_I8() {
      return new Type_I8();
    }
    public static _IType create_I16() {
      return new Type_I16();
    }
    public static _IType create_I32() {
      return new Type_I32();
    }
    public static _IType create_I64() {
      return new Type_I64();
    }
    public static _IType create_I128() {
      return new Type_I128();
    }
    public static _IType create_TypeApp(Dafny.ISequence<Dafny.Rune> baseName, Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TypeApp(baseName, arguments);
    }
    public static _IType create_Borrowed(RAST._IType underlying) {
      return new Type_Borrowed(underlying);
    }
    public static _IType create_BorrowedMut(RAST._IType underlying) {
      return new Type_BorrowedMut(underlying);
    }
    public static _IType create_ImplType(RAST._IType underlying) {
      return new Type_ImplType(underlying);
    }
    public static _IType create_DynType(RAST._IType underlying) {
      return new Type_DynType(underlying);
    }
    public static _IType create_TupleType(Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TupleType(arguments);
    }
    public static _IType create_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) {
      return new Type_FnType(arguments, returnType);
    }
    public static _IType create_IntersectionType(RAST._IType left, RAST._IType right) {
      return new Type_IntersectionType(left, right);
    }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_U8 { get { return this is Type_U8; } }
    public bool is_U16 { get { return this is Type_U16; } }
    public bool is_U32 { get { return this is Type_U32; } }
    public bool is_U64 { get { return this is Type_U64; } }
    public bool is_U128 { get { return this is Type_U128; } }
    public bool is_I8 { get { return this is Type_I8; } }
    public bool is_I16 { get { return this is Type_I16; } }
    public bool is_I32 { get { return this is Type_I32; } }
    public bool is_I64 { get { return this is Type_I64; } }
    public bool is_I128 { get { return this is Type_I128; } }
    public bool is_TypeApp { get { return this is Type_TypeApp; } }
    public bool is_Borrowed { get { return this is Type_Borrowed; } }
    public bool is_BorrowedMut { get { return this is Type_BorrowedMut; } }
    public bool is_ImplType { get { return this is Type_ImplType; } }
    public bool is_DynType { get { return this is Type_DynType; } }
    public bool is_TupleType { get { return this is Type_TupleType; } }
    public bool is_FnType { get { return this is Type_FnType; } }
    public bool is_IntersectionType { get { return this is Type_IntersectionType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_baseName {
      get {
        var d = this;
        return ((Type_TypeApp)d)._baseName;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_arguments {
      get {
        var d = this;
        if (d is Type_TypeApp) { return ((Type_TypeApp)d)._arguments; }
        if (d is Type_TupleType) { return ((Type_TupleType)d)._arguments; }
        return ((Type_FnType)d)._arguments;
      }
    }
    public RAST._IType dtor_underlying {
      get {
        var d = this;
        if (d is Type_Borrowed) { return ((Type_Borrowed)d)._underlying; }
        if (d is Type_BorrowedMut) { return ((Type_BorrowedMut)d)._underlying; }
        if (d is Type_ImplType) { return ((Type_ImplType)d)._underlying; }
        return ((Type_DynType)d)._underlying;
      }
    }
    public RAST._IType dtor_returnType {
      get {
        var d = this;
        return ((Type_FnType)d)._returnType;
      }
    }
    public RAST._IType dtor_left {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._left;
      }
    }
    public RAST._IType dtor_right {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._right;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IType _source26 = this;
      if (_source26.is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if (_source26.is_U8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8");
      } else if (_source26.is_U16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16");
      } else if (_source26.is_U32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32");
      } else if (_source26.is_U64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64");
      } else if (_source26.is_U128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128");
      } else if (_source26.is_I8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8");
      } else if (_source26.is_I16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16");
      } else if (_source26.is_I32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32");
      } else if (_source26.is_I64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64");
      } else if (_source26.is_I128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128");
      } else if (_source26.is_TypeApp) {
        Dafny.ISequence<Dafny.Rune> _831___mcc_h0 = _source26.dtor_baseName;
        Dafny.ISequence<RAST._IType> _832___mcc_h1 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _833_args = _832___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _834_base = _831___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(_834_base, (((_833_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._IType>(_833_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_835_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_836_arg) => {
          return (_836_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_835_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
      } else if (_source26.is_Borrowed) {
        RAST._IType _837___mcc_h2 = _source26.dtor_underlying;
        RAST._IType _838_underlying = _837___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), (_838_underlying)._ToString(ind));
      } else if (_source26.is_BorrowedMut) {
        RAST._IType _839___mcc_h3 = _source26.dtor_underlying;
        RAST._IType _840_underlying = _839___mcc_h3;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut "), (_840_underlying)._ToString(ind));
      } else if (_source26.is_ImplType) {
        RAST._IType _841___mcc_h4 = _source26.dtor_underlying;
        RAST._IType _842_underlying = _841___mcc_h4;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), (_842_underlying)._ToString(ind));
      } else if (_source26.is_DynType) {
        RAST._IType _843___mcc_h5 = _source26.dtor_underlying;
        RAST._IType _844_underlying = _843___mcc_h5;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn "), (_844_underlying)._ToString(ind));
      } else if (_source26.is_TupleType) {
        Dafny.ISequence<RAST._IType> _845___mcc_h6 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _846_args = _845___mcc_h6;
        if ((_846_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()");
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>(_846_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_847_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_848_arg) => {
            return (_848_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_847_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source26.is_FnType) {
        Dafny.ISequence<RAST._IType> _849___mcc_h7 = _source26.dtor_arguments;
        RAST._IType _850___mcc_h8 = _source26.dtor_returnType;
        RAST._IType _851_returnType = _850___mcc_h8;
        Dafny.ISequence<RAST._IType> _852_arguments = _849___mcc_h7;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Fn("), RAST.__default.SeqToString<RAST._IType>(_852_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_853_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_854_arg) => {
          return (_854_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_853_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_851_returnType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      } else {
        RAST._IType _855___mcc_h9 = _source26.dtor_left;
        RAST._IType _856___mcc_h10 = _source26.dtor_right;
        RAST._IType _857_right = _856___mcc_h10;
        RAST._IType _858_left = _855___mcc_h9;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_858_left)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")), (_857_right)._ToString(ind));
      }
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_U8 : Type {
    public Type_U8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U8";
      return s;
    }
  }
  public class Type_U16 : Type {
    public Type_U16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U16";
      return s;
    }
  }
  public class Type_U32 : Type {
    public Type_U32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U32";
      return s;
    }
  }
  public class Type_U64 : Type {
    public Type_U64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U64";
      return s;
    }
  }
  public class Type_U128 : Type {
    public Type_U128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U128";
      return s;
    }
  }
  public class Type_I8 : Type {
    public Type_I8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I8";
      return s;
    }
  }
  public class Type_I16 : Type {
    public Type_I16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I16";
      return s;
    }
  }
  public class Type_I32 : Type {
    public Type_I32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I32";
      return s;
    }
  }
  public class Type_I64 : Type {
    public Type_I64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I64";
      return s;
    }
  }
  public class Type_I128 : Type {
    public Type_I128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I128";
      return s;
    }
  }
  public class Type_TypeApp : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _baseName;
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TypeApp(Dafny.ISequence<Dafny.Rune> baseName, Dafny.ISequence<RAST._IType> arguments) : base() {
      this._baseName = baseName;
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeApp(_baseName, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TypeApp;
      return oth != null && object.Equals(this._baseName, oth._baseName) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TypeApp";
      s += "(";
      s += this._baseName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_Borrowed : Type {
    public readonly RAST._IType _underlying;
    public Type_Borrowed(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Borrowed(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Borrowed;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Borrowed";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_BorrowedMut : Type {
    public readonly RAST._IType _underlying;
    public Type_BorrowedMut(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_BorrowedMut(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_BorrowedMut;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.BorrowedMut";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_ImplType : Type {
    public readonly RAST._IType _underlying;
    public Type_ImplType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_ImplType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_ImplType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.ImplType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_DynType : Type {
    public readonly RAST._IType _underlying;
    public Type_DynType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_DynType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_DynType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.DynType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_TupleType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TupleType(Dafny.ISequence<RAST._IType> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TupleType(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TupleType;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TupleType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_FnType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public readonly RAST._IType _returnType;
    public Type_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) : base() {
      this._arguments = arguments;
      this._returnType = returnType;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_FnType(_arguments, _returnType);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_FnType;
      return oth != null && object.Equals(this._arguments, oth._arguments) && object.Equals(this._returnType, oth._returnType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.FnType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ")";
      return s;
    }
  }
  public class Type_IntersectionType : Type {
    public readonly RAST._IType _left;
    public readonly RAST._IType _right;
    public Type_IntersectionType(RAST._IType left, RAST._IType right) : base() {
      this._left = left;
      this._right = right;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_IntersectionType(_left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_IntersectionType;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.IntersectionType";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_859_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_860_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _859_ind), RAST.__default.IND), (_860_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_859_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_861_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_862_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _861_ind), RAST.__default.IND), (_862_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_861_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    byte dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(byte pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public byte dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((((this).dtor_pub) == (RAST.__default.PUB)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly byte _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(byte pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && this._pub == oth._pub && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public partial class VISIBILITY {
    public static System.Collections.Generic.IEnumerable<byte> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (byte)j; }
    }
    private static readonly Dafny.TypeDescriptor<byte> _TYPE = new Dafny.TypeDescriptor<byte>(0);
    public static Dafny.TypeDescriptor<byte> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned())))) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.__default.SelfMut)))) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal self {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.__default.Self);
      }
    }
    public static RAST._IFormal selfOwned {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
      }
    }
    public static RAST._IFormal selfMut {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.__default.SelfMut);
      }
    }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _863_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _864_rhsString = ((this).dtor_rhs)._ToString(_863_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_864_rhsString).Contains(new Dafny.Rune('\n'))) && (((_864_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _864_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _864_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IDeclareType {
    bool is_MUT { get; }
    bool is_CONST { get; }
    _IDeclareType DowncastClone();
  }
  public abstract class DeclareType : _IDeclareType {
    public DeclareType() {
    }
    private static readonly RAST._IDeclareType theDefault = create_MUT();
    public static RAST._IDeclareType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IDeclareType> _TYPE = new Dafny.TypeDescriptor<RAST._IDeclareType>(RAST.DeclareType.Default());
    public static Dafny.TypeDescriptor<RAST._IDeclareType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeclareType create_MUT() {
      return new DeclareType_MUT();
    }
    public static _IDeclareType create_CONST() {
      return new DeclareType_CONST();
    }
    public bool is_MUT { get { return this is DeclareType_MUT; } }
    public bool is_CONST { get { return this is DeclareType_CONST; } }
    public static System.Collections.Generic.IEnumerable<_IDeclareType> AllSingletonConstructors {
      get {
        yield return DeclareType.create_MUT();
        yield return DeclareType.create_CONST();
      }
    }
    public abstract _IDeclareType DowncastClone();
  }
  public class DeclareType_MUT : DeclareType {
    public DeclareType_MUT() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_MUT();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_MUT;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.MUT";
      return s;
    }
  }
  public class DeclareType_CONST : DeclareType {
    public DeclareType_CONST() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_CONST();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_CONST;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.CONST";
      return s;
    }
  }

  public interface _IAssociativity {
    bool is_LeftToRight { get; }
    bool is_RightToLeft { get; }
    bool is_RequiresParentheses { get; }
    _IAssociativity DowncastClone();
  }
  public abstract class Associativity : _IAssociativity {
    public Associativity() {
    }
    private static readonly RAST._IAssociativity theDefault = create_LeftToRight();
    public static RAST._IAssociativity Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssociativity> _TYPE = new Dafny.TypeDescriptor<RAST._IAssociativity>(RAST.Associativity.Default());
    public static Dafny.TypeDescriptor<RAST._IAssociativity> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssociativity create_LeftToRight() {
      return new Associativity_LeftToRight();
    }
    public static _IAssociativity create_RightToLeft() {
      return new Associativity_RightToLeft();
    }
    public static _IAssociativity create_RequiresParentheses() {
      return new Associativity_RequiresParentheses();
    }
    public bool is_LeftToRight { get { return this is Associativity_LeftToRight; } }
    public bool is_RightToLeft { get { return this is Associativity_RightToLeft; } }
    public bool is_RequiresParentheses { get { return this is Associativity_RequiresParentheses; } }
    public static System.Collections.Generic.IEnumerable<_IAssociativity> AllSingletonConstructors {
      get {
        yield return Associativity.create_LeftToRight();
        yield return Associativity.create_RightToLeft();
        yield return Associativity.create_RequiresParentheses();
      }
    }
    public abstract _IAssociativity DowncastClone();
  }
  public class Associativity_LeftToRight : Associativity {
    public Associativity_LeftToRight() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_LeftToRight();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_LeftToRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.LeftToRight";
      return s;
    }
  }
  public class Associativity_RightToLeft : Associativity {
    public Associativity_RightToLeft() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RightToLeft();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RightToLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RightToLeft";
      return s;
    }
  }
  public class Associativity_RequiresParentheses : Associativity {
    public Associativity_RequiresParentheses() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RequiresParentheses();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RequiresParentheses;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RequiresParentheses";
      return s;
    }
  }

  public interface _IPrintingInfo {
    bool is_Precedence { get; }
    bool is_SuffixPrecedence { get; }
    bool is_PrecedenceAssociativity { get; }
    BigInteger dtor_precedence { get; }
    RAST._IAssociativity dtor_associativity { get; }
    _IPrintingInfo DowncastClone();
  }
  public abstract class PrintingInfo : _IPrintingInfo {
    public PrintingInfo() {
    }
    private static readonly RAST._IPrintingInfo theDefault = create_Precedence(BigInteger.Zero);
    public static RAST._IPrintingInfo Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IPrintingInfo> _TYPE = new Dafny.TypeDescriptor<RAST._IPrintingInfo>(RAST.PrintingInfo.Default());
    public static Dafny.TypeDescriptor<RAST._IPrintingInfo> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrintingInfo create_Precedence(BigInteger precedence) {
      return new PrintingInfo_Precedence(precedence);
    }
    public static _IPrintingInfo create_SuffixPrecedence(BigInteger precedence) {
      return new PrintingInfo_SuffixPrecedence(precedence);
    }
    public static _IPrintingInfo create_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) {
      return new PrintingInfo_PrecedenceAssociativity(precedence, associativity);
    }
    public bool is_Precedence { get { return this is PrintingInfo_Precedence; } }
    public bool is_SuffixPrecedence { get { return this is PrintingInfo_SuffixPrecedence; } }
    public bool is_PrecedenceAssociativity { get { return this is PrintingInfo_PrecedenceAssociativity; } }
    public BigInteger dtor_precedence {
      get {
        var d = this;
        if (d is PrintingInfo_Precedence) { return ((PrintingInfo_Precedence)d)._precedence; }
        if (d is PrintingInfo_SuffixPrecedence) { return ((PrintingInfo_SuffixPrecedence)d)._precedence; }
        return ((PrintingInfo_PrecedenceAssociativity)d)._precedence;
      }
    }
    public RAST._IAssociativity dtor_associativity {
      get {
        var d = this;
        return ((PrintingInfo_PrecedenceAssociativity)d)._associativity;
      }
    }
    public abstract _IPrintingInfo DowncastClone();
  }
  public class PrintingInfo_Precedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_Precedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_Precedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_Precedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.Precedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_SuffixPrecedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_SuffixPrecedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_SuffixPrecedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_SuffixPrecedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.SuffixPrecedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_PrecedenceAssociativity : PrintingInfo {
    public readonly BigInteger _precedence;
    public readonly RAST._IAssociativity _associativity;
    public PrintingInfo_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) : base() {
      this._precedence = precedence;
      this._associativity = associativity;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_PrecedenceAssociativity(_precedence, _associativity);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_PrecedenceAssociativity;
      return oth != null && this._precedence == oth._precedence && object.Equals(this._associativity, oth._associativity);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._associativity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.PrecedenceAssociativity";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ", ";
      s += Dafny.Helpers.ToString(this._associativity);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_Tuple { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    bool is_LiteralInt { get; }
    bool is_ConversionNum { get; }
    bool is_DeclareVar { get; }
    bool is_AssignVar { get; }
    bool is_IfExpr { get; }
    bool is_Loop { get; }
    bool is_For { get; }
    bool is_Labelled { get; }
    bool is_Break { get; }
    bool is_Continue { get; }
    bool is_Return { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    bool is_Borrow { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<RAST._IExpr> dtor_arguments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_value { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IDeclareType dtor_declareType { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_optType { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs { get; }
    RAST._IExpr dtor_cond { get; }
    RAST._IExpr dtor_thn { get; }
    RAST._IExpr dtor_els { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optCond { get; }
    RAST._IExpr dtor_range { get; }
    RAST._IExpr dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr { get; }
    RAST._IExpr dtor_obj { get; }
    Dafny.ISequence<RAST._IType> dtor_typeParameters { get; }
    _IExpr DowncastClone();
    bool NoExtraSemicolonAfter();
    RAST._IPrintingInfo printingInfo { get; }
    BigInteger Height();
    RAST._IExpr Optimize();
    bool LeftRequiresParentheses(RAST._IExpr left);
    bool RightRequiresParentheses(RAST._IExpr right);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(name, assignments);
    }
    public static _IExpr create_Tuple(Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Tuple(arguments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public static _IExpr create_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) {
      return new Expr_LiteralInt(@value);
    }
    public static _IExpr create_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) {
      return new Expr_ConversionNum(tpe, underlying);
    }
    public static _IExpr create_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) {
      return new Expr_DeclareVar(declareType, name, optType, optRhs);
    }
    public static _IExpr create_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) {
      return new Expr_AssignVar(name, rhs);
    }
    public static _IExpr create_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) {
      return new Expr_IfExpr(cond, thn, els);
    }
    public static _IExpr create_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) {
      return new Expr_Loop(optCond, underlying);
    }
    public static _IExpr create_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) {
      return new Expr_For(name, range, body);
    }
    public static _IExpr create_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) {
      return new Expr_Labelled(lbl, underlying);
    }
    public static _IExpr create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Break(optLbl);
    }
    public static _IExpr create_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Continue(optLbl);
    }
    public static _IExpr create_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) {
      return new Expr_Return(optExpr);
    }
    public static _IExpr create_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Call(obj, typeParameters, arguments);
    }
    public static _IExpr create_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Select(obj, name);
    }
    public static _IExpr create_Borrow(RAST._IExpr underlying) {
      return new Expr_Borrow(underlying);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_Tuple { get { return this is Expr_Tuple; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public bool is_LiteralInt { get { return this is Expr_LiteralInt; } }
    public bool is_ConversionNum { get { return this is Expr_ConversionNum; } }
    public bool is_DeclareVar { get { return this is Expr_DeclareVar; } }
    public bool is_AssignVar { get { return this is Expr_AssignVar; } }
    public bool is_IfExpr { get { return this is Expr_IfExpr; } }
    public bool is_Loop { get { return this is Expr_Loop; } }
    public bool is_For { get { return this is Expr_For; } }
    public bool is_Labelled { get { return this is Expr_Labelled; } }
    public bool is_Break { get { return this is Expr_Break; } }
    public bool is_Continue { get { return this is Expr_Continue; } }
    public bool is_Return { get { return this is Expr_Return; } }
    public bool is_Call { get { return this is Expr_Call; } }
    public bool is_Select { get { return this is Expr_Select; } }
    public bool is_Borrow { get { return this is Expr_Borrow; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        if (d is Expr_StmtExpr) { return ((Expr_StmtExpr)d)._rhs; }
        return ((Expr_AssignVar)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        if (d is Expr_UnaryOp) { return ((Expr_UnaryOp)d)._underlying; }
        if (d is Expr_ConversionNum) { return ((Expr_ConversionNum)d)._underlying; }
        if (d is Expr_Loop) { return ((Expr_Loop)d)._underlying; }
        if (d is Expr_Labelled) { return ((Expr_Labelled)d)._underlying; }
        return ((Expr_Borrow)d)._underlying;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expr_StructBuild) { return ((Expr_StructBuild)d)._name; }
        if (d is Expr_DeclareVar) { return ((Expr_DeclareVar)d)._name; }
        if (d is Expr_AssignVar) { return ((Expr_AssignVar)d)._name; }
        if (d is Expr_For) { return ((Expr_For)d)._name; }
        return ((Expr_Select)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<RAST._IExpr> dtor_arguments {
      get {
        var d = this;
        if (d is Expr_Tuple) { return ((Expr_Tuple)d)._arguments; }
        return ((Expr_Call)d)._arguments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_value {
      get {
        var d = this;
        return ((Expr_LiteralInt)d)._value;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        return ((Expr_ConversionNum)d)._tpe;
      }
    }
    public RAST._IDeclareType dtor_declareType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._declareType;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_optType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optType;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optRhs;
      }
    }
    public RAST._IExpr dtor_cond {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._cond;
      }
    }
    public RAST._IExpr dtor_thn {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._thn;
      }
    }
    public RAST._IExpr dtor_els {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._els;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optCond {
      get {
        var d = this;
        return ((Expr_Loop)d)._optCond;
      }
    }
    public RAST._IExpr dtor_range {
      get {
        var d = this;
        return ((Expr_For)d)._range;
      }
    }
    public RAST._IExpr dtor_body {
      get {
        var d = this;
        return ((Expr_For)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Expr_Labelled)d)._lbl;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl {
      get {
        var d = this;
        if (d is Expr_Break) { return ((Expr_Break)d)._optLbl; }
        return ((Expr_Continue)d)._optLbl;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr {
      get {
        var d = this;
        return ((Expr_Return)d)._optExpr;
      }
    }
    public RAST._IExpr dtor_obj {
      get {
        var d = this;
        if (d is Expr_Call) { return ((Expr_Call)d)._obj; }
        return ((Expr_Select)d)._obj;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_typeParameters {
      get {
        var d = this;
        return ((Expr_Call)d)._typeParameters;
      }
    }
    public abstract _IExpr DowncastClone();
    public bool NoExtraSemicolonAfter() {
      return ((((((this).is_DeclareVar) || ((this).is_AssignVar)) || ((this).is_Break)) || ((this).is_Continue)) || ((this).is_Return)) || ((((this).is_RawExpr) && ((new BigInteger(((this).dtor_content).Count)).Sign == 1)) && ((((this).dtor_content).Select((new BigInteger(((this).dtor_content).Count)) - (BigInteger.One))) == (new Dafny.Rune(';'))));
    }
    public BigInteger Height() {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _865___mcc_h0 = _source27.dtor_content;
        return BigInteger.One;
      } else if (_source27.is_Match) {
        RAST._IExpr _866___mcc_h2 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _867___mcc_h3 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _868_cases = _867___mcc_h3;
        RAST._IExpr _869_matchee = _866___mcc_h2;
        return (BigInteger.One) + (RAST.__default.max((_869_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_868_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_870_oneCase) => {
          return (_870_oneCase).Height();
        })))));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _871___mcc_h6 = _source27.dtor_stmt;
        RAST._IExpr _872___mcc_h7 = _source27.dtor_rhs;
        RAST._IExpr _873_rhs = _872___mcc_h7;
        RAST._IExpr _874_stmt = _871___mcc_h6;
        BigInteger _875_default = (BigInteger.One) + (RAST.__default.max((_874_stmt).Height(), (_873_rhs).Height()));
        RAST._IExpr _source28 = this;
        if (_source28.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _876___mcc_h88 = _source28.dtor_content;
          return _875_default;
        } else if (_source28.is_Match) {
          RAST._IExpr _877___mcc_h90 = _source28.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _878___mcc_h91 = _source28.dtor_cases;
          return _875_default;
        } else if (_source28.is_StmtExpr) {
          RAST._IExpr _879___mcc_h94 = _source28.dtor_stmt;
          RAST._IExpr _880___mcc_h95 = _source28.dtor_rhs;
          RAST._IExpr _source29 = _879___mcc_h94;
          if (_source29.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _881___mcc_h98 = _source29.dtor_content;
            return _875_default;
          } else if (_source29.is_Match) {
            RAST._IExpr _882___mcc_h100 = _source29.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _883___mcc_h101 = _source29.dtor_cases;
            return _875_default;
          } else if (_source29.is_StmtExpr) {
            RAST._IExpr _884___mcc_h104 = _source29.dtor_stmt;
            RAST._IExpr _885___mcc_h105 = _source29.dtor_rhs;
            return _875_default;
          } else if (_source29.is_Block) {
            RAST._IExpr _886___mcc_h108 = _source29.dtor_underlying;
            return _875_default;
          } else if (_source29.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _887___mcc_h110 = _source29.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _888___mcc_h111 = _source29.dtor_assignments;
            return _875_default;
          } else if (_source29.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _889___mcc_h114 = _source29.dtor_arguments;
            return _875_default;
          } else if (_source29.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _890___mcc_h116 = _source29.dtor_op1;
            RAST._IExpr _891___mcc_h117 = _source29.dtor_underlying;
            DAST.Format._IUnOpFormat _892___mcc_h118 = _source29.dtor_format;
            return _875_default;
          } else if (_source29.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _893___mcc_h122 = _source29.dtor_op2;
            RAST._IExpr _894___mcc_h123 = _source29.dtor_left;
            RAST._IExpr _895___mcc_h124 = _source29.dtor_right;
            DAST.Format._IBinOpFormat _896___mcc_h125 = _source29.dtor_format2;
            return _875_default;
          } else if (_source29.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _897___mcc_h130 = _source29.dtor_value;
            return _875_default;
          } else if (_source29.is_ConversionNum) {
            RAST._IType _898___mcc_h132 = _source29.dtor_tpe;
            RAST._IExpr _899___mcc_h133 = _source29.dtor_underlying;
            return _875_default;
          } else if (_source29.is_DeclareVar) {
            RAST._IDeclareType _900___mcc_h136 = _source29.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _901___mcc_h137 = _source29.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _902___mcc_h138 = _source29.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _903___mcc_h139 = _source29.dtor_optRhs;
            Std.Wrappers._IOption<RAST._IType> _source30 = _902___mcc_h138;
            if (_source30.is_None) {
              return _875_default;
            } else {
              RAST._IType _904___mcc_h144 = _source30.dtor_value;
              Std.Wrappers._IOption<RAST._IExpr> _source31 = _903___mcc_h139;
              if (_source31.is_None) {
                RAST._IExpr _source32 = _880___mcc_h95;
                if (_source32.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _905___mcc_h146 = _source32.dtor_content;
                  return _875_default;
                } else if (_source32.is_Match) {
                  RAST._IExpr _906___mcc_h148 = _source32.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _907___mcc_h149 = _source32.dtor_cases;
                  return _875_default;
                } else if (_source32.is_StmtExpr) {
                  RAST._IExpr _908___mcc_h152 = _source32.dtor_stmt;
                  RAST._IExpr _909___mcc_h153 = _source32.dtor_rhs;
                  RAST._IExpr _source33 = _908___mcc_h152;
                  if (_source33.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _910___mcc_h156 = _source33.dtor_content;
                    return _875_default;
                  } else if (_source33.is_Match) {
                    RAST._IExpr _911___mcc_h158 = _source33.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _912___mcc_h159 = _source33.dtor_cases;
                    return _875_default;
                  } else if (_source33.is_StmtExpr) {
                    RAST._IExpr _913___mcc_h162 = _source33.dtor_stmt;
                    RAST._IExpr _914___mcc_h163 = _source33.dtor_rhs;
                    return _875_default;
                  } else if (_source33.is_Block) {
                    RAST._IExpr _915___mcc_h166 = _source33.dtor_underlying;
                    return _875_default;
                  } else if (_source33.is_StructBuild) {
                    Dafny.ISequence<Dafny.Rune> _916___mcc_h168 = _source33.dtor_name;
                    Dafny.ISequence<RAST._IAssignIdentifier> _917___mcc_h169 = _source33.dtor_assignments;
                    return _875_default;
                  } else if (_source33.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _918___mcc_h172 = _source33.dtor_arguments;
                    return _875_default;
                  } else if (_source33.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _919___mcc_h174 = _source33.dtor_op1;
                    RAST._IExpr _920___mcc_h175 = _source33.dtor_underlying;
                    DAST.Format._IUnOpFormat _921___mcc_h176 = _source33.dtor_format;
                    return _875_default;
                  } else if (_source33.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _922___mcc_h180 = _source33.dtor_op2;
                    RAST._IExpr _923___mcc_h181 = _source33.dtor_left;
                    RAST._IExpr _924___mcc_h182 = _source33.dtor_right;
                    DAST.Format._IBinOpFormat _925___mcc_h183 = _source33.dtor_format2;
                    return _875_default;
                  } else if (_source33.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _926___mcc_h188 = _source33.dtor_value;
                    return _875_default;
                  } else if (_source33.is_ConversionNum) {
                    RAST._IType _927___mcc_h190 = _source33.dtor_tpe;
                    RAST._IExpr _928___mcc_h191 = _source33.dtor_underlying;
                    return _875_default;
                  } else if (_source33.is_DeclareVar) {
                    RAST._IDeclareType _929___mcc_h194 = _source33.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _930___mcc_h195 = _source33.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _931___mcc_h196 = _source33.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _932___mcc_h197 = _source33.dtor_optRhs;
                    return _875_default;
                  } else if (_source33.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _933___mcc_h202 = _source33.dtor_name;
                    RAST._IExpr _934___mcc_h203 = _source33.dtor_rhs;
                    RAST._IExpr _935_last = _909___mcc_h153;
                    RAST._IExpr _936_rhs = _934___mcc_h203;
                    Dafny.ISequence<Dafny.Rune> _937_name2 = _933___mcc_h202;
                    RAST._IType _938_tpe = _904___mcc_h144;
                    Dafny.ISequence<Dafny.Rune> _939_name = _901___mcc_h137;
                    RAST._IDeclareType _940_mod = _900___mcc_h136;
                    if ((_939_name).Equals(_937_name2)) {
                      return (BigInteger.One) + (_875_default);
                    } else {
                      return _875_default;
                    }
                  } else if (_source33.is_IfExpr) {
                    RAST._IExpr _941___mcc_h206 = _source33.dtor_cond;
                    RAST._IExpr _942___mcc_h207 = _source33.dtor_thn;
                    RAST._IExpr _943___mcc_h208 = _source33.dtor_els;
                    return _875_default;
                  } else if (_source33.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _944___mcc_h212 = _source33.dtor_optCond;
                    RAST._IExpr _945___mcc_h213 = _source33.dtor_underlying;
                    return _875_default;
                  } else if (_source33.is_For) {
                    Dafny.ISequence<Dafny.Rune> _946___mcc_h216 = _source33.dtor_name;
                    RAST._IExpr _947___mcc_h217 = _source33.dtor_range;
                    RAST._IExpr _948___mcc_h218 = _source33.dtor_body;
                    return _875_default;
                  } else if (_source33.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _949___mcc_h222 = _source33.dtor_lbl;
                    RAST._IExpr _950___mcc_h223 = _source33.dtor_underlying;
                    return _875_default;
                  } else if (_source33.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _951___mcc_h226 = _source33.dtor_optLbl;
                    return _875_default;
                  } else if (_source33.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _952___mcc_h228 = _source33.dtor_optLbl;
                    return _875_default;
                  } else if (_source33.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _953___mcc_h230 = _source33.dtor_optExpr;
                    return _875_default;
                  } else if (_source33.is_Call) {
                    RAST._IExpr _954___mcc_h232 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IType> _955___mcc_h233 = _source33.dtor_typeParameters;
                    Dafny.ISequence<RAST._IExpr> _956___mcc_h234 = _source33.dtor_arguments;
                    return _875_default;
                  } else if (_source33.is_Select) {
                    RAST._IExpr _957___mcc_h238 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _958___mcc_h239 = _source33.dtor_name;
                    return _875_default;
                  } else {
                    RAST._IExpr _959___mcc_h242 = _source33.dtor_underlying;
                    return _875_default;
                  }
                } else if (_source32.is_Block) {
                  RAST._IExpr _960___mcc_h244 = _source32.dtor_underlying;
                  return _875_default;
                } else if (_source32.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _961___mcc_h246 = _source32.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _962___mcc_h247 = _source32.dtor_assignments;
                  return _875_default;
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _963___mcc_h250 = _source32.dtor_arguments;
                  return _875_default;
                } else if (_source32.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _964___mcc_h252 = _source32.dtor_op1;
                  RAST._IExpr _965___mcc_h253 = _source32.dtor_underlying;
                  DAST.Format._IUnOpFormat _966___mcc_h254 = _source32.dtor_format;
                  return _875_default;
                } else if (_source32.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _967___mcc_h258 = _source32.dtor_op2;
                  RAST._IExpr _968___mcc_h259 = _source32.dtor_left;
                  RAST._IExpr _969___mcc_h260 = _source32.dtor_right;
                  DAST.Format._IBinOpFormat _970___mcc_h261 = _source32.dtor_format2;
                  return _875_default;
                } else if (_source32.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _971___mcc_h266 = _source32.dtor_value;
                  return _875_default;
                } else if (_source32.is_ConversionNum) {
                  RAST._IType _972___mcc_h268 = _source32.dtor_tpe;
                  RAST._IExpr _973___mcc_h269 = _source32.dtor_underlying;
                  return _875_default;
                } else if (_source32.is_DeclareVar) {
                  RAST._IDeclareType _974___mcc_h272 = _source32.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _975___mcc_h273 = _source32.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _976___mcc_h274 = _source32.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _977___mcc_h275 = _source32.dtor_optRhs;
                  return _875_default;
                } else if (_source32.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _978___mcc_h280 = _source32.dtor_name;
                  RAST._IExpr _979___mcc_h281 = _source32.dtor_rhs;
                  return _875_default;
                } else if (_source32.is_IfExpr) {
                  RAST._IExpr _980___mcc_h284 = _source32.dtor_cond;
                  RAST._IExpr _981___mcc_h285 = _source32.dtor_thn;
                  RAST._IExpr _982___mcc_h286 = _source32.dtor_els;
                  return _875_default;
                } else if (_source32.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _983___mcc_h290 = _source32.dtor_optCond;
                  RAST._IExpr _984___mcc_h291 = _source32.dtor_underlying;
                  return _875_default;
                } else if (_source32.is_For) {
                  Dafny.ISequence<Dafny.Rune> _985___mcc_h294 = _source32.dtor_name;
                  RAST._IExpr _986___mcc_h295 = _source32.dtor_range;
                  RAST._IExpr _987___mcc_h296 = _source32.dtor_body;
                  return _875_default;
                } else if (_source32.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _988___mcc_h300 = _source32.dtor_lbl;
                  RAST._IExpr _989___mcc_h301 = _source32.dtor_underlying;
                  return _875_default;
                } else if (_source32.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _990___mcc_h304 = _source32.dtor_optLbl;
                  return _875_default;
                } else if (_source32.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _991___mcc_h306 = _source32.dtor_optLbl;
                  return _875_default;
                } else if (_source32.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _992___mcc_h308 = _source32.dtor_optExpr;
                  return _875_default;
                } else if (_source32.is_Call) {
                  RAST._IExpr _993___mcc_h310 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IType> _994___mcc_h311 = _source32.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _995___mcc_h312 = _source32.dtor_arguments;
                  return _875_default;
                } else if (_source32.is_Select) {
                  RAST._IExpr _996___mcc_h316 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _997___mcc_h317 = _source32.dtor_name;
                  return _875_default;
                } else {
                  RAST._IExpr _998___mcc_h320 = _source32.dtor_underlying;
                  return _875_default;
                }
              } else {
                RAST._IExpr _999___mcc_h322 = _source31.dtor_value;
                return _875_default;
              }
            }
          } else if (_source29.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1000___mcc_h324 = _source29.dtor_name;
            RAST._IExpr _1001___mcc_h325 = _source29.dtor_rhs;
            return _875_default;
          } else if (_source29.is_IfExpr) {
            RAST._IExpr _1002___mcc_h328 = _source29.dtor_cond;
            RAST._IExpr _1003___mcc_h329 = _source29.dtor_thn;
            RAST._IExpr _1004___mcc_h330 = _source29.dtor_els;
            return _875_default;
          } else if (_source29.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1005___mcc_h334 = _source29.dtor_optCond;
            RAST._IExpr _1006___mcc_h335 = _source29.dtor_underlying;
            return _875_default;
          } else if (_source29.is_For) {
            Dafny.ISequence<Dafny.Rune> _1007___mcc_h338 = _source29.dtor_name;
            RAST._IExpr _1008___mcc_h339 = _source29.dtor_range;
            RAST._IExpr _1009___mcc_h340 = _source29.dtor_body;
            return _875_default;
          } else if (_source29.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1010___mcc_h344 = _source29.dtor_lbl;
            RAST._IExpr _1011___mcc_h345 = _source29.dtor_underlying;
            return _875_default;
          } else if (_source29.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1012___mcc_h348 = _source29.dtor_optLbl;
            return _875_default;
          } else if (_source29.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1013___mcc_h350 = _source29.dtor_optLbl;
            return _875_default;
          } else if (_source29.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1014___mcc_h352 = _source29.dtor_optExpr;
            return _875_default;
          } else if (_source29.is_Call) {
            RAST._IExpr _1015___mcc_h354 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IType> _1016___mcc_h355 = _source29.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1017___mcc_h356 = _source29.dtor_arguments;
            return _875_default;
          } else if (_source29.is_Select) {
            RAST._IExpr _1018___mcc_h360 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1019___mcc_h361 = _source29.dtor_name;
            return _875_default;
          } else {
            RAST._IExpr _1020___mcc_h364 = _source29.dtor_underlying;
            return _875_default;
          }
        } else if (_source28.is_Block) {
          RAST._IExpr _1021___mcc_h366 = _source28.dtor_underlying;
          return _875_default;
        } else if (_source28.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1022___mcc_h368 = _source28.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1023___mcc_h369 = _source28.dtor_assignments;
          return _875_default;
        } else if (_source28.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1024___mcc_h372 = _source28.dtor_arguments;
          return _875_default;
        } else if (_source28.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1025___mcc_h374 = _source28.dtor_op1;
          RAST._IExpr _1026___mcc_h375 = _source28.dtor_underlying;
          DAST.Format._IUnOpFormat _1027___mcc_h376 = _source28.dtor_format;
          return _875_default;
        } else if (_source28.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1028___mcc_h380 = _source28.dtor_op2;
          RAST._IExpr _1029___mcc_h381 = _source28.dtor_left;
          RAST._IExpr _1030___mcc_h382 = _source28.dtor_right;
          DAST.Format._IBinOpFormat _1031___mcc_h383 = _source28.dtor_format2;
          return _875_default;
        } else if (_source28.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1032___mcc_h388 = _source28.dtor_value;
          return _875_default;
        } else if (_source28.is_ConversionNum) {
          RAST._IType _1033___mcc_h390 = _source28.dtor_tpe;
          RAST._IExpr _1034___mcc_h391 = _source28.dtor_underlying;
          return _875_default;
        } else if (_source28.is_DeclareVar) {
          RAST._IDeclareType _1035___mcc_h394 = _source28.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1036___mcc_h395 = _source28.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1037___mcc_h396 = _source28.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1038___mcc_h397 = _source28.dtor_optRhs;
          return _875_default;
        } else if (_source28.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1039___mcc_h402 = _source28.dtor_name;
          RAST._IExpr _1040___mcc_h403 = _source28.dtor_rhs;
          return _875_default;
        } else if (_source28.is_IfExpr) {
          RAST._IExpr _1041___mcc_h406 = _source28.dtor_cond;
          RAST._IExpr _1042___mcc_h407 = _source28.dtor_thn;
          RAST._IExpr _1043___mcc_h408 = _source28.dtor_els;
          return _875_default;
        } else if (_source28.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1044___mcc_h412 = _source28.dtor_optCond;
          RAST._IExpr _1045___mcc_h413 = _source28.dtor_underlying;
          return _875_default;
        } else if (_source28.is_For) {
          Dafny.ISequence<Dafny.Rune> _1046___mcc_h416 = _source28.dtor_name;
          RAST._IExpr _1047___mcc_h417 = _source28.dtor_range;
          RAST._IExpr _1048___mcc_h418 = _source28.dtor_body;
          return _875_default;
        } else if (_source28.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1049___mcc_h422 = _source28.dtor_lbl;
          RAST._IExpr _1050___mcc_h423 = _source28.dtor_underlying;
          return _875_default;
        } else if (_source28.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1051___mcc_h426 = _source28.dtor_optLbl;
          return _875_default;
        } else if (_source28.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1052___mcc_h428 = _source28.dtor_optLbl;
          return _875_default;
        } else if (_source28.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1053___mcc_h430 = _source28.dtor_optExpr;
          return _875_default;
        } else if (_source28.is_Call) {
          RAST._IExpr _1054___mcc_h432 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IType> _1055___mcc_h433 = _source28.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1056___mcc_h434 = _source28.dtor_arguments;
          return _875_default;
        } else if (_source28.is_Select) {
          RAST._IExpr _1057___mcc_h438 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1058___mcc_h439 = _source28.dtor_name;
          return _875_default;
        } else {
          RAST._IExpr _1059___mcc_h442 = _source28.dtor_underlying;
          return _875_default;
        }
      } else if (_source27.is_Block) {
        RAST._IExpr _1060___mcc_h10 = _source27.dtor_underlying;
        RAST._IExpr _1061_underlying = _1060___mcc_h10;
        return (BigInteger.One) + ((_1061_underlying).Height());
      } else if (_source27.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1062___mcc_h12 = _source27.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1063___mcc_h13 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1064_assignments = _1063___mcc_h13;
        Dafny.ISequence<Dafny.Rune> _1065_name = _1062___mcc_h12;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_1064_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_1066_assignment) => {
          return (_1066_assignment).Height();
        }))));
      } else if (_source27.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1067___mcc_h16 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1068_arguments = _1067___mcc_h16;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IExpr>(_1068_arguments, ((System.Func<RAST._IExpr, BigInteger>)((_1069_argument) => {
          return (_1069_argument).Height();
        }))));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1070___mcc_h18 = _source27.dtor_op1;
        RAST._IExpr _1071___mcc_h19 = _source27.dtor_underlying;
        DAST.Format._IUnOpFormat _1072___mcc_h20 = _source27.dtor_format;
        RAST._IExpr _1073_underlying = _1071___mcc_h19;
        return (BigInteger.One) + ((_1073_underlying).Height());
      } else if (_source27.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1074___mcc_h24 = _source27.dtor_op2;
        RAST._IExpr _1075___mcc_h25 = _source27.dtor_left;
        RAST._IExpr _1076___mcc_h26 = _source27.dtor_right;
        DAST.Format._IBinOpFormat _1077___mcc_h27 = _source27.dtor_format2;
        DAST.Format._IBinOpFormat _1078_format = _1077___mcc_h27;
        RAST._IExpr _1079_right = _1076___mcc_h26;
        RAST._IExpr _1080_left = _1075___mcc_h25;
        Dafny.ISequence<Dafny.Rune> _1081_op = _1074___mcc_h24;
        return (BigInteger.One) + (RAST.__default.max((_1080_left).Height(), (_1079_right).Height()));
      } else if (_source27.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1082___mcc_h32 = _source27.dtor_value;
        return BigInteger.One;
      } else if (_source27.is_ConversionNum) {
        RAST._IType _1083___mcc_h34 = _source27.dtor_tpe;
        RAST._IExpr _1084___mcc_h35 = _source27.dtor_underlying;
        RAST._IExpr _1085_underlying = _1084___mcc_h35;
        return (BigInteger.One) + ((_1085_underlying).Height());
      } else if (_source27.is_DeclareVar) {
        RAST._IDeclareType _1086___mcc_h38 = _source27.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1087___mcc_h39 = _source27.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1088___mcc_h40 = _source27.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1089___mcc_h41 = _source27.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1090_expr = _1089___mcc_h41;
        Std.Wrappers._IOption<RAST._IType> _1091_tpe = _1088___mcc_h40;
        Dafny.ISequence<Dafny.Rune> _1092_name = _1087___mcc_h39;
        RAST._IDeclareType _1093_declareType = _1086___mcc_h38;
        return (BigInteger.One) + (((System.Func<Std.Wrappers._IOption<RAST._IExpr>, BigInteger>)((_source34) => {
          if (_source34.is_None) {
            return BigInteger.Zero;
          } else {
            RAST._IExpr _1094___mcc_h444 = _source34.dtor_value;
            RAST._IExpr _1095_e = _1094___mcc_h444;
            return (_1095_e).Height();
          }
        }))(_1090_expr));
      } else if (_source27.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1096___mcc_h46 = _source27.dtor_name;
        RAST._IExpr _1097___mcc_h47 = _source27.dtor_rhs;
        RAST._IExpr _1098_expr = _1097___mcc_h47;
        Dafny.ISequence<Dafny.Rune> _1099_name = _1096___mcc_h46;
        return (BigInteger.One) + ((_1098_expr).Height());
      } else if (_source27.is_IfExpr) {
        RAST._IExpr _1100___mcc_h50 = _source27.dtor_cond;
        RAST._IExpr _1101___mcc_h51 = _source27.dtor_thn;
        RAST._IExpr _1102___mcc_h52 = _source27.dtor_els;
        RAST._IExpr _1103_els = _1102___mcc_h52;
        RAST._IExpr _1104_thn = _1101___mcc_h51;
        RAST._IExpr _1105_cond = _1100___mcc_h50;
        return (BigInteger.One) + (RAST.__default.max((_1105_cond).Height(), RAST.__default.max((_1104_thn).Height(), (_1103_els).Height())));
      } else if (_source27.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1106___mcc_h56 = _source27.dtor_optCond;
        RAST._IExpr _1107___mcc_h57 = _source27.dtor_underlying;
        RAST._IExpr _1108_underlying = _1107___mcc_h57;
        Std.Wrappers._IOption<RAST._IExpr> _1109_optCond = _1106___mcc_h56;
        return (BigInteger.One) + ((((_1109_optCond).is_Some) ? (RAST.__default.max(((_1109_optCond).dtor_value).Height(), (_1108_underlying).Height())) : ((_1108_underlying).Height())));
      } else if (_source27.is_For) {
        Dafny.ISequence<Dafny.Rune> _1110___mcc_h60 = _source27.dtor_name;
        RAST._IExpr _1111___mcc_h61 = _source27.dtor_range;
        RAST._IExpr _1112___mcc_h62 = _source27.dtor_body;
        RAST._IExpr _1113_body = _1112___mcc_h62;
        RAST._IExpr _1114_range = _1111___mcc_h61;
        Dafny.ISequence<Dafny.Rune> _1115_name = _1110___mcc_h60;
        return (BigInteger.One) + (RAST.__default.max((_1114_range).Height(), (_1113_body).Height()));
      } else if (_source27.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1116___mcc_h66 = _source27.dtor_lbl;
        RAST._IExpr _1117___mcc_h67 = _source27.dtor_underlying;
        RAST._IExpr _1118_underlying = _1117___mcc_h67;
        Dafny.ISequence<Dafny.Rune> _1119_lbl = _1116___mcc_h66;
        return (BigInteger.One) + ((_1118_underlying).Height());
      } else if (_source27.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1120___mcc_h70 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1121___mcc_h72 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1122___mcc_h74 = _source27.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1123_optExpr = _1122___mcc_h74;
        if ((_1123_optExpr).is_Some) {
          return (BigInteger.One) + (((_1123_optExpr).dtor_value).Height());
        } else {
          return BigInteger.One;
        }
      } else if (_source27.is_Call) {
        RAST._IExpr _1124___mcc_h76 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IType> _1125___mcc_h77 = _source27.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1126___mcc_h78 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1127_args = _1126___mcc_h78;
        Dafny.ISequence<RAST._IType> _1128_tpes = _1125___mcc_h77;
        RAST._IExpr _1129_obj = _1124___mcc_h76;
        return (BigInteger.One) + (RAST.__default.max((_1129_obj).Height(), RAST.__default.max(RAST.__default.SeqToHeight<RAST._IType>(_1128_tpes, ((System.Func<RAST._IType, BigInteger>)((_1130_tpe) => {
          return BigInteger.One;
        }))), RAST.__default.SeqToHeight<RAST._IExpr>(_1127_args, ((System.Func<RAST._IExpr, BigInteger>)((_1131_arg) => {
          return (_1131_arg).Height();
        }))))));
      } else if (_source27.is_Select) {
        RAST._IExpr _1132___mcc_h82 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1133___mcc_h83 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1134_name = _1133___mcc_h83;
        RAST._IExpr _1135_expression = _1132___mcc_h82;
        return (BigInteger.One) + ((_1135_expression).Height());
      } else {
        RAST._IExpr _1136___mcc_h86 = _source27.dtor_underlying;
        RAST._IExpr _1137_underlying = _1136___mcc_h86;
        return (BigInteger.One) + ((_1137_underlying).Height());
      }
    }
    public RAST._IExpr Optimize() {
      RAST._IExpr _source35 = this;
      if (_source35.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1138___mcc_h0 = _source35.dtor_content;
        return this;
      } else if (_source35.is_Match) {
        RAST._IExpr _1139___mcc_h2 = _source35.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1140___mcc_h3 = _source35.dtor_cases;
        return this;
      } else if (_source35.is_StmtExpr) {
        RAST._IExpr _1141___mcc_h6 = _source35.dtor_stmt;
        RAST._IExpr _1142___mcc_h7 = _source35.dtor_rhs;
        RAST._IExpr _source36 = _1141___mcc_h6;
        if (_source36.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1143___mcc_h10 = _source36.dtor_content;
          return this;
        } else if (_source36.is_Match) {
          RAST._IExpr _1144___mcc_h12 = _source36.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1145___mcc_h13 = _source36.dtor_cases;
          return this;
        } else if (_source36.is_StmtExpr) {
          RAST._IExpr _1146___mcc_h16 = _source36.dtor_stmt;
          RAST._IExpr _1147___mcc_h17 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_Block) {
          RAST._IExpr _1148___mcc_h20 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1149___mcc_h22 = _source36.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1150___mcc_h23 = _source36.dtor_assignments;
          return this;
        } else if (_source36.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1151___mcc_h26 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1152___mcc_h28 = _source36.dtor_op1;
          RAST._IExpr _1153___mcc_h29 = _source36.dtor_underlying;
          DAST.Format._IUnOpFormat _1154___mcc_h30 = _source36.dtor_format;
          return this;
        } else if (_source36.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1155___mcc_h34 = _source36.dtor_op2;
          RAST._IExpr _1156___mcc_h35 = _source36.dtor_left;
          RAST._IExpr _1157___mcc_h36 = _source36.dtor_right;
          DAST.Format._IBinOpFormat _1158___mcc_h37 = _source36.dtor_format2;
          return this;
        } else if (_source36.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1159___mcc_h42 = _source36.dtor_value;
          return this;
        } else if (_source36.is_ConversionNum) {
          RAST._IType _1160___mcc_h44 = _source36.dtor_tpe;
          RAST._IExpr _1161___mcc_h45 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_DeclareVar) {
          RAST._IDeclareType _1162___mcc_h48 = _source36.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1163___mcc_h49 = _source36.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1164___mcc_h50 = _source36.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1165___mcc_h51 = _source36.dtor_optRhs;
          Std.Wrappers._IOption<RAST._IType> _source37 = _1164___mcc_h50;
          if (_source37.is_None) {
            return this;
          } else {
            RAST._IType _1166___mcc_h56 = _source37.dtor_value;
            Std.Wrappers._IOption<RAST._IExpr> _source38 = _1165___mcc_h51;
            if (_source38.is_None) {
              RAST._IExpr _source39 = _1142___mcc_h7;
              if (_source39.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1167___mcc_h58 = _source39.dtor_content;
                return this;
              } else if (_source39.is_Match) {
                RAST._IExpr _1168___mcc_h60 = _source39.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1169___mcc_h61 = _source39.dtor_cases;
                return this;
              } else if (_source39.is_StmtExpr) {
                RAST._IExpr _1170___mcc_h64 = _source39.dtor_stmt;
                RAST._IExpr _1171___mcc_h65 = _source39.dtor_rhs;
                RAST._IExpr _source40 = _1170___mcc_h64;
                if (_source40.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1172___mcc_h68 = _source40.dtor_content;
                  return this;
                } else if (_source40.is_Match) {
                  RAST._IExpr _1173___mcc_h70 = _source40.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1174___mcc_h71 = _source40.dtor_cases;
                  return this;
                } else if (_source40.is_StmtExpr) {
                  RAST._IExpr _1175___mcc_h74 = _source40.dtor_stmt;
                  RAST._IExpr _1176___mcc_h75 = _source40.dtor_rhs;
                  return this;
                } else if (_source40.is_Block) {
                  RAST._IExpr _1177___mcc_h78 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_StructBuild) {
                  Dafny.ISequence<Dafny.Rune> _1178___mcc_h80 = _source40.dtor_name;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1179___mcc_h81 = _source40.dtor_assignments;
                  return this;
                } else if (_source40.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1180___mcc_h84 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1181___mcc_h86 = _source40.dtor_op1;
                  RAST._IExpr _1182___mcc_h87 = _source40.dtor_underlying;
                  DAST.Format._IUnOpFormat _1183___mcc_h88 = _source40.dtor_format;
                  return this;
                } else if (_source40.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1184___mcc_h92 = _source40.dtor_op2;
                  RAST._IExpr _1185___mcc_h93 = _source40.dtor_left;
                  RAST._IExpr _1186___mcc_h94 = _source40.dtor_right;
                  DAST.Format._IBinOpFormat _1187___mcc_h95 = _source40.dtor_format2;
                  return this;
                } else if (_source40.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1188___mcc_h100 = _source40.dtor_value;
                  return this;
                } else if (_source40.is_ConversionNum) {
                  RAST._IType _1189___mcc_h102 = _source40.dtor_tpe;
                  RAST._IExpr _1190___mcc_h103 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_DeclareVar) {
                  RAST._IDeclareType _1191___mcc_h106 = _source40.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1192___mcc_h107 = _source40.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1193___mcc_h108 = _source40.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1194___mcc_h109 = _source40.dtor_optRhs;
                  return this;
                } else if (_source40.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1195___mcc_h114 = _source40.dtor_name;
                  RAST._IExpr _1196___mcc_h115 = _source40.dtor_rhs;
                  RAST._IExpr _1197_last = _1171___mcc_h65;
                  RAST._IExpr _1198_rhs = _1196___mcc_h115;
                  Dafny.ISequence<Dafny.Rune> _1199_name2 = _1195___mcc_h114;
                  RAST._IType _1200_tpe = _1166___mcc_h56;
                  Dafny.ISequence<Dafny.Rune> _1201_name = _1163___mcc_h49;
                  RAST._IDeclareType _1202_mod = _1162___mcc_h48;
                  if ((_1201_name).Equals(_1199_name2)) {
                    RAST._IExpr _1203_rewriting = RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(_1202_mod, _1201_name, Std.Wrappers.Option<RAST._IType>.create_Some(_1200_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1198_rhs)), _1197_last);
                    return _1203_rewriting;
                  } else {
                    return this;
                  }
                } else if (_source40.is_IfExpr) {
                  RAST._IExpr _1204___mcc_h118 = _source40.dtor_cond;
                  RAST._IExpr _1205___mcc_h119 = _source40.dtor_thn;
                  RAST._IExpr _1206___mcc_h120 = _source40.dtor_els;
                  return this;
                } else if (_source40.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1207___mcc_h124 = _source40.dtor_optCond;
                  RAST._IExpr _1208___mcc_h125 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1209___mcc_h128 = _source40.dtor_name;
                  RAST._IExpr _1210___mcc_h129 = _source40.dtor_range;
                  RAST._IExpr _1211___mcc_h130 = _source40.dtor_body;
                  return this;
                } else if (_source40.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1212___mcc_h134 = _source40.dtor_lbl;
                  RAST._IExpr _1213___mcc_h135 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1214___mcc_h138 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1215___mcc_h140 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1216___mcc_h142 = _source40.dtor_optExpr;
                  return this;
                } else if (_source40.is_Call) {
                  RAST._IExpr _1217___mcc_h144 = _source40.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1218___mcc_h145 = _source40.dtor_typeParameters;
                  Dafny.ISequence<RAST._IExpr> _1219___mcc_h146 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_Select) {
                  RAST._IExpr _1220___mcc_h150 = _source40.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1221___mcc_h151 = _source40.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1222___mcc_h154 = _source40.dtor_underlying;
                  return this;
                }
              } else if (_source39.is_Block) {
                RAST._IExpr _1223___mcc_h156 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_StructBuild) {
                Dafny.ISequence<Dafny.Rune> _1224___mcc_h158 = _source39.dtor_name;
                Dafny.ISequence<RAST._IAssignIdentifier> _1225___mcc_h159 = _source39.dtor_assignments;
                return this;
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1226___mcc_h162 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1227___mcc_h164 = _source39.dtor_op1;
                RAST._IExpr _1228___mcc_h165 = _source39.dtor_underlying;
                DAST.Format._IUnOpFormat _1229___mcc_h166 = _source39.dtor_format;
                return this;
              } else if (_source39.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1230___mcc_h170 = _source39.dtor_op2;
                RAST._IExpr _1231___mcc_h171 = _source39.dtor_left;
                RAST._IExpr _1232___mcc_h172 = _source39.dtor_right;
                DAST.Format._IBinOpFormat _1233___mcc_h173 = _source39.dtor_format2;
                return this;
              } else if (_source39.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1234___mcc_h178 = _source39.dtor_value;
                return this;
              } else if (_source39.is_ConversionNum) {
                RAST._IType _1235___mcc_h180 = _source39.dtor_tpe;
                RAST._IExpr _1236___mcc_h181 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_DeclareVar) {
                RAST._IDeclareType _1237___mcc_h184 = _source39.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1238___mcc_h185 = _source39.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1239___mcc_h186 = _source39.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1240___mcc_h187 = _source39.dtor_optRhs;
                return this;
              } else if (_source39.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1241___mcc_h192 = _source39.dtor_name;
                RAST._IExpr _1242___mcc_h193 = _source39.dtor_rhs;
                return this;
              } else if (_source39.is_IfExpr) {
                RAST._IExpr _1243___mcc_h196 = _source39.dtor_cond;
                RAST._IExpr _1244___mcc_h197 = _source39.dtor_thn;
                RAST._IExpr _1245___mcc_h198 = _source39.dtor_els;
                return this;
              } else if (_source39.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1246___mcc_h202 = _source39.dtor_optCond;
                RAST._IExpr _1247___mcc_h203 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_For) {
                Dafny.ISequence<Dafny.Rune> _1248___mcc_h206 = _source39.dtor_name;
                RAST._IExpr _1249___mcc_h207 = _source39.dtor_range;
                RAST._IExpr _1250___mcc_h208 = _source39.dtor_body;
                return this;
              } else if (_source39.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1251___mcc_h212 = _source39.dtor_lbl;
                RAST._IExpr _1252___mcc_h213 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1253___mcc_h216 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1254___mcc_h218 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1255___mcc_h220 = _source39.dtor_optExpr;
                return this;
              } else if (_source39.is_Call) {
                RAST._IExpr _1256___mcc_h222 = _source39.dtor_obj;
                Dafny.ISequence<RAST._IType> _1257___mcc_h223 = _source39.dtor_typeParameters;
                Dafny.ISequence<RAST._IExpr> _1258___mcc_h224 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_Select) {
                RAST._IExpr _1259___mcc_h228 = _source39.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1260___mcc_h229 = _source39.dtor_name;
                return this;
              } else {
                RAST._IExpr _1261___mcc_h232 = _source39.dtor_underlying;
                return this;
              }
            } else {
              RAST._IExpr _1262___mcc_h234 = _source38.dtor_value;
              return this;
            }
          }
        } else if (_source36.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1263___mcc_h236 = _source36.dtor_name;
          RAST._IExpr _1264___mcc_h237 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_IfExpr) {
          RAST._IExpr _1265___mcc_h240 = _source36.dtor_cond;
          RAST._IExpr _1266___mcc_h241 = _source36.dtor_thn;
          RAST._IExpr _1267___mcc_h242 = _source36.dtor_els;
          return this;
        } else if (_source36.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1268___mcc_h246 = _source36.dtor_optCond;
          RAST._IExpr _1269___mcc_h247 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_For) {
          Dafny.ISequence<Dafny.Rune> _1270___mcc_h250 = _source36.dtor_name;
          RAST._IExpr _1271___mcc_h251 = _source36.dtor_range;
          RAST._IExpr _1272___mcc_h252 = _source36.dtor_body;
          return this;
        } else if (_source36.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1273___mcc_h256 = _source36.dtor_lbl;
          RAST._IExpr _1274___mcc_h257 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1275___mcc_h260 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1276___mcc_h262 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1277___mcc_h264 = _source36.dtor_optExpr;
          return this;
        } else if (_source36.is_Call) {
          RAST._IExpr _1278___mcc_h266 = _source36.dtor_obj;
          Dafny.ISequence<RAST._IType> _1279___mcc_h267 = _source36.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1280___mcc_h268 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_Select) {
          RAST._IExpr _1281___mcc_h272 = _source36.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1282___mcc_h273 = _source36.dtor_name;
          return this;
        } else {
          RAST._IExpr _1283___mcc_h276 = _source36.dtor_underlying;
          return this;
        }
      } else if (_source35.is_Block) {
        RAST._IExpr _1284___mcc_h278 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1285___mcc_h280 = _source35.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1286___mcc_h281 = _source35.dtor_assignments;
        return this;
      } else if (_source35.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1287___mcc_h284 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1288___mcc_h286 = _source35.dtor_op1;
        RAST._IExpr _1289___mcc_h287 = _source35.dtor_underlying;
        DAST.Format._IUnOpFormat _1290___mcc_h288 = _source35.dtor_format;
        if (object.Equals(_1288___mcc_h286, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source41 = _1289___mcc_h287;
          if (_source41.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1291___mcc_h292 = _source41.dtor_content;
            return this;
          } else if (_source41.is_Match) {
            RAST._IExpr _1292___mcc_h294 = _source41.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1293___mcc_h295 = _source41.dtor_cases;
            return this;
          } else if (_source41.is_StmtExpr) {
            RAST._IExpr _1294___mcc_h298 = _source41.dtor_stmt;
            RAST._IExpr _1295___mcc_h299 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_Block) {
            RAST._IExpr _1296___mcc_h302 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1297___mcc_h304 = _source41.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1298___mcc_h305 = _source41.dtor_assignments;
            return this;
          } else if (_source41.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1299___mcc_h308 = _source41.dtor_arguments;
            return this;
          } else if (_source41.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1300___mcc_h310 = _source41.dtor_op1;
            RAST._IExpr _1301___mcc_h311 = _source41.dtor_underlying;
            DAST.Format._IUnOpFormat _1302___mcc_h312 = _source41.dtor_format;
            return this;
          } else if (_source41.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1303___mcc_h316 = _source41.dtor_op2;
            RAST._IExpr _1304___mcc_h317 = _source41.dtor_left;
            RAST._IExpr _1305___mcc_h318 = _source41.dtor_right;
            DAST.Format._IBinOpFormat _1306___mcc_h319 = _source41.dtor_format2;
            if (object.Equals(_1303___mcc_h316, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnOpFormat _source42 = _1290___mcc_h288;
              if (_source42.is_NoFormat) {
                return this;
              } else {
                DAST.Format._IBinOpFormat _1307_format = _1306___mcc_h319;
                RAST._IExpr _1308_right = _1305___mcc_h318;
                RAST._IExpr _1309_left = _1304___mcc_h317;
                return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _1309_left, _1308_right, DAST.Format.BinOpFormat.create_NoFormat());
              }
            } else if (object.Equals(_1303___mcc_h316, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinOpFormat _source43 = _1306___mcc_h319;
              if (_source43.is_NoFormat) {
                DAST.Format._IUnOpFormat _source44 = _1290___mcc_h288;
                if (_source44.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1310_right = _1305___mcc_h318;
                  RAST._IExpr _1311_left = _1304___mcc_h317;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _1311_left, _1310_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              } else if (_source43.is_ImpliesFormat) {
                return this;
              } else if (_source43.is_Equivalence) {
                return this;
              } else {
                DAST.Format._IUnOpFormat _source45 = _1290___mcc_h288;
                if (_source45.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1312_right = _1305___mcc_h318;
                  RAST._IExpr _1313_left = _1304___mcc_h317;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _1312_right, _1313_left, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else {
              return this;
            }
          } else if (_source41.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1314___mcc_h324 = _source41.dtor_value;
            return this;
          } else if (_source41.is_ConversionNum) {
            RAST._IType _1315___mcc_h326 = _source41.dtor_tpe;
            RAST._IExpr _1316___mcc_h327 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_DeclareVar) {
            RAST._IDeclareType _1317___mcc_h330 = _source41.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1318___mcc_h331 = _source41.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1319___mcc_h332 = _source41.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1320___mcc_h333 = _source41.dtor_optRhs;
            return this;
          } else if (_source41.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1321___mcc_h338 = _source41.dtor_name;
            RAST._IExpr _1322___mcc_h339 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_IfExpr) {
            RAST._IExpr _1323___mcc_h342 = _source41.dtor_cond;
            RAST._IExpr _1324___mcc_h343 = _source41.dtor_thn;
            RAST._IExpr _1325___mcc_h344 = _source41.dtor_els;
            return this;
          } else if (_source41.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1326___mcc_h348 = _source41.dtor_optCond;
            RAST._IExpr _1327___mcc_h349 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_For) {
            Dafny.ISequence<Dafny.Rune> _1328___mcc_h352 = _source41.dtor_name;
            RAST._IExpr _1329___mcc_h353 = _source41.dtor_range;
            RAST._IExpr _1330___mcc_h354 = _source41.dtor_body;
            return this;
          } else if (_source41.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1331___mcc_h358 = _source41.dtor_lbl;
            RAST._IExpr _1332___mcc_h359 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1333___mcc_h362 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1334___mcc_h364 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1335___mcc_h366 = _source41.dtor_optExpr;
            return this;
          } else if (_source41.is_Call) {
            RAST._IExpr _1336___mcc_h368 = _source41.dtor_obj;
            Dafny.ISequence<RAST._IType> _1337___mcc_h369 = _source41.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1338___mcc_h370 = _source41.dtor_arguments;
            return this;
          } else if (_source41.is_Select) {
            RAST._IExpr _1339___mcc_h374 = _source41.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1340___mcc_h375 = _source41.dtor_name;
            return this;
          } else {
            RAST._IExpr _1341___mcc_h378 = _source41.dtor_underlying;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1342___mcc_h380 = _source35.dtor_op2;
        RAST._IExpr _1343___mcc_h381 = _source35.dtor_left;
        RAST._IExpr _1344___mcc_h382 = _source35.dtor_right;
        DAST.Format._IBinOpFormat _1345___mcc_h383 = _source35.dtor_format2;
        return this;
      } else if (_source35.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1346___mcc_h388 = _source35.dtor_value;
        return this;
      } else if (_source35.is_ConversionNum) {
        RAST._IType _1347___mcc_h390 = _source35.dtor_tpe;
        RAST._IExpr _1348___mcc_h391 = _source35.dtor_underlying;
        RAST._IExpr _1349_expr = _1348___mcc_h391;
        RAST._IType _1350_tpe = _1347___mcc_h390;
        if (((((((((((_1350_tpe).is_U8) || ((_1350_tpe).is_U16)) || ((_1350_tpe).is_U32)) || ((_1350_tpe).is_U64)) || ((_1350_tpe).is_U128)) || ((_1350_tpe).is_I8)) || ((_1350_tpe).is_I16)) || ((_1350_tpe).is_I32)) || ((_1350_tpe).is_I64)) || ((_1350_tpe).is_I128)) {
          RAST._IExpr _source46 = _1349_expr;
          if (_source46.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1351___mcc_h444 = _source46.dtor_content;
            return this;
          } else if (_source46.is_Match) {
            RAST._IExpr _1352___mcc_h446 = _source46.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1353___mcc_h447 = _source46.dtor_cases;
            return this;
          } else if (_source46.is_StmtExpr) {
            RAST._IExpr _1354___mcc_h450 = _source46.dtor_stmt;
            RAST._IExpr _1355___mcc_h451 = _source46.dtor_rhs;
            return this;
          } else if (_source46.is_Block) {
            RAST._IExpr _1356___mcc_h454 = _source46.dtor_underlying;
            return this;
          } else if (_source46.is_StructBuild) {
            Dafny.ISequence<Dafny.Rune> _1357___mcc_h456 = _source46.dtor_name;
            Dafny.ISequence<RAST._IAssignIdentifier> _1358___mcc_h457 = _source46.dtor_assignments;
            return this;
          } else if (_source46.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1359___mcc_h460 = _source46.dtor_arguments;
            return this;
          } else if (_source46.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1360___mcc_h462 = _source46.dtor_op1;
            RAST._IExpr _1361___mcc_h463 = _source46.dtor_underlying;
            DAST.Format._IUnOpFormat _1362___mcc_h464 = _source46.dtor_format;
            return this;
          } else if (_source46.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1363___mcc_h468 = _source46.dtor_op2;
            RAST._IExpr _1364___mcc_h469 = _source46.dtor_left;
            RAST._IExpr _1365___mcc_h470 = _source46.dtor_right;
            DAST.Format._IBinOpFormat _1366___mcc_h471 = _source46.dtor_format2;
            return this;
          } else if (_source46.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1367___mcc_h476 = _source46.dtor_value;
            Dafny.ISequence<Dafny.Rune> _1368_number = _1367___mcc_h476;
            return RAST.Expr.create_RawExpr(_1368_number);
          } else if (_source46.is_ConversionNum) {
            RAST._IType _1369___mcc_h478 = _source46.dtor_tpe;
            RAST._IExpr _1370___mcc_h479 = _source46.dtor_underlying;
            return this;
          } else if (_source46.is_DeclareVar) {
            RAST._IDeclareType _1371___mcc_h482 = _source46.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1372___mcc_h483 = _source46.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1373___mcc_h484 = _source46.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1374___mcc_h485 = _source46.dtor_optRhs;
            return this;
          } else if (_source46.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1375___mcc_h490 = _source46.dtor_name;
            RAST._IExpr _1376___mcc_h491 = _source46.dtor_rhs;
            return this;
          } else if (_source46.is_IfExpr) {
            RAST._IExpr _1377___mcc_h494 = _source46.dtor_cond;
            RAST._IExpr _1378___mcc_h495 = _source46.dtor_thn;
            RAST._IExpr _1379___mcc_h496 = _source46.dtor_els;
            return this;
          } else if (_source46.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1380___mcc_h500 = _source46.dtor_optCond;
            RAST._IExpr _1381___mcc_h501 = _source46.dtor_underlying;
            return this;
          } else if (_source46.is_For) {
            Dafny.ISequence<Dafny.Rune> _1382___mcc_h504 = _source46.dtor_name;
            RAST._IExpr _1383___mcc_h505 = _source46.dtor_range;
            RAST._IExpr _1384___mcc_h506 = _source46.dtor_body;
            return this;
          } else if (_source46.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1385___mcc_h510 = _source46.dtor_lbl;
            RAST._IExpr _1386___mcc_h511 = _source46.dtor_underlying;
            return this;
          } else if (_source46.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1387___mcc_h514 = _source46.dtor_optLbl;
            return this;
          } else if (_source46.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1388___mcc_h516 = _source46.dtor_optLbl;
            return this;
          } else if (_source46.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1389___mcc_h518 = _source46.dtor_optExpr;
            return this;
          } else if (_source46.is_Call) {
            RAST._IExpr _1390___mcc_h520 = _source46.dtor_obj;
            Dafny.ISequence<RAST._IType> _1391___mcc_h521 = _source46.dtor_typeParameters;
            Dafny.ISequence<RAST._IExpr> _1392___mcc_h522 = _source46.dtor_arguments;
            return this;
          } else if (_source46.is_Select) {
            RAST._IExpr _1393___mcc_h526 = _source46.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1394___mcc_h527 = _source46.dtor_name;
            return this;
          } else {
            RAST._IExpr _1395___mcc_h530 = _source46.dtor_underlying;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_DeclareVar) {
        RAST._IDeclareType _1396___mcc_h394 = _source35.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1397___mcc_h395 = _source35.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1398___mcc_h396 = _source35.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1399___mcc_h397 = _source35.dtor_optRhs;
        return this;
      } else if (_source35.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1400___mcc_h402 = _source35.dtor_name;
        RAST._IExpr _1401___mcc_h403 = _source35.dtor_rhs;
        return this;
      } else if (_source35.is_IfExpr) {
        RAST._IExpr _1402___mcc_h406 = _source35.dtor_cond;
        RAST._IExpr _1403___mcc_h407 = _source35.dtor_thn;
        RAST._IExpr _1404___mcc_h408 = _source35.dtor_els;
        return this;
      } else if (_source35.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1405___mcc_h412 = _source35.dtor_optCond;
        RAST._IExpr _1406___mcc_h413 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_For) {
        Dafny.ISequence<Dafny.Rune> _1407___mcc_h416 = _source35.dtor_name;
        RAST._IExpr _1408___mcc_h417 = _source35.dtor_range;
        RAST._IExpr _1409___mcc_h418 = _source35.dtor_body;
        return this;
      } else if (_source35.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1410___mcc_h422 = _source35.dtor_lbl;
        RAST._IExpr _1411___mcc_h423 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1412___mcc_h426 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1413___mcc_h428 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1414___mcc_h430 = _source35.dtor_optExpr;
        return this;
      } else if (_source35.is_Call) {
        RAST._IExpr _1415___mcc_h432 = _source35.dtor_obj;
        Dafny.ISequence<RAST._IType> _1416___mcc_h433 = _source35.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1417___mcc_h434 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_Select) {
        RAST._IExpr _1418___mcc_h438 = _source35.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1419___mcc_h439 = _source35.dtor_name;
        return this;
      } else {
        RAST._IExpr _1420___mcc_h442 = _source35.dtor_underlying;
        return this;
      }
    }
    public bool LeftRequiresParentheses(RAST._IExpr left) {
      return ((((this).printingInfo).dtor_precedence) <= (((left).printingInfo).dtor_precedence)) && (!((((this).printingInfo).dtor_precedence) == (((left).printingInfo).dtor_precedence)) || ((((this).printingInfo).is_PrecedenceAssociativity) && (!((((this).printingInfo).dtor_associativity).is_LeftToRight))));
    }
    public bool RightRequiresParentheses(RAST._IExpr right) {
      return ((((this).printingInfo).dtor_precedence) <= (((right).printingInfo).dtor_precedence)) && (!((((this).printingInfo).dtor_precedence) == (((right).printingInfo).dtor_precedence)) || ((((this).printingInfo).is_PrecedenceAssociativity) && (!((((this).printingInfo).dtor_associativity).is_RightToLeft))));
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      RAST._IExpr _source47 = (this).Optimize();
      if (_source47.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1421___mcc_h0 = _source47.dtor_content;
        RAST._IExpr _1422_r = (this).Optimize();
        return RAST.__default.AddIndent((_1422_r).dtor_content, ind);
      } else if (_source47.is_Match) {
        RAST._IExpr _1423___mcc_h2 = _source47.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1424___mcc_h3 = _source47.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _1425_cases = _1424___mcc_h3;
        RAST._IExpr _1426_matchee = _1423___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_1426_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_1425_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_1427_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_1428_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1427_ind), RAST.__default.IND), (_1428_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1427_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source47.is_StmtExpr) {
        RAST._IExpr _1429___mcc_h6 = _source47.dtor_stmt;
        RAST._IExpr _1430___mcc_h7 = _source47.dtor_rhs;
        RAST._IExpr _1431_rhs = _1430___mcc_h7;
        RAST._IExpr _1432_stmt = _1429___mcc_h6;
        if (object.Equals(_1432_stmt, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) {
          return (_1431_rhs)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_1432_stmt)._ToString(ind), (((_1432_stmt).NoExtraSemicolonAfter()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), (_1431_rhs)._ToString(ind));
        }
      } else if (_source47.is_Block) {
        RAST._IExpr _1433___mcc_h10 = _source47.dtor_underlying;
        RAST._IExpr _1434_underlying = _1433___mcc_h10;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_1434_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source47.is_StructBuild) {
        Dafny.ISequence<Dafny.Rune> _1435___mcc_h12 = _source47.dtor_name;
        Dafny.ISequence<RAST._IAssignIdentifier> _1436___mcc_h13 = _source47.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1437_assignments = _1436___mcc_h13;
        Dafny.ISequence<Dafny.Rune> _1438_name = _1435___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1438_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_1437_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_1439_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_1440_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1439_ind), RAST.__default.IND), (_1440_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1439_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1437_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source47.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1441___mcc_h16 = _source47.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1442_arguments = _1441___mcc_h16;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IExpr>(_1442_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_1443_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_1444_arg) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1443_ind), RAST.__default.IND), (_1444_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1443_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1442_arguments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source47.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1445___mcc_h18 = _source47.dtor_op1;
        RAST._IExpr _1446___mcc_h19 = _source47.dtor_underlying;
        DAST.Format._IUnOpFormat _1447___mcc_h20 = _source47.dtor_format;
        DAST.Format._IUnOpFormat _1448_format = _1447___mcc_h20;
        RAST._IExpr _1449_underlying = _1446___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1450_op = _1445___mcc_h18;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs41 = (((((this).printingInfo).dtor_precedence) < (((_1449_underlying).printingInfo).dtor_precedence)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _1451_leftP = _let_tmp_rhs41.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1452_rightP = _let_tmp_rhs41.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1453_leftOp = (((_1450_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1450_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : ((((_1450_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (_1450_op))));
        Dafny.ISequence<Dafny.Rune> _1454_rightOp = (((_1450_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (_1450_op) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1453_leftOp, _1451_leftP), (_1449_underlying)._ToString(ind)), _1452_rightP), _1454_rightOp);
      } else if (_source47.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1455___mcc_h24 = _source47.dtor_op2;
        RAST._IExpr _1456___mcc_h25 = _source47.dtor_left;
        RAST._IExpr _1457___mcc_h26 = _source47.dtor_right;
        DAST.Format._IBinOpFormat _1458___mcc_h27 = _source47.dtor_format2;
        DAST.Format._IBinOpFormat _1459_format = _1458___mcc_h27;
        RAST._IExpr _1460_right = _1457___mcc_h26;
        RAST._IExpr _1461_left = _1456___mcc_h25;
        Dafny.ISequence<Dafny.Rune> _1462_op2 = _1455___mcc_h24;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs42 = (((this).LeftRequiresParentheses(_1461_left)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _1463_leftLeftP = _let_tmp_rhs42.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1464_leftRighP = _let_tmp_rhs42.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs43 = (((this).RightRequiresParentheses(_1460_right)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _1465_rightLeftP = _let_tmp_rhs43.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1466_rightRightP = _let_tmp_rhs43.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1467_opRendered = (((_1462_op2).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _1462_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_1462_op2));
        Dafny.ISequence<Dafny.Rune> _1468_indLeft = (((_1463_leftLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        Dafny.ISequence<Dafny.Rune> _1469_indRight = (((_1465_rightLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1463_leftLeftP, (_1461_left)._ToString(_1468_indLeft)), _1464_leftRighP), _1467_opRendered), _1465_rightLeftP), (_1460_right)._ToString(_1469_indRight)), _1466_rightRightP);
      } else if (_source47.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1470___mcc_h32 = _source47.dtor_value;
        Dafny.ISequence<Dafny.Rune> _1471_number = _1470___mcc_h32;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1471_number), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
      } else if (_source47.is_ConversionNum) {
        RAST._IType _1472___mcc_h34 = _source47.dtor_tpe;
        RAST._IExpr _1473___mcc_h35 = _source47.dtor_underlying;
        RAST._IExpr _1474_expr = _1473___mcc_h35;
        RAST._IType _1475_tpe = _1472___mcc_h34;
        if (((((((((((_1475_tpe).is_U8) || ((_1475_tpe).is_U16)) || ((_1475_tpe).is_U32)) || ((_1475_tpe).is_U64)) || ((_1475_tpe).is_U128)) || ((_1475_tpe).is_I8)) || ((_1475_tpe).is_I16)) || ((_1475_tpe).is_I32)) || ((_1475_tpe).is_I64)) || ((_1475_tpe).is_I128)) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("num::ToPrimitive::to_"), (_1475_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1474_expr)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<b>Unsupported: Numeric conversion to "), (_1475_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</b>"));
        }
      } else if (_source47.is_DeclareVar) {
        RAST._IDeclareType _1476___mcc_h38 = _source47.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1477___mcc_h39 = _source47.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1478___mcc_h40 = _source47.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1479___mcc_h41 = _source47.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1480_optExpr = _1479___mcc_h41;
        Std.Wrappers._IOption<RAST._IType> _1481_optType = _1478___mcc_h40;
        Dafny.ISequence<Dafny.Rune> _1482_name = _1477___mcc_h39;
        RAST._IDeclareType _1483_declareType = _1476___mcc_h38;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let "), ((object.Equals(_1483_declareType, RAST.DeclareType.create_MUT())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _1482_name), (((_1481_optType).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), ((_1481_optType).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (((_1480_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "), ((_1480_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source47.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1484___mcc_h46 = _source47.dtor_name;
        RAST._IExpr _1485___mcc_h47 = _source47.dtor_rhs;
        RAST._IExpr _1486_expr = _1485___mcc_h47;
        Dafny.ISequence<Dafny.Rune> _1487_name = _1484___mcc_h46;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1487_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_1486_expr)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source47.is_IfExpr) {
        RAST._IExpr _1488___mcc_h50 = _source47.dtor_cond;
        RAST._IExpr _1489___mcc_h51 = _source47.dtor_thn;
        RAST._IExpr _1490___mcc_h52 = _source47.dtor_els;
        RAST._IExpr _1491_els = _1490___mcc_h52;
        RAST._IExpr _1492_thn = _1489___mcc_h51;
        RAST._IExpr _1493_cond = _1488___mcc_h50;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), (_1493_cond)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_1492_thn)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} else {\n")), ind), RAST.__default.IND), (_1491_els)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source47.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1494___mcc_h56 = _source47.dtor_optCond;
        RAST._IExpr _1495___mcc_h57 = _source47.dtor_underlying;
        RAST._IExpr _1496_underlying = _1495___mcc_h57;
        Std.Wrappers._IOption<RAST._IExpr> _1497_optCond = _1494___mcc_h56;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source48) => {
          if (_source48.is_None) {
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop");
          } else {
            RAST._IExpr _1498___mcc_h88 = _source48.dtor_value;
            RAST._IExpr _1499_c = _1498___mcc_h88;
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), (_1499_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv4, RAST.__default.IND)));
          }
        }))(_1497_optCond), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_1496_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source47.is_For) {
        Dafny.ISequence<Dafny.Rune> _1500___mcc_h60 = _source47.dtor_name;
        RAST._IExpr _1501___mcc_h61 = _source47.dtor_range;
        RAST._IExpr _1502___mcc_h62 = _source47.dtor_body;
        RAST._IExpr _1503_body = _1502___mcc_h62;
        RAST._IExpr _1504_range = _1501___mcc_h61;
        Dafny.ISequence<Dafny.Rune> _1505_name = _1500___mcc_h60;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for "), _1505_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" in ")), (_1504_range)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_1503_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source47.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1506___mcc_h66 = _source47.dtor_lbl;
        RAST._IExpr _1507___mcc_h67 = _source47.dtor_underlying;
        RAST._IExpr _1508_underlying = _1507___mcc_h67;
        Dafny.ISequence<Dafny.Rune> _1509_name = _1506___mcc_h66;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), _1509_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_1508_underlying)._ToString(ind));
      } else if (_source47.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1510___mcc_h70 = _source47.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1511_optLbl = _1510___mcc_h70;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source49 = _1511_optLbl;
        if (_source49.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
        } else {
          Dafny.ISequence<Dafny.Rune> _1512___mcc_h89 = _source49.dtor_value;
          Dafny.ISequence<Dafny.Rune> _1513_lbl = _1512___mcc_h89;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break '"), _1513_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source47.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1514___mcc_h72 = _source47.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1515_optLbl = _1514___mcc_h72;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source50 = _1515_optLbl;
        if (_source50.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue;");
        } else {
          Dafny.ISequence<Dafny.Rune> _1516___mcc_h90 = _source50.dtor_value;
          Dafny.ISequence<Dafny.Rune> _1517_lbl = _1516___mcc_h90;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue '"), _1517_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source47.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1518___mcc_h74 = _source47.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1519_optExpr = _1518___mcc_h74;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), (((_1519_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), ((_1519_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source47.is_Call) {
        RAST._IExpr _1520___mcc_h76 = _source47.dtor_obj;
        Dafny.ISequence<RAST._IType> _1521___mcc_h77 = _source47.dtor_typeParameters;
        Dafny.ISequence<RAST._IExpr> _1522___mcc_h78 = _source47.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1523_args = _1522___mcc_h78;
        Dafny.ISequence<RAST._IType> _1524_tpes = _1521___mcc_h77;
        RAST._IExpr _1525_expr = _1520___mcc_h76;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_1525_expr)._ToString(ind), (((new BigInteger((_1524_tpes).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"), RAST.__default.SeqToString<RAST._IType>(_1524_tpes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_1526_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_1527_tpe) => {
          return (_1527_tpe)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1526_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IExpr>(_1523_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_1528_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_1529_arg) => {
          return (_1529_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1528_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source47.is_Select) {
        RAST._IExpr _1530___mcc_h82 = _source47.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1531___mcc_h83 = _source47.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1532_name = _1531___mcc_h83;
        RAST._IExpr _1533_expression = _1530___mcc_h82;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_1533_expression)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _1532_name);
      } else {
        RAST._IExpr _1534___mcc_h86 = _source47.dtor_underlying;
        RAST._IExpr _1535_underlying = _1534___mcc_h86;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), (_1535_underlying)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      if ((this).is_StmtExpr) {
        return RAST.Expr.create_StmtExpr((this).dtor_stmt, ((this).dtor_rhs).Then(rhs2));
      } else {
        return RAST.Expr.create_StmtExpr(this, rhs2);
      }
    }
    public RAST._IPrintingInfo printingInfo {
      get {
        RAST._IExpr _source51 = this;
        if (_source51.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1536___mcc_h0 = _source51.dtor_content;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Match) {
          RAST._IExpr _1537___mcc_h2 = _source51.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1538___mcc_h3 = _source51.dtor_cases;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_StmtExpr) {
          RAST._IExpr _1539___mcc_h6 = _source51.dtor_stmt;
          RAST._IExpr _1540___mcc_h7 = _source51.dtor_rhs;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Block) {
          RAST._IExpr _1541___mcc_h10 = _source51.dtor_underlying;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_StructBuild) {
          Dafny.ISequence<Dafny.Rune> _1542___mcc_h12 = _source51.dtor_name;
          Dafny.ISequence<RAST._IAssignIdentifier> _1543___mcc_h13 = _source51.dtor_assignments;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1544___mcc_h16 = _source51.dtor_arguments;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1545___mcc_h18 = _source51.dtor_op1;
          RAST._IExpr _1546___mcc_h19 = _source51.dtor_underlying;
          DAST.Format._IUnOpFormat _1547___mcc_h20 = _source51.dtor_format;
          DAST.Format._IUnOpFormat _1548_format = _1547___mcc_h20;
          RAST._IExpr _1549_underlying = _1546___mcc_h19;
          Dafny.ISequence<Dafny.Rune> _1550_op = _1545___mcc_h18;
          if (object.Equals(_1550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) {
            return RAST.PrintingInfo.create_SuffixPrecedence(new BigInteger(5));
          } else if (object.Equals(_1550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
            return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
          } else if (object.Equals(_1550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
            return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
          } else if (object.Equals(_1550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
            return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
          } else if (object.Equals(_1550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
            return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
          } else if (object.Equals(_1550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) {
            return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
          } else {
            return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
          }
        } else if (_source51.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1551___mcc_h24 = _source51.dtor_op2;
          RAST._IExpr _1552___mcc_h25 = _source51.dtor_left;
          RAST._IExpr _1553___mcc_h26 = _source51.dtor_right;
          DAST.Format._IBinOpFormat _1554___mcc_h27 = _source51.dtor_format2;
          DAST.Format._IBinOpFormat _1555_format = _1554___mcc_h27;
          RAST._IExpr _1556_right = _1553___mcc_h26;
          RAST._IExpr _1557_left = _1552___mcc_h25;
          Dafny.ISequence<Dafny.Rune> _1558_op2 = _1551___mcc_h24;
          if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(10), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(50), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(60), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(70), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(90), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||"))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(100), RAST.Associativity.create_LeftToRight());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".."))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else if (object.Equals(_1558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>="))) {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
          } else {
            return RAST.PrintingInfo.create_PrecedenceAssociativity(BigInteger.Zero, RAST.Associativity.create_RequiresParentheses());
          }
        } else if (_source51.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1559___mcc_h32 = _source51.dtor_value;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_ConversionNum) {
          RAST._IType _1560___mcc_h34 = _source51.dtor_tpe;
          RAST._IExpr _1561___mcc_h35 = _source51.dtor_underlying;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_DeclareVar) {
          RAST._IDeclareType _1562___mcc_h38 = _source51.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1563___mcc_h39 = _source51.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1564___mcc_h40 = _source51.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1565___mcc_h41 = _source51.dtor_optRhs;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1566___mcc_h46 = _source51.dtor_name;
          RAST._IExpr _1567___mcc_h47 = _source51.dtor_rhs;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_IfExpr) {
          RAST._IExpr _1568___mcc_h50 = _source51.dtor_cond;
          RAST._IExpr _1569___mcc_h51 = _source51.dtor_thn;
          RAST._IExpr _1570___mcc_h52 = _source51.dtor_els;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1571___mcc_h56 = _source51.dtor_optCond;
          RAST._IExpr _1572___mcc_h57 = _source51.dtor_underlying;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_For) {
          Dafny.ISequence<Dafny.Rune> _1573___mcc_h60 = _source51.dtor_name;
          RAST._IExpr _1574___mcc_h61 = _source51.dtor_range;
          RAST._IExpr _1575___mcc_h62 = _source51.dtor_body;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1576___mcc_h66 = _source51.dtor_lbl;
          RAST._IExpr _1577___mcc_h67 = _source51.dtor_underlying;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1578___mcc_h70 = _source51.dtor_optLbl;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1579___mcc_h72 = _source51.dtor_optLbl;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1580___mcc_h74 = _source51.dtor_optExpr;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Call) {
          RAST._IExpr _1581___mcc_h76 = _source51.dtor_obj;
          Dafny.ISequence<RAST._IType> _1582___mcc_h77 = _source51.dtor_typeParameters;
          Dafny.ISequence<RAST._IExpr> _1583___mcc_h78 = _source51.dtor_arguments;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else if (_source51.is_Select) {
          RAST._IExpr _1584___mcc_h82 = _source51.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1585___mcc_h83 = _source51.dtor_name;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        } else {
          RAST._IExpr _1586___mcc_h86 = _source51.dtor_underlying;
          return RAST.PrintingInfo.create_Precedence(new BigInteger(200));
        }
      }
    }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._name = name;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_name, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_Tuple : Expr {
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Tuple(Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Tuple(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Tuple;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralInt : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public Expr_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) : base() {
      this._value = @value;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralInt(_value);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralInt;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralInt";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_ConversionNum : Expr {
    public readonly RAST._IType _tpe;
    public readonly RAST._IExpr _underlying;
    public Expr_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) : base() {
      this._tpe = tpe;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_ConversionNum(_tpe, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_ConversionNum;
      return oth != null && object.Equals(this._tpe, oth._tpe) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.ConversionNum";
      s += "(";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_DeclareVar : Expr {
    public readonly RAST._IDeclareType _declareType;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Std.Wrappers._IOption<RAST._IType> _optType;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optRhs;
    public Expr_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) : base() {
      this._declareType = declareType;
      this._name = name;
      this._optType = optType;
      this._optRhs = optRhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_DeclareVar(_declareType, _name, _optType, _optRhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_DeclareVar;
      return oth != null && object.Equals(this._declareType, oth._declareType) && object.Equals(this._name, oth._name) && object.Equals(this._optType, oth._optType) && object.Equals(this._optRhs, oth._optRhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._declareType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optRhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.DeclareVar";
      s += "(";
      s += Dafny.Helpers.ToString(this._declareType);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optRhs);
      s += ")";
      return s;
    }
  }
  public class Expr_AssignVar : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _rhs;
    public Expr_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) : base() {
      this._name = name;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_AssignVar(_name, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_AssignVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.AssignVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_IfExpr : Expr {
    public readonly RAST._IExpr _cond;
    public readonly RAST._IExpr _thn;
    public readonly RAST._IExpr _els;
    public Expr_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_IfExpr(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_IfExpr;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.IfExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expr_Loop : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optCond;
    public readonly RAST._IExpr _underlying;
    public Expr_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) : base() {
      this._optCond = optCond;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Loop(_optCond, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Loop;
      return oth != null && object.Equals(this._optCond, oth._optCond) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optCond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Loop";
      s += "(";
      s += Dafny.Helpers.ToString(this._optCond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_For : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _range;
    public readonly RAST._IExpr _body;
    public Expr_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) : base() {
      this._name = name;
      this._range = range;
      this._body = body;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_For(_name, _range, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_For;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._range, oth._range) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.For";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expr_Labelled : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly RAST._IExpr _underlying;
    public Expr_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) : base() {
      this._lbl = lbl;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Labelled(_lbl, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Labelled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Labelled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_Break : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Break(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Break;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Continue : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Continue(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Continue;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Continue";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Return : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optExpr;
    public Expr_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) : base() {
      this._optExpr = optExpr;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Return(_optExpr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Return;
      return oth != null && object.Equals(this._optExpr, oth._optExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._optExpr);
      s += ")";
      return s;
    }
  }
  public class Expr_Call : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IType> _typeParameters;
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters, Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._obj = obj;
      this._typeParameters = typeParameters;
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Call(_obj, _typeParameters, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Call;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._typeParameters, oth._typeParameters) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParameters));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParameters);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_Select : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Select(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Select;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Borrow : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Borrow(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Borrow(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Borrow;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Borrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      var _pat_let_tv8 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_1587_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_1588_formal) => {
        return (_1588_formal)._ToString(_1587_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source52) => {
        if (_source52.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _1589___mcc_h0 = _source52.dtor_value;
          RAST._IType _1590_t = _1589___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_1590_t)._ToString(_pat_let_tv5));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source53) => {
        if (_source53.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _1591___mcc_h2 = _source53.dtor_value;
          RAST._IExpr _1592_body = _1591___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv6), RAST.__default.IND), (_1592_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv7, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv8), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _1593___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_1593___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _1593___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1593___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _1593___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1593___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _1594___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_1594___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _1594___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1594___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _1594___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_1594___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      return (((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _1595_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _1595_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust {
      get {
        return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return RAST.__default.IND;
      }
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _1596_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _1596_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _1596_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _1597_i;
      _1597_i = BigInteger.Zero;
      while ((_1597_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _1598_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source54 = (body).Select(_1597_i);
        if (_source54.is_Module) {
          DAST._IModule _1599___mcc_h0 = _source54.dtor_Module_a0;
          DAST._IModule _1600_m = _1599___mcc_h0;
          RAST._IMod _1601_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_1600_m, containingPath);
          _1601_mm = _out16;
          _1598_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_1601_mm));
        } else if (_source54.is_Class) {
          DAST._IClass _1602___mcc_h1 = _source54.dtor_Class_a0;
          DAST._IClass _1603_c = _1602___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_1603_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_1603_c).dtor_name)));
          _1598_generated = _out17;
        } else if (_source54.is_Trait) {
          DAST._ITrait _1604___mcc_h2 = _source54.dtor_Trait_a0;
          DAST._ITrait _1605_t = _1604___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _1606_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_1605_t, containingPath);
          _1606_tt = _out18;
          _1598_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_1606_tt));
        } else if (_source54.is_Newtype) {
          DAST._INewtype _1607___mcc_h3 = _source54.dtor_Newtype_a0;
          DAST._INewtype _1608_n = _1607___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_1608_n);
          _1598_generated = _out19;
        } else {
          DAST._IDatatype _1609___mcc_h4 = _source54.dtor_Datatype_a0;
          DAST._IDatatype _1610_d = _1609___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_1610_d);
          _1598_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _1598_generated);
        _1597_i = (_1597_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1611_tpI;
      _1611_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_1611_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _1612_tp;
          _1612_tp = (@params).Select(_1611_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_1612_tp));
          RAST._IType _1613_genTp;
          RAST._IType _out21;
          _out21 = DCOMP.COMP.GenType(_1612_tp, false, false);
          _1613_genTp = _out21;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_1613_genTp)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _1611_tpI = (_1611_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _1614_baseConstraints;
      _1614_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _1614_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1615_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _1616_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _1617_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1618_whereConstraints;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<RAST._ITypeParam> _out23;
      Dafny.ISequence<RAST._ITypeParam> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25);
      _1615_typeParamsSet = _out22;
      _1616_sTypeParams = _out23;
      _1617_sConstrainedTypeParams = _out24;
      _1618_whereConstraints = _out25;
      Dafny.ISequence<Dafny.Rune> _1619_constrainedTypeParams;
      _1619_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1617_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _1620_fields;
      _1620_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _1621_fieldInits;
      _1621_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _1622_fieldI;
      _1622_fieldI = BigInteger.Zero;
      while ((_1622_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _1623_field;
        _1623_field = ((c).dtor_fields).Select(_1622_fieldI);
        RAST._IType _1624_fieldType;
        RAST._IType _out26;
        _out26 = DCOMP.COMP.GenType(((_1623_field).dtor_formal).dtor_typ, false, false);
        _1624_fieldType = _out26;
        _1620_fields = Dafny.Sequence<RAST._IFormal>.Concat(_1620_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_1623_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell"), Dafny.Sequence<RAST._IType>.FromElements(_1624_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source55 = (_1623_field).dtor_defaultValue;
        if (_source55.is_None) {
          {
            _1621_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1621_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_1623_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _1625___mcc_h0 = _source55.dtor_value;
          DAST._IExpression _1626_e = _1625___mcc_h0;
          {
            RAST._IExpr _1627_eStr;
            bool _1628___v15;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1629___v16;
            RAST._IExpr _out27;
            bool _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_1626_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out27, out _out28, out _out29);
            _1627_eStr = _out27;
            _1628___v15 = _out28;
            _1629___v16 = _out29;
            _1621_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1621_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_1623_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), (_1627_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _1622_fieldI = (_1622_fieldI) + (BigInteger.One);
      }
      BigInteger _1630_typeParamI;
      _1630_typeParamI = BigInteger.Zero;
      while ((_1630_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _1631_tpeGen;
        RAST._IType _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1630_typeParamI), false, false);
        _1631_tpeGen = _out30;
        _1620_fields = Dafny.Sequence<RAST._IFormal>.Concat(_1620_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_1630_typeParamI)), RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData"), Dafny.Sequence<RAST._IType>.FromElements(_1631_tpeGen)))));
        _1621_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1621_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_1630_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _1630_typeParamI = (_1630_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _1632_struct;
      _1632_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _1616_sTypeParams, RAST.Formals.create_NamedFormals(_1620_fields));
      Dafny.ISequence<RAST._IType> _1633_typeParamsAsTypes;
      _1633_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_1634_typeParam) => {
        return RAST.__default.RawType((_1634_typeParam).dtor_content);
      })), _1616_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_1632_struct));
      Dafny.ISequence<RAST._IImplMember> _1635_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _1636_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _1615_typeParamsSet, out _out31, out _out32);
      _1635_implBodyRaw = _out31;
      _1636_traitBodies = _out32;
      Dafny.ISequence<RAST._IImplMember> _1637_implBody;
      _1637_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(DCOMP.__default.escapeIdent((c).dtor_name), _1621_fieldInits))))), _1635_implBodyRaw);
      RAST._IImpl _1638_i;
      _1638_i = RAST.Impl.create_Impl(_1617_sConstrainedTypeParams, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1633_typeParamsAsTypes), _1618_whereConstraints, _1637_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1638_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _1639_i;
        _1639_i = BigInteger.Zero;
        while ((_1639_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _1640_superClass;
          _1640_superClass = ((c).dtor_superClasses).Select(_1639_i);
          DAST._IType _source56 = _1640_superClass;
          if (_source56.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1641___mcc_h1 = _source56.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _1642___mcc_h2 = _source56.dtor_typeArgs;
            DAST._IResolvedType _1643___mcc_h3 = _source56.dtor_resolved;
            DAST._IResolvedType _source57 = _1643___mcc_h3;
            if (_source57.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1644___mcc_h7 = _source57.dtor_path;
            } else if (_source57.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1645___mcc_h9 = _source57.dtor_path;
              Dafny.ISequence<DAST._IType> _1646_typeArgs = _1642___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1647_traitPath = _1641___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _1648_pathStr;
                Dafny.ISequence<Dafny.Rune> _out33;
                _out33 = DCOMP.COMP.GenPath(_1647_traitPath);
                _1648_pathStr = _out33;
                Dafny.ISequence<RAST._IType> _1649_typeArgs;
                Dafny.ISequence<RAST._IType> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_1646_typeArgs, false, false);
                _1649_typeArgs = _out34;
                Dafny.ISequence<RAST._IImplMember> _1650_body;
                _1650_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_1636_traitBodies).Contains(_1647_traitPath)) {
                  _1650_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_1636_traitBodies, _1647_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _1651_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _1651_genSelfPath = _out35;
                RAST._IModDecl _1652_x;
                _1652_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1617_sConstrainedTypeParams, RAST.Type.create_TypeApp(_1648_pathStr, _1649_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_1651_genSelfPath, _1633_typeParamsAsTypes)), _1618_whereConstraints, _1650_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_1652_x));
              }
            } else {
              DAST._IType _1653___mcc_h11 = _source57.dtor_baseType;
              DAST._INewtypeRange _1654___mcc_h12 = _source57.dtor_range;
              bool _1655___mcc_h13 = _source57.dtor_erase;
            }
          } else if (_source56.is_Nullable) {
            DAST._IType _1656___mcc_h17 = _source56.dtor_Nullable_a0;
          } else if (_source56.is_Tuple) {
            Dafny.ISequence<DAST._IType> _1657___mcc_h19 = _source56.dtor_Tuple_a0;
          } else if (_source56.is_Array) {
            DAST._IType _1658___mcc_h21 = _source56.dtor_element;
            BigInteger _1659___mcc_h22 = _source56.dtor_dims;
          } else if (_source56.is_Seq) {
            DAST._IType _1660___mcc_h25 = _source56.dtor_element;
          } else if (_source56.is_Set) {
            DAST._IType _1661___mcc_h27 = _source56.dtor_element;
          } else if (_source56.is_Multiset) {
            DAST._IType _1662___mcc_h29 = _source56.dtor_element;
          } else if (_source56.is_Map) {
            DAST._IType _1663___mcc_h31 = _source56.dtor_key;
            DAST._IType _1664___mcc_h32 = _source56.dtor_value;
          } else if (_source56.is_Arrow) {
            Dafny.ISequence<DAST._IType> _1665___mcc_h35 = _source56.dtor_args;
            DAST._IType _1666___mcc_h36 = _source56.dtor_result;
          } else if (_source56.is_Primitive) {
            DAST._IPrimitive _1667___mcc_h39 = _source56.dtor_Primitive_a0;
          } else if (_source56.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _1668___mcc_h41 = _source56.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _1669___mcc_h43 = _source56.dtor_TypeArg_a0;
          }
          _1639_i = (_1639_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _1670_d;
      _1670_d = RAST.Impl.create_ImplFor(_1617_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1633_typeParamsAsTypes), _1618_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _1671_defaultImpl;
      _1671_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1670_d));
      RAST._IImpl _1672_p;
      _1672_p = RAST.Impl.create_ImplFor(_1617_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1633_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _1673_printImpl;
      _1673_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1672_p));
      RAST._IImpl _1674_pp;
      _1674_pp = RAST.Impl.create_ImplFor(_1616_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1633_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.Self)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _1675_ptrPartialEqImpl;
      _1675_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_1674_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _1671_defaultImpl), _1673_printImpl), _1675_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _1676_typeParamsSet;
      _1676_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _1677_typeParams;
      _1677_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _1678_tpI;
      _1678_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_1678_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _1679_tp;
          _1679_tp = ((t).dtor_typeParams).Select(_1678_tpI);
          _1676_typeParamsSet = Dafny.Set<DAST._IType>.Union(_1676_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_1679_tp));
          RAST._IType _1680_genTp;
          RAST._IType _out36;
          _out36 = DCOMP.COMP.GenType(_1679_tp, false, false);
          _1680_genTp = _out36;
          _1677_typeParams = Dafny.Sequence<RAST._IType>.Concat(_1677_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_1680_genTp));
          _1678_tpI = (_1678_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1681_fullPath;
      _1681_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _1682_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _1683___v19;
      Dafny.ISequence<RAST._IImplMember> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_1681_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_1681_fullPath)), _1676_typeParamsSet, out _out37, out _out38);
      _1682_implBody = _out37;
      _1683___v19 = _out38;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((t).dtor_name), _1677_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _1682_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1684_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _1685_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _1686_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1687_whereConstraints;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<RAST._ITypeParam> _out40;
      Dafny.ISequence<RAST._ITypeParam> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42);
      _1684_typeParamsSet = _out39;
      _1685_sTypeParams = _out40;
      _1686_sConstrainedTypeParams = _out41;
      _1687_whereConstraints = _out42;
      Dafny.ISequence<RAST._IType> _1688_typeParamsAsTypes;
      _1688_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_1689_t) => {
        return RAST.__default.RawType((_1689_t).dtor_content);
      })), _1685_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _1690_constrainedTypeParams;
      _1690_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1686_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _1691_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source58 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source58.is_None) {
        RAST._IType _out43;
        _out43 = DCOMP.COMP.GenType((c).dtor_base, false, false);
        _1691_underlyingType = _out43;
      } else {
        RAST._IType _1692___mcc_h0 = _source58.dtor_value;
        RAST._IType _1693_v = _1692___mcc_h0;
        _1691_underlyingType = _1693_v;
      }
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _1685_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.__default.PUB, _1691_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _1694_fnBody;
      _1694_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source59 = (c).dtor_witnessExpr;
      if (_source59.is_None) {
        {
          _1694_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1694_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _1695___mcc_h1 = _source59.dtor_value;
        DAST._IExpression _1696_e = _1695___mcc_h1;
        {
          RAST._IExpr _1697_eStr;
          bool _1698___v20;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1699___v21;
          RAST._IExpr _out44;
          bool _out45;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out46;
          DCOMP.COMP.GenExpr(_1696_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out44, out _out45, out _out46);
          _1697_eStr = _out44;
          _1698___v20 = _out45;
          _1699___v21 = _out46;
          _1694_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1694_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1697_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _1700_body;
      _1700_body = RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_1694_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1686_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1688_typeParamsAsTypes), _1687_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_1700_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1686_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1688_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1686_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1688_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_1691_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _1701_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _1702_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _1703_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _1704_whereConstraints;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParam> _out48;
      Dafny.ISequence<RAST._ITypeParam> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _1701_typeParamsSet = _out47;
      _1702_sTypeParams = _out48;
      _1703_sConstrainedTypeParams = _out49;
      _1704_whereConstraints = _out50;
      Dafny.ISequence<RAST._IType> _1705_typeParamsAsTypes;
      _1705_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_1706_t) => {
        return RAST.__default.RawType((_1706_t).dtor_content);
      })), _1702_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _1707_constrainedTypeParams;
      _1707_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_1703_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<RAST._IEnumCase> _1708_ctors;
      _1708_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _1709_i;
      _1709_i = BigInteger.Zero;
      while ((_1709_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1710_ctor;
        _1710_ctor = ((c).dtor_ctors).Select(_1709_i);
        Dafny.ISequence<RAST._IFormal> _1711_ctorArgs;
        _1711_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _1712_j;
        _1712_j = BigInteger.Zero;
        while ((_1712_j) < (new BigInteger(((_1710_ctor).dtor_args).Count))) {
          DAST._IFormal _1713_formal;
          _1713_formal = ((_1710_ctor).dtor_args).Select(_1712_j);
          RAST._IType _1714_formalType;
          RAST._IType _out51;
          _out51 = DCOMP.COMP.GenType((_1713_formal).dtor_typ, false, false);
          _1714_formalType = _out51;
          if ((c).dtor_isCo) {
            _1711_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_1711_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1713_formal).dtor_name), RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper"), Dafny.Sequence<RAST._IType>.FromElements(_1714_formalType)))));
          } else {
            _1711_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_1711_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1713_formal).dtor_name), _1714_formalType)));
          }
          _1712_j = (_1712_j) + (BigInteger.One);
        }
        _1708_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_1708_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_1710_ctor).dtor_name), RAST.Formals.create_NamedFormals(_1711_ctorArgs))));
        _1709_i = (_1709_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1715_selfPath;
      _1715_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _1716_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _1717_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out52;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out53;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_1715_selfPath)), _1701_typeParamsSet, out _out52, out _out53);
      _1716_implBodyRaw = _out52;
      _1717_traitBodies = _out53;
      Dafny.ISequence<RAST._IImplMember> _1718_implBody;
      _1718_implBody = _1716_implBodyRaw;
      _1709_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1719_emittedFields;
      _1719_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_1709_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1720_ctor;
        _1720_ctor = ((c).dtor_ctors).Select(_1709_i);
        BigInteger _1721_j;
        _1721_j = BigInteger.Zero;
        while ((_1721_j) < (new BigInteger(((_1720_ctor).dtor_args).Count))) {
          DAST._IFormal _1722_formal;
          _1722_formal = ((_1720_ctor).dtor_args).Select(_1721_j);
          if (!((_1719_emittedFields).Contains((_1722_formal).dtor_name))) {
            _1719_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1719_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_1722_formal).dtor_name));
            RAST._IType _1723_formalType;
            RAST._IType _out54;
            _out54 = DCOMP.COMP.GenType((_1722_formal).dtor_typ, false, false);
            _1723_formalType = _out54;
            Dafny.ISequence<RAST._IMatchCase> _1724_cases;
            _1724_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _1725_k;
            _1725_k = BigInteger.Zero;
            while ((_1725_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _1726_ctor2;
              _1726_ctor2 = ((c).dtor_ctors).Select(_1725_k);
              Dafny.ISequence<Dafny.Rune> _1727_pattern;
              _1727_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_1726_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _1728_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _1729_l;
              _1729_l = BigInteger.Zero;
              bool _1730_hasMatchingField;
              _1730_hasMatchingField = false;
              while ((_1729_l) < (new BigInteger(((_1726_ctor2).dtor_args).Count))) {
                DAST._IFormal _1731_formal2;
                _1731_formal2 = ((_1726_ctor2).dtor_args).Select(_1729_l);
                if (((_1722_formal).dtor_name).Equals((_1731_formal2).dtor_name)) {
                  _1730_hasMatchingField = true;
                }
                _1727_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1727_pattern, DCOMP.__default.escapeIdent((_1731_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _1729_l = (_1729_l) + (BigInteger.One);
              }
              _1727_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_1727_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_1730_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _1728_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_1722_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _1728_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1722_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _1728_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _1732_ctorMatch;
              _1732_ctorMatch = RAST.MatchCase.create(_1727_pattern, RAST.Expr.create_RawExpr(_1728_rhs));
              _1724_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1724_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_1732_ctorMatch));
              _1725_k = (_1725_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _1724_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1724_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _1733_methodBody;
            _1733_methodBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _1724_cases);
            _1718_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_1718_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(DCOMP.__default.escapeIdent((_1722_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_1723_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1733_methodBody)))));
          }
          _1721_j = (_1721_j) + (BigInteger.One);
        }
        _1709_i = (_1709_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _1734_typeI;
        _1734_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _1735_types;
        _1735_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_1734_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _1736_genTp;
          RAST._IType _out55;
          _out55 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_1734_typeI), false, false);
          _1736_genTp = _out55;
          _1735_types = Dafny.Sequence<RAST._IType>.Concat(_1735_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::"), Dafny.Sequence<RAST._IType>.FromElements(_1736_genTp))));
          _1734_typeI = (_1734_typeI) + (BigInteger.One);
        }
        _1708_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_1708_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_1737_tpe) => {
          return RAST.NamelessFormal.create(RAST.__default.PRIV, _1737_tpe);
        })), _1735_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _1738_enumBody;
      _1738_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMP.__default.escapeIdent((c).dtor_name), _1702_sTypeParams, _1708_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_1703_sConstrainedTypeParams, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1705_typeParamsAsTypes), _1704_whereConstraints, _1718_implBody)));
      _1709_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _1739_printImplBodyCases;
      _1739_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_1709_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _1740_ctor;
        _1740_ctor = ((c).dtor_ctors).Select(_1709_i);
        Dafny.ISequence<Dafny.Rune> _1741_ctorMatch;
        _1741_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_1740_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _1742_modulePrefix;
        _1742_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _1743_printRhs;
        _1743_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _1742_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_1740_ctor).dtor_name)), (((_1740_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _1744_j;
        _1744_j = BigInteger.Zero;
        while ((_1744_j) < (new BigInteger(((_1740_ctor).dtor_args).Count))) {
          DAST._IFormal _1745_formal;
          _1745_formal = ((_1740_ctor).dtor_args).Select(_1744_j);
          _1741_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1741_ctorMatch, DCOMP.__default.escapeIdent((_1745_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_1744_j).Sign == 1) {
            _1743_printRhs = (_1743_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _1743_printRhs = (_1743_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_1745_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _1744_j = (_1744_j) + (BigInteger.One);
        }
        _1741_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_1741_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_1740_ctor).dtor_hasAnyArgs) {
          _1743_printRhs = (_1743_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _1743_printRhs = (_1743_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _1739_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1739_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _1741_ctorMatch), RAST.Expr.create_Block(_1743_printRhs))));
        _1709_i = (_1709_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _1739_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_1739_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _1746_printImplBody;
      _1746_printImplBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _1739_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _1747_printImpl;
      _1747_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1703_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1705_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1746_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _1748_defaultImpl;
      _1748_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _1709_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _1749_structName;
        _1749_structName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _1750_structAssignments;
        _1750_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_1709_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1751_formal;
          _1751_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_1709_i);
          _1750_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1750_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_1751_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _1709_i = (_1709_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _1752_defaultConstrainedTypeParams;
        _1752_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_1702_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        _1748_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_1752_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(DCOMP.__default.escapeIdent((c).dtor_name), _1705_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_1749_structName, _1750_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_1738_enumBody, _1747_printImpl), _1748_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1753_i;
        _1753_i = BigInteger.Zero;
        while ((_1753_i) < (new BigInteger((p).Count))) {
          if ((_1753_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1753_i))));
          _1753_i = (_1753_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _1754_i;
        _1754_i = BigInteger.Zero;
        while ((_1754_i) < (new BigInteger((args).Count))) {
          RAST._IType _1755_genTp;
          RAST._IType _out56;
          _out56 = DCOMP.COMP.GenType((args).Select(_1754_i), inBinding, inFn);
          _1755_genTp = _out56;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_1755_genTp));
          _1754_i = (_1754_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn) {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source60 = c;
      if (_source60.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1756___mcc_h0 = _source60.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1757___mcc_h1 = _source60.dtor_typeArgs;
        DAST._IResolvedType _1758___mcc_h2 = _source60.dtor_resolved;
        DAST._IResolvedType _1759_resolved = _1758___mcc_h2;
        Dafny.ISequence<DAST._IType> _1760_args = _1757___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1761_p = _1756___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _1762_t;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenPath(_1761_p);
          _1762_t = _out57;
          s = RAST.Type.create_TypeApp(_1762_t, Dafny.Sequence<RAST._IType>.FromElements());
          Dafny.ISequence<RAST._IType> _1763_typeArgs;
          Dafny.ISequence<RAST._IType> _out58;
          _out58 = DCOMP.COMP.GenTypeArgs(_1760_args, inBinding, inFn);
          _1763_typeArgs = _out58;
          var _pat_let_tv9 = _1763_typeArgs;
          s = Dafny.Helpers.Let<RAST._IType, RAST._IType>(s, _pat_let6_0 => Dafny.Helpers.Let<RAST._IType, RAST._IType>(_pat_let6_0, _1764_dt__update__tmp_h0 => Dafny.Helpers.Let<Dafny.ISequence<RAST._IType>, RAST._IType>(_pat_let_tv9, _pat_let7_0 => Dafny.Helpers.Let<Dafny.ISequence<RAST._IType>, RAST._IType>(_pat_let7_0, _1765_dt__update_harguments_h0 => (((_1764_dt__update__tmp_h0).is_TypeApp) ? (RAST.Type.create_TypeApp((_1764_dt__update__tmp_h0).dtor_baseName, _1765_dt__update_harguments_h0)) : ((((_1764_dt__update__tmp_h0).is_TupleType) ? (RAST.Type.create_TupleType(_1765_dt__update_harguments_h0)) : (RAST.Type.create_FnType(_1765_dt__update_harguments_h0, (_1764_dt__update__tmp_h0).dtor_returnType)))))))));
          DAST._IResolvedType _source61 = _1759_resolved;
          if (_source61.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1766___mcc_h18 = _source61.dtor_path;
            {
              s = RAST.__default.Rc(s);
            }
          } else if (_source61.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1767___mcc_h19 = _source61.dtor_path;
            {
              if ((_1761_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>"));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _1768___mcc_h20 = _source61.dtor_baseType;
            DAST._INewtypeRange _1769___mcc_h21 = _source61.dtor_range;
            bool _1770___mcc_h22 = _source61.dtor_erase;
            bool _1771_erased = _1770___mcc_h22;
            DAST._INewtypeRange _1772_range = _1769___mcc_h21;
            DAST._IType _1773_t = _1768___mcc_h20;
            {
              if (_1771_erased) {
                Std.Wrappers._IOption<RAST._IType> _source62 = DCOMP.COMP.NewtypeToRustType(_1773_t, _1772_range);
                if (_source62.is_None) {
                } else {
                  RAST._IType _1774___mcc_h23 = _source62.dtor_value;
                  RAST._IType _1775_v = _1774___mcc_h23;
                  s = _1775_v;
                }
              }
            }
          }
        }
      } else if (_source60.is_Nullable) {
        DAST._IType _1776___mcc_h3 = _source60.dtor_Nullable_a0;
        DAST._IType _1777_inner = _1776___mcc_h3;
        {
          RAST._IType _1778_innerExpr;
          RAST._IType _out59;
          _out59 = DCOMP.COMP.GenType(_1777_inner, inBinding, inFn);
          _1778_innerExpr = _out59;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option"), Dafny.Sequence<RAST._IType>.FromElements(_1778_innerExpr));
        }
      } else if (_source60.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1779___mcc_h4 = _source60.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1780_types = _1779___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _1781_args;
          _1781_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _1782_i;
          _1782_i = BigInteger.Zero;
          while ((_1782_i) < (new BigInteger((_1780_types).Count))) {
            RAST._IType _1783_generated;
            RAST._IType _out60;
            _out60 = DCOMP.COMP.GenType((_1780_types).Select(_1782_i), inBinding, inFn);
            _1783_generated = _out60;
            _1781_args = Dafny.Sequence<RAST._IType>.Concat(_1781_args, Dafny.Sequence<RAST._IType>.FromElements(_1783_generated));
            _1782_i = (_1782_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_1781_args);
        }
      } else if (_source60.is_Array) {
        DAST._IType _1784___mcc_h5 = _source60.dtor_element;
        BigInteger _1785___mcc_h6 = _source60.dtor_dims;
        BigInteger _1786_dims = _1785___mcc_h6;
        DAST._IType _1787_element = _1784___mcc_h5;
        {
          RAST._IType _1788_elem;
          RAST._IType _out61;
          _out61 = DCOMP.COMP.GenType(_1787_element, inBinding, inFn);
          _1788_elem = _out61;
          s = _1788_elem;
          BigInteger _1789_i;
          _1789_i = BigInteger.Zero;
          while ((_1789_i) < (_1786_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _1789_i = (_1789_i) + (BigInteger.One);
          }
        }
      } else if (_source60.is_Seq) {
        DAST._IType _1790___mcc_h7 = _source60.dtor_element;
        DAST._IType _1791_element = _1790___mcc_h7;
        {
          RAST._IType _1792_elem;
          RAST._IType _out62;
          _out62 = DCOMP.COMP.GenType(_1791_element, inBinding, inFn);
          _1792_elem = _out62;
          s = RAST.__default.Rc(RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Sequence"), Dafny.Sequence<RAST._IType>.FromElements(_1792_elem)));
        }
      } else if (_source60.is_Set) {
        DAST._IType _1793___mcc_h8 = _source60.dtor_element;
        DAST._IType _1794_element = _1793___mcc_h8;
        {
          RAST._IType _1795_elem;
          RAST._IType _out63;
          _out63 = DCOMP.COMP.GenType(_1794_element, inBinding, inFn);
          _1795_elem = _out63;
          s = RAST.__default.Rc(RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Set"), Dafny.Sequence<RAST._IType>.FromElements(_1795_elem)));
        }
      } else if (_source60.is_Multiset) {
        DAST._IType _1796___mcc_h9 = _source60.dtor_element;
        DAST._IType _1797_element = _1796___mcc_h9;
        {
          RAST._IType _1798_elem;
          RAST._IType _out64;
          _out64 = DCOMP.COMP.GenType(_1797_element, inBinding, inFn);
          _1798_elem = _out64;
          s = RAST.__default.Rc(RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Multiset"), Dafny.Sequence<RAST._IType>.FromElements(_1798_elem)));
        }
      } else if (_source60.is_Map) {
        DAST._IType _1799___mcc_h10 = _source60.dtor_key;
        DAST._IType _1800___mcc_h11 = _source60.dtor_value;
        DAST._IType _1801_value = _1800___mcc_h11;
        DAST._IType _1802_key = _1799___mcc_h10;
        {
          RAST._IType _1803_keyType;
          RAST._IType _out65;
          _out65 = DCOMP.COMP.GenType(_1802_key, inBinding, inFn);
          _1803_keyType = _out65;
          RAST._IType _1804_valueType;
          RAST._IType _out66;
          _out66 = DCOMP.COMP.GenType(_1801_value, inBinding, inFn);
          _1804_valueType = _out66;
          s = RAST.__default.Rc(RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Map"), Dafny.Sequence<RAST._IType>.FromElements(_1803_keyType, _1804_valueType)));
        }
      } else if (_source60.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1805___mcc_h12 = _source60.dtor_args;
        DAST._IType _1806___mcc_h13 = _source60.dtor_result;
        DAST._IType _1807_result = _1806___mcc_h13;
        Dafny.ISequence<DAST._IType> _1808_args = _1805___mcc_h12;
        {
          Dafny.ISequence<RAST._IType> _1809_argTypes;
          _1809_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _1810_i;
          _1810_i = BigInteger.Zero;
          while ((_1810_i) < (new BigInteger((_1808_args).Count))) {
            RAST._IType _1811_generated;
            RAST._IType _out67;
            _out67 = DCOMP.COMP.GenType((_1808_args).Select(_1810_i), inBinding, true);
            _1811_generated = _out67;
            _1809_argTypes = Dafny.Sequence<RAST._IType>.Concat(_1809_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_1811_generated)));
            _1810_i = (_1810_i) + (BigInteger.One);
          }
          RAST._IType _1812_resultType;
          RAST._IType _out68;
          _out68 = DCOMP.COMP.GenType(_1807_result, inBinding, (inFn) || (inBinding));
          _1812_resultType = _out68;
          s = RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper"), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_1809_argTypes, RAST.Type.create_IntersectionType(_1812_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source60.is_Primitive) {
        DAST._IPrimitive _1813___mcc_h14 = _source60.dtor_Primitive_a0;
        DAST._IPrimitive _1814_p = _1813___mcc_h14;
        {
          DAST._IPrimitive _source63 = _1814_p;
          if (_source63.is_Int) {
            s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt")));
          } else if (_source63.is_Real) {
            s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational")));
          } else if (_source63.is_String) {
            s = RAST.__default.Vec(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char")));
          } else if (_source63.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"));
          }
        }
      } else if (_source60.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1815___mcc_h15 = _source60.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1816_v = _1815___mcc_h15;
        s = RAST.__default.RawType(_1816_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _1817___mcc_h16 = _source60.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source64 = _1817___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1818___mcc_h17 = _source64;
        Dafny.ISequence<Dafny.Rune> _1819_name = _1818___mcc_h17;
        s = RAST.__default.RawType(DCOMP.__default.escapeIdent(_1819_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> traitBodies) {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _1820_i;
      _1820_i = BigInteger.Zero;
      while ((_1820_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source65 = (body).Select(_1820_i);
        DAST._IMethod _1821___mcc_h0 = _source65;
        DAST._IMethod _1822_m = _1821___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source66 = (_1822_m).dtor_overridingPath;
          if (_source66.is_None) {
            {
              RAST._IImplMember _1823_generated;
              RAST._IImplMember _out69;
              _out69 = DCOMP.COMP.GenMethod(_1822_m, forTrait, enclosingType, enclosingTypeParams);
              _1823_generated = _out69;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_1823_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1824___mcc_h1 = _source66.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1825_p = _1824___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _1826_existing;
              _1826_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_1825_p)) {
                _1826_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies, _1825_p);
              }
              RAST._IImplMember _1827_genMethod;
              RAST._IImplMember _out70;
              _out70 = DCOMP.COMP.GenMethod(_1822_m, true, enclosingType, enclosingTypeParams);
              _1827_genMethod = _out70;
              _1826_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_1826_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_1827_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_1825_p, _1826_existing)));
            }
          }
        }
        _1820_i = (_1820_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _1828_i;
      _1828_i = BigInteger.Zero;
      while ((_1828_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1829_param;
        _1829_param = (@params).Select(_1828_i);
        RAST._IType _1830_paramType;
        RAST._IType _out71;
        _out71 = DCOMP.COMP.GenType((_1829_param).dtor_typ, false, false);
        _1830_paramType = _out71;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1829_param).dtor_name), RAST.Type.create_Borrowed(_1830_paramType))));
        _1828_i = (_1828_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _1831_params;
      Dafny.ISequence<RAST._IFormal> _out72;
      _out72 = DCOMP.COMP.GenParams((m).dtor_params);
      _1831_params = _out72;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1832_paramNames;
      _1832_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1833_paramI;
      _1833_paramI = BigInteger.Zero;
      while ((_1833_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1832_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1832_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1833_paramI)).dtor_name));
        _1833_paramI = (_1833_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1831_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _1831_params);
        } else {
          RAST._IType _1834_tpe;
          RAST._IType _out73;
          _out73 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1834_tpe = _out73;
          _1831_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_1834_tpe))), _1831_params);
        }
      }
      Dafny.ISequence<RAST._IType> _1835_retTypeArgs;
      _1835_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _1836_typeI;
      _1836_typeI = BigInteger.Zero;
      while ((_1836_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _1837_typeExpr;
        RAST._IType _out74;
        _out74 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1836_typeI), false, false);
        _1837_typeExpr = _out74;
        _1835_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_1835_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_1837_typeExpr));
        _1836_typeI = (_1836_typeI) + (BigInteger.One);
      }
      byte _1838_visibility;
      _1838_visibility = RAST.__default.PUB;
      Dafny.ISequence<Dafny.Rune> _1839_fnName;
      _1839_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _1840_typeParamsFiltered;
      _1840_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1841_typeParamI;
      _1841_typeParamI = BigInteger.Zero;
      while ((_1841_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1842_typeParam;
        _1842_typeParam = ((m).dtor_typeParams).Select(_1841_typeParamI);
        if (!((enclosingTypeParams).Contains(_1842_typeParam))) {
          _1840_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1840_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1842_typeParam));
        }
        _1841_typeParamI = (_1841_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1843_whereClauses;
      _1843_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _1844_typeParams;
      _1844_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_1840_typeParamsFiltered).Count)).Sign == 1) {
        _1843_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1843_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1845_i;
        _1845_i = BigInteger.Zero;
        while ((_1845_i) < (new BigInteger((_1840_typeParamsFiltered).Count))) {
          RAST._IType _1846_typeExpr;
          RAST._IType _out75;
          _out75 = DCOMP.COMP.GenType((_1840_typeParamsFiltered).Select(_1845_i), false, false);
          _1846_typeExpr = _out75;
          _1844_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_1844_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_1846_typeExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _1845_i = (_1845_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _1847_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _1848_earlyReturn;
        _1848_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source67 = (m).dtor_outVars;
        if (_source67.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1849___mcc_h0 = _source67.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1850_outVars = _1849___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _1851_tupleArgs;
            _1851_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _1852_outI;
            _1852_outI = BigInteger.Zero;
            while ((_1852_outI) < (new BigInteger((_1850_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _1853_outVar;
              _1853_outVar = (_1850_outVars).Select(_1852_outI);
              _1851_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_1851_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_RawExpr(DCOMP.__default.escapeIdent((_1853_outVar)))));
              _1852_outI = (_1852_outI) + (BigInteger.One);
            }
            _1848_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_1851_tupleArgs)));
          }
        }
        RAST._IExpr _1854_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1855___v24;
        RAST._IExpr _out76;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out77;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1832_paramNames, true, _1848_earlyReturn, out _out76, out _out77);
        _1854_body = _out76;
        _1855___v24 = _out77;
        _1847_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_1854_body);
      } else {
        _1847_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_1838_visibility, RAST.Fn.create(_1839_fnName, _1844_typeParams, _1831_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_1835_retTypeArgs).Count)) == (BigInteger.One)) ? ((_1835_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_1835_retTypeArgs)))), _1843_whereClauses, _1847_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1856_declarations;
      _1856_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1857_i;
      _1857_i = BigInteger.Zero;
      while ((_1857_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1858_stmt;
        _1858_stmt = (stmts).Select(_1857_i);
        RAST._IExpr _1859_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1860_recIdents;
        RAST._IExpr _out78;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out79;
        DCOMP.COMP.GenStmt(_1858_stmt, selfIdent, @params, (isLast) && ((_1857_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out78, out _out79);
        _1859_stmtExpr = _out78;
        _1860_recIdents = _out79;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1860_recIdents, _1856_declarations));
        DAST._IStatement _source68 = _1858_stmt;
        if (_source68.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1861___mcc_h0 = _source68.dtor_name;
          DAST._IType _1862___mcc_h1 = _source68.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _1863___mcc_h2 = _source68.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1864_name = _1861___mcc_h0;
          {
            _1856_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1856_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1864_name));
          }
        } else if (_source68.is_Assign) {
          DAST._IAssignLhs _1865___mcc_h6 = _source68.dtor_lhs;
          DAST._IExpression _1866___mcc_h7 = _source68.dtor_value;
        } else if (_source68.is_If) {
          DAST._IExpression _1867___mcc_h10 = _source68.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1868___mcc_h11 = _source68.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1869___mcc_h12 = _source68.dtor_els;
        } else if (_source68.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1870___mcc_h16 = _source68.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1871___mcc_h17 = _source68.dtor_body;
        } else if (_source68.is_While) {
          DAST._IExpression _1872___mcc_h20 = _source68.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1873___mcc_h21 = _source68.dtor_body;
        } else if (_source68.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1874___mcc_h24 = _source68.dtor_boundName;
          DAST._IType _1875___mcc_h25 = _source68.dtor_boundType;
          DAST._IExpression _1876___mcc_h26 = _source68.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1877___mcc_h27 = _source68.dtor_body;
        } else if (_source68.is_Call) {
          DAST._IExpression _1878___mcc_h32 = _source68.dtor_on;
          DAST._ICallName _1879___mcc_h33 = _source68.dtor_callName;
          Dafny.ISequence<DAST._IType> _1880___mcc_h34 = _source68.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1881___mcc_h35 = _source68.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1882___mcc_h36 = _source68.dtor_outs;
        } else if (_source68.is_Return) {
          DAST._IExpression _1883___mcc_h42 = _source68.dtor_expr;
        } else if (_source68.is_EarlyReturn) {
        } else if (_source68.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1884___mcc_h44 = _source68.dtor_toLabel;
        } else if (_source68.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1885___mcc_h46 = _source68.dtor_body;
        } else if (_source68.is_JumpTailCallStart) {
        } else if (_source68.is_Halt) {
        } else {
          DAST._IExpression _1886___mcc_h48 = _source68.dtor_Print_a0;
        }
        generated = (generated).Then(_1859_stmtExpr);
        _1857_i = (_1857_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source69 = lhs;
      if (_source69.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1887___mcc_h0 = _source69.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source70 = _1887___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1888___mcc_h1 = _source70;
        Dafny.ISequence<Dafny.Rune> _1889_id = _1888___mcc_h1;
        {
          if ((@params).Contains(_1889_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1889_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1889_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1889_id);
          needsIIFE = false;
        }
      } else if (_source69.is_Select) {
        DAST._IExpression _1890___mcc_h2 = _source69.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1891___mcc_h3 = _source69.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1892_field = _1891___mcc_h3;
        DAST._IExpression _1893_on = _1890___mcc_h2;
        {
          RAST._IExpr _1894_onExpr;
          bool _1895_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1896_recIdents;
          RAST._IExpr _out80;
          bool _out81;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out82;
          DCOMP.COMP.GenExpr(_1893_on, selfIdent, @params, false, out _out80, out _out81, out _out82);
          _1894_onExpr = _out80;
          _1895_onOwned = _out81;
          _1896_recIdents = _out82;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_1894_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1892_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1896_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1897___mcc_h4 = _source69.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1898___mcc_h5 = _source69.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1899_indices = _1898___mcc_h5;
        DAST._IExpression _1900_on = _1897___mcc_h4;
        {
          RAST._IExpr _1901_onExpr;
          bool _1902_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1903_recIdents;
          RAST._IExpr _out83;
          bool _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_1900_on, selfIdent, @params, false, out _out83, out _out84, out _out85);
          _1901_onExpr = _out83;
          _1902_onOwned = _out84;
          _1903_recIdents = _out85;
          readIdents = _1903_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1904_i;
          _1904_i = BigInteger.Zero;
          while ((_1904_i) < (new BigInteger((_1899_indices).Count))) {
            RAST._IExpr _1905_idx;
            bool _1906___v28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1907_recIdentsIdx;
            RAST._IExpr _out86;
            bool _out87;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
            DCOMP.COMP.GenExpr((_1899_indices).Select(_1904_i), selfIdent, @params, true, out _out86, out _out87, out _out88);
            _1905_idx = _out86;
            _1906___v28 = _out87;
            _1907_recIdentsIdx = _out88;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_1904_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_1905_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1907_recIdentsIdx);
            _1904_i = (_1904_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_1901_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1904_i = BigInteger.Zero;
          while ((_1904_i) < (new BigInteger((_1899_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_1904_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1904_i = (_1904_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source71 = stmt;
      if (_source71.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1908___mcc_h0 = _source71.dtor_name;
        DAST._IType _1909___mcc_h1 = _source71.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _1910___mcc_h2 = _source71.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source72 = _1910___mcc_h2;
        if (_source72.is_None) {
          DAST._IType _1911_typ = _1909___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1912_name = _1908___mcc_h0;
          {
            RAST._IType _1913_typeString;
            RAST._IType _out89;
            _out89 = DCOMP.COMP.GenType(_1911_typ, true, false);
            _1913_typeString = _out89;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_1912_name), Std.Wrappers.Option<RAST._IType>.create_Some(_1913_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _1914___mcc_h3 = _source72.dtor_value;
          DAST._IExpression _1915_expression = _1914___mcc_h3;
          DAST._IType _1916_typ = _1909___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1917_name = _1908___mcc_h0;
          {
            RAST._IType _1918_typeString;
            RAST._IType _out90;
            _out90 = DCOMP.COMP.GenType(_1916_typ, true, false);
            _1918_typeString = _out90;
            RAST._IExpr _1919_expr;
            bool _1920___v29;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1921_recIdents;
            RAST._IExpr _out91;
            bool _out92;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out93;
            DCOMP.COMP.GenExpr(_1915_expression, selfIdent, @params, true, out _out91, out _out92, out _out93);
            _1919_expr = _out91;
            _1920___v29 = _out92;
            _1921_recIdents = _out93;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_1917_name), Std.Wrappers.Option<RAST._IType>.create_Some(_1918_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1919_expr));
            readIdents = _1921_recIdents;
          }
        }
      } else if (_source71.is_Assign) {
        DAST._IAssignLhs _1922___mcc_h4 = _source71.dtor_lhs;
        DAST._IExpression _1923___mcc_h5 = _source71.dtor_value;
        DAST._IExpression _1924_expression = _1923___mcc_h5;
        DAST._IAssignLhs _1925_lhs = _1922___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1926_lhsGen;
          bool _1927_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1928_recIdents;
          Dafny.ISequence<Dafny.Rune> _out94;
          bool _out95;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
          DCOMP.COMP.GenAssignLhs(_1925_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out94, out _out95, out _out96);
          _1926_lhsGen = _out94;
          _1927_needsIIFE = _out95;
          _1928_recIdents = _out96;
          RAST._IExpr _1929_exprGen;
          bool _1930___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1931_exprIdents;
          RAST._IExpr _out97;
          bool _out98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out99;
          DCOMP.COMP.GenExpr(_1924_expression, selfIdent, @params, true, out _out97, out _out98, out _out99);
          _1929_exprGen = _out97;
          _1930___v30 = _out98;
          _1931_exprIdents = _out99;
          if (_1927_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1929_exprGen)), RAST.Expr.create_RawExpr(_1926_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_1926_lhsGen, _1929_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1928_recIdents, _1931_exprIdents);
        }
      } else if (_source71.is_If) {
        DAST._IExpression _1932___mcc_h6 = _source71.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1933___mcc_h7 = _source71.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1934___mcc_h8 = _source71.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1935_els = _1934___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1936_thn = _1933___mcc_h7;
        DAST._IExpression _1937_cond = _1932___mcc_h6;
        {
          RAST._IExpr _1938_cond;
          bool _1939___v31;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1940_recIdents;
          RAST._IExpr _out100;
          bool _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_1937_cond, selfIdent, @params, true, out _out100, out _out101, out _out102);
          _1938_cond = _out100;
          _1939___v31 = _out101;
          _1940_recIdents = _out102;
          Dafny.ISequence<Dafny.Rune> _1941_condString;
          _1941_condString = (_1938_cond)._ToString(DCOMP.__default.IND);
          readIdents = _1940_recIdents;
          RAST._IExpr _1942_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1943_thnIdents;
          RAST._IExpr _out103;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out104;
          DCOMP.COMP.GenStmts(_1936_thn, selfIdent, @params, isLast, earlyReturn, out _out103, out _out104);
          _1942_thn = _out103;
          _1943_thnIdents = _out104;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1943_thnIdents);
          RAST._IExpr _1944_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1945_elsIdents;
          RAST._IExpr _out105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out106;
          DCOMP.COMP.GenStmts(_1935_els, selfIdent, @params, isLast, earlyReturn, out _out105, out _out106);
          _1944_els = _out105;
          _1945_elsIdents = _out106;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1945_elsIdents);
          generated = RAST.Expr.create_IfExpr(_1938_cond, _1942_thn, _1944_els);
        }
      } else if (_source71.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1946___mcc_h9 = _source71.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1947___mcc_h10 = _source71.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1948_body = _1947___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1949_lbl = _1946___mcc_h9;
        {
          RAST._IExpr _1950_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1951_bodyIdents;
          RAST._IExpr _out107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
          DCOMP.COMP.GenStmts(_1948_body, selfIdent, @params, isLast, earlyReturn, out _out107, out _out108);
          _1950_body = _out107;
          _1951_bodyIdents = _out108;
          readIdents = _1951_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _1949_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_1950_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source71.is_While) {
        DAST._IExpression _1952___mcc_h11 = _source71.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1953___mcc_h12 = _source71.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1954_body = _1953___mcc_h12;
        DAST._IExpression _1955_cond = _1952___mcc_h11;
        {
          RAST._IExpr _1956_cond;
          bool _1957___v32;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1958_recIdents;
          RAST._IExpr _out109;
          bool _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenExpr(_1955_cond, selfIdent, @params, true, out _out109, out _out110, out _out111);
          _1956_cond = _out109;
          _1957___v32 = _out110;
          _1958_recIdents = _out111;
          readIdents = _1958_recIdents;
          RAST._IExpr _1959_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1960_bodyIdents;
          RAST._IExpr _out112;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out113;
          DCOMP.COMP.GenStmts(_1954_body, selfIdent, @params, false, earlyReturn, out _out112, out _out113);
          _1959_body = _out112;
          _1960_bodyIdents = _out113;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1960_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_1956_cond), _1959_body);
        }
      } else if (_source71.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1961___mcc_h13 = _source71.dtor_boundName;
        DAST._IType _1962___mcc_h14 = _source71.dtor_boundType;
        DAST._IExpression _1963___mcc_h15 = _source71.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1964___mcc_h16 = _source71.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1965_body = _1964___mcc_h16;
        DAST._IExpression _1966_over = _1963___mcc_h15;
        DAST._IType _1967_boundType = _1962___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1968_boundName = _1961___mcc_h13;
        {
          RAST._IExpr _1969_over;
          bool _1970___v33;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1971_recIdents;
          RAST._IExpr _out114;
          bool _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenExpr(_1966_over, selfIdent, @params, true, out _out114, out _out115, out _out116);
          _1969_over = _out114;
          _1970___v33 = _out115;
          _1971_recIdents = _out116;
          RAST._IType _1972_boundTypeStr;
          RAST._IType _out117;
          _out117 = DCOMP.COMP.GenType(_1967_boundType, false, false);
          _1972_boundTypeStr = _out117;
          readIdents = _1971_recIdents;
          RAST._IExpr _1973_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1974_bodyIdents;
          RAST._IExpr _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenStmts(_1965_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1968_boundName)), false, earlyReturn, out _out118, out _out119);
          _1973_body = _out118;
          _1974_bodyIdents = _out119;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1974_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1968_boundName));
          generated = RAST.Expr.create_For(DCOMP.__default.escapeIdent(_1968_boundName), _1969_over, _1973_body);
        }
      } else if (_source71.is_Call) {
        DAST._IExpression _1975___mcc_h17 = _source71.dtor_on;
        DAST._ICallName _1976___mcc_h18 = _source71.dtor_callName;
        Dafny.ISequence<DAST._IType> _1977___mcc_h19 = _source71.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1978___mcc_h20 = _source71.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1979___mcc_h21 = _source71.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1980_maybeOutVars = _1979___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1981_args = _1978___mcc_h20;
        Dafny.ISequence<DAST._IType> _1982_typeArgs = _1977___mcc_h19;
        DAST._ICallName _1983_name = _1976___mcc_h18;
        DAST._IExpression _1984_on = _1975___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1985_typeArgString;
          _1985_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1982_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1986_typeI;
            _1986_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _1987_typeArgsR;
            _1987_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_1986_typeI) < (new BigInteger((_1982_typeArgs).Count))) {
              RAST._IType _1988_tpe;
              RAST._IType _out120;
              _out120 = DCOMP.COMP.GenType((_1982_typeArgs).Select(_1986_typeI), false, false);
              _1988_tpe = _out120;
              _1987_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_1987_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_1988_tpe));
              _1986_typeI = (_1986_typeI) + (BigInteger.One);
            }
            _1985_typeArgString = (RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"), _1987_typeArgsR))._ToString(DCOMP.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _1989_argString;
          _1989_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1990_i;
          _1990_i = BigInteger.Zero;
          while ((_1990_i) < (new BigInteger((_1981_args).Count))) {
            if ((_1990_i).Sign == 1) {
              _1989_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1989_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _1991_argExpr;
            bool _1992_isOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1993_argIdents;
            RAST._IExpr _out121;
            bool _out122;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out123;
            DCOMP.COMP.GenExpr((_1981_args).Select(_1990_i), selfIdent, @params, false, out _out121, out _out122, out _out123);
            _1991_argExpr = _out121;
            _1992_isOwned = _out122;
            _1993_argIdents = _out123;
            Dafny.ISequence<Dafny.Rune> _1994_argExprString;
            _1994_argExprString = (_1991_argExpr)._ToString(DCOMP.__default.IND);
            if (_1992_isOwned) {
              _1994_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1994_argExprString);
            }
            _1989_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1989_argString, _1994_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1993_argIdents);
            _1990_i = (_1990_i) + (BigInteger.One);
          }
          RAST._IExpr _1995_enclosingExpr;
          bool _1996___v34;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1997_enclosingIdents;
          RAST._IExpr _out124;
          bool _out125;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
          DCOMP.COMP.GenExpr(_1984_on, selfIdent, @params, false, out _out124, out _out125, out _out126);
          _1995_enclosingExpr = _out124;
          _1996___v34 = _out125;
          _1997_enclosingIdents = _out126;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1997_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _1998_enclosingString;
          _1998_enclosingString = (_1995_enclosingExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source73 = _1984_on;
          if (_source73.is_Literal) {
            DAST._ILiteral _1999___mcc_h26 = _source73.dtor_Literal_a0;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2000___mcc_h28 = _source73.dtor_Ident_a0;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2001___mcc_h30 = _source73.dtor_Companion_a0;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1998_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source73.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2002___mcc_h32 = _source73.dtor_Tuple_a0;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2003___mcc_h34 = _source73.dtor_path;
            Dafny.ISequence<DAST._IType> _2004___mcc_h35 = _source73.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2005___mcc_h36 = _source73.dtor_args;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2006___mcc_h40 = _source73.dtor_dims;
            DAST._IType _2007___mcc_h41 = _source73.dtor_typ;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2008___mcc_h44 = _source73.dtor_path;
            Dafny.ISequence<DAST._IType> _2009___mcc_h45 = _source73.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2010___mcc_h46 = _source73.dtor_variant;
            bool _2011___mcc_h47 = _source73.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2012___mcc_h48 = _source73.dtor_contents;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_Convert) {
            DAST._IExpression _2013___mcc_h54 = _source73.dtor_value;
            DAST._IType _2014___mcc_h55 = _source73.dtor_from;
            DAST._IType _2015___mcc_h56 = _source73.dtor_typ;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_SeqConstruct) {
            DAST._IExpression _2016___mcc_h60 = _source73.dtor_length;
            DAST._IExpression _2017___mcc_h61 = _source73.dtor_elem;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2018___mcc_h64 = _source73.dtor_elements;
            DAST._IType _2019___mcc_h65 = _source73.dtor_typ;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2020___mcc_h68 = _source73.dtor_elements;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2021___mcc_h70 = _source73.dtor_mapElems;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_MapBuilder) {
            DAST._IType _2022___mcc_h72 = _source73.dtor_keyType;
            DAST._IType _2023___mcc_h73 = _source73.dtor_valueType;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_SetBuilder) {
            DAST._IType _2024___mcc_h76 = _source73.dtor_elemType;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_This) {
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_Ite) {
            DAST._IExpression _2025___mcc_h78 = _source73.dtor_cond;
            DAST._IExpression _2026___mcc_h79 = _source73.dtor_thn;
            DAST._IExpression _2027___mcc_h80 = _source73.dtor_els;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_UnOp) {
            DAST._IUnaryOp _2028___mcc_h84 = _source73.dtor_unOp;
            DAST._IExpression _2029___mcc_h85 = _source73.dtor_expr;
            DAST.Format._IUnOpFormat _2030___mcc_h86 = _source73.dtor_format1;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_BinOp) {
            DAST._IBinOp _2031___mcc_h90 = _source73.dtor_op;
            DAST._IExpression _2032___mcc_h91 = _source73.dtor_left;
            DAST._IExpression _2033___mcc_h92 = _source73.dtor_right;
            DAST.Format._IBinOpFormat _2034___mcc_h93 = _source73.dtor_format2;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_ArrayLen) {
            DAST._IExpression _2035___mcc_h98 = _source73.dtor_expr;
            BigInteger _2036___mcc_h99 = _source73.dtor_dim;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_MapKeys) {
            DAST._IExpression _2037___mcc_h102 = _source73.dtor_expr;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_MapValues) {
            DAST._IExpression _2038___mcc_h104 = _source73.dtor_expr;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_Select) {
            DAST._IExpression _2039___mcc_h106 = _source73.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2040___mcc_h107 = _source73.dtor_field;
            bool _2041___mcc_h108 = _source73.dtor_isConstant;
            bool _2042___mcc_h109 = _source73.dtor_onDatatype;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_SelectFn) {
            DAST._IExpression _2043___mcc_h114 = _source73.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2044___mcc_h115 = _source73.dtor_field;
            bool _2045___mcc_h116 = _source73.dtor_onDatatype;
            bool _2046___mcc_h117 = _source73.dtor_isStatic;
            BigInteger _2047___mcc_h118 = _source73.dtor_arity;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_Index) {
            DAST._IExpression _2048___mcc_h124 = _source73.dtor_expr;
            DAST._ICollKind _2049___mcc_h125 = _source73.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2050___mcc_h126 = _source73.dtor_indices;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_IndexRange) {
            DAST._IExpression _2051___mcc_h130 = _source73.dtor_expr;
            bool _2052___mcc_h131 = _source73.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _2053___mcc_h132 = _source73.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _2054___mcc_h133 = _source73.dtor_high;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_TupleSelect) {
            DAST._IExpression _2055___mcc_h138 = _source73.dtor_expr;
            BigInteger _2056___mcc_h139 = _source73.dtor_index;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_Call) {
            DAST._IExpression _2057___mcc_h142 = _source73.dtor_on;
            DAST._ICallName _2058___mcc_h143 = _source73.dtor_callName;
            Dafny.ISequence<DAST._IType> _2059___mcc_h144 = _source73.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2060___mcc_h145 = _source73.dtor_args;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2061___mcc_h150 = _source73.dtor_params;
            DAST._IType _2062___mcc_h151 = _source73.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2063___mcc_h152 = _source73.dtor_body;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2064___mcc_h156 = _source73.dtor_values;
            DAST._IType _2065___mcc_h157 = _source73.dtor_retType;
            DAST._IExpression _2066___mcc_h158 = _source73.dtor_expr;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2067___mcc_h162 = _source73.dtor_name;
            DAST._IType _2068___mcc_h163 = _source73.dtor_typ;
            DAST._IExpression _2069___mcc_h164 = _source73.dtor_value;
            DAST._IExpression _2070___mcc_h165 = _source73.dtor_iifeBody;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_Apply) {
            DAST._IExpression _2071___mcc_h170 = _source73.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2072___mcc_h171 = _source73.dtor_args;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_TypeTest) {
            DAST._IExpression _2073___mcc_h174 = _source73.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2074___mcc_h175 = _source73.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2075___mcc_h176 = _source73.dtor_variant;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_InitializationValue) {
            DAST._IType _2076___mcc_h180 = _source73.dtor_typ;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_BoolBoundedPool) {
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_SetBoundedPool) {
            DAST._IExpression _2077___mcc_h182 = _source73.dtor_of;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source73.is_SeqBoundedPool) {
            DAST._IExpression _2078___mcc_h184 = _source73.dtor_of;
            bool _2079___mcc_h185 = _source73.dtor_includeDuplicates;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _2080___mcc_h188 = _source73.dtor_lo;
            DAST._IExpression _2081___mcc_h189 = _source73.dtor_hi;
            {
              _1998_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1998_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _2082_receiver;
          _2082_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source74 = _1980_maybeOutVars;
          if (_source74.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2083___mcc_h192 = _source74.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2084_outVars = _2083___mcc_h192;
            {
              if ((new BigInteger((_2084_outVars).Count)) > (BigInteger.One)) {
                _2082_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _2085_outI;
              _2085_outI = BigInteger.Zero;
              while ((_2085_outI) < (new BigInteger((_2084_outVars).Count))) {
                if ((_2085_outI).Sign == 1) {
                  _2082_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2082_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _2086_outVar;
                _2086_outVar = (_2084_outVars).Select(_2085_outI);
                _2082_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2082_receiver, (_2086_outVar));
                _2085_outI = (_2085_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_2084_outVars).Count)) > (BigInteger.One)) {
                _2082_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2082_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _2087_renderedName;
          _2087_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source75) => {
            if (_source75.is_Name) {
              Dafny.ISequence<Dafny.Rune> _2088___mcc_h193 = _source75.dtor_name;
              Dafny.ISequence<Dafny.Rune> _2089_name = _2088___mcc_h193;
              return DCOMP.__default.escapeIdent(_2089_name);
            } else if (_source75.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source75.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source75.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_1983_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_2082_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2082_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1998_enclosingString), _2087_renderedName), _1985_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1989_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source71.is_Return) {
        DAST._IExpression _2090___mcc_h22 = _source71.dtor_expr;
        DAST._IExpression _2091_expr = _2090___mcc_h22;
        {
          RAST._IExpr _2092_expr;
          bool _2093___v37;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2094_recIdents;
          RAST._IExpr _out127;
          bool _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_2091_expr, selfIdent, @params, true, out _out127, out _out128, out _out129);
          _2092_expr = _out127;
          _2093___v37 = _out128;
          _2094_recIdents = _out129;
          readIdents = _2094_recIdents;
          if (isLast) {
            generated = _2092_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2092_expr));
          }
        }
      } else if (_source71.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source71.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2095___mcc_h23 = _source71.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2096_toLabel = _2095___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source76 = _2096_toLabel;
          if (_source76.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2097___mcc_h194 = _source76.dtor_value;
            Dafny.ISequence<Dafny.Rune> _2098_lbl = _2097___mcc_h194;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2098_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source71.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _2099___mcc_h24 = _source71.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2100_body = _2099___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _2101_paramI;
          _2101_paramI = BigInteger.Zero;
          while ((_2101_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _2102_param;
            _2102_param = (@params).Select(_2101_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2102_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent(_2102_param), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"))))));
            _2101_paramI = (_2101_paramI) + (BigInteger.One);
          }
          RAST._IExpr _2103_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2104_bodyIdents;
          RAST._IExpr _out130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
          DCOMP.COMP.GenStmts(_2100_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out130, out _out131);
          _2103_body = _out130;
          _2104_bodyIdents = _out131;
          readIdents = _2104_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _2103_body)));
        }
      } else if (_source71.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source71.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _2105___mcc_h25 = _source71.dtor_Print_a0;
        DAST._IExpression _2106_e = _2105___mcc_h25;
        {
          RAST._IExpr _2107_printedExpr;
          bool _2108_isOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2109_recIdents;
          RAST._IExpr _out132;
          bool _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenExpr(_2106_e, selfIdent, @params, false, out _out132, out _out133, out _out134);
          _2107_printedExpr = _out132;
          _2108_isOwned = _out133;
          _2109_recIdents = _out134;
          Dafny.ISequence<Dafny.Rune> _2110_printedExprString;
          _2110_printedExprString = (_2107_printedExpr)._ToString(DCOMP.__default.IND);
          if (_2108_isOwned) {
            _2110_printedExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2110_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _2110_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _2109_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range) {
      DAST._INewtypeRange _source77 = range;
      if (_source77.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source77.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source77.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source77.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source77.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source77.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source77.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source77.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source77.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source77.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source77.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out RAST._IExpr r, out bool isOwned, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      r = RAST.Expr.Default();
      isOwned = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source78 = e;
      if (_source78.is_Literal) {
        DAST._ILiteral _2111___mcc_h0 = _source78.dtor_Literal_a0;
        DAST._ILiteral _source79 = _2111___mcc_h0;
        if (_source79.is_BoolLiteral) {
          bool _2112___mcc_h1 = _source79.dtor_BoolLiteral_a0;
          if ((_2112___mcc_h1) == (false)) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"));
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"));
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source79.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _2113___mcc_h2 = _source79.dtor_IntLiteral_a0;
          DAST._IType _2114___mcc_h3 = _source79.dtor_IntLiteral_a1;
          DAST._IType _2115_t = _2114___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _2116_i = _2113___mcc_h2;
          {
            DAST._IType _source80 = _2115_t;
            if (_source80.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2117___mcc_h258 = _source80.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2118___mcc_h259 = _source80.dtor_typeArgs;
              DAST._IResolvedType _2119___mcc_h260 = _source80.dtor_resolved;
              DAST._IType _2120_o = _2115_t;
              {
                RAST._IType _2121_genType;
                RAST._IType _out135;
                _out135 = DCOMP.COMP.GenType(_2120_o, false, false);
                _2121_genType = _out135;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2121_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Nullable) {
              DAST._IType _2122___mcc_h264 = _source80.dtor_Nullable_a0;
              DAST._IType _2123_o = _2115_t;
              {
                RAST._IType _2124_genType;
                RAST._IType _out136;
                _out136 = DCOMP.COMP.GenType(_2123_o, false, false);
                _2124_genType = _out136;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2124_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2125___mcc_h266 = _source80.dtor_Tuple_a0;
              DAST._IType _2126_o = _2115_t;
              {
                RAST._IType _2127_genType;
                RAST._IType _out137;
                _out137 = DCOMP.COMP.GenType(_2126_o, false, false);
                _2127_genType = _out137;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2127_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Array) {
              DAST._IType _2128___mcc_h268 = _source80.dtor_element;
              BigInteger _2129___mcc_h269 = _source80.dtor_dims;
              DAST._IType _2130_o = _2115_t;
              {
                RAST._IType _2131_genType;
                RAST._IType _out138;
                _out138 = DCOMP.COMP.GenType(_2130_o, false, false);
                _2131_genType = _out138;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2131_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Seq) {
              DAST._IType _2132___mcc_h272 = _source80.dtor_element;
              DAST._IType _2133_o = _2115_t;
              {
                RAST._IType _2134_genType;
                RAST._IType _out139;
                _out139 = DCOMP.COMP.GenType(_2133_o, false, false);
                _2134_genType = _out139;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2134_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Set) {
              DAST._IType _2135___mcc_h274 = _source80.dtor_element;
              DAST._IType _2136_o = _2115_t;
              {
                RAST._IType _2137_genType;
                RAST._IType _out140;
                _out140 = DCOMP.COMP.GenType(_2136_o, false, false);
                _2137_genType = _out140;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2137_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Multiset) {
              DAST._IType _2138___mcc_h276 = _source80.dtor_element;
              DAST._IType _2139_o = _2115_t;
              {
                RAST._IType _2140_genType;
                RAST._IType _out141;
                _out141 = DCOMP.COMP.GenType(_2139_o, false, false);
                _2140_genType = _out141;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2140_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Map) {
              DAST._IType _2141___mcc_h278 = _source80.dtor_key;
              DAST._IType _2142___mcc_h279 = _source80.dtor_value;
              DAST._IType _2143_o = _2115_t;
              {
                RAST._IType _2144_genType;
                RAST._IType _out142;
                _out142 = DCOMP.COMP.GenType(_2143_o, false, false);
                _2144_genType = _out142;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2144_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2145___mcc_h282 = _source80.dtor_args;
              DAST._IType _2146___mcc_h283 = _source80.dtor_result;
              DAST._IType _2147_o = _2115_t;
              {
                RAST._IType _2148_genType;
                RAST._IType _out143;
                _out143 = DCOMP.COMP.GenType(_2147_o, false, false);
                _2148_genType = _out143;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2148_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source80.is_Primitive) {
              DAST._IPrimitive _2149___mcc_h286 = _source80.dtor_Primitive_a0;
              DAST._IPrimitive _source81 = _2149___mcc_h286;
              if (_source81.is_Int) {
                {
                  r = RAST.Expr.create_LiteralInt(_2116_i);
                }
              } else if (_source81.is_Real) {
                DAST._IType _2150_o = _2115_t;
                {
                  RAST._IType _2151_genType;
                  RAST._IType _out144;
                  _out144 = DCOMP.COMP.GenType(_2150_o, false, false);
                  _2151_genType = _out144;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2151_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source81.is_String) {
                DAST._IType _2152_o = _2115_t;
                {
                  RAST._IType _2153_genType;
                  RAST._IType _out145;
                  _out145 = DCOMP.COMP.GenType(_2152_o, false, false);
                  _2153_genType = _out145;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2153_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source81.is_Bool) {
                DAST._IType _2154_o = _2115_t;
                {
                  RAST._IType _2155_genType;
                  RAST._IType _out146;
                  _out146 = DCOMP.COMP.GenType(_2154_o, false, false);
                  _2155_genType = _out146;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2155_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else {
                DAST._IType _2156_o = _2115_t;
                {
                  RAST._IType _2157_genType;
                  RAST._IType _out147;
                  _out147 = DCOMP.COMP.GenType(_2156_o, false, false);
                  _2157_genType = _out147;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2157_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              }
            } else if (_source80.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2158___mcc_h288 = _source80.dtor_Passthrough_a0;
              DAST._IType _2159_o = _2115_t;
              {
                RAST._IType _2160_genType;
                RAST._IType _out148;
                _out148 = DCOMP.COMP.GenType(_2159_o, false, false);
                _2160_genType = _out148;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2160_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2161___mcc_h290 = _source80.dtor_TypeArg_a0;
              DAST._IType _2162_o = _2115_t;
              {
                RAST._IType _2163_genType;
                RAST._IType _out149;
                _out149 = DCOMP.COMP.GenType(_2162_o, false, false);
                _2163_genType = _out149;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2163_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            }
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source79.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _2164___mcc_h4 = _source79.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _2165___mcc_h5 = _source79.dtor_DecLiteral_a1;
          DAST._IType _2166___mcc_h6 = _source79.dtor_DecLiteral_a2;
          DAST._IType _2167_t = _2166___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _2168_d = _2165___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _2169_n = _2164___mcc_h4;
          {
            DAST._IType _source82 = _2167_t;
            if (_source82.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2170___mcc_h292 = _source82.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2171___mcc_h293 = _source82.dtor_typeArgs;
              DAST._IResolvedType _2172___mcc_h294 = _source82.dtor_resolved;
              DAST._IType _2173_o = _2167_t;
              {
                RAST._IType _2174_genType;
                RAST._IType _out150;
                _out150 = DCOMP.COMP.GenType(_2173_o, false, false);
                _2174_genType = _out150;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2174_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Nullable) {
              DAST._IType _2175___mcc_h298 = _source82.dtor_Nullable_a0;
              DAST._IType _2176_o = _2167_t;
              {
                RAST._IType _2177_genType;
                RAST._IType _out151;
                _out151 = DCOMP.COMP.GenType(_2176_o, false, false);
                _2177_genType = _out151;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2177_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2178___mcc_h300 = _source82.dtor_Tuple_a0;
              DAST._IType _2179_o = _2167_t;
              {
                RAST._IType _2180_genType;
                RAST._IType _out152;
                _out152 = DCOMP.COMP.GenType(_2179_o, false, false);
                _2180_genType = _out152;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2180_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Array) {
              DAST._IType _2181___mcc_h302 = _source82.dtor_element;
              BigInteger _2182___mcc_h303 = _source82.dtor_dims;
              DAST._IType _2183_o = _2167_t;
              {
                RAST._IType _2184_genType;
                RAST._IType _out153;
                _out153 = DCOMP.COMP.GenType(_2183_o, false, false);
                _2184_genType = _out153;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2184_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Seq) {
              DAST._IType _2185___mcc_h306 = _source82.dtor_element;
              DAST._IType _2186_o = _2167_t;
              {
                RAST._IType _2187_genType;
                RAST._IType _out154;
                _out154 = DCOMP.COMP.GenType(_2186_o, false, false);
                _2187_genType = _out154;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2187_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Set) {
              DAST._IType _2188___mcc_h308 = _source82.dtor_element;
              DAST._IType _2189_o = _2167_t;
              {
                RAST._IType _2190_genType;
                RAST._IType _out155;
                _out155 = DCOMP.COMP.GenType(_2189_o, false, false);
                _2190_genType = _out155;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2190_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Multiset) {
              DAST._IType _2191___mcc_h310 = _source82.dtor_element;
              DAST._IType _2192_o = _2167_t;
              {
                RAST._IType _2193_genType;
                RAST._IType _out156;
                _out156 = DCOMP.COMP.GenType(_2192_o, false, false);
                _2193_genType = _out156;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2193_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Map) {
              DAST._IType _2194___mcc_h312 = _source82.dtor_key;
              DAST._IType _2195___mcc_h313 = _source82.dtor_value;
              DAST._IType _2196_o = _2167_t;
              {
                RAST._IType _2197_genType;
                RAST._IType _out157;
                _out157 = DCOMP.COMP.GenType(_2196_o, false, false);
                _2197_genType = _out157;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2197_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2198___mcc_h316 = _source82.dtor_args;
              DAST._IType _2199___mcc_h317 = _source82.dtor_result;
              DAST._IType _2200_o = _2167_t;
              {
                RAST._IType _2201_genType;
                RAST._IType _out158;
                _out158 = DCOMP.COMP.GenType(_2200_o, false, false);
                _2201_genType = _out158;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2201_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else if (_source82.is_Primitive) {
              DAST._IPrimitive _2202___mcc_h320 = _source82.dtor_Primitive_a0;
              DAST._IPrimitive _source83 = _2202___mcc_h320;
              if (_source83.is_Int) {
                DAST._IType _2203_o = _2167_t;
                {
                  RAST._IType _2204_genType;
                  RAST._IType _out159;
                  _out159 = DCOMP.COMP.GenType(_2203_o, false, false);
                  _2204_genType = _out159;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2204_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source83.is_Real) {
                {
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
                }
              } else if (_source83.is_String) {
                DAST._IType _2205_o = _2167_t;
                {
                  RAST._IType _2206_genType;
                  RAST._IType _out160;
                  _out160 = DCOMP.COMP.GenType(_2205_o, false, false);
                  _2206_genType = _out160;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2206_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else if (_source83.is_Bool) {
                DAST._IType _2207_o = _2167_t;
                {
                  RAST._IType _2208_genType;
                  RAST._IType _out161;
                  _out161 = DCOMP.COMP.GenType(_2207_o, false, false);
                  _2208_genType = _out161;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2208_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              } else {
                DAST._IType _2209_o = _2167_t;
                {
                  RAST._IType _2210_genType;
                  RAST._IType _out162;
                  _out162 = DCOMP.COMP.GenType(_2209_o, false, false);
                  _2210_genType = _out162;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2210_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                }
              }
            } else if (_source82.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2211___mcc_h322 = _source82.dtor_Passthrough_a0;
              DAST._IType _2212_o = _2167_t;
              {
                RAST._IType _2213_genType;
                RAST._IType _out163;
                _out163 = DCOMP.COMP.GenType(_2212_o, false, false);
                _2213_genType = _out163;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2213_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2214___mcc_h324 = _source82.dtor_TypeArg_a0;
              DAST._IType _2215_o = _2167_t;
              {
                RAST._IType _2216_genType;
                RAST._IType _out164;
                _out164 = DCOMP.COMP.GenType(_2215_o, false, false);
                _2216_genType = _out164;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2169_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2168_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_2216_genType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              }
            }
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source79.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _2217___mcc_h7 = _source79.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _2218_l = _2217___mcc_h7;
          {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _2218_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()")));
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source79.is_CharLiteral) {
          Dafny.Rune _2219___mcc_h8 = _source79.dtor_CharLiteral_a0;
          Dafny.Rune _2220_c = _2219___mcc_h8;
          {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), Std.Strings.__default.OfNat(new BigInteger((_2220_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _2221___mcc_h9 = _source79.dtor_Null_a0;
          DAST._IType _2222_tpe = _2221___mcc_h9;
          {
            RAST._IType _2223_tpeGen;
            RAST._IType _out165;
            _out165 = DCOMP.COMP.GenType(_2222_tpe, false, false);
            _2223_tpeGen = _out165;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), (_2223_tpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            isOwned = true;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source78.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2224___mcc_h10 = _source78.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _2225_name = _2224___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _2226_s;
          _2226_s = DCOMP.__default.escapeIdent(_2225_name);
          if (!((@params).Contains(_2225_name))) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), _2226_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          }
          if (mustOwn) {
            _2226_s = Dafny.Sequence<Dafny.Rune>.Concat(_2226_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          r = RAST.Expr.create_RawExpr(_2226_s);
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2225_name);
        }
      } else if (_source78.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2227___mcc_h11 = _source78.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2228_path = _2227___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _2229_p;
          Dafny.ISequence<Dafny.Rune> _out166;
          _out166 = DCOMP.COMP.GenPath(_2228_path);
          _2229_p = _out166;
          r = RAST.Expr.create_RawExpr(_2229_p);
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source78.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _2230___mcc_h12 = _source78.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _2231_values = _2230___mcc_h12;
        {
          Dafny.ISequence<Dafny.Rune> _2232_s;
          _2232_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2233_i;
          _2233_i = BigInteger.Zero;
          while ((_2233_i) < (new BigInteger((_2231_values).Count))) {
            if ((_2233_i).Sign == 1) {
              _2232_s = Dafny.Sequence<Dafny.Rune>.Concat(_2232_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _2234_recursiveGen;
            bool _2235___v39;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2236_recIdents;
            RAST._IExpr _out167;
            bool _out168;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out169;
            DCOMP.COMP.GenExpr((_2231_values).Select(_2233_i), selfIdent, @params, true, out _out167, out _out168, out _out169);
            _2234_recursiveGen = _out167;
            _2235___v39 = _out168;
            _2236_recIdents = _out169;
            _2232_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2232_s, (_2234_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2236_recIdents);
            _2233_i = (_2233_i) + (BigInteger.One);
          }
          _2232_s = Dafny.Sequence<Dafny.Rune>.Concat(_2232_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_2232_s);
          isOwned = true;
        }
      } else if (_source78.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2237___mcc_h13 = _source78.dtor_path;
        Dafny.ISequence<DAST._IType> _2238___mcc_h14 = _source78.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2239___mcc_h15 = _source78.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2240_args = _2239___mcc_h15;
        Dafny.ISequence<DAST._IType> _2241_typeArgs = _2238___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2242_path = _2237___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _2243_path;
          Dafny.ISequence<Dafny.Rune> _out170;
          _out170 = DCOMP.COMP.GenPath(_2242_path);
          _2243_path = _out170;
          Dafny.ISequence<Dafny.Rune> _2244_s;
          _2244_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _2243_path);
          if ((new BigInteger((_2241_typeArgs).Count)).Sign == 1) {
            BigInteger _2245_i;
            _2245_i = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _2246_typeExprs;
            _2246_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_2245_i) < (new BigInteger((_2241_typeArgs).Count))) {
              RAST._IType _2247_typeExpr;
              RAST._IType _out171;
              _out171 = DCOMP.COMP.GenType((_2241_typeArgs).Select(_2245_i), false, false);
              _2247_typeExpr = _out171;
              _2246_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_2246_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_2247_typeExpr));
              _2245_i = (_2245_i) + (BigInteger.One);
            }
            _2244_s = Dafny.Sequence<Dafny.Rune>.Concat(_2244_s, (RAST.Type.create_TypeApp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"), _2246_typeExprs))._ToString(DCOMP.__default.IND));
          }
          _2244_s = Dafny.Sequence<Dafny.Rune>.Concat(_2244_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2248_i;
          _2248_i = BigInteger.Zero;
          while ((_2248_i) < (new BigInteger((_2240_args).Count))) {
            if ((_2248_i).Sign == 1) {
              _2244_s = Dafny.Sequence<Dafny.Rune>.Concat(_2244_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _2249_recursiveGen;
            bool _2250___v40;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2251_recIdents;
            RAST._IExpr _out172;
            bool _out173;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out174;
            DCOMP.COMP.GenExpr((_2240_args).Select(_2248_i), selfIdent, @params, true, out _out172, out _out173, out _out174);
            _2249_recursiveGen = _out172;
            _2250___v40 = _out173;
            _2251_recIdents = _out174;
            _2244_s = Dafny.Sequence<Dafny.Rune>.Concat(_2244_s, (_2249_recursiveGen)._ToString(DCOMP.__default.IND));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2251_recIdents);
            _2248_i = (_2248_i) + (BigInteger.One);
          }
          _2244_s = Dafny.Sequence<Dafny.Rune>.Concat(_2244_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          r = RAST.Expr.create_RawExpr(_2244_s);
          isOwned = true;
        }
      } else if (_source78.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _2252___mcc_h16 = _source78.dtor_dims;
        DAST._IType _2253___mcc_h17 = _source78.dtor_typ;
        DAST._IType _2254_typ = _2253___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _2255_dims = _2252___mcc_h16;
        {
          BigInteger _2256_i;
          _2256_i = (new BigInteger((_2255_dims).Count)) - (BigInteger.One);
          RAST._IType _2257_genTyp;
          RAST._IType _out175;
          _out175 = DCOMP.COMP.GenType(_2254_typ, false, false);
          _2257_genTyp = _out175;
          Dafny.ISequence<Dafny.Rune> _2258_s;
          _2258_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_2257_genTyp)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_2256_i).Sign != -1) {
            RAST._IExpr _2259_recursiveGen;
            bool _2260___v41;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2261_recIdents;
            RAST._IExpr _out176;
            bool _out177;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out178;
            DCOMP.COMP.GenExpr((_2255_dims).Select(_2256_i), selfIdent, @params, true, out _out176, out _out177, out _out178);
            _2259_recursiveGen = _out176;
            _2260___v41 = _out177;
            _2261_recIdents = _out178;
            _2258_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _2258_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_2259_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2261_recIdents);
            _2256_i = (_2256_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_2258_s);
          isOwned = true;
        }
      } else if (_source78.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2262___mcc_h18 = _source78.dtor_path;
        Dafny.ISequence<DAST._IType> _2263___mcc_h19 = _source78.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _2264___mcc_h20 = _source78.dtor_variant;
        bool _2265___mcc_h21 = _source78.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2266___mcc_h22 = _source78.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2267_values = _2266___mcc_h22;
        bool _2268_isCo = _2265___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2269_variant = _2264___mcc_h20;
        Dafny.ISequence<DAST._IType> _2270_typeArgs = _2263___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2271_path = _2262___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _2272_path;
          Dafny.ISequence<Dafny.Rune> _out179;
          _out179 = DCOMP.COMP.GenPath(_2271_path);
          _2272_path = _out179;
          Dafny.ISequence<Dafny.Rune> _2273_s;
          _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _2272_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_2270_typeArgs).Count)).Sign == 1) {
            _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _2274_i;
            _2274_i = BigInteger.Zero;
            while ((_2274_i) < (new BigInteger((_2270_typeArgs).Count))) {
              if ((_2274_i).Sign == 1) {
                _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              RAST._IType _2275_typeExpr;
              RAST._IType _out180;
              _out180 = DCOMP.COMP.GenType((_2270_typeArgs).Select(_2274_i), false, false);
              _2275_typeExpr = _out180;
              _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, (_2275_typeExpr)._ToString(DCOMP.__default.IND));
              _2274_i = (_2274_i) + (BigInteger.One);
            }
            _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, DCOMP.__default.escapeIdent(_2269_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2276_i;
          _2276_i = BigInteger.Zero;
          _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_2276_i) < (new BigInteger((_2267_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs44 = (_2267_values).Select(_2276_i);
            Dafny.ISequence<Dafny.Rune> _2277_name = _let_tmp_rhs44.dtor__0;
            DAST._IExpression _2278_value = _let_tmp_rhs44.dtor__1;
            if ((_2276_i).Sign == 1) {
              _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_2268_isCo) {
              RAST._IExpr _2279_recursiveGen;
              bool _2280___v42;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2281_recIdents;
              RAST._IExpr _out181;
              bool _out182;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out183;
              DCOMP.COMP.GenExpr(_2278_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out181, out _out182, out _out183);
              _2279_recursiveGen = _out181;
              _2280___v42 = _out182;
              _2281_recIdents = _out183;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2281_recIdents);
              Dafny.ISequence<Dafny.Rune> _2282_allReadCloned;
              _2282_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_2281_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _2283_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_2281_recIdents).Elements) {
                  _2283_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_2281_recIdents).Contains(_2283_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2185)");
              after__ASSIGN_SUCH_THAT_2:;
                _2282_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2282_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2283_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2283_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _2281_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2281_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2283_next));
              }
              _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, DCOMP.__default.escapeIdent(_2277_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _2282_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_2279_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              RAST._IExpr _2284_recursiveGen;
              bool _2285___v43;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2286_recIdents;
              RAST._IExpr _out184;
              bool _out185;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
              DCOMP.COMP.GenExpr(_2278_value, selfIdent, @params, true, out _out184, out _out185, out _out186);
              _2284_recursiveGen = _out184;
              _2285___v43 = _out185;
              _2286_recIdents = _out186;
              _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, DCOMP.__default.escapeIdent(_2277_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2284_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2286_recIdents);
            }
            _2276_i = (_2276_i) + (BigInteger.One);
          }
          _2273_s = Dafny.Sequence<Dafny.Rune>.Concat(_2273_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          r = RAST.Expr.create_RawExpr(_2273_s);
          isOwned = true;
        }
      } else if (_source78.is_Convert) {
        DAST._IExpression _2287___mcc_h23 = _source78.dtor_value;
        DAST._IType _2288___mcc_h24 = _source78.dtor_from;
        DAST._IType _2289___mcc_h25 = _source78.dtor_typ;
        DAST._IType _2290_toTpe = _2289___mcc_h25;
        DAST._IType _2291_fromTpe = _2288___mcc_h24;
        DAST._IExpression _2292_expr = _2287___mcc_h23;
        {
          if (object.Equals(_2291_fromTpe, _2290_toTpe)) {
            RAST._IExpr _2293_recursiveGen;
            bool _2294_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2295_recIdents;
            RAST._IExpr _out187;
            bool _out188;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out189;
            DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out187, out _out188, out _out189);
            _2293_recursiveGen = _out187;
            _2294_recOwned = _out188;
            _2295_recIdents = _out189;
            r = _2293_recursiveGen;
            isOwned = _2294_recOwned;
            readIdents = _2295_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source84 = _System.Tuple2<DAST._IType, DAST._IType>.create(_2291_fromTpe, _2290_toTpe);
            DAST._IType _2296___mcc_h326 = _source84.dtor__0;
            DAST._IType _2297___mcc_h327 = _source84.dtor__1;
            DAST._IType _source85 = _2296___mcc_h326;
            if (_source85.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2298___mcc_h330 = _source85.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _2299___mcc_h331 = _source85.dtor_typeArgs;
              DAST._IResolvedType _2300___mcc_h332 = _source85.dtor_resolved;
              DAST._IResolvedType _source86 = _2300___mcc_h332;
              if (_source86.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2301___mcc_h342 = _source86.dtor_path;
                DAST._IType _source87 = _2297___mcc_h327;
                if (_source87.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2302___mcc_h346 = _source87.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2303___mcc_h347 = _source87.dtor_typeArgs;
                  DAST._IResolvedType _2304___mcc_h348 = _source87.dtor_resolved;
                  DAST._IResolvedType _source88 = _2304___mcc_h348;
                  if (_source88.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2305___mcc_h352 = _source88.dtor_path;
                    {
                      RAST._IExpr _2306_recursiveGen;
                      bool _2307_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2308_recIdents;
                      RAST._IExpr _out190;
                      bool _out191;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out192;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out190, out _out191, out _out192);
                      _2306_recursiveGen = _out190;
                      _2307_recOwned = _out191;
                      _2308_recIdents = _out192;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2306_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _2307_recOwned;
                      readIdents = _2308_recIdents;
                    }
                  } else if (_source88.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2309___mcc_h354 = _source88.dtor_path;
                    {
                      RAST._IExpr _2310_recursiveGen;
                      bool _2311_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2312_recIdents;
                      RAST._IExpr _out193;
                      bool _out194;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out195;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out193, out _out194, out _out195);
                      _2310_recursiveGen = _out193;
                      _2311_recOwned = _out194;
                      _2312_recIdents = _out195;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2310_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _2311_recOwned;
                      readIdents = _2312_recIdents;
                    }
                  } else {
                    DAST._IType _2313___mcc_h356 = _source88.dtor_baseType;
                    DAST._INewtypeRange _2314___mcc_h357 = _source88.dtor_range;
                    bool _2315___mcc_h358 = _source88.dtor_erase;
                    bool _2316_erase = _2315___mcc_h358;
                    DAST._INewtypeRange _2317_range = _2314___mcc_h357;
                    DAST._IType _2318_b = _2313___mcc_h356;
                    {
                      if (object.Equals(_2291_fromTpe, _2318_b)) {
                        RAST._IExpr _2319_recursiveGen;
                        bool _2320_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2321_recIdents;
                        RAST._IExpr _out196;
                        bool _out197;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out198;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out196, out _out197, out _out198);
                        _2319_recursiveGen = _out196;
                        _2320_recOwned = _out197;
                        _2321_recIdents = _out198;
                        Std.Wrappers._IOption<RAST._IType> _2322_potentialRhsType;
                        _2322_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2318_b, _2317_range);
                        Std.Wrappers._IOption<RAST._IType> _source89 = _2322_potentialRhsType;
                        if (_source89.is_None) {
                          if (_2316_erase) {
                            r = _2319_recursiveGen;
                          } else {
                            RAST._IType _2323_rhsType;
                            RAST._IType _out199;
                            _out199 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                            _2323_rhsType = _out199;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2323_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2319_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _2320_recOwned;
                        } else {
                          RAST._IType _2324___mcc_h1254 = _source89.dtor_value;
                          RAST._IType _2325_v = _2324___mcc_h1254;
                          r = RAST.Expr.create_ConversionNum(_2325_v, _2319_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _2321_recIdents;
                      } else {
                        RAST._IExpr _out200;
                        bool _out201;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out202;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2318_b), _2318_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out200, out _out201, out _out202);
                        r = _out200;
                        isOwned = _out201;
                        readIdents = _out202;
                      }
                    }
                  }
                } else if (_source87.is_Nullable) {
                  DAST._IType _2326___mcc_h362 = _source87.dtor_Nullable_a0;
                  {
                    RAST._IExpr _2327_recursiveGen;
                    bool _2328_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2329_recIdents;
                    RAST._IExpr _out203;
                    bool _out204;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out205;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out203, out _out204, out _out205);
                    _2327_recursiveGen = _out203;
                    _2328_recOwned = _out204;
                    _2329_recIdents = _out205;
                    Dafny.ISequence<Dafny.Rune> _2330_s;
                    _2330_s = (_2327_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2328_recOwned)) {
                      _2330_s = Dafny.Sequence<Dafny.Rune>.Concat(_2330_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _2330_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2330_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_2330_s);
                    isOwned = true;
                    readIdents = _2329_recIdents;
                  }
                } else if (_source87.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2331___mcc_h364 = _source87.dtor_Tuple_a0;
                  {
                    RAST._IExpr _2332_recursiveGen;
                    bool _2333_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2334_recIdents;
                    RAST._IExpr _out206;
                    bool _out207;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out208;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out206, out _out207, out _out208);
                    _2332_recursiveGen = _out206;
                    _2333_recOwned = _out207;
                    _2334_recIdents = _out208;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2332_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2333_recOwned;
                    readIdents = _2334_recIdents;
                  }
                } else if (_source87.is_Array) {
                  DAST._IType _2335___mcc_h366 = _source87.dtor_element;
                  BigInteger _2336___mcc_h367 = _source87.dtor_dims;
                  {
                    RAST._IExpr _2337_recursiveGen;
                    bool _2338_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2339_recIdents;
                    RAST._IExpr _out209;
                    bool _out210;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out211;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out209, out _out210, out _out211);
                    _2337_recursiveGen = _out209;
                    _2338_recOwned = _out210;
                    _2339_recIdents = _out211;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2337_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2338_recOwned;
                    readIdents = _2339_recIdents;
                  }
                } else if (_source87.is_Seq) {
                  DAST._IType _2340___mcc_h370 = _source87.dtor_element;
                  {
                    RAST._IExpr _2341_recursiveGen;
                    bool _2342_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2343_recIdents;
                    RAST._IExpr _out212;
                    bool _out213;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out212, out _out213, out _out214);
                    _2341_recursiveGen = _out212;
                    _2342_recOwned = _out213;
                    _2343_recIdents = _out214;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2341_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2342_recOwned;
                    readIdents = _2343_recIdents;
                  }
                } else if (_source87.is_Set) {
                  DAST._IType _2344___mcc_h372 = _source87.dtor_element;
                  {
                    RAST._IExpr _2345_recursiveGen;
                    bool _2346_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2347_recIdents;
                    RAST._IExpr _out215;
                    bool _out216;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out215, out _out216, out _out217);
                    _2345_recursiveGen = _out215;
                    _2346_recOwned = _out216;
                    _2347_recIdents = _out217;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2345_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2346_recOwned;
                    readIdents = _2347_recIdents;
                  }
                } else if (_source87.is_Multiset) {
                  DAST._IType _2348___mcc_h374 = _source87.dtor_element;
                  {
                    RAST._IExpr _2349_recursiveGen;
                    bool _2350_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2351_recIdents;
                    RAST._IExpr _out218;
                    bool _out219;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out220;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out218, out _out219, out _out220);
                    _2349_recursiveGen = _out218;
                    _2350_recOwned = _out219;
                    _2351_recIdents = _out220;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2349_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2350_recOwned;
                    readIdents = _2351_recIdents;
                  }
                } else if (_source87.is_Map) {
                  DAST._IType _2352___mcc_h376 = _source87.dtor_key;
                  DAST._IType _2353___mcc_h377 = _source87.dtor_value;
                  {
                    RAST._IExpr _2354_recursiveGen;
                    bool _2355_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2356_recIdents;
                    RAST._IExpr _out221;
                    bool _out222;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out223;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out221, out _out222, out _out223);
                    _2354_recursiveGen = _out221;
                    _2355_recOwned = _out222;
                    _2356_recIdents = _out223;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2354_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2355_recOwned;
                    readIdents = _2356_recIdents;
                  }
                } else if (_source87.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2357___mcc_h380 = _source87.dtor_args;
                  DAST._IType _2358___mcc_h381 = _source87.dtor_result;
                  {
                    RAST._IExpr _2359_recursiveGen;
                    bool _2360_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2361_recIdents;
                    RAST._IExpr _out224;
                    bool _out225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out224, out _out225, out _out226);
                    _2359_recursiveGen = _out224;
                    _2360_recOwned = _out225;
                    _2361_recIdents = _out226;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2359_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2360_recOwned;
                    readIdents = _2361_recIdents;
                  }
                } else if (_source87.is_Primitive) {
                  DAST._IPrimitive _2362___mcc_h384 = _source87.dtor_Primitive_a0;
                  {
                    RAST._IExpr _2363_recursiveGen;
                    bool _2364_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2365_recIdents;
                    RAST._IExpr _out227;
                    bool _out228;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out229;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229);
                    _2363_recursiveGen = _out227;
                    _2364_recOwned = _out228;
                    _2365_recIdents = _out229;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2363_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2364_recOwned;
                    readIdents = _2365_recIdents;
                  }
                } else if (_source87.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2366___mcc_h386 = _source87.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _2367_recursiveGen;
                    bool _2368_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2369_recIdents;
                    RAST._IExpr _out230;
                    bool _out231;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out232;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out230, out _out231, out _out232);
                    _2367_recursiveGen = _out230;
                    _2368_recOwned = _out231;
                    _2369_recIdents = _out232;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2367_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2368_recOwned;
                    readIdents = _2369_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2370___mcc_h388 = _source87.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _2371_recursiveGen;
                    bool _2372_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2373_recIdents;
                    RAST._IExpr _out233;
                    bool _out234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out233, out _out234, out _out235);
                    _2371_recursiveGen = _out233;
                    _2372_recOwned = _out234;
                    _2373_recIdents = _out235;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2371_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2372_recOwned;
                    readIdents = _2373_recIdents;
                  }
                }
              } else if (_source86.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2374___mcc_h390 = _source86.dtor_path;
                DAST._IType _source90 = _2297___mcc_h327;
                if (_source90.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2375___mcc_h394 = _source90.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2376___mcc_h395 = _source90.dtor_typeArgs;
                  DAST._IResolvedType _2377___mcc_h396 = _source90.dtor_resolved;
                  DAST._IResolvedType _source91 = _2377___mcc_h396;
                  if (_source91.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2378___mcc_h400 = _source91.dtor_path;
                    {
                      RAST._IExpr _2379_recursiveGen;
                      bool _2380_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2381_recIdents;
                      RAST._IExpr _out236;
                      bool _out237;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out236, out _out237, out _out238);
                      _2379_recursiveGen = _out236;
                      _2380_recOwned = _out237;
                      _2381_recIdents = _out238;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2379_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _2380_recOwned;
                      readIdents = _2381_recIdents;
                    }
                  } else if (_source91.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2382___mcc_h402 = _source91.dtor_path;
                    {
                      RAST._IExpr _2383_recursiveGen;
                      bool _2384_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2385_recIdents;
                      RAST._IExpr _out239;
                      bool _out240;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out241;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out239, out _out240, out _out241);
                      _2383_recursiveGen = _out239;
                      _2384_recOwned = _out240;
                      _2385_recIdents = _out241;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2383_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _2384_recOwned;
                      readIdents = _2385_recIdents;
                    }
                  } else {
                    DAST._IType _2386___mcc_h404 = _source91.dtor_baseType;
                    DAST._INewtypeRange _2387___mcc_h405 = _source91.dtor_range;
                    bool _2388___mcc_h406 = _source91.dtor_erase;
                    bool _2389_erase = _2388___mcc_h406;
                    DAST._INewtypeRange _2390_range = _2387___mcc_h405;
                    DAST._IType _2391_b = _2386___mcc_h404;
                    {
                      if (object.Equals(_2291_fromTpe, _2391_b)) {
                        RAST._IExpr _2392_recursiveGen;
                        bool _2393_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2394_recIdents;
                        RAST._IExpr _out242;
                        bool _out243;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out244;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out242, out _out243, out _out244);
                        _2392_recursiveGen = _out242;
                        _2393_recOwned = _out243;
                        _2394_recIdents = _out244;
                        Std.Wrappers._IOption<RAST._IType> _2395_potentialRhsType;
                        _2395_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2391_b, _2390_range);
                        Std.Wrappers._IOption<RAST._IType> _source92 = _2395_potentialRhsType;
                        if (_source92.is_None) {
                          if (_2389_erase) {
                            r = _2392_recursiveGen;
                          } else {
                            RAST._IType _2396_rhsType;
                            RAST._IType _out245;
                            _out245 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                            _2396_rhsType = _out245;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2396_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2392_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _2393_recOwned;
                        } else {
                          RAST._IType _2397___mcc_h1255 = _source92.dtor_value;
                          RAST._IType _2398_v = _2397___mcc_h1255;
                          r = RAST.Expr.create_ConversionNum(_2398_v, _2392_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _2394_recIdents;
                      } else {
                        RAST._IExpr _out246;
                        bool _out247;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out248;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2391_b), _2391_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out246, out _out247, out _out248);
                        r = _out246;
                        isOwned = _out247;
                        readIdents = _out248;
                      }
                    }
                  }
                } else if (_source90.is_Nullable) {
                  DAST._IType _2399___mcc_h410 = _source90.dtor_Nullable_a0;
                  {
                    RAST._IExpr _2400_recursiveGen;
                    bool _2401_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2402_recIdents;
                    RAST._IExpr _out249;
                    bool _out250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out249, out _out250, out _out251);
                    _2400_recursiveGen = _out249;
                    _2401_recOwned = _out250;
                    _2402_recIdents = _out251;
                    Dafny.ISequence<Dafny.Rune> _2403_s;
                    _2403_s = (_2400_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2401_recOwned)) {
                      _2403_s = Dafny.Sequence<Dafny.Rune>.Concat(_2403_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _2403_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2403_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_2403_s);
                    isOwned = true;
                    readIdents = _2402_recIdents;
                  }
                } else if (_source90.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2404___mcc_h412 = _source90.dtor_Tuple_a0;
                  {
                    RAST._IExpr _2405_recursiveGen;
                    bool _2406_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2407_recIdents;
                    RAST._IExpr _out252;
                    bool _out253;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out252, out _out253, out _out254);
                    _2405_recursiveGen = _out252;
                    _2406_recOwned = _out253;
                    _2407_recIdents = _out254;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2405_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2406_recOwned;
                    readIdents = _2407_recIdents;
                  }
                } else if (_source90.is_Array) {
                  DAST._IType _2408___mcc_h414 = _source90.dtor_element;
                  BigInteger _2409___mcc_h415 = _source90.dtor_dims;
                  {
                    RAST._IExpr _2410_recursiveGen;
                    bool _2411_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2412_recIdents;
                    RAST._IExpr _out255;
                    bool _out256;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out257;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out255, out _out256, out _out257);
                    _2410_recursiveGen = _out255;
                    _2411_recOwned = _out256;
                    _2412_recIdents = _out257;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2410_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2411_recOwned;
                    readIdents = _2412_recIdents;
                  }
                } else if (_source90.is_Seq) {
                  DAST._IType _2413___mcc_h418 = _source90.dtor_element;
                  {
                    RAST._IExpr _2414_recursiveGen;
                    bool _2415_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2416_recIdents;
                    RAST._IExpr _out258;
                    bool _out259;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out258, out _out259, out _out260);
                    _2414_recursiveGen = _out258;
                    _2415_recOwned = _out259;
                    _2416_recIdents = _out260;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2414_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2415_recOwned;
                    readIdents = _2416_recIdents;
                  }
                } else if (_source90.is_Set) {
                  DAST._IType _2417___mcc_h420 = _source90.dtor_element;
                  {
                    RAST._IExpr _2418_recursiveGen;
                    bool _2419_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2420_recIdents;
                    RAST._IExpr _out261;
                    bool _out262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out261, out _out262, out _out263);
                    _2418_recursiveGen = _out261;
                    _2419_recOwned = _out262;
                    _2420_recIdents = _out263;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2418_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2419_recOwned;
                    readIdents = _2420_recIdents;
                  }
                } else if (_source90.is_Multiset) {
                  DAST._IType _2421___mcc_h422 = _source90.dtor_element;
                  {
                    RAST._IExpr _2422_recursiveGen;
                    bool _2423_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2424_recIdents;
                    RAST._IExpr _out264;
                    bool _out265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out266;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266);
                    _2422_recursiveGen = _out264;
                    _2423_recOwned = _out265;
                    _2424_recIdents = _out266;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2422_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2423_recOwned;
                    readIdents = _2424_recIdents;
                  }
                } else if (_source90.is_Map) {
                  DAST._IType _2425___mcc_h424 = _source90.dtor_key;
                  DAST._IType _2426___mcc_h425 = _source90.dtor_value;
                  {
                    RAST._IExpr _2427_recursiveGen;
                    bool _2428_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2429_recIdents;
                    RAST._IExpr _out267;
                    bool _out268;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out269;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out267, out _out268, out _out269);
                    _2427_recursiveGen = _out267;
                    _2428_recOwned = _out268;
                    _2429_recIdents = _out269;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2427_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2428_recOwned;
                    readIdents = _2429_recIdents;
                  }
                } else if (_source90.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2430___mcc_h428 = _source90.dtor_args;
                  DAST._IType _2431___mcc_h429 = _source90.dtor_result;
                  {
                    RAST._IExpr _2432_recursiveGen;
                    bool _2433_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2434_recIdents;
                    RAST._IExpr _out270;
                    bool _out271;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out272;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out270, out _out271, out _out272);
                    _2432_recursiveGen = _out270;
                    _2433_recOwned = _out271;
                    _2434_recIdents = _out272;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2432_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2433_recOwned;
                    readIdents = _2434_recIdents;
                  }
                } else if (_source90.is_Primitive) {
                  DAST._IPrimitive _2435___mcc_h432 = _source90.dtor_Primitive_a0;
                  {
                    RAST._IExpr _2436_recursiveGen;
                    bool _2437_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2438_recIdents;
                    RAST._IExpr _out273;
                    bool _out274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out273, out _out274, out _out275);
                    _2436_recursiveGen = _out273;
                    _2437_recOwned = _out274;
                    _2438_recIdents = _out275;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2436_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2437_recOwned;
                    readIdents = _2438_recIdents;
                  }
                } else if (_source90.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2439___mcc_h434 = _source90.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _2440_recursiveGen;
                    bool _2441_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2442_recIdents;
                    RAST._IExpr _out276;
                    bool _out277;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out276, out _out277, out _out278);
                    _2440_recursiveGen = _out276;
                    _2441_recOwned = _out277;
                    _2442_recIdents = _out278;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2440_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2441_recOwned;
                    readIdents = _2442_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2443___mcc_h436 = _source90.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _2444_recursiveGen;
                    bool _2445_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2446_recIdents;
                    RAST._IExpr _out279;
                    bool _out280;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out281;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out279, out _out280, out _out281);
                    _2444_recursiveGen = _out279;
                    _2445_recOwned = _out280;
                    _2446_recIdents = _out281;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2444_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2445_recOwned;
                    readIdents = _2446_recIdents;
                  }
                }
              } else {
                DAST._IType _2447___mcc_h438 = _source86.dtor_baseType;
                DAST._INewtypeRange _2448___mcc_h439 = _source86.dtor_range;
                bool _2449___mcc_h440 = _source86.dtor_erase;
                DAST._IType _source93 = _2297___mcc_h327;
                if (_source93.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2450___mcc_h450 = _source93.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2451___mcc_h451 = _source93.dtor_typeArgs;
                  DAST._IResolvedType _2452___mcc_h452 = _source93.dtor_resolved;
                  DAST._IResolvedType _source94 = _2452___mcc_h452;
                  if (_source94.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2453___mcc_h459 = _source94.dtor_path;
                    bool _2454_erase = _2449___mcc_h440;
                    DAST._INewtypeRange _2455_range = _2448___mcc_h439;
                    DAST._IType _2456_b = _2447___mcc_h438;
                    {
                      if (object.Equals(_2456_b, _2290_toTpe)) {
                        RAST._IExpr _2457_recursiveGen;
                        bool _2458_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2459_recIdents;
                        RAST._IExpr _out282;
                        bool _out283;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out284;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out282, out _out283, out _out284);
                        _2457_recursiveGen = _out282;
                        _2458_recOwned = _out283;
                        _2459_recIdents = _out284;
                        if (_2454_erase) {
                          r = _2457_recursiveGen;
                        } else {
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2457_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                        }
                        isOwned = _2458_recOwned;
                        readIdents = _2459_recIdents;
                      } else {
                        RAST._IExpr _out285;
                        bool _out286;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2456_b), _2456_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out285, out _out286, out _out287);
                        r = _out285;
                        isOwned = _out286;
                        readIdents = _out287;
                      }
                    }
                  } else if (_source94.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2460___mcc_h462 = _source94.dtor_path;
                    bool _2461_erase = _2449___mcc_h440;
                    DAST._INewtypeRange _2462_range = _2448___mcc_h439;
                    DAST._IType _2463_b = _2447___mcc_h438;
                    {
                      if (object.Equals(_2463_b, _2290_toTpe)) {
                        RAST._IExpr _2464_recursiveGen;
                        bool _2465_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2466_recIdents;
                        RAST._IExpr _out288;
                        bool _out289;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290);
                        _2464_recursiveGen = _out288;
                        _2465_recOwned = _out289;
                        _2466_recIdents = _out290;
                        if (_2461_erase) {
                          r = _2464_recursiveGen;
                        } else {
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2464_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                        }
                        isOwned = _2465_recOwned;
                        readIdents = _2466_recIdents;
                      } else {
                        RAST._IExpr _out291;
                        bool _out292;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out293;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2463_b), _2463_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out291, out _out292, out _out293);
                        r = _out291;
                        isOwned = _out292;
                        readIdents = _out293;
                      }
                    }
                  } else {
                    DAST._IType _2467___mcc_h465 = _source94.dtor_baseType;
                    DAST._INewtypeRange _2468___mcc_h466 = _source94.dtor_range;
                    bool _2469___mcc_h467 = _source94.dtor_erase;
                    bool _2470_erase = _2469___mcc_h467;
                    DAST._INewtypeRange _2471_range = _2468___mcc_h466;
                    DAST._IType _2472_b = _2467___mcc_h465;
                    {
                      if (object.Equals(_2291_fromTpe, _2472_b)) {
                        RAST._IExpr _2473_recursiveGen;
                        bool _2474_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2475_recIdents;
                        RAST._IExpr _out294;
                        bool _out295;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out296;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out294, out _out295, out _out296);
                        _2473_recursiveGen = _out294;
                        _2474_recOwned = _out295;
                        _2475_recIdents = _out296;
                        Std.Wrappers._IOption<RAST._IType> _2476_potentialRhsType;
                        _2476_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2472_b, _2471_range);
                        Std.Wrappers._IOption<RAST._IType> _source95 = _2476_potentialRhsType;
                        if (_source95.is_None) {
                          if (_2470_erase) {
                            r = _2473_recursiveGen;
                          } else {
                            RAST._IType _2477_rhsType;
                            RAST._IType _out297;
                            _out297 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                            _2477_rhsType = _out297;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2477_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2473_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _2474_recOwned;
                        } else {
                          RAST._IType _2478___mcc_h1256 = _source95.dtor_value;
                          RAST._IType _2479_v = _2478___mcc_h1256;
                          r = RAST.Expr.create_ConversionNum(_2479_v, _2473_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _2475_recIdents;
                      } else {
                        RAST._IExpr _out298;
                        bool _out299;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2472_b), _2472_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out298, out _out299, out _out300);
                        r = _out298;
                        isOwned = _out299;
                        readIdents = _out300;
                      }
                    }
                  }
                } else if (_source93.is_Nullable) {
                  DAST._IType _2480___mcc_h474 = _source93.dtor_Nullable_a0;
                  {
                    RAST._IExpr _2481_recursiveGen;
                    bool _2482_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2483_recIdents;
                    RAST._IExpr _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out301, out _out302, out _out303);
                    _2481_recursiveGen = _out301;
                    _2482_recOwned = _out302;
                    _2483_recIdents = _out303;
                    Dafny.ISequence<Dafny.Rune> _2484_s;
                    _2484_s = (_2481_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2482_recOwned)) {
                      _2484_s = Dafny.Sequence<Dafny.Rune>.Concat(_2484_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _2484_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2484_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_2484_s);
                    isOwned = true;
                    readIdents = _2483_recIdents;
                  }
                } else if (_source93.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2485___mcc_h477 = _source93.dtor_Tuple_a0;
                  bool _2486_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2487_range = _2448___mcc_h439;
                  DAST._IType _2488_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2488_b, _2290_toTpe)) {
                      RAST._IExpr _2489_recursiveGen;
                      bool _2490_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2491_recIdents;
                      RAST._IExpr _out304;
                      bool _out305;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out306;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306);
                      _2489_recursiveGen = _out304;
                      _2490_recOwned = _out305;
                      _2491_recIdents = _out306;
                      if (_2486_erase) {
                        r = _2489_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2489_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2490_recOwned;
                      readIdents = _2491_recIdents;
                    } else {
                      RAST._IExpr _out307;
                      bool _out308;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out309;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2488_b), _2488_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out307, out _out308, out _out309);
                      r = _out307;
                      isOwned = _out308;
                      readIdents = _out309;
                    }
                  }
                } else if (_source93.is_Array) {
                  DAST._IType _2492___mcc_h480 = _source93.dtor_element;
                  BigInteger _2493___mcc_h481 = _source93.dtor_dims;
                  bool _2494_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2495_range = _2448___mcc_h439;
                  DAST._IType _2496_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2496_b, _2290_toTpe)) {
                      RAST._IExpr _2497_recursiveGen;
                      bool _2498_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2499_recIdents;
                      RAST._IExpr _out310;
                      bool _out311;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out310, out _out311, out _out312);
                      _2497_recursiveGen = _out310;
                      _2498_recOwned = _out311;
                      _2499_recIdents = _out312;
                      if (_2494_erase) {
                        r = _2497_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2497_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2498_recOwned;
                      readIdents = _2499_recIdents;
                    } else {
                      RAST._IExpr _out313;
                      bool _out314;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2496_b), _2496_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out313, out _out314, out _out315);
                      r = _out313;
                      isOwned = _out314;
                      readIdents = _out315;
                    }
                  }
                } else if (_source93.is_Seq) {
                  DAST._IType _2500___mcc_h486 = _source93.dtor_element;
                  bool _2501_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2502_range = _2448___mcc_h439;
                  DAST._IType _2503_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2503_b, _2290_toTpe)) {
                      RAST._IExpr _2504_recursiveGen;
                      bool _2505_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2506_recIdents;
                      RAST._IExpr _out316;
                      bool _out317;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out318;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out316, out _out317, out _out318);
                      _2504_recursiveGen = _out316;
                      _2505_recOwned = _out317;
                      _2506_recIdents = _out318;
                      if (_2501_erase) {
                        r = _2504_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2504_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2505_recOwned;
                      readIdents = _2506_recIdents;
                    } else {
                      RAST._IExpr _out319;
                      bool _out320;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out321;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2503_b), _2503_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out319, out _out320, out _out321);
                      r = _out319;
                      isOwned = _out320;
                      readIdents = _out321;
                    }
                  }
                } else if (_source93.is_Set) {
                  DAST._IType _2507___mcc_h489 = _source93.dtor_element;
                  bool _2508_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2509_range = _2448___mcc_h439;
                  DAST._IType _2510_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2510_b, _2290_toTpe)) {
                      RAST._IExpr _2511_recursiveGen;
                      bool _2512_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2513_recIdents;
                      RAST._IExpr _out322;
                      bool _out323;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out322, out _out323, out _out324);
                      _2511_recursiveGen = _out322;
                      _2512_recOwned = _out323;
                      _2513_recIdents = _out324;
                      if (_2508_erase) {
                        r = _2511_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2511_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2512_recOwned;
                      readIdents = _2513_recIdents;
                    } else {
                      RAST._IExpr _out325;
                      bool _out326;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out327;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2510_b), _2510_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out325, out _out326, out _out327);
                      r = _out325;
                      isOwned = _out326;
                      readIdents = _out327;
                    }
                  }
                } else if (_source93.is_Multiset) {
                  DAST._IType _2514___mcc_h492 = _source93.dtor_element;
                  bool _2515_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2516_range = _2448___mcc_h439;
                  DAST._IType _2517_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2517_b, _2290_toTpe)) {
                      RAST._IExpr _2518_recursiveGen;
                      bool _2519_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2520_recIdents;
                      RAST._IExpr _out328;
                      bool _out329;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out330;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out328, out _out329, out _out330);
                      _2518_recursiveGen = _out328;
                      _2519_recOwned = _out329;
                      _2520_recIdents = _out330;
                      if (_2515_erase) {
                        r = _2518_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2518_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2519_recOwned;
                      readIdents = _2520_recIdents;
                    } else {
                      RAST._IExpr _out331;
                      bool _out332;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out333;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2517_b), _2517_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out331, out _out332, out _out333);
                      r = _out331;
                      isOwned = _out332;
                      readIdents = _out333;
                    }
                  }
                } else if (_source93.is_Map) {
                  DAST._IType _2521___mcc_h495 = _source93.dtor_key;
                  DAST._IType _2522___mcc_h496 = _source93.dtor_value;
                  bool _2523_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2524_range = _2448___mcc_h439;
                  DAST._IType _2525_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2525_b, _2290_toTpe)) {
                      RAST._IExpr _2526_recursiveGen;
                      bool _2527_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2528_recIdents;
                      RAST._IExpr _out334;
                      bool _out335;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out334, out _out335, out _out336);
                      _2526_recursiveGen = _out334;
                      _2527_recOwned = _out335;
                      _2528_recIdents = _out336;
                      if (_2523_erase) {
                        r = _2526_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2526_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2527_recOwned;
                      readIdents = _2528_recIdents;
                    } else {
                      RAST._IExpr _out337;
                      bool _out338;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2525_b), _2525_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out337, out _out338, out _out339);
                      r = _out337;
                      isOwned = _out338;
                      readIdents = _out339;
                    }
                  }
                } else if (_source93.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2529___mcc_h501 = _source93.dtor_args;
                  DAST._IType _2530___mcc_h502 = _source93.dtor_result;
                  bool _2531_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2532_range = _2448___mcc_h439;
                  DAST._IType _2533_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2533_b, _2290_toTpe)) {
                      RAST._IExpr _2534_recursiveGen;
                      bool _2535_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2536_recIdents;
                      RAST._IExpr _out340;
                      bool _out341;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out342;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out340, out _out341, out _out342);
                      _2534_recursiveGen = _out340;
                      _2535_recOwned = _out341;
                      _2536_recIdents = _out342;
                      if (_2531_erase) {
                        r = _2534_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2534_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2535_recOwned;
                      readIdents = _2536_recIdents;
                    } else {
                      RAST._IExpr _out343;
                      bool _out344;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out345;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2533_b), _2533_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out343, out _out344, out _out345);
                      r = _out343;
                      isOwned = _out344;
                      readIdents = _out345;
                    }
                  }
                } else if (_source93.is_Primitive) {
                  DAST._IPrimitive _2537___mcc_h507 = _source93.dtor_Primitive_a0;
                  bool _2538_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2539_range = _2448___mcc_h439;
                  DAST._IType _2540_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2540_b, _2290_toTpe)) {
                      RAST._IExpr _2541_recursiveGen;
                      bool _2542_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2543_recIdents;
                      RAST._IExpr _out346;
                      bool _out347;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out348;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out346, out _out347, out _out348);
                      _2541_recursiveGen = _out346;
                      _2542_recOwned = _out347;
                      _2543_recIdents = _out348;
                      if (_2538_erase) {
                        r = _2541_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2541_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2542_recOwned;
                      readIdents = _2543_recIdents;
                    } else {
                      RAST._IExpr _out349;
                      bool _out350;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2540_b), _2540_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351);
                      r = _out349;
                      isOwned = _out350;
                      readIdents = _out351;
                    }
                  }
                } else if (_source93.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2544___mcc_h510 = _source93.dtor_Passthrough_a0;
                  bool _2545_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2546_range = _2448___mcc_h439;
                  DAST._IType _2547_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2547_b, _2290_toTpe)) {
                      RAST._IExpr _2548_recursiveGen;
                      bool _2549_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2550_recIdents;
                      RAST._IExpr _out352;
                      bool _out353;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out354;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out352, out _out353, out _out354);
                      _2548_recursiveGen = _out352;
                      _2549_recOwned = _out353;
                      _2550_recIdents = _out354;
                      if (_2545_erase) {
                        r = _2548_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2548_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2549_recOwned;
                      readIdents = _2550_recIdents;
                    } else {
                      RAST._IExpr _out355;
                      bool _out356;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out357;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2547_b), _2547_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out355, out _out356, out _out357);
                      r = _out355;
                      isOwned = _out356;
                      readIdents = _out357;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2551___mcc_h513 = _source93.dtor_TypeArg_a0;
                  bool _2552_erase = _2449___mcc_h440;
                  DAST._INewtypeRange _2553_range = _2448___mcc_h439;
                  DAST._IType _2554_b = _2447___mcc_h438;
                  {
                    if (object.Equals(_2554_b, _2290_toTpe)) {
                      RAST._IExpr _2555_recursiveGen;
                      bool _2556_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2557_recIdents;
                      RAST._IExpr _out358;
                      bool _out359;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out358, out _out359, out _out360);
                      _2555_recursiveGen = _out358;
                      _2556_recOwned = _out359;
                      _2557_recIdents = _out360;
                      if (_2552_erase) {
                        r = _2555_recursiveGen;
                      } else {
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_2555_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                      }
                      isOwned = _2556_recOwned;
                      readIdents = _2557_recIdents;
                    } else {
                      RAST._IExpr _out361;
                      bool _out362;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out363;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2554_b), _2554_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out361, out _out362, out _out363);
                      r = _out361;
                      isOwned = _out362;
                      readIdents = _out363;
                    }
                  }
                }
              }
            } else if (_source85.is_Nullable) {
              DAST._IType _2558___mcc_h516 = _source85.dtor_Nullable_a0;
              DAST._IType _source96 = _2297___mcc_h327;
              if (_source96.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2559___mcc_h520 = _source96.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2560___mcc_h521 = _source96.dtor_typeArgs;
                DAST._IResolvedType _2561___mcc_h522 = _source96.dtor_resolved;
                DAST._IResolvedType _source97 = _2561___mcc_h522;
                if (_source97.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2562___mcc_h529 = _source97.dtor_path;
                  {
                    RAST._IExpr _2563_recursiveGen;
                    bool _2564_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2565_recIdents;
                    RAST._IExpr _out364;
                    bool _out365;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out366;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out364, out _out365, out _out366);
                    _2563_recursiveGen = _out364;
                    _2564_recOwned = _out365;
                    _2565_recIdents = _out366;
                    Dafny.ISequence<Dafny.Rune> _2566_s;
                    _2566_s = (_2563_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2564_recOwned)) {
                      _2566_s = Dafny.Sequence<Dafny.Rune>.Concat(_2566_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    _2566_s = Dafny.Sequence<Dafny.Rune>.Concat(_2566_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    r = RAST.Expr.create_RawExpr(_2566_s);
                    isOwned = _2564_recOwned;
                    readIdents = _2565_recIdents;
                  }
                } else if (_source97.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2567___mcc_h532 = _source97.dtor_path;
                  {
                    RAST._IExpr _2568_recursiveGen;
                    bool _2569_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2570_recIdents;
                    RAST._IExpr _out367;
                    bool _out368;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out369;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out367, out _out368, out _out369);
                    _2568_recursiveGen = _out367;
                    _2569_recOwned = _out368;
                    _2570_recIdents = _out369;
                    Dafny.ISequence<Dafny.Rune> _2571_s;
                    _2571_s = (_2568_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2569_recOwned)) {
                      _2571_s = Dafny.Sequence<Dafny.Rune>.Concat(_2571_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    _2571_s = Dafny.Sequence<Dafny.Rune>.Concat(_2571_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    r = RAST.Expr.create_RawExpr(_2571_s);
                    isOwned = _2569_recOwned;
                    readIdents = _2570_recIdents;
                  }
                } else {
                  DAST._IType _2572___mcc_h535 = _source97.dtor_baseType;
                  DAST._INewtypeRange _2573___mcc_h536 = _source97.dtor_range;
                  bool _2574___mcc_h537 = _source97.dtor_erase;
                  {
                    RAST._IExpr _2575_recursiveGen;
                    bool _2576_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2577_recIdents;
                    RAST._IExpr _out370;
                    bool _out371;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out370, out _out371, out _out372);
                    _2575_recursiveGen = _out370;
                    _2576_recOwned = _out371;
                    _2577_recIdents = _out372;
                    Dafny.ISequence<Dafny.Rune> _2578_s;
                    _2578_s = (_2575_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_2576_recOwned)) {
                      _2578_s = Dafny.Sequence<Dafny.Rune>.Concat(_2578_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    _2578_s = Dafny.Sequence<Dafny.Rune>.Concat(_2578_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    r = RAST.Expr.create_RawExpr(_2578_s);
                    isOwned = _2576_recOwned;
                    readIdents = _2577_recIdents;
                  }
                }
              } else if (_source96.is_Nullable) {
                DAST._IType _2579___mcc_h544 = _source96.dtor_Nullable_a0;
                {
                  RAST._IExpr _2580_recursiveGen;
                  bool _2581_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2582_recIdents;
                  RAST._IExpr _out373;
                  bool _out374;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out375;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375);
                  _2580_recursiveGen = _out373;
                  _2581_recOwned = _out374;
                  _2582_recIdents = _out375;
                  Dafny.ISequence<Dafny.Rune> _2583_s;
                  _2583_s = (_2580_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2581_recOwned)) {
                    _2583_s = Dafny.Sequence<Dafny.Rune>.Concat(_2583_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2583_s = Dafny.Sequence<Dafny.Rune>.Concat(_2583_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2583_s);
                  isOwned = _2581_recOwned;
                  readIdents = _2582_recIdents;
                }
              } else if (_source96.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2584___mcc_h547 = _source96.dtor_Tuple_a0;
                {
                  RAST._IExpr _2585_recursiveGen;
                  bool _2586_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2587_recIdents;
                  RAST._IExpr _out376;
                  bool _out377;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out378;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out376, out _out377, out _out378);
                  _2585_recursiveGen = _out376;
                  _2586_recOwned = _out377;
                  _2587_recIdents = _out378;
                  Dafny.ISequence<Dafny.Rune> _2588_s;
                  _2588_s = (_2585_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2586_recOwned)) {
                    _2588_s = Dafny.Sequence<Dafny.Rune>.Concat(_2588_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2588_s = Dafny.Sequence<Dafny.Rune>.Concat(_2588_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2588_s);
                  isOwned = _2586_recOwned;
                  readIdents = _2587_recIdents;
                }
              } else if (_source96.is_Array) {
                DAST._IType _2589___mcc_h550 = _source96.dtor_element;
                BigInteger _2590___mcc_h551 = _source96.dtor_dims;
                {
                  RAST._IExpr _2591_recursiveGen;
                  bool _2592_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2593_recIdents;
                  RAST._IExpr _out379;
                  bool _out380;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out379, out _out380, out _out381);
                  _2591_recursiveGen = _out379;
                  _2592_recOwned = _out380;
                  _2593_recIdents = _out381;
                  Dafny.ISequence<Dafny.Rune> _2594_s;
                  _2594_s = (_2591_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2592_recOwned)) {
                    _2594_s = Dafny.Sequence<Dafny.Rune>.Concat(_2594_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2594_s = Dafny.Sequence<Dafny.Rune>.Concat(_2594_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2594_s);
                  isOwned = _2592_recOwned;
                  readIdents = _2593_recIdents;
                }
              } else if (_source96.is_Seq) {
                DAST._IType _2595___mcc_h556 = _source96.dtor_element;
                {
                  RAST._IExpr _2596_recursiveGen;
                  bool _2597_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2598_recIdents;
                  RAST._IExpr _out382;
                  bool _out383;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out382, out _out383, out _out384);
                  _2596_recursiveGen = _out382;
                  _2597_recOwned = _out383;
                  _2598_recIdents = _out384;
                  Dafny.ISequence<Dafny.Rune> _2599_s;
                  _2599_s = (_2596_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2597_recOwned)) {
                    _2599_s = Dafny.Sequence<Dafny.Rune>.Concat(_2599_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2599_s = Dafny.Sequence<Dafny.Rune>.Concat(_2599_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2599_s);
                  isOwned = _2597_recOwned;
                  readIdents = _2598_recIdents;
                }
              } else if (_source96.is_Set) {
                DAST._IType _2600___mcc_h559 = _source96.dtor_element;
                {
                  RAST._IExpr _2601_recursiveGen;
                  bool _2602_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2603_recIdents;
                  RAST._IExpr _out385;
                  bool _out386;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out387;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out385, out _out386, out _out387);
                  _2601_recursiveGen = _out385;
                  _2602_recOwned = _out386;
                  _2603_recIdents = _out387;
                  Dafny.ISequence<Dafny.Rune> _2604_s;
                  _2604_s = (_2601_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2602_recOwned)) {
                    _2604_s = Dafny.Sequence<Dafny.Rune>.Concat(_2604_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2604_s = Dafny.Sequence<Dafny.Rune>.Concat(_2604_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2604_s);
                  isOwned = _2602_recOwned;
                  readIdents = _2603_recIdents;
                }
              } else if (_source96.is_Multiset) {
                DAST._IType _2605___mcc_h562 = _source96.dtor_element;
                {
                  RAST._IExpr _2606_recursiveGen;
                  bool _2607_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2608_recIdents;
                  RAST._IExpr _out388;
                  bool _out389;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out390;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out388, out _out389, out _out390);
                  _2606_recursiveGen = _out388;
                  _2607_recOwned = _out389;
                  _2608_recIdents = _out390;
                  Dafny.ISequence<Dafny.Rune> _2609_s;
                  _2609_s = (_2606_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2607_recOwned)) {
                    _2609_s = Dafny.Sequence<Dafny.Rune>.Concat(_2609_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2609_s = Dafny.Sequence<Dafny.Rune>.Concat(_2609_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2609_s);
                  isOwned = _2607_recOwned;
                  readIdents = _2608_recIdents;
                }
              } else if (_source96.is_Map) {
                DAST._IType _2610___mcc_h565 = _source96.dtor_key;
                DAST._IType _2611___mcc_h566 = _source96.dtor_value;
                {
                  RAST._IExpr _2612_recursiveGen;
                  bool _2613_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2614_recIdents;
                  RAST._IExpr _out391;
                  bool _out392;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out391, out _out392, out _out393);
                  _2612_recursiveGen = _out391;
                  _2613_recOwned = _out392;
                  _2614_recIdents = _out393;
                  Dafny.ISequence<Dafny.Rune> _2615_s;
                  _2615_s = (_2612_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2613_recOwned)) {
                    _2615_s = Dafny.Sequence<Dafny.Rune>.Concat(_2615_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2615_s = Dafny.Sequence<Dafny.Rune>.Concat(_2615_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2615_s);
                  isOwned = _2613_recOwned;
                  readIdents = _2614_recIdents;
                }
              } else if (_source96.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2616___mcc_h571 = _source96.dtor_args;
                DAST._IType _2617___mcc_h572 = _source96.dtor_result;
                {
                  RAST._IExpr _2618_recursiveGen;
                  bool _2619_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2620_recIdents;
                  RAST._IExpr _out394;
                  bool _out395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out394, out _out395, out _out396);
                  _2618_recursiveGen = _out394;
                  _2619_recOwned = _out395;
                  _2620_recIdents = _out396;
                  Dafny.ISequence<Dafny.Rune> _2621_s;
                  _2621_s = (_2618_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2619_recOwned)) {
                    _2621_s = Dafny.Sequence<Dafny.Rune>.Concat(_2621_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2621_s = Dafny.Sequence<Dafny.Rune>.Concat(_2621_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2621_s);
                  isOwned = _2619_recOwned;
                  readIdents = _2620_recIdents;
                }
              } else if (_source96.is_Primitive) {
                DAST._IPrimitive _2622___mcc_h577 = _source96.dtor_Primitive_a0;
                {
                  RAST._IExpr _2623_recursiveGen;
                  bool _2624_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2625_recIdents;
                  RAST._IExpr _out397;
                  bool _out398;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out399;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out397, out _out398, out _out399);
                  _2623_recursiveGen = _out397;
                  _2624_recOwned = _out398;
                  _2625_recIdents = _out399;
                  Dafny.ISequence<Dafny.Rune> _2626_s;
                  _2626_s = (_2623_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2624_recOwned)) {
                    _2626_s = Dafny.Sequence<Dafny.Rune>.Concat(_2626_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2626_s = Dafny.Sequence<Dafny.Rune>.Concat(_2626_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2626_s);
                  isOwned = _2624_recOwned;
                  readIdents = _2625_recIdents;
                }
              } else if (_source96.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2627___mcc_h580 = _source96.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2628_recursiveGen;
                  bool _2629_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2630_recIdents;
                  RAST._IExpr _out400;
                  bool _out401;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out402;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out400, out _out401, out _out402);
                  _2628_recursiveGen = _out400;
                  _2629_recOwned = _out401;
                  _2630_recIdents = _out402;
                  Dafny.ISequence<Dafny.Rune> _2631_s;
                  _2631_s = (_2628_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2629_recOwned)) {
                    _2631_s = Dafny.Sequence<Dafny.Rune>.Concat(_2631_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2631_s = Dafny.Sequence<Dafny.Rune>.Concat(_2631_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2631_s);
                  isOwned = _2629_recOwned;
                  readIdents = _2630_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2632___mcc_h583 = _source96.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2633_recursiveGen;
                  bool _2634_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2635_recIdents;
                  RAST._IExpr _out403;
                  bool _out404;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out405;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out403, out _out404, out _out405);
                  _2633_recursiveGen = _out403;
                  _2634_recOwned = _out404;
                  _2635_recIdents = _out405;
                  Dafny.ISequence<Dafny.Rune> _2636_s;
                  _2636_s = (_2633_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2634_recOwned)) {
                    _2636_s = Dafny.Sequence<Dafny.Rune>.Concat(_2636_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  _2636_s = Dafny.Sequence<Dafny.Rune>.Concat(_2636_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  r = RAST.Expr.create_RawExpr(_2636_s);
                  isOwned = _2634_recOwned;
                  readIdents = _2635_recIdents;
                }
              }
            } else if (_source85.is_Tuple) {
              Dafny.ISequence<DAST._IType> _2637___mcc_h586 = _source85.dtor_Tuple_a0;
              DAST._IType _source98 = _2297___mcc_h327;
              if (_source98.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2638___mcc_h590 = _source98.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2639___mcc_h591 = _source98.dtor_typeArgs;
                DAST._IResolvedType _2640___mcc_h592 = _source98.dtor_resolved;
                DAST._IResolvedType _source99 = _2640___mcc_h592;
                if (_source99.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2641___mcc_h596 = _source99.dtor_path;
                  {
                    RAST._IExpr _2642_recursiveGen;
                    bool _2643_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2644_recIdents;
                    RAST._IExpr _out406;
                    bool _out407;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out406, out _out407, out _out408);
                    _2642_recursiveGen = _out406;
                    _2643_recOwned = _out407;
                    _2644_recIdents = _out408;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2642_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2643_recOwned;
                    readIdents = _2644_recIdents;
                  }
                } else if (_source99.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2645___mcc_h598 = _source99.dtor_path;
                  {
                    RAST._IExpr _2646_recursiveGen;
                    bool _2647_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2648_recIdents;
                    RAST._IExpr _out409;
                    bool _out410;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out411;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out409, out _out410, out _out411);
                    _2646_recursiveGen = _out409;
                    _2647_recOwned = _out410;
                    _2648_recIdents = _out411;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2646_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2647_recOwned;
                    readIdents = _2648_recIdents;
                  }
                } else {
                  DAST._IType _2649___mcc_h600 = _source99.dtor_baseType;
                  DAST._INewtypeRange _2650___mcc_h601 = _source99.dtor_range;
                  bool _2651___mcc_h602 = _source99.dtor_erase;
                  bool _2652_erase = _2651___mcc_h602;
                  DAST._INewtypeRange _2653_range = _2650___mcc_h601;
                  DAST._IType _2654_b = _2649___mcc_h600;
                  {
                    if (object.Equals(_2291_fromTpe, _2654_b)) {
                      RAST._IExpr _2655_recursiveGen;
                      bool _2656_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2657_recIdents;
                      RAST._IExpr _out412;
                      bool _out413;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out414;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out412, out _out413, out _out414);
                      _2655_recursiveGen = _out412;
                      _2656_recOwned = _out413;
                      _2657_recIdents = _out414;
                      Std.Wrappers._IOption<RAST._IType> _2658_potentialRhsType;
                      _2658_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2654_b, _2653_range);
                      Std.Wrappers._IOption<RAST._IType> _source100 = _2658_potentialRhsType;
                      if (_source100.is_None) {
                        if (_2652_erase) {
                          r = _2655_recursiveGen;
                        } else {
                          RAST._IType _2659_rhsType;
                          RAST._IType _out415;
                          _out415 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                          _2659_rhsType = _out415;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2659_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2655_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2656_recOwned;
                      } else {
                        RAST._IType _2660___mcc_h1257 = _source100.dtor_value;
                        RAST._IType _2661_v = _2660___mcc_h1257;
                        r = RAST.Expr.create_ConversionNum(_2661_v, _2655_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2657_recIdents;
                    } else {
                      RAST._IExpr _out416;
                      bool _out417;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out418;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2654_b), _2654_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out416, out _out417, out _out418);
                      r = _out416;
                      isOwned = _out417;
                      readIdents = _out418;
                    }
                  }
                }
              } else if (_source98.is_Nullable) {
                DAST._IType _2662___mcc_h606 = _source98.dtor_Nullable_a0;
                {
                  RAST._IExpr _2663_recursiveGen;
                  bool _2664_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2665_recIdents;
                  RAST._IExpr _out419;
                  bool _out420;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out419, out _out420, out _out421);
                  _2663_recursiveGen = _out419;
                  _2664_recOwned = _out420;
                  _2665_recIdents = _out421;
                  Dafny.ISequence<Dafny.Rune> _2666_s;
                  _2666_s = (_2663_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2664_recOwned)) {
                    _2666_s = Dafny.Sequence<Dafny.Rune>.Concat(_2666_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2666_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2666_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2666_s);
                  isOwned = true;
                  readIdents = _2665_recIdents;
                }
              } else if (_source98.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2667___mcc_h608 = _source98.dtor_Tuple_a0;
                {
                  RAST._IExpr _2668_recursiveGen;
                  bool _2669_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2670_recIdents;
                  RAST._IExpr _out422;
                  bool _out423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out422, out _out423, out _out424);
                  _2668_recursiveGen = _out422;
                  _2669_recOwned = _out423;
                  _2670_recIdents = _out424;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2668_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2669_recOwned;
                  readIdents = _2670_recIdents;
                }
              } else if (_source98.is_Array) {
                DAST._IType _2671___mcc_h610 = _source98.dtor_element;
                BigInteger _2672___mcc_h611 = _source98.dtor_dims;
                {
                  RAST._IExpr _2673_recursiveGen;
                  bool _2674_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2675_recIdents;
                  RAST._IExpr _out425;
                  bool _out426;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out427;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out425, out _out426, out _out427);
                  _2673_recursiveGen = _out425;
                  _2674_recOwned = _out426;
                  _2675_recIdents = _out427;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2673_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2674_recOwned;
                  readIdents = _2675_recIdents;
                }
              } else if (_source98.is_Seq) {
                DAST._IType _2676___mcc_h614 = _source98.dtor_element;
                {
                  RAST._IExpr _2677_recursiveGen;
                  bool _2678_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2679_recIdents;
                  RAST._IExpr _out428;
                  bool _out429;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out430;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out428, out _out429, out _out430);
                  _2677_recursiveGen = _out428;
                  _2678_recOwned = _out429;
                  _2679_recIdents = _out430;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2677_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2678_recOwned;
                  readIdents = _2679_recIdents;
                }
              } else if (_source98.is_Set) {
                DAST._IType _2680___mcc_h616 = _source98.dtor_element;
                {
                  RAST._IExpr _2681_recursiveGen;
                  bool _2682_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2683_recIdents;
                  RAST._IExpr _out431;
                  bool _out432;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out431, out _out432, out _out433);
                  _2681_recursiveGen = _out431;
                  _2682_recOwned = _out432;
                  _2683_recIdents = _out433;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2681_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2682_recOwned;
                  readIdents = _2683_recIdents;
                }
              } else if (_source98.is_Multiset) {
                DAST._IType _2684___mcc_h618 = _source98.dtor_element;
                {
                  RAST._IExpr _2685_recursiveGen;
                  bool _2686_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2687_recIdents;
                  RAST._IExpr _out434;
                  bool _out435;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out434, out _out435, out _out436);
                  _2685_recursiveGen = _out434;
                  _2686_recOwned = _out435;
                  _2687_recIdents = _out436;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2685_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2686_recOwned;
                  readIdents = _2687_recIdents;
                }
              } else if (_source98.is_Map) {
                DAST._IType _2688___mcc_h620 = _source98.dtor_key;
                DAST._IType _2689___mcc_h621 = _source98.dtor_value;
                {
                  RAST._IExpr _2690_recursiveGen;
                  bool _2691_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2692_recIdents;
                  RAST._IExpr _out437;
                  bool _out438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out439;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439);
                  _2690_recursiveGen = _out437;
                  _2691_recOwned = _out438;
                  _2692_recIdents = _out439;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2690_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2691_recOwned;
                  readIdents = _2692_recIdents;
                }
              } else if (_source98.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2693___mcc_h624 = _source98.dtor_args;
                DAST._IType _2694___mcc_h625 = _source98.dtor_result;
                {
                  RAST._IExpr _2695_recursiveGen;
                  bool _2696_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2697_recIdents;
                  RAST._IExpr _out440;
                  bool _out441;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out442;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out440, out _out441, out _out442);
                  _2695_recursiveGen = _out440;
                  _2696_recOwned = _out441;
                  _2697_recIdents = _out442;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2695_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2696_recOwned;
                  readIdents = _2697_recIdents;
                }
              } else if (_source98.is_Primitive) {
                DAST._IPrimitive _2698___mcc_h628 = _source98.dtor_Primitive_a0;
                {
                  RAST._IExpr _2699_recursiveGen;
                  bool _2700_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2701_recIdents;
                  RAST._IExpr _out443;
                  bool _out444;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out443, out _out444, out _out445);
                  _2699_recursiveGen = _out443;
                  _2700_recOwned = _out444;
                  _2701_recIdents = _out445;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2699_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2700_recOwned;
                  readIdents = _2701_recIdents;
                }
              } else if (_source98.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2702___mcc_h630 = _source98.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2703_recursiveGen;
                  bool _2704_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2705_recIdents;
                  RAST._IExpr _out446;
                  bool _out447;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out446, out _out447, out _out448);
                  _2703_recursiveGen = _out446;
                  _2704_recOwned = _out447;
                  _2705_recIdents = _out448;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2703_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2704_recOwned;
                  readIdents = _2705_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2706___mcc_h632 = _source98.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2707_recursiveGen;
                  bool _2708_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2709_recIdents;
                  RAST._IExpr _out449;
                  bool _out450;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out451;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out449, out _out450, out _out451);
                  _2707_recursiveGen = _out449;
                  _2708_recOwned = _out450;
                  _2709_recIdents = _out451;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2707_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2708_recOwned;
                  readIdents = _2709_recIdents;
                }
              }
            } else if (_source85.is_Array) {
              DAST._IType _2710___mcc_h634 = _source85.dtor_element;
              BigInteger _2711___mcc_h635 = _source85.dtor_dims;
              DAST._IType _source101 = _2297___mcc_h327;
              if (_source101.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2712___mcc_h642 = _source101.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2713___mcc_h643 = _source101.dtor_typeArgs;
                DAST._IResolvedType _2714___mcc_h644 = _source101.dtor_resolved;
                DAST._IResolvedType _source102 = _2714___mcc_h644;
                if (_source102.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2715___mcc_h648 = _source102.dtor_path;
                  {
                    RAST._IExpr _2716_recursiveGen;
                    bool _2717_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2718_recIdents;
                    RAST._IExpr _out452;
                    bool _out453;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out454;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out452, out _out453, out _out454);
                    _2716_recursiveGen = _out452;
                    _2717_recOwned = _out453;
                    _2718_recIdents = _out454;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2716_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2717_recOwned;
                    readIdents = _2718_recIdents;
                  }
                } else if (_source102.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2719___mcc_h650 = _source102.dtor_path;
                  {
                    RAST._IExpr _2720_recursiveGen;
                    bool _2721_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2722_recIdents;
                    RAST._IExpr _out455;
                    bool _out456;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out455, out _out456, out _out457);
                    _2720_recursiveGen = _out455;
                    _2721_recOwned = _out456;
                    _2722_recIdents = _out457;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2720_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2721_recOwned;
                    readIdents = _2722_recIdents;
                  }
                } else {
                  DAST._IType _2723___mcc_h652 = _source102.dtor_baseType;
                  DAST._INewtypeRange _2724___mcc_h653 = _source102.dtor_range;
                  bool _2725___mcc_h654 = _source102.dtor_erase;
                  bool _2726_erase = _2725___mcc_h654;
                  DAST._INewtypeRange _2727_range = _2724___mcc_h653;
                  DAST._IType _2728_b = _2723___mcc_h652;
                  {
                    if (object.Equals(_2291_fromTpe, _2728_b)) {
                      RAST._IExpr _2729_recursiveGen;
                      bool _2730_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2731_recIdents;
                      RAST._IExpr _out458;
                      bool _out459;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460);
                      _2729_recursiveGen = _out458;
                      _2730_recOwned = _out459;
                      _2731_recIdents = _out460;
                      Std.Wrappers._IOption<RAST._IType> _2732_potentialRhsType;
                      _2732_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2728_b, _2727_range);
                      Std.Wrappers._IOption<RAST._IType> _source103 = _2732_potentialRhsType;
                      if (_source103.is_None) {
                        if (_2726_erase) {
                          r = _2729_recursiveGen;
                        } else {
                          RAST._IType _2733_rhsType;
                          RAST._IType _out461;
                          _out461 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                          _2733_rhsType = _out461;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2733_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2729_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2730_recOwned;
                      } else {
                        RAST._IType _2734___mcc_h1258 = _source103.dtor_value;
                        RAST._IType _2735_v = _2734___mcc_h1258;
                        r = RAST.Expr.create_ConversionNum(_2735_v, _2729_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2731_recIdents;
                    } else {
                      RAST._IExpr _out462;
                      bool _out463;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2728_b), _2728_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out462, out _out463, out _out464);
                      r = _out462;
                      isOwned = _out463;
                      readIdents = _out464;
                    }
                  }
                }
              } else if (_source101.is_Nullable) {
                DAST._IType _2736___mcc_h658 = _source101.dtor_Nullable_a0;
                {
                  RAST._IExpr _2737_recursiveGen;
                  bool _2738_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2739_recIdents;
                  RAST._IExpr _out465;
                  bool _out466;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out467;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out465, out _out466, out _out467);
                  _2737_recursiveGen = _out465;
                  _2738_recOwned = _out466;
                  _2739_recIdents = _out467;
                  Dafny.ISequence<Dafny.Rune> _2740_s;
                  _2740_s = (_2737_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2738_recOwned)) {
                    _2740_s = Dafny.Sequence<Dafny.Rune>.Concat(_2740_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2740_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2740_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2740_s);
                  isOwned = true;
                  readIdents = _2739_recIdents;
                }
              } else if (_source101.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2741___mcc_h660 = _source101.dtor_Tuple_a0;
                {
                  RAST._IExpr _2742_recursiveGen;
                  bool _2743_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2744_recIdents;
                  RAST._IExpr _out468;
                  bool _out469;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out470;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out468, out _out469, out _out470);
                  _2742_recursiveGen = _out468;
                  _2743_recOwned = _out469;
                  _2744_recIdents = _out470;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2742_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2743_recOwned;
                  readIdents = _2744_recIdents;
                }
              } else if (_source101.is_Array) {
                DAST._IType _2745___mcc_h662 = _source101.dtor_element;
                BigInteger _2746___mcc_h663 = _source101.dtor_dims;
                {
                  RAST._IExpr _2747_recursiveGen;
                  bool _2748_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2749_recIdents;
                  RAST._IExpr _out471;
                  bool _out472;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out471, out _out472, out _out473);
                  _2747_recursiveGen = _out471;
                  _2748_recOwned = _out472;
                  _2749_recIdents = _out473;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2747_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2748_recOwned;
                  readIdents = _2749_recIdents;
                }
              } else if (_source101.is_Seq) {
                DAST._IType _2750___mcc_h666 = _source101.dtor_element;
                {
                  RAST._IExpr _2751_recursiveGen;
                  bool _2752_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2753_recIdents;
                  RAST._IExpr _out474;
                  bool _out475;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476);
                  _2751_recursiveGen = _out474;
                  _2752_recOwned = _out475;
                  _2753_recIdents = _out476;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2751_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2752_recOwned;
                  readIdents = _2753_recIdents;
                }
              } else if (_source101.is_Set) {
                DAST._IType _2754___mcc_h668 = _source101.dtor_element;
                {
                  RAST._IExpr _2755_recursiveGen;
                  bool _2756_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2757_recIdents;
                  RAST._IExpr _out477;
                  bool _out478;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out479;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479);
                  _2755_recursiveGen = _out477;
                  _2756_recOwned = _out478;
                  _2757_recIdents = _out479;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2755_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2756_recOwned;
                  readIdents = _2757_recIdents;
                }
              } else if (_source101.is_Multiset) {
                DAST._IType _2758___mcc_h670 = _source101.dtor_element;
                {
                  RAST._IExpr _2759_recursiveGen;
                  bool _2760_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2761_recIdents;
                  RAST._IExpr _out480;
                  bool _out481;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out482;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out480, out _out481, out _out482);
                  _2759_recursiveGen = _out480;
                  _2760_recOwned = _out481;
                  _2761_recIdents = _out482;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2759_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2760_recOwned;
                  readIdents = _2761_recIdents;
                }
              } else if (_source101.is_Map) {
                DAST._IType _2762___mcc_h672 = _source101.dtor_key;
                DAST._IType _2763___mcc_h673 = _source101.dtor_value;
                {
                  RAST._IExpr _2764_recursiveGen;
                  bool _2765_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2766_recIdents;
                  RAST._IExpr _out483;
                  bool _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out483, out _out484, out _out485);
                  _2764_recursiveGen = _out483;
                  _2765_recOwned = _out484;
                  _2766_recIdents = _out485;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2764_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2765_recOwned;
                  readIdents = _2766_recIdents;
                }
              } else if (_source101.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2767___mcc_h676 = _source101.dtor_args;
                DAST._IType _2768___mcc_h677 = _source101.dtor_result;
                {
                  RAST._IExpr _2769_recursiveGen;
                  bool _2770_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2771_recIdents;
                  RAST._IExpr _out486;
                  bool _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out486, out _out487, out _out488);
                  _2769_recursiveGen = _out486;
                  _2770_recOwned = _out487;
                  _2771_recIdents = _out488;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2769_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2770_recOwned;
                  readIdents = _2771_recIdents;
                }
              } else if (_source101.is_Primitive) {
                DAST._IPrimitive _2772___mcc_h680 = _source101.dtor_Primitive_a0;
                {
                  RAST._IExpr _2773_recursiveGen;
                  bool _2774_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2775_recIdents;
                  RAST._IExpr _out489;
                  bool _out490;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out491;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out489, out _out490, out _out491);
                  _2773_recursiveGen = _out489;
                  _2774_recOwned = _out490;
                  _2775_recIdents = _out491;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2773_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2774_recOwned;
                  readIdents = _2775_recIdents;
                }
              } else if (_source101.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2776___mcc_h682 = _source101.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2777_recursiveGen;
                  bool _2778_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2779_recIdents;
                  RAST._IExpr _out492;
                  bool _out493;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out494;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out492, out _out493, out _out494);
                  _2777_recursiveGen = _out492;
                  _2778_recOwned = _out493;
                  _2779_recIdents = _out494;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2777_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2778_recOwned;
                  readIdents = _2779_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2780___mcc_h684 = _source101.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2781_recursiveGen;
                  bool _2782_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2783_recIdents;
                  RAST._IExpr _out495;
                  bool _out496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out495, out _out496, out _out497);
                  _2781_recursiveGen = _out495;
                  _2782_recOwned = _out496;
                  _2783_recIdents = _out497;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2781_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2782_recOwned;
                  readIdents = _2783_recIdents;
                }
              }
            } else if (_source85.is_Seq) {
              DAST._IType _2784___mcc_h686 = _source85.dtor_element;
              DAST._IType _source104 = _2297___mcc_h327;
              if (_source104.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2785___mcc_h690 = _source104.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2786___mcc_h691 = _source104.dtor_typeArgs;
                DAST._IResolvedType _2787___mcc_h692 = _source104.dtor_resolved;
                DAST._IResolvedType _source105 = _2787___mcc_h692;
                if (_source105.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2788___mcc_h696 = _source105.dtor_path;
                  {
                    RAST._IExpr _2789_recursiveGen;
                    bool _2790_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2791_recIdents;
                    RAST._IExpr _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500);
                    _2789_recursiveGen = _out498;
                    _2790_recOwned = _out499;
                    _2791_recIdents = _out500;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2789_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2790_recOwned;
                    readIdents = _2791_recIdents;
                  }
                } else if (_source105.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2792___mcc_h698 = _source105.dtor_path;
                  {
                    RAST._IExpr _2793_recursiveGen;
                    bool _2794_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2795_recIdents;
                    RAST._IExpr _out501;
                    bool _out502;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out503;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503);
                    _2793_recursiveGen = _out501;
                    _2794_recOwned = _out502;
                    _2795_recIdents = _out503;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2793_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2794_recOwned;
                    readIdents = _2795_recIdents;
                  }
                } else {
                  DAST._IType _2796___mcc_h700 = _source105.dtor_baseType;
                  DAST._INewtypeRange _2797___mcc_h701 = _source105.dtor_range;
                  bool _2798___mcc_h702 = _source105.dtor_erase;
                  bool _2799_erase = _2798___mcc_h702;
                  DAST._INewtypeRange _2800_range = _2797___mcc_h701;
                  DAST._IType _2801_b = _2796___mcc_h700;
                  {
                    if (object.Equals(_2291_fromTpe, _2801_b)) {
                      RAST._IExpr _2802_recursiveGen;
                      bool _2803_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2804_recIdents;
                      RAST._IExpr _out504;
                      bool _out505;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out506;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out504, out _out505, out _out506);
                      _2802_recursiveGen = _out504;
                      _2803_recOwned = _out505;
                      _2804_recIdents = _out506;
                      Std.Wrappers._IOption<RAST._IType> _2805_potentialRhsType;
                      _2805_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2801_b, _2800_range);
                      Std.Wrappers._IOption<RAST._IType> _source106 = _2805_potentialRhsType;
                      if (_source106.is_None) {
                        if (_2799_erase) {
                          r = _2802_recursiveGen;
                        } else {
                          RAST._IType _2806_rhsType;
                          RAST._IType _out507;
                          _out507 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                          _2806_rhsType = _out507;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2806_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2802_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2803_recOwned;
                      } else {
                        RAST._IType _2807___mcc_h1259 = _source106.dtor_value;
                        RAST._IType _2808_v = _2807___mcc_h1259;
                        r = RAST.Expr.create_ConversionNum(_2808_v, _2802_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2804_recIdents;
                    } else {
                      RAST._IExpr _out508;
                      bool _out509;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out510;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2801_b), _2801_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out508, out _out509, out _out510);
                      r = _out508;
                      isOwned = _out509;
                      readIdents = _out510;
                    }
                  }
                }
              } else if (_source104.is_Nullable) {
                DAST._IType _2809___mcc_h706 = _source104.dtor_Nullable_a0;
                {
                  RAST._IExpr _2810_recursiveGen;
                  bool _2811_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2812_recIdents;
                  RAST._IExpr _out511;
                  bool _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out511, out _out512, out _out513);
                  _2810_recursiveGen = _out511;
                  _2811_recOwned = _out512;
                  _2812_recIdents = _out513;
                  Dafny.ISequence<Dafny.Rune> _2813_s;
                  _2813_s = (_2810_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2811_recOwned)) {
                    _2813_s = Dafny.Sequence<Dafny.Rune>.Concat(_2813_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2813_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2813_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2813_s);
                  isOwned = true;
                  readIdents = _2812_recIdents;
                }
              } else if (_source104.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2814___mcc_h708 = _source104.dtor_Tuple_a0;
                {
                  RAST._IExpr _2815_recursiveGen;
                  bool _2816_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2817_recIdents;
                  RAST._IExpr _out514;
                  bool _out515;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out516;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516);
                  _2815_recursiveGen = _out514;
                  _2816_recOwned = _out515;
                  _2817_recIdents = _out516;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2815_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2816_recOwned;
                  readIdents = _2817_recIdents;
                }
              } else if (_source104.is_Array) {
                DAST._IType _2818___mcc_h710 = _source104.dtor_element;
                BigInteger _2819___mcc_h711 = _source104.dtor_dims;
                {
                  RAST._IExpr _2820_recursiveGen;
                  bool _2821_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2822_recIdents;
                  RAST._IExpr _out517;
                  bool _out518;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out519;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out517, out _out518, out _out519);
                  _2820_recursiveGen = _out517;
                  _2821_recOwned = _out518;
                  _2822_recIdents = _out519;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2820_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2821_recOwned;
                  readIdents = _2822_recIdents;
                }
              } else if (_source104.is_Seq) {
                DAST._IType _2823___mcc_h714 = _source104.dtor_element;
                {
                  RAST._IExpr _2824_recursiveGen;
                  bool _2825_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2826_recIdents;
                  RAST._IExpr _out520;
                  bool _out521;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out520, out _out521, out _out522);
                  _2824_recursiveGen = _out520;
                  _2825_recOwned = _out521;
                  _2826_recIdents = _out522;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2824_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2825_recOwned;
                  readIdents = _2826_recIdents;
                }
              } else if (_source104.is_Set) {
                DAST._IType _2827___mcc_h716 = _source104.dtor_element;
                {
                  RAST._IExpr _2828_recursiveGen;
                  bool _2829_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2830_recIdents;
                  RAST._IExpr _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out523, out _out524, out _out525);
                  _2828_recursiveGen = _out523;
                  _2829_recOwned = _out524;
                  _2830_recIdents = _out525;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2828_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2829_recOwned;
                  readIdents = _2830_recIdents;
                }
              } else if (_source104.is_Multiset) {
                DAST._IType _2831___mcc_h718 = _source104.dtor_element;
                {
                  RAST._IExpr _2832_recursiveGen;
                  bool _2833_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2834_recIdents;
                  RAST._IExpr _out526;
                  bool _out527;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out528;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528);
                  _2832_recursiveGen = _out526;
                  _2833_recOwned = _out527;
                  _2834_recIdents = _out528;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2832_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2833_recOwned;
                  readIdents = _2834_recIdents;
                }
              } else if (_source104.is_Map) {
                DAST._IType _2835___mcc_h720 = _source104.dtor_key;
                DAST._IType _2836___mcc_h721 = _source104.dtor_value;
                {
                  RAST._IExpr _2837_recursiveGen;
                  bool _2838_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2839_recIdents;
                  RAST._IExpr _out529;
                  bool _out530;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out531;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out529, out _out530, out _out531);
                  _2837_recursiveGen = _out529;
                  _2838_recOwned = _out530;
                  _2839_recIdents = _out531;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2837_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2838_recOwned;
                  readIdents = _2839_recIdents;
                }
              } else if (_source104.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2840___mcc_h724 = _source104.dtor_args;
                DAST._IType _2841___mcc_h725 = _source104.dtor_result;
                {
                  RAST._IExpr _2842_recursiveGen;
                  bool _2843_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2844_recIdents;
                  RAST._IExpr _out532;
                  bool _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out532, out _out533, out _out534);
                  _2842_recursiveGen = _out532;
                  _2843_recOwned = _out533;
                  _2844_recIdents = _out534;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2842_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2843_recOwned;
                  readIdents = _2844_recIdents;
                }
              } else if (_source104.is_Primitive) {
                DAST._IPrimitive _2845___mcc_h728 = _source104.dtor_Primitive_a0;
                {
                  RAST._IExpr _2846_recursiveGen;
                  bool _2847_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2848_recIdents;
                  RAST._IExpr _out535;
                  bool _out536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out535, out _out536, out _out537);
                  _2846_recursiveGen = _out535;
                  _2847_recOwned = _out536;
                  _2848_recIdents = _out537;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2846_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2847_recOwned;
                  readIdents = _2848_recIdents;
                }
              } else if (_source104.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2849___mcc_h730 = _source104.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2850_recursiveGen;
                  bool _2851_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2852_recIdents;
                  RAST._IExpr _out538;
                  bool _out539;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out540;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540);
                  _2850_recursiveGen = _out538;
                  _2851_recOwned = _out539;
                  _2852_recIdents = _out540;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2850_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2851_recOwned;
                  readIdents = _2852_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2853___mcc_h732 = _source104.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2854_recursiveGen;
                  bool _2855_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2856_recIdents;
                  RAST._IExpr _out541;
                  bool _out542;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out543;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out541, out _out542, out _out543);
                  _2854_recursiveGen = _out541;
                  _2855_recOwned = _out542;
                  _2856_recIdents = _out543;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2854_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2855_recOwned;
                  readIdents = _2856_recIdents;
                }
              }
            } else if (_source85.is_Set) {
              DAST._IType _2857___mcc_h734 = _source85.dtor_element;
              DAST._IType _source107 = _2297___mcc_h327;
              if (_source107.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2858___mcc_h738 = _source107.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2859___mcc_h739 = _source107.dtor_typeArgs;
                DAST._IResolvedType _2860___mcc_h740 = _source107.dtor_resolved;
                DAST._IResolvedType _source108 = _2860___mcc_h740;
                if (_source108.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2861___mcc_h744 = _source108.dtor_path;
                  {
                    RAST._IExpr _2862_recursiveGen;
                    bool _2863_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2864_recIdents;
                    RAST._IExpr _out544;
                    bool _out545;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out544, out _out545, out _out546);
                    _2862_recursiveGen = _out544;
                    _2863_recOwned = _out545;
                    _2864_recIdents = _out546;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2862_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2863_recOwned;
                    readIdents = _2864_recIdents;
                  }
                } else if (_source108.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2865___mcc_h746 = _source108.dtor_path;
                  {
                    RAST._IExpr _2866_recursiveGen;
                    bool _2867_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2868_recIdents;
                    RAST._IExpr _out547;
                    bool _out548;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549);
                    _2866_recursiveGen = _out547;
                    _2867_recOwned = _out548;
                    _2868_recIdents = _out549;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2866_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2867_recOwned;
                    readIdents = _2868_recIdents;
                  }
                } else {
                  DAST._IType _2869___mcc_h748 = _source108.dtor_baseType;
                  DAST._INewtypeRange _2870___mcc_h749 = _source108.dtor_range;
                  bool _2871___mcc_h750 = _source108.dtor_erase;
                  bool _2872_erase = _2871___mcc_h750;
                  DAST._INewtypeRange _2873_range = _2870___mcc_h749;
                  DAST._IType _2874_b = _2869___mcc_h748;
                  {
                    if (object.Equals(_2291_fromTpe, _2874_b)) {
                      RAST._IExpr _2875_recursiveGen;
                      bool _2876_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2877_recIdents;
                      RAST._IExpr _out550;
                      bool _out551;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out552;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out550, out _out551, out _out552);
                      _2875_recursiveGen = _out550;
                      _2876_recOwned = _out551;
                      _2877_recIdents = _out552;
                      Std.Wrappers._IOption<RAST._IType> _2878_potentialRhsType;
                      _2878_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2874_b, _2873_range);
                      Std.Wrappers._IOption<RAST._IType> _source109 = _2878_potentialRhsType;
                      if (_source109.is_None) {
                        if (_2872_erase) {
                          r = _2875_recursiveGen;
                        } else {
                          RAST._IType _2879_rhsType;
                          RAST._IType _out553;
                          _out553 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                          _2879_rhsType = _out553;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2879_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2875_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2876_recOwned;
                      } else {
                        RAST._IType _2880___mcc_h1260 = _source109.dtor_value;
                        RAST._IType _2881_v = _2880___mcc_h1260;
                        r = RAST.Expr.create_ConversionNum(_2881_v, _2875_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2877_recIdents;
                    } else {
                      RAST._IExpr _out554;
                      bool _out555;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out556;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2874_b), _2874_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out554, out _out555, out _out556);
                      r = _out554;
                      isOwned = _out555;
                      readIdents = _out556;
                    }
                  }
                }
              } else if (_source107.is_Nullable) {
                DAST._IType _2882___mcc_h754 = _source107.dtor_Nullable_a0;
                {
                  RAST._IExpr _2883_recursiveGen;
                  bool _2884_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2885_recIdents;
                  RAST._IExpr _out557;
                  bool _out558;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out557, out _out558, out _out559);
                  _2883_recursiveGen = _out557;
                  _2884_recOwned = _out558;
                  _2885_recIdents = _out559;
                  Dafny.ISequence<Dafny.Rune> _2886_s;
                  _2886_s = (_2883_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2884_recOwned)) {
                    _2886_s = Dafny.Sequence<Dafny.Rune>.Concat(_2886_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2886_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2886_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2886_s);
                  isOwned = true;
                  readIdents = _2885_recIdents;
                }
              } else if (_source107.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2887___mcc_h756 = _source107.dtor_Tuple_a0;
                {
                  RAST._IExpr _2888_recursiveGen;
                  bool _2889_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2890_recIdents;
                  RAST._IExpr _out560;
                  bool _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out560, out _out561, out _out562);
                  _2888_recursiveGen = _out560;
                  _2889_recOwned = _out561;
                  _2890_recIdents = _out562;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2888_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2889_recOwned;
                  readIdents = _2890_recIdents;
                }
              } else if (_source107.is_Array) {
                DAST._IType _2891___mcc_h758 = _source107.dtor_element;
                BigInteger _2892___mcc_h759 = _source107.dtor_dims;
                {
                  RAST._IExpr _2893_recursiveGen;
                  bool _2894_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2895_recIdents;
                  RAST._IExpr _out563;
                  bool _out564;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out563, out _out564, out _out565);
                  _2893_recursiveGen = _out563;
                  _2894_recOwned = _out564;
                  _2895_recIdents = _out565;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2893_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2894_recOwned;
                  readIdents = _2895_recIdents;
                }
              } else if (_source107.is_Seq) {
                DAST._IType _2896___mcc_h762 = _source107.dtor_element;
                {
                  RAST._IExpr _2897_recursiveGen;
                  bool _2898_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2899_recIdents;
                  RAST._IExpr _out566;
                  bool _out567;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out568;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out566, out _out567, out _out568);
                  _2897_recursiveGen = _out566;
                  _2898_recOwned = _out567;
                  _2899_recIdents = _out568;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2897_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2898_recOwned;
                  readIdents = _2899_recIdents;
                }
              } else if (_source107.is_Set) {
                DAST._IType _2900___mcc_h764 = _source107.dtor_element;
                {
                  RAST._IExpr _2901_recursiveGen;
                  bool _2902_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2903_recIdents;
                  RAST._IExpr _out569;
                  bool _out570;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out571;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out569, out _out570, out _out571);
                  _2901_recursiveGen = _out569;
                  _2902_recOwned = _out570;
                  _2903_recIdents = _out571;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2901_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2902_recOwned;
                  readIdents = _2903_recIdents;
                }
              } else if (_source107.is_Multiset) {
                DAST._IType _2904___mcc_h766 = _source107.dtor_element;
                {
                  RAST._IExpr _2905_recursiveGen;
                  bool _2906_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2907_recIdents;
                  RAST._IExpr _out572;
                  bool _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out572, out _out573, out _out574);
                  _2905_recursiveGen = _out572;
                  _2906_recOwned = _out573;
                  _2907_recIdents = _out574;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2905_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2906_recOwned;
                  readIdents = _2907_recIdents;
                }
              } else if (_source107.is_Map) {
                DAST._IType _2908___mcc_h768 = _source107.dtor_key;
                DAST._IType _2909___mcc_h769 = _source107.dtor_value;
                {
                  RAST._IExpr _2910_recursiveGen;
                  bool _2911_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2912_recIdents;
                  RAST._IExpr _out575;
                  bool _out576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out577;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577);
                  _2910_recursiveGen = _out575;
                  _2911_recOwned = _out576;
                  _2912_recIdents = _out577;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2910_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2911_recOwned;
                  readIdents = _2912_recIdents;
                }
              } else if (_source107.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2913___mcc_h772 = _source107.dtor_args;
                DAST._IType _2914___mcc_h773 = _source107.dtor_result;
                {
                  RAST._IExpr _2915_recursiveGen;
                  bool _2916_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2917_recIdents;
                  RAST._IExpr _out578;
                  bool _out579;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out580;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out578, out _out579, out _out580);
                  _2915_recursiveGen = _out578;
                  _2916_recOwned = _out579;
                  _2917_recIdents = _out580;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2915_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2916_recOwned;
                  readIdents = _2917_recIdents;
                }
              } else if (_source107.is_Primitive) {
                DAST._IPrimitive _2918___mcc_h776 = _source107.dtor_Primitive_a0;
                {
                  RAST._IExpr _2919_recursiveGen;
                  bool _2920_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2921_recIdents;
                  RAST._IExpr _out581;
                  bool _out582;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out581, out _out582, out _out583);
                  _2919_recursiveGen = _out581;
                  _2920_recOwned = _out582;
                  _2921_recIdents = _out583;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2919_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2920_recOwned;
                  readIdents = _2921_recIdents;
                }
              } else if (_source107.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2922___mcc_h778 = _source107.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2923_recursiveGen;
                  bool _2924_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2925_recIdents;
                  RAST._IExpr _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out584, out _out585, out _out586);
                  _2923_recursiveGen = _out584;
                  _2924_recOwned = _out585;
                  _2925_recIdents = _out586;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2923_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2924_recOwned;
                  readIdents = _2925_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2926___mcc_h780 = _source107.dtor_TypeArg_a0;
                {
                  RAST._IExpr _2927_recursiveGen;
                  bool _2928_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2929_recIdents;
                  RAST._IExpr _out587;
                  bool _out588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589);
                  _2927_recursiveGen = _out587;
                  _2928_recOwned = _out588;
                  _2929_recIdents = _out589;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2927_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2928_recOwned;
                  readIdents = _2929_recIdents;
                }
              }
            } else if (_source85.is_Multiset) {
              DAST._IType _2930___mcc_h782 = _source85.dtor_element;
              DAST._IType _source110 = _2297___mcc_h327;
              if (_source110.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2931___mcc_h786 = _source110.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2932___mcc_h787 = _source110.dtor_typeArgs;
                DAST._IResolvedType _2933___mcc_h788 = _source110.dtor_resolved;
                DAST._IResolvedType _source111 = _2933___mcc_h788;
                if (_source111.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2934___mcc_h792 = _source111.dtor_path;
                  {
                    RAST._IExpr _2935_recursiveGen;
                    bool _2936_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2937_recIdents;
                    RAST._IExpr _out590;
                    bool _out591;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out592;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out590, out _out591, out _out592);
                    _2935_recursiveGen = _out590;
                    _2936_recOwned = _out591;
                    _2937_recIdents = _out592;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2935_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2936_recOwned;
                    readIdents = _2937_recIdents;
                  }
                } else if (_source111.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2938___mcc_h794 = _source111.dtor_path;
                  {
                    RAST._IExpr _2939_recursiveGen;
                    bool _2940_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2941_recIdents;
                    RAST._IExpr _out593;
                    bool _out594;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out593, out _out594, out _out595);
                    _2939_recursiveGen = _out593;
                    _2940_recOwned = _out594;
                    _2941_recIdents = _out595;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2939_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _2940_recOwned;
                    readIdents = _2941_recIdents;
                  }
                } else {
                  DAST._IType _2942___mcc_h796 = _source111.dtor_baseType;
                  DAST._INewtypeRange _2943___mcc_h797 = _source111.dtor_range;
                  bool _2944___mcc_h798 = _source111.dtor_erase;
                  bool _2945_erase = _2944___mcc_h798;
                  DAST._INewtypeRange _2946_range = _2943___mcc_h797;
                  DAST._IType _2947_b = _2942___mcc_h796;
                  {
                    if (object.Equals(_2291_fromTpe, _2947_b)) {
                      RAST._IExpr _2948_recursiveGen;
                      bool _2949_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2950_recIdents;
                      RAST._IExpr _out596;
                      bool _out597;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out596, out _out597, out _out598);
                      _2948_recursiveGen = _out596;
                      _2949_recOwned = _out597;
                      _2950_recIdents = _out598;
                      Std.Wrappers._IOption<RAST._IType> _2951_potentialRhsType;
                      _2951_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_2947_b, _2946_range);
                      Std.Wrappers._IOption<RAST._IType> _source112 = _2951_potentialRhsType;
                      if (_source112.is_None) {
                        if (_2945_erase) {
                          r = _2948_recursiveGen;
                        } else {
                          RAST._IType _2952_rhsType;
                          RAST._IType _out599;
                          _out599 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                          _2952_rhsType = _out599;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2952_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2948_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _2949_recOwned;
                      } else {
                        RAST._IType _2953___mcc_h1261 = _source112.dtor_value;
                        RAST._IType _2954_v = _2953___mcc_h1261;
                        r = RAST.Expr.create_ConversionNum(_2954_v, _2948_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _2950_recIdents;
                    } else {
                      RAST._IExpr _out600;
                      bool _out601;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _2947_b), _2947_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out600, out _out601, out _out602);
                      r = _out600;
                      isOwned = _out601;
                      readIdents = _out602;
                    }
                  }
                }
              } else if (_source110.is_Nullable) {
                DAST._IType _2955___mcc_h802 = _source110.dtor_Nullable_a0;
                {
                  RAST._IExpr _2956_recursiveGen;
                  bool _2957_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2958_recIdents;
                  RAST._IExpr _out603;
                  bool _out604;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out605;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out603, out _out604, out _out605);
                  _2956_recursiveGen = _out603;
                  _2957_recOwned = _out604;
                  _2958_recIdents = _out605;
                  Dafny.ISequence<Dafny.Rune> _2959_s;
                  _2959_s = (_2956_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_2957_recOwned)) {
                    _2959_s = Dafny.Sequence<Dafny.Rune>.Concat(_2959_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _2959_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2959_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_2959_s);
                  isOwned = true;
                  readIdents = _2958_recIdents;
                }
              } else if (_source110.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2960___mcc_h804 = _source110.dtor_Tuple_a0;
                {
                  RAST._IExpr _2961_recursiveGen;
                  bool _2962_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2963_recIdents;
                  RAST._IExpr _out606;
                  bool _out607;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out608;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out606, out _out607, out _out608);
                  _2961_recursiveGen = _out606;
                  _2962_recOwned = _out607;
                  _2963_recIdents = _out608;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2961_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2962_recOwned;
                  readIdents = _2963_recIdents;
                }
              } else if (_source110.is_Array) {
                DAST._IType _2964___mcc_h806 = _source110.dtor_element;
                BigInteger _2965___mcc_h807 = _source110.dtor_dims;
                {
                  RAST._IExpr _2966_recursiveGen;
                  bool _2967_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2968_recIdents;
                  RAST._IExpr _out609;
                  bool _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out609, out _out610, out _out611);
                  _2966_recursiveGen = _out609;
                  _2967_recOwned = _out610;
                  _2968_recIdents = _out611;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2966_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2967_recOwned;
                  readIdents = _2968_recIdents;
                }
              } else if (_source110.is_Seq) {
                DAST._IType _2969___mcc_h810 = _source110.dtor_element;
                {
                  RAST._IExpr _2970_recursiveGen;
                  bool _2971_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2972_recIdents;
                  RAST._IExpr _out612;
                  bool _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614);
                  _2970_recursiveGen = _out612;
                  _2971_recOwned = _out613;
                  _2972_recIdents = _out614;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2970_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2971_recOwned;
                  readIdents = _2972_recIdents;
                }
              } else if (_source110.is_Set) {
                DAST._IType _2973___mcc_h812 = _source110.dtor_element;
                {
                  RAST._IExpr _2974_recursiveGen;
                  bool _2975_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2976_recIdents;
                  RAST._IExpr _out615;
                  bool _out616;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out617;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out615, out _out616, out _out617);
                  _2974_recursiveGen = _out615;
                  _2975_recOwned = _out616;
                  _2976_recIdents = _out617;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2974_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2975_recOwned;
                  readIdents = _2976_recIdents;
                }
              } else if (_source110.is_Multiset) {
                DAST._IType _2977___mcc_h814 = _source110.dtor_element;
                {
                  RAST._IExpr _2978_recursiveGen;
                  bool _2979_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2980_recIdents;
                  RAST._IExpr _out618;
                  bool _out619;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out620;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out618, out _out619, out _out620);
                  _2978_recursiveGen = _out618;
                  _2979_recOwned = _out619;
                  _2980_recIdents = _out620;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2978_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2979_recOwned;
                  readIdents = _2980_recIdents;
                }
              } else if (_source110.is_Map) {
                DAST._IType _2981___mcc_h816 = _source110.dtor_key;
                DAST._IType _2982___mcc_h817 = _source110.dtor_value;
                {
                  RAST._IExpr _2983_recursiveGen;
                  bool _2984_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2985_recIdents;
                  RAST._IExpr _out621;
                  bool _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out621, out _out622, out _out623);
                  _2983_recursiveGen = _out621;
                  _2984_recOwned = _out622;
                  _2985_recIdents = _out623;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2983_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2984_recOwned;
                  readIdents = _2985_recIdents;
                }
              } else if (_source110.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2986___mcc_h820 = _source110.dtor_args;
                DAST._IType _2987___mcc_h821 = _source110.dtor_result;
                {
                  RAST._IExpr _2988_recursiveGen;
                  bool _2989_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2990_recIdents;
                  RAST._IExpr _out624;
                  bool _out625;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out624, out _out625, out _out626);
                  _2988_recursiveGen = _out624;
                  _2989_recOwned = _out625;
                  _2990_recIdents = _out626;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2988_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2989_recOwned;
                  readIdents = _2990_recIdents;
                }
              } else if (_source110.is_Primitive) {
                DAST._IPrimitive _2991___mcc_h824 = _source110.dtor_Primitive_a0;
                {
                  RAST._IExpr _2992_recursiveGen;
                  bool _2993_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2994_recIdents;
                  RAST._IExpr _out627;
                  bool _out628;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out629;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out627, out _out628, out _out629);
                  _2992_recursiveGen = _out627;
                  _2993_recOwned = _out628;
                  _2994_recIdents = _out629;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2992_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2993_recOwned;
                  readIdents = _2994_recIdents;
                }
              } else if (_source110.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2995___mcc_h826 = _source110.dtor_Passthrough_a0;
                {
                  RAST._IExpr _2996_recursiveGen;
                  bool _2997_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2998_recIdents;
                  RAST._IExpr _out630;
                  bool _out631;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out632;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out630, out _out631, out _out632);
                  _2996_recursiveGen = _out630;
                  _2997_recOwned = _out631;
                  _2998_recIdents = _out632;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_2996_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _2997_recOwned;
                  readIdents = _2998_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2999___mcc_h828 = _source110.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3000_recursiveGen;
                  bool _3001_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3002_recIdents;
                  RAST._IExpr _out633;
                  bool _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out633, out _out634, out _out635);
                  _3000_recursiveGen = _out633;
                  _3001_recOwned = _out634;
                  _3002_recIdents = _out635;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3000_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3001_recOwned;
                  readIdents = _3002_recIdents;
                }
              }
            } else if (_source85.is_Map) {
              DAST._IType _3003___mcc_h830 = _source85.dtor_key;
              DAST._IType _3004___mcc_h831 = _source85.dtor_value;
              DAST._IType _source113 = _2297___mcc_h327;
              if (_source113.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3005___mcc_h838 = _source113.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3006___mcc_h839 = _source113.dtor_typeArgs;
                DAST._IResolvedType _3007___mcc_h840 = _source113.dtor_resolved;
                DAST._IResolvedType _source114 = _3007___mcc_h840;
                if (_source114.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3008___mcc_h844 = _source114.dtor_path;
                  {
                    RAST._IExpr _3009_recursiveGen;
                    bool _3010_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3011_recIdents;
                    RAST._IExpr _out636;
                    bool _out637;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638);
                    _3009_recursiveGen = _out636;
                    _3010_recOwned = _out637;
                    _3011_recIdents = _out638;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3009_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3010_recOwned;
                    readIdents = _3011_recIdents;
                  }
                } else if (_source114.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3012___mcc_h846 = _source114.dtor_path;
                  {
                    RAST._IExpr _3013_recursiveGen;
                    bool _3014_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3015_recIdents;
                    RAST._IExpr _out639;
                    bool _out640;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out641;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out639, out _out640, out _out641);
                    _3013_recursiveGen = _out639;
                    _3014_recOwned = _out640;
                    _3015_recIdents = _out641;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3013_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3014_recOwned;
                    readIdents = _3015_recIdents;
                  }
                } else {
                  DAST._IType _3016___mcc_h848 = _source114.dtor_baseType;
                  DAST._INewtypeRange _3017___mcc_h849 = _source114.dtor_range;
                  bool _3018___mcc_h850 = _source114.dtor_erase;
                  bool _3019_erase = _3018___mcc_h850;
                  DAST._INewtypeRange _3020_range = _3017___mcc_h849;
                  DAST._IType _3021_b = _3016___mcc_h848;
                  {
                    if (object.Equals(_2291_fromTpe, _3021_b)) {
                      RAST._IExpr _3022_recursiveGen;
                      bool _3023_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3024_recIdents;
                      RAST._IExpr _out642;
                      bool _out643;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out642, out _out643, out _out644);
                      _3022_recursiveGen = _out642;
                      _3023_recOwned = _out643;
                      _3024_recIdents = _out644;
                      Std.Wrappers._IOption<RAST._IType> _3025_potentialRhsType;
                      _3025_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3021_b, _3020_range);
                      Std.Wrappers._IOption<RAST._IType> _source115 = _3025_potentialRhsType;
                      if (_source115.is_None) {
                        if (_3019_erase) {
                          r = _3022_recursiveGen;
                        } else {
                          RAST._IType _3026_rhsType;
                          RAST._IType _out645;
                          _out645 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                          _3026_rhsType = _out645;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3026_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3022_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _3023_recOwned;
                      } else {
                        RAST._IType _3027___mcc_h1262 = _source115.dtor_value;
                        RAST._IType _3028_v = _3027___mcc_h1262;
                        r = RAST.Expr.create_ConversionNum(_3028_v, _3022_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _3024_recIdents;
                    } else {
                      RAST._IExpr _out646;
                      bool _out647;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out648;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _3021_b), _3021_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out646, out _out647, out _out648);
                      r = _out646;
                      isOwned = _out647;
                      readIdents = _out648;
                    }
                  }
                }
              } else if (_source113.is_Nullable) {
                DAST._IType _3029___mcc_h854 = _source113.dtor_Nullable_a0;
                {
                  RAST._IExpr _3030_recursiveGen;
                  bool _3031_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3032_recIdents;
                  RAST._IExpr _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out649, out _out650, out _out651);
                  _3030_recursiveGen = _out649;
                  _3031_recOwned = _out650;
                  _3032_recIdents = _out651;
                  Dafny.ISequence<Dafny.Rune> _3033_s;
                  _3033_s = (_3030_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_3031_recOwned)) {
                    _3033_s = Dafny.Sequence<Dafny.Rune>.Concat(_3033_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3033_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3033_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3033_s);
                  isOwned = true;
                  readIdents = _3032_recIdents;
                }
              } else if (_source113.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3034___mcc_h856 = _source113.dtor_Tuple_a0;
                {
                  RAST._IExpr _3035_recursiveGen;
                  bool _3036_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3037_recIdents;
                  RAST._IExpr _out652;
                  bool _out653;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out654;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654);
                  _3035_recursiveGen = _out652;
                  _3036_recOwned = _out653;
                  _3037_recIdents = _out654;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3035_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3036_recOwned;
                  readIdents = _3037_recIdents;
                }
              } else if (_source113.is_Array) {
                DAST._IType _3038___mcc_h858 = _source113.dtor_element;
                BigInteger _3039___mcc_h859 = _source113.dtor_dims;
                {
                  RAST._IExpr _3040_recursiveGen;
                  bool _3041_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3042_recIdents;
                  RAST._IExpr _out655;
                  bool _out656;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out657;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out655, out _out656, out _out657);
                  _3040_recursiveGen = _out655;
                  _3041_recOwned = _out656;
                  _3042_recIdents = _out657;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3040_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3041_recOwned;
                  readIdents = _3042_recIdents;
                }
              } else if (_source113.is_Seq) {
                DAST._IType _3043___mcc_h862 = _source113.dtor_element;
                {
                  RAST._IExpr _3044_recursiveGen;
                  bool _3045_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3046_recIdents;
                  RAST._IExpr _out658;
                  bool _out659;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out658, out _out659, out _out660);
                  _3044_recursiveGen = _out658;
                  _3045_recOwned = _out659;
                  _3046_recIdents = _out660;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3044_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3045_recOwned;
                  readIdents = _3046_recIdents;
                }
              } else if (_source113.is_Set) {
                DAST._IType _3047___mcc_h864 = _source113.dtor_element;
                {
                  RAST._IExpr _3048_recursiveGen;
                  bool _3049_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3050_recIdents;
                  RAST._IExpr _out661;
                  bool _out662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out661, out _out662, out _out663);
                  _3048_recursiveGen = _out661;
                  _3049_recOwned = _out662;
                  _3050_recIdents = _out663;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3048_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3049_recOwned;
                  readIdents = _3050_recIdents;
                }
              } else if (_source113.is_Multiset) {
                DAST._IType _3051___mcc_h866 = _source113.dtor_element;
                {
                  RAST._IExpr _3052_recursiveGen;
                  bool _3053_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3054_recIdents;
                  RAST._IExpr _out664;
                  bool _out665;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out666;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out664, out _out665, out _out666);
                  _3052_recursiveGen = _out664;
                  _3053_recOwned = _out665;
                  _3054_recIdents = _out666;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3052_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3053_recOwned;
                  readIdents = _3054_recIdents;
                }
              } else if (_source113.is_Map) {
                DAST._IType _3055___mcc_h868 = _source113.dtor_key;
                DAST._IType _3056___mcc_h869 = _source113.dtor_value;
                {
                  RAST._IExpr _3057_recursiveGen;
                  bool _3058_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3059_recIdents;
                  RAST._IExpr _out667;
                  bool _out668;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out669;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out667, out _out668, out _out669);
                  _3057_recursiveGen = _out667;
                  _3058_recOwned = _out668;
                  _3059_recIdents = _out669;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3057_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3058_recOwned;
                  readIdents = _3059_recIdents;
                }
              } else if (_source113.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3060___mcc_h872 = _source113.dtor_args;
                DAST._IType _3061___mcc_h873 = _source113.dtor_result;
                {
                  RAST._IExpr _3062_recursiveGen;
                  bool _3063_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3064_recIdents;
                  RAST._IExpr _out670;
                  bool _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out670, out _out671, out _out672);
                  _3062_recursiveGen = _out670;
                  _3063_recOwned = _out671;
                  _3064_recIdents = _out672;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3062_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3063_recOwned;
                  readIdents = _3064_recIdents;
                }
              } else if (_source113.is_Primitive) {
                DAST._IPrimitive _3065___mcc_h876 = _source113.dtor_Primitive_a0;
                {
                  RAST._IExpr _3066_recursiveGen;
                  bool _3067_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3068_recIdents;
                  RAST._IExpr _out673;
                  bool _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675);
                  _3066_recursiveGen = _out673;
                  _3067_recOwned = _out674;
                  _3068_recIdents = _out675;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3066_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3067_recOwned;
                  readIdents = _3068_recIdents;
                }
              } else if (_source113.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3069___mcc_h878 = _source113.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3070_recursiveGen;
                  bool _3071_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3072_recIdents;
                  RAST._IExpr _out676;
                  bool _out677;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out678;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out676, out _out677, out _out678);
                  _3070_recursiveGen = _out676;
                  _3071_recOwned = _out677;
                  _3072_recIdents = _out678;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3070_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3071_recOwned;
                  readIdents = _3072_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3073___mcc_h880 = _source113.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3074_recursiveGen;
                  bool _3075_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3076_recIdents;
                  RAST._IExpr _out679;
                  bool _out680;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out681;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out679, out _out680, out _out681);
                  _3074_recursiveGen = _out679;
                  _3075_recOwned = _out680;
                  _3076_recIdents = _out681;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3074_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3075_recOwned;
                  readIdents = _3076_recIdents;
                }
              }
            } else if (_source85.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3077___mcc_h882 = _source85.dtor_args;
              DAST._IType _3078___mcc_h883 = _source85.dtor_result;
              DAST._IType _source116 = _2297___mcc_h327;
              if (_source116.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3079___mcc_h890 = _source116.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3080___mcc_h891 = _source116.dtor_typeArgs;
                DAST._IResolvedType _3081___mcc_h892 = _source116.dtor_resolved;
                DAST._IResolvedType _source117 = _3081___mcc_h892;
                if (_source117.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3082___mcc_h896 = _source117.dtor_path;
                  {
                    RAST._IExpr _3083_recursiveGen;
                    bool _3084_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3085_recIdents;
                    RAST._IExpr _out682;
                    bool _out683;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out682, out _out683, out _out684);
                    _3083_recursiveGen = _out682;
                    _3084_recOwned = _out683;
                    _3085_recIdents = _out684;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3083_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3084_recOwned;
                    readIdents = _3085_recIdents;
                  }
                } else if (_source117.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3086___mcc_h898 = _source117.dtor_path;
                  {
                    RAST._IExpr _3087_recursiveGen;
                    bool _3088_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3089_recIdents;
                    RAST._IExpr _out685;
                    bool _out686;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out685, out _out686, out _out687);
                    _3087_recursiveGen = _out685;
                    _3088_recOwned = _out686;
                    _3089_recIdents = _out687;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3087_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3088_recOwned;
                    readIdents = _3089_recIdents;
                  }
                } else {
                  DAST._IType _3090___mcc_h900 = _source117.dtor_baseType;
                  DAST._INewtypeRange _3091___mcc_h901 = _source117.dtor_range;
                  bool _3092___mcc_h902 = _source117.dtor_erase;
                  bool _3093_erase = _3092___mcc_h902;
                  DAST._INewtypeRange _3094_range = _3091___mcc_h901;
                  DAST._IType _3095_b = _3090___mcc_h900;
                  {
                    if (object.Equals(_2291_fromTpe, _3095_b)) {
                      RAST._IExpr _3096_recursiveGen;
                      bool _3097_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3098_recIdents;
                      RAST._IExpr _out688;
                      bool _out689;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out690;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out688, out _out689, out _out690);
                      _3096_recursiveGen = _out688;
                      _3097_recOwned = _out689;
                      _3098_recIdents = _out690;
                      Std.Wrappers._IOption<RAST._IType> _3099_potentialRhsType;
                      _3099_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3095_b, _3094_range);
                      Std.Wrappers._IOption<RAST._IType> _source118 = _3099_potentialRhsType;
                      if (_source118.is_None) {
                        if (_3093_erase) {
                          r = _3096_recursiveGen;
                        } else {
                          RAST._IType _3100_rhsType;
                          RAST._IType _out691;
                          _out691 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                          _3100_rhsType = _out691;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3100_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3096_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _3097_recOwned;
                      } else {
                        RAST._IType _3101___mcc_h1263 = _source118.dtor_value;
                        RAST._IType _3102_v = _3101___mcc_h1263;
                        r = RAST.Expr.create_ConversionNum(_3102_v, _3096_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _3098_recIdents;
                    } else {
                      RAST._IExpr _out692;
                      bool _out693;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out694;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _3095_b), _3095_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out692, out _out693, out _out694);
                      r = _out692;
                      isOwned = _out693;
                      readIdents = _out694;
                    }
                  }
                }
              } else if (_source116.is_Nullable) {
                DAST._IType _3103___mcc_h906 = _source116.dtor_Nullable_a0;
                {
                  RAST._IExpr _3104_recursiveGen;
                  bool _3105_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3106_recIdents;
                  RAST._IExpr _out695;
                  bool _out696;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out697;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out695, out _out696, out _out697);
                  _3104_recursiveGen = _out695;
                  _3105_recOwned = _out696;
                  _3106_recIdents = _out697;
                  Dafny.ISequence<Dafny.Rune> _3107_s;
                  _3107_s = (_3104_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_3105_recOwned)) {
                    _3107_s = Dafny.Sequence<Dafny.Rune>.Concat(_3107_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3107_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3107_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3107_s);
                  isOwned = true;
                  readIdents = _3106_recIdents;
                }
              } else if (_source116.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3108___mcc_h908 = _source116.dtor_Tuple_a0;
                {
                  RAST._IExpr _3109_recursiveGen;
                  bool _3110_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3111_recIdents;
                  RAST._IExpr _out698;
                  bool _out699;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out698, out _out699, out _out700);
                  _3109_recursiveGen = _out698;
                  _3110_recOwned = _out699;
                  _3111_recIdents = _out700;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3109_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3110_recOwned;
                  readIdents = _3111_recIdents;
                }
              } else if (_source116.is_Array) {
                DAST._IType _3112___mcc_h910 = _source116.dtor_element;
                BigInteger _3113___mcc_h911 = _source116.dtor_dims;
                {
                  RAST._IExpr _3114_recursiveGen;
                  bool _3115_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3116_recIdents;
                  RAST._IExpr _out701;
                  bool _out702;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out703;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703);
                  _3114_recursiveGen = _out701;
                  _3115_recOwned = _out702;
                  _3116_recIdents = _out703;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3114_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3115_recOwned;
                  readIdents = _3116_recIdents;
                }
              } else if (_source116.is_Seq) {
                DAST._IType _3117___mcc_h914 = _source116.dtor_element;
                {
                  RAST._IExpr _3118_recursiveGen;
                  bool _3119_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3120_recIdents;
                  RAST._IExpr _out704;
                  bool _out705;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out704, out _out705, out _out706);
                  _3118_recursiveGen = _out704;
                  _3119_recOwned = _out705;
                  _3120_recIdents = _out706;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3118_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3119_recOwned;
                  readIdents = _3120_recIdents;
                }
              } else if (_source116.is_Set) {
                DAST._IType _3121___mcc_h916 = _source116.dtor_element;
                {
                  RAST._IExpr _3122_recursiveGen;
                  bool _3123_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3124_recIdents;
                  RAST._IExpr _out707;
                  bool _out708;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out707, out _out708, out _out709);
                  _3122_recursiveGen = _out707;
                  _3123_recOwned = _out708;
                  _3124_recIdents = _out709;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3122_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3123_recOwned;
                  readIdents = _3124_recIdents;
                }
              } else if (_source116.is_Multiset) {
                DAST._IType _3125___mcc_h918 = _source116.dtor_element;
                {
                  RAST._IExpr _3126_recursiveGen;
                  bool _3127_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3128_recIdents;
                  RAST._IExpr _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out710, out _out711, out _out712);
                  _3126_recursiveGen = _out710;
                  _3127_recOwned = _out711;
                  _3128_recIdents = _out712;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3126_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3127_recOwned;
                  readIdents = _3128_recIdents;
                }
              } else if (_source116.is_Map) {
                DAST._IType _3129___mcc_h920 = _source116.dtor_key;
                DAST._IType _3130___mcc_h921 = _source116.dtor_value;
                {
                  RAST._IExpr _3131_recursiveGen;
                  bool _3132_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3133_recIdents;
                  RAST._IExpr _out713;
                  bool _out714;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out715;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715);
                  _3131_recursiveGen = _out713;
                  _3132_recOwned = _out714;
                  _3133_recIdents = _out715;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3131_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3132_recOwned;
                  readIdents = _3133_recIdents;
                }
              } else if (_source116.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3134___mcc_h924 = _source116.dtor_args;
                DAST._IType _3135___mcc_h925 = _source116.dtor_result;
                {
                  RAST._IExpr _3136_recursiveGen;
                  bool _3137_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3138_recIdents;
                  RAST._IExpr _out716;
                  bool _out717;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out718;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out716, out _out717, out _out718);
                  _3136_recursiveGen = _out716;
                  _3137_recOwned = _out717;
                  _3138_recIdents = _out718;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3136_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3137_recOwned;
                  readIdents = _3138_recIdents;
                }
              } else if (_source116.is_Primitive) {
                DAST._IPrimitive _3139___mcc_h928 = _source116.dtor_Primitive_a0;
                {
                  RAST._IExpr _3140_recursiveGen;
                  bool _3141_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3142_recIdents;
                  RAST._IExpr _out719;
                  bool _out720;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out719, out _out720, out _out721);
                  _3140_recursiveGen = _out719;
                  _3141_recOwned = _out720;
                  _3142_recIdents = _out721;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3140_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3141_recOwned;
                  readIdents = _3142_recIdents;
                }
              } else if (_source116.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3143___mcc_h930 = _source116.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3144_recursiveGen;
                  bool _3145_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3146_recIdents;
                  RAST._IExpr _out722;
                  bool _out723;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out722, out _out723, out _out724);
                  _3144_recursiveGen = _out722;
                  _3145_recOwned = _out723;
                  _3146_recIdents = _out724;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3144_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3145_recOwned;
                  readIdents = _3146_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3147___mcc_h932 = _source116.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3148_recursiveGen;
                  bool _3149_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3150_recIdents;
                  RAST._IExpr _out725;
                  bool _out726;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out727;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out725, out _out726, out _out727);
                  _3148_recursiveGen = _out725;
                  _3149_recOwned = _out726;
                  _3150_recIdents = _out727;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3148_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3149_recOwned;
                  readIdents = _3150_recIdents;
                }
              }
            } else if (_source85.is_Primitive) {
              DAST._IPrimitive _3151___mcc_h934 = _source85.dtor_Primitive_a0;
              DAST._IPrimitive _source119 = _3151___mcc_h934;
              if (_source119.is_Int) {
                DAST._IType _source120 = _2297___mcc_h327;
                if (_source120.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3152___mcc_h938 = _source120.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3153___mcc_h939 = _source120.dtor_typeArgs;
                  DAST._IResolvedType _3154___mcc_h940 = _source120.dtor_resolved;
                  DAST._IResolvedType _source121 = _3154___mcc_h940;
                  if (_source121.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3155___mcc_h944 = _source121.dtor_path;
                    {
                      RAST._IExpr _3156_recursiveGen;
                      bool _3157_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3158_recIdents;
                      RAST._IExpr _out728;
                      bool _out729;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out730;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out728, out _out729, out _out730);
                      _3156_recursiveGen = _out728;
                      _3157_recOwned = _out729;
                      _3158_recIdents = _out730;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3156_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3157_recOwned;
                      readIdents = _3158_recIdents;
                    }
                  } else if (_source121.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3159___mcc_h946 = _source121.dtor_path;
                    {
                      RAST._IExpr _3160_recursiveGen;
                      bool _3161_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3162_recIdents;
                      RAST._IExpr _out731;
                      bool _out732;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out731, out _out732, out _out733);
                      _3160_recursiveGen = _out731;
                      _3161_recOwned = _out732;
                      _3162_recIdents = _out733;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3160_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3161_recOwned;
                      readIdents = _3162_recIdents;
                    }
                  } else {
                    DAST._IType _3163___mcc_h948 = _source121.dtor_baseType;
                    DAST._INewtypeRange _3164___mcc_h949 = _source121.dtor_range;
                    bool _3165___mcc_h950 = _source121.dtor_erase;
                    bool _3166_erase = _3165___mcc_h950;
                    DAST._INewtypeRange _3167_range = _3164___mcc_h949;
                    DAST._IType _3168_b = _3163___mcc_h948;
                    {
                      if (object.Equals(_2291_fromTpe, _3168_b)) {
                        RAST._IExpr _3169_recursiveGen;
                        bool _3170_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3171_recIdents;
                        RAST._IExpr _out734;
                        bool _out735;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736);
                        _3169_recursiveGen = _out734;
                        _3170_recOwned = _out735;
                        _3171_recIdents = _out736;
                        Std.Wrappers._IOption<RAST._IType> _3172_potentialRhsType;
                        _3172_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3168_b, _3167_range);
                        Std.Wrappers._IOption<RAST._IType> _source122 = _3172_potentialRhsType;
                        if (_source122.is_None) {
                          if (_3166_erase) {
                            r = _3169_recursiveGen;
                          } else {
                            RAST._IType _3173_rhsType;
                            RAST._IType _out737;
                            _out737 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                            _3173_rhsType = _out737;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3173_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3169_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3170_recOwned;
                        } else {
                          RAST._IType _3174___mcc_h1264 = _source122.dtor_value;
                          RAST._IType _3175_v = _3174___mcc_h1264;
                          r = RAST.Expr.create_ConversionNum(_3175_v, _3169_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3171_recIdents;
                      } else {
                        RAST._IExpr _out738;
                        bool _out739;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _3168_b), _3168_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out738, out _out739, out _out740);
                        r = _out738;
                        isOwned = _out739;
                        readIdents = _out740;
                      }
                    }
                  }
                } else if (_source120.is_Nullable) {
                  DAST._IType _3176___mcc_h954 = _source120.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3177_recursiveGen;
                    bool _3178_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3179_recIdents;
                    RAST._IExpr _out741;
                    bool _out742;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out743;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out741, out _out742, out _out743);
                    _3177_recursiveGen = _out741;
                    _3178_recOwned = _out742;
                    _3179_recIdents = _out743;
                    Dafny.ISequence<Dafny.Rune> _3180_s;
                    _3180_s = (_3177_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3178_recOwned)) {
                      _3180_s = Dafny.Sequence<Dafny.Rune>.Concat(_3180_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3180_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3180_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3180_s);
                    isOwned = true;
                    readIdents = _3179_recIdents;
                  }
                } else if (_source120.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3181___mcc_h956 = _source120.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3182_recursiveGen;
                    bool _3183_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3184_recIdents;
                    RAST._IExpr _out744;
                    bool _out745;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out746;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out744, out _out745, out _out746);
                    _3182_recursiveGen = _out744;
                    _3183_recOwned = _out745;
                    _3184_recIdents = _out746;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3182_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3183_recOwned;
                    readIdents = _3184_recIdents;
                  }
                } else if (_source120.is_Array) {
                  DAST._IType _3185___mcc_h958 = _source120.dtor_element;
                  BigInteger _3186___mcc_h959 = _source120.dtor_dims;
                  {
                    RAST._IExpr _3187_recursiveGen;
                    bool _3188_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3189_recIdents;
                    RAST._IExpr _out747;
                    bool _out748;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out747, out _out748, out _out749);
                    _3187_recursiveGen = _out747;
                    _3188_recOwned = _out748;
                    _3189_recIdents = _out749;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3187_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3188_recOwned;
                    readIdents = _3189_recIdents;
                  }
                } else if (_source120.is_Seq) {
                  DAST._IType _3190___mcc_h962 = _source120.dtor_element;
                  {
                    RAST._IExpr _3191_recursiveGen;
                    bool _3192_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3193_recIdents;
                    RAST._IExpr _out750;
                    bool _out751;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out752;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out750, out _out751, out _out752);
                    _3191_recursiveGen = _out750;
                    _3192_recOwned = _out751;
                    _3193_recIdents = _out752;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3191_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3192_recOwned;
                    readIdents = _3193_recIdents;
                  }
                } else if (_source120.is_Set) {
                  DAST._IType _3194___mcc_h964 = _source120.dtor_element;
                  {
                    RAST._IExpr _3195_recursiveGen;
                    bool _3196_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3197_recIdents;
                    RAST._IExpr _out753;
                    bool _out754;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out755;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out753, out _out754, out _out755);
                    _3195_recursiveGen = _out753;
                    _3196_recOwned = _out754;
                    _3197_recIdents = _out755;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3195_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3196_recOwned;
                    readIdents = _3197_recIdents;
                  }
                } else if (_source120.is_Multiset) {
                  DAST._IType _3198___mcc_h966 = _source120.dtor_element;
                  {
                    RAST._IExpr _3199_recursiveGen;
                    bool _3200_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3201_recIdents;
                    RAST._IExpr _out756;
                    bool _out757;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out758;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out756, out _out757, out _out758);
                    _3199_recursiveGen = _out756;
                    _3200_recOwned = _out757;
                    _3201_recIdents = _out758;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3199_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3200_recOwned;
                    readIdents = _3201_recIdents;
                  }
                } else if (_source120.is_Map) {
                  DAST._IType _3202___mcc_h968 = _source120.dtor_key;
                  DAST._IType _3203___mcc_h969 = _source120.dtor_value;
                  {
                    RAST._IExpr _3204_recursiveGen;
                    bool _3205_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3206_recIdents;
                    RAST._IExpr _out759;
                    bool _out760;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out759, out _out760, out _out761);
                    _3204_recursiveGen = _out759;
                    _3205_recOwned = _out760;
                    _3206_recIdents = _out761;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3204_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3205_recOwned;
                    readIdents = _3206_recIdents;
                  }
                } else if (_source120.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3207___mcc_h972 = _source120.dtor_args;
                  DAST._IType _3208___mcc_h973 = _source120.dtor_result;
                  {
                    RAST._IExpr _3209_recursiveGen;
                    bool _3210_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3211_recIdents;
                    RAST._IExpr _out762;
                    bool _out763;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out764;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764);
                    _3209_recursiveGen = _out762;
                    _3210_recOwned = _out763;
                    _3211_recIdents = _out764;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3209_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3210_recOwned;
                    readIdents = _3211_recIdents;
                  }
                } else if (_source120.is_Primitive) {
                  DAST._IPrimitive _3212___mcc_h976 = _source120.dtor_Primitive_a0;
                  DAST._IPrimitive _source123 = _3212___mcc_h976;
                  if (_source123.is_Int) {
                    {
                      RAST._IExpr _3213_recursiveGen;
                      bool _3214_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3215_recIdents;
                      RAST._IExpr _out765;
                      bool _out766;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out767;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out765, out _out766, out _out767);
                      _3213_recursiveGen = _out765;
                      _3214_recOwned = _out766;
                      _3215_recIdents = _out767;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3213_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3214_recOwned;
                      readIdents = _3215_recIdents;
                    }
                  } else if (_source123.is_Real) {
                    {
                      RAST._IExpr _3216_recursiveGen;
                      bool _3217___v54;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3218_recIdents;
                      RAST._IExpr _out768;
                      bool _out769;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, true, out _out768, out _out769, out _out770);
                      _3216_recursiveGen = _out768;
                      _3217___v54 = _out769;
                      _3218_recIdents = _out770;
                      r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_3216_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                      isOwned = true;
                      readIdents = _3218_recIdents;
                    }
                  } else if (_source123.is_String) {
                    {
                      RAST._IExpr _3219_recursiveGen;
                      bool _3220_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3221_recIdents;
                      RAST._IExpr _out771;
                      bool _out772;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out771, out _out772, out _out773);
                      _3219_recursiveGen = _out771;
                      _3220_recOwned = _out772;
                      _3221_recIdents = _out773;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3219_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3220_recOwned;
                      readIdents = _3221_recIdents;
                    }
                  } else if (_source123.is_Bool) {
                    {
                      RAST._IExpr _3222_recursiveGen;
                      bool _3223_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3224_recIdents;
                      RAST._IExpr _out774;
                      bool _out775;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out776;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776);
                      _3222_recursiveGen = _out774;
                      _3223_recOwned = _out775;
                      _3224_recIdents = _out776;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3222_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3223_recOwned;
                      readIdents = _3224_recIdents;
                    }
                  } else {
                    {
                      RAST._IType _3225_rhsType;
                      RAST._IType _out777;
                      _out777 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                      _3225_rhsType = _out777;
                      RAST._IExpr _3226_recursiveGen;
                      bool _3227___v60;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3228_recIdents;
                      RAST._IExpr _out778;
                      bool _out779;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out780;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, true, out _out778, out _out779, out _out780);
                      _3226_recursiveGen = _out778;
                      _3227___v60 = _out779;
                      _3228_recIdents = _out780;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_3226_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                      isOwned = true;
                      readIdents = _3228_recIdents;
                    }
                  }
                } else if (_source120.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3229___mcc_h978 = _source120.dtor_Passthrough_a0;
                  {
                    RAST._IType _3230_rhsType;
                    RAST._IType _out781;
                    _out781 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                    _3230_rhsType = _out781;
                    RAST._IExpr _3231_recursiveGen;
                    bool _3232___v57;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3233_recIdents;
                    RAST._IExpr _out782;
                    bool _out783;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out784;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, true, out _out782, out _out783, out _out784);
                    _3231_recursiveGen = _out782;
                    _3232___v57 = _out783;
                    _3233_recIdents = _out784;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_3230_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_3231_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                    isOwned = true;
                    readIdents = _3233_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3234___mcc_h980 = _source120.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3235_recursiveGen;
                    bool _3236_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3237_recIdents;
                    RAST._IExpr _out785;
                    bool _out786;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out785, out _out786, out _out787);
                    _3235_recursiveGen = _out785;
                    _3236_recOwned = _out786;
                    _3237_recIdents = _out787;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3235_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3236_recOwned;
                    readIdents = _3237_recIdents;
                  }
                }
              } else if (_source119.is_Real) {
                DAST._IType _source124 = _2297___mcc_h327;
                if (_source124.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3238___mcc_h982 = _source124.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3239___mcc_h983 = _source124.dtor_typeArgs;
                  DAST._IResolvedType _3240___mcc_h984 = _source124.dtor_resolved;
                  DAST._IResolvedType _source125 = _3240___mcc_h984;
                  if (_source125.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3241___mcc_h988 = _source125.dtor_path;
                    {
                      RAST._IExpr _3242_recursiveGen;
                      bool _3243_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3244_recIdents;
                      RAST._IExpr _out788;
                      bool _out789;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out788, out _out789, out _out790);
                      _3242_recursiveGen = _out788;
                      _3243_recOwned = _out789;
                      _3244_recIdents = _out790;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3242_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3243_recOwned;
                      readIdents = _3244_recIdents;
                    }
                  } else if (_source125.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3245___mcc_h990 = _source125.dtor_path;
                    {
                      RAST._IExpr _3246_recursiveGen;
                      bool _3247_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3248_recIdents;
                      RAST._IExpr _out791;
                      bool _out792;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793);
                      _3246_recursiveGen = _out791;
                      _3247_recOwned = _out792;
                      _3248_recIdents = _out793;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3246_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3247_recOwned;
                      readIdents = _3248_recIdents;
                    }
                  } else {
                    DAST._IType _3249___mcc_h992 = _source125.dtor_baseType;
                    DAST._INewtypeRange _3250___mcc_h993 = _source125.dtor_range;
                    bool _3251___mcc_h994 = _source125.dtor_erase;
                    bool _3252_erase = _3251___mcc_h994;
                    DAST._INewtypeRange _3253_range = _3250___mcc_h993;
                    DAST._IType _3254_b = _3249___mcc_h992;
                    {
                      if (object.Equals(_2291_fromTpe, _3254_b)) {
                        RAST._IExpr _3255_recursiveGen;
                        bool _3256_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3257_recIdents;
                        RAST._IExpr _out794;
                        bool _out795;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out796;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out794, out _out795, out _out796);
                        _3255_recursiveGen = _out794;
                        _3256_recOwned = _out795;
                        _3257_recIdents = _out796;
                        Std.Wrappers._IOption<RAST._IType> _3258_potentialRhsType;
                        _3258_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3254_b, _3253_range);
                        Std.Wrappers._IOption<RAST._IType> _source126 = _3258_potentialRhsType;
                        if (_source126.is_None) {
                          if (_3252_erase) {
                            r = _3255_recursiveGen;
                          } else {
                            RAST._IType _3259_rhsType;
                            RAST._IType _out797;
                            _out797 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                            _3259_rhsType = _out797;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3259_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3255_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3256_recOwned;
                        } else {
                          RAST._IType _3260___mcc_h1265 = _source126.dtor_value;
                          RAST._IType _3261_v = _3260___mcc_h1265;
                          r = RAST.Expr.create_ConversionNum(_3261_v, _3255_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3257_recIdents;
                      } else {
                        RAST._IExpr _out798;
                        bool _out799;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out800;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _3254_b), _3254_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out798, out _out799, out _out800);
                        r = _out798;
                        isOwned = _out799;
                        readIdents = _out800;
                      }
                    }
                  }
                } else if (_source124.is_Nullable) {
                  DAST._IType _3262___mcc_h998 = _source124.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3263_recursiveGen;
                    bool _3264_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3265_recIdents;
                    RAST._IExpr _out801;
                    bool _out802;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out803;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out801, out _out802, out _out803);
                    _3263_recursiveGen = _out801;
                    _3264_recOwned = _out802;
                    _3265_recIdents = _out803;
                    Dafny.ISequence<Dafny.Rune> _3266_s;
                    _3266_s = (_3263_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3264_recOwned)) {
                      _3266_s = Dafny.Sequence<Dafny.Rune>.Concat(_3266_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3266_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3266_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3266_s);
                    isOwned = true;
                    readIdents = _3265_recIdents;
                  }
                } else if (_source124.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3267___mcc_h1000 = _source124.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3268_recursiveGen;
                    bool _3269_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3270_recIdents;
                    RAST._IExpr _out804;
                    bool _out805;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out804, out _out805, out _out806);
                    _3268_recursiveGen = _out804;
                    _3269_recOwned = _out805;
                    _3270_recIdents = _out806;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3268_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3269_recOwned;
                    readIdents = _3270_recIdents;
                  }
                } else if (_source124.is_Array) {
                  DAST._IType _3271___mcc_h1002 = _source124.dtor_element;
                  BigInteger _3272___mcc_h1003 = _source124.dtor_dims;
                  {
                    RAST._IExpr _3273_recursiveGen;
                    bool _3274_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3275_recIdents;
                    RAST._IExpr _out807;
                    bool _out808;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out807, out _out808, out _out809);
                    _3273_recursiveGen = _out807;
                    _3274_recOwned = _out808;
                    _3275_recIdents = _out809;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3273_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3274_recOwned;
                    readIdents = _3275_recIdents;
                  }
                } else if (_source124.is_Seq) {
                  DAST._IType _3276___mcc_h1006 = _source124.dtor_element;
                  {
                    RAST._IExpr _3277_recursiveGen;
                    bool _3278_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3279_recIdents;
                    RAST._IExpr _out810;
                    bool _out811;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out810, out _out811, out _out812);
                    _3277_recursiveGen = _out810;
                    _3278_recOwned = _out811;
                    _3279_recIdents = _out812;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3277_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3278_recOwned;
                    readIdents = _3279_recIdents;
                  }
                } else if (_source124.is_Set) {
                  DAST._IType _3280___mcc_h1008 = _source124.dtor_element;
                  {
                    RAST._IExpr _3281_recursiveGen;
                    bool _3282_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3283_recIdents;
                    RAST._IExpr _out813;
                    bool _out814;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out815;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out813, out _out814, out _out815);
                    _3281_recursiveGen = _out813;
                    _3282_recOwned = _out814;
                    _3283_recIdents = _out815;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3281_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3282_recOwned;
                    readIdents = _3283_recIdents;
                  }
                } else if (_source124.is_Multiset) {
                  DAST._IType _3284___mcc_h1010 = _source124.dtor_element;
                  {
                    RAST._IExpr _3285_recursiveGen;
                    bool _3286_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3287_recIdents;
                    RAST._IExpr _out816;
                    bool _out817;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out816, out _out817, out _out818);
                    _3285_recursiveGen = _out816;
                    _3286_recOwned = _out817;
                    _3287_recIdents = _out818;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3285_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3286_recOwned;
                    readIdents = _3287_recIdents;
                  }
                } else if (_source124.is_Map) {
                  DAST._IType _3288___mcc_h1012 = _source124.dtor_key;
                  DAST._IType _3289___mcc_h1013 = _source124.dtor_value;
                  {
                    RAST._IExpr _3290_recursiveGen;
                    bool _3291_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3292_recIdents;
                    RAST._IExpr _out819;
                    bool _out820;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out821;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821);
                    _3290_recursiveGen = _out819;
                    _3291_recOwned = _out820;
                    _3292_recIdents = _out821;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3290_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3291_recOwned;
                    readIdents = _3292_recIdents;
                  }
                } else if (_source124.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3293___mcc_h1016 = _source124.dtor_args;
                  DAST._IType _3294___mcc_h1017 = _source124.dtor_result;
                  {
                    RAST._IExpr _3295_recursiveGen;
                    bool _3296_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3297_recIdents;
                    RAST._IExpr _out822;
                    bool _out823;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out824;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out822, out _out823, out _out824);
                    _3295_recursiveGen = _out822;
                    _3296_recOwned = _out823;
                    _3297_recIdents = _out824;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3295_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3296_recOwned;
                    readIdents = _3297_recIdents;
                  }
                } else if (_source124.is_Primitive) {
                  DAST._IPrimitive _3298___mcc_h1020 = _source124.dtor_Primitive_a0;
                  DAST._IPrimitive _source127 = _3298___mcc_h1020;
                  if (_source127.is_Int) {
                    {
                      RAST._IExpr _3299_recursiveGen;
                      bool _3300___v55;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3301_recIdents;
                      RAST._IExpr _out825;
                      bool _out826;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, false, out _out825, out _out826, out _out827);
                      _3299_recursiveGen = _out825;
                      _3300___v55 = _out826;
                      _3301_recIdents = _out827;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_3299_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      isOwned = true;
                      readIdents = _3301_recIdents;
                    }
                  } else if (_source127.is_Real) {
                    {
                      RAST._IExpr _3302_recursiveGen;
                      bool _3303_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3304_recIdents;
                      RAST._IExpr _out828;
                      bool _out829;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out828, out _out829, out _out830);
                      _3302_recursiveGen = _out828;
                      _3303_recOwned = _out829;
                      _3304_recIdents = _out830;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3302_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3303_recOwned;
                      readIdents = _3304_recIdents;
                    }
                  } else if (_source127.is_String) {
                    {
                      RAST._IExpr _3305_recursiveGen;
                      bool _3306_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3307_recIdents;
                      RAST._IExpr _out831;
                      bool _out832;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out833;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833);
                      _3305_recursiveGen = _out831;
                      _3306_recOwned = _out832;
                      _3307_recIdents = _out833;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3305_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3306_recOwned;
                      readIdents = _3307_recIdents;
                    }
                  } else if (_source127.is_Bool) {
                    {
                      RAST._IExpr _3308_recursiveGen;
                      bool _3309_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3310_recIdents;
                      RAST._IExpr _out834;
                      bool _out835;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out836;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out834, out _out835, out _out836);
                      _3308_recursiveGen = _out834;
                      _3309_recOwned = _out835;
                      _3310_recIdents = _out836;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3308_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3309_recOwned;
                      readIdents = _3310_recIdents;
                    }
                  } else {
                    {
                      RAST._IExpr _3311_recursiveGen;
                      bool _3312_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3313_recIdents;
                      RAST._IExpr _out837;
                      bool _out838;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out837, out _out838, out _out839);
                      _3311_recursiveGen = _out837;
                      _3312_recOwned = _out838;
                      _3313_recIdents = _out839;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3311_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3312_recOwned;
                      readIdents = _3313_recIdents;
                    }
                  }
                } else if (_source124.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3314___mcc_h1022 = _source124.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3315_recursiveGen;
                    bool _3316_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3317_recIdents;
                    RAST._IExpr _out840;
                    bool _out841;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out840, out _out841, out _out842);
                    _3315_recursiveGen = _out840;
                    _3316_recOwned = _out841;
                    _3317_recIdents = _out842;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3315_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3316_recOwned;
                    readIdents = _3317_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3318___mcc_h1024 = _source124.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3319_recursiveGen;
                    bool _3320_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3321_recIdents;
                    RAST._IExpr _out843;
                    bool _out844;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out845;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845);
                    _3319_recursiveGen = _out843;
                    _3320_recOwned = _out844;
                    _3321_recIdents = _out845;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3319_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3320_recOwned;
                    readIdents = _3321_recIdents;
                  }
                }
              } else if (_source119.is_String) {
                DAST._IType _source128 = _2297___mcc_h327;
                if (_source128.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3322___mcc_h1026 = _source128.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3323___mcc_h1027 = _source128.dtor_typeArgs;
                  DAST._IResolvedType _3324___mcc_h1028 = _source128.dtor_resolved;
                  DAST._IResolvedType _source129 = _3324___mcc_h1028;
                  if (_source129.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3325___mcc_h1032 = _source129.dtor_path;
                    {
                      RAST._IExpr _3326_recursiveGen;
                      bool _3327_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3328_recIdents;
                      RAST._IExpr _out846;
                      bool _out847;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out848;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out846, out _out847, out _out848);
                      _3326_recursiveGen = _out846;
                      _3327_recOwned = _out847;
                      _3328_recIdents = _out848;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3326_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3327_recOwned;
                      readIdents = _3328_recIdents;
                    }
                  } else if (_source129.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3329___mcc_h1034 = _source129.dtor_path;
                    {
                      RAST._IExpr _3330_recursiveGen;
                      bool _3331_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3332_recIdents;
                      RAST._IExpr _out849;
                      bool _out850;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out849, out _out850, out _out851);
                      _3330_recursiveGen = _out849;
                      _3331_recOwned = _out850;
                      _3332_recIdents = _out851;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3330_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3331_recOwned;
                      readIdents = _3332_recIdents;
                    }
                  } else {
                    DAST._IType _3333___mcc_h1036 = _source129.dtor_baseType;
                    DAST._INewtypeRange _3334___mcc_h1037 = _source129.dtor_range;
                    bool _3335___mcc_h1038 = _source129.dtor_erase;
                    bool _3336_erase = _3335___mcc_h1038;
                    DAST._INewtypeRange _3337_range = _3334___mcc_h1037;
                    DAST._IType _3338_b = _3333___mcc_h1036;
                    {
                      if (object.Equals(_2291_fromTpe, _3338_b)) {
                        RAST._IExpr _3339_recursiveGen;
                        bool _3340_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3341_recIdents;
                        RAST._IExpr _out852;
                        bool _out853;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854);
                        _3339_recursiveGen = _out852;
                        _3340_recOwned = _out853;
                        _3341_recIdents = _out854;
                        Std.Wrappers._IOption<RAST._IType> _3342_potentialRhsType;
                        _3342_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3338_b, _3337_range);
                        Std.Wrappers._IOption<RAST._IType> _source130 = _3342_potentialRhsType;
                        if (_source130.is_None) {
                          if (_3336_erase) {
                            r = _3339_recursiveGen;
                          } else {
                            RAST._IType _3343_rhsType;
                            RAST._IType _out855;
                            _out855 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                            _3343_rhsType = _out855;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3343_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3339_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3340_recOwned;
                        } else {
                          RAST._IType _3344___mcc_h1266 = _source130.dtor_value;
                          RAST._IType _3345_v = _3344___mcc_h1266;
                          r = RAST.Expr.create_ConversionNum(_3345_v, _3339_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3341_recIdents;
                      } else {
                        RAST._IExpr _out856;
                        bool _out857;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _3338_b), _3338_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out856, out _out857, out _out858);
                        r = _out856;
                        isOwned = _out857;
                        readIdents = _out858;
                      }
                    }
                  }
                } else if (_source128.is_Nullable) {
                  DAST._IType _3346___mcc_h1042 = _source128.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3347_recursiveGen;
                    bool _3348_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3349_recIdents;
                    RAST._IExpr _out859;
                    bool _out860;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out861;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out859, out _out860, out _out861);
                    _3347_recursiveGen = _out859;
                    _3348_recOwned = _out860;
                    _3349_recIdents = _out861;
                    Dafny.ISequence<Dafny.Rune> _3350_s;
                    _3350_s = (_3347_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3348_recOwned)) {
                      _3350_s = Dafny.Sequence<Dafny.Rune>.Concat(_3350_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3350_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3350_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3350_s);
                    isOwned = true;
                    readIdents = _3349_recIdents;
                  }
                } else if (_source128.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3351___mcc_h1044 = _source128.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3352_recursiveGen;
                    bool _3353_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3354_recIdents;
                    RAST._IExpr _out862;
                    bool _out863;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out864;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out862, out _out863, out _out864);
                    _3352_recursiveGen = _out862;
                    _3353_recOwned = _out863;
                    _3354_recIdents = _out864;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3352_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3353_recOwned;
                    readIdents = _3354_recIdents;
                  }
                } else if (_source128.is_Array) {
                  DAST._IType _3355___mcc_h1046 = _source128.dtor_element;
                  BigInteger _3356___mcc_h1047 = _source128.dtor_dims;
                  {
                    RAST._IExpr _3357_recursiveGen;
                    bool _3358_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3359_recIdents;
                    RAST._IExpr _out865;
                    bool _out866;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out865, out _out866, out _out867);
                    _3357_recursiveGen = _out865;
                    _3358_recOwned = _out866;
                    _3359_recIdents = _out867;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3357_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3358_recOwned;
                    readIdents = _3359_recIdents;
                  }
                } else if (_source128.is_Seq) {
                  DAST._IType _3360___mcc_h1050 = _source128.dtor_element;
                  {
                    RAST._IExpr _3361_recursiveGen;
                    bool _3362_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3363_recIdents;
                    RAST._IExpr _out868;
                    bool _out869;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out868, out _out869, out _out870);
                    _3361_recursiveGen = _out868;
                    _3362_recOwned = _out869;
                    _3363_recIdents = _out870;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3361_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3362_recOwned;
                    readIdents = _3363_recIdents;
                  }
                } else if (_source128.is_Set) {
                  DAST._IType _3364___mcc_h1052 = _source128.dtor_element;
                  {
                    RAST._IExpr _3365_recursiveGen;
                    bool _3366_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3367_recIdents;
                    RAST._IExpr _out871;
                    bool _out872;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out873;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out871, out _out872, out _out873);
                    _3365_recursiveGen = _out871;
                    _3366_recOwned = _out872;
                    _3367_recIdents = _out873;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3365_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3366_recOwned;
                    readIdents = _3367_recIdents;
                  }
                } else if (_source128.is_Multiset) {
                  DAST._IType _3368___mcc_h1054 = _source128.dtor_element;
                  {
                    RAST._IExpr _3369_recursiveGen;
                    bool _3370_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3371_recIdents;
                    RAST._IExpr _out874;
                    bool _out875;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out876;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out874, out _out875, out _out876);
                    _3369_recursiveGen = _out874;
                    _3370_recOwned = _out875;
                    _3371_recIdents = _out876;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3369_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3370_recOwned;
                    readIdents = _3371_recIdents;
                  }
                } else if (_source128.is_Map) {
                  DAST._IType _3372___mcc_h1056 = _source128.dtor_key;
                  DAST._IType _3373___mcc_h1057 = _source128.dtor_value;
                  {
                    RAST._IExpr _3374_recursiveGen;
                    bool _3375_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3376_recIdents;
                    RAST._IExpr _out877;
                    bool _out878;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out877, out _out878, out _out879);
                    _3374_recursiveGen = _out877;
                    _3375_recOwned = _out878;
                    _3376_recIdents = _out879;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3374_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3375_recOwned;
                    readIdents = _3376_recIdents;
                  }
                } else if (_source128.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3377___mcc_h1060 = _source128.dtor_args;
                  DAST._IType _3378___mcc_h1061 = _source128.dtor_result;
                  {
                    RAST._IExpr _3379_recursiveGen;
                    bool _3380_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3381_recIdents;
                    RAST._IExpr _out880;
                    bool _out881;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out882;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882);
                    _3379_recursiveGen = _out880;
                    _3380_recOwned = _out881;
                    _3381_recIdents = _out882;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3379_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3380_recOwned;
                    readIdents = _3381_recIdents;
                  }
                } else if (_source128.is_Primitive) {
                  DAST._IPrimitive _3382___mcc_h1064 = _source128.dtor_Primitive_a0;
                  {
                    RAST._IExpr _3383_recursiveGen;
                    bool _3384_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3385_recIdents;
                    RAST._IExpr _out883;
                    bool _out884;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out885;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out883, out _out884, out _out885);
                    _3383_recursiveGen = _out883;
                    _3384_recOwned = _out884;
                    _3385_recIdents = _out885;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3383_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3384_recOwned;
                    readIdents = _3385_recIdents;
                  }
                } else if (_source128.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3386___mcc_h1066 = _source128.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3387_recursiveGen;
                    bool _3388_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3389_recIdents;
                    RAST._IExpr _out886;
                    bool _out887;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out886, out _out887, out _out888);
                    _3387_recursiveGen = _out886;
                    _3388_recOwned = _out887;
                    _3389_recIdents = _out888;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3387_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3388_recOwned;
                    readIdents = _3389_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3390___mcc_h1068 = _source128.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3391_recursiveGen;
                    bool _3392_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3393_recIdents;
                    RAST._IExpr _out889;
                    bool _out890;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out889, out _out890, out _out891);
                    _3391_recursiveGen = _out889;
                    _3392_recOwned = _out890;
                    _3393_recIdents = _out891;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3391_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3392_recOwned;
                    readIdents = _3393_recIdents;
                  }
                }
              } else if (_source119.is_Bool) {
                DAST._IType _source131 = _2297___mcc_h327;
                if (_source131.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3394___mcc_h1070 = _source131.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3395___mcc_h1071 = _source131.dtor_typeArgs;
                  DAST._IResolvedType _3396___mcc_h1072 = _source131.dtor_resolved;
                  DAST._IResolvedType _source132 = _3396___mcc_h1072;
                  if (_source132.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3397___mcc_h1076 = _source132.dtor_path;
                    {
                      RAST._IExpr _3398_recursiveGen;
                      bool _3399_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3400_recIdents;
                      RAST._IExpr _out892;
                      bool _out893;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out894;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894);
                      _3398_recursiveGen = _out892;
                      _3399_recOwned = _out893;
                      _3400_recIdents = _out894;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3398_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3399_recOwned;
                      readIdents = _3400_recIdents;
                    }
                  } else if (_source132.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3401___mcc_h1078 = _source132.dtor_path;
                    {
                      RAST._IExpr _3402_recursiveGen;
                      bool _3403_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3404_recIdents;
                      RAST._IExpr _out895;
                      bool _out896;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out897;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out895, out _out896, out _out897);
                      _3402_recursiveGen = _out895;
                      _3403_recOwned = _out896;
                      _3404_recIdents = _out897;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3402_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3403_recOwned;
                      readIdents = _3404_recIdents;
                    }
                  } else {
                    DAST._IType _3405___mcc_h1080 = _source132.dtor_baseType;
                    DAST._INewtypeRange _3406___mcc_h1081 = _source132.dtor_range;
                    bool _3407___mcc_h1082 = _source132.dtor_erase;
                    bool _3408_erase = _3407___mcc_h1082;
                    DAST._INewtypeRange _3409_range = _3406___mcc_h1081;
                    DAST._IType _3410_b = _3405___mcc_h1080;
                    {
                      if (object.Equals(_2291_fromTpe, _3410_b)) {
                        RAST._IExpr _3411_recursiveGen;
                        bool _3412_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3413_recIdents;
                        RAST._IExpr _out898;
                        bool _out899;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out900;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out898, out _out899, out _out900);
                        _3411_recursiveGen = _out898;
                        _3412_recOwned = _out899;
                        _3413_recIdents = _out900;
                        Std.Wrappers._IOption<RAST._IType> _3414_potentialRhsType;
                        _3414_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3410_b, _3409_range);
                        Std.Wrappers._IOption<RAST._IType> _source133 = _3414_potentialRhsType;
                        if (_source133.is_None) {
                          if (_3408_erase) {
                            r = _3411_recursiveGen;
                          } else {
                            RAST._IType _3415_rhsType;
                            RAST._IType _out901;
                            _out901 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                            _3415_rhsType = _out901;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3415_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3411_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3412_recOwned;
                        } else {
                          RAST._IType _3416___mcc_h1267 = _source133.dtor_value;
                          RAST._IType _3417_v = _3416___mcc_h1267;
                          r = RAST.Expr.create_ConversionNum(_3417_v, _3411_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3413_recIdents;
                      } else {
                        RAST._IExpr _out902;
                        bool _out903;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _3410_b), _3410_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out902, out _out903, out _out904);
                        r = _out902;
                        isOwned = _out903;
                        readIdents = _out904;
                      }
                    }
                  }
                } else if (_source131.is_Nullable) {
                  DAST._IType _3418___mcc_h1086 = _source131.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3419_recursiveGen;
                    bool _3420_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3421_recIdents;
                    RAST._IExpr _out905;
                    bool _out906;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out905, out _out906, out _out907);
                    _3419_recursiveGen = _out905;
                    _3420_recOwned = _out906;
                    _3421_recIdents = _out907;
                    Dafny.ISequence<Dafny.Rune> _3422_s;
                    _3422_s = (_3419_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3420_recOwned)) {
                      _3422_s = Dafny.Sequence<Dafny.Rune>.Concat(_3422_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3422_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3422_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3422_s);
                    isOwned = true;
                    readIdents = _3421_recIdents;
                  }
                } else if (_source131.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3423___mcc_h1088 = _source131.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3424_recursiveGen;
                    bool _3425_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3426_recIdents;
                    RAST._IExpr _out908;
                    bool _out909;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out910;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out908, out _out909, out _out910);
                    _3424_recursiveGen = _out908;
                    _3425_recOwned = _out909;
                    _3426_recIdents = _out910;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3424_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3425_recOwned;
                    readIdents = _3426_recIdents;
                  }
                } else if (_source131.is_Array) {
                  DAST._IType _3427___mcc_h1090 = _source131.dtor_element;
                  BigInteger _3428___mcc_h1091 = _source131.dtor_dims;
                  {
                    RAST._IExpr _3429_recursiveGen;
                    bool _3430_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3431_recIdents;
                    RAST._IExpr _out911;
                    bool _out912;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out911, out _out912, out _out913);
                    _3429_recursiveGen = _out911;
                    _3430_recOwned = _out912;
                    _3431_recIdents = _out913;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3429_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3430_recOwned;
                    readIdents = _3431_recIdents;
                  }
                } else if (_source131.is_Seq) {
                  DAST._IType _3432___mcc_h1094 = _source131.dtor_element;
                  {
                    RAST._IExpr _3433_recursiveGen;
                    bool _3434_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3435_recIdents;
                    RAST._IExpr _out914;
                    bool _out915;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out914, out _out915, out _out916);
                    _3433_recursiveGen = _out914;
                    _3434_recOwned = _out915;
                    _3435_recIdents = _out916;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3433_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3434_recOwned;
                    readIdents = _3435_recIdents;
                  }
                } else if (_source131.is_Set) {
                  DAST._IType _3436___mcc_h1096 = _source131.dtor_element;
                  {
                    RAST._IExpr _3437_recursiveGen;
                    bool _3438_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3439_recIdents;
                    RAST._IExpr _out917;
                    bool _out918;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919);
                    _3437_recursiveGen = _out917;
                    _3438_recOwned = _out918;
                    _3439_recIdents = _out919;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3437_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3438_recOwned;
                    readIdents = _3439_recIdents;
                  }
                } else if (_source131.is_Multiset) {
                  DAST._IType _3440___mcc_h1098 = _source131.dtor_element;
                  {
                    RAST._IExpr _3441_recursiveGen;
                    bool _3442_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3443_recIdents;
                    RAST._IExpr _out920;
                    bool _out921;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out922;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out920, out _out921, out _out922);
                    _3441_recursiveGen = _out920;
                    _3442_recOwned = _out921;
                    _3443_recIdents = _out922;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3441_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3442_recOwned;
                    readIdents = _3443_recIdents;
                  }
                } else if (_source131.is_Map) {
                  DAST._IType _3444___mcc_h1100 = _source131.dtor_key;
                  DAST._IType _3445___mcc_h1101 = _source131.dtor_value;
                  {
                    RAST._IExpr _3446_recursiveGen;
                    bool _3447_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3448_recIdents;
                    RAST._IExpr _out923;
                    bool _out924;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out925;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out923, out _out924, out _out925);
                    _3446_recursiveGen = _out923;
                    _3447_recOwned = _out924;
                    _3448_recIdents = _out925;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3446_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3447_recOwned;
                    readIdents = _3448_recIdents;
                  }
                } else if (_source131.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3449___mcc_h1104 = _source131.dtor_args;
                  DAST._IType _3450___mcc_h1105 = _source131.dtor_result;
                  {
                    RAST._IExpr _3451_recursiveGen;
                    bool _3452_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3453_recIdents;
                    RAST._IExpr _out926;
                    bool _out927;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out926, out _out927, out _out928);
                    _3451_recursiveGen = _out926;
                    _3452_recOwned = _out927;
                    _3453_recIdents = _out928;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3451_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3452_recOwned;
                    readIdents = _3453_recIdents;
                  }
                } else if (_source131.is_Primitive) {
                  DAST._IPrimitive _3454___mcc_h1108 = _source131.dtor_Primitive_a0;
                  {
                    RAST._IExpr _3455_recursiveGen;
                    bool _3456_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3457_recIdents;
                    RAST._IExpr _out929;
                    bool _out930;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out929, out _out930, out _out931);
                    _3455_recursiveGen = _out929;
                    _3456_recOwned = _out930;
                    _3457_recIdents = _out931;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3455_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3456_recOwned;
                    readIdents = _3457_recIdents;
                  }
                } else if (_source131.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3458___mcc_h1110 = _source131.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3459_recursiveGen;
                    bool _3460_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3461_recIdents;
                    RAST._IExpr _out932;
                    bool _out933;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out934;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out932, out _out933, out _out934);
                    _3459_recursiveGen = _out932;
                    _3460_recOwned = _out933;
                    _3461_recIdents = _out934;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3459_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3460_recOwned;
                    readIdents = _3461_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3462___mcc_h1112 = _source131.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3463_recursiveGen;
                    bool _3464_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3465_recIdents;
                    RAST._IExpr _out935;
                    bool _out936;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out937;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out935, out _out936, out _out937);
                    _3463_recursiveGen = _out935;
                    _3464_recOwned = _out936;
                    _3465_recIdents = _out937;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3463_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3464_recOwned;
                    readIdents = _3465_recIdents;
                  }
                }
              } else {
                DAST._IType _source134 = _2297___mcc_h327;
                if (_source134.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3466___mcc_h1114 = _source134.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _3467___mcc_h1115 = _source134.dtor_typeArgs;
                  DAST._IResolvedType _3468___mcc_h1116 = _source134.dtor_resolved;
                  DAST._IResolvedType _source135 = _3468___mcc_h1116;
                  if (_source135.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3469___mcc_h1120 = _source135.dtor_path;
                    {
                      RAST._IExpr _3470_recursiveGen;
                      bool _3471_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3472_recIdents;
                      RAST._IExpr _out938;
                      bool _out939;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out938, out _out939, out _out940);
                      _3470_recursiveGen = _out938;
                      _3471_recOwned = _out939;
                      _3472_recIdents = _out940;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3470_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3471_recOwned;
                      readIdents = _3472_recIdents;
                    }
                  } else if (_source135.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3473___mcc_h1122 = _source135.dtor_path;
                    {
                      RAST._IExpr _3474_recursiveGen;
                      bool _3475_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3476_recIdents;
                      RAST._IExpr _out941;
                      bool _out942;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out943;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943);
                      _3474_recursiveGen = _out941;
                      _3475_recOwned = _out942;
                      _3476_recIdents = _out943;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3474_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3475_recOwned;
                      readIdents = _3476_recIdents;
                    }
                  } else {
                    DAST._IType _3477___mcc_h1124 = _source135.dtor_baseType;
                    DAST._INewtypeRange _3478___mcc_h1125 = _source135.dtor_range;
                    bool _3479___mcc_h1126 = _source135.dtor_erase;
                    bool _3480_erase = _3479___mcc_h1126;
                    DAST._INewtypeRange _3481_range = _3478___mcc_h1125;
                    DAST._IType _3482_b = _3477___mcc_h1124;
                    {
                      if (object.Equals(_2291_fromTpe, _3482_b)) {
                        RAST._IExpr _3483_recursiveGen;
                        bool _3484_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3485_recIdents;
                        RAST._IExpr _out944;
                        bool _out945;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out946;
                        DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out944, out _out945, out _out946);
                        _3483_recursiveGen = _out944;
                        _3484_recOwned = _out945;
                        _3485_recIdents = _out946;
                        Std.Wrappers._IOption<RAST._IType> _3486_potentialRhsType;
                        _3486_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3482_b, _3481_range);
                        Std.Wrappers._IOption<RAST._IType> _source136 = _3486_potentialRhsType;
                        if (_source136.is_None) {
                          if (_3480_erase) {
                            r = _3483_recursiveGen;
                          } else {
                            RAST._IType _3487_rhsType;
                            RAST._IType _out947;
                            _out947 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                            _3487_rhsType = _out947;
                            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3487_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3483_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                          }
                          isOwned = _3484_recOwned;
                        } else {
                          RAST._IType _3488___mcc_h1268 = _source136.dtor_value;
                          RAST._IType _3489_v = _3488___mcc_h1268;
                          r = RAST.Expr.create_ConversionNum(_3489_v, _3483_recursiveGen);
                          isOwned = true;
                        }
                        readIdents = _3485_recIdents;
                      } else {
                        RAST._IExpr _out948;
                        bool _out949;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out950;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _3482_b), _3482_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out948, out _out949, out _out950);
                        r = _out948;
                        isOwned = _out949;
                        readIdents = _out950;
                      }
                    }
                  }
                } else if (_source134.is_Nullable) {
                  DAST._IType _3490___mcc_h1130 = _source134.dtor_Nullable_a0;
                  {
                    RAST._IExpr _3491_recursiveGen;
                    bool _3492_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3493_recIdents;
                    RAST._IExpr _out951;
                    bool _out952;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out951, out _out952, out _out953);
                    _3491_recursiveGen = _out951;
                    _3492_recOwned = _out952;
                    _3493_recIdents = _out953;
                    Dafny.ISequence<Dafny.Rune> _3494_s;
                    _3494_s = (_3491_recursiveGen)._ToString(DCOMP.__default.IND);
                    if (!(_3492_recOwned)) {
                      _3494_s = Dafny.Sequence<Dafny.Rune>.Concat(_3494_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    _3494_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3494_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    r = RAST.Expr.create_RawExpr(_3494_s);
                    isOwned = true;
                    readIdents = _3493_recIdents;
                  }
                } else if (_source134.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _3495___mcc_h1132 = _source134.dtor_Tuple_a0;
                  {
                    RAST._IExpr _3496_recursiveGen;
                    bool _3497_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3498_recIdents;
                    RAST._IExpr _out954;
                    bool _out955;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out954, out _out955, out _out956);
                    _3496_recursiveGen = _out954;
                    _3497_recOwned = _out955;
                    _3498_recIdents = _out956;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3496_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3497_recOwned;
                    readIdents = _3498_recIdents;
                  }
                } else if (_source134.is_Array) {
                  DAST._IType _3499___mcc_h1134 = _source134.dtor_element;
                  BigInteger _3500___mcc_h1135 = _source134.dtor_dims;
                  {
                    RAST._IExpr _3501_recursiveGen;
                    bool _3502_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3503_recIdents;
                    RAST._IExpr _out957;
                    bool _out958;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959);
                    _3501_recursiveGen = _out957;
                    _3502_recOwned = _out958;
                    _3503_recIdents = _out959;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3501_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3502_recOwned;
                    readIdents = _3503_recIdents;
                  }
                } else if (_source134.is_Seq) {
                  DAST._IType _3504___mcc_h1138 = _source134.dtor_element;
                  {
                    RAST._IExpr _3505_recursiveGen;
                    bool _3506_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3507_recIdents;
                    RAST._IExpr _out960;
                    bool _out961;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out962;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out960, out _out961, out _out962);
                    _3505_recursiveGen = _out960;
                    _3506_recOwned = _out961;
                    _3507_recIdents = _out962;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3505_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3506_recOwned;
                    readIdents = _3507_recIdents;
                  }
                } else if (_source134.is_Set) {
                  DAST._IType _3508___mcc_h1140 = _source134.dtor_element;
                  {
                    RAST._IExpr _3509_recursiveGen;
                    bool _3510_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3511_recIdents;
                    RAST._IExpr _out963;
                    bool _out964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out963, out _out964, out _out965);
                    _3509_recursiveGen = _out963;
                    _3510_recOwned = _out964;
                    _3511_recIdents = _out965;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3509_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3510_recOwned;
                    readIdents = _3511_recIdents;
                  }
                } else if (_source134.is_Multiset) {
                  DAST._IType _3512___mcc_h1142 = _source134.dtor_element;
                  {
                    RAST._IExpr _3513_recursiveGen;
                    bool _3514_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3515_recIdents;
                    RAST._IExpr _out966;
                    bool _out967;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out966, out _out967, out _out968);
                    _3513_recursiveGen = _out966;
                    _3514_recOwned = _out967;
                    _3515_recIdents = _out968;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3513_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3514_recOwned;
                    readIdents = _3515_recIdents;
                  }
                } else if (_source134.is_Map) {
                  DAST._IType _3516___mcc_h1144 = _source134.dtor_key;
                  DAST._IType _3517___mcc_h1145 = _source134.dtor_value;
                  {
                    RAST._IExpr _3518_recursiveGen;
                    bool _3519_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3520_recIdents;
                    RAST._IExpr _out969;
                    bool _out970;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out971;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out969, out _out970, out _out971);
                    _3518_recursiveGen = _out969;
                    _3519_recOwned = _out970;
                    _3520_recIdents = _out971;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3518_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3519_recOwned;
                    readIdents = _3520_recIdents;
                  }
                } else if (_source134.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _3521___mcc_h1148 = _source134.dtor_args;
                  DAST._IType _3522___mcc_h1149 = _source134.dtor_result;
                  {
                    RAST._IExpr _3523_recursiveGen;
                    bool _3524_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3525_recIdents;
                    RAST._IExpr _out972;
                    bool _out973;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out972, out _out973, out _out974);
                    _3523_recursiveGen = _out972;
                    _3524_recOwned = _out973;
                    _3525_recIdents = _out974;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3523_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3524_recOwned;
                    readIdents = _3525_recIdents;
                  }
                } else if (_source134.is_Primitive) {
                  DAST._IPrimitive _3526___mcc_h1152 = _source134.dtor_Primitive_a0;
                  DAST._IPrimitive _source137 = _3526___mcc_h1152;
                  if (_source137.is_Int) {
                    {
                      RAST._IType _3527_rhsType;
                      RAST._IType _out975;
                      _out975 = DCOMP.COMP.GenType(_2291_fromTpe, true, false);
                      _3527_rhsType = _out975;
                      RAST._IExpr _3528_recursiveGen;
                      bool _3529___v61;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3530_recIdents;
                      RAST._IExpr _out976;
                      bool _out977;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out978;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, true, out _out976, out _out977, out _out978);
                      _3528_recursiveGen = _out976;
                      _3529___v61 = _out977;
                      _3530_recIdents = _out978;
                      r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), (_3528_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"))));
                      isOwned = true;
                      readIdents = _3530_recIdents;
                    }
                  } else if (_source137.is_Real) {
                    {
                      RAST._IExpr _3531_recursiveGen;
                      bool _3532_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3533_recIdents;
                      RAST._IExpr _out979;
                      bool _out980;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out979, out _out980, out _out981);
                      _3531_recursiveGen = _out979;
                      _3532_recOwned = _out980;
                      _3533_recIdents = _out981;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3531_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3532_recOwned;
                      readIdents = _3533_recIdents;
                    }
                  } else if (_source137.is_String) {
                    {
                      RAST._IExpr _3534_recursiveGen;
                      bool _3535_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3536_recIdents;
                      RAST._IExpr _out982;
                      bool _out983;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out982, out _out983, out _out984);
                      _3534_recursiveGen = _out982;
                      _3535_recOwned = _out983;
                      _3536_recIdents = _out984;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3534_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3535_recOwned;
                      readIdents = _3536_recIdents;
                    }
                  } else if (_source137.is_Bool) {
                    {
                      RAST._IExpr _3537_recursiveGen;
                      bool _3538_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3539_recIdents;
                      RAST._IExpr _out985;
                      bool _out986;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out987;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out985, out _out986, out _out987);
                      _3537_recursiveGen = _out985;
                      _3538_recOwned = _out986;
                      _3539_recIdents = _out987;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3537_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3538_recOwned;
                      readIdents = _3539_recIdents;
                    }
                  } else {
                    {
                      RAST._IExpr _3540_recursiveGen;
                      bool _3541_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdents;
                      RAST._IExpr _out988;
                      bool _out989;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out990;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out988, out _out989, out _out990);
                      _3540_recursiveGen = _out988;
                      _3541_recOwned = _out989;
                      _3542_recIdents = _out990;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3540_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                      isOwned = _3541_recOwned;
                      readIdents = _3542_recIdents;
                    }
                  }
                } else if (_source134.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _3543___mcc_h1154 = _source134.dtor_Passthrough_a0;
                  {
                    RAST._IExpr _3544_recursiveGen;
                    bool _3545_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3546_recIdents;
                    RAST._IExpr _out991;
                    bool _out992;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out993;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out991, out _out992, out _out993);
                    _3544_recursiveGen = _out991;
                    _3545_recOwned = _out992;
                    _3546_recIdents = _out993;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3544_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3545_recOwned;
                    readIdents = _3546_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3547___mcc_h1156 = _source134.dtor_TypeArg_a0;
                  {
                    RAST._IExpr _3548_recursiveGen;
                    bool _3549_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3550_recIdents;
                    RAST._IExpr _out994;
                    bool _out995;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out996;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out994, out _out995, out _out996);
                    _3548_recursiveGen = _out994;
                    _3549_recOwned = _out995;
                    _3550_recIdents = _out996;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3548_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3549_recOwned;
                    readIdents = _3550_recIdents;
                  }
                }
              }
            } else if (_source85.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3551___mcc_h1158 = _source85.dtor_Passthrough_a0;
              DAST._IType _source138 = _2297___mcc_h327;
              if (_source138.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3552___mcc_h1162 = _source138.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3553___mcc_h1163 = _source138.dtor_typeArgs;
                DAST._IResolvedType _3554___mcc_h1164 = _source138.dtor_resolved;
                DAST._IResolvedType _source139 = _3554___mcc_h1164;
                if (_source139.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3555___mcc_h1168 = _source139.dtor_path;
                  {
                    RAST._IExpr _3556_recursiveGen;
                    bool _3557_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3558_recIdents;
                    RAST._IExpr _out997;
                    bool _out998;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out999;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out997, out _out998, out _out999);
                    _3556_recursiveGen = _out997;
                    _3557_recOwned = _out998;
                    _3558_recIdents = _out999;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3556_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3557_recOwned;
                    readIdents = _3558_recIdents;
                  }
                } else if (_source139.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3559___mcc_h1170 = _source139.dtor_path;
                  {
                    RAST._IExpr _3560_recursiveGen;
                    bool _3561_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3562_recIdents;
                    RAST._IExpr _out1000;
                    bool _out1001;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1000, out _out1001, out _out1002);
                    _3560_recursiveGen = _out1000;
                    _3561_recOwned = _out1001;
                    _3562_recIdents = _out1002;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3560_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3561_recOwned;
                    readIdents = _3562_recIdents;
                  }
                } else {
                  DAST._IType _3563___mcc_h1172 = _source139.dtor_baseType;
                  DAST._INewtypeRange _3564___mcc_h1173 = _source139.dtor_range;
                  bool _3565___mcc_h1174 = _source139.dtor_erase;
                  bool _3566_erase = _3565___mcc_h1174;
                  DAST._INewtypeRange _3567_range = _3564___mcc_h1173;
                  DAST._IType _3568_b = _3563___mcc_h1172;
                  {
                    if (object.Equals(_2291_fromTpe, _3568_b)) {
                      RAST._IExpr _3569_recursiveGen;
                      bool _3570_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3571_recIdents;
                      RAST._IExpr _out1003;
                      bool _out1004;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1005;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1003, out _out1004, out _out1005);
                      _3569_recursiveGen = _out1003;
                      _3570_recOwned = _out1004;
                      _3571_recIdents = _out1005;
                      Std.Wrappers._IOption<RAST._IType> _3572_potentialRhsType;
                      _3572_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3568_b, _3567_range);
                      Std.Wrappers._IOption<RAST._IType> _source140 = _3572_potentialRhsType;
                      if (_source140.is_None) {
                        if (_3566_erase) {
                          r = _3569_recursiveGen;
                        } else {
                          RAST._IType _3573_rhsType;
                          RAST._IType _out1006;
                          _out1006 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                          _3573_rhsType = _out1006;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3573_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3569_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _3570_recOwned;
                      } else {
                        RAST._IType _3574___mcc_h1269 = _source140.dtor_value;
                        RAST._IType _3575_v = _3574___mcc_h1269;
                        r = RAST.Expr.create_ConversionNum(_3575_v, _3569_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _3571_recIdents;
                    } else {
                      RAST._IExpr _out1007;
                      bool _out1008;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _3568_b), _3568_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out1007, out _out1008, out _out1009);
                      r = _out1007;
                      isOwned = _out1008;
                      readIdents = _out1009;
                    }
                  }
                }
              } else if (_source138.is_Nullable) {
                DAST._IType _3576___mcc_h1178 = _source138.dtor_Nullable_a0;
                {
                  RAST._IExpr _3577_recursiveGen;
                  bool _3578_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3579_recIdents;
                  RAST._IExpr _out1010;
                  bool _out1011;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1012;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1010, out _out1011, out _out1012);
                  _3577_recursiveGen = _out1010;
                  _3578_recOwned = _out1011;
                  _3579_recIdents = _out1012;
                  Dafny.ISequence<Dafny.Rune> _3580_s;
                  _3580_s = (_3577_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_3578_recOwned)) {
                    _3580_s = Dafny.Sequence<Dafny.Rune>.Concat(_3580_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3580_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3580_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3580_s);
                  isOwned = true;
                  readIdents = _3579_recIdents;
                }
              } else if (_source138.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3581___mcc_h1180 = _source138.dtor_Tuple_a0;
                {
                  RAST._IExpr _3582_recursiveGen;
                  bool _3583_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3584_recIdents;
                  RAST._IExpr _out1013;
                  bool _out1014;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1013, out _out1014, out _out1015);
                  _3582_recursiveGen = _out1013;
                  _3583_recOwned = _out1014;
                  _3584_recIdents = _out1015;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3582_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3583_recOwned;
                  readIdents = _3584_recIdents;
                }
              } else if (_source138.is_Array) {
                DAST._IType _3585___mcc_h1182 = _source138.dtor_element;
                BigInteger _3586___mcc_h1183 = _source138.dtor_dims;
                {
                  RAST._IExpr _3587_recursiveGen;
                  bool _3588_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3589_recIdents;
                  RAST._IExpr _out1016;
                  bool _out1017;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1018;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018);
                  _3587_recursiveGen = _out1016;
                  _3588_recOwned = _out1017;
                  _3589_recIdents = _out1018;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3587_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3588_recOwned;
                  readIdents = _3589_recIdents;
                }
              } else if (_source138.is_Seq) {
                DAST._IType _3590___mcc_h1186 = _source138.dtor_element;
                {
                  RAST._IExpr _3591_recursiveGen;
                  bool _3592_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3593_recIdents;
                  RAST._IExpr _out1019;
                  bool _out1020;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1021;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1019, out _out1020, out _out1021);
                  _3591_recursiveGen = _out1019;
                  _3592_recOwned = _out1020;
                  _3593_recIdents = _out1021;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3591_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3592_recOwned;
                  readIdents = _3593_recIdents;
                }
              } else if (_source138.is_Set) {
                DAST._IType _3594___mcc_h1188 = _source138.dtor_element;
                {
                  RAST._IExpr _3595_recursiveGen;
                  bool _3596_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3597_recIdents;
                  RAST._IExpr _out1022;
                  bool _out1023;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1022, out _out1023, out _out1024);
                  _3595_recursiveGen = _out1022;
                  _3596_recOwned = _out1023;
                  _3597_recIdents = _out1024;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3595_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3596_recOwned;
                  readIdents = _3597_recIdents;
                }
              } else if (_source138.is_Multiset) {
                DAST._IType _3598___mcc_h1190 = _source138.dtor_element;
                {
                  RAST._IExpr _3599_recursiveGen;
                  bool _3600_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3601_recIdents;
                  RAST._IExpr _out1025;
                  bool _out1026;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1027;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027);
                  _3599_recursiveGen = _out1025;
                  _3600_recOwned = _out1026;
                  _3601_recIdents = _out1027;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3599_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3600_recOwned;
                  readIdents = _3601_recIdents;
                }
              } else if (_source138.is_Map) {
                DAST._IType _3602___mcc_h1192 = _source138.dtor_key;
                DAST._IType _3603___mcc_h1193 = _source138.dtor_value;
                {
                  RAST._IExpr _3604_recursiveGen;
                  bool _3605_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3606_recIdents;
                  RAST._IExpr _out1028;
                  bool _out1029;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1030;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1028, out _out1029, out _out1030);
                  _3604_recursiveGen = _out1028;
                  _3605_recOwned = _out1029;
                  _3606_recIdents = _out1030;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3604_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3605_recOwned;
                  readIdents = _3606_recIdents;
                }
              } else if (_source138.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3607___mcc_h1196 = _source138.dtor_args;
                DAST._IType _3608___mcc_h1197 = _source138.dtor_result;
                {
                  RAST._IExpr _3609_recursiveGen;
                  bool _3610_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3611_recIdents;
                  RAST._IExpr _out1031;
                  bool _out1032;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1033;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1031, out _out1032, out _out1033);
                  _3609_recursiveGen = _out1031;
                  _3610_recOwned = _out1032;
                  _3611_recIdents = _out1033;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3609_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3610_recOwned;
                  readIdents = _3611_recIdents;
                }
              } else if (_source138.is_Primitive) {
                DAST._IPrimitive _3612___mcc_h1200 = _source138.dtor_Primitive_a0;
                DAST._IPrimitive _source141 = _3612___mcc_h1200;
                if (_source141.is_Int) {
                  {
                    RAST._IType _3613_rhsType;
                    RAST._IType _out1034;
                    _out1034 = DCOMP.COMP.GenType(_2291_fromTpe, true, false);
                    _3613_rhsType = _out1034;
                    RAST._IExpr _3614_recursiveGen;
                    bool _3615___v59;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3616_recIdents;
                    RAST._IExpr _out1035;
                    bool _out1036;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1037;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, true, out _out1035, out _out1036, out _out1037);
                    _3614_recursiveGen = _out1035;
                    _3615___v59 = _out1036;
                    _3616_recIdents = _out1037;
                    r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), (_3614_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                    isOwned = true;
                    readIdents = _3616_recIdents;
                  }
                } else if (_source141.is_Real) {
                  {
                    RAST._IExpr _3617_recursiveGen;
                    bool _3618_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3619_recIdents;
                    RAST._IExpr _out1038;
                    bool _out1039;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1038, out _out1039, out _out1040);
                    _3617_recursiveGen = _out1038;
                    _3618_recOwned = _out1039;
                    _3619_recIdents = _out1040;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3617_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3618_recOwned;
                    readIdents = _3619_recIdents;
                  }
                } else if (_source141.is_String) {
                  {
                    RAST._IExpr _3620_recursiveGen;
                    bool _3621_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3622_recIdents;
                    RAST._IExpr _out1041;
                    bool _out1042;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1041, out _out1042, out _out1043);
                    _3620_recursiveGen = _out1041;
                    _3621_recOwned = _out1042;
                    _3622_recIdents = _out1043;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3620_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3621_recOwned;
                    readIdents = _3622_recIdents;
                  }
                } else if (_source141.is_Bool) {
                  {
                    RAST._IExpr _3623_recursiveGen;
                    bool _3624_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3625_recIdents;
                    RAST._IExpr _out1044;
                    bool _out1045;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1046;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1044, out _out1045, out _out1046);
                    _3623_recursiveGen = _out1044;
                    _3624_recOwned = _out1045;
                    _3625_recIdents = _out1046;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3623_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3624_recOwned;
                    readIdents = _3625_recIdents;
                  }
                } else {
                  {
                    RAST._IExpr _3626_recursiveGen;
                    bool _3627_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3628_recIdents;
                    RAST._IExpr _out1047;
                    bool _out1048;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1049;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1047, out _out1048, out _out1049);
                    _3626_recursiveGen = _out1047;
                    _3627_recOwned = _out1048;
                    _3628_recIdents = _out1049;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3626_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3627_recOwned;
                    readIdents = _3628_recIdents;
                  }
                }
              } else if (_source138.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3629___mcc_h1202 = _source138.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3630_recursiveGen;
                  bool _3631___v64;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3632_recIdents;
                  RAST._IExpr _out1050;
                  bool _out1051;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, true, out _out1050, out _out1051, out _out1052);
                  _3630_recursiveGen = _out1050;
                  _3631___v64 = _out1051;
                  _3632_recIdents = _out1052;
                  RAST._IType _3633_toTpeGen;
                  RAST._IType _out1053;
                  _out1053 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                  _3633_toTpeGen = _out1053;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_3630_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_3633_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  isOwned = true;
                  readIdents = _3632_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3634___mcc_h1204 = _source138.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3635_recursiveGen;
                  bool _3636_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3637_recIdents;
                  RAST._IExpr _out1054;
                  bool _out1055;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1054, out _out1055, out _out1056);
                  _3635_recursiveGen = _out1054;
                  _3636_recOwned = _out1055;
                  _3637_recIdents = _out1056;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3635_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3636_recOwned;
                  readIdents = _3637_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3638___mcc_h1206 = _source85.dtor_TypeArg_a0;
              DAST._IType _source142 = _2297___mcc_h327;
              if (_source142.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3639___mcc_h1210 = _source142.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _3640___mcc_h1211 = _source142.dtor_typeArgs;
                DAST._IResolvedType _3641___mcc_h1212 = _source142.dtor_resolved;
                DAST._IResolvedType _source143 = _3641___mcc_h1212;
                if (_source143.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3642___mcc_h1216 = _source143.dtor_path;
                  {
                    RAST._IExpr _3643_recursiveGen;
                    bool _3644_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3645_recIdents;
                    RAST._IExpr _out1057;
                    bool _out1058;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1059;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1057, out _out1058, out _out1059);
                    _3643_recursiveGen = _out1057;
                    _3644_recOwned = _out1058;
                    _3645_recIdents = _out1059;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3643_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3644_recOwned;
                    readIdents = _3645_recIdents;
                  }
                } else if (_source143.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3646___mcc_h1218 = _source143.dtor_path;
                  {
                    RAST._IExpr _3647_recursiveGen;
                    bool _3648_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3649_recIdents;
                    RAST._IExpr _out1060;
                    bool _out1061;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1062;
                    DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1060, out _out1061, out _out1062);
                    _3647_recursiveGen = _out1060;
                    _3648_recOwned = _out1061;
                    _3649_recIdents = _out1062;
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3647_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                    isOwned = _3648_recOwned;
                    readIdents = _3649_recIdents;
                  }
                } else {
                  DAST._IType _3650___mcc_h1220 = _source143.dtor_baseType;
                  DAST._INewtypeRange _3651___mcc_h1221 = _source143.dtor_range;
                  bool _3652___mcc_h1222 = _source143.dtor_erase;
                  bool _3653_erase = _3652___mcc_h1222;
                  DAST._INewtypeRange _3654_range = _3651___mcc_h1221;
                  DAST._IType _3655_b = _3650___mcc_h1220;
                  {
                    if (object.Equals(_2291_fromTpe, _3655_b)) {
                      RAST._IExpr _3656_recursiveGen;
                      bool _3657_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3658_recIdents;
                      RAST._IExpr _out1063;
                      bool _out1064;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
                      DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1063, out _out1064, out _out1065);
                      _3656_recursiveGen = _out1063;
                      _3657_recOwned = _out1064;
                      _3658_recIdents = _out1065;
                      Std.Wrappers._IOption<RAST._IType> _3659_potentialRhsType;
                      _3659_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3655_b, _3654_range);
                      Std.Wrappers._IOption<RAST._IType> _source144 = _3659_potentialRhsType;
                      if (_source144.is_None) {
                        if (_3653_erase) {
                          r = _3656_recursiveGen;
                        } else {
                          RAST._IType _3660_rhsType;
                          RAST._IType _out1066;
                          _out1066 = DCOMP.COMP.GenType(_2290_toTpe, true, false);
                          _3660_rhsType = _out1066;
                          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3660_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3656_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                        }
                        isOwned = _3657_recOwned;
                      } else {
                        RAST._IType _3661___mcc_h1270 = _source144.dtor_value;
                        RAST._IType _3662_v = _3661___mcc_h1270;
                        r = RAST.Expr.create_ConversionNum(_3662_v, _3656_recursiveGen);
                        isOwned = true;
                      }
                      readIdents = _3658_recIdents;
                    } else {
                      RAST._IExpr _out1067;
                      bool _out1068;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1069;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2292_expr, _2291_fromTpe, _3655_b), _3655_b, _2290_toTpe), selfIdent, @params, mustOwn, out _out1067, out _out1068, out _out1069);
                      r = _out1067;
                      isOwned = _out1068;
                      readIdents = _out1069;
                    }
                  }
                }
              } else if (_source142.is_Nullable) {
                DAST._IType _3663___mcc_h1226 = _source142.dtor_Nullable_a0;
                {
                  RAST._IExpr _3664_recursiveGen;
                  bool _3665_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3666_recIdents;
                  RAST._IExpr _out1070;
                  bool _out1071;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1070, out _out1071, out _out1072);
                  _3664_recursiveGen = _out1070;
                  _3665_recOwned = _out1071;
                  _3666_recIdents = _out1072;
                  Dafny.ISequence<Dafny.Rune> _3667_s;
                  _3667_s = (_3664_recursiveGen)._ToString(DCOMP.__default.IND);
                  if (!(_3665_recOwned)) {
                    _3667_s = Dafny.Sequence<Dafny.Rune>.Concat(_3667_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  _3667_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3667_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  r = RAST.Expr.create_RawExpr(_3667_s);
                  isOwned = true;
                  readIdents = _3666_recIdents;
                }
              } else if (_source142.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3668___mcc_h1228 = _source142.dtor_Tuple_a0;
                {
                  RAST._IExpr _3669_recursiveGen;
                  bool _3670_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3671_recIdents;
                  RAST._IExpr _out1073;
                  bool _out1074;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1073, out _out1074, out _out1075);
                  _3669_recursiveGen = _out1073;
                  _3670_recOwned = _out1074;
                  _3671_recIdents = _out1075;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3669_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3670_recOwned;
                  readIdents = _3671_recIdents;
                }
              } else if (_source142.is_Array) {
                DAST._IType _3672___mcc_h1230 = _source142.dtor_element;
                BigInteger _3673___mcc_h1231 = _source142.dtor_dims;
                {
                  RAST._IExpr _3674_recursiveGen;
                  bool _3675_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3676_recIdents;
                  RAST._IExpr _out1076;
                  bool _out1077;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1078;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078);
                  _3674_recursiveGen = _out1076;
                  _3675_recOwned = _out1077;
                  _3676_recIdents = _out1078;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3674_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3675_recOwned;
                  readIdents = _3676_recIdents;
                }
              } else if (_source142.is_Seq) {
                DAST._IType _3677___mcc_h1234 = _source142.dtor_element;
                {
                  RAST._IExpr _3678_recursiveGen;
                  bool _3679_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3680_recIdents;
                  RAST._IExpr _out1079;
                  bool _out1080;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1081;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1079, out _out1080, out _out1081);
                  _3678_recursiveGen = _out1079;
                  _3679_recOwned = _out1080;
                  _3680_recIdents = _out1081;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3678_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3679_recOwned;
                  readIdents = _3680_recIdents;
                }
              } else if (_source142.is_Set) {
                DAST._IType _3681___mcc_h1236 = _source142.dtor_element;
                {
                  RAST._IExpr _3682_recursiveGen;
                  bool _3683_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3684_recIdents;
                  RAST._IExpr _out1082;
                  bool _out1083;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1082, out _out1083, out _out1084);
                  _3682_recursiveGen = _out1082;
                  _3683_recOwned = _out1083;
                  _3684_recIdents = _out1084;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3682_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3683_recOwned;
                  readIdents = _3684_recIdents;
                }
              } else if (_source142.is_Multiset) {
                DAST._IType _3685___mcc_h1238 = _source142.dtor_element;
                {
                  RAST._IExpr _3686_recursiveGen;
                  bool _3687_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3688_recIdents;
                  RAST._IExpr _out1085;
                  bool _out1086;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1085, out _out1086, out _out1087);
                  _3686_recursiveGen = _out1085;
                  _3687_recOwned = _out1086;
                  _3688_recIdents = _out1087;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3686_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3687_recOwned;
                  readIdents = _3688_recIdents;
                }
              } else if (_source142.is_Map) {
                DAST._IType _3689___mcc_h1240 = _source142.dtor_key;
                DAST._IType _3690___mcc_h1241 = _source142.dtor_value;
                {
                  RAST._IExpr _3691_recursiveGen;
                  bool _3692_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3693_recIdents;
                  RAST._IExpr _out1088;
                  bool _out1089;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1088, out _out1089, out _out1090);
                  _3691_recursiveGen = _out1088;
                  _3692_recOwned = _out1089;
                  _3693_recIdents = _out1090;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3691_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3692_recOwned;
                  readIdents = _3693_recIdents;
                }
              } else if (_source142.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3694___mcc_h1244 = _source142.dtor_args;
                DAST._IType _3695___mcc_h1245 = _source142.dtor_result;
                {
                  RAST._IExpr _3696_recursiveGen;
                  bool _3697_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3698_recIdents;
                  RAST._IExpr _out1091;
                  bool _out1092;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1093;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1091, out _out1092, out _out1093);
                  _3696_recursiveGen = _out1091;
                  _3697_recOwned = _out1092;
                  _3698_recIdents = _out1093;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3696_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3697_recOwned;
                  readIdents = _3698_recIdents;
                }
              } else if (_source142.is_Primitive) {
                DAST._IPrimitive _3699___mcc_h1248 = _source142.dtor_Primitive_a0;
                {
                  RAST._IExpr _3700_recursiveGen;
                  bool _3701_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3702_recIdents;
                  RAST._IExpr _out1094;
                  bool _out1095;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1094, out _out1095, out _out1096);
                  _3700_recursiveGen = _out1094;
                  _3701_recOwned = _out1095;
                  _3702_recIdents = _out1096;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3700_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3701_recOwned;
                  readIdents = _3702_recIdents;
                }
              } else if (_source142.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3703___mcc_h1250 = _source142.dtor_Passthrough_a0;
                {
                  RAST._IExpr _3704_recursiveGen;
                  bool _3705_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3706_recIdents;
                  RAST._IExpr _out1097;
                  bool _out1098;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1099;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099);
                  _3704_recursiveGen = _out1097;
                  _3705_recOwned = _out1098;
                  _3706_recIdents = _out1099;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3704_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3705_recOwned;
                  readIdents = _3706_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3707___mcc_h1252 = _source142.dtor_TypeArg_a0;
                {
                  RAST._IExpr _3708_recursiveGen;
                  bool _3709_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3710_recIdents;
                  RAST._IExpr _out1100;
                  bool _out1101;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1102;
                  DCOMP.COMP.GenExpr(_2292_expr, selfIdent, @params, mustOwn, out _out1100, out _out1101, out _out1102);
                  _3708_recursiveGen = _out1100;
                  _3709_recOwned = _out1101;
                  _3710_recIdents = _out1102;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3708_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  isOwned = _3709_recOwned;
                  readIdents = _3710_recIdents;
                }
              }
            }
          }
        }
      } else if (_source78.is_SeqConstruct) {
        DAST._IExpression _3711___mcc_h26 = _source78.dtor_length;
        DAST._IExpression _3712___mcc_h27 = _source78.dtor_elem;
        DAST._IExpression _3713_expr = _3712___mcc_h27;
        DAST._IExpression _3714_length = _3711___mcc_h26;
        {
          RAST._IExpr _3715_recursiveGen;
          bool _3716___v66;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3717_recIdents;
          RAST._IExpr _out1103;
          bool _out1104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
          DCOMP.COMP.GenExpr(_3713_expr, selfIdent, @params, true, out _out1103, out _out1104, out _out1105);
          _3715_recursiveGen = _out1103;
          _3716___v66 = _out1104;
          _3717_recIdents = _out1105;
          RAST._IExpr _3718_lengthGen;
          bool _3719___v67;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3720_lengthIdents;
          RAST._IExpr _out1106;
          bool _out1107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
          DCOMP.COMP.GenExpr(_3714_length, selfIdent, @params, true, out _out1106, out _out1107, out _out1108);
          _3718_lengthGen = _out1106;
          _3719___v67 = _out1107;
          _3720_lengthIdents = _out1108;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_3715_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_3718_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3717_recIdents, _3720_lengthIdents);
          isOwned = true;
        }
      } else if (_source78.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3721___mcc_h28 = _source78.dtor_elements;
        DAST._IType _3722___mcc_h29 = _source78.dtor_typ;
        DAST._IType _3723_typ = _3722___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3724_exprs = _3721___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _3725_genTpe;
          RAST._IType _out1109;
          _out1109 = DCOMP.COMP.GenType(_3723_typ, false, false);
          _3725_genTpe = _out1109;
          BigInteger _3726_i;
          _3726_i = BigInteger.Zero;
          Dafny.ISequence<Dafny.Rune> _3727_s;
          _3727_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3726_i = BigInteger.Zero;
          while ((_3726_i) < (new BigInteger((_3724_exprs).Count))) {
            if ((_3726_i).Sign == 1) {
              _3727_s = Dafny.Sequence<Dafny.Rune>.Concat(_3727_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _3728_recursiveGen;
            bool _3729___v68;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3730_recIdents;
            RAST._IExpr _out1110;
            bool _out1111;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
            DCOMP.COMP.GenExpr((_3724_exprs).Select(_3726_i), selfIdent, @params, true, out _out1110, out _out1111, out _out1112);
            _3728_recursiveGen = _out1110;
            _3729___v68 = _out1111;
            _3730_recIdents = _out1112;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3730_recIdents);
            _3727_s = Dafny.Sequence<Dafny.Rune>.Concat(_3727_s, (_3728_recursiveGen)._ToString(DCOMP.__default.IND));
            _3726_i = (_3726_i) + (BigInteger.One);
          }
          _3727_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3727_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), (_3725_genTpe)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_3727_s);
          isOwned = true;
        }
      } else if (_source78.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3731___mcc_h30 = _source78.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3732_exprs = _3731___mcc_h30;
        {
          Dafny.ISequence<RAST._IExpr> _3733_generatedValues;
          _3733_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3734_i;
          _3734_i = BigInteger.Zero;
          while ((_3734_i) < (new BigInteger((_3732_exprs).Count))) {
            RAST._IExpr _3735_recursiveGen;
            bool _3736___v69;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3737_recIdents;
            RAST._IExpr _out1113;
            bool _out1114;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1115;
            DCOMP.COMP.GenExpr((_3732_exprs).Select(_3734_i), selfIdent, @params, true, out _out1113, out _out1114, out _out1115);
            _3735_recursiveGen = _out1113;
            _3736___v69 = _out1114;
            _3737_recIdents = _out1115;
            _3733_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_3733_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_3735_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3737_recIdents);
            _3734_i = (_3734_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3738_s;
          _3738_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3734_i = BigInteger.Zero;
          while ((_3734_i) < (new BigInteger((_3733_generatedValues).Count))) {
            if ((_3734_i).Sign == 1) {
              _3738_s = Dafny.Sequence<Dafny.Rune>.Concat(_3738_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _3739_gen;
            _3739_gen = (_3733_generatedValues).Select(_3734_i);
            _3738_s = Dafny.Sequence<Dafny.Rune>.Concat(_3738_s, (_3739_gen)._ToString(DCOMP.__default.IND));
            _3734_i = (_3734_i) + (BigInteger.One);
          }
          _3738_s = Dafny.Sequence<Dafny.Rune>.Concat(_3738_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          r = RAST.Expr.create_RawExpr(_3738_s);
          isOwned = true;
        }
      } else if (_source78.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3740___mcc_h31 = _source78.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3741_mapElems = _3740___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _3742_generatedValues;
          _3742_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3743_i;
          _3743_i = BigInteger.Zero;
          while ((_3743_i) < (new BigInteger((_3741_mapElems).Count))) {
            RAST._IExpr _3744_recursiveGenKey;
            bool _3745___v70;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3746_recIdentsKey;
            RAST._IExpr _out1116;
            bool _out1117;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1118;
            DCOMP.COMP.GenExpr(((_3741_mapElems).Select(_3743_i)).dtor__0, selfIdent, @params, true, out _out1116, out _out1117, out _out1118);
            _3744_recursiveGenKey = _out1116;
            _3745___v70 = _out1117;
            _3746_recIdentsKey = _out1118;
            RAST._IExpr _3747_recursiveGenValue;
            bool _3748___v71;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3749_recIdentsValue;
            RAST._IExpr _out1119;
            bool _out1120;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
            DCOMP.COMP.GenExpr(((_3741_mapElems).Select(_3743_i)).dtor__1, selfIdent, @params, true, out _out1119, out _out1120, out _out1121);
            _3747_recursiveGenValue = _out1119;
            _3748___v71 = _out1120;
            _3749_recIdentsValue = _out1121;
            _3742_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_3742_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_3744_recursiveGenKey, _3747_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3746_recIdentsKey), _3749_recIdentsValue);
            _3743_i = (_3743_i) + (BigInteger.One);
          }
          _3743_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _3750_arguments;
          _3750_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_3743_i) < (new BigInteger((_3742_generatedValues).Count))) {
            RAST._IExpr _3751_genKey;
            _3751_genKey = ((_3742_generatedValues).Select(_3743_i)).dtor__0;
            RAST._IExpr _3752_genValue;
            _3752_genValue = ((_3742_generatedValues).Select(_3743_i)).dtor__1;
            _3750_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_3750_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Tuple(Dafny.Sequence<RAST._IExpr>.FromElements(_3751_genKey, _3752_genValue))));
            _3743_i = (_3743_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::Map::from_array_owned")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.__default.NewVec(_3750_arguments)));
          isOwned = true;
        }
      } else if (_source78.is_MapBuilder) {
        DAST._IType _3753___mcc_h32 = _source78.dtor_keyType;
        DAST._IType _3754___mcc_h33 = _source78.dtor_valueType;
        DAST._IType _3755_valueType = _3754___mcc_h33;
        DAST._IType _3756_keyType = _3753___mcc_h32;
        {
          RAST._IType _3757_kType;
          RAST._IType _out1122;
          _out1122 = DCOMP.COMP.GenType(_3756_keyType, false, false);
          _3757_kType = _out1122;
          RAST._IType _3758_vType;
          RAST._IType _out1123;
          _out1123 = DCOMP.COMP.GenType(_3755_valueType, false, false);
          _3758_vType = _out1123;
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_3757_kType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3758_vType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
        }
      } else if (_source78.is_SetBuilder) {
        DAST._IType _3759___mcc_h34 = _source78.dtor_elemType;
        DAST._IType _3760_elemType = _3759___mcc_h34;
        {
          RAST._IType _3761_eType;
          RAST._IType _out1124;
          _out1124 = DCOMP.COMP.GenType(_3760_elemType, false, false);
          _3761_eType = _out1124;
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_3761_eType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
        }
      } else if (_source78.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source145 = selfIdent;
          if (_source145.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3762___mcc_h1271 = _source145.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3763_id = _3762___mcc_h1271;
            {
              if (mustOwn) {
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(_3763_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()")));
                isOwned = true;
              } else {
                if ((_3763_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"));
                } else {
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3763_id));
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3763_id);
            }
          }
        }
      } else if (_source78.is_Ite) {
        DAST._IExpression _3764___mcc_h35 = _source78.dtor_cond;
        DAST._IExpression _3765___mcc_h36 = _source78.dtor_thn;
        DAST._IExpression _3766___mcc_h37 = _source78.dtor_els;
        DAST._IExpression _3767_f = _3766___mcc_h37;
        DAST._IExpression _3768_t = _3765___mcc_h36;
        DAST._IExpression _3769_cond = _3764___mcc_h35;
        {
          RAST._IExpr _3770_cond;
          bool _3771___v72;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3772_recIdentsCond;
          RAST._IExpr _out1125;
          bool _out1126;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1127;
          DCOMP.COMP.GenExpr(_3769_cond, selfIdent, @params, true, out _out1125, out _out1126, out _out1127);
          _3770_cond = _out1125;
          _3771___v72 = _out1126;
          _3772_recIdentsCond = _out1127;
          Dafny.ISequence<Dafny.Rune> _3773_condString;
          _3773_condString = (_3770_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _3774___v73;
          bool _3775_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3776___v74;
          RAST._IExpr _out1128;
          bool _out1129;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1130;
          DCOMP.COMP.GenExpr(_3768_t, selfIdent, @params, mustOwn, out _out1128, out _out1129, out _out1130);
          _3774___v73 = _out1128;
          _3775_tHasToBeOwned = _out1129;
          _3776___v74 = _out1130;
          RAST._IExpr _3777_fExpr;
          bool _3778_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3779_recIdentsF;
          RAST._IExpr _out1131;
          bool _out1132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
          DCOMP.COMP.GenExpr(_3767_f, selfIdent, @params, _3775_tHasToBeOwned, out _out1131, out _out1132, out _out1133);
          _3777_fExpr = _out1131;
          _3778_fOwned = _out1132;
          _3779_recIdentsF = _out1133;
          Dafny.ISequence<Dafny.Rune> _3780_fString;
          _3780_fString = (_3777_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _3781_tExpr;
          bool _3782___v75;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3783_recIdentsT;
          RAST._IExpr _out1134;
          bool _out1135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
          DCOMP.COMP.GenExpr(_3768_t, selfIdent, @params, _3778_fOwned, out _out1134, out _out1135, out _out1136);
          _3781_tExpr = _out1134;
          _3782___v75 = _out1135;
          _3783_recIdentsT = _out1136;
          Dafny.ISequence<Dafny.Rune> _3784_tString;
          _3784_tString = (_3781_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3773_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3784_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3780_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          isOwned = _3778_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3772_recIdentsCond, _3783_recIdentsT), _3779_recIdentsF);
        }
      } else if (_source78.is_UnOp) {
        DAST._IUnaryOp _3785___mcc_h38 = _source78.dtor_unOp;
        DAST._IExpression _3786___mcc_h39 = _source78.dtor_expr;
        DAST.Format._IUnOpFormat _3787___mcc_h40 = _source78.dtor_format1;
        DAST._IUnaryOp _source146 = _3785___mcc_h38;
        if (_source146.is_Not) {
          DAST.Format._IUnOpFormat _3788_format = _3787___mcc_h40;
          DAST._IExpression _3789_e = _3786___mcc_h39;
          {
            RAST._IExpr _3790_recursiveGen;
            bool _3791___v76;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3792_recIdents;
            RAST._IExpr _out1137;
            bool _out1138;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1139;
            DCOMP.COMP.GenExpr(_3789_e, selfIdent, @params, true, out _out1137, out _out1138, out _out1139);
            _3790_recursiveGen = _out1137;
            _3791___v76 = _out1138;
            _3792_recIdents = _out1139;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), (_3790_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            isOwned = true;
            readIdents = _3792_recIdents;
          }
        } else if (_source146.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _3793_format = _3787___mcc_h40;
          DAST._IExpression _3794_e = _3786___mcc_h39;
          {
            RAST._IExpr _3795_recursiveGen;
            bool _3796___v77;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3797_recIdents;
            RAST._IExpr _out1140;
            bool _out1141;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1142;
            DCOMP.COMP.GenExpr(_3794_e, selfIdent, @params, true, out _out1140, out _out1141, out _out1142);
            _3795_recursiveGen = _out1140;
            _3796___v77 = _out1141;
            _3797_recIdents = _out1142;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), (_3795_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
            isOwned = true;
            readIdents = _3797_recIdents;
          }
        } else {
          DAST.Format._IUnOpFormat _3798_format = _3787___mcc_h40;
          DAST._IExpression _3799_e = _3786___mcc_h39;
          {
            RAST._IExpr _3800_recursiveGen;
            bool _3801_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3802_recIdents;
            RAST._IExpr _out1143;
            bool _out1144;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
            DCOMP.COMP.GenExpr(_3799_e, selfIdent, @params, false, out _out1143, out _out1144, out _out1145);
            _3800_recursiveGen = _out1143;
            _3801_recOwned = _out1144;
            _3802_recIdents = _out1145;
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_3800_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"))));
            isOwned = true;
            readIdents = _3802_recIdents;
          }
        }
      } else if (_source78.is_BinOp) {
        DAST._IBinOp _3803___mcc_h41 = _source78.dtor_op;
        DAST._IExpression _3804___mcc_h42 = _source78.dtor_left;
        DAST._IExpression _3805___mcc_h43 = _source78.dtor_right;
        DAST.Format._IBinOpFormat _3806___mcc_h44 = _source78.dtor_format2;
        DAST.Format._IBinOpFormat _3807_format = _3806___mcc_h44;
        DAST._IExpression _3808_rExpr = _3805___mcc_h43;
        DAST._IExpression _3809_lExpr = _3804___mcc_h42;
        DAST._IBinOp _3810_op = _3803___mcc_h41;
        {
          RAST._IExpr _3811_left;
          bool _3812___v78;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3813_recIdentsL;
          RAST._IExpr _out1146;
          bool _out1147;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
          DCOMP.COMP.GenExpr(_3809_lExpr, selfIdent, @params, true, out _out1146, out _out1147, out _out1148);
          _3811_left = _out1146;
          _3812___v78 = _out1147;
          _3813_recIdentsL = _out1148;
          RAST._IExpr _3814_right;
          bool _3815___v79;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3816_recIdentsR;
          RAST._IExpr _out1149;
          bool _out1150;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1151;
          DCOMP.COMP.GenExpr(_3808_rExpr, selfIdent, @params, true, out _out1149, out _out1150, out _out1151);
          _3814_right = _out1149;
          _3815___v79 = _out1150;
          _3816_recIdentsR = _out1151;
          DAST._IBinOp _source147 = _3810_op;
          if (_source147.is_Eq) {
            bool _3817___mcc_h1272 = _source147.dtor_referential;
            bool _3818___mcc_h1273 = _source147.dtor_nullable;
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source148 = _3810_op;
                if (_source148.is_Eq) {
                  bool _3819___mcc_h1278 = _source148.dtor_referential;
                  bool _3820___mcc_h1279 = _source148.dtor_nullable;
                  bool _3821_nullable = _3820___mcc_h1279;
                  bool _3822_referential = _3819___mcc_h1278;
                  {
                    if (_3822_referential) {
                      if (_3821_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source148.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source148.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source148.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3823___mcc_h1280 = _source148.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3824_op = _3823___mcc_h1280;
                  {
                    r = RAST.Expr.create_BinaryOp(_3824_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_Div) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source149 = _3810_op;
                if (_source149.is_Eq) {
                  bool _3825___mcc_h1281 = _source149.dtor_referential;
                  bool _3826___mcc_h1282 = _source149.dtor_nullable;
                  bool _3827_nullable = _3826___mcc_h1282;
                  bool _3828_referential = _3825___mcc_h1281;
                  {
                    if (_3828_referential) {
                      if (_3827_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source149.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source149.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source149.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3829___mcc_h1283 = _source149.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3830_op = _3829___mcc_h1283;
                  {
                    r = RAST.Expr.create_BinaryOp(_3830_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_EuclidianDiv) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source150 = _3810_op;
                if (_source150.is_Eq) {
                  bool _3831___mcc_h1284 = _source150.dtor_referential;
                  bool _3832___mcc_h1285 = _source150.dtor_nullable;
                  bool _3833_nullable = _3832___mcc_h1285;
                  bool _3834_referential = _3831___mcc_h1284;
                  {
                    if (_3834_referential) {
                      if (_3833_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source150.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source150.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source150.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3835___mcc_h1286 = _source150.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3836_op = _3835___mcc_h1286;
                  {
                    r = RAST.Expr.create_BinaryOp(_3836_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_Mod) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source151 = _3810_op;
                if (_source151.is_Eq) {
                  bool _3837___mcc_h1287 = _source151.dtor_referential;
                  bool _3838___mcc_h1288 = _source151.dtor_nullable;
                  bool _3839_nullable = _3838___mcc_h1288;
                  bool _3840_referential = _3837___mcc_h1287;
                  {
                    if (_3840_referential) {
                      if (_3839_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source151.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source151.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source151.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3841___mcc_h1289 = _source151.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3842_op = _3841___mcc_h1289;
                  {
                    r = RAST.Expr.create_BinaryOp(_3842_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_EuclidianMod) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source152 = _3810_op;
                if (_source152.is_Eq) {
                  bool _3843___mcc_h1290 = _source152.dtor_referential;
                  bool _3844___mcc_h1291 = _source152.dtor_nullable;
                  bool _3845_nullable = _3844___mcc_h1291;
                  bool _3846_referential = _3843___mcc_h1290;
                  {
                    if (_3846_referential) {
                      if (_3845_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source152.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source152.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source152.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3847___mcc_h1292 = _source152.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3848_op = _3847___mcc_h1292;
                  {
                    r = RAST.Expr.create_BinaryOp(_3848_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_Lt) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source153 = _3810_op;
                if (_source153.is_Eq) {
                  bool _3849___mcc_h1293 = _source153.dtor_referential;
                  bool _3850___mcc_h1294 = _source153.dtor_nullable;
                  bool _3851_nullable = _3850___mcc_h1294;
                  bool _3852_referential = _3849___mcc_h1293;
                  {
                    if (_3852_referential) {
                      if (_3851_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source153.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source153.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source153.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3853___mcc_h1295 = _source153.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3854_op = _3853___mcc_h1295;
                  {
                    r = RAST.Expr.create_BinaryOp(_3854_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_LtChar) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source154 = _3810_op;
                if (_source154.is_Eq) {
                  bool _3855___mcc_h1296 = _source154.dtor_referential;
                  bool _3856___mcc_h1297 = _source154.dtor_nullable;
                  bool _3857_nullable = _3856___mcc_h1297;
                  bool _3858_referential = _3855___mcc_h1296;
                  {
                    if (_3858_referential) {
                      if (_3857_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source154.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source154.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source154.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3859___mcc_h1298 = _source154.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3860_op = _3859___mcc_h1298;
                  {
                    r = RAST.Expr.create_BinaryOp(_3860_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_Plus) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source155 = _3810_op;
                if (_source155.is_Eq) {
                  bool _3861___mcc_h1299 = _source155.dtor_referential;
                  bool _3862___mcc_h1300 = _source155.dtor_nullable;
                  bool _3863_nullable = _3862___mcc_h1300;
                  bool _3864_referential = _3861___mcc_h1299;
                  {
                    if (_3864_referential) {
                      if (_3863_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source155.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source155.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source155.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3865___mcc_h1301 = _source155.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3866_op = _3865___mcc_h1301;
                  {
                    r = RAST.Expr.create_BinaryOp(_3866_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_Minus) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source156 = _3810_op;
                if (_source156.is_Eq) {
                  bool _3867___mcc_h1302 = _source156.dtor_referential;
                  bool _3868___mcc_h1303 = _source156.dtor_nullable;
                  bool _3869_nullable = _3868___mcc_h1303;
                  bool _3870_referential = _3867___mcc_h1302;
                  {
                    if (_3870_referential) {
                      if (_3869_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source156.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source156.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source156.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3871___mcc_h1304 = _source156.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3872_op = _3871___mcc_h1304;
                  {
                    r = RAST.Expr.create_BinaryOp(_3872_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_Times) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source157 = _3810_op;
                if (_source157.is_Eq) {
                  bool _3873___mcc_h1305 = _source157.dtor_referential;
                  bool _3874___mcc_h1306 = _source157.dtor_nullable;
                  bool _3875_nullable = _3874___mcc_h1306;
                  bool _3876_referential = _3873___mcc_h1305;
                  {
                    if (_3876_referential) {
                      if (_3875_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source157.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source157.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source157.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3877___mcc_h1307 = _source157.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3878_op = _3877___mcc_h1307;
                  {
                    r = RAST.Expr.create_BinaryOp(_3878_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_BitwiseAnd) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source158 = _3810_op;
                if (_source158.is_Eq) {
                  bool _3879___mcc_h1308 = _source158.dtor_referential;
                  bool _3880___mcc_h1309 = _source158.dtor_nullable;
                  bool _3881_nullable = _3880___mcc_h1309;
                  bool _3882_referential = _3879___mcc_h1308;
                  {
                    if (_3882_referential) {
                      if (_3881_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source158.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source158.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source158.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3883___mcc_h1310 = _source158.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3884_op = _3883___mcc_h1310;
                  {
                    r = RAST.Expr.create_BinaryOp(_3884_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_BitwiseOr) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source159 = _3810_op;
                if (_source159.is_Eq) {
                  bool _3885___mcc_h1311 = _source159.dtor_referential;
                  bool _3886___mcc_h1312 = _source159.dtor_nullable;
                  bool _3887_nullable = _3886___mcc_h1312;
                  bool _3888_referential = _3885___mcc_h1311;
                  {
                    if (_3888_referential) {
                      if (_3887_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source159.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source159.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source159.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3889___mcc_h1313 = _source159.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3890_op = _3889___mcc_h1313;
                  {
                    r = RAST.Expr.create_BinaryOp(_3890_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_BitwiseXor) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source160 = _3810_op;
                if (_source160.is_Eq) {
                  bool _3891___mcc_h1314 = _source160.dtor_referential;
                  bool _3892___mcc_h1315 = _source160.dtor_nullable;
                  bool _3893_nullable = _3892___mcc_h1315;
                  bool _3894_referential = _3891___mcc_h1314;
                  {
                    if (_3894_referential) {
                      if (_3893_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source160.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source160.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source160.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3895___mcc_h1316 = _source160.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3896_op = _3895___mcc_h1316;
                  {
                    r = RAST.Expr.create_BinaryOp(_3896_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_BitwiseShiftRight) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source161 = _3810_op;
                if (_source161.is_Eq) {
                  bool _3897___mcc_h1317 = _source161.dtor_referential;
                  bool _3898___mcc_h1318 = _source161.dtor_nullable;
                  bool _3899_nullable = _3898___mcc_h1318;
                  bool _3900_referential = _3897___mcc_h1317;
                  {
                    if (_3900_referential) {
                      if (_3899_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source161.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source161.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source161.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3901___mcc_h1319 = _source161.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3902_op = _3901___mcc_h1319;
                  {
                    r = RAST.Expr.create_BinaryOp(_3902_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_BitwiseShiftLeft) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source162 = _3810_op;
                if (_source162.is_Eq) {
                  bool _3903___mcc_h1320 = _source162.dtor_referential;
                  bool _3904___mcc_h1321 = _source162.dtor_nullable;
                  bool _3905_nullable = _3904___mcc_h1321;
                  bool _3906_referential = _3903___mcc_h1320;
                  {
                    if (_3906_referential) {
                      if (_3905_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source162.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source162.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source162.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3907___mcc_h1322 = _source162.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3908_op = _3907___mcc_h1322;
                  {
                    r = RAST.Expr.create_BinaryOp(_3908_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_And) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source163 = _3810_op;
                if (_source163.is_Eq) {
                  bool _3909___mcc_h1323 = _source163.dtor_referential;
                  bool _3910___mcc_h1324 = _source163.dtor_nullable;
                  bool _3911_nullable = _3910___mcc_h1324;
                  bool _3912_referential = _3909___mcc_h1323;
                  {
                    if (_3912_referential) {
                      if (_3911_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source163.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source163.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source163.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3913___mcc_h1325 = _source163.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3914_op = _3913___mcc_h1325;
                  {
                    r = RAST.Expr.create_BinaryOp(_3914_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_Or) {
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source164 = _3810_op;
                if (_source164.is_Eq) {
                  bool _3915___mcc_h1326 = _source164.dtor_referential;
                  bool _3916___mcc_h1327 = _source164.dtor_nullable;
                  bool _3917_nullable = _3916___mcc_h1327;
                  bool _3918_referential = _3915___mcc_h1326;
                  {
                    if (_3918_referential) {
                      if (_3917_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source164.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source164.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source164.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3919___mcc_h1328 = _source164.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3920_op = _3919___mcc_h1328;
                  {
                    r = RAST.Expr.create_BinaryOp(_3920_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          } else if (_source147.is_In) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_3814_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left)));
            }
          } else if (_source147.is_SetDifference) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_3811_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("difference")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3814_right)));
            }
          } else if (_source147.is_MapMerge) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_3811_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add_multiple")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3814_right)));
            }
          } else if (_source147.is_MapSubtraction) {
            {
              r = RAST.Expr.create_Call(RAST.Expr.create_Select(_3811_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("substract")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3814_right)));
            }
          } else if (_source147.is_Concat) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), (_3811_left)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_3814_right)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()")));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3921___mcc_h1276 = _source147.dtor_Passthrough_a0;
            {
              if ((DCOMP.COMP.OpTable).Contains(_3810_op)) {
                r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable, _3810_op), _3811_left, _3814_right, _3807_format);
              } else {
                DAST._IBinOp _source165 = _3810_op;
                if (_source165.is_Eq) {
                  bool _3922___mcc_h1329 = _source165.dtor_referential;
                  bool _3923___mcc_h1330 = _source165.dtor_nullable;
                  bool _3924_nullable = _3923___mcc_h1330;
                  bool _3925_referential = _3922___mcc_h1329;
                  {
                    if (_3925_referential) {
                      if (_3924_nullable) {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                      } else {
                        r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Borrow(_3811_left), RAST.Expr.create_Borrow(_3814_right)));
                      }
                    } else {
                      r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3811_left, _3814_right, DAST.Format.BinOpFormat.create_NoFormat());
                    }
                  }
                } else if (_source165.is_EuclidianDiv) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source165.is_EuclidianMod) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else if (_source165.is_LtChar) {
                  {
                    r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::char_lt")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements(_3811_left, _3814_right));
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _3926___mcc_h1331 = _source165.dtor_Passthrough_a0;
                  Dafny.ISequence<Dafny.Rune> _3927_op = _3926___mcc_h1331;
                  {
                    r = RAST.Expr.create_BinaryOp(_3927_op, _3811_left, _3814_right, _3807_format);
                  }
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3813_recIdentsL, _3816_recIdentsR);
        }
      } else if (_source78.is_ArrayLen) {
        DAST._IExpression _3928___mcc_h45 = _source78.dtor_expr;
        BigInteger _3929___mcc_h46 = _source78.dtor_dim;
        BigInteger _3930_dim = _3929___mcc_h46;
        DAST._IExpression _3931_expr = _3928___mcc_h45;
        {
          RAST._IExpr _3932_recursiveGen;
          bool _3933___v81;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3934_recIdents;
          RAST._IExpr _out1152;
          bool _out1153;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1154;
          DCOMP.COMP.GenExpr(_3931_expr, selfIdent, @params, true, out _out1152, out _out1153, out _out1154);
          _3932_recursiveGen = _out1152;
          _3933___v81 = _out1153;
          _3934_recIdents = _out1154;
          if ((_3930_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_3932_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _3935_s;
            _3935_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMP.__default.IND);
            BigInteger _3936_i;
            _3936_i = BigInteger.One;
            while ((_3936_i) < (_3930_dim)) {
              _3935_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _3935_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3936_i = (_3936_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3932_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _3935_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          isOwned = true;
          readIdents = _3934_recIdents;
        }
      } else if (_source78.is_MapKeys) {
        DAST._IExpression _3937___mcc_h47 = _source78.dtor_expr;
        DAST._IExpression _3938_expr = _3937___mcc_h47;
        {
          RAST._IExpr _3939_recursiveGen;
          bool _3940___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3941_recIdents;
          RAST._IExpr _out1155;
          bool _out1156;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
          DCOMP.COMP.GenExpr(_3938_expr, selfIdent, @params, true, out _out1155, out _out1156, out _out1157);
          _3939_recursiveGen = _out1155;
          _3940___v82 = _out1156;
          _3941_recIdents = _out1157;
          isOwned = true;
          readIdents = _3941_recIdents;
          r = RAST.Expr.create_Call(RAST.Expr.create_Select(_3939_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
        }
      } else if (_source78.is_MapValues) {
        DAST._IExpression _3942___mcc_h48 = _source78.dtor_expr;
        DAST._IExpression _3943_expr = _3942___mcc_h48;
        {
          RAST._IExpr _3944_recursiveGen;
          bool _3945___v83;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3946_recIdents;
          RAST._IExpr _out1158;
          bool _out1159;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1160;
          DCOMP.COMP.GenExpr(_3943_expr, selfIdent, @params, true, out _out1158, out _out1159, out _out1160);
          _3944_recursiveGen = _out1158;
          _3945___v83 = _out1159;
          _3946_recIdents = _out1160;
          isOwned = true;
          readIdents = _3946_recIdents;
          r = RAST.Expr.create_Call(RAST.Expr.create_Select(_3944_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values")), Dafny.Sequence<RAST._IType>.FromElements(), Dafny.Sequence<RAST._IExpr>.FromElements());
        }
      } else if (_source78.is_Select) {
        DAST._IExpression _3947___mcc_h49 = _source78.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3948___mcc_h50 = _source78.dtor_field;
        bool _3949___mcc_h51 = _source78.dtor_isConstant;
        bool _3950___mcc_h52 = _source78.dtor_onDatatype;
        DAST._IExpression _source166 = _3947___mcc_h49;
        if (_source166.is_Literal) {
          DAST._ILiteral _3951___mcc_h53 = _source166.dtor_Literal_a0;
          bool _3952_isDatatype = _3950___mcc_h52;
          bool _3953_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _3954_field = _3948___mcc_h50;
          DAST._IExpression _3955_on = _3947___mcc_h49;
          {
            RAST._IExpr _3956_onExpr;
            bool _3957_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3958_recIdents;
            RAST._IExpr _out1161;
            bool _out1162;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1163;
            DCOMP.COMP.GenExpr(_3955_on, selfIdent, @params, false, out _out1161, out _out1162, out _out1163);
            _3956_onExpr = _out1161;
            _3957_onOwned = _out1162;
            _3958_recIdents = _out1163;
            Dafny.ISequence<Dafny.Rune> _3959_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3952_isDatatype) || (_3953_isConstant)) {
              _3959_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3956_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3954_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3953_isConstant) {
                _3959_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3959_s);
              }
              if (mustOwn) {
                _3959_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3959_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3959_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3956_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3954_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3959_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3959_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3959_s);
            readIdents = _3958_recIdents;
          }
        } else if (_source166.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3960___mcc_h55 = _source166.dtor_Ident_a0;
          bool _3961_isDatatype = _3950___mcc_h52;
          bool _3962_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _3963_field = _3948___mcc_h50;
          DAST._IExpression _3964_on = _3947___mcc_h49;
          {
            RAST._IExpr _3965_onExpr;
            bool _3966_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3967_recIdents;
            RAST._IExpr _out1164;
            bool _out1165;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
            DCOMP.COMP.GenExpr(_3964_on, selfIdent, @params, false, out _out1164, out _out1165, out _out1166);
            _3965_onExpr = _out1164;
            _3966_onOwned = _out1165;
            _3967_recIdents = _out1166;
            Dafny.ISequence<Dafny.Rune> _3968_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3961_isDatatype) || (_3962_isConstant)) {
              _3968_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3965_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3963_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3962_isConstant) {
                _3968_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3968_s);
              }
              if (mustOwn) {
                _3968_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3968_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3968_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3965_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3963_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3968_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3968_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3968_s);
            readIdents = _3967_recIdents;
          }
        } else if (_source166.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3969___mcc_h57 = _source166.dtor_Companion_a0;
          bool _3970_isDatatype = _3950___mcc_h52;
          bool _3971_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _3972_field = _3948___mcc_h50;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3973_c = _3969___mcc_h57;
          {
            RAST._IExpr _3974_onExpr;
            bool _3975_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3976_recIdents;
            RAST._IExpr _out1167;
            bool _out1168;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3973_c), selfIdent, @params, false, out _out1167, out _out1168, out _out1169);
            _3974_onExpr = _out1167;
            _3975_onOwned = _out1168;
            _3976_recIdents = _out1169;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3974_onExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3972_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            isOwned = true;
            readIdents = _3976_recIdents;
          }
        } else if (_source166.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3977___mcc_h59 = _source166.dtor_Tuple_a0;
          bool _3978_isDatatype = _3950___mcc_h52;
          bool _3979_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _3980_field = _3948___mcc_h50;
          DAST._IExpression _3981_on = _3947___mcc_h49;
          {
            RAST._IExpr _3982_onExpr;
            bool _3983_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3984_recIdents;
            RAST._IExpr _out1170;
            bool _out1171;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1172;
            DCOMP.COMP.GenExpr(_3981_on, selfIdent, @params, false, out _out1170, out _out1171, out _out1172);
            _3982_onExpr = _out1170;
            _3983_onOwned = _out1171;
            _3984_recIdents = _out1172;
            Dafny.ISequence<Dafny.Rune> _3985_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3978_isDatatype) || (_3979_isConstant)) {
              _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3982_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3980_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3979_isConstant) {
                _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3985_s);
              }
              if (mustOwn) {
                _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3985_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3982_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3980_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3985_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3985_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3985_s);
            readIdents = _3984_recIdents;
          }
        } else if (_source166.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3986___mcc_h61 = _source166.dtor_path;
          Dafny.ISequence<DAST._IType> _3987___mcc_h62 = _source166.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3988___mcc_h63 = _source166.dtor_args;
          bool _3989_isDatatype = _3950___mcc_h52;
          bool _3990_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _3991_field = _3948___mcc_h50;
          DAST._IExpression _3992_on = _3947___mcc_h49;
          {
            RAST._IExpr _3993_onExpr;
            bool _3994_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3995_recIdents;
            RAST._IExpr _out1173;
            bool _out1174;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1175;
            DCOMP.COMP.GenExpr(_3992_on, selfIdent, @params, false, out _out1173, out _out1174, out _out1175);
            _3993_onExpr = _out1173;
            _3994_onOwned = _out1174;
            _3995_recIdents = _out1175;
            Dafny.ISequence<Dafny.Rune> _3996_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3989_isDatatype) || (_3990_isConstant)) {
              _3996_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3993_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3991_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3990_isConstant) {
                _3996_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3996_s);
              }
              if (mustOwn) {
                _3996_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3996_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _3996_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_3993_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3991_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _3996_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3996_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_3996_s);
            readIdents = _3995_recIdents;
          }
        } else if (_source166.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3997___mcc_h67 = _source166.dtor_dims;
          DAST._IType _3998___mcc_h68 = _source166.dtor_typ;
          bool _3999_isDatatype = _3950___mcc_h52;
          bool _4000_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4001_field = _3948___mcc_h50;
          DAST._IExpression _4002_on = _3947___mcc_h49;
          {
            RAST._IExpr _4003_onExpr;
            bool _4004_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4005_recIdents;
            RAST._IExpr _out1176;
            bool _out1177;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
            DCOMP.COMP.GenExpr(_4002_on, selfIdent, @params, false, out _out1176, out _out1177, out _out1178);
            _4003_onExpr = _out1176;
            _4004_onOwned = _out1177;
            _4005_recIdents = _out1178;
            Dafny.ISequence<Dafny.Rune> _4006_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_3999_isDatatype) || (_4000_isConstant)) {
              _4006_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4003_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4001_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4000_isConstant) {
                _4006_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4006_s);
              }
              if (mustOwn) {
                _4006_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4006_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4006_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4003_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4001_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4006_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4006_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4006_s);
            readIdents = _4005_recIdents;
          }
        } else if (_source166.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4007___mcc_h71 = _source166.dtor_path;
          Dafny.ISequence<DAST._IType> _4008___mcc_h72 = _source166.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _4009___mcc_h73 = _source166.dtor_variant;
          bool _4010___mcc_h74 = _source166.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4011___mcc_h75 = _source166.dtor_contents;
          bool _4012_isDatatype = _3950___mcc_h52;
          bool _4013_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4014_field = _3948___mcc_h50;
          DAST._IExpression _4015_on = _3947___mcc_h49;
          {
            RAST._IExpr _4016_onExpr;
            bool _4017_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4018_recIdents;
            RAST._IExpr _out1179;
            bool _out1180;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
            DCOMP.COMP.GenExpr(_4015_on, selfIdent, @params, false, out _out1179, out _out1180, out _out1181);
            _4016_onExpr = _out1179;
            _4017_onOwned = _out1180;
            _4018_recIdents = _out1181;
            Dafny.ISequence<Dafny.Rune> _4019_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4012_isDatatype) || (_4013_isConstant)) {
              _4019_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4016_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4014_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4013_isConstant) {
                _4019_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4019_s);
              }
              if (mustOwn) {
                _4019_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4019_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4019_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4016_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4014_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4019_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4019_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4019_s);
            readIdents = _4018_recIdents;
          }
        } else if (_source166.is_Convert) {
          DAST._IExpression _4020___mcc_h81 = _source166.dtor_value;
          DAST._IType _4021___mcc_h82 = _source166.dtor_from;
          DAST._IType _4022___mcc_h83 = _source166.dtor_typ;
          bool _4023_isDatatype = _3950___mcc_h52;
          bool _4024_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4025_field = _3948___mcc_h50;
          DAST._IExpression _4026_on = _3947___mcc_h49;
          {
            RAST._IExpr _4027_onExpr;
            bool _4028_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4029_recIdents;
            RAST._IExpr _out1182;
            bool _out1183;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1184;
            DCOMP.COMP.GenExpr(_4026_on, selfIdent, @params, false, out _out1182, out _out1183, out _out1184);
            _4027_onExpr = _out1182;
            _4028_onOwned = _out1183;
            _4029_recIdents = _out1184;
            Dafny.ISequence<Dafny.Rune> _4030_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4023_isDatatype) || (_4024_isConstant)) {
              _4030_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4027_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4025_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4024_isConstant) {
                _4030_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4030_s);
              }
              if (mustOwn) {
                _4030_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4030_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4030_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4027_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4025_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4030_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4030_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4030_s);
            readIdents = _4029_recIdents;
          }
        } else if (_source166.is_SeqConstruct) {
          DAST._IExpression _4031___mcc_h87 = _source166.dtor_length;
          DAST._IExpression _4032___mcc_h88 = _source166.dtor_elem;
          bool _4033_isDatatype = _3950___mcc_h52;
          bool _4034_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4035_field = _3948___mcc_h50;
          DAST._IExpression _4036_on = _3947___mcc_h49;
          {
            RAST._IExpr _4037_onExpr;
            bool _4038_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4039_recIdents;
            RAST._IExpr _out1185;
            bool _out1186;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1187;
            DCOMP.COMP.GenExpr(_4036_on, selfIdent, @params, false, out _out1185, out _out1186, out _out1187);
            _4037_onExpr = _out1185;
            _4038_onOwned = _out1186;
            _4039_recIdents = _out1187;
            Dafny.ISequence<Dafny.Rune> _4040_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4033_isDatatype) || (_4034_isConstant)) {
              _4040_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4037_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4035_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4034_isConstant) {
                _4040_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4040_s);
              }
              if (mustOwn) {
                _4040_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4040_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4040_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4037_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4035_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4040_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4040_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4040_s);
            readIdents = _4039_recIdents;
          }
        } else if (_source166.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _4041___mcc_h91 = _source166.dtor_elements;
          DAST._IType _4042___mcc_h92 = _source166.dtor_typ;
          bool _4043_isDatatype = _3950___mcc_h52;
          bool _4044_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4045_field = _3948___mcc_h50;
          DAST._IExpression _4046_on = _3947___mcc_h49;
          {
            RAST._IExpr _4047_onExpr;
            bool _4048_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4049_recIdents;
            RAST._IExpr _out1188;
            bool _out1189;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
            DCOMP.COMP.GenExpr(_4046_on, selfIdent, @params, false, out _out1188, out _out1189, out _out1190);
            _4047_onExpr = _out1188;
            _4048_onOwned = _out1189;
            _4049_recIdents = _out1190;
            Dafny.ISequence<Dafny.Rune> _4050_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4043_isDatatype) || (_4044_isConstant)) {
              _4050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4047_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4045_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4044_isConstant) {
                _4050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4050_s);
              }
              if (mustOwn) {
                _4050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4050_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4047_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4045_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4050_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4050_s);
            readIdents = _4049_recIdents;
          }
        } else if (_source166.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _4051___mcc_h95 = _source166.dtor_elements;
          bool _4052_isDatatype = _3950___mcc_h52;
          bool _4053_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4054_field = _3948___mcc_h50;
          DAST._IExpression _4055_on = _3947___mcc_h49;
          {
            RAST._IExpr _4056_onExpr;
            bool _4057_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4058_recIdents;
            RAST._IExpr _out1191;
            bool _out1192;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
            DCOMP.COMP.GenExpr(_4055_on, selfIdent, @params, false, out _out1191, out _out1192, out _out1193);
            _4056_onExpr = _out1191;
            _4057_onOwned = _out1192;
            _4058_recIdents = _out1193;
            Dafny.ISequence<Dafny.Rune> _4059_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4052_isDatatype) || (_4053_isConstant)) {
              _4059_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4056_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4054_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4053_isConstant) {
                _4059_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4059_s);
              }
              if (mustOwn) {
                _4059_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4059_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4059_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4056_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4054_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4059_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4059_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4059_s);
            readIdents = _4058_recIdents;
          }
        } else if (_source166.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4060___mcc_h97 = _source166.dtor_mapElems;
          bool _4061_isDatatype = _3950___mcc_h52;
          bool _4062_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4063_field = _3948___mcc_h50;
          DAST._IExpression _4064_on = _3947___mcc_h49;
          {
            RAST._IExpr _4065_onExpr;
            bool _4066_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4067_recIdents;
            RAST._IExpr _out1194;
            bool _out1195;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
            DCOMP.COMP.GenExpr(_4064_on, selfIdent, @params, false, out _out1194, out _out1195, out _out1196);
            _4065_onExpr = _out1194;
            _4066_onOwned = _out1195;
            _4067_recIdents = _out1196;
            Dafny.ISequence<Dafny.Rune> _4068_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4061_isDatatype) || (_4062_isConstant)) {
              _4068_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4065_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4063_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4062_isConstant) {
                _4068_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4068_s);
              }
              if (mustOwn) {
                _4068_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4068_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4068_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4065_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4063_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4068_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4068_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4068_s);
            readIdents = _4067_recIdents;
          }
        } else if (_source166.is_MapBuilder) {
          DAST._IType _4069___mcc_h99 = _source166.dtor_keyType;
          DAST._IType _4070___mcc_h100 = _source166.dtor_valueType;
          bool _4071_isDatatype = _3950___mcc_h52;
          bool _4072_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4073_field = _3948___mcc_h50;
          DAST._IExpression _4074_on = _3947___mcc_h49;
          {
            RAST._IExpr _4075_onExpr;
            bool _4076_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4077_recIdents;
            RAST._IExpr _out1197;
            bool _out1198;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1199;
            DCOMP.COMP.GenExpr(_4074_on, selfIdent, @params, false, out _out1197, out _out1198, out _out1199);
            _4075_onExpr = _out1197;
            _4076_onOwned = _out1198;
            _4077_recIdents = _out1199;
            Dafny.ISequence<Dafny.Rune> _4078_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4071_isDatatype) || (_4072_isConstant)) {
              _4078_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4075_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4073_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4072_isConstant) {
                _4078_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4078_s);
              }
              if (mustOwn) {
                _4078_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4078_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4078_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4075_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4073_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4078_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4078_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4078_s);
            readIdents = _4077_recIdents;
          }
        } else if (_source166.is_SetBuilder) {
          DAST._IType _4079___mcc_h103 = _source166.dtor_elemType;
          bool _4080_isDatatype = _3950___mcc_h52;
          bool _4081_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4082_field = _3948___mcc_h50;
          DAST._IExpression _4083_on = _3947___mcc_h49;
          {
            RAST._IExpr _4084_onExpr;
            bool _4085_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4086_recIdents;
            RAST._IExpr _out1200;
            bool _out1201;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
            DCOMP.COMP.GenExpr(_4083_on, selfIdent, @params, false, out _out1200, out _out1201, out _out1202);
            _4084_onExpr = _out1200;
            _4085_onOwned = _out1201;
            _4086_recIdents = _out1202;
            Dafny.ISequence<Dafny.Rune> _4087_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4080_isDatatype) || (_4081_isConstant)) {
              _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4084_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4082_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4081_isConstant) {
                _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4087_s);
              }
              if (mustOwn) {
                _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4087_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4084_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4082_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4087_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4087_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4087_s);
            readIdents = _4086_recIdents;
          }
        } else if (_source166.is_This) {
          bool _4088_isDatatype = _3950___mcc_h52;
          bool _4089_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4090_field = _3948___mcc_h50;
          DAST._IExpression _4091_on = _3947___mcc_h49;
          {
            RAST._IExpr _4092_onExpr;
            bool _4093_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4094_recIdents;
            RAST._IExpr _out1203;
            bool _out1204;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
            DCOMP.COMP.GenExpr(_4091_on, selfIdent, @params, false, out _out1203, out _out1204, out _out1205);
            _4092_onExpr = _out1203;
            _4093_onOwned = _out1204;
            _4094_recIdents = _out1205;
            Dafny.ISequence<Dafny.Rune> _4095_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4088_isDatatype) || (_4089_isConstant)) {
              _4095_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4092_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4090_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4089_isConstant) {
                _4095_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4095_s);
              }
              if (mustOwn) {
                _4095_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4095_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4095_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4092_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4090_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4095_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4095_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4095_s);
            readIdents = _4094_recIdents;
          }
        } else if (_source166.is_Ite) {
          DAST._IExpression _4096___mcc_h105 = _source166.dtor_cond;
          DAST._IExpression _4097___mcc_h106 = _source166.dtor_thn;
          DAST._IExpression _4098___mcc_h107 = _source166.dtor_els;
          bool _4099_isDatatype = _3950___mcc_h52;
          bool _4100_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4101_field = _3948___mcc_h50;
          DAST._IExpression _4102_on = _3947___mcc_h49;
          {
            RAST._IExpr _4103_onExpr;
            bool _4104_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4105_recIdents;
            RAST._IExpr _out1206;
            bool _out1207;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1208;
            DCOMP.COMP.GenExpr(_4102_on, selfIdent, @params, false, out _out1206, out _out1207, out _out1208);
            _4103_onExpr = _out1206;
            _4104_onOwned = _out1207;
            _4105_recIdents = _out1208;
            Dafny.ISequence<Dafny.Rune> _4106_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4099_isDatatype) || (_4100_isConstant)) {
              _4106_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4103_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4101_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4100_isConstant) {
                _4106_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4106_s);
              }
              if (mustOwn) {
                _4106_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4106_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4106_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4103_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4101_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4106_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4106_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4106_s);
            readIdents = _4105_recIdents;
          }
        } else if (_source166.is_UnOp) {
          DAST._IUnaryOp _4107___mcc_h111 = _source166.dtor_unOp;
          DAST._IExpression _4108___mcc_h112 = _source166.dtor_expr;
          DAST.Format._IUnOpFormat _4109___mcc_h113 = _source166.dtor_format1;
          bool _4110_isDatatype = _3950___mcc_h52;
          bool _4111_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4112_field = _3948___mcc_h50;
          DAST._IExpression _4113_on = _3947___mcc_h49;
          {
            RAST._IExpr _4114_onExpr;
            bool _4115_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4116_recIdents;
            RAST._IExpr _out1209;
            bool _out1210;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1211;
            DCOMP.COMP.GenExpr(_4113_on, selfIdent, @params, false, out _out1209, out _out1210, out _out1211);
            _4114_onExpr = _out1209;
            _4115_onOwned = _out1210;
            _4116_recIdents = _out1211;
            Dafny.ISequence<Dafny.Rune> _4117_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4110_isDatatype) || (_4111_isConstant)) {
              _4117_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4114_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4112_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4111_isConstant) {
                _4117_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4117_s);
              }
              if (mustOwn) {
                _4117_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4117_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4117_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4114_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4112_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4117_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4117_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4117_s);
            readIdents = _4116_recIdents;
          }
        } else if (_source166.is_BinOp) {
          DAST._IBinOp _4118___mcc_h117 = _source166.dtor_op;
          DAST._IExpression _4119___mcc_h118 = _source166.dtor_left;
          DAST._IExpression _4120___mcc_h119 = _source166.dtor_right;
          DAST.Format._IBinOpFormat _4121___mcc_h120 = _source166.dtor_format2;
          bool _4122_isDatatype = _3950___mcc_h52;
          bool _4123_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4124_field = _3948___mcc_h50;
          DAST._IExpression _4125_on = _3947___mcc_h49;
          {
            RAST._IExpr _4126_onExpr;
            bool _4127_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4128_recIdents;
            RAST._IExpr _out1212;
            bool _out1213;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
            DCOMP.COMP.GenExpr(_4125_on, selfIdent, @params, false, out _out1212, out _out1213, out _out1214);
            _4126_onExpr = _out1212;
            _4127_onOwned = _out1213;
            _4128_recIdents = _out1214;
            Dafny.ISequence<Dafny.Rune> _4129_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4122_isDatatype) || (_4123_isConstant)) {
              _4129_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4126_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4124_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4123_isConstant) {
                _4129_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4129_s);
              }
              if (mustOwn) {
                _4129_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4129_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4129_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4126_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4124_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4129_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4129_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4129_s);
            readIdents = _4128_recIdents;
          }
        } else if (_source166.is_ArrayLen) {
          DAST._IExpression _4130___mcc_h125 = _source166.dtor_expr;
          BigInteger _4131___mcc_h126 = _source166.dtor_dim;
          bool _4132_isDatatype = _3950___mcc_h52;
          bool _4133_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4134_field = _3948___mcc_h50;
          DAST._IExpression _4135_on = _3947___mcc_h49;
          {
            RAST._IExpr _4136_onExpr;
            bool _4137_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4138_recIdents;
            RAST._IExpr _out1215;
            bool _out1216;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
            DCOMP.COMP.GenExpr(_4135_on, selfIdent, @params, false, out _out1215, out _out1216, out _out1217);
            _4136_onExpr = _out1215;
            _4137_onOwned = _out1216;
            _4138_recIdents = _out1217;
            Dafny.ISequence<Dafny.Rune> _4139_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4132_isDatatype) || (_4133_isConstant)) {
              _4139_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4136_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4134_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4133_isConstant) {
                _4139_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4139_s);
              }
              if (mustOwn) {
                _4139_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4139_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4139_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4136_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4134_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4139_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4139_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4139_s);
            readIdents = _4138_recIdents;
          }
        } else if (_source166.is_MapKeys) {
          DAST._IExpression _4140___mcc_h129 = _source166.dtor_expr;
          bool _4141_isDatatype = _3950___mcc_h52;
          bool _4142_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4143_field = _3948___mcc_h50;
          DAST._IExpression _4144_on = _3947___mcc_h49;
          {
            RAST._IExpr _4145_onExpr;
            bool _4146_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4147_recIdents;
            RAST._IExpr _out1218;
            bool _out1219;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1220;
            DCOMP.COMP.GenExpr(_4144_on, selfIdent, @params, false, out _out1218, out _out1219, out _out1220);
            _4145_onExpr = _out1218;
            _4146_onOwned = _out1219;
            _4147_recIdents = _out1220;
            Dafny.ISequence<Dafny.Rune> _4148_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4141_isDatatype) || (_4142_isConstant)) {
              _4148_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4145_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4143_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4142_isConstant) {
                _4148_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4148_s);
              }
              if (mustOwn) {
                _4148_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4148_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4148_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4145_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4143_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4148_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4148_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4148_s);
            readIdents = _4147_recIdents;
          }
        } else if (_source166.is_MapValues) {
          DAST._IExpression _4149___mcc_h131 = _source166.dtor_expr;
          bool _4150_isDatatype = _3950___mcc_h52;
          bool _4151_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4152_field = _3948___mcc_h50;
          DAST._IExpression _4153_on = _3947___mcc_h49;
          {
            RAST._IExpr _4154_onExpr;
            bool _4155_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4156_recIdents;
            RAST._IExpr _out1221;
            bool _out1222;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1223;
            DCOMP.COMP.GenExpr(_4153_on, selfIdent, @params, false, out _out1221, out _out1222, out _out1223);
            _4154_onExpr = _out1221;
            _4155_onOwned = _out1222;
            _4156_recIdents = _out1223;
            Dafny.ISequence<Dafny.Rune> _4157_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4150_isDatatype) || (_4151_isConstant)) {
              _4157_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4154_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4152_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4151_isConstant) {
                _4157_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4157_s);
              }
              if (mustOwn) {
                _4157_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4157_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4157_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4154_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4152_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4157_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4157_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4157_s);
            readIdents = _4156_recIdents;
          }
        } else if (_source166.is_Select) {
          DAST._IExpression _4158___mcc_h133 = _source166.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4159___mcc_h134 = _source166.dtor_field;
          bool _4160___mcc_h135 = _source166.dtor_isConstant;
          bool _4161___mcc_h136 = _source166.dtor_onDatatype;
          bool _4162_isDatatype = _3950___mcc_h52;
          bool _4163_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4164_field = _3948___mcc_h50;
          DAST._IExpression _4165_on = _3947___mcc_h49;
          {
            RAST._IExpr _4166_onExpr;
            bool _4167_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4168_recIdents;
            RAST._IExpr _out1224;
            bool _out1225;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
            DCOMP.COMP.GenExpr(_4165_on, selfIdent, @params, false, out _out1224, out _out1225, out _out1226);
            _4166_onExpr = _out1224;
            _4167_onOwned = _out1225;
            _4168_recIdents = _out1226;
            Dafny.ISequence<Dafny.Rune> _4169_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4162_isDatatype) || (_4163_isConstant)) {
              _4169_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4166_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4164_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4163_isConstant) {
                _4169_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4169_s);
              }
              if (mustOwn) {
                _4169_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4169_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4169_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4166_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4164_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4169_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4169_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4169_s);
            readIdents = _4168_recIdents;
          }
        } else if (_source166.is_SelectFn) {
          DAST._IExpression _4170___mcc_h141 = _source166.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _4171___mcc_h142 = _source166.dtor_field;
          bool _4172___mcc_h143 = _source166.dtor_onDatatype;
          bool _4173___mcc_h144 = _source166.dtor_isStatic;
          BigInteger _4174___mcc_h145 = _source166.dtor_arity;
          bool _4175_isDatatype = _3950___mcc_h52;
          bool _4176_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4177_field = _3948___mcc_h50;
          DAST._IExpression _4178_on = _3947___mcc_h49;
          {
            RAST._IExpr _4179_onExpr;
            bool _4180_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4181_recIdents;
            RAST._IExpr _out1227;
            bool _out1228;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
            DCOMP.COMP.GenExpr(_4178_on, selfIdent, @params, false, out _out1227, out _out1228, out _out1229);
            _4179_onExpr = _out1227;
            _4180_onOwned = _out1228;
            _4181_recIdents = _out1229;
            Dafny.ISequence<Dafny.Rune> _4182_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4175_isDatatype) || (_4176_isConstant)) {
              _4182_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4179_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4177_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4176_isConstant) {
                _4182_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4182_s);
              }
              if (mustOwn) {
                _4182_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4182_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4182_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4179_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4177_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4182_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4182_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4182_s);
            readIdents = _4181_recIdents;
          }
        } else if (_source166.is_Index) {
          DAST._IExpression _4183___mcc_h151 = _source166.dtor_expr;
          DAST._ICollKind _4184___mcc_h152 = _source166.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _4185___mcc_h153 = _source166.dtor_indices;
          bool _4186_isDatatype = _3950___mcc_h52;
          bool _4187_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4188_field = _3948___mcc_h50;
          DAST._IExpression _4189_on = _3947___mcc_h49;
          {
            RAST._IExpr _4190_onExpr;
            bool _4191_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4192_recIdents;
            RAST._IExpr _out1230;
            bool _out1231;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1232;
            DCOMP.COMP.GenExpr(_4189_on, selfIdent, @params, false, out _out1230, out _out1231, out _out1232);
            _4190_onExpr = _out1230;
            _4191_onOwned = _out1231;
            _4192_recIdents = _out1232;
            Dafny.ISequence<Dafny.Rune> _4193_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4186_isDatatype) || (_4187_isConstant)) {
              _4193_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4190_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4188_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4187_isConstant) {
                _4193_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4193_s);
              }
              if (mustOwn) {
                _4193_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4193_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4193_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4190_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4188_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4193_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4193_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4193_s);
            readIdents = _4192_recIdents;
          }
        } else if (_source166.is_IndexRange) {
          DAST._IExpression _4194___mcc_h157 = _source166.dtor_expr;
          bool _4195___mcc_h158 = _source166.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _4196___mcc_h159 = _source166.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _4197___mcc_h160 = _source166.dtor_high;
          bool _4198_isDatatype = _3950___mcc_h52;
          bool _4199_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4200_field = _3948___mcc_h50;
          DAST._IExpression _4201_on = _3947___mcc_h49;
          {
            RAST._IExpr _4202_onExpr;
            bool _4203_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4204_recIdents;
            RAST._IExpr _out1233;
            bool _out1234;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
            DCOMP.COMP.GenExpr(_4201_on, selfIdent, @params, false, out _out1233, out _out1234, out _out1235);
            _4202_onExpr = _out1233;
            _4203_onOwned = _out1234;
            _4204_recIdents = _out1235;
            Dafny.ISequence<Dafny.Rune> _4205_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4198_isDatatype) || (_4199_isConstant)) {
              _4205_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4202_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4200_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4199_isConstant) {
                _4205_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4205_s);
              }
              if (mustOwn) {
                _4205_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4205_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4205_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4202_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4200_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4205_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4205_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4205_s);
            readIdents = _4204_recIdents;
          }
        } else if (_source166.is_TupleSelect) {
          DAST._IExpression _4206___mcc_h165 = _source166.dtor_expr;
          BigInteger _4207___mcc_h166 = _source166.dtor_index;
          bool _4208_isDatatype = _3950___mcc_h52;
          bool _4209_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4210_field = _3948___mcc_h50;
          DAST._IExpression _4211_on = _3947___mcc_h49;
          {
            RAST._IExpr _4212_onExpr;
            bool _4213_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4214_recIdents;
            RAST._IExpr _out1236;
            bool _out1237;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
            DCOMP.COMP.GenExpr(_4211_on, selfIdent, @params, false, out _out1236, out _out1237, out _out1238);
            _4212_onExpr = _out1236;
            _4213_onOwned = _out1237;
            _4214_recIdents = _out1238;
            Dafny.ISequence<Dafny.Rune> _4215_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4208_isDatatype) || (_4209_isConstant)) {
              _4215_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4212_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4210_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4209_isConstant) {
                _4215_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4215_s);
              }
              if (mustOwn) {
                _4215_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4215_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4215_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4212_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4210_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4215_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4215_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4215_s);
            readIdents = _4214_recIdents;
          }
        } else if (_source166.is_Call) {
          DAST._IExpression _4216___mcc_h169 = _source166.dtor_on;
          DAST._ICallName _4217___mcc_h170 = _source166.dtor_callName;
          Dafny.ISequence<DAST._IType> _4218___mcc_h171 = _source166.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _4219___mcc_h172 = _source166.dtor_args;
          bool _4220_isDatatype = _3950___mcc_h52;
          bool _4221_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4222_field = _3948___mcc_h50;
          DAST._IExpression _4223_on = _3947___mcc_h49;
          {
            RAST._IExpr _4224_onExpr;
            bool _4225_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4226_recIdents;
            RAST._IExpr _out1239;
            bool _out1240;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1241;
            DCOMP.COMP.GenExpr(_4223_on, selfIdent, @params, false, out _out1239, out _out1240, out _out1241);
            _4224_onExpr = _out1239;
            _4225_onOwned = _out1240;
            _4226_recIdents = _out1241;
            Dafny.ISequence<Dafny.Rune> _4227_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4220_isDatatype) || (_4221_isConstant)) {
              _4227_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4224_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4222_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4221_isConstant) {
                _4227_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4227_s);
              }
              if (mustOwn) {
                _4227_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4227_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4227_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4224_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4222_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4227_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4227_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4227_s);
            readIdents = _4226_recIdents;
          }
        } else if (_source166.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _4228___mcc_h177 = _source166.dtor_params;
          DAST._IType _4229___mcc_h178 = _source166.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _4230___mcc_h179 = _source166.dtor_body;
          bool _4231_isDatatype = _3950___mcc_h52;
          bool _4232_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4233_field = _3948___mcc_h50;
          DAST._IExpression _4234_on = _3947___mcc_h49;
          {
            RAST._IExpr _4235_onExpr;
            bool _4236_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4237_recIdents;
            RAST._IExpr _out1242;
            bool _out1243;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1244;
            DCOMP.COMP.GenExpr(_4234_on, selfIdent, @params, false, out _out1242, out _out1243, out _out1244);
            _4235_onExpr = _out1242;
            _4236_onOwned = _out1243;
            _4237_recIdents = _out1244;
            Dafny.ISequence<Dafny.Rune> _4238_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4231_isDatatype) || (_4232_isConstant)) {
              _4238_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4235_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4233_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4232_isConstant) {
                _4238_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4238_s);
              }
              if (mustOwn) {
                _4238_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4238_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4238_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4235_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4233_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4238_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4238_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4238_s);
            readIdents = _4237_recIdents;
          }
        } else if (_source166.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4239___mcc_h183 = _source166.dtor_values;
          DAST._IType _4240___mcc_h184 = _source166.dtor_retType;
          DAST._IExpression _4241___mcc_h185 = _source166.dtor_expr;
          bool _4242_isDatatype = _3950___mcc_h52;
          bool _4243_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4244_field = _3948___mcc_h50;
          DAST._IExpression _4245_on = _3947___mcc_h49;
          {
            RAST._IExpr _4246_onExpr;
            bool _4247_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4248_recIdents;
            RAST._IExpr _out1245;
            bool _out1246;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
            DCOMP.COMP.GenExpr(_4245_on, selfIdent, @params, false, out _out1245, out _out1246, out _out1247);
            _4246_onExpr = _out1245;
            _4247_onOwned = _out1246;
            _4248_recIdents = _out1247;
            Dafny.ISequence<Dafny.Rune> _4249_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4242_isDatatype) || (_4243_isConstant)) {
              _4249_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4246_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4244_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4243_isConstant) {
                _4249_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4249_s);
              }
              if (mustOwn) {
                _4249_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4249_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4249_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4246_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4244_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4249_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4249_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4249_s);
            readIdents = _4248_recIdents;
          }
        } else if (_source166.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _4250___mcc_h189 = _source166.dtor_name;
          DAST._IType _4251___mcc_h190 = _source166.dtor_typ;
          DAST._IExpression _4252___mcc_h191 = _source166.dtor_value;
          DAST._IExpression _4253___mcc_h192 = _source166.dtor_iifeBody;
          bool _4254_isDatatype = _3950___mcc_h52;
          bool _4255_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4256_field = _3948___mcc_h50;
          DAST._IExpression _4257_on = _3947___mcc_h49;
          {
            RAST._IExpr _4258_onExpr;
            bool _4259_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4260_recIdents;
            RAST._IExpr _out1248;
            bool _out1249;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1250;
            DCOMP.COMP.GenExpr(_4257_on, selfIdent, @params, false, out _out1248, out _out1249, out _out1250);
            _4258_onExpr = _out1248;
            _4259_onOwned = _out1249;
            _4260_recIdents = _out1250;
            Dafny.ISequence<Dafny.Rune> _4261_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4254_isDatatype) || (_4255_isConstant)) {
              _4261_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4258_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4256_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4255_isConstant) {
                _4261_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4261_s);
              }
              if (mustOwn) {
                _4261_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4261_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4261_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4258_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4256_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4261_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4261_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4261_s);
            readIdents = _4260_recIdents;
          }
        } else if (_source166.is_Apply) {
          DAST._IExpression _4262___mcc_h197 = _source166.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _4263___mcc_h198 = _source166.dtor_args;
          bool _4264_isDatatype = _3950___mcc_h52;
          bool _4265_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4266_field = _3948___mcc_h50;
          DAST._IExpression _4267_on = _3947___mcc_h49;
          {
            RAST._IExpr _4268_onExpr;
            bool _4269_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4270_recIdents;
            RAST._IExpr _out1251;
            bool _out1252;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1253;
            DCOMP.COMP.GenExpr(_4267_on, selfIdent, @params, false, out _out1251, out _out1252, out _out1253);
            _4268_onExpr = _out1251;
            _4269_onOwned = _out1252;
            _4270_recIdents = _out1253;
            Dafny.ISequence<Dafny.Rune> _4271_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4264_isDatatype) || (_4265_isConstant)) {
              _4271_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4268_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4266_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4265_isConstant) {
                _4271_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4271_s);
              }
              if (mustOwn) {
                _4271_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4271_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4271_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4268_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4266_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4271_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4271_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4271_s);
            readIdents = _4270_recIdents;
          }
        } else if (_source166.is_TypeTest) {
          DAST._IExpression _4272___mcc_h201 = _source166.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4273___mcc_h202 = _source166.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _4274___mcc_h203 = _source166.dtor_variant;
          bool _4275_isDatatype = _3950___mcc_h52;
          bool _4276_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4277_field = _3948___mcc_h50;
          DAST._IExpression _4278_on = _3947___mcc_h49;
          {
            RAST._IExpr _4279_onExpr;
            bool _4280_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4281_recIdents;
            RAST._IExpr _out1254;
            bool _out1255;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1256;
            DCOMP.COMP.GenExpr(_4278_on, selfIdent, @params, false, out _out1254, out _out1255, out _out1256);
            _4279_onExpr = _out1254;
            _4280_onOwned = _out1255;
            _4281_recIdents = _out1256;
            Dafny.ISequence<Dafny.Rune> _4282_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4275_isDatatype) || (_4276_isConstant)) {
              _4282_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4279_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4277_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4276_isConstant) {
                _4282_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4282_s);
              }
              if (mustOwn) {
                _4282_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4282_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4282_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4279_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4277_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4282_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4282_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4282_s);
            readIdents = _4281_recIdents;
          }
        } else if (_source166.is_InitializationValue) {
          DAST._IType _4283___mcc_h207 = _source166.dtor_typ;
          bool _4284_isDatatype = _3950___mcc_h52;
          bool _4285_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4286_field = _3948___mcc_h50;
          DAST._IExpression _4287_on = _3947___mcc_h49;
          {
            RAST._IExpr _4288_onExpr;
            bool _4289_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4290_recIdents;
            RAST._IExpr _out1257;
            bool _out1258;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
            DCOMP.COMP.GenExpr(_4287_on, selfIdent, @params, false, out _out1257, out _out1258, out _out1259);
            _4288_onExpr = _out1257;
            _4289_onOwned = _out1258;
            _4290_recIdents = _out1259;
            Dafny.ISequence<Dafny.Rune> _4291_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4284_isDatatype) || (_4285_isConstant)) {
              _4291_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4288_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4286_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4285_isConstant) {
                _4291_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4291_s);
              }
              if (mustOwn) {
                _4291_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4291_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4291_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4288_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4286_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4291_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4291_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4291_s);
            readIdents = _4290_recIdents;
          }
        } else if (_source166.is_BoolBoundedPool) {
          bool _4292_isDatatype = _3950___mcc_h52;
          bool _4293_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4294_field = _3948___mcc_h50;
          DAST._IExpression _4295_on = _3947___mcc_h49;
          {
            RAST._IExpr _4296_onExpr;
            bool _4297_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4298_recIdents;
            RAST._IExpr _out1260;
            bool _out1261;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
            DCOMP.COMP.GenExpr(_4295_on, selfIdent, @params, false, out _out1260, out _out1261, out _out1262);
            _4296_onExpr = _out1260;
            _4297_onOwned = _out1261;
            _4298_recIdents = _out1262;
            Dafny.ISequence<Dafny.Rune> _4299_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4292_isDatatype) || (_4293_isConstant)) {
              _4299_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4296_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4294_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4293_isConstant) {
                _4299_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4299_s);
              }
              if (mustOwn) {
                _4299_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4299_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4299_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4296_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4294_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4299_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4299_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4299_s);
            readIdents = _4298_recIdents;
          }
        } else if (_source166.is_SetBoundedPool) {
          DAST._IExpression _4300___mcc_h209 = _source166.dtor_of;
          bool _4301_isDatatype = _3950___mcc_h52;
          bool _4302_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4303_field = _3948___mcc_h50;
          DAST._IExpression _4304_on = _3947___mcc_h49;
          {
            RAST._IExpr _4305_onExpr;
            bool _4306_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4307_recIdents;
            RAST._IExpr _out1263;
            bool _out1264;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1265;
            DCOMP.COMP.GenExpr(_4304_on, selfIdent, @params, false, out _out1263, out _out1264, out _out1265);
            _4305_onExpr = _out1263;
            _4306_onOwned = _out1264;
            _4307_recIdents = _out1265;
            Dafny.ISequence<Dafny.Rune> _4308_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4301_isDatatype) || (_4302_isConstant)) {
              _4308_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4305_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4303_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4302_isConstant) {
                _4308_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4308_s);
              }
              if (mustOwn) {
                _4308_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4308_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4308_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4305_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4303_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4308_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4308_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4308_s);
            readIdents = _4307_recIdents;
          }
        } else if (_source166.is_SeqBoundedPool) {
          DAST._IExpression _4309___mcc_h211 = _source166.dtor_of;
          bool _4310___mcc_h212 = _source166.dtor_includeDuplicates;
          bool _4311_isDatatype = _3950___mcc_h52;
          bool _4312_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4313_field = _3948___mcc_h50;
          DAST._IExpression _4314_on = _3947___mcc_h49;
          {
            RAST._IExpr _4315_onExpr;
            bool _4316_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4317_recIdents;
            RAST._IExpr _out1266;
            bool _out1267;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
            DCOMP.COMP.GenExpr(_4314_on, selfIdent, @params, false, out _out1266, out _out1267, out _out1268);
            _4315_onExpr = _out1266;
            _4316_onOwned = _out1267;
            _4317_recIdents = _out1268;
            Dafny.ISequence<Dafny.Rune> _4318_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4311_isDatatype) || (_4312_isConstant)) {
              _4318_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4315_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4313_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4312_isConstant) {
                _4318_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4318_s);
              }
              if (mustOwn) {
                _4318_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4318_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4318_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4315_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4313_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4318_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4318_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4318_s);
            readIdents = _4317_recIdents;
          }
        } else {
          DAST._IExpression _4319___mcc_h215 = _source166.dtor_lo;
          DAST._IExpression _4320___mcc_h216 = _source166.dtor_hi;
          bool _4321_isDatatype = _3950___mcc_h52;
          bool _4322_isConstant = _3949___mcc_h51;
          Dafny.ISequence<Dafny.Rune> _4323_field = _3948___mcc_h50;
          DAST._IExpression _4324_on = _3947___mcc_h49;
          {
            RAST._IExpr _4325_onExpr;
            bool _4326_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4327_recIdents;
            RAST._IExpr _out1269;
            bool _out1270;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
            DCOMP.COMP.GenExpr(_4324_on, selfIdent, @params, false, out _out1269, out _out1270, out _out1271);
            _4325_onExpr = _out1269;
            _4326_onOwned = _out1270;
            _4327_recIdents = _out1271;
            Dafny.ISequence<Dafny.Rune> _4328_s = Dafny.Sequence<Dafny.Rune>.Empty;
            if ((_4321_isDatatype) || (_4322_isConstant)) {
              _4328_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4325_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4323_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_4322_isConstant) {
                _4328_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4328_s);
              }
              if (mustOwn) {
                _4328_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4328_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              _4328_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_4325_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_4323_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              _4328_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4328_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            r = RAST.Expr.create_RawExpr(_4328_s);
            readIdents = _4327_recIdents;
          }
        }
      } else if (_source78.is_SelectFn) {
        DAST._IExpression _4329___mcc_h219 = _source78.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _4330___mcc_h220 = _source78.dtor_field;
        bool _4331___mcc_h221 = _source78.dtor_onDatatype;
        bool _4332___mcc_h222 = _source78.dtor_isStatic;
        BigInteger _4333___mcc_h223 = _source78.dtor_arity;
        BigInteger _4334_arity = _4333___mcc_h223;
        bool _4335_isStatic = _4332___mcc_h222;
        bool _4336_isDatatype = _4331___mcc_h221;
        Dafny.ISequence<Dafny.Rune> _4337_field = _4330___mcc_h220;
        DAST._IExpression _4338_on = _4329___mcc_h219;
        {
          RAST._IExpr _4339_onExpr;
          bool _4340_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4341_recIdents;
          RAST._IExpr _out1272;
          bool _out1273;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1274;
          DCOMP.COMP.GenExpr(_4338_on, selfIdent, @params, false, out _out1272, out _out1273, out _out1274);
          _4339_onExpr = _out1272;
          _4340_onOwned = _out1273;
          _4341_recIdents = _out1274;
          Dafny.ISequence<Dafny.Rune> _4342_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _4343_onString;
          _4343_onString = (_4339_onExpr)._ToString(DCOMP.__default.IND);
          if (_4335_isStatic) {
            _4342_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4343_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4337_field));
          } else {
            _4342_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _4342_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4342_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _4343_onString), ((_4340_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _4344_args;
            _4344_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _4345_i;
            _4345_i = BigInteger.Zero;
            while ((_4345_i) < (_4334_arity)) {
              if ((_4345_i).Sign == 1) {
                _4344_args = Dafny.Sequence<Dafny.Rune>.Concat(_4344_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _4344_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4344_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_4345_i));
              _4345_i = (_4345_i) + (BigInteger.One);
            }
            _4342_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4342_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _4344_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _4342_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4342_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _4337_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4344_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _4342_s = Dafny.Sequence<Dafny.Rune>.Concat(_4342_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _4342_s = Dafny.Sequence<Dafny.Rune>.Concat(_4342_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _4346_typeShape;
          _4346_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _4347_i;
          _4347_i = BigInteger.Zero;
          while ((_4347_i) < (_4334_arity)) {
            if ((_4347_i).Sign == 1) {
              _4346_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4346_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _4346_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4346_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _4347_i = (_4347_i) + (BigInteger.One);
          }
          _4346_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_4346_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _4342_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _4342_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _4346_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_4342_s);
          isOwned = true;
          readIdents = _4341_recIdents;
        }
      } else if (_source78.is_Index) {
        DAST._IExpression _4348___mcc_h224 = _source78.dtor_expr;
        DAST._ICollKind _4349___mcc_h225 = _source78.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _4350___mcc_h226 = _source78.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _4351_indices = _4350___mcc_h226;
        DAST._ICollKind _4352_collKind = _4349___mcc_h225;
        DAST._IExpression _4353_on = _4348___mcc_h224;
        {
          RAST._IExpr _4354_onExpr;
          bool _4355_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4356_recIdents;
          RAST._IExpr _out1275;
          bool _out1276;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1277;
          DCOMP.COMP.GenExpr(_4353_on, selfIdent, @params, false, out _out1275, out _out1276, out _out1277);
          _4354_onExpr = _out1275;
          _4355_onOwned = _out1276;
          _4356_recIdents = _out1277;
          readIdents = _4356_recIdents;
          Dafny.ISequence<Dafny.Rune> _4357_s;
          _4357_s = (_4354_onExpr)._ToString(DCOMP.__default.IND);
          BigInteger _4358_i;
          _4358_i = BigInteger.Zero;
          while ((_4358_i) < (new BigInteger((_4351_indices).Count))) {
            if (object.Equals(_4352_collKind, DAST.CollKind.create_Array())) {
              _4357_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4357_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_4352_collKind, DAST.CollKind.create_Map())) {
              RAST._IExpr _4359_idx;
              bool _4360_idxOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4361_recIdentsIdx;
              RAST._IExpr _out1278;
              bool _out1279;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1280;
              DCOMP.COMP.GenExpr((_4351_indices).Select(_4358_i), selfIdent, @params, false, out _out1278, out _out1279, out _out1280);
              _4359_idx = _out1278;
              _4360_idxOwned = _out1279;
              _4361_recIdentsIdx = _out1280;
              _4357_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4357_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_4360_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (_4359_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4361_recIdentsIdx);
            } else {
              RAST._IExpr _4362_idx;
              bool _4363___v84;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4364_recIdentsIdx;
              RAST._IExpr _out1281;
              bool _out1282;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
              DCOMP.COMP.GenExpr((_4351_indices).Select(_4358_i), selfIdent, @params, true, out _out1281, out _out1282, out _out1283);
              _4362_idx = _out1281;
              _4363___v84 = _out1282;
              _4364_recIdentsIdx = _out1283;
              _4357_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4357_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), (_4362_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4364_recIdentsIdx);
            }
            _4358_i = (_4358_i) + (BigInteger.One);
          }
          if (mustOwn) {
            _4357_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4357_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            _4357_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), _4357_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          r = RAST.Expr.create_RawExpr(_4357_s);
        }
      } else if (_source78.is_IndexRange) {
        DAST._IExpression _4365___mcc_h227 = _source78.dtor_expr;
        bool _4366___mcc_h228 = _source78.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _4367___mcc_h229 = _source78.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _4368___mcc_h230 = _source78.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _4369_high = _4368___mcc_h230;
        Std.Wrappers._IOption<DAST._IExpression> _4370_low = _4367___mcc_h229;
        bool _4371_isArray = _4366___mcc_h228;
        DAST._IExpression _4372_on = _4365___mcc_h227;
        {
          RAST._IExpr _4373_onExpr;
          bool _4374_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4375_recIdents;
          RAST._IExpr _out1284;
          bool _out1285;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1286;
          DCOMP.COMP.GenExpr(_4372_on, selfIdent, @params, false, out _out1284, out _out1285, out _out1286);
          _4373_onExpr = _out1284;
          _4374_onOwned = _out1285;
          _4375_recIdents = _out1286;
          readIdents = _4375_recIdents;
          Dafny.ISequence<Dafny.Rune> _4376_s;
          _4376_s = (_4373_onExpr)._ToString(DCOMP.__default.IND);
          Std.Wrappers._IOption<RAST._IExpr> _4377_lowString;
          _4377_lowString = Std.Wrappers.Option<RAST._IExpr>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source167 = _4370_low;
          if (_source167.is_None) {
          } else {
            DAST._IExpression _4378___mcc_h1332 = _source167.dtor_value;
            DAST._IExpression _4379_l = _4378___mcc_h1332;
            {
              RAST._IExpr _4380_lString;
              bool _4381___v85;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4382_recIdentsL;
              RAST._IExpr _out1287;
              bool _out1288;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1289;
              DCOMP.COMP.GenExpr(_4379_l, selfIdent, @params, true, out _out1287, out _out1288, out _out1289);
              _4380_lString = _out1287;
              _4381___v85 = _out1288;
              _4382_recIdentsL = _out1289;
              _4377_lowString = Std.Wrappers.Option<RAST._IExpr>.create_Some(_4380_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4382_recIdentsL);
            }
          }
          Std.Wrappers._IOption<RAST._IExpr> _4383_highString;
          _4383_highString = Std.Wrappers.Option<RAST._IExpr>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source168 = _4369_high;
          if (_source168.is_None) {
          } else {
            DAST._IExpression _4384___mcc_h1333 = _source168.dtor_value;
            DAST._IExpression _4385_h = _4384___mcc_h1333;
            {
              RAST._IExpr _4386_hString;
              bool _4387___v86;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4388_recIdentsH;
              RAST._IExpr _out1290;
              bool _out1291;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
              DCOMP.COMP.GenExpr(_4385_h, selfIdent, @params, true, out _out1290, out _out1291, out _out1292);
              _4386_hString = _out1290;
              _4387___v86 = _out1291;
              _4388_recIdentsH = _out1292;
              _4383_highString = Std.Wrappers.Option<RAST._IExpr>.create_Some(_4386_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4388_recIdentsH);
            }
          }
          if (_4371_isArray) {
            _4376_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4376_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          _4376_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4376_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source169) => {
            if (_source169.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              RAST._IExpr _4389___mcc_h1334 = _source169.dtor_value;
              RAST._IExpr _4390_l = _4389___mcc_h1334;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), (_4390_l)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_4377_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source170) => {
            if (_source170.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              RAST._IExpr _4391___mcc_h1335 = _source170.dtor_value;
              RAST._IExpr _4392_h = _4391___mcc_h1335;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), (_4392_h)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_4383_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          _4376_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4376_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          r = RAST.Expr.create_RawExpr(_4376_s);
          isOwned = true;
        }
      } else if (_source78.is_TupleSelect) {
        DAST._IExpression _4393___mcc_h231 = _source78.dtor_expr;
        BigInteger _4394___mcc_h232 = _source78.dtor_index;
        BigInteger _4395_idx = _4394___mcc_h232;
        DAST._IExpression _4396_on = _4393___mcc_h231;
        {
          RAST._IExpr _4397_onExpr;
          bool _4398___v87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4399_recIdents;
          RAST._IExpr _out1293;
          bool _out1294;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1295;
          DCOMP.COMP.GenExpr(_4396_on, selfIdent, @params, false, out _out1293, out _out1294, out _out1295);
          _4397_onExpr = _out1293;
          _4398___v87 = _out1294;
          _4399_recIdents = _out1295;
          Dafny.ISequence<Dafny.Rune> _4400_s;
          _4400_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4397_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), Std.Strings.__default.OfNat(_4395_idx));
          if (mustOwn) {
            _4400_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4400_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            _4400_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4400_s);
            isOwned = false;
          }
          r = RAST.Expr.create_RawExpr(_4400_s);
          readIdents = _4399_recIdents;
        }
      } else if (_source78.is_Call) {
        DAST._IExpression _4401___mcc_h233 = _source78.dtor_on;
        DAST._ICallName _4402___mcc_h234 = _source78.dtor_callName;
        Dafny.ISequence<DAST._IType> _4403___mcc_h235 = _source78.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _4404___mcc_h236 = _source78.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4405_args = _4404___mcc_h236;
        Dafny.ISequence<DAST._IType> _4406_typeArgs = _4403___mcc_h235;
        DAST._ICallName _4407_name = _4402___mcc_h234;
        DAST._IExpression _4408_on = _4401___mcc_h233;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _4409_typeExprs;
          _4409_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_4406_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _4410_typeI;
            _4410_typeI = BigInteger.Zero;
            while ((_4410_typeI) < (new BigInteger((_4406_typeArgs).Count))) {
              RAST._IType _4411_typeExpr;
              RAST._IType _out1296;
              _out1296 = DCOMP.COMP.GenType((_4406_typeArgs).Select(_4410_typeI), false, false);
              _4411_typeExpr = _out1296;
              _4409_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_4409_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4411_typeExpr));
              _4410_typeI = (_4410_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _4412_argExprs;
          _4412_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _4413_i;
          _4413_i = BigInteger.Zero;
          while ((_4413_i) < (new BigInteger((_4405_args).Count))) {
            RAST._IExpr _4414_argExpr;
            bool _4415_isOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4416_argIdents;
            RAST._IExpr _out1297;
            bool _out1298;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1299;
            DCOMP.COMP.GenExpr((_4405_args).Select(_4413_i), selfIdent, @params, false, out _out1297, out _out1298, out _out1299);
            _4414_argExpr = _out1297;
            _4415_isOwned = _out1298;
            _4416_argIdents = _out1299;
            if (_4415_isOwned) {
              _4414_argExpr = RAST.Expr.create_Borrow(_4414_argExpr);
            }
            _4412_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_4412_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_4414_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4416_argIdents);
            _4413_i = (_4413_i) + (BigInteger.One);
          }
          RAST._IExpr _4417_enclosingExpr;
          bool _4418___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4419_recIdents;
          RAST._IExpr _out1300;
          bool _out1301;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
          DCOMP.COMP.GenExpr(_4408_on, selfIdent, @params, false, out _out1300, out _out1301, out _out1302);
          _4417_enclosingExpr = _out1300;
          _4418___v88 = _out1301;
          _4419_recIdents = _out1302;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4419_recIdents);
          Dafny.ISequence<Dafny.Rune> _4420_enclosingString;
          _4420_enclosingString = (_4417_enclosingExpr)._ToString(DCOMP.__default.IND);
          Dafny.ISequence<Dafny.Rune> _4421_renderedName;
          _4421_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source171) => {
            if (_source171.is_Name) {
              Dafny.ISequence<Dafny.Rune> _4422___mcc_h1336 = _source171.dtor_name;
              Dafny.ISequence<Dafny.Rune> _4423_ident = _4422___mcc_h1336;
              return DCOMP.__default.escapeIdent(_4423_ident);
            } else if (_source171.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source171.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source171.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_4407_name);
          DAST._IExpression _source172 = _4408_on;
          if (_source172.is_Literal) {
            DAST._ILiteral _4424___mcc_h1337 = _source172.dtor_Literal_a0;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _4425___mcc_h1339 = _source172.dtor_Ident_a0;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4426___mcc_h1341 = _source172.dtor_Companion_a0;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4420_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _4421_renderedName);
            }
          } else if (_source172.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _4427___mcc_h1343 = _source172.dtor_Tuple_a0;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4428___mcc_h1345 = _source172.dtor_path;
            Dafny.ISequence<DAST._IType> _4429___mcc_h1346 = _source172.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4430___mcc_h1347 = _source172.dtor_args;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _4431___mcc_h1351 = _source172.dtor_dims;
            DAST._IType _4432___mcc_h1352 = _source172.dtor_typ;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4433___mcc_h1355 = _source172.dtor_path;
            Dafny.ISequence<DAST._IType> _4434___mcc_h1356 = _source172.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _4435___mcc_h1357 = _source172.dtor_variant;
            bool _4436___mcc_h1358 = _source172.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4437___mcc_h1359 = _source172.dtor_contents;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_Convert) {
            DAST._IExpression _4438___mcc_h1365 = _source172.dtor_value;
            DAST._IType _4439___mcc_h1366 = _source172.dtor_from;
            DAST._IType _4440___mcc_h1367 = _source172.dtor_typ;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_SeqConstruct) {
            DAST._IExpression _4441___mcc_h1371 = _source172.dtor_length;
            DAST._IExpression _4442___mcc_h1372 = _source172.dtor_elem;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _4443___mcc_h1375 = _source172.dtor_elements;
            DAST._IType _4444___mcc_h1376 = _source172.dtor_typ;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _4445___mcc_h1379 = _source172.dtor_elements;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4446___mcc_h1381 = _source172.dtor_mapElems;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_MapBuilder) {
            DAST._IType _4447___mcc_h1383 = _source172.dtor_keyType;
            DAST._IType _4448___mcc_h1384 = _source172.dtor_valueType;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_SetBuilder) {
            DAST._IType _4449___mcc_h1387 = _source172.dtor_elemType;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_This) {
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_Ite) {
            DAST._IExpression _4450___mcc_h1389 = _source172.dtor_cond;
            DAST._IExpression _4451___mcc_h1390 = _source172.dtor_thn;
            DAST._IExpression _4452___mcc_h1391 = _source172.dtor_els;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_UnOp) {
            DAST._IUnaryOp _4453___mcc_h1395 = _source172.dtor_unOp;
            DAST._IExpression _4454___mcc_h1396 = _source172.dtor_expr;
            DAST.Format._IUnOpFormat _4455___mcc_h1397 = _source172.dtor_format1;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_BinOp) {
            DAST._IBinOp _4456___mcc_h1401 = _source172.dtor_op;
            DAST._IExpression _4457___mcc_h1402 = _source172.dtor_left;
            DAST._IExpression _4458___mcc_h1403 = _source172.dtor_right;
            DAST.Format._IBinOpFormat _4459___mcc_h1404 = _source172.dtor_format2;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_ArrayLen) {
            DAST._IExpression _4460___mcc_h1409 = _source172.dtor_expr;
            BigInteger _4461___mcc_h1410 = _source172.dtor_dim;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_MapKeys) {
            DAST._IExpression _4462___mcc_h1413 = _source172.dtor_expr;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_MapValues) {
            DAST._IExpression _4463___mcc_h1415 = _source172.dtor_expr;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_Select) {
            DAST._IExpression _4464___mcc_h1417 = _source172.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4465___mcc_h1418 = _source172.dtor_field;
            bool _4466___mcc_h1419 = _source172.dtor_isConstant;
            bool _4467___mcc_h1420 = _source172.dtor_onDatatype;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_SelectFn) {
            DAST._IExpression _4468___mcc_h1425 = _source172.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _4469___mcc_h1426 = _source172.dtor_field;
            bool _4470___mcc_h1427 = _source172.dtor_onDatatype;
            bool _4471___mcc_h1428 = _source172.dtor_isStatic;
            BigInteger _4472___mcc_h1429 = _source172.dtor_arity;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_Index) {
            DAST._IExpression _4473___mcc_h1435 = _source172.dtor_expr;
            DAST._ICollKind _4474___mcc_h1436 = _source172.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _4475___mcc_h1437 = _source172.dtor_indices;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_IndexRange) {
            DAST._IExpression _4476___mcc_h1441 = _source172.dtor_expr;
            bool _4477___mcc_h1442 = _source172.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _4478___mcc_h1443 = _source172.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _4479___mcc_h1444 = _source172.dtor_high;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_TupleSelect) {
            DAST._IExpression _4480___mcc_h1449 = _source172.dtor_expr;
            BigInteger _4481___mcc_h1450 = _source172.dtor_index;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_Call) {
            DAST._IExpression _4482___mcc_h1453 = _source172.dtor_on;
            DAST._ICallName _4483___mcc_h1454 = _source172.dtor_callName;
            Dafny.ISequence<DAST._IType> _4484___mcc_h1455 = _source172.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _4485___mcc_h1456 = _source172.dtor_args;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _4486___mcc_h1461 = _source172.dtor_params;
            DAST._IType _4487___mcc_h1462 = _source172.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _4488___mcc_h1463 = _source172.dtor_body;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4489___mcc_h1467 = _source172.dtor_values;
            DAST._IType _4490___mcc_h1468 = _source172.dtor_retType;
            DAST._IExpression _4491___mcc_h1469 = _source172.dtor_expr;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _4492___mcc_h1473 = _source172.dtor_name;
            DAST._IType _4493___mcc_h1474 = _source172.dtor_typ;
            DAST._IExpression _4494___mcc_h1475 = _source172.dtor_value;
            DAST._IExpression _4495___mcc_h1476 = _source172.dtor_iifeBody;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_Apply) {
            DAST._IExpression _4496___mcc_h1481 = _source172.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _4497___mcc_h1482 = _source172.dtor_args;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_TypeTest) {
            DAST._IExpression _4498___mcc_h1485 = _source172.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4499___mcc_h1486 = _source172.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _4500___mcc_h1487 = _source172.dtor_variant;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_InitializationValue) {
            DAST._IType _4501___mcc_h1491 = _source172.dtor_typ;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_BoolBoundedPool) {
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_SetBoundedPool) {
            DAST._IExpression _4502___mcc_h1493 = _source172.dtor_of;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else if (_source172.is_SeqBoundedPool) {
            DAST._IExpression _4503___mcc_h1495 = _source172.dtor_of;
            bool _4504___mcc_h1496 = _source172.dtor_includeDuplicates;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          } else {
            DAST._IExpression _4505___mcc_h1499 = _source172.dtor_lo;
            DAST._IExpression _4506___mcc_h1500 = _source172.dtor_hi;
            {
              _4420_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _4420_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), _4421_renderedName);
            }
          }
          r = RAST.Expr.create_Call(RAST.Expr.create_RawExpr(_4420_enclosingString), _4409_typeExprs, _4412_argExprs);
          isOwned = true;
        }
      } else if (_source78.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _4507___mcc_h237 = _source78.dtor_params;
        DAST._IType _4508___mcc_h238 = _source78.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _4509___mcc_h239 = _source78.dtor_body;
        Dafny.ISequence<DAST._IStatement> _4510_body = _4509___mcc_h239;
        DAST._IType _4511_retType = _4508___mcc_h238;
        Dafny.ISequence<DAST._IFormal> _4512_params = _4507___mcc_h237;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4513_paramNames;
          _4513_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4514_i;
          _4514_i = BigInteger.Zero;
          while ((_4514_i) < (new BigInteger((_4512_params).Count))) {
            _4513_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_4513_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_4512_params).Select(_4514_i)).dtor_name));
            _4514_i = (_4514_i) + (BigInteger.One);
          }
          RAST._IExpr _4515_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4516_recIdents;
          RAST._IExpr _out1303;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1304;
          DCOMP.COMP.GenStmts(_4510_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _4513_paramNames, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out1303, out _out1304);
          _4515_recursiveGen = _out1303;
          _4516_recIdents = _out1304;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _4517_allReadCloned;
          _4517_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_4516_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _4518_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_4516_recIdents).Elements) {
              _4518_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_4516_recIdents).Contains(_4518_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 2805)");
          after__ASSIGN_SUCH_THAT_3:;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_4518_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _4517_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_4517_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_4513_paramNames).Contains(_4518_next))) {
              _4517_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4517_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_4518_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_4518_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4518_next));
            }
            _4516_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4516_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4518_next));
          }
          Dafny.ISequence<Dafny.Rune> _4519_paramsString;
          _4519_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _4520_paramTypes;
          _4520_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _4514_i = BigInteger.Zero;
          while ((_4514_i) < (new BigInteger((_4512_params).Count))) {
            if ((_4514_i).Sign == 1) {
              _4519_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_4519_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _4520_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_4520_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _4521_typStr;
            RAST._IType _out1305;
            _out1305 = DCOMP.COMP.GenType(((_4512_params).Select(_4514_i)).dtor_typ, false, true);
            _4521_typStr = _out1305;
            _4519_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4519_paramsString, DCOMP.__default.escapeIdent(((_4512_params).Select(_4514_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_4521_typStr))._ToString(DCOMP.__default.IND));
            _4520_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_4520_paramTypes, (RAST.Type.create_Borrowed(_4521_typStr))._ToString(DCOMP.__default.IND));
            _4514_i = (_4514_i) + (BigInteger.One);
          }
          RAST._IType _4522_retTypeGen;
          RAST._IType _out1306;
          _out1306 = DCOMP.COMP.GenType(_4511_retType, false, true);
          _4522_retTypeGen = _out1306;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _4520_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_4522_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _4517_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _4519_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_4522_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_4515_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          isOwned = true;
        }
      } else if (_source78.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4523___mcc_h240 = _source78.dtor_values;
        DAST._IType _4524___mcc_h241 = _source78.dtor_retType;
        DAST._IExpression _4525___mcc_h242 = _source78.dtor_expr;
        DAST._IExpression _4526_expr = _4525___mcc_h242;
        DAST._IType _4527_retType = _4524___mcc_h241;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _4528_values = _4523___mcc_h240;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4529_paramNames;
          _4529_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4530_paramNamesSet;
          _4530_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4531_i;
          _4531_i = BigInteger.Zero;
          while ((_4531_i) < (new BigInteger((_4528_values).Count))) {
            _4529_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_4529_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_4528_values).Select(_4531_i)).dtor__0).dtor_name));
            _4530_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4530_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_4528_values).Select(_4531_i)).dtor__0).dtor_name));
            _4531_i = (_4531_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _4532_s;
          _4532_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _4533_paramsString;
          _4533_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _4531_i = BigInteger.Zero;
          while ((_4531_i) < (new BigInteger((_4528_values).Count))) {
            if ((_4531_i).Sign == 1) {
              _4533_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_4533_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _4534_typStr;
            RAST._IType _out1307;
            _out1307 = DCOMP.COMP.GenType((((_4528_values).Select(_4531_i)).dtor__0).dtor_typ, false, true);
            _4534_typStr = _out1307;
            RAST._IExpr _4535_valueGen;
            bool _4536___v91;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4537_recIdents;
            RAST._IExpr _out1308;
            bool _out1309;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1310;
            DCOMP.COMP.GenExpr(((_4528_values).Select(_4531_i)).dtor__1, selfIdent, @params, true, out _out1308, out _out1309, out _out1310);
            _4535_valueGen = _out1308;
            _4536___v91 = _out1309;
            _4537_recIdents = _out1310;
            _4532_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4532_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_4528_values).Select(_4531_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_4534_typStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4537_recIdents);
            _4532_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4532_s, (_4535_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _4531_i = (_4531_i) + (BigInteger.One);
          }
          RAST._IExpr _4538_recGen;
          bool _4539_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4540_recIdents;
          RAST._IExpr _out1311;
          bool _out1312;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
          DCOMP.COMP.GenExpr(_4526_expr, selfIdent, _4529_paramNames, mustOwn, out _out1311, out _out1312, out _out1313);
          _4538_recGen = _out1311;
          _4539_recOwned = _out1312;
          _4540_recIdents = _out1313;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4540_recIdents, _4530_paramNamesSet);
          _4532_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4532_s, (_4538_recGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_4532_s);
          isOwned = _4539_recOwned;
        }
      } else if (_source78.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _4541___mcc_h243 = _source78.dtor_name;
        DAST._IType _4542___mcc_h244 = _source78.dtor_typ;
        DAST._IExpression _4543___mcc_h245 = _source78.dtor_value;
        DAST._IExpression _4544___mcc_h246 = _source78.dtor_iifeBody;
        DAST._IExpression _4545_iifeBody = _4544___mcc_h246;
        DAST._IExpression _4546_value = _4543___mcc_h245;
        DAST._IType _4547_tpe = _4542___mcc_h244;
        Dafny.ISequence<Dafny.Rune> _4548_name = _4541___mcc_h243;
        {
          RAST._IExpr _4549_valueGen;
          bool _4550___v92;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4551_recIdents;
          RAST._IExpr _out1314;
          bool _out1315;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
          DCOMP.COMP.GenExpr(_4546_value, selfIdent, @params, true, out _out1314, out _out1315, out _out1316);
          _4549_valueGen = _out1314;
          _4550___v92 = _out1315;
          _4551_recIdents = _out1316;
          readIdents = _4551_recIdents;
          RAST._IType _4552_valueTypeGen;
          RAST._IType _out1317;
          _out1317 = DCOMP.COMP.GenType(_4547_tpe, false, true);
          _4552_valueTypeGen = _out1317;
          RAST._IExpr _4553_bodyGen;
          bool _4554___v93;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4555_bodyIdents;
          RAST._IExpr _out1318;
          bool _out1319;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
          DCOMP.COMP.GenExpr(_4545_iifeBody, selfIdent, @params, true, out _out1318, out _out1319, out _out1320);
          _4553_bodyGen = _out1318;
          _4554___v93 = _out1319;
          _4555_bodyIdents = _out1320;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4555_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_4548_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_4548_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_4552_valueTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_4549_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_4553_bodyGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          isOwned = true;
        }
      } else if (_source78.is_Apply) {
        DAST._IExpression _4556___mcc_h247 = _source78.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _4557___mcc_h248 = _source78.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4558_args = _4557___mcc_h248;
        DAST._IExpression _4559_func = _4556___mcc_h247;
        {
          RAST._IExpr _4560_funcExpr;
          bool _4561___v94;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4562_recIdents;
          RAST._IExpr _out1321;
          bool _out1322;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1323;
          DCOMP.COMP.GenExpr(_4559_func, selfIdent, @params, false, out _out1321, out _out1322, out _out1323);
          _4560_funcExpr = _out1321;
          _4561___v94 = _out1322;
          _4562_recIdents = _out1323;
          readIdents = _4562_recIdents;
          Dafny.ISequence<Dafny.Rune> _4563_argString;
          _4563_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _4564_i;
          _4564_i = BigInteger.Zero;
          while ((_4564_i) < (new BigInteger((_4558_args).Count))) {
            if ((_4564_i).Sign == 1) {
              _4563_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4563_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _4565_argExpr;
            bool _4566_isOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4567_argIdents;
            RAST._IExpr _out1324;
            bool _out1325;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1326;
            DCOMP.COMP.GenExpr((_4558_args).Select(_4564_i), selfIdent, @params, false, out _out1324, out _out1325, out _out1326);
            _4565_argExpr = _out1324;
            _4566_isOwned = _out1325;
            _4567_argIdents = _out1326;
            Dafny.ISequence<Dafny.Rune> _4568_argExprString;
            _4568_argExprString = (_4565_argExpr)._ToString(DCOMP.__default.IND);
            if (_4566_isOwned) {
              _4568_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _4568_argExprString);
            }
            _4563_argString = Dafny.Sequence<Dafny.Rune>.Concat(_4563_argString, _4568_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4567_argIdents);
            _4564_i = (_4564_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_4560_funcExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _4563_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          isOwned = true;
        }
      } else if (_source78.is_TypeTest) {
        DAST._IExpression _4569___mcc_h249 = _source78.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4570___mcc_h250 = _source78.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _4571___mcc_h251 = _source78.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _4572_variant = _4571___mcc_h251;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4573_dType = _4570___mcc_h250;
        DAST._IExpression _4574_on = _4569___mcc_h249;
        {
          RAST._IExpr _4575_exprGen;
          bool _4576___v95;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4577_recIdents;
          RAST._IExpr _out1327;
          bool _out1328;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
          DCOMP.COMP.GenExpr(_4574_on, selfIdent, @params, false, out _out1327, out _out1328, out _out1329);
          _4575_exprGen = _out1327;
          _4576___v95 = _out1328;
          _4577_recIdents = _out1329;
          Dafny.ISequence<Dafny.Rune> _4578_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1330;
          _out1330 = DCOMP.COMP.GenPath(_4573_dType);
          _4578_dTypePath = _out1330;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), (_4575_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _4578_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_4572_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })")));
          isOwned = true;
          readIdents = _4577_recIdents;
        }
      } else if (_source78.is_InitializationValue) {
        DAST._IType _4579___mcc_h252 = _source78.dtor_typ;
        DAST._IType _4580_typ = _4579___mcc_h252;
        {
          RAST._IType _4581_typExpr;
          RAST._IType _out1331;
          _out1331 = DCOMP.COMP.GenType(_4580_typ, false, false);
          _4581_typExpr = _out1331;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4581_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source78.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source78.is_SetBoundedPool) {
        DAST._IExpression _4582___mcc_h253 = _source78.dtor_of;
        DAST._IExpression _4583_of = _4582___mcc_h253;
        {
          RAST._IExpr _4584_exprGen;
          bool _4585___v96;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4586_recIdents;
          RAST._IExpr _out1332;
          bool _out1333;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1334;
          DCOMP.COMP.GenExpr(_4583_of, selfIdent, @params, false, out _out1332, out _out1333, out _out1334);
          _4584_exprGen = _out1332;
          _4585___v96 = _out1333;
          _4586_recIdents = _out1334;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4584_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          isOwned = true;
          readIdents = _4586_recIdents;
        }
      } else if (_source78.is_SeqBoundedPool) {
        DAST._IExpression _4587___mcc_h254 = _source78.dtor_of;
        bool _4588___mcc_h255 = _source78.dtor_includeDuplicates;
        bool _4589_includeDuplicates = _4588___mcc_h255;
        DAST._IExpression _4590_of = _4587___mcc_h254;
        {
          RAST._IExpr _4591_exprGen;
          bool _4592___v97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4593_recIdents;
          RAST._IExpr _out1335;
          bool _out1336;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
          DCOMP.COMP.GenExpr(_4590_of, selfIdent, @params, false, out _out1335, out _out1336, out _out1337);
          _4591_exprGen = _out1335;
          _4592___v97 = _out1336;
          _4593_recIdents = _out1337;
          Dafny.ISequence<Dafny.Rune> _4594_s;
          _4594_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4591_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_4589_includeDuplicates)) {
            _4594_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _4594_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_4594_s);
          isOwned = true;
          readIdents = _4593_recIdents;
        }
      } else {
        DAST._IExpression _4595___mcc_h256 = _source78.dtor_lo;
        DAST._IExpression _4596___mcc_h257 = _source78.dtor_hi;
        DAST._IExpression _4597_hi = _4596___mcc_h257;
        DAST._IExpression _4598_lo = _4595___mcc_h256;
        {
          RAST._IExpr _4599_lo;
          bool _4600___v98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4601_recIdentsLo;
          RAST._IExpr _out1338;
          bool _out1339;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1340;
          DCOMP.COMP.GenExpr(_4598_lo, selfIdent, @params, true, out _out1338, out _out1339, out _out1340);
          _4599_lo = _out1338;
          _4600___v98 = _out1339;
          _4601_recIdentsLo = _out1340;
          RAST._IExpr _4602_hi;
          bool _4603___v99;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4604_recIdentsHi;
          RAST._IExpr _out1341;
          bool _out1342;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
          DCOMP.COMP.GenExpr(_4597_hi, selfIdent, @params, true, out _out1341, out _out1342, out _out1343);
          _4602_hi = _out1341;
          _4603___v99 = _out1342;
          _4604_recIdentsHi = _out1343;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_4599_lo)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_4602_hi)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4601_recIdentsLo, _4604_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _4605_i;
      _4605_i = BigInteger.Zero;
      while ((_4605_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _4606_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _4607_m;
        RAST._IMod _out1344;
        _out1344 = DCOMP.COMP.GenModule((p).Select(_4605_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _4607_m = _out1344;
        _4606_generated = (_4607_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_4605_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _4606_generated);
        _4605_i = (_4605_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _4608_i;
      _4608_i = BigInteger.Zero;
      while ((_4608_i) < (new BigInteger((fullName).Count))) {
        if ((_4608_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_4608_i)));
        _4608_i = (_4608_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>> OpTable {
      get {
        return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
      }
    }
  }
} // end of namespace DCOMP

