// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM.Utils {

  public partial class __default {
    public static DAM.Utils._IOption<__A> SeqGet<__A>(Dafny.ISequence<__A> s, BigInteger idx) {
      if ((idx) < (new BigInteger((s).Count))) {
        return DAM.Utils.Option<__A>.create_Some((s).Select(idx));
      } else {
        return DAM.Utils.Option<__A>.create_None();
      }
    }
    public static _System._ITuple2<BigInteger, Dafny.ISequence<__A>> Extend<__A>(Dafny.ISequence<__A> s, __A elt) {
      return _System.Tuple2<BigInteger, Dafny.ISequence<__A>>.create(new BigInteger((s).Count), Dafny.Sequence<__A>.Concat(s, Dafny.Sequence<__A>.FromElements(elt)));
    }
    public static DAM.Utils._IOption<__V> mapGet<__K, __V>(Dafny.IMap<__K, __V> m, __K k) {
      if ((m).Contains(k)) {
        return DAM.Utils.Option<__V>.create_Some(Dafny.Map<__K, __V>.Select(m, k));
      } else {
        return DAM.Utils.Option<__V>.create_None();
      }
    }
    public static DAM.Utils._IOption<Dafny.IMap<__K, __V>> mapOption<__K, __V>(Dafny.IMap<__K, DAM.Utils._IOption<__V>> m) {
      if (Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, bool>>((m) => Dafny.Helpers.Quantifier<__K>((m).Keys.Elements, true, (((_forall_var_0) => {
        __K k = (__K)_forall_var_0;
        return !((m).Contains(k)) || ((Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).is_Some);
      }))))(m)) {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_Some(Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, Dafny.IMap<__K, __V>>>((m) => ((System.Func<Dafny.IMap<__K, __V>>)(() => {
          var _coll0 = new System.Collections.Generic.List<Dafny.Pair<__K, __V>>();
          foreach (__K _compr_0 in (m).Keys.Elements) {
            __K k = (__K)_compr_0;
            if ((m).Contains(k)) {
              _coll0.Add(new Dafny.Pair<__K, __V>(k, (Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).Extract()));
            }
          }
          return Dafny.Map<__K, __V>.FromCollection(_coll0);
        }))())(m));
      } else {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_None();
      }
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM.Utils._IOption<__B> PropagateFailure<__B>();
    A Extract();
    A GetOr(A @default);
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM.Utils._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM.Utils._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM.Utils._IOption<A>>(DAM.Utils.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM.Utils._IOption<__B> PropagateFailure<__B>() {
      return DAM.Utils.Option<__B>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
    public A GetOr(A @default) {
      DAM.Utils._IOption<A> _source0 = this;
      if (_source0.is_None) {
        return @default;
      } else {
        A __mcc_h0 = _source0.dtor_value;
        A v = __mcc_h0;
        return v;
      }
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Utils
namespace DAM.Syntax {

  public partial class __default {
    public static DAM.Syntax._IStmt Let(DAM.Syntax._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IPos ty, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Call(DAM.Syntax.Stmt.create_Func(var__, ty, rhs), lhs);
    }
    public static DAM.Syntax._INeg Command() {
      return DAM.Syntax.Neg.create_Value(DAM.Syntax.Pos.create_Unit());
    }
    public static DAM.Syntax._IStmt Then(DAM.Syntax._IStmt lhs, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Bind(lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), rhs);
    }
    public static DAM.Syntax._IStmt Skip() {
      return DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Unit());
    }
    public static DAM.Syntax._IStmt While(DAM.Syntax._IStmt guard, DAM.Syntax._IStmt body, DAM.Syntax._IStmt next) {
      return DAM.Syntax.Stmt.create_Rec(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), DAM.Syntax.__default.Command(), DAM.Syntax.Stmt.create_Bind(guard, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), DAM.Syntax.__default.Then(body, DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while")))), next)));
    }
  }

  public interface _IPos {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    DAM.Syntax._INeg dtor_neg { get; }
    DAM.Syntax._IPos dtor_ref { get; }
    DAM.Syntax._INeg dtor_start { get; }
    _IPos DowncastClone();
  }
  public abstract class Pos : _IPos {
    public Pos() {
    }
    private static readonly DAM.Syntax._IPos theDefault = create_Unit();
    public static DAM.Syntax._IPos Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IPos> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IPos>(DAM.Syntax.Pos.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IPos> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPos create_Unit() {
      return new Pos_Unit();
    }
    public static _IPos create_Bool() {
      return new Pos_Bool();
    }
    public static _IPos create_Int() {
      return new Pos_Int();
    }
    public static _IPos create_Thunk(DAM.Syntax._INeg neg) {
      return new Pos_Thunk(neg);
    }
    public static _IPos create_Ref(DAM.Syntax._IPos @ref) {
      return new Pos_Ref(@ref);
    }
    public static _IPos create_Stack(DAM.Syntax._INeg start) {
      return new Pos_Stack(start);
    }
    public bool is_Unit { get { return this is Pos_Unit; } }
    public bool is_Bool { get { return this is Pos_Bool; } }
    public bool is_Int { get { return this is Pos_Int; } }
    public bool is_Thunk { get { return this is Pos_Thunk; } }
    public bool is_Ref { get { return this is Pos_Ref; } }
    public bool is_Stack { get { return this is Pos_Stack; } }
    public DAM.Syntax._INeg dtor_neg {
      get {
        var d = this;
        return ((Pos_Thunk)d)._neg;
      }
    }
    public DAM.Syntax._IPos dtor_ref {
      get {
        var d = this;
        return ((Pos_Ref)d)._ref;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Pos_Stack)d)._start;
      }
    }
    public abstract _IPos DowncastClone();
  }
  public class Pos_Unit : Pos {
    public Pos_Unit() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Unit";
      return s;
    }
  }
  public class Pos_Bool : Pos {
    public Pos_Bool() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Bool";
      return s;
    }
  }
  public class Pos_Int : Pos {
    public Pos_Int() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Int";
      return s;
    }
  }
  public class Pos_Thunk : Pos {
    public readonly DAM.Syntax._INeg _neg;
    public Pos_Thunk(DAM.Syntax._INeg neg) : base() {
      this._neg = neg;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Thunk(_neg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Thunk;
      return oth != null && object.Equals(this._neg, oth._neg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._neg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._neg);
      s += ")";
      return s;
    }
  }
  public class Pos_Ref : Pos {
    public readonly DAM.Syntax._IPos _ref;
    public Pos_Ref(DAM.Syntax._IPos @ref) : base() {
      this._ref = @ref;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Ref(_ref);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Ref;
      return oth != null && object.Equals(this._ref, oth._ref);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ")";
      return s;
    }
  }
  public class Pos_Stack : Pos {
    public readonly DAM.Syntax._INeg _start;
    public Pos_Stack(DAM.Syntax._INeg start) : base() {
      this._start = start;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Stack(_start);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Stack;
      return oth != null && object.Equals(this._start, oth._start);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ")";
      return s;
    }
  }

  public interface _INeg {
    bool is_Value { get; }
    bool is_Function { get; }
    bool is_Record { get; }
    DAM.Syntax._IPos dtor_pos { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._INeg dtor_cod { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields { get; }
    _INeg DowncastClone();
  }
  public abstract class Neg : _INeg {
    public Neg() {
    }
    private static readonly DAM.Syntax._INeg theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>.Empty);
    public static DAM.Syntax._INeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._INeg> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._INeg>(DAM.Syntax.Neg.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._INeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INeg create_Value(DAM.Syntax._IPos pos) {
      return new Neg_Value(pos);
    }
    public static _INeg create_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) {
      return new Neg_Function(dom, cod);
    }
    public static _INeg create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) {
      return new Neg_Record(fields);
    }
    public bool is_Value { get { return this is Neg_Value; } }
    public bool is_Function { get { return this is Neg_Function; } }
    public bool is_Record { get { return this is Neg_Record; } }
    public DAM.Syntax._IPos dtor_pos {
      get {
        var d = this;
        return ((Neg_Value)d)._pos;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Neg_Function)d)._dom;
      }
    }
    public DAM.Syntax._INeg dtor_cod {
      get {
        var d = this;
        return ((Neg_Function)d)._cod;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields {
      get {
        var d = this;
        return ((Neg_Record)d)._fields;
      }
    }
    public abstract _INeg DowncastClone();
  }
  public class Neg_Value : Neg {
    public readonly DAM.Syntax._IPos _pos;
    public Neg_Value(DAM.Syntax._IPos pos) : base() {
      this._pos = pos;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Value(_pos);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Value;
      return oth != null && object.Equals(this._pos, oth._pos);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pos));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._pos);
      s += ")";
      return s;
    }
  }
  public class Neg_Function : Neg {
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._INeg _cod;
    public Neg_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) : base() {
      this._dom = dom;
      this._cod = cod;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Function(_dom, _cod);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Function;
      return oth != null && object.Equals(this._dom, oth._dom) && object.Equals(this._cod, oth._cod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Function";
      s += "(";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cod);
      s += ")";
      return s;
    }
  }
  public class Neg_Record : Neg {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _fields;
    public Neg_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) : base() {
      this._fields = fields;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    DAM.Syntax._IStmt dtor_Thunk_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM.Syntax._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM.Syntax._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IExpr>(DAM.Syntax.Expr.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Unit() {
      return new Expr_Unit();
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_Thunk(DAM.Syntax._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Unit { get { return this is Expr_Unit; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Unit : Expr {
    public Expr_Unit() : base() {
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Unit";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM.Syntax._IStmt _a0;
    public Expr_Thunk(DAM.Syntax._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Record { get; }
    bool is_Select { get; }
    bool is_Force { get; }
    bool is_New { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    bool is_Print { get; }
    bool is_Rec { get; }
    bool is_LetCS { get; }
    bool is_Throw { get; }
    DAM.Syntax._IExpr dtor_Pure_a0 { get; }
    DAM.Syntax._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM.Syntax._IStmt dtor_rhs { get; }
    DAM.Syntax._IExpr dtor_guard { get; }
    DAM.Syntax._IStmt dtor_then__ { get; }
    DAM.Syntax._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._IStmt dtor_body { get; }
    DAM.Syntax._IStmt dtor_func { get; }
    DAM.Syntax._IExpr dtor_arg { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields { get; }
    DAM.Syntax._IStmt dtor_record { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    DAM.Syntax._IExpr dtor_Force_a0 { get; }
    DAM.Syntax._IExpr dtor_init { get; }
    DAM.Syntax._IStmt dtor_next { get; }
    DAM.Syntax._IExpr dtor_ref { get; }
    DAM.Syntax._IExpr dtor_lvalue { get; }
    DAM.Syntax._IExpr dtor_rvalue { get; }
    DAM.Syntax._IExpr dtor_Print_a0 { get; }
    DAM.Syntax._INeg dtor_fix { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Syntax._IExpr dtor_stack { get; }
    DAM.Syntax._INeg dtor_oldstart { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM.Syntax._IStmt theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Empty);
    public static DAM.Syntax._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IStmt>(DAM.Syntax.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM.Syntax._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) {
      return new Stmt_Func(bound, dom, body);
    }
    public static _IStmt create_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) {
      return new Stmt_Record(fields);
    }
    public static _IStmt create_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) {
      return new Stmt_Select(record, field);
    }
    public static _IStmt create_Force(DAM.Syntax._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_New(init, var__, next);
    }
    public static _IStmt create_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_Read(@ref, var__, next);
    }
    public static _IStmt create_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) {
      return new Stmt_Write(lvalue, rvalue, next);
    }
    public static _IStmt create_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) {
      return new Stmt_Print(_a0, next);
    }
    public static _IStmt create_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) {
      return new Stmt_Rec(bound, fix, body);
    }
    public static _IStmt create_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) {
      return new Stmt_LetCS(bound, start, body);
    }
    public static _IStmt create_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) {
      return new Stmt_Throw(stack, oldstart, next);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Record { get { return this is Stmt_Record; } }
    public bool is_Select { get { return this is Stmt_Select; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_New { get { return this is Stmt_New; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public bool is_Print { get { return this is Stmt_Print; } }
    public bool is_Rec { get { return this is Stmt_Rec; } }
    public bool is_LetCS { get { return this is Stmt_LetCS; } }
    public bool is_Throw { get { return this is Stmt_Throw; } }
    public DAM.Syntax._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        if (d is Stmt_New) { return ((Stmt_New)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM.Syntax._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM.Syntax._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM.Syntax._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM.Syntax._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._bound; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._bound; }
        return ((Stmt_LetCS)d)._bound;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Stmt_Func)d)._dom;
      }
    }
    public DAM.Syntax._IStmt dtor_body {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._body; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._body; }
        return ((Stmt_LetCS)d)._body;
      }
    }
    public DAM.Syntax._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM.Syntax._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields {
      get {
        var d = this;
        return ((Stmt_Record)d)._fields;
      }
    }
    public DAM.Syntax._IStmt dtor_record {
      get {
        var d = this;
        return ((Stmt_Select)d)._record;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Stmt_Select)d)._field;
      }
    }
    public DAM.Syntax._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_init {
      get {
        var d = this;
        return ((Stmt_New)d)._init;
      }
    }
    public DAM.Syntax._IStmt dtor_next {
      get {
        var d = this;
        if (d is Stmt_New) { return ((Stmt_New)d)._next; }
        if (d is Stmt_Read) { return ((Stmt_Read)d)._next; }
        if (d is Stmt_Write) { return ((Stmt_Write)d)._next; }
        if (d is Stmt_Print) { return ((Stmt_Print)d)._next; }
        return ((Stmt_Throw)d)._next;
      }
    }
    public DAM.Syntax._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM.Syntax._IExpr dtor_lvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._lvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_rvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._rvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_Print_a0 {
      get {
        var d = this;
        return ((Stmt_Print)d)._a0;
      }
    }
    public DAM.Syntax._INeg dtor_fix {
      get {
        var d = this;
        return ((Stmt_Rec)d)._fix;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Stmt_LetCS)d)._start;
      }
    }
    public DAM.Syntax._IExpr dtor_stack {
      get {
        var d = this;
        return ((Stmt_Throw)d)._stack;
      }
    }
    public DAM.Syntax._INeg dtor_oldstart {
      get {
        var d = this;
        return ((Stmt_Throw)d)._oldstart;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Pure(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM.Syntax._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _rhs;
    public Stmt_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM.Syntax._IExpr _guard;
    public readonly DAM.Syntax._IStmt _then__;
    public readonly DAM.Syntax._IStmt _else__;
    public Stmt_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._dom = dom;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _dom, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._dom, oth._dom) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM.Syntax._IStmt _func;
    public readonly DAM.Syntax._IExpr _arg;
    public Stmt_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Record : Stmt {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _fields;
    public Stmt_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) : base() {
      this._fields = fields;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Stmt_Select : Stmt {
    public readonly DAM.Syntax._IStmt _record;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Stmt_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._record = record;
      this._field = field;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Select(_record, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Select;
      return oth != null && object.Equals(this._record, oth._record) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._record));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._record);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Force(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_New : Stmt {
    public readonly DAM.Syntax._IExpr _init;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._init = init;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_New(_init, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_New;
      return oth != null && object.Equals(this._init, oth._init) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._init));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._init);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM.Syntax._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM.Syntax._IExpr _lvalue;
    public readonly DAM.Syntax._IExpr _rvalue;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) : base() {
      this._lvalue = lvalue;
      this._rvalue = rvalue;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_lvalue, _rvalue, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Write;
      return oth != null && object.Equals(this._lvalue, oth._lvalue) && object.Equals(this._rvalue, oth._rvalue) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._lvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Print : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) : base() {
      this._a0 = _a0;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Print(_a0, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Print;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Rec : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _fix;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._fix = fix;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Rec(_bound, _fix, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Rec;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._fix, oth._fix) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fix));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Rec";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fix);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_LetCS : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._start = start;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_LetCS(_bound, _start, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_LetCS;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._start, oth._start) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.LetCS";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Throw : Stmt {
    public readonly DAM.Syntax._IExpr _stack;
    public readonly DAM.Syntax._INeg _oldstart;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) : base() {
      this._stack = stack;
      this._oldstart = oldstart;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Throw(_stack, _oldstart, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Throw;
      return oth != null && object.Equals(this._stack, oth._stack) && object.Equals(this._oldstart, oth._oldstart) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._oldstart));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Throw";
      s += "(";
      s += Dafny.Helpers.ToString(this._stack);
      s += ", ";
      s += Dafny.Helpers.ToString(this._oldstart);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Syntax
namespace DAM.Machine {

  public partial class __default {
    public static DAM.Machine._IOutput Next(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Silent(), next);
    }
  }

  public interface _IVal {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    bool dtor_answer { get; }
    BigInteger dtor_Int_a0 { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure { get; }
    BigInteger dtor_addr { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Machine._IStack dtor_stack { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM.Machine._IVal theDefault = create_Unit();
    public static DAM.Machine._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IVal> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IVal>(DAM.Machine.Val.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Unit() {
      return new Val_Unit();
    }
    public static _IVal create_Bool(bool answer) {
      return new Val_Bool(answer);
    }
    public static _IVal create_Int(BigInteger _a0) {
      return new Val_Int(_a0);
    }
    public static _IVal create_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) {
      return new Val_Thunk(closure);
    }
    public static _IVal create_Ref(BigInteger addr) {
      return new Val_Ref(addr);
    }
    public static _IVal create_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
      return new Val_Stack(start, stack);
    }
    public bool is_Unit { get { return this is Val_Unit; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool is_Stack { get { return this is Val_Stack; } }
    public bool dtor_answer {
      get {
        var d = this;
        return ((Val_Bool)d)._answer;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Val_Int)d)._a0;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure {
      get {
        var d = this;
        return ((Val_Thunk)d)._closure;
      }
    }
    public BigInteger dtor_addr {
      get {
        var d = this;
        return ((Val_Ref)d)._addr;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Val_Stack)d)._start;
      }
    }
    public DAM.Machine._IStack dtor_stack {
      get {
        var d = this;
        return ((Val_Stack)d)._stack;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Unit : Val {
    public Val_Unit() : base() {
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Unit";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _answer;
    public Val_Bool(bool answer) : base() {
      this._answer = answer;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_answer);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Bool;
      return oth != null && this._answer == oth._answer;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._answer));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._answer);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _a0;
    public Val_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _closure;
    public Val_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) : base() {
      this._closure = closure;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_closure);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Thunk;
      return oth != null && object.Equals(this._closure, oth._closure);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._closure));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._closure);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly BigInteger _addr;
    public Val_Ref(BigInteger addr) : base() {
      this._addr = addr;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_addr);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Ref;
      return oth != null && this._addr == oth._addr;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._addr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._addr);
      s += ")";
      return s;
    }
  }
  public class Val_Stack : Val {
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Machine._IStack _stack;
    public Val_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) : base() {
      this._start = start;
      this._stack = stack;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Stack(_start, _stack);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Stack;
      return oth != null && object.Equals(this._start, oth._start) && object.Equals(this._stack, oth._stack);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._stack);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM.Machine._IFrame dtor_top { get; }
    DAM.Machine._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM.Machine._IStack theDefault = create_Empty();
    public static DAM.Machine._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IStack> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IStack>(DAM.Machine.Stack.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM.Machine._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM.Machine._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop() {
      DAM.Machine._IStack _source1 = this;
      if (_source1.is_Empty) {
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_None();
      } else {
        DAM.Machine._IFrame _10___mcc_h0 = _source1.dtor_top;
        DAM.Machine._IStack _11___mcc_h1 = _source1.dtor_rest;
        DAM.Machine._IStack _12_r = _11___mcc_h1;
        DAM.Machine._IFrame _13_t = _10___mcc_h0;
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_Some(_System.Tuple2<DAM.Machine._IFrame, DAM.Machine._IStack>.create(_13_t, _12_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM.Machine._IFrame _top;
    public readonly DAM.Machine._IStack _rest;
    public Stack_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM.Machine._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()));
    public static DAM.Machine._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IFrame>(DAM.Machine.Frame.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) {
      return new Frame_Call(arg);
    }
    public static _IFrame create_Select(Dafny.ISequence<Dafny.Rune> field) {
      return new Frame_Select(field);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public bool is_Select { get { return this is Frame_Select; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Frame_Select)d)._field;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _arg;
    public Frame_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Frame_Select : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Frame_Select(Dafny.ISequence<Dafny.Rune> field) : base() {
      this._field = field;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Select(_field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Select;
      return oth != null && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Select";
      s += "(";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IEvent {
    bool is_Silent { get; }
    bool is_Print { get; }
    DAM.Machine._IVal dtor_Print_a0 { get; }
    _IEvent DowncastClone();
  }
  public abstract class Event : _IEvent {
    public Event() {
    }
    private static readonly DAM.Machine._IEvent theDefault = create_Silent();
    public static DAM.Machine._IEvent Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IEvent> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IEvent>(DAM.Machine.Event.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IEvent> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEvent create_Silent() {
      return new Event_Silent();
    }
    public static _IEvent create_Print(DAM.Machine._IVal _a0) {
      return new Event_Print(_a0);
    }
    public bool is_Silent { get { return this is Event_Silent; } }
    public bool is_Print { get { return this is Event_Print; } }
    public DAM.Machine._IVal dtor_Print_a0 {
      get {
        var d = this;
        return ((Event_Print)d)._a0;
      }
    }
    public abstract _IEvent DowncastClone();
  }
  public class Event_Silent : Event {
    public Event_Silent() : base() {
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Silent();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Silent;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Silent";
      return s;
    }
  }
  public class Event_Print : Event {
    public readonly DAM.Machine._IVal _a0;
    public Event_Print(DAM.Machine._IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IOutput {
    bool is_Raise { get; }
    bool is_Terminal { get; }
    DAM.Machine._IEvent dtor_event { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next { get; }
    _IOutput DowncastClone();
  }
  public abstract class Output : _IOutput {
    public Output() {
    }
    private static readonly DAM.Machine._IOutput theDefault = create_Raise(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()));
    public static DAM.Machine._IOutput Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IOutput> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IOutput>(DAM.Machine.Output.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IOutput> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOutput create_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return new Output_Raise(@event, next);
    }
    public static _IOutput create_Terminal() {
      return new Output_Terminal();
    }
    public bool is_Raise { get { return this is Output_Raise; } }
    public bool is_Terminal { get { return this is Output_Terminal; } }
    public DAM.Machine._IEvent dtor_event {
      get {
        var d = this;
        return ((Output_Raise)d)._event;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next {
      get {
        var d = this;
        return ((Output_Raise)d)._next;
      }
    }
    public abstract _IOutput DowncastClone();
  }
  public class Output_Raise : Output {
    public readonly DAM.Machine._IEvent _event;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _next;
    public Output_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) : base() {
      this._event = @event;
      this._next = next;
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Raise(_event, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Raise;
      return oth != null && object.Equals(this._event, oth._event) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._event));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Raise";
      s += "(";
      s += Dafny.Helpers.ToString(this._event);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Output_Terminal : Output {
    public Output_Terminal() : base() {
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Terminal();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Terminal;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Terminal";
      return s;
    }
  }
} // end of namespace DAM.Machine
namespace DAM.Statics {

  public partial class __default {
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr expr) {
      DAM.Syntax._IExpr _source2 = expr;
      if (_source2.is_Var) {
        Dafny.ISequence<Dafny.Rune> _14___mcc_h0 = _source2.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _15_x = _14___mcc_h0;
        return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(g, _15_x);
      } else if (_source2.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source2.is_Bool) {
        bool _16___mcc_h1 = _source2.dtor_Bool_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source2.is_Int) {
        BigInteger _17___mcc_h2 = _source2.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else {
        DAM.Syntax._IStmt _18___mcc_h3 = _source2.dtor_Thunk_a0;
        DAM.Syntax._IStmt _19_s = _18___mcc_h3;
        DAM.Utils._IOption<DAM.Syntax._INeg> _20_valueOrError0 = DAM.Statics.__default.SynthStmt(g, _19_s);
        if ((_20_valueOrError0).IsFailure()) {
          return (_20_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._INeg _21_t = (_20_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_21_t));
        }
      }
    }
    public static bool CheckExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr e, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthExpr(g, e), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt) {
      DAM.Syntax._IStmt _source3 = stmt;
      if (_source3.is_Pure) {
        DAM.Syntax._IExpr _22___mcc_h0 = _source3.dtor_Pure_a0;
        DAM.Syntax._IExpr _23_e = _22___mcc_h0;
        DAM.Utils._IOption<DAM.Syntax._IPos> _24_valueOrError0 = DAM.Statics.__default.SynthExpr(g, _23_e);
        if ((_24_valueOrError0).IsFailure()) {
          return (_24_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _25_t = (_24_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Value(_25_t));
        }
      } else if (_source3.is_Bind) {
        DAM.Syntax._IStmt _26___mcc_h1 = _source3.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _27___mcc_h2 = _source3.dtor_var__;
        DAM.Syntax._IStmt _28___mcc_h3 = _source3.dtor_rhs;
        DAM.Syntax._IStmt _29_rhs = _28___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _30_var__ = _27___mcc_h2;
        DAM.Syntax._IStmt _31_lhs = _26___mcc_h1;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source4 = DAM.Statics.__default.SynthStmt(g, _31_lhs);
        if (_source4.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _32___mcc_h36 = _source4.dtor_value;
          DAM.Syntax._INeg _source5 = _32___mcc_h36;
          if (_source5.is_Value) {
            DAM.Syntax._IPos _33___mcc_h38 = _source5.dtor_pos;
            DAM.Syntax._IPos _34_t = _33___mcc_h38;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _30_var__, _34_t), _29_rhs);
          } else if (_source5.is_Function) {
            DAM.Syntax._IPos _35___mcc_h40 = _source5.dtor_dom;
            DAM.Syntax._INeg _36___mcc_h41 = _source5.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _37___mcc_h44 = _source5.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Ite) {
        DAM.Syntax._IExpr _38___mcc_h4 = _source3.dtor_guard;
        DAM.Syntax._IStmt _39___mcc_h5 = _source3.dtor_then__;
        DAM.Syntax._IStmt _40___mcc_h6 = _source3.dtor_else__;
        DAM.Syntax._IStmt _41_else__ = _40___mcc_h6;
        DAM.Syntax._IStmt _42_then__ = _39___mcc_h5;
        DAM.Syntax._IExpr _43_guard = _38___mcc_h4;
        if (DAM.Statics.__default.CheckExpr(g, _43_guard, DAM.Syntax.Pos.create_Bool())) {
          DAM.Utils._IOption<DAM.Syntax._INeg> _44_valueOrError1 = DAM.Statics.__default.SynthStmt(g, _42_then__);
          if ((_44_valueOrError1).IsFailure()) {
            return (_44_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _45_t = (_44_valueOrError1).Extract();
            if (DAM.Statics.__default.CheckStmt(g, _41_else__, _45_t)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_45_t);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_Func) {
        Dafny.ISequence<Dafny.Rune> _46___mcc_h7 = _source3.dtor_bound;
        DAM.Syntax._IPos _47___mcc_h8 = _source3.dtor_dom;
        DAM.Syntax._IStmt _48___mcc_h9 = _source3.dtor_body;
        DAM.Syntax._IStmt _49_body = _48___mcc_h9;
        DAM.Syntax._IPos _50_dom = _47___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _51_bound = _46___mcc_h7;
        DAM.Utils._IOption<DAM.Syntax._INeg> _52_valueOrError2 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _51_bound, _50_dom), _49_body);
        if ((_52_valueOrError2).IsFailure()) {
          return (_52_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _53_cod = (_52_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Function(_50_dom, _53_cod));
        }
      } else if (_source3.is_Call) {
        DAM.Syntax._IStmt _54___mcc_h10 = _source3.dtor_func;
        DAM.Syntax._IExpr _55___mcc_h11 = _source3.dtor_arg;
        DAM.Syntax._IExpr _56_arg = _55___mcc_h11;
        DAM.Syntax._IStmt _57_func = _54___mcc_h10;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source6 = DAM.Statics.__default.SynthStmt(g, _57_func);
        if (_source6.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _58___mcc_h46 = _source6.dtor_value;
          DAM.Syntax._INeg _source7 = _58___mcc_h46;
          if (_source7.is_Value) {
            DAM.Syntax._IPos _59___mcc_h48 = _source7.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source7.is_Function) {
            DAM.Syntax._IPos _60___mcc_h50 = _source7.dtor_dom;
            DAM.Syntax._INeg _61___mcc_h51 = _source7.dtor_cod;
            DAM.Syntax._INeg _62_cod = _61___mcc_h51;
            DAM.Syntax._IPos _63_dom = _60___mcc_h50;
            if (DAM.Statics.__default.CheckExpr(g, _56_arg, _63_dom)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_62_cod);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _64___mcc_h54 = _source7.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _65___mcc_h12 = _source3.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _66_fields = _65___mcc_h12;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>> _67_valueOrError4 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>>((_68_fields, _69_g) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>)(() => {
          var _coll1 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_1 in (_68_fields).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _70_lbl = (Dafny.ISequence<Dafny.Rune>)_compr_1;
            if ((_68_fields).Contains(_70_lbl)) {
              _coll1.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>(_70_lbl, DAM.Statics.__default.SynthStmt(_69_g, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_68_fields, _70_lbl))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>.FromCollection(_coll1);
        }))())(_66_fields, g));
        if ((_67_valueOrError4).IsFailure()) {
          return (_67_valueOrError4).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _71_fields = (_67_valueOrError4).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Record(_71_fields));
        }
      } else if (_source3.is_Select) {
        DAM.Syntax._IStmt _72___mcc_h13 = _source3.dtor_record;
        Dafny.ISequence<Dafny.Rune> _73___mcc_h14 = _source3.dtor_field;
        Dafny.ISequence<Dafny.Rune> _74_lbl = _73___mcc_h14;
        DAM.Syntax._IStmt _75_record = _72___mcc_h13;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source8 = DAM.Statics.__default.SynthStmt(g, _75_record);
        if (_source8.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _76___mcc_h56 = _source8.dtor_value;
          DAM.Syntax._INeg _source9 = _76___mcc_h56;
          if (_source9.is_Value) {
            DAM.Syntax._IPos _77___mcc_h58 = _source9.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source9.is_Function) {
            DAM.Syntax._IPos _78___mcc_h60 = _source9.dtor_dom;
            DAM.Syntax._INeg _79___mcc_h61 = _source9.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _80___mcc_h64 = _source9.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _81_fields = _80___mcc_h64;
            return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_81_fields, _74_lbl);
          }
        }
      } else if (_source3.is_Force) {
        DAM.Syntax._IExpr _82___mcc_h15 = _source3.dtor_Force_a0;
        DAM.Syntax._IExpr _83_expr = _82___mcc_h15;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source10 = DAM.Statics.__default.SynthExpr(g, _83_expr);
        if (_source10.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _84___mcc_h66 = _source10.dtor_value;
          DAM.Syntax._IPos _source11 = _84___mcc_h66;
          if (_source11.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Thunk) {
            DAM.Syntax._INeg _85___mcc_h68 = _source11.dtor_neg;
            DAM.Syntax._INeg _86_t = _85___mcc_h68;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_86_t);
          } else if (_source11.is_Ref) {
            DAM.Syntax._IPos _87___mcc_h70 = _source11.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _88___mcc_h72 = _source11.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_New) {
        DAM.Syntax._IExpr _89___mcc_h16 = _source3.dtor_init;
        Dafny.ISequence<Dafny.Rune> _90___mcc_h17 = _source3.dtor_var__;
        DAM.Syntax._IStmt _91___mcc_h18 = _source3.dtor_next;
        DAM.Syntax._IStmt _92_next = _91___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _93_var__ = _90___mcc_h17;
        DAM.Syntax._IExpr _94_init = _89___mcc_h16;
        DAM.Utils._IOption<DAM.Syntax._IPos> _95_valueOrError5 = DAM.Statics.__default.SynthExpr(g, _94_init);
        if ((_95_valueOrError5).IsFailure()) {
          return (_95_valueOrError5).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _96_t = (_95_valueOrError5).Extract();
          return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _93_var__, DAM.Syntax.Pos.create_Ref(_96_t)), _92_next);
        }
      } else if (_source3.is_Read) {
        DAM.Syntax._IExpr _97___mcc_h19 = _source3.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _98___mcc_h20 = _source3.dtor_var__;
        DAM.Syntax._IStmt _99___mcc_h21 = _source3.dtor_next;
        DAM.Syntax._IStmt _100_next = _99___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _101_var__ = _98___mcc_h20;
        DAM.Syntax._IExpr _102_ref = _97___mcc_h19;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source12 = DAM.Statics.__default.SynthExpr(g, _102_ref);
        if (_source12.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _103___mcc_h74 = _source12.dtor_value;
          DAM.Syntax._IPos _source13 = _103___mcc_h74;
          if (_source13.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Thunk) {
            DAM.Syntax._INeg _104___mcc_h76 = _source13.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Ref) {
            DAM.Syntax._IPos _105___mcc_h78 = _source13.dtor_ref;
            DAM.Syntax._IPos _106_t = _105___mcc_h78;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _101_var__, _106_t), _100_next);
          } else {
            DAM.Syntax._INeg _107___mcc_h80 = _source13.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Write) {
        DAM.Syntax._IExpr _108___mcc_h22 = _source3.dtor_lvalue;
        DAM.Syntax._IExpr _109___mcc_h23 = _source3.dtor_rvalue;
        DAM.Syntax._IStmt _110___mcc_h24 = _source3.dtor_next;
        DAM.Syntax._IStmt _111_next = _110___mcc_h24;
        DAM.Syntax._IExpr _112_rhs = _109___mcc_h23;
        DAM.Syntax._IExpr _113_lhs = _108___mcc_h22;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source14 = DAM.Statics.__default.SynthExpr(g, _113_lhs);
        if (_source14.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _114___mcc_h82 = _source14.dtor_value;
          DAM.Syntax._IPos _source15 = _114___mcc_h82;
          if (_source15.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Thunk) {
            DAM.Syntax._INeg _115___mcc_h84 = _source15.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Ref) {
            DAM.Syntax._IPos _116___mcc_h86 = _source15.dtor_ref;
            DAM.Syntax._IPos _117_t = _116___mcc_h86;
            if (DAM.Statics.__default.CheckExpr(g, _112_rhs, _117_t)) {
              return DAM.Statics.__default.SynthStmt(g, _111_next);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            DAM.Syntax._INeg _118___mcc_h88 = _source15.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Print) {
        DAM.Syntax._IExpr _119___mcc_h25 = _source3.dtor_Print_a0;
        DAM.Syntax._IStmt _120___mcc_h26 = _source3.dtor_next;
        DAM.Syntax._IStmt _121_next = _120___mcc_h26;
        DAM.Syntax._IExpr _122_expr = _119___mcc_h25;
        DAM.Utils._IOption<DAM.Syntax._IPos> _123_valueOrError3 = DAM.Statics.__default.SynthExpr(g, _122_expr);
        if ((_123_valueOrError3).IsFailure()) {
          return (_123_valueOrError3).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _124___v14 = (_123_valueOrError3).Extract();
          return DAM.Statics.__default.SynthStmt(g, _121_next);
        }
      } else if (_source3.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _125___mcc_h27 = _source3.dtor_bound;
        DAM.Syntax._INeg _126___mcc_h28 = _source3.dtor_fix;
        DAM.Syntax._IStmt _127___mcc_h29 = _source3.dtor_body;
        DAM.Syntax._IStmt _128_body = _127___mcc_h29;
        DAM.Syntax._INeg _129_fix = _126___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _130_self = _125___mcc_h27;
        if (DAM.Statics.__default.CheckStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _130_self, DAM.Syntax.Pos.create_Thunk(_129_fix)), _128_body, _129_fix)) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_129_fix);
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _131___mcc_h30 = _source3.dtor_bound;
        DAM.Syntax._INeg _132___mcc_h31 = _source3.dtor_start;
        DAM.Syntax._IStmt _133___mcc_h32 = _source3.dtor_body;
        DAM.Syntax._IStmt _134_body = _133___mcc_h32;
        DAM.Syntax._INeg _135_start = _132___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _136_bound = _131___mcc_h30;
        return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _136_bound, DAM.Syntax.Pos.create_Stack(_135_start)), _134_body);
      } else {
        DAM.Syntax._IExpr _137___mcc_h33 = _source3.dtor_stack;
        DAM.Syntax._INeg _138___mcc_h34 = _source3.dtor_oldstart;
        DAM.Syntax._IStmt _139___mcc_h35 = _source3.dtor_next;
        DAM.Syntax._IStmt _140_next = _139___mcc_h35;
        DAM.Syntax._INeg _141_oldstart = _138___mcc_h34;
        DAM.Syntax._IExpr _142_stack = _137___mcc_h33;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source16 = DAM.Statics.__default.SynthExpr(g, _142_stack);
        if (_source16.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _143___mcc_h90 = _source16.dtor_value;
          DAM.Syntax._IPos _source17 = _143___mcc_h90;
          if (_source17.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Thunk) {
            DAM.Syntax._INeg _144___mcc_h92 = _source17.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Ref) {
            DAM.Syntax._IPos _145___mcc_h94 = _source17.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _146___mcc_h96 = _source17.dtor_start;
            DAM.Syntax._INeg _147_start = _146___mcc_h96;
            if (DAM.Statics.__default.CheckStmt(g, _140_next, _147_start)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_141_oldstart);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        }
      }
    }
    public static bool CheckStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt, DAM.Syntax._INeg t) {
      return object.Equals(DAM.Statics.__default.SynthStmt(g, stmt), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(t));
    }
    public static DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> SynthEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env) {
      return DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_148_env, _149_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
        var _coll2 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
        foreach (Dafny.ISequence<Dafny.Rune> _compr_2 in (_148_env).Keys.Elements) {
          Dafny.ISequence<Dafny.Rune> _150_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_2;
          if ((_148_env).Contains(_150_var__)) {
            _coll2.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_150_var__, DAM.Statics.__default.SynthVal(_149_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_148_env, _150_var__))));
          }
        }
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll2);
      }))())(env, s));
    }
    public static bool CheckEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g) {
      return object.Equals(DAM.Statics.__default.SynthEnv(s, env), DAM.Utils.Option<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>>.create_Some(g));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs0 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _151_env = _let_tmp_rhs0.dtor__0;
      DAM.Syntax._IExpr _152_expr = _let_tmp_rhs0.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _153_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _151_env);
      if ((_153_valueOrError0).IsFailure()) {
        return (_153_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _154_g = (_153_valueOrError0).Extract();
        return DAM.Statics.__default.SynthExpr(_154_g, _152_expr);
      }
    }
    public static bool CheckClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthClosedExpr(s, expr), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthClosedStmt(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> stmt) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs1 = stmt;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _155_env = _let_tmp_rhs1.dtor__0;
      DAM.Syntax._IStmt _156_stmt = _let_tmp_rhs1.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _157_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _155_env);
      if ((_157_valueOrError0).IsFailure()) {
        return (_157_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _158_g = (_157_valueOrError0).Extract();
        return DAM.Statics.__default.SynthStmt(_158_g, _156_stmt);
      }
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
    TAIL_CALL_START:;
      DAM.Machine._IStack _source18 = stack;
      if (_source18.is_Empty) {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(start);
      } else {
        DAM.Machine._IFrame _159___mcc_h0 = _source18.dtor_top;
        DAM.Machine._IStack _160___mcc_h1 = _source18.dtor_rest;
        DAM.Machine._IFrame _source19 = _159___mcc_h0;
        if (_source19.is_Bind) {
          Dafny.ISequence<Dafny.Rune> _161___mcc_h2 = _source19.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _162___mcc_h3 = _source19.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source20 = _162___mcc_h3;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _163___mcc_h4 = _source20.dtor__0;
          DAM.Syntax._IStmt _164___mcc_h5 = _source20.dtor__1;
          DAM.Machine._IStack _165_stack = _160___mcc_h1;
          DAM.Syntax._IStmt _166_rhs = _164___mcc_h5;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _167_env = _163___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _168_var__ = _161___mcc_h2;
          DAM.Syntax._INeg _source21 = start;
          if (_source21.is_Value) {
            DAM.Syntax._IPos _169___mcc_h8 = _source21.dtor_pos;
            DAM.Syntax._IPos _170_t = _169___mcc_h8;
            DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _171_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _167_env);
            if ((_171_valueOrError0).IsFailure()) {
              return (_171_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _172_g = (_171_valueOrError0).Extract();
              DAM.Utils._IOption<DAM.Syntax._INeg> _173_valueOrError1 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_172_g, _168_var__, _170_t), _166_rhs);
              if ((_173_valueOrError1).IsFailure()) {
                return (_173_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
              } else {
                DAM.Syntax._INeg _174_start = (_173_valueOrError1).Extract();
                Dafny.ISequence<DAM.Syntax._IPos> _in0 = s;
                DAM.Syntax._INeg _in1 = _174_start;
                DAM.Machine._IStack _in2 = _165_stack;
                s = _in0;
                start = _in1;
                stack = _in2;
                goto TAIL_CALL_START;
              }
            }
          } else if (_source21.is_Function) {
            DAM.Syntax._IPos _175___mcc_h10 = _source21.dtor_dom;
            DAM.Syntax._INeg _176___mcc_h11 = _source21.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _177___mcc_h14 = _source21.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else if (_source19.is_Call) {
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _178___mcc_h6 = _source19.dtor_arg;
          DAM.Machine._IStack _179_stack = _160___mcc_h1;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _180_arg = _178___mcc_h6;
          DAM.Syntax._INeg _source22 = start;
          if (_source22.is_Value) {
            DAM.Syntax._IPos _181___mcc_h16 = _source22.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source22.is_Function) {
            DAM.Syntax._IPos _182___mcc_h18 = _source22.dtor_dom;
            DAM.Syntax._INeg _183___mcc_h19 = _source22.dtor_cod;
            DAM.Syntax._INeg _184_cod = _183___mcc_h19;
            DAM.Syntax._IPos _185_dom = _182___mcc_h18;
            if (DAM.Statics.__default.CheckClosedExpr(s, _180_arg, _185_dom)) {
              Dafny.ISequence<DAM.Syntax._IPos> _in3 = s;
              DAM.Syntax._INeg _in4 = _184_cod;
              DAM.Machine._IStack _in5 = _179_stack;
              s = _in3;
              start = _in4;
              stack = _in5;
              goto TAIL_CALL_START;
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _186___mcc_h22 = _source22.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _187___mcc_h7 = _source19.dtor_field;
          DAM.Machine._IStack _188_stack = _160___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _189_lbl = _187___mcc_h7;
          DAM.Syntax._INeg _source23 = start;
          if (_source23.is_Value) {
            DAM.Syntax._IPos _190___mcc_h24 = _source23.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source23.is_Function) {
            DAM.Syntax._IPos _191___mcc_h26 = _source23.dtor_dom;
            DAM.Syntax._INeg _192___mcc_h27 = _source23.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _193___mcc_h30 = _source23.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _194_fields = _193___mcc_h30;
            DAM.Utils._IOption<DAM.Syntax._INeg> _195_valueOrError2 = DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_194_fields, _189_lbl);
            if ((_195_valueOrError2).IsFailure()) {
              return (_195_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              DAM.Syntax._INeg _196_start = (_195_valueOrError2).Extract();
              Dafny.ISequence<DAM.Syntax._IPos> _in6 = s;
              DAM.Syntax._INeg _in7 = _196_start;
              DAM.Machine._IStack _in8 = _188_stack;
              s = _in6;
              start = _in7;
              stack = _in8;
              goto TAIL_CALL_START;
            }
          }
        }
      }
    }
    public static bool CheckStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthStack(s, start, stack), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val) {
      DAM.Machine._IVal _source24 = val;
      if (_source24.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source24.is_Bool) {
        bool _197___mcc_h0 = _source24.dtor_answer;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source24.is_Int) {
        BigInteger _198___mcc_h1 = _source24.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source24.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _199___mcc_h2 = _source24.dtor_closure;
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source25 = _199___mcc_h2;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _200___mcc_h3 = _source25.dtor__0;
        DAM.Syntax._IStmt _201___mcc_h4 = _source25.dtor__1;
        DAM.Syntax._IStmt _202_stmt = _201___mcc_h4;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _203_env = _200___mcc_h3;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _204_valueOrError0 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_205_env, _206_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
          var _coll3 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_3 in (_205_env).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _207_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_3;
            if ((_205_env).Contains(_207_var__)) {
              _coll3.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_207_var__, DAM.Statics.__default.SynthVal(_206_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_205_env, _207_var__))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll3);
        }))())(_203_env, s));
        if ((_204_valueOrError0).IsFailure()) {
          return (_204_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _208_g = (_204_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _209_valueOrError1 = DAM.Statics.__default.SynthStmt(_208_g, _202_stmt);
          if ((_209_valueOrError1).IsFailure()) {
            return (_209_valueOrError1).PropagateFailure<DAM.Syntax._IPos>();
          } else {
            DAM.Syntax._INeg _210_t = (_209_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_210_t));
          }
        }
      } else if (_source24.is_Ref) {
        BigInteger _211___mcc_h5 = _source24.dtor_addr;
        BigInteger _212_addr = _211___mcc_h5;
        DAM.Utils._IOption<DAM.Syntax._IPos> _213_valueOrError2 = DAM.Utils.__default.SeqGet<DAM.Syntax._IPos>(s, _212_addr);
        if ((_213_valueOrError2).IsFailure()) {
          return (_213_valueOrError2).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._IPos _214_t = (_213_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Ref(_214_t));
        }
      } else {
        DAM.Syntax._INeg _215___mcc_h6 = _source24.dtor_start;
        DAM.Machine._IStack _216___mcc_h7 = _source24.dtor_stack;
        DAM.Machine._IStack _217_stack = _216___mcc_h7;
        DAM.Syntax._INeg _218_start = _215___mcc_h6;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
      }
    }
    public static bool CheckVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthVal(s, val), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static bool CheckStore(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.ISequence<DAM.Machine._IVal> store) {
      return ((new BigInteger((store).Count)) == (new BigInteger((s).Count))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, bool>>((_219_store, _220_s) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((_219_store).Count)), true, (((_forall_var_1) => {
        BigInteger _221_addr = (BigInteger)_forall_var_1;
        return !(((_221_addr).Sign != -1) && ((_221_addr) < (new BigInteger((_219_store).Count)))) || (DAM.Statics.__default.CheckVal(_220_s, (_219_store).Select(_221_addr), (_220_s).Select(_221_addr)));
      }))))(store, s));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs2 = input;
      Dafny.ISequence<DAM.Machine._IVal> _222_sto = _let_tmp_rhs2.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _223_stmt = _let_tmp_rhs2.dtor__1;
      DAM.Machine._IStack _224_stack = _let_tmp_rhs2.dtor__2;
      if (DAM.Statics.__default.CheckStore(s, _222_sto)) {
        DAM.Utils._IOption<DAM.Syntax._INeg> _225_valueOrError0 = DAM.Statics.__default.SynthClosedStmt(s, _223_stmt);
        if ((_225_valueOrError0).IsFailure()) {
          return (_225_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _226_start = (_225_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _227_valueOrError1 = DAM.Statics.__default.SynthStack(s, _226_start, _224_stack);
          if ((_227_valueOrError1).IsFailure()) {
            return (_227_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _228_end = (_227_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_228_end);
          }
        }
      } else {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
      }
    }
    public static bool CheckInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthInput(s, input), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static bool CheckOutput(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IOutput @out, DAM.Syntax._INeg end) {
      DAM.Machine._IOutput _source26 = @out;
      if (_source26.is_Raise) {
        DAM.Machine._IEvent _229___mcc_h0 = _source26.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _230___mcc_h1 = _source26.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _231_next = _230___mcc_h1;
        return DAM.Statics.__default.CheckInput(s, _231_next, end);
      } else {
        return true;
      }
    }
  }
} // end of namespace DAM.Statics
namespace DAM.Dynamics {

  public partial class __default {
    public static DAM.Machine._IVal Eval(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs3 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _232_env = _let_tmp_rhs3.dtor__0;
      DAM.Syntax._IExpr _233_expr = _let_tmp_rhs3.dtor__1;
      DAM.Syntax._IExpr _source27 = _233_expr;
      if (_source27.is_Var) {
        Dafny.ISequence<Dafny.Rune> _234___mcc_h0 = _source27.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _235_x = _234___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_232_env, _235_x);
      } else if (_source27.is_Unit) {
        return DAM.Machine.Val.create_Unit();
      } else if (_source27.is_Bool) {
        bool _236___mcc_h1 = _source27.dtor_Bool_a0;
        bool _237_b = _236___mcc_h1;
        return DAM.Machine.Val.create_Bool(_237_b);
      } else if (_source27.is_Int) {
        BigInteger _238___mcc_h2 = _source27.dtor_Int_a0;
        BigInteger _239_i = _238___mcc_h2;
        return DAM.Machine.Val.create_Int(_239_i);
      } else {
        DAM.Syntax._IStmt _240___mcc_h3 = _source27.dtor_Thunk_a0;
        DAM.Syntax._IStmt _241_stmt = _240___mcc_h3;
        return DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, _241_stmt));
      }
    }
    public static DAM.Machine._IOutput Step(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs4 = input;
      Dafny.ISequence<DAM.Machine._IVal> _242_store = _let_tmp_rhs4.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs5 = _let_tmp_rhs4.dtor__1;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _243_env = _let_tmp_rhs5.dtor__0;
      DAM.Syntax._IStmt _244_stmt = _let_tmp_rhs5.dtor__1;
      DAM.Machine._IStack _245_stack = _let_tmp_rhs4.dtor__2;
      DAM.Syntax._IStmt _source28 = _244_stmt;
      if (_source28.is_Pure) {
        DAM.Syntax._IExpr _246___mcc_h0 = _source28.dtor_Pure_a0;
        DAM.Syntax._IExpr _247_expr = _246___mcc_h0;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source29 = (_245_stack).Pop();
        if (_source29.is_None) {
          DAM.Machine._IOutput _248_output = DAM.Machine.Output.create_Terminal();
          return _248_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _249___mcc_h36 = _source29.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source30 = _249___mcc_h36;
          DAM.Machine._IFrame _250___mcc_h37 = _source30.dtor__0;
          DAM.Machine._IStack _251___mcc_h38 = _source30.dtor__1;
          DAM.Machine._IFrame _source31 = _250___mcc_h37;
          Dafny.ISequence<Dafny.Rune> _252___mcc_h39 = _source31.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _253___mcc_h40 = _source31.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source32 = _253___mcc_h40;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _254___mcc_h41 = _source32.dtor__0;
          DAM.Syntax._IStmt _255___mcc_h42 = _source32.dtor__1;
          DAM.Machine._IStack _256_stack = _251___mcc_h38;
          DAM.Syntax._IStmt _257_rhs = _255___mcc_h42;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _258_env_k = _254___mcc_h41;
          Dafny.ISequence<Dafny.Rune> _259_var__ = _252___mcc_h39;
          DAM.Machine._IVal _260_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _247_expr));
          DAM.Machine._IOutput _261_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_258_env_k, _259_var__, _260_val), _257_rhs), _256_stack));
          return _261_output;
        }
      } else if (_source28.is_Bind) {
        DAM.Syntax._IStmt _262___mcc_h1 = _source28.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _263___mcc_h2 = _source28.dtor_var__;
        DAM.Syntax._IStmt _264___mcc_h3 = _source28.dtor_rhs;
        DAM.Syntax._IStmt _265_rhs = _264___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _266_var__ = _263___mcc_h2;
        DAM.Syntax._IStmt _267_lhs = _262___mcc_h1;
        DAM.Machine._IOutput _268_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _267_lhs), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Bind(_266_var__, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _265_rhs)), _245_stack)));
        return _268_output;
      } else if (_source28.is_Ite) {
        DAM.Syntax._IExpr _269___mcc_h4 = _source28.dtor_guard;
        DAM.Syntax._IStmt _270___mcc_h5 = _source28.dtor_then__;
        DAM.Syntax._IStmt _271___mcc_h6 = _source28.dtor_else__;
        DAM.Syntax._IStmt _272_else__ = _271___mcc_h6;
        DAM.Syntax._IStmt _273_then__ = _270___mcc_h5;
        DAM.Syntax._IExpr _274_guard = _269___mcc_h4;
        DAM.Machine._IVal _275_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _274_guard));
        DAM.Machine._IOutput _276_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, (((_275_val).dtor_answer) ? (_273_then__) : (_272_else__))), _245_stack));
        return _276_output;
      } else if (_source28.is_Func) {
        Dafny.ISequence<Dafny.Rune> _277___mcc_h7 = _source28.dtor_bound;
        DAM.Syntax._IPos _278___mcc_h8 = _source28.dtor_dom;
        DAM.Syntax._IStmt _279___mcc_h9 = _source28.dtor_body;
        DAM.Syntax._IStmt _280_body = _279___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _281_bound = _277___mcc_h7;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source33 = (_245_stack).Pop();
        if (_source33.is_None) {
          DAM.Machine._IOutput _282_output = DAM.Machine.Output.create_Terminal();
          return _282_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _283___mcc_h45 = _source33.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source34 = _283___mcc_h45;
          DAM.Machine._IFrame _284___mcc_h46 = _source34.dtor__0;
          DAM.Machine._IStack _285___mcc_h47 = _source34.dtor__1;
          DAM.Machine._IFrame _source35 = _284___mcc_h46;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _286___mcc_h50 = _source35.dtor_arg;
          DAM.Machine._IStack _287_stack = _285___mcc_h47;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _288_arg = _286___mcc_h50;
          DAM.Machine._IVal _289_val = DAM.Dynamics.__default.Eval(_288_arg);
          DAM.Machine._IOutput _290_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _281_bound, _289_val), _280_body), _287_stack));
          return _290_output;
        }
      } else if (_source28.is_Call) {
        DAM.Syntax._IStmt _291___mcc_h10 = _source28.dtor_func;
        DAM.Syntax._IExpr _292___mcc_h11 = _source28.dtor_arg;
        DAM.Syntax._IExpr _293_arg = _292___mcc_h11;
        DAM.Syntax._IStmt _294_func = _291___mcc_h10;
        DAM.Machine._IOutput _295_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _294_func), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Call(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _293_arg)), _245_stack)));
        return _295_output;
      } else if (_source28.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _296___mcc_h12 = _source28.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _297_fields = _296___mcc_h12;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source36 = (_245_stack).Pop();
        if (_source36.is_None) {
          DAM.Machine._IOutput _298_output = DAM.Machine.Output.create_Terminal();
          return _298_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _299___mcc_h52 = _source36.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source37 = _299___mcc_h52;
          DAM.Machine._IFrame _300___mcc_h53 = _source37.dtor__0;
          DAM.Machine._IStack _301___mcc_h54 = _source37.dtor__1;
          DAM.Machine._IFrame _source38 = _300___mcc_h53;
          Dafny.ISequence<Dafny.Rune> _302___mcc_h58 = _source38.dtor_field;
          DAM.Machine._IStack _303_stack = _301___mcc_h54;
          Dafny.ISequence<Dafny.Rune> _304_lbl = _302___mcc_h58;
          DAM.Machine._IOutput _305_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_297_fields, _304_lbl)), _303_stack));
          return _305_output;
        }
      } else if (_source28.is_Select) {
        DAM.Syntax._IStmt _306___mcc_h13 = _source28.dtor_record;
        Dafny.ISequence<Dafny.Rune> _307___mcc_h14 = _source28.dtor_field;
        Dafny.ISequence<Dafny.Rune> _308_field = _307___mcc_h14;
        DAM.Syntax._IStmt _309_record = _306___mcc_h13;
        DAM.Machine._IOutput _310_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _309_record), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Select(_308_field), _245_stack)));
        return _310_output;
      } else if (_source28.is_Force) {
        DAM.Syntax._IExpr _311___mcc_h15 = _source28.dtor_Force_a0;
        DAM.Syntax._IExpr _312_thunk = _311___mcc_h15;
        DAM.Machine._IVal _313_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _312_thunk));
        DAM.Machine._IOutput _314_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, (_313_val).dtor_closure, _245_stack));
        return _314_output;
      } else if (_source28.is_New) {
        DAM.Syntax._IExpr _315___mcc_h16 = _source28.dtor_init;
        Dafny.ISequence<Dafny.Rune> _316___mcc_h17 = _source28.dtor_var__;
        DAM.Syntax._IStmt _317___mcc_h18 = _source28.dtor_next;
        DAM.Syntax._IStmt _318_next = _317___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _319_var__ = _316___mcc_h17;
        DAM.Syntax._IExpr _320_init = _315___mcc_h16;
        DAM.Machine._IVal _321_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _320_init));
        _System._ITuple2<BigInteger, Dafny.ISequence<DAM.Machine._IVal>> _let_tmp_rhs6 = DAM.Utils.__default.Extend<DAM.Machine._IVal>(_242_store, _321_val);
        BigInteger _322_addr = _let_tmp_rhs6.dtor__0;
        Dafny.ISequence<DAM.Machine._IVal> _323_store_k = _let_tmp_rhs6.dtor__1;
        DAM.Machine._IOutput _324_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_323_store_k, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _319_var__, DAM.Machine.Val.create_Ref(_322_addr)), _318_next), _245_stack));
        return _324_output;
      } else if (_source28.is_Read) {
        DAM.Syntax._IExpr _325___mcc_h19 = _source28.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _326___mcc_h20 = _source28.dtor_var__;
        DAM.Syntax._IStmt _327___mcc_h21 = _source28.dtor_next;
        DAM.Syntax._IStmt _328_next = _327___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _329_var__ = _326___mcc_h20;
        DAM.Syntax._IExpr _330_ref = _325___mcc_h19;
        DAM.Machine._IVal _331_val = (_242_store).Select((DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _330_ref))).dtor_addr);
        DAM.Machine._IOutput _332_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _329_var__, _331_val), _328_next), _245_stack));
        return _332_output;
      } else if (_source28.is_Write) {
        DAM.Syntax._IExpr _333___mcc_h22 = _source28.dtor_lvalue;
        DAM.Syntax._IExpr _334___mcc_h23 = _source28.dtor_rvalue;
        DAM.Syntax._IStmt _335___mcc_h24 = _source28.dtor_next;
        DAM.Syntax._IStmt _336_next = _335___mcc_h24;
        DAM.Syntax._IExpr _337_rhs = _334___mcc_h23;
        DAM.Syntax._IExpr _338_lhs = _333___mcc_h22;
        BigInteger _339_lval = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _338_lhs))).dtor_addr;
        DAM.Machine._IVal _340_rval = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _337_rhs));
        DAM.Machine._IOutput _341_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.Update(_242_store, _339_lval, _340_rval), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _336_next), _245_stack));
        return _341_output;
      } else if (_source28.is_Print) {
        DAM.Syntax._IExpr _342___mcc_h25 = _source28.dtor_Print_a0;
        DAM.Syntax._IStmt _343___mcc_h26 = _source28.dtor_next;
        DAM.Syntax._IStmt _344_next = _343___mcc_h26;
        DAM.Syntax._IExpr _345_expr = _342___mcc_h25;
        DAM.Machine._IVal _346_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _345_expr));
        DAM.Machine._IOutput _347_output = DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Print(_346_val), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _344_next), _245_stack));
        return _347_output;
      } else if (_source28.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _348___mcc_h27 = _source28.dtor_bound;
        DAM.Syntax._INeg _349___mcc_h28 = _source28.dtor_fix;
        DAM.Syntax._IStmt _350___mcc_h29 = _source28.dtor_body;
        DAM.Syntax._IStmt _351_body = _350___mcc_h29;
        DAM.Syntax._INeg _352_fix = _349___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _353_self = _348___mcc_h27;
        DAM.Machine._IVal _354_val = DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _244_stmt));
        DAM.Machine._IOutput _355_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _353_self, _354_val), _351_body), _245_stack));
        return _355_output;
      } else if (_source28.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _356___mcc_h30 = _source28.dtor_bound;
        DAM.Syntax._INeg _357___mcc_h31 = _source28.dtor_start;
        DAM.Syntax._IStmt _358___mcc_h32 = _source28.dtor_body;
        DAM.Syntax._IStmt _359_body = _358___mcc_h32;
        DAM.Syntax._INeg _360_start = _357___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _361_bound = _356___mcc_h30;
        return DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _361_bound, DAM.Machine.Val.create_Stack(_360_start, _245_stack)), _359_body), _245_stack));
      } else {
        DAM.Syntax._IExpr _362___mcc_h33 = _source28.dtor_stack;
        DAM.Syntax._INeg _363___mcc_h34 = _source28.dtor_oldstart;
        DAM.Syntax._IStmt _364___mcc_h35 = _source28.dtor_next;
        DAM.Syntax._IStmt _365_next = _364___mcc_h35;
        DAM.Syntax._IExpr _366_expr = _362___mcc_h33;
        DAM.Machine._IVal _367_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _366_expr));
        return DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _365_next), (_367_val).dtor_stack));
      }
    }
    public static DAM.Dynamics._ITrace Run(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      DAM.Machine._IOutput _source39 = DAM.Dynamics.__default.Step(input);
      if (_source39.is_Raise) {
        DAM.Machine._IEvent _368___mcc_h0 = _source39.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _369___mcc_h1 = _source39.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _370_next = _369___mcc_h1;
        DAM.Machine._IEvent _371_evt = _368___mcc_h0;
        return new DAM.Dynamics.Trace__Lazy(() => { return new DAM.Dynamics.Trace_Stepping(_371_evt, _370_next, DAM.Dynamics.__default.Run(_370_next)); });
      } else {
        return DAM.Dynamics.Trace.create_Done();
      }
    }
    public static _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> Initial(DAM.Syntax._IStmt stmt) {
      return _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.FromElements(), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.FromElements(), stmt), DAM.Machine.Stack.create_Empty());
    }
    public static DAM.Utils._IOption<DAM.Dynamics._ITrace> RunSafe(DAM.Syntax._IStmt stmt) {
      DAM.Utils._IOption<DAM.Syntax._INeg> _372_valueOrError0 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), stmt);
      if ((_372_valueOrError0).IsFailure()) {
        return (_372_valueOrError0).PropagateFailure<DAM.Dynamics._ITrace>();
      } else {
        DAM.Syntax._INeg _373_end = (_372_valueOrError0).Extract();
        return DAM.Utils.Option<DAM.Dynamics._ITrace>.create_Some(DAM.Dynamics.__default.Run(DAM.Dynamics.__default.Initial(stmt)));
      }
    }
    public static DAM.Dynamics._ITrace RunUnsafe(DAM.Syntax._IStmt stmt) {
      return DAM.Dynamics.__default.Run(DAM.Dynamics.__default.Initial(stmt));
    }
  }

  public interface _ITrace {
    _ITrace _Get();
    bool is_Stepping { get; }
    bool is_Done { get; }
    DAM.Machine._IEvent dtor_Stepping_a0 { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a1 { get; }
    DAM.Dynamics._ITrace dtor_Stepping_a2 { get; }
    _ITrace DowncastClone();
  }
  public abstract class Trace : _ITrace {
    public Trace() {
    }
    private static readonly DAM.Dynamics._ITrace theDefault = new DAM.Dynamics.Trace__Lazy(() => { return create_Stepping(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()), DAM.Dynamics.Trace.Default()); });
    public static DAM.Dynamics._ITrace Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TYPE = new Dafny.TypeDescriptor<DAM.Dynamics._ITrace>(DAM.Dynamics.Trace.Default());
    public static Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TypeDescriptor() {
      return _TYPE;
    }
    public abstract _ITrace _Get();
    public static _ITrace create_Stepping(DAM.Machine._IEvent _a0, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1, DAM.Dynamics._ITrace _a2) {
      return new Trace_Stepping(_a0, _a1, _a2);
    }
    public static _ITrace create_Done() {
      return new Trace_Done();
    }
    public bool is_Stepping { get { return this is Trace_Stepping; } }
    public bool is_Done { get { return this is Trace_Done; } }
    public DAM.Machine._IEvent dtor_Stepping_a0 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a0;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a1 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a1;
      }
    }
    public DAM.Dynamics._ITrace dtor_Stepping_a2 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a2;
      }
    }
    public abstract _ITrace DowncastClone();
  }
  public class Trace__Lazy : Trace {
    public delegate _ITrace Computer();
    Computer c;
    _ITrace d;
    public Trace__Lazy(Computer c) : base() {
      this.c = c;
    }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new DAM.Dynamics.Trace__Lazy(() => _Get().DowncastClone());
    }
    public override _ITrace _Get() { if (c != null) { d = c(); c = null; } return d; }
    public override string ToString() { return _Get().ToString(); }
  }
  public class Trace_Stepping : Trace {
    public readonly DAM.Machine._IEvent _a0;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1;
    public readonly DAM.Dynamics._ITrace _a2;
    public Trace_Stepping(DAM.Machine._IEvent _a0, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1, DAM.Dynamics._ITrace _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Stepping(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Stepping;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Stepping";
    }
  }
  public class Trace_Done : Trace {
    public Trace_Done() : base() {
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Done();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Done;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Done";
    }
  }
} // end of namespace DAM.Dynamics


namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _374_i = BigInteger.Zero; _374_i < _hi0; _374_i++) {
        Dafny.ISequence<Dafny.Rune> _375_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_374_i));
        _375_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _375_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _376_i = BigInteger.Zero; _376_i < _hi1; _376_i++) {
        DAST._IModuleItem _source40 = ((mod).dtor_body).Select(_376_i);
        if (_source40.is_Module) {
          DAST._IModule _377___mcc_h0 = _source40.dtor_Module_a0;
          DAST._IModule _378_m = _377___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _379_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_378_m);
          _379_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _379_s_k);
        } else if (_source40.is_Class) {
          DAST._IClass _380___mcc_h1 = _source40.dtor_Class_a0;
          DAST._IClass _381_c = _380___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _382_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_381_c);
          _382_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _382_s_k);
        } else if (_source40.is_Trait) {
          DAST._ITrait _383___mcc_h2 = _source40.dtor_Trait_a0;
          DAST._ITrait _384_c = _383___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source40.is_Newtype) {
          DAST._INewtype _385___mcc_h3 = _source40.dtor_Newtype_a0;
          DAST._INewtype _386_n = _385___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _387___mcc_h4 = _source40.dtor_Datatype_a0;
          DAST._IDatatype _388_d = _387___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _389_i = BigInteger.Zero; _389_i < _hi2; _389_i++) {
        DAST._IMethod _source41 = ((c).dtor_body).Select(_389_i);
        DAST._IMethod _390___mcc_h0 = _source41;
        DAST._IMethod _391_m = _390___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _392_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_391_m);
        _392_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _392_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _393_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _393_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _393_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _393_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _393_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _394_i = BigInteger.Zero; _394_i < _hi3; _394_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_394_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _395_i = BigInteger.Zero; _395_i < _hi4; _395_i++) {
        Dafny.ISequence<Dafny.Rune> _396_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_395_i));
        _396_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _396_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source42 = st;
      if (_source42.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _397___mcc_h0 = _source42.dtor_name;
        DAST._IType _398___mcc_h1 = _source42.dtor_typ;
        DAST._IOptional<DAST._IExpression> _399___mcc_h2 = _source42.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Assign) {
        DAST._IAssignLhs _400___mcc_h6 = _source42.dtor_lhs;
        DAST._IExpression _401___mcc_h7 = _source42.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_If) {
        DAST._IExpression _402___mcc_h10 = _source42.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _403___mcc_h11 = _source42.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _404___mcc_h12 = _source42.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _405___mcc_h16 = _source42.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _406___mcc_h17 = _source42.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_While) {
        DAST._IExpression _407___mcc_h20 = _source42.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _408___mcc_h21 = _source42.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _409___mcc_h24 = _source42.dtor_boundName;
        DAST._IType _410___mcc_h25 = _source42.dtor_boundType;
        DAST._IExpression _411___mcc_h26 = _source42.dtor_over;
        Dafny.ISequence<DAST._IStatement> _412___mcc_h27 = _source42.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Call) {
        DAST._IExpression _413___mcc_h32 = _source42.dtor_on;
        Dafny.ISequence<Dafny.Rune> _414___mcc_h33 = _source42.dtor_name;
        Dafny.ISequence<DAST._IType> _415___mcc_h34 = _source42.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _416___mcc_h35 = _source42.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _417___mcc_h36 = _source42.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Return) {
        DAST._IExpression _418___mcc_h42 = _source42.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source42.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _419___mcc_h44 = _source42.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _420___mcc_h46 = _source42.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _421___mcc_h48 = _source42.dtor_Print_a0;
        DAST._IExpression _422_e = _421___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _423_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_422_e);
        _423_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _423_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source43 = e;
      if (_source43.is_Literal) {
        DAST._ILiteral _424___mcc_h0 = _source43.dtor_Literal_a0;
        DAST._ILiteral _425_l = _424___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_425_l);
        s = _out9;
      } else if (_source43.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _426___mcc_h2 = _source43.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _427___mcc_h4 = _source43.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _428___mcc_h6 = _source43.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _429___mcc_h8 = _source43.dtor_path;
        Dafny.ISequence<DAST._IType> _430___mcc_h9 = _source43.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _431___mcc_h10 = _source43.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _432___mcc_h14 = _source43.dtor_dims;
        DAST._IType _433___mcc_h15 = _source43.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _434___mcc_h18 = _source43.dtor_path;
        Dafny.ISequence<DAST._IType> _435___mcc_h19 = _source43.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _436___mcc_h20 = _source43.dtor_variant;
        bool _437___mcc_h21 = _source43.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _438___mcc_h22 = _source43.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Convert) {
        DAST._IExpression _439___mcc_h28 = _source43.dtor_value;
        DAST._IType _440___mcc_h29 = _source43.dtor_from;
        DAST._IType _441___mcc_h30 = _source43.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SeqConstruct) {
        DAST._IExpression _442___mcc_h34 = _source43.dtor_length;
        DAST._IExpression _443___mcc_h35 = _source43.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _444___mcc_h38 = _source43.dtor_elements;
        DAST._IType _445___mcc_h39 = _source43.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _446___mcc_h42 = _source43.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _447___mcc_h44 = _source43.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Ite) {
        DAST._IExpression _448___mcc_h46 = _source43.dtor_cond;
        DAST._IExpression _449___mcc_h47 = _source43.dtor_thn;
        DAST._IExpression _450___mcc_h48 = _source43.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_UnOp) {
        DAST._IUnaryOp _451___mcc_h52 = _source43.dtor_unOp;
        DAST._IExpression _452___mcc_h53 = _source43.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_BinOp) {
        DAST._IBinOp _453___mcc_h56 = _source43.dtor_op;
        DAST._IExpression _454___mcc_h57 = _source43.dtor_left;
        DAST._IExpression _455___mcc_h58 = _source43.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_ArrayLen) {
        DAST._IExpression _456___mcc_h62 = _source43.dtor_expr;
        BigInteger _457___mcc_h63 = _source43.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Select) {
        DAST._IExpression _458___mcc_h66 = _source43.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _459___mcc_h67 = _source43.dtor_field;
        bool _460___mcc_h68 = _source43.dtor_isConstant;
        bool _461___mcc_h69 = _source43.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SelectFn) {
        DAST._IExpression _462___mcc_h74 = _source43.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _463___mcc_h75 = _source43.dtor_field;
        bool _464___mcc_h76 = _source43.dtor_onDatatype;
        bool _465___mcc_h77 = _source43.dtor_isStatic;
        BigInteger _466___mcc_h78 = _source43.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Index) {
        DAST._IExpression _467___mcc_h84 = _source43.dtor_expr;
        DAST._ICollKind _468___mcc_h85 = _source43.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _469___mcc_h86 = _source43.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_IndexRange) {
        DAST._IExpression _470___mcc_h90 = _source43.dtor_expr;
        bool _471___mcc_h91 = _source43.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _472___mcc_h92 = _source43.dtor_low;
        DAST._IOptional<DAST._IExpression> _473___mcc_h93 = _source43.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_TupleSelect) {
        DAST._IExpression _474___mcc_h98 = _source43.dtor_expr;
        BigInteger _475___mcc_h99 = _source43.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Call) {
        DAST._IExpression _476___mcc_h102 = _source43.dtor_on;
        Dafny.ISequence<Dafny.Rune> _477___mcc_h103 = _source43.dtor_name;
        Dafny.ISequence<DAST._IType> _478___mcc_h104 = _source43.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _479___mcc_h105 = _source43.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _480___mcc_h110 = _source43.dtor_params;
        DAST._IType _481___mcc_h111 = _source43.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _482___mcc_h112 = _source43.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _483___mcc_h116 = _source43.dtor_values;
        DAST._IType _484___mcc_h117 = _source43.dtor_retType;
        DAST._IExpression _485___mcc_h118 = _source43.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _486___mcc_h122 = _source43.dtor_name;
        DAST._IType _487___mcc_h123 = _source43.dtor_typ;
        DAST._IExpression _488___mcc_h124 = _source43.dtor_value;
        DAST._IExpression _489___mcc_h125 = _source43.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Apply) {
        DAST._IExpression _490___mcc_h130 = _source43.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _491___mcc_h131 = _source43.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_TypeTest) {
        DAST._IExpression _492___mcc_h134 = _source43.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _493___mcc_h135 = _source43.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _494___mcc_h136 = _source43.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_InitializationValue) {
        DAST._IType _495___mcc_h140 = _source43.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SetBoundedPool) {
        DAST._IExpression _496___mcc_h142 = _source43.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SeqBoundedPool) {
        DAST._IExpression _497___mcc_h144 = _source43.dtor_of;
        bool _498___mcc_h145 = _source43.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _499___mcc_h148 = _source43.dtor_lo;
        DAST._IExpression _500___mcc_h149 = _source43.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source44 = l;
      if (_source44.is_BoolLiteral) {
        bool _501___mcc_h0 = _source44.dtor_BoolLiteral_a0;
        bool _502_b = _501___mcc_h0;
        s = ((_502_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source44.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _503___mcc_h1 = _source44.dtor_IntLiteral_a0;
        DAST._IType _504___mcc_h2 = _source44.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _505_i = _503___mcc_h1;
        s = _505_i;
      } else if (_source44.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _506___mcc_h3 = _source44.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _507___mcc_h4 = _source44.dtor_DecLiteral_a1;
        DAST._IType _508___mcc_h5 = _source44.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _509_r = _507___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _510_l = _506___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_510_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _509_r);
      } else if (_source44.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _511___mcc_h6 = _source44.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _512_s_k = _511___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _512_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source44.is_CharLiteral) {
        Dafny.Rune _513___mcc_h7 = _source44.dtor_CharLiteral_a0;
        Dafny.Rune _514_c = _513___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_514_c);
      } else {
        DAST._IType _515___mcc_h8 = _source44.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class Lower {
    public Lower() {
      this.main = DAM.Syntax.Stmt.Default();
    }
    public DAM.Syntax._IStmt main { get; set; }
    public void __ctor() {
    }
    public static DAM.Syntax._IPos PolarizePos(DAST._IType t) {
      DAM.Syntax._IPos p = DAM.Syntax.Pos.Default();
      DAST._IType _source45 = t;
      if (_source45.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _516___mcc_h0 = _source45.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _517___mcc_h1 = _source45.dtor_typeArgs;
        DAST._IResolvedType _518___mcc_h2 = _source45.dtor_resolved;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Nullable) {
        DAST._IType _519___mcc_h6 = _source45.dtor_Nullable_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Tuple) {
        Dafny.ISequence<DAST._IType> _520___mcc_h8 = _source45.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Array) {
        DAST._IType _521___mcc_h10 = _source45.dtor_element;
        BigInteger _522___mcc_h11 = _source45.dtor_dims;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Seq) {
        DAST._IType _523___mcc_h14 = _source45.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Set) {
        DAST._IType _524___mcc_h16 = _source45.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Multiset) {
        DAST._IType _525___mcc_h18 = _source45.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Map) {
        DAST._IType _526___mcc_h20 = _source45.dtor_key;
        DAST._IType _527___mcc_h21 = _source45.dtor_value;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Arrow) {
        Dafny.ISequence<DAST._IType> _528___mcc_h24 = _source45.dtor_args;
        DAST._IType _529___mcc_h25 = _source45.dtor_result;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Primitive) {
        DAST._IPrimitive _530___mcc_h28 = _source45.dtor_Primitive_a0;
        DAST._IPrimitive _source46 = _530___mcc_h28;
        if (_source46.is_Int) {
          p = DAM.Syntax.Pos.create_Int();
          return p;
        } else if (_source46.is_Real) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source46.is_String) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source46.is_Bool) {
          p = DAM.Syntax.Pos.create_Bool();
          return p;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        }
      } else if (_source45.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _531___mcc_h30 = _source45.dtor_Passthrough_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else {
        Dafny.ISequence<Dafny.Rune> _532___mcc_h32 = _source45.dtor_TypeArg_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      }
      return p;
    }
    public DAM.Syntax._IStmt EmitModule(DAST._IModule m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _533_members;
      _533_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi5 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _534_i = BigInteger.Zero; _534_i < _hi5; _534_i++) {
        DAST._IModuleItem _source47 = ((m).dtor_body).Select(_534_i);
        if (_source47.is_Module) {
          DAST._IModule _535___mcc_h0 = _source47.dtor_Module_a0;
          DAST._IModule _536_m = _535___mcc_h0;
          DAM.Syntax._IStmt _537_mod;
          DAM.Syntax._IStmt _out10;
          _out10 = (this).EmitModule(_536_m);
          _537_mod = _out10;
          _533_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_533_members, (_536_m).dtor_name, _537_mod);
        } else if (_source47.is_Class) {
          DAST._IClass _538___mcc_h2 = _source47.dtor_Class_a0;
          DAST._IClass _539_c = _538___mcc_h2;
          DAM.Syntax._IStmt _540_cls;
          DAM.Syntax._IStmt _out11;
          _out11 = (this).EmitClass(_539_c);
          _540_cls = _out11;
          _533_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_533_members, (_539_c).dtor_name, _540_cls);
        } else if (_source47.is_Trait) {
          DAST._ITrait _541___mcc_h4 = _source47.dtor_Trait_a0;
          goto continue_0;
        } else if (_source47.is_Newtype) {
          DAST._INewtype _542___mcc_h6 = _source47.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _543___mcc_h8 = _source47.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      s = DAM.Syntax.Stmt.create_Record(_533_members);
      return s;
    }
    public DAM.Syntax._IStmt EmitClass(DAST._IClass c) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _544_fields;
      _544_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi6 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _545_i = BigInteger.Zero; _545_i < _hi6; _545_i++) {
        DAST._IMethod _source48 = ((c).dtor_body).Select(_545_i);
        DAST._IMethod _546___mcc_h0 = _source48;
        DAST._IMethod _547_m = _546___mcc_h0;
        DAM.Syntax._IStmt _548_meth;
        DAM.Syntax._IStmt _out12;
        _out12 = (this).EmitMethod(_547_m);
        _548_meth = _out12;
        _544_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_544_fields, (_547_m).dtor_name, _548_meth);
      }
      s = DAM.Syntax.Stmt.create_Record(_544_fields);
      return s;
    }
    public DAM.Syntax._IStmt EmitMethod(DAST._IMethod m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAM.Syntax._IStmt _549_body;
      DAM.Syntax._IStmt _out13;
      _out13 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock((m).dtor_body);
      _549_body = _out13;
      s = DAM.Syntax.Stmt.create_LetCS(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), DAM.Syntax.__default.Command(), _549_body);
      DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source49 = (m).dtor_outVars;
      if (_source49.is_Some) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _550___mcc_h0 = _source49.dtor_Some_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _551_outs = _550___mcc_h0;
        {
          BigInteger _hi7 = new BigInteger((_551_outs).Count);
          for (BigInteger _552_i = BigInteger.Zero; _552_i < _hi7; _552_i++) {
            Dafny.ISequence<Dafny.Rune> _source50 = (_551_outs).Select(((new BigInteger((_551_outs).Count)) - (_552_i)) - (BigInteger.One));
            Dafny.ISequence<Dafny.Rune> _553___mcc_h1 = _source50;
            Dafny.ISequence<Dafny.Rune> _554_ret = _553___mcc_h1;
            if (!((_552_i) < (new BigInteger(((m).dtor_outTypes).Count)))) {
              throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(94,12): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
            }
            DAM.Syntax._IPos _555_cod;
            DAM.Syntax._IPos _out14;
            _out14 = ResolvedDesugaredExecutableDafnyPlugin.Lower.PolarizePos(((m).dtor_outTypes).Select(_552_i));
            _555_cod = _out14;
            s = DAM.Syntax.Stmt.create_Func(_554_ret, DAM.Syntax.Pos.create_Ref(_555_cod), s);
          }
        }
      } else {
        BigInteger _hi8 = new BigInteger(((m).dtor_params).Count);
        for (BigInteger _556_i = BigInteger.Zero; _556_i < _hi8; _556_i++) {
          DAST._IFormal _source51 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_556_i)) - (BigInteger.One));
          Dafny.ISequence<Dafny.Rune> _557___mcc_h2 = _source51.dtor_name;
          DAST._IType _558___mcc_h3 = _source51.dtor_typ;
          DAST._IType _559_dom = _558___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _560_arg = _557___mcc_h2;
          DAM.Syntax._IPos _561_dom;
          DAM.Syntax._IPos _out15;
          _out15 = ResolvedDesugaredExecutableDafnyPlugin.Lower.PolarizePos(_559_dom);
          _561_dom = _out15;
          s = DAM.Syntax.Stmt.create_Func(_560_arg, DAM.Syntax.Pos.create_Ref(_561_dom), s);
        }
        if (((m).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Main"))) {
          (this).main = s;
        }
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitExpr(DAST._IExpression e) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAST._IExpression _source52 = e;
      if (_source52.is_Literal) {
        DAST._ILiteral _562___mcc_h0 = _source52.dtor_Literal_a0;
        DAST._ILiteral _source53 = _562___mcc_h0;
        if (_source53.is_BoolLiteral) {
          bool _563___mcc_h2 = _source53.dtor_BoolLiteral_a0;
          bool _564_b = _563___mcc_h2;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(_564_b));
          return s;
        } else if (_source53.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _565___mcc_h4 = _source53.dtor_IntLiteral_a0;
          DAST._IType _566___mcc_h5 = _source53.dtor_IntLiteral_a1;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source53.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _567___mcc_h8 = _source53.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _568___mcc_h9 = _source53.dtor_DecLiteral_a1;
          DAST._IType _569___mcc_h10 = _source53.dtor_DecLiteral_a2;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source53.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _570___mcc_h14 = _source53.dtor_StringLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source53.is_CharLiteral) {
          Dafny.Rune _571___mcc_h16 = _source53.dtor_CharLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          DAST._IType _572___mcc_h18 = _source53.dtor_Null_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source52.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _573___mcc_h20 = _source52.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _574_v = _573___mcc_h20;
        s = DAM.Syntax.Stmt.create_Read(DAM.Syntax.Expr.create_Var(_574_v), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"))));
        return s;
      } else if (_source52.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _575___mcc_h22 = _source52.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _576_path = _575___mcc_h22;
        if (!((new BigInteger((_576_path).Count)).Sign == 1)) {
          throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(125,8): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
        }
        s = DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(((_576_path).Select(BigInteger.Zero))));
        BigInteger _hi9 = new BigInteger((_576_path).Count);
        for (BigInteger _577_i = BigInteger.One; _577_i < _hi9; _577_i++) {
          s = DAM.Syntax.Stmt.create_Select(s, ((_576_path).Select(_577_i)));
        }
      } else if (_source52.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _578___mcc_h24 = _source52.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _579___mcc_h26 = _source52.dtor_path;
        Dafny.ISequence<DAST._IType> _580___mcc_h27 = _source52.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _581___mcc_h28 = _source52.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _582___mcc_h32 = _source52.dtor_dims;
        DAST._IType _583___mcc_h33 = _source52.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _584___mcc_h36 = _source52.dtor_path;
        Dafny.ISequence<DAST._IType> _585___mcc_h37 = _source52.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _586___mcc_h38 = _source52.dtor_variant;
        bool _587___mcc_h39 = _source52.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _588___mcc_h40 = _source52.dtor_contents;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Convert) {
        DAST._IExpression _589___mcc_h46 = _source52.dtor_value;
        DAST._IType _590___mcc_h47 = _source52.dtor_from;
        DAST._IType _591___mcc_h48 = _source52.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SeqConstruct) {
        DAST._IExpression _592___mcc_h52 = _source52.dtor_length;
        DAST._IExpression _593___mcc_h53 = _source52.dtor_elem;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _594___mcc_h56 = _source52.dtor_elements;
        DAST._IType _595___mcc_h57 = _source52.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _596___mcc_h60 = _source52.dtor_elements;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _597___mcc_h62 = _source52.dtor_mapElems;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_This) {
        s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")));
        return s;
      } else if (_source52.is_Ite) {
        DAST._IExpression _598___mcc_h64 = _source52.dtor_cond;
        DAST._IExpression _599___mcc_h65 = _source52.dtor_thn;
        DAST._IExpression _600___mcc_h66 = _source52.dtor_els;
        DAST._IExpression _601_els = _600___mcc_h66;
        DAST._IExpression _602_thn = _599___mcc_h65;
        DAST._IExpression _603_cond = _598___mcc_h64;
        DAM.Syntax._IStmt _604_cond;
        DAM.Syntax._IStmt _out16;
        _out16 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_603_cond);
        _604_cond = _out16;
        DAM.Syntax._IStmt _605_thn;
        DAM.Syntax._IStmt _out17;
        _out17 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_602_thn);
        _605_thn = _out17;
        DAM.Syntax._IStmt _606_els;
        DAM.Syntax._IStmt _out18;
        _out18 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_601_els);
        _606_els = _out18;
        s = DAM.Syntax.Stmt.create_Bind(_604_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _605_thn, _606_els));
      } else if (_source52.is_UnOp) {
        DAST._IUnaryOp _607___mcc_h70 = _source52.dtor_unOp;
        DAST._IExpression _608___mcc_h71 = _source52.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_BinOp) {
        DAST._IBinOp _609___mcc_h74 = _source52.dtor_op;
        DAST._IExpression _610___mcc_h75 = _source52.dtor_left;
        DAST._IExpression _611___mcc_h76 = _source52.dtor_right;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_ArrayLen) {
        DAST._IExpression _612___mcc_h80 = _source52.dtor_expr;
        BigInteger _613___mcc_h81 = _source52.dtor_dim;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Select) {
        DAST._IExpression _614___mcc_h84 = _source52.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _615___mcc_h85 = _source52.dtor_field;
        bool _616___mcc_h86 = _source52.dtor_isConstant;
        bool _617___mcc_h87 = _source52.dtor_onDatatype;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SelectFn) {
        DAST._IExpression _618___mcc_h92 = _source52.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _619___mcc_h93 = _source52.dtor_field;
        bool _620___mcc_h94 = _source52.dtor_onDatatype;
        bool _621___mcc_h95 = _source52.dtor_isStatic;
        BigInteger _622___mcc_h96 = _source52.dtor_arity;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Index) {
        DAST._IExpression _623___mcc_h102 = _source52.dtor_expr;
        DAST._ICollKind _624___mcc_h103 = _source52.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _625___mcc_h104 = _source52.dtor_indices;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_IndexRange) {
        DAST._IExpression _626___mcc_h108 = _source52.dtor_expr;
        bool _627___mcc_h109 = _source52.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _628___mcc_h110 = _source52.dtor_low;
        DAST._IOptional<DAST._IExpression> _629___mcc_h111 = _source52.dtor_high;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_TupleSelect) {
        DAST._IExpression _630___mcc_h116 = _source52.dtor_expr;
        BigInteger _631___mcc_h117 = _source52.dtor_index;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Call) {
        DAST._IExpression _632___mcc_h120 = _source52.dtor_on;
        Dafny.ISequence<Dafny.Rune> _633___mcc_h121 = _source52.dtor_name;
        Dafny.ISequence<DAST._IType> _634___mcc_h122 = _source52.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _635___mcc_h123 = _source52.dtor_args;
        Dafny.ISequence<Dafny.Rune> _source54 = _633___mcc_h121;
        Dafny.ISequence<Dafny.Rune> _636___mcc_h128 = _source54;
        Dafny.ISequence<DAST._IExpression> _637_args = _635___mcc_h123;
        Dafny.ISequence<Dafny.Rune> _638_meth = _636___mcc_h128;
        DAST._IExpression _639_obj = _632___mcc_h120;
        DAM.Syntax._IStmt _out19;
        _out19 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_639_obj);
        s = _out19;
        s = DAM.Syntax.Stmt.create_Select(s, _638_meth);
        BigInteger _hi10 = new BigInteger((_637_args).Count);
        for (BigInteger _640_i = BigInteger.Zero; _640_i < _hi10; _640_i++) {
          DAM.Syntax._IStmt _641_arg;
          DAM.Syntax._IStmt _out20;
          _out20 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr((_637_args).Select(_640_i));
          _641_arg = _out20;
          s = DAM.Syntax.Stmt.create_Bind(_641_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(s, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
        }
      } else if (_source52.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _642___mcc_h130 = _source52.dtor_params;
        DAST._IType _643___mcc_h131 = _source52.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _644___mcc_h132 = _source52.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _645___mcc_h136 = _source52.dtor_values;
        DAST._IType _646___mcc_h137 = _source52.dtor_retType;
        DAST._IExpression _647___mcc_h138 = _source52.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _648___mcc_h142 = _source52.dtor_name;
        DAST._IType _649___mcc_h143 = _source52.dtor_typ;
        DAST._IExpression _650___mcc_h144 = _source52.dtor_value;
        DAST._IExpression _651___mcc_h145 = _source52.dtor_iifeBody;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Apply) {
        DAST._IExpression _652___mcc_h150 = _source52.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _653___mcc_h151 = _source52.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_TypeTest) {
        DAST._IExpression _654___mcc_h154 = _source52.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _655___mcc_h155 = _source52.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _656___mcc_h156 = _source52.dtor_variant;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_InitializationValue) {
        DAST._IType _657___mcc_h160 = _source52.dtor_typ;
        DAST._IType _source55 = _657___mcc_h160;
        if (_source55.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _658___mcc_h162 = _source55.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _659___mcc_h163 = _source55.dtor_typeArgs;
          DAST._IResolvedType _660___mcc_h164 = _source55.dtor_resolved;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Nullable) {
          DAST._IType _661___mcc_h168 = _source55.dtor_Nullable_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Tuple) {
          Dafny.ISequence<DAST._IType> _662___mcc_h170 = _source55.dtor_Tuple_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Array) {
          DAST._IType _663___mcc_h172 = _source55.dtor_element;
          BigInteger _664___mcc_h173 = _source55.dtor_dims;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Seq) {
          DAST._IType _665___mcc_h176 = _source55.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Set) {
          DAST._IType _666___mcc_h178 = _source55.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Multiset) {
          DAST._IType _667___mcc_h180 = _source55.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Map) {
          DAST._IType _668___mcc_h182 = _source55.dtor_key;
          DAST._IType _669___mcc_h183 = _source55.dtor_value;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Arrow) {
          Dafny.ISequence<DAST._IType> _670___mcc_h186 = _source55.dtor_args;
          DAST._IType _671___mcc_h187 = _source55.dtor_result;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Primitive) {
          DAST._IPrimitive _672___mcc_h190 = _source55.dtor_Primitive_a0;
          DAST._IPrimitive _source56 = _672___mcc_h190;
          if (_source56.is_Int) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
            return s;
          } else if (_source56.is_Real) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source56.is_String) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source56.is_Bool) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
            return s;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          }
        } else if (_source55.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _673___mcc_h192 = _source55.dtor_Passthrough_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _674___mcc_h194 = _source55.dtor_TypeArg_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source52.is_BoolBoundedPool) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SetBoundedPool) {
        DAST._IExpression _675___mcc_h196 = _source52.dtor_of;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SeqBoundedPool) {
        DAST._IExpression _676___mcc_h198 = _source52.dtor_of;
        bool _677___mcc_h199 = _source52.dtor_includeDuplicates;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else {
        DAST._IExpression _678___mcc_h202 = _source52.dtor_lo;
        DAST._IExpression _679___mcc_h203 = _source52.dtor_hi;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitBlock(Dafny.ISequence<DAST._IStatement> block) {
      DAM.Syntax._IStmt st = DAM.Syntax.Stmt.Default();
      if ((new BigInteger((block).Count)).Sign != 1) {
        st = DAM.Syntax.__default.Skip();
        return st;
      }
      Dafny.ISequence<DAST._IStatement> _680_next;
      _680_next = (block).Drop(BigInteger.One);
      DAST._IStatement _source57 = (block).Select(BigInteger.Zero);
      if (_source57.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _681___mcc_h0 = _source57.dtor_name;
        DAST._IType _682___mcc_h1 = _source57.dtor_typ;
        DAST._IOptional<DAST._IExpression> _683___mcc_h2 = _source57.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source58 = _683___mcc_h2;
        if (_source58.is_Some) {
          DAST._IExpression _684___mcc_h6 = _source58.dtor_Some_a0;
          DAST._IExpression _685_init = _684___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _686_var__ = _681___mcc_h0;
          DAM.Syntax._IStmt _687_init;
          DAM.Syntax._IStmt _out21;
          _out21 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_685_init);
          _687_init = _out21;
          DAM.Syntax._IStmt _688_next;
          DAM.Syntax._IStmt _out22;
          _out22 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
          _688_next = _out22;
          st = DAM.Syntax.Stmt.create_Bind(_687_init, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _686_var__, _688_next));
          return st;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          st = DAM.Syntax.__default.Skip();
          return st;
        }
      } else if (_source57.is_Assign) {
        DAST._IAssignLhs _689___mcc_h8 = _source57.dtor_lhs;
        DAST._IExpression _690___mcc_h9 = _source57.dtor_value;
        DAST._IExpression _691_rhs = _690___mcc_h9;
        DAST._IAssignLhs _692_lhs = _689___mcc_h8;
        {
          DAM.Syntax._IStmt _693_rhs;
          DAM.Syntax._IStmt _out23;
          _out23 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_691_rhs);
          _693_rhs = _out23;
          DAM.Syntax._IStmt _694_next;
          DAM.Syntax._IStmt _out24;
          _out24 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
          _694_next = _out24;
          DAST._IAssignLhs _source59 = _692_lhs;
          if (_source59.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _695___mcc_h52 = _source59.dtor_Ident_a0;
            Dafny.ISequence<Dafny.Rune> _source60 = _695___mcc_h52;
            Dafny.ISequence<Dafny.Rune> _696___mcc_h54 = _source60;
            Dafny.ISequence<Dafny.Rune> _697_v = _696___mcc_h54;
            st = DAM.Syntax.Stmt.create_Bind(_693_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Write(DAM.Syntax.Expr.create_Var(_697_v), DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _694_next));
            return st;
          } else if (_source59.is_Select) {
            DAST._IExpression _698___mcc_h56 = _source59.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _699___mcc_h57 = _source59.dtor_field;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          } else {
            DAST._IExpression _700___mcc_h60 = _source59.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _701___mcc_h61 = _source59.dtor_indices;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source57.is_If) {
        DAST._IExpression _702___mcc_h12 = _source57.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _703___mcc_h13 = _source57.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _704___mcc_h14 = _source57.dtor_els;
        Dafny.ISequence<DAST._IStatement> _705_els = _704___mcc_h14;
        Dafny.ISequence<DAST._IStatement> _706_thn = _703___mcc_h13;
        DAST._IExpression _707_cond = _702___mcc_h12;
        DAM.Syntax._IStmt _708_cond;
        DAM.Syntax._IStmt _out25;
        _out25 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_707_cond);
        _708_cond = _out25;
        DAM.Syntax._IStmt _709_thn;
        DAM.Syntax._IStmt _out26;
        _out26 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_706_thn);
        _709_thn = _out26;
        DAM.Syntax._IStmt _710_els;
        DAM.Syntax._IStmt _out27;
        _out27 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_705_els);
        _710_els = _out27;
        DAM.Syntax._IStmt _711_next;
        DAM.Syntax._IStmt _out28;
        _out28 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
        _711_next = _out28;
        st = DAM.Syntax.__default.Then(DAM.Syntax.Stmt.create_Bind(_708_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _709_thn, _710_els)), _711_next);
      } else if (_source57.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _712___mcc_h18 = _source57.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _713___mcc_h19 = _source57.dtor_body;
        Dafny.ISequence<DAST._IStatement> _714_stmt = _713___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _715_lab = _712___mcc_h18;
        DAM.Syntax._IStmt _716_block;
        DAM.Syntax._IStmt _out29;
        _out29 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(Dafny.Sequence<DAST._IStatement>.Concat(_714_stmt, _680_next));
        _716_block = _out29;
        st = DAM.Syntax.Stmt.create_LetCS(_715_lab, DAM.Syntax.__default.Command(), _716_block);
        return st;
      } else if (_source57.is_While) {
        DAST._IExpression _717___mcc_h22 = _source57.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _718___mcc_h23 = _source57.dtor_body;
        Dafny.ISequence<DAST._IStatement> _719_body = _718___mcc_h23;
        DAST._IExpression _720_guard = _717___mcc_h22;
        DAM.Syntax._IStmt _721_guard;
        DAM.Syntax._IStmt _out30;
        _out30 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_720_guard);
        _721_guard = _out30;
        DAM.Syntax._IStmt _722_body;
        DAM.Syntax._IStmt _out31;
        _out31 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_719_body);
        _722_body = _out31;
        DAM.Syntax._IStmt _723_next;
        DAM.Syntax._IStmt _out32;
        _out32 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
        _723_next = _out32;
        st = DAM.Syntax.__default.While(_721_guard, _722_body, _723_next);
      } else if (_source57.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _724___mcc_h26 = _source57.dtor_boundName;
        DAST._IType _725___mcc_h27 = _source57.dtor_boundType;
        DAST._IExpression _726___mcc_h28 = _source57.dtor_over;
        Dafny.ISequence<DAST._IStatement> _727___mcc_h29 = _source57.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source57.is_Call) {
        DAST._IExpression _728___mcc_h34 = _source57.dtor_on;
        Dafny.ISequence<Dafny.Rune> _729___mcc_h35 = _source57.dtor_name;
        Dafny.ISequence<DAST._IType> _730___mcc_h36 = _source57.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _731___mcc_h37 = _source57.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _732___mcc_h38 = _source57.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _733_outs = _732___mcc_h38;
        Dafny.ISequence<DAST._IExpression> _734_args = _731___mcc_h37;
        Dafny.ISequence<Dafny.Rune> _735_meth = _729___mcc_h35;
        DAST._IExpression _736_obj = _728___mcc_h34;
        {
          DAM.Syntax._IStmt _737_obj;
          DAM.Syntax._IStmt _out33;
          _out33 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_736_obj);
          _737_obj = _out33;
          st = DAM.Syntax.Stmt.create_Select(_737_obj, _735_meth);
          BigInteger _hi11 = new BigInteger((_734_args).Count);
          for (BigInteger _738_i = BigInteger.Zero; _738_i < _hi11; _738_i++) {
            DAM.Syntax._IStmt _739_arg;
            DAM.Syntax._IStmt _out34;
            _out34 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr((_734_args).Select(_738_i));
            _739_arg = _out34;
            st = DAM.Syntax.Stmt.create_Bind(_739_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
          }
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source61 = _733_outs;
          if (_source61.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _740___mcc_h64 = _source61.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _741_outs = _740___mcc_h64;
            BigInteger _hi12 = new BigInteger((_741_outs).Count);
            for (BigInteger _742_i = BigInteger.Zero; _742_i < _hi12; _742_i++) {
              st = DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(((_741_outs).Select(_742_i))));
            }
          } else {
            DAM.Syntax._IStmt _743_next;
            DAM.Syntax._IStmt _out35;
            _out35 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
            _743_next = _out35;
            st = DAM.Syntax.__default.Then(st, _743_next);
          }
        }
      } else if (_source57.is_Return) {
        DAST._IExpression _744___mcc_h44 = _source57.dtor_expr;
        DAST._IExpression _745_expr = _744___mcc_h44;
        DAM.Syntax._IStmt _746_ret;
        DAM.Syntax._IStmt _out36;
        _out36 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_745_expr);
        _746_ret = _out36;
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), _746_ret);
        return st;
      } else if (_source57.is_EarlyReturn) {
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
        return st;
      } else if (_source57.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _747___mcc_h46 = _source57.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _748_lab = _747___mcc_h46;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source62 = _748_lab;
          if (_source62.is_Some) {
            Dafny.ISequence<Dafny.Rune> _749___mcc_h65 = _source62.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _750_lab = _749___mcc_h65;
            st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(_750_lab), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
            return st;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source57.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _751___mcc_h48 = _source57.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source57.is_JumpTailCallStart) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source57.is_Halt) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else {
        DAST._IExpression _752___mcc_h50 = _source57.dtor_Print_a0;
        DAST._IExpression _753_expr = _752___mcc_h50;
        DAM.Syntax._IStmt _754_arg;
        DAM.Syntax._IStmt _out37;
        _out37 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_753_expr);
        _754_arg = _out37;
        DAM.Syntax._IStmt _755_next;
        DAM.Syntax._IStmt _out38;
        _out38 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
        _755_next = _out38;
        st = DAM.Syntax.Stmt.create_Bind(_754_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Print(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _755_next));
        return st;
      }
      return st;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      ResolvedDesugaredExecutableDafnyPlugin.Lower _756_lower;
      ResolvedDesugaredExecutableDafnyPlugin.Lower _nw1 = new ResolvedDesugaredExecutableDafnyPlugin.Lower();
      _nw1.__ctor();
      _756_lower = _nw1;
      DAM.Syntax._IStmt _757_body;
      _757_body = DAM.Syntax.__default.Skip();
      BigInteger _hi13 = new BigInteger((p).Count);
      for (BigInteger _758_i = BigInteger.Zero; _758_i < _hi13; _758_i++) {
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Lowering module ")).ToVerbatimString(false));
        Dafny.Helpers.Print((((p).Select(_758_i)).dtor_name).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" into the DAM instruction set...\n")).ToVerbatimString(false));
        DAM.Syntax._IStmt _759_m;
        DAM.Syntax._IStmt _out39;
        _out39 = (_756_lower).EmitModule((p).Select(_758_i));
        _759_m = _out39;
        DAM.Syntax._IExpr _760_mthunk;
        _760_mthunk = DAM.Syntax.Expr.create_Thunk(_759_m);
        DAM.Utils._IOption<DAM.Syntax._IPos> _761_mtype;
        _761_mtype = DAM.Statics.__default.SynthExpr(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), _760_mthunk);
        if ((_761_mtype).is_None) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unable to synthesize type for module ")).ToVerbatimString(false));
          Dafny.Helpers.Print((((p).Select(_758_i)).dtor_name).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!\n")).ToVerbatimString(false));
          Microsoft.Dafny.Compilers.WrapException.Throw();
          goto after_0;
        }
        _757_body = DAM.Syntax.__default.Let(_760_mthunk, ((p).Select(_758_i)).dtor_name, (_761_mtype).dtor_value, _757_body);
      continue_0:;
      }
    after_0:;
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((_757_body));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Tracing execution of Main() below\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((DAM.Dynamics.__default.RunSafe(_756_lower.main)));
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _762___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_762___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _762___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_762___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in9 = (i).Drop(BigInteger.One);
          i = _in9;
          goto TAIL_CALL_START;
        } else {
          _762___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_762___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in10 = (i).Drop(BigInteger.One);
          i = _in10;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _763_body;
      Dafny.ISequence<Dafny.Rune> _out40;
      _out40 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _763_body = _out40;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _763_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _764_i;
      _764_i = BigInteger.Zero;
      while ((_764_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _765_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source63 = (body).Select(_764_i);
        if (_source63.is_Module) {
          DAST._IModule _766___mcc_h0 = _source63.dtor_Module_a0;
          DAST._IModule _767_m = _766___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out41;
          _out41 = DCOMP.COMP.GenModule(_767_m, containingPath);
          _765_generated = _out41;
        } else if (_source63.is_Class) {
          DAST._IClass _768___mcc_h1 = _source63.dtor_Class_a0;
          DAST._IClass _769_c = _768___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out42;
          _out42 = DCOMP.COMP.GenClass(_769_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_769_c).dtor_name)));
          _765_generated = _out42;
        } else if (_source63.is_Trait) {
          DAST._ITrait _770___mcc_h2 = _source63.dtor_Trait_a0;
          DAST._ITrait _771_t = _770___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out43;
          _out43 = DCOMP.COMP.GenTrait(_771_t, containingPath);
          _765_generated = _out43;
        } else if (_source63.is_Newtype) {
          DAST._INewtype _772___mcc_h3 = _source63.dtor_Newtype_a0;
          DAST._INewtype _773_n = _772___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out44;
          _out44 = DCOMP.COMP.GenNewtype(_773_n);
          _765_generated = _out44;
        } else {
          DAST._IDatatype _774___mcc_h4 = _source63.dtor_Datatype_a0;
          DAST._IDatatype _775_d = _774___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out45;
          _out45 = DCOMP.COMP.GenDatatype(_775_d);
          _765_generated = _out45;
        }
        if ((_764_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _765_generated);
        _764_i = (_764_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _776_tpI;
      _776_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_776_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _777_tp;
          _777_tp = (@params).Select(_776_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_777_tp));
          Dafny.ISequence<Dafny.Rune> _778_genTp;
          Dafny.ISequence<Dafny.Rune> _out46;
          _out46 = DCOMP.COMP.GenType(_777_tp, false, false);
          _778_genTp = _out46;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _778_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _779_baseConstraints;
          _779_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _778_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _778_genTp), _779_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _778_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _778_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _778_genTp), _779_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _778_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _778_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _778_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _776_tpI = (_776_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _780_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _781_typeParams;
      Dafny.ISequence<Dafny.Rune> _782_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _783_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _784_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _785_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _786_erasedParams;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      Dafny.ISequence<Dafny.Rune> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      Dafny.ISequence<Dafny.Rune> _out51;
      Dafny.ISequence<Dafny.Rune> _out52;
      Dafny.ISequence<Dafny.Rune> _out53;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50, out _out51, out _out52, out _out53);
      _780_typeParamsSet = _out47;
      _781_typeParams = _out48;
      _782_constrainedTypeParams = _out49;
      _783_whereConstraints = _out50;
      _784_constrainedEraseParams = _out51;
      _785_unerasedParams = _out52;
      _786_erasedParams = _out53;
      Dafny.ISequence<Dafny.Rune> _787_fields;
      _787_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _788_fieldInits;
      _788_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _789_fieldI;
      _789_fieldI = BigInteger.Zero;
      while ((_789_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _790_field;
        _790_field = ((c).dtor_fields).Select(_789_fieldI);
        Dafny.ISequence<Dafny.Rune> _791_fieldType;
        Dafny.ISequence<Dafny.Rune> _out54;
        _out54 = DCOMP.COMP.GenType(((_790_field).dtor_formal).dtor_typ, false, false);
        _791_fieldType = _out54;
        _787_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_787_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_790_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _791_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source64 = (_790_field).dtor_defaultValue;
        if (_source64.is_Some) {
          DAST._IExpression _792___mcc_h0 = _source64.dtor_Some_a0;
          DAST._IExpression _793_e = _792___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _794_eStr;
            bool _795___v1;
            bool _796___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _797___v3;
            Dafny.ISequence<Dafny.Rune> _out55;
            bool _out56;
            bool _out57;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out58;
            DCOMP.COMP.GenExpr(_793_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out55, out _out56, out _out57, out _out58);
            _794_eStr = _out55;
            _795___v1 = _out56;
            _796___v2 = _out57;
            _797___v3 = _out58;
            _788_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_788_fieldInits, DCOMP.__default.escapeIdent(((_790_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _794_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _788_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_788_fieldInits, DCOMP.__default.escapeIdent(((_790_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _789_fieldI = (_789_fieldI) + (BigInteger.One);
      }
      BigInteger _798_typeParamI;
      _798_typeParamI = BigInteger.Zero;
      while ((_798_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _799_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out59;
        _out59 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_798_typeParamI), false, false);
        _799_tpeGen = _out59;
        _787_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_787_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_798_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _799_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _788_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_788_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_798_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _798_typeParamI = (_798_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _781_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _787_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _800_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _801_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out60;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out61;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _780_typeParamsSet, out _out60, out _out61);
      _800_implBody = _out60;
      _801_traitBodies = _out61;
      _800_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _788_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _800_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _782_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _781_typeParams), _783_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _800_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _802_i;
        _802_i = BigInteger.Zero;
        while ((_802_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _803_superClass;
          _803_superClass = ((c).dtor_superClasses).Select(_802_i);
          DAST._IType _source65 = _803_superClass;
          if (_source65.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _804___mcc_h1 = _source65.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _805___mcc_h2 = _source65.dtor_typeArgs;
            DAST._IResolvedType _806___mcc_h3 = _source65.dtor_resolved;
            DAST._IResolvedType _source66 = _806___mcc_h3;
            if (_source66.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _807___mcc_h7 = _source66.dtor_path;
            } else if (_source66.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _808___mcc_h9 = _source66.dtor_path;
              Dafny.ISequence<DAST._IType> _809_typeArgs = _805___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _810_traitPath = _804___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _811_pathStr;
                Dafny.ISequence<Dafny.Rune> _out62;
                _out62 = DCOMP.COMP.GenPath(_810_traitPath);
                _811_pathStr = _out62;
                Dafny.ISequence<Dafny.Rune> _812_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out63;
                _out63 = DCOMP.COMP.GenTypeArgs(_809_typeArgs, false, false);
                _812_typeArgs = _out63;
                Dafny.ISequence<Dafny.Rune> _813_body;
                _813_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_801_traitBodies).Contains(_810_traitPath)) {
                  _813_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_801_traitBodies, _810_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _814_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out64;
                _out64 = DCOMP.COMP.GenPath(path);
                _814_genSelfPath = _out64;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _782_constrainedTypeParams), _811_pathStr), _812_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _814_genSelfPath), _781_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _783_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _813_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _815___mcc_h11 = _source66.dtor_Newtype_a0;
            }
          } else if (_source65.is_Nullable) {
            DAST._IType _816___mcc_h13 = _source65.dtor_Nullable_a0;
          } else if (_source65.is_Tuple) {
            Dafny.ISequence<DAST._IType> _817___mcc_h15 = _source65.dtor_Tuple_a0;
          } else if (_source65.is_Array) {
            DAST._IType _818___mcc_h17 = _source65.dtor_element;
            BigInteger _819___mcc_h18 = _source65.dtor_dims;
          } else if (_source65.is_Seq) {
            DAST._IType _820___mcc_h21 = _source65.dtor_element;
          } else if (_source65.is_Set) {
            DAST._IType _821___mcc_h23 = _source65.dtor_element;
          } else if (_source65.is_Multiset) {
            DAST._IType _822___mcc_h25 = _source65.dtor_element;
          } else if (_source65.is_Map) {
            DAST._IType _823___mcc_h27 = _source65.dtor_key;
            DAST._IType _824___mcc_h28 = _source65.dtor_value;
          } else if (_source65.is_Arrow) {
            Dafny.ISequence<DAST._IType> _825___mcc_h31 = _source65.dtor_args;
            DAST._IType _826___mcc_h32 = _source65.dtor_result;
          } else if (_source65.is_Primitive) {
            DAST._IPrimitive _827___mcc_h35 = _source65.dtor_Primitive_a0;
          } else if (_source65.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _828___mcc_h37 = _source65.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _829___mcc_h39 = _source65.dtor_TypeArg_a0;
          }
          _802_i = (_802_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _830_defaultImpl;
      _830_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _782_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _781_typeParams), _783_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _830_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_830_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _830_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_830_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _830_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_830_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _830_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_830_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _831_printImpl;
      _831_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _782_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _781_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _831_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_831_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _832_ptrPartialEqImpl;
      _832_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _781_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _781_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _832_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_832_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _832_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_832_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _832_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_832_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _833_identEraseImpls;
      _833_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _782_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _781_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _786_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _833_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_833_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _784_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _785_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _781_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _830_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _831_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _832_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _833_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _834_typeParamsSet;
      _834_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _835_typeParams;
      _835_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _836_tpI;
      _836_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _835_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_836_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _837_tp;
          _837_tp = ((t).dtor_typeParams).Select(_836_tpI);
          _834_typeParamsSet = Dafny.Set<DAST._IType>.Union(_834_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_837_tp));
          Dafny.ISequence<Dafny.Rune> _838_genTp;
          Dafny.ISequence<Dafny.Rune> _out65;
          _out65 = DCOMP.COMP.GenType(_837_tp, false, false);
          _838_genTp = _out65;
          _835_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_835_typeParams, _838_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _836_tpI = (_836_tpI) + (BigInteger.One);
        }
        _835_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_835_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _839_fullPath;
      _839_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _840_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _841___v6;
      Dafny.ISequence<Dafny.Rune> _out66;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out67;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_839_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_839_fullPath)), _834_typeParamsSet, out _out66, out _out67);
      _840_implBody = _out66;
      _841___v6 = _out67;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _835_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _840_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _842_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _843_typeParams;
      Dafny.ISequence<Dafny.Rune> _844_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _845_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _846___v7;
      Dafny.ISequence<Dafny.Rune> _847___v8;
      Dafny.ISequence<Dafny.Rune> _848___v9;
      Dafny.ISet<DAST._IType> _out68;
      Dafny.ISequence<Dafny.Rune> _out69;
      Dafny.ISequence<Dafny.Rune> _out70;
      Dafny.ISequence<Dafny.Rune> _out71;
      Dafny.ISequence<Dafny.Rune> _out72;
      Dafny.ISequence<Dafny.Rune> _out73;
      Dafny.ISequence<Dafny.Rune> _out74;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out68, out _out69, out _out70, out _out71, out _out72, out _out73, out _out74);
      _842_typeParamsSet = _out68;
      _843_typeParams = _out69;
      _844_constrainedTypeParams = _out70;
      _845_whereConstraints = _out71;
      _846___v7 = _out72;
      _847___v8 = _out73;
      _848___v9 = _out74;
      Dafny.ISequence<Dafny.Rune> _849_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out75;
      _out75 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _849_underlyingType = _out75;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _843_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _849_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _844_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _843_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _849_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _844_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _849_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _843_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _844_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _843_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _843_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _844_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _843_typeParams), _845_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source67 = (c).dtor_witnessExpr;
      if (_source67.is_Some) {
        DAST._IExpression _850___mcc_h0 = _source67.dtor_Some_a0;
        DAST._IExpression _851_e = _850___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _852_eStr;
          bool _853___v10;
          bool _854___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _855___v12;
          Dafny.ISequence<Dafny.Rune> _out76;
          bool _out77;
          bool _out78;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out79;
          DCOMP.COMP.GenExpr(_851_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out76, out _out77, out _out78, out _out79);
          _852_eStr = _out76;
          _853___v10 = _out77;
          _854___v11 = _out78;
          _855___v12 = _out79;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _852_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _844_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _843_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _844_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _843_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _849_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _856_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _857_typeParams;
      Dafny.ISequence<Dafny.Rune> _858_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _859_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _860_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _861_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _862_erasedParams;
      Dafny.ISet<DAST._IType> _out80;
      Dafny.ISequence<Dafny.Rune> _out81;
      Dafny.ISequence<Dafny.Rune> _out82;
      Dafny.ISequence<Dafny.Rune> _out83;
      Dafny.ISequence<Dafny.Rune> _out84;
      Dafny.ISequence<Dafny.Rune> _out85;
      Dafny.ISequence<Dafny.Rune> _out86;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out80, out _out81, out _out82, out _out83, out _out84, out _out85, out _out86);
      _856_typeParamsSet = _out80;
      _857_typeParams = _out81;
      _858_constrainedTypeParams = _out82;
      _859_whereConstraints = _out83;
      _860_constrainedEraseParams = _out84;
      _861_unerasedParams = _out85;
      _862_erasedParams = _out86;
      Dafny.ISequence<Dafny.Rune> _863_ctors;
      _863_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _864_i;
      _864_i = BigInteger.Zero;
      while ((_864_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _865_ctor;
        _865_ctor = ((c).dtor_ctors).Select(_864_i);
        Dafny.ISequence<Dafny.Rune> _866_ctorBody;
        _866_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_865_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _867_j;
        _867_j = BigInteger.Zero;
        while ((_867_j) < (new BigInteger(((_865_ctor).dtor_args).Count))) {
          DAST._IFormal _868_formal;
          _868_formal = ((_865_ctor).dtor_args).Select(_867_j);
          Dafny.ISequence<Dafny.Rune> _869_formalType;
          Dafny.ISequence<Dafny.Rune> _out87;
          _out87 = DCOMP.COMP.GenType((_868_formal).dtor_typ, false, false);
          _869_formalType = _out87;
          if ((c).dtor_isCo) {
            _866_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_866_ctorBody, DCOMP.__default.escapeIdent((_868_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _869_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _866_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_866_ctorBody, DCOMP.__default.escapeIdent((_868_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _869_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _867_j = (_867_j) + (BigInteger.One);
        }
        _866_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_866_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _863_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_863_ctors, _866_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _864_i = (_864_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _870_selfPath;
      _870_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _871_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _872_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out88;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out89;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_870_selfPath)), _856_typeParamsSet, out _out88, out _out89);
      _871_implBody = _out88;
      _872_traitBodies = _out89;
      _864_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _873_emittedFields;
      _873_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_864_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _874_ctor;
        _874_ctor = ((c).dtor_ctors).Select(_864_i);
        BigInteger _875_j;
        _875_j = BigInteger.Zero;
        while ((_875_j) < (new BigInteger(((_874_ctor).dtor_args).Count))) {
          DAST._IFormal _876_formal;
          _876_formal = ((_874_ctor).dtor_args).Select(_875_j);
          if (!((_873_emittedFields).Contains((_876_formal).dtor_name))) {
            _873_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_873_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_876_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _877_formalType;
            Dafny.ISequence<Dafny.Rune> _out90;
            _out90 = DCOMP.COMP.GenType((_876_formal).dtor_typ, false, false);
            _877_formalType = _out90;
            Dafny.ISequence<Dafny.Rune> _878_methodBody;
            _878_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _879_k;
            _879_k = BigInteger.Zero;
            while ((_879_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _880_ctor2;
              _880_ctor2 = ((c).dtor_ctors).Select(_879_k);
              Dafny.ISequence<Dafny.Rune> _881_ctorMatch;
              _881_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_880_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _882_l;
              _882_l = BigInteger.Zero;
              bool _883_hasMatchingField;
              _883_hasMatchingField = false;
              while ((_882_l) < (new BigInteger(((_880_ctor2).dtor_args).Count))) {
                DAST._IFormal _884_formal2;
                _884_formal2 = ((_880_ctor2).dtor_args).Select(_882_l);
                if (((_876_formal).dtor_name).Equals((_884_formal2).dtor_name)) {
                  _883_hasMatchingField = true;
                }
                _881_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_881_ctorMatch, DCOMP.__default.escapeIdent((_884_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _882_l = (_882_l) + (BigInteger.One);
              }
              if (_883_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _881_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_881_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_876_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _881_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_881_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_876_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _881_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_881_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _878_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_878_methodBody, _881_ctorMatch);
              _879_k = (_879_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _878_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_878_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _878_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_878_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _871_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_871_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_876_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _877_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _878_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _875_j = (_875_j) + (BigInteger.One);
        }
        _864_i = (_864_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _863_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_863_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _885_typeI;
        _885_typeI = BigInteger.Zero;
        while ((_885_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_885_typeI).Sign == 1) {
            _863_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_863_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _886_genTp;
          Dafny.ISequence<Dafny.Rune> _out91;
          _out91 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_885_typeI), false, false);
          _886_genTp = _out91;
          _863_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_863_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _886_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _885_typeI = (_885_typeI) + (BigInteger.One);
        }
        _863_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_863_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _887_enumBody;
      _887_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _857_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _863_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _858_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _857_typeParams), _859_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _871_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _888_identEraseImpls;
      _888_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _858_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _857_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _862_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _888_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_888_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _860_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _861_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _857_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _889_printImpl;
      _889_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _858_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _857_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _864_i = BigInteger.Zero;
      while ((_864_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _890_ctor;
        _890_ctor = ((c).dtor_ctors).Select(_864_i);
        Dafny.ISequence<Dafny.Rune> _891_ctorMatch;
        _891_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_890_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _892_modulePrefix;
        _892_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _893_printRhs;
        _893_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _892_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_890_ctor).dtor_name), (((_890_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _894_j;
        _894_j = BigInteger.Zero;
        while ((_894_j) < (new BigInteger(((_890_ctor).dtor_args).Count))) {
          DAST._IFormal _895_formal;
          _895_formal = ((_890_ctor).dtor_args).Select(_894_j);
          _891_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_891_ctorMatch, DCOMP.__default.escapeIdent((_895_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_894_j).Sign == 1) {
            _893_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_893_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _893_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_893_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_895_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _894_j = (_894_j) + (BigInteger.One);
        }
        _891_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_891_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_890_ctor).dtor_hasAnyArgs) {
          _893_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_893_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _893_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_893_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _889_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_889_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _891_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _893_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _864_i = (_864_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _889_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_889_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _889_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_889_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _896_defaultImpl;
      _896_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _896_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _858_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _857_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _864_i = BigInteger.Zero;
        while ((_864_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _897_formal;
          _897_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_864_i);
          _896_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_896_defaultImpl, DCOMP.__default.escapeIdent((_897_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _864_i = (_864_i) + (BigInteger.One);
        }
        _896_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_896_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_887_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _888_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _889_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _896_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _898_i;
        _898_i = BigInteger.Zero;
        while ((_898_i) < (new BigInteger((p).Count))) {
          if ((_898_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_898_i))));
          _898_i = (_898_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _899_i;
        _899_i = BigInteger.Zero;
        while ((_899_i) < (new BigInteger((args).Count))) {
          if ((_899_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _900_genTp;
          Dafny.ISequence<Dafny.Rune> _out92;
          _out92 = DCOMP.COMP.GenType((args).Select(_899_i), inBinding, inFn);
          _900_genTp = _out92;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _900_genTp);
          _899_i = (_899_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source68 = c;
      if (_source68.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _901___mcc_h0 = _source68.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _902___mcc_h1 = _source68.dtor_typeArgs;
        DAST._IResolvedType _903___mcc_h2 = _source68.dtor_resolved;
        DAST._IResolvedType _904_resolved = _903___mcc_h2;
        Dafny.ISequence<DAST._IType> _905_args = _902___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _906_p = _901___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out93;
          _out93 = DCOMP.COMP.GenPath(_906_p);
          s = _out93;
          Dafny.ISequence<Dafny.Rune> _907_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out94;
          _out94 = DCOMP.COMP.GenTypeArgs(_905_args, inBinding, inFn);
          _907_typeArgs = _out94;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _907_typeArgs);
          DAST._IResolvedType _source69 = _904_resolved;
          if (_source69.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _908___mcc_h18 = _source69.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source69.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _909___mcc_h20 = _source69.dtor_path;
            {
              if ((_906_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _910___mcc_h22 = _source69.dtor_Newtype_a0;
            DAST._IResolvedType _911_Primitive = _904_resolved;
          }
        }
      } else if (_source68.is_Nullable) {
        DAST._IType _912___mcc_h3 = _source68.dtor_Nullable_a0;
        DAST._IType _913_inner = _912___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _914_innerStr;
          Dafny.ISequence<Dafny.Rune> _out95;
          _out95 = DCOMP.COMP.GenType(_913_inner, inBinding, inFn);
          _914_innerStr = _out95;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _914_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source68.is_Tuple) {
        Dafny.ISequence<DAST._IType> _915___mcc_h4 = _source68.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _916_types = _915___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _917_i;
          _917_i = BigInteger.Zero;
          while ((_917_i) < (new BigInteger((_916_types).Count))) {
            if ((_917_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _918_generated;
            Dafny.ISequence<Dafny.Rune> _out96;
            _out96 = DCOMP.COMP.GenType((_916_types).Select(_917_i), inBinding, inFn);
            _918_generated = _out96;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _918_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _917_i = (_917_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source68.is_Array) {
        DAST._IType _919___mcc_h5 = _source68.dtor_element;
        BigInteger _920___mcc_h6 = _source68.dtor_dims;
        BigInteger _921_dims = _920___mcc_h6;
        DAST._IType _922_element = _919___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _923_elemStr;
          Dafny.ISequence<Dafny.Rune> _out97;
          _out97 = DCOMP.COMP.GenType(_922_element, inBinding, inFn);
          _923_elemStr = _out97;
          s = _923_elemStr;
          BigInteger _924_i;
          _924_i = BigInteger.Zero;
          while ((_924_i) < (_921_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _924_i = (_924_i) + (BigInteger.One);
          }
        }
      } else if (_source68.is_Seq) {
        DAST._IType _925___mcc_h7 = _source68.dtor_element;
        DAST._IType _926_element = _925___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _927_elemStr;
          Dafny.ISequence<Dafny.Rune> _out98;
          _out98 = DCOMP.COMP.GenType(_926_element, inBinding, inFn);
          _927_elemStr = _out98;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _927_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source68.is_Set) {
        DAST._IType _928___mcc_h8 = _source68.dtor_element;
        DAST._IType _929_element = _928___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _930_elemStr;
          Dafny.ISequence<Dafny.Rune> _out99;
          _out99 = DCOMP.COMP.GenType(_929_element, inBinding, inFn);
          _930_elemStr = _out99;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _930_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source68.is_Multiset) {
        DAST._IType _931___mcc_h9 = _source68.dtor_element;
        DAST._IType _932_element = _931___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _933_elemStr;
          Dafny.ISequence<Dafny.Rune> _out100;
          _out100 = DCOMP.COMP.GenType(_932_element, inBinding, inFn);
          _933_elemStr = _out100;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _933_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source68.is_Map) {
        DAST._IType _934___mcc_h10 = _source68.dtor_key;
        DAST._IType _935___mcc_h11 = _source68.dtor_value;
        DAST._IType _936_value = _935___mcc_h11;
        DAST._IType _937_key = _934___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _938_keyStr;
          Dafny.ISequence<Dafny.Rune> _out101;
          _out101 = DCOMP.COMP.GenType(_937_key, inBinding, inFn);
          _938_keyStr = _out101;
          Dafny.ISequence<Dafny.Rune> _939_valueStr;
          Dafny.ISequence<Dafny.Rune> _out102;
          _out102 = DCOMP.COMP.GenType(_936_value, inBinding, inFn);
          _939_valueStr = _out102;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _938_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _939_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source68.is_Arrow) {
        Dafny.ISequence<DAST._IType> _940___mcc_h12 = _source68.dtor_args;
        DAST._IType _941___mcc_h13 = _source68.dtor_result;
        DAST._IType _942_result = _941___mcc_h13;
        Dafny.ISequence<DAST._IType> _943_args = _940___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _944_i;
          _944_i = BigInteger.Zero;
          while ((_944_i) < (new BigInteger((_943_args).Count))) {
            if ((_944_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _945_generated;
            Dafny.ISequence<Dafny.Rune> _out103;
            _out103 = DCOMP.COMP.GenType((_943_args).Select(_944_i), inBinding, true);
            _945_generated = _out103;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _945_generated);
            _944_i = (_944_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _946_resultType;
          Dafny.ISequence<Dafny.Rune> _out104;
          _out104 = DCOMP.COMP.GenType(_942_result, inBinding, (inFn) || (inBinding));
          _946_resultType = _out104;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _946_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source68.is_Primitive) {
        DAST._IPrimitive _947___mcc_h14 = _source68.dtor_Primitive_a0;
        DAST._IPrimitive _948_p = _947___mcc_h14;
        {
          DAST._IPrimitive _source70 = _948_p;
          if (_source70.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source70.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source70.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source70.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source68.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _949___mcc_h15 = _source68.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _950_v = _949___mcc_h15;
        s = _950_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _951___mcc_h16 = _source68.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source71 = _951___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _952___mcc_h17 = _source71;
        Dafny.ISequence<Dafny.Rune> _953_name = _952___mcc_h17;
        s = DCOMP.__default.escapeIdent(_953_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _954_i;
      _954_i = BigInteger.Zero;
      while ((_954_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source72 = (body).Select(_954_i);
        DAST._IMethod _955___mcc_h0 = _source72;
        DAST._IMethod _956_m = _955___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source73 = (_956_m).dtor_overridingPath;
          if (_source73.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _957___mcc_h1 = _source73.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _958_p = _957___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _959_existing;
              _959_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_958_p)) {
                _959_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _958_p);
              }
              if ((new BigInteger((_959_existing).Count)).Sign == 1) {
                _959_existing = Dafny.Sequence<Dafny.Rune>.Concat(_959_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _960_genMethod;
              Dafny.ISequence<Dafny.Rune> _out105;
              _out105 = DCOMP.COMP.GenMethod(_956_m, true, enclosingType, enclosingTypeParams);
              _960_genMethod = _out105;
              _959_existing = Dafny.Sequence<Dafny.Rune>.Concat(_959_existing, _960_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_958_p, _959_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _961_generated;
              Dafny.ISequence<Dafny.Rune> _out106;
              _out106 = DCOMP.COMP.GenMethod(_956_m, forTrait, enclosingType, enclosingTypeParams);
              _961_generated = _out106;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _961_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _954_i = (_954_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _962_i;
      _962_i = BigInteger.Zero;
      while ((_962_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _963_param;
        _963_param = (@params).Select(_962_i);
        Dafny.ISequence<Dafny.Rune> _964_paramType;
        Dafny.ISequence<Dafny.Rune> _out107;
        _out107 = DCOMP.COMP.GenType((_963_param).dtor_typ, false, false);
        _964_paramType = _out107;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_963_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _964_paramType);
        if ((_962_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _962_i = (_962_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _965_params;
      Dafny.ISequence<Dafny.Rune> _out108;
      _out108 = DCOMP.COMP.GenParams((m).dtor_params);
      _965_params = _out108;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _966_paramNames;
      _966_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _967_paramI;
      _967_paramI = BigInteger.Zero;
      while ((_967_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _966_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_966_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_967_paramI)).dtor_name));
        _967_paramI = (_967_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _965_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _965_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _968_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out109;
          _out109 = DCOMP.COMP.GenType(enclosingType, false, false);
          _968_enclosingTypeString = _out109;
          _965_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _968_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _965_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _969_retType;
      _969_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _970_typeI;
      _970_typeI = BigInteger.Zero;
      while ((_970_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_970_typeI).Sign == 1) {
          _969_retType = Dafny.Sequence<Dafny.Rune>.Concat(_969_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _971_typeString;
        Dafny.ISequence<Dafny.Rune> _out110;
        _out110 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_970_typeI), false, false);
        _971_typeString = _out110;
        _969_retType = Dafny.Sequence<Dafny.Rune>.Concat(_969_retType, _971_typeString);
        _970_typeI = (_970_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _969_retType = Dafny.Sequence<Dafny.Rune>.Concat(_969_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _972_typeParamsFiltered;
      _972_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _973_typeParamI;
      _973_typeParamI = BigInteger.Zero;
      while ((_973_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _974_typeParam;
        _974_typeParam = ((m).dtor_typeParams).Select(_973_typeParamI);
        if (!((enclosingTypeParams).Contains(_974_typeParam))) {
          _972_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_972_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_974_typeParam));
        }
        _973_typeParamI = (_973_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _975_whereClauses;
      _975_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_972_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _975_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_975_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _976_i;
        _976_i = BigInteger.Zero;
        while ((_976_i) < (new BigInteger((_972_typeParamsFiltered).Count))) {
          if ((_976_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _975_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_975_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _977_typeString;
          Dafny.ISequence<Dafny.Rune> _out111;
          _out111 = DCOMP.COMP.GenType((_972_typeParamsFiltered).Select(_976_i), false, false);
          _977_typeString = _out111;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _977_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _977_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _975_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_975_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _977_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _976_i = (_976_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _965_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _969_retType), _975_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _978_earlyReturn;
        _978_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source74 = (m).dtor_outVars;
        if (_source74.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _979___mcc_h0 = _source74.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _980_outVars = _979___mcc_h0;
          {
            _978_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _981_outI;
            _981_outI = BigInteger.Zero;
            while ((_981_outI) < (new BigInteger((_980_outVars).Count))) {
              if ((_981_outI).Sign == 1) {
                _978_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_978_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _982_outVar;
              _982_outVar = (_980_outVars).Select(_981_outI);
              _978_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_978_earlyReturn, DCOMP.__default.escapeIdent((_982_outVar)));
              _981_outI = (_981_outI) + (BigInteger.One);
            }
            _978_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_978_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _983_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _984___v15;
        Dafny.ISequence<Dafny.Rune> _out112;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out113;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _966_paramNames, true, _978_earlyReturn, out _out112, out _out113);
        _983_body = _out112;
        _984___v15 = _out113;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _983_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _985_declarations;
      _985_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _986_i;
      _986_i = BigInteger.Zero;
      while ((_986_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _987_stmt;
        _987_stmt = (stmts).Select(_986_i);
        Dafny.ISequence<Dafny.Rune> _988_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _989_recIdents;
        Dafny.ISequence<Dafny.Rune> _out114;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out115;
        DCOMP.COMP.GenStmt(_987_stmt, selfIdent, @params, (isLast) && ((_986_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out114, out _out115);
        _988_stmtString = _out114;
        _989_recIdents = _out115;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_989_recIdents, _985_declarations));
        DAST._IStatement _source75 = _987_stmt;
        if (_source75.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _990___mcc_h0 = _source75.dtor_name;
          DAST._IType _991___mcc_h1 = _source75.dtor_typ;
          DAST._IOptional<DAST._IExpression> _992___mcc_h2 = _source75.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _993_name = _990___mcc_h0;
          {
            _985_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_985_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_993_name));
          }
        } else if (_source75.is_Assign) {
          DAST._IAssignLhs _994___mcc_h6 = _source75.dtor_lhs;
          DAST._IExpression _995___mcc_h7 = _source75.dtor_value;
        } else if (_source75.is_If) {
          DAST._IExpression _996___mcc_h10 = _source75.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _997___mcc_h11 = _source75.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _998___mcc_h12 = _source75.dtor_els;
        } else if (_source75.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _999___mcc_h16 = _source75.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1000___mcc_h17 = _source75.dtor_body;
        } else if (_source75.is_While) {
          DAST._IExpression _1001___mcc_h20 = _source75.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1002___mcc_h21 = _source75.dtor_body;
        } else if (_source75.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1003___mcc_h24 = _source75.dtor_boundName;
          DAST._IType _1004___mcc_h25 = _source75.dtor_boundType;
          DAST._IExpression _1005___mcc_h26 = _source75.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1006___mcc_h27 = _source75.dtor_body;
        } else if (_source75.is_Call) {
          DAST._IExpression _1007___mcc_h32 = _source75.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1008___mcc_h33 = _source75.dtor_name;
          Dafny.ISequence<DAST._IType> _1009___mcc_h34 = _source75.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1010___mcc_h35 = _source75.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1011___mcc_h36 = _source75.dtor_outs;
        } else if (_source75.is_Return) {
          DAST._IExpression _1012___mcc_h42 = _source75.dtor_expr;
        } else if (_source75.is_EarlyReturn) {
        } else if (_source75.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1013___mcc_h44 = _source75.dtor_toLabel;
        } else if (_source75.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1014___mcc_h46 = _source75.dtor_body;
        } else if (_source75.is_JumpTailCallStart) {
        } else if (_source75.is_Halt) {
        } else {
          DAST._IExpression _1015___mcc_h48 = _source75.dtor_Print_a0;
        }
        if ((_986_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _988_stmtString);
        _986_i = (_986_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source76 = lhs;
      if (_source76.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1016___mcc_h0 = _source76.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source77 = _1016___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1017___mcc_h1 = _source77;
        Dafny.ISequence<Dafny.Rune> _1018_id = _1017___mcc_h1;
        {
          if ((@params).Contains(_1018_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1018_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1018_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1018_id);
          needsIIFE = false;
        }
      } else if (_source76.is_Select) {
        DAST._IExpression _1019___mcc_h2 = _source76.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1020___mcc_h3 = _source76.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1021_field = _1020___mcc_h3;
        DAST._IExpression _1022_on = _1019___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _1023_onExpr;
          bool _1024_onOwned;
          bool _1025_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1026_recIdents;
          Dafny.ISequence<Dafny.Rune> _out116;
          bool _out117;
          bool _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_1022_on, selfIdent, @params, false, out _out116, out _out117, out _out118, out _out119);
          _1023_onExpr = _out116;
          _1024_onOwned = _out117;
          _1025_onErased = _out118;
          _1026_recIdents = _out119;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _1023_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1021_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1026_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1027___mcc_h4 = _source76.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1028___mcc_h5 = _source76.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1029_indices = _1028___mcc_h5;
        DAST._IExpression _1030_on = _1027___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1031_onExpr;
          bool _1032_onOwned;
          bool _1033_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1034_recIdents;
          Dafny.ISequence<Dafny.Rune> _out120;
          bool _out121;
          bool _out122;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out123;
          DCOMP.COMP.GenExpr(_1030_on, selfIdent, @params, false, out _out120, out _out121, out _out122, out _out123);
          _1031_onExpr = _out120;
          _1032_onOwned = _out121;
          _1033_onErased = _out122;
          _1034_recIdents = _out123;
          readIdents = _1034_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1035_i;
          _1035_i = BigInteger.Zero;
          while ((_1035_i) < (new BigInteger((_1029_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _1036_idx;
            bool _1037___v19;
            bool _1038_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1039_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out124;
            bool _out125;
            bool _out126;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out127;
            DCOMP.COMP.GenExpr((_1029_indices).Select(_1035_i), selfIdent, @params, true, out _out124, out _out125, out _out126, out _out127);
            _1036_idx = _out124;
            _1037___v19 = _out125;
            _1038_idxErased = _out126;
            _1039_recIdentsIdx = _out127;
            if (!(_1038_idxErased)) {
              _1036_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1036_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_1035_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _1036_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1039_recIdentsIdx);
            _1035_i = (_1035_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _1031_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1035_i = BigInteger.Zero;
          while ((_1035_i) < (new BigInteger((_1029_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_1035_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1035_i = (_1035_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source78 = stmt;
      if (_source78.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1040___mcc_h0 = _source78.dtor_name;
        DAST._IType _1041___mcc_h1 = _source78.dtor_typ;
        DAST._IOptional<DAST._IExpression> _1042___mcc_h2 = _source78.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source79 = _1042___mcc_h2;
        if (_source79.is_Some) {
          DAST._IExpression _1043___mcc_h3 = _source79.dtor_Some_a0;
          DAST._IExpression _1044_expression = _1043___mcc_h3;
          DAST._IType _1045_typ = _1041___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1046_name = _1040___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1047_typeString;
            Dafny.ISequence<Dafny.Rune> _out128;
            _out128 = DCOMP.COMP.GenType(_1045_typ, true, false);
            _1047_typeString = _out128;
            Dafny.ISequence<Dafny.Rune> _1048_expr;
            bool _1049___v20;
            bool _1050_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1051_recIdents;
            Dafny.ISequence<Dafny.Rune> _out129;
            bool _out130;
            bool _out131;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
            DCOMP.COMP.GenExpr(_1044_expression, selfIdent, @params, true, out _out129, out _out130, out _out131, out _out132);
            _1048_expr = _out129;
            _1049___v20 = _out130;
            _1050_recErased = _out131;
            _1051_recIdents = _out132;
            if (!(_1050_recErased)) {
              _1048_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1048_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1048_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1047_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1048_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1046_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1047_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1048_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1051_recIdents;
          }
        } else {
          DAST._IType _1052_typ = _1041___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1053_name = _1040___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1054_typeString;
            Dafny.ISequence<Dafny.Rune> _out133;
            _out133 = DCOMP.COMP.GenType(_1052_typ, true, false);
            _1054_typeString = _out133;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1053_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1054_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source78.is_Assign) {
        DAST._IAssignLhs _1055___mcc_h4 = _source78.dtor_lhs;
        DAST._IExpression _1056___mcc_h5 = _source78.dtor_value;
        DAST._IExpression _1057_expression = _1056___mcc_h5;
        DAST._IAssignLhs _1058_lhs = _1055___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1059_lhsGen;
          bool _1060_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1061_recIdents;
          Dafny.ISequence<Dafny.Rune> _out134;
          bool _out135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out136;
          DCOMP.COMP.GenAssignLhs(_1058_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out134, out _out135, out _out136);
          _1059_lhsGen = _out134;
          _1060_needsIIFE = _out135;
          _1061_recIdents = _out136;
          Dafny.ISequence<Dafny.Rune> _1062_exprGen;
          bool _1063___v21;
          bool _1064_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1065_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out137;
          bool _out138;
          bool _out139;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out140;
          DCOMP.COMP.GenExpr(_1057_expression, selfIdent, @params, true, out _out137, out _out138, out _out139, out _out140);
          _1062_exprGen = _out137;
          _1063___v21 = _out138;
          _1064_exprErased = _out139;
          _1065_exprIdents = _out140;
          if (!(_1064_exprErased)) {
            _1062_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1062_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1062_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1062_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1060_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1062_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1059_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1059_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1062_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1061_recIdents, _1065_exprIdents);
        }
      } else if (_source78.is_If) {
        DAST._IExpression _1066___mcc_h6 = _source78.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1067___mcc_h7 = _source78.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1068___mcc_h8 = _source78.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1069_els = _1068___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1070_thn = _1067___mcc_h7;
        DAST._IExpression _1071_cond = _1066___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1072_condString;
          bool _1073___v22;
          bool _1074_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1075_recIdents;
          Dafny.ISequence<Dafny.Rune> _out141;
          bool _out142;
          bool _out143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
          DCOMP.COMP.GenExpr(_1071_cond, selfIdent, @params, true, out _out141, out _out142, out _out143, out _out144);
          _1072_condString = _out141;
          _1073___v22 = _out142;
          _1074_condErased = _out143;
          _1075_recIdents = _out144;
          if (!(_1074_condErased)) {
            _1072_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1072_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1075_recIdents;
          Dafny.ISequence<Dafny.Rune> _1076_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1077_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out145;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out146;
          DCOMP.COMP.GenStmts(_1070_thn, selfIdent, @params, isLast, earlyReturn, out _out145, out _out146);
          _1076_thnString = _out145;
          _1077_thnIdents = _out146;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1077_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1078_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1079_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out147;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out148;
          DCOMP.COMP.GenStmts(_1069_els, selfIdent, @params, isLast, earlyReturn, out _out147, out _out148);
          _1078_elsString = _out147;
          _1079_elsIdents = _out148;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1079_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1072_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1076_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1078_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source78.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1080___mcc_h9 = _source78.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1081___mcc_h10 = _source78.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1082_body = _1081___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1083_lbl = _1080___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1084_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1085_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out149;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out150;
          DCOMP.COMP.GenStmts(_1082_body, selfIdent, @params, isLast, earlyReturn, out _out149, out _out150);
          _1084_bodyString = _out149;
          _1085_bodyIdents = _out150;
          readIdents = _1085_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1083_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1084_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source78.is_While) {
        DAST._IExpression _1086___mcc_h11 = _source78.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1087___mcc_h12 = _source78.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1088_body = _1087___mcc_h12;
        DAST._IExpression _1089_cond = _1086___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _1090_condString;
          bool _1091___v23;
          bool _1092_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1093_recIdents;
          Dafny.ISequence<Dafny.Rune> _out151;
          bool _out152;
          bool _out153;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out154;
          DCOMP.COMP.GenExpr(_1089_cond, selfIdent, @params, true, out _out151, out _out152, out _out153, out _out154);
          _1090_condString = _out151;
          _1091___v23 = _out152;
          _1092_condErased = _out153;
          _1093_recIdents = _out154;
          if (!(_1092_condErased)) {
            _1090_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1090_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1093_recIdents;
          Dafny.ISequence<Dafny.Rune> _1094_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1095_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out155;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out156;
          DCOMP.COMP.GenStmts(_1088_body, selfIdent, @params, false, earlyReturn, out _out155, out _out156);
          _1094_bodyString = _out155;
          _1095_bodyIdents = _out156;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1095_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _1090_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1094_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source78.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1096___mcc_h13 = _source78.dtor_boundName;
        DAST._IType _1097___mcc_h14 = _source78.dtor_boundType;
        DAST._IExpression _1098___mcc_h15 = _source78.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1099___mcc_h16 = _source78.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1100_body = _1099___mcc_h16;
        DAST._IExpression _1101_over = _1098___mcc_h15;
        DAST._IType _1102_boundType = _1097___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1103_boundName = _1096___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1104_overString;
          bool _1105___v24;
          bool _1106_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1107_recIdents;
          Dafny.ISequence<Dafny.Rune> _out157;
          bool _out158;
          bool _out159;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out160;
          DCOMP.COMP.GenExpr(_1101_over, selfIdent, @params, true, out _out157, out _out158, out _out159, out _out160);
          _1104_overString = _out157;
          _1105___v24 = _out158;
          _1106_overErased = _out159;
          _1107_recIdents = _out160;
          Dafny.ISequence<Dafny.Rune> _1108_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out161;
          _out161 = DCOMP.COMP.GenType(_1102_boundType, false, false);
          _1108_boundTypeStr = _out161;
          readIdents = _1107_recIdents;
          Dafny.ISequence<Dafny.Rune> _1109_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1110_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out162;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out163;
          DCOMP.COMP.GenStmts(_1100_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1103_boundName)), false, earlyReturn, out _out162, out _out163);
          _1109_bodyString = _out162;
          _1110_bodyIdents = _out163;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1110_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1103_boundName));
          Dafny.ISequence<Dafny.Rune> _1111_unerasedIter;
          _1111_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_1106_overErased) {
            _1111_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1108_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1111_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _1104_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1103_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1111_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1109_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source78.is_Call) {
        DAST._IExpression _1112___mcc_h17 = _source78.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1113___mcc_h18 = _source78.dtor_name;
        Dafny.ISequence<DAST._IType> _1114___mcc_h19 = _source78.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1115___mcc_h20 = _source78.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1116___mcc_h21 = _source78.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1117_maybeOutVars = _1116___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1118_args = _1115___mcc_h20;
        Dafny.ISequence<DAST._IType> _1119_typeArgs = _1114___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1120_name = _1113___mcc_h18;
        DAST._IExpression _1121_on = _1112___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1122_typeArgString;
          _1122_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1119_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1123_typeI;
            _1123_typeI = BigInteger.Zero;
            _1122_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_1123_typeI) < (new BigInteger((_1119_typeArgs).Count))) {
              if ((_1123_typeI).Sign == 1) {
                _1122_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1122_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1124_typeString;
              Dafny.ISequence<Dafny.Rune> _out164;
              _out164 = DCOMP.COMP.GenType((_1119_typeArgs).Select(_1123_typeI), false, false);
              _1124_typeString = _out164;
              _1122_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1122_typeArgString, _1124_typeString);
              _1123_typeI = (_1123_typeI) + (BigInteger.One);
            }
            _1122_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1122_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _1125_argString;
          _1125_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1126_i;
          _1126_i = BigInteger.Zero;
          while ((_1126_i) < (new BigInteger((_1118_args).Count))) {
            if ((_1126_i).Sign == 1) {
              _1125_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1125_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1127_argExpr;
            bool _1128_isOwned;
            bool _1129_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1130_argIdents;
            Dafny.ISequence<Dafny.Rune> _out165;
            bool _out166;
            bool _out167;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out168;
            DCOMP.COMP.GenExpr((_1118_args).Select(_1126_i), selfIdent, @params, false, out _out165, out _out166, out _out167, out _out168);
            _1127_argExpr = _out165;
            _1128_isOwned = _out166;
            _1129_argErased = _out167;
            _1130_argIdents = _out168;
            if (_1128_isOwned) {
              _1127_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1127_argExpr);
            }
            _1125_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1125_argString, _1127_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1130_argIdents);
            _1126_i = (_1126_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1131_enclosingString;
          bool _1132___v25;
          bool _1133___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1134_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out169;
          bool _out170;
          bool _out171;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out172;
          DCOMP.COMP.GenExpr(_1121_on, selfIdent, @params, false, out _out169, out _out170, out _out171, out _out172);
          _1131_enclosingString = _out169;
          _1132___v25 = _out170;
          _1133___v26 = _out171;
          _1134_enclosingIdents = _out172;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1134_enclosingIdents);
          DAST._IExpression _source80 = _1121_on;
          if (_source80.is_Literal) {
            DAST._ILiteral _1135___mcc_h26 = _source80.dtor_Literal_a0;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1136___mcc_h28 = _source80.dtor_Ident_a0;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1137___mcc_h30 = _source80.dtor_Companion_a0;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1131_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source80.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1138___mcc_h32 = _source80.dtor_Tuple_a0;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1139___mcc_h34 = _source80.dtor_path;
            Dafny.ISequence<DAST._IType> _1140___mcc_h35 = _source80.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1141___mcc_h36 = _source80.dtor_args;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1142___mcc_h40 = _source80.dtor_dims;
            DAST._IType _1143___mcc_h41 = _source80.dtor_typ;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1144___mcc_h44 = _source80.dtor_path;
            Dafny.ISequence<DAST._IType> _1145___mcc_h45 = _source80.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1146___mcc_h46 = _source80.dtor_variant;
            bool _1147___mcc_h47 = _source80.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1148___mcc_h48 = _source80.dtor_contents;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_Convert) {
            DAST._IExpression _1149___mcc_h54 = _source80.dtor_value;
            DAST._IType _1150___mcc_h55 = _source80.dtor_from;
            DAST._IType _1151___mcc_h56 = _source80.dtor_typ;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_SeqConstruct) {
            DAST._IExpression _1152___mcc_h60 = _source80.dtor_length;
            DAST._IExpression _1153___mcc_h61 = _source80.dtor_elem;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _1154___mcc_h64 = _source80.dtor_elements;
            DAST._IType _1155___mcc_h65 = _source80.dtor_typ;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _1156___mcc_h68 = _source80.dtor_elements;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1157___mcc_h70 = _source80.dtor_mapElems;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_This) {
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_Ite) {
            DAST._IExpression _1158___mcc_h72 = _source80.dtor_cond;
            DAST._IExpression _1159___mcc_h73 = _source80.dtor_thn;
            DAST._IExpression _1160___mcc_h74 = _source80.dtor_els;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_UnOp) {
            DAST._IUnaryOp _1161___mcc_h78 = _source80.dtor_unOp;
            DAST._IExpression _1162___mcc_h79 = _source80.dtor_expr;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_BinOp) {
            DAST._IBinOp _1163___mcc_h82 = _source80.dtor_op;
            DAST._IExpression _1164___mcc_h83 = _source80.dtor_left;
            DAST._IExpression _1165___mcc_h84 = _source80.dtor_right;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_ArrayLen) {
            DAST._IExpression _1166___mcc_h88 = _source80.dtor_expr;
            BigInteger _1167___mcc_h89 = _source80.dtor_dim;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_Select) {
            DAST._IExpression _1168___mcc_h92 = _source80.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1169___mcc_h93 = _source80.dtor_field;
            bool _1170___mcc_h94 = _source80.dtor_isConstant;
            bool _1171___mcc_h95 = _source80.dtor_onDatatype;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_SelectFn) {
            DAST._IExpression _1172___mcc_h100 = _source80.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1173___mcc_h101 = _source80.dtor_field;
            bool _1174___mcc_h102 = _source80.dtor_onDatatype;
            bool _1175___mcc_h103 = _source80.dtor_isStatic;
            BigInteger _1176___mcc_h104 = _source80.dtor_arity;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_Index) {
            DAST._IExpression _1177___mcc_h110 = _source80.dtor_expr;
            DAST._ICollKind _1178___mcc_h111 = _source80.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1179___mcc_h112 = _source80.dtor_indices;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_IndexRange) {
            DAST._IExpression _1180___mcc_h116 = _source80.dtor_expr;
            bool _1181___mcc_h117 = _source80.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _1182___mcc_h118 = _source80.dtor_low;
            DAST._IOptional<DAST._IExpression> _1183___mcc_h119 = _source80.dtor_high;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_TupleSelect) {
            DAST._IExpression _1184___mcc_h124 = _source80.dtor_expr;
            BigInteger _1185___mcc_h125 = _source80.dtor_index;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_Call) {
            DAST._IExpression _1186___mcc_h128 = _source80.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1187___mcc_h129 = _source80.dtor_name;
            Dafny.ISequence<DAST._IType> _1188___mcc_h130 = _source80.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1189___mcc_h131 = _source80.dtor_args;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1190___mcc_h136 = _source80.dtor_params;
            DAST._IType _1191___mcc_h137 = _source80.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1192___mcc_h138 = _source80.dtor_body;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1193___mcc_h142 = _source80.dtor_values;
            DAST._IType _1194___mcc_h143 = _source80.dtor_retType;
            DAST._IExpression _1195___mcc_h144 = _source80.dtor_expr;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1196___mcc_h148 = _source80.dtor_name;
            DAST._IType _1197___mcc_h149 = _source80.dtor_typ;
            DAST._IExpression _1198___mcc_h150 = _source80.dtor_value;
            DAST._IExpression _1199___mcc_h151 = _source80.dtor_iifeBody;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_Apply) {
            DAST._IExpression _1200___mcc_h156 = _source80.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1201___mcc_h157 = _source80.dtor_args;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_TypeTest) {
            DAST._IExpression _1202___mcc_h160 = _source80.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1203___mcc_h161 = _source80.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1204___mcc_h162 = _source80.dtor_variant;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_InitializationValue) {
            DAST._IType _1205___mcc_h166 = _source80.dtor_typ;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_BoolBoundedPool) {
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_SetBoundedPool) {
            DAST._IExpression _1206___mcc_h168 = _source80.dtor_of;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source80.is_SeqBoundedPool) {
            DAST._IExpression _1207___mcc_h170 = _source80.dtor_of;
            bool _1208___mcc_h171 = _source80.dtor_includeDuplicates;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1209___mcc_h174 = _source80.dtor_lo;
            DAST._IExpression _1210___mcc_h175 = _source80.dtor_hi;
            {
              _1131_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1131_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1211_receiver;
          _1211_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source81 = _1117_maybeOutVars;
          if (_source81.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1212___mcc_h178 = _source81.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1213_outVars = _1212___mcc_h178;
            {
              if ((new BigInteger((_1213_outVars).Count)) > (BigInteger.One)) {
                _1211_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1214_outI;
              _1214_outI = BigInteger.Zero;
              while ((_1214_outI) < (new BigInteger((_1213_outVars).Count))) {
                if ((_1214_outI).Sign == 1) {
                  _1211_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1211_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1215_outVar;
                _1215_outVar = (_1213_outVars).Select(_1214_outI);
                _1211_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1211_receiver, (_1215_outVar));
                _1214_outI = (_1214_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1213_outVars).Count)) > (BigInteger.One)) {
                _1211_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1211_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1211_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1211_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1131_enclosingString), DCOMP.__default.escapeIdent(_1120_name)), _1122_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1125_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source78.is_Return) {
        DAST._IExpression _1216___mcc_h22 = _source78.dtor_expr;
        DAST._IExpression _1217_expr = _1216___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1218_exprString;
          bool _1219___v29;
          bool _1220_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1221_recIdents;
          Dafny.ISequence<Dafny.Rune> _out173;
          bool _out174;
          bool _out175;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out176;
          DCOMP.COMP.GenExpr(_1217_expr, selfIdent, @params, true, out _out173, out _out174, out _out175, out _out176);
          _1218_exprString = _out173;
          _1219___v29 = _out174;
          _1220_recErased = _out175;
          _1221_recIdents = _out176;
          _1218_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1218_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1221_recIdents;
          if (isLast) {
            generated = _1218_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1218_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source78.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source78.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1222___mcc_h23 = _source78.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1223_toLabel = _1222___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source82 = _1223_toLabel;
          if (_source82.is_Some) {
            Dafny.ISequence<Dafny.Rune> _1224___mcc_h179 = _source82.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _1225_lbl = _1224___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1225_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source78.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1226___mcc_h24 = _source78.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1227_body = _1226___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1228_paramI;
          _1228_paramI = BigInteger.Zero;
          while ((_1228_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1229_param;
            _1229_param = (@params).Select(_1228_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1229_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1229_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1228_paramI = (_1228_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1230_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1231_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out177;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out178;
          DCOMP.COMP.GenStmts(_1227_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out177, out _out178);
          _1230_bodyString = _out177;
          _1231_bodyIdents = _out178;
          readIdents = _1231_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1230_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source78.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source78.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1232___mcc_h25 = _source78.dtor_Print_a0;
        DAST._IExpression _1233_e = _1232___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1234_printedExpr;
          bool _1235_isOwned;
          bool _1236___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1237_recIdents;
          Dafny.ISequence<Dafny.Rune> _out179;
          bool _out180;
          bool _out181;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out182;
          DCOMP.COMP.GenExpr(_1233_e, selfIdent, @params, false, out _out179, out _out180, out _out181, out _out182);
          _1234_printedExpr = _out179;
          _1235_isOwned = _out180;
          _1236___v30 = _out181;
          _1237_recIdents = _out182;
          if (_1235_isOwned) {
            _1234_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1234_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1234_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1237_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source83 = e;
      if (_source83.is_Literal) {
        DAST._ILiteral _1238___mcc_h0 = _source83.dtor_Literal_a0;
        DAST._ILiteral _source84 = _1238___mcc_h0;
        if (_source84.is_BoolLiteral) {
          bool _1239___mcc_h1 = _source84.dtor_BoolLiteral_a0;
          if ((_1239___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source84.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1240___mcc_h2 = _source84.dtor_IntLiteral_a0;
          DAST._IType _1241___mcc_h3 = _source84.dtor_IntLiteral_a1;
          DAST._IType _1242_t = _1241___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1243_i = _1240___mcc_h2;
          {
            DAST._IType _source85 = _1242_t;
            if (_source85.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1244___mcc_h237 = _source85.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1245___mcc_h238 = _source85.dtor_typeArgs;
              DAST._IResolvedType _1246___mcc_h239 = _source85.dtor_resolved;
              DAST._IType _1247_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1248_genType;
                Dafny.ISequence<Dafny.Rune> _out183;
                _out183 = DCOMP.COMP.GenType(_1247_o, false, false);
                _1248_genType = _out183;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1248_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source85.is_Nullable) {
              DAST._IType _1249___mcc_h243 = _source85.dtor_Nullable_a0;
              DAST._IType _1250_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1251_genType;
                Dafny.ISequence<Dafny.Rune> _out184;
                _out184 = DCOMP.COMP.GenType(_1250_o, false, false);
                _1251_genType = _out184;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1251_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source85.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1252___mcc_h245 = _source85.dtor_Tuple_a0;
              DAST._IType _1253_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1254_genType;
                Dafny.ISequence<Dafny.Rune> _out185;
                _out185 = DCOMP.COMP.GenType(_1253_o, false, false);
                _1254_genType = _out185;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1254_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source85.is_Array) {
              DAST._IType _1255___mcc_h247 = _source85.dtor_element;
              BigInteger _1256___mcc_h248 = _source85.dtor_dims;
              DAST._IType _1257_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1258_genType;
                Dafny.ISequence<Dafny.Rune> _out186;
                _out186 = DCOMP.COMP.GenType(_1257_o, false, false);
                _1258_genType = _out186;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1258_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source85.is_Seq) {
              DAST._IType _1259___mcc_h251 = _source85.dtor_element;
              DAST._IType _1260_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1261_genType;
                Dafny.ISequence<Dafny.Rune> _out187;
                _out187 = DCOMP.COMP.GenType(_1260_o, false, false);
                _1261_genType = _out187;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1261_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source85.is_Set) {
              DAST._IType _1262___mcc_h253 = _source85.dtor_element;
              DAST._IType _1263_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1264_genType;
                Dafny.ISequence<Dafny.Rune> _out188;
                _out188 = DCOMP.COMP.GenType(_1263_o, false, false);
                _1264_genType = _out188;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1264_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source85.is_Multiset) {
              DAST._IType _1265___mcc_h255 = _source85.dtor_element;
              DAST._IType _1266_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1267_genType;
                Dafny.ISequence<Dafny.Rune> _out189;
                _out189 = DCOMP.COMP.GenType(_1266_o, false, false);
                _1267_genType = _out189;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1267_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source85.is_Map) {
              DAST._IType _1268___mcc_h257 = _source85.dtor_key;
              DAST._IType _1269___mcc_h258 = _source85.dtor_value;
              DAST._IType _1270_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1271_genType;
                Dafny.ISequence<Dafny.Rune> _out190;
                _out190 = DCOMP.COMP.GenType(_1270_o, false, false);
                _1271_genType = _out190;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1271_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source85.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1272___mcc_h261 = _source85.dtor_args;
              DAST._IType _1273___mcc_h262 = _source85.dtor_result;
              DAST._IType _1274_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1275_genType;
                Dafny.ISequence<Dafny.Rune> _out191;
                _out191 = DCOMP.COMP.GenType(_1274_o, false, false);
                _1275_genType = _out191;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1275_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source85.is_Primitive) {
              DAST._IPrimitive _1276___mcc_h265 = _source85.dtor_Primitive_a0;
              DAST._IPrimitive _source86 = _1276___mcc_h265;
              if (_source86.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source86.is_Real) {
                DAST._IType _1277_o = _1242_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1278_genType;
                  Dafny.ISequence<Dafny.Rune> _out192;
                  _out192 = DCOMP.COMP.GenType(_1277_o, false, false);
                  _1278_genType = _out192;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1278_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source86.is_String) {
                DAST._IType _1279_o = _1242_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1280_genType;
                  Dafny.ISequence<Dafny.Rune> _out193;
                  _out193 = DCOMP.COMP.GenType(_1279_o, false, false);
                  _1280_genType = _out193;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1280_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source86.is_Bool) {
                DAST._IType _1281_o = _1242_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1282_genType;
                  Dafny.ISequence<Dafny.Rune> _out194;
                  _out194 = DCOMP.COMP.GenType(_1281_o, false, false);
                  _1282_genType = _out194;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1282_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1283_o = _1242_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1284_genType;
                  Dafny.ISequence<Dafny.Rune> _out195;
                  _out195 = DCOMP.COMP.GenType(_1283_o, false, false);
                  _1284_genType = _out195;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1284_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source85.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1285___mcc_h267 = _source85.dtor_Passthrough_a0;
              DAST._IType _1286_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1287_genType;
                Dafny.ISequence<Dafny.Rune> _out196;
                _out196 = DCOMP.COMP.GenType(_1286_o, false, false);
                _1287_genType = _out196;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1287_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1288___mcc_h269 = _source85.dtor_TypeArg_a0;
              DAST._IType _1289_o = _1242_t;
              {
                Dafny.ISequence<Dafny.Rune> _1290_genType;
                Dafny.ISequence<Dafny.Rune> _out197;
                _out197 = DCOMP.COMP.GenType(_1289_o, false, false);
                _1290_genType = _out197;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1290_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source84.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1291___mcc_h4 = _source84.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1292___mcc_h5 = _source84.dtor_DecLiteral_a1;
          DAST._IType _1293___mcc_h6 = _source84.dtor_DecLiteral_a2;
          DAST._IType _1294_t = _1293___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1295_d = _1292___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1296_n = _1291___mcc_h4;
          {
            DAST._IType _source87 = _1294_t;
            if (_source87.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1297___mcc_h271 = _source87.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1298___mcc_h272 = _source87.dtor_typeArgs;
              DAST._IResolvedType _1299___mcc_h273 = _source87.dtor_resolved;
              DAST._IType _1300_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1301_genType;
                Dafny.ISequence<Dafny.Rune> _out198;
                _out198 = DCOMP.COMP.GenType(_1300_o, false, false);
                _1301_genType = _out198;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1301_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source87.is_Nullable) {
              DAST._IType _1302___mcc_h277 = _source87.dtor_Nullable_a0;
              DAST._IType _1303_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1304_genType;
                Dafny.ISequence<Dafny.Rune> _out199;
                _out199 = DCOMP.COMP.GenType(_1303_o, false, false);
                _1304_genType = _out199;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1304_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source87.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1305___mcc_h279 = _source87.dtor_Tuple_a0;
              DAST._IType _1306_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1307_genType;
                Dafny.ISequence<Dafny.Rune> _out200;
                _out200 = DCOMP.COMP.GenType(_1306_o, false, false);
                _1307_genType = _out200;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1307_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source87.is_Array) {
              DAST._IType _1308___mcc_h281 = _source87.dtor_element;
              BigInteger _1309___mcc_h282 = _source87.dtor_dims;
              DAST._IType _1310_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1311_genType;
                Dafny.ISequence<Dafny.Rune> _out201;
                _out201 = DCOMP.COMP.GenType(_1310_o, false, false);
                _1311_genType = _out201;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1311_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source87.is_Seq) {
              DAST._IType _1312___mcc_h285 = _source87.dtor_element;
              DAST._IType _1313_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1314_genType;
                Dafny.ISequence<Dafny.Rune> _out202;
                _out202 = DCOMP.COMP.GenType(_1313_o, false, false);
                _1314_genType = _out202;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1314_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source87.is_Set) {
              DAST._IType _1315___mcc_h287 = _source87.dtor_element;
              DAST._IType _1316_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1317_genType;
                Dafny.ISequence<Dafny.Rune> _out203;
                _out203 = DCOMP.COMP.GenType(_1316_o, false, false);
                _1317_genType = _out203;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1317_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source87.is_Multiset) {
              DAST._IType _1318___mcc_h289 = _source87.dtor_element;
              DAST._IType _1319_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1320_genType;
                Dafny.ISequence<Dafny.Rune> _out204;
                _out204 = DCOMP.COMP.GenType(_1319_o, false, false);
                _1320_genType = _out204;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1320_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source87.is_Map) {
              DAST._IType _1321___mcc_h291 = _source87.dtor_key;
              DAST._IType _1322___mcc_h292 = _source87.dtor_value;
              DAST._IType _1323_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1324_genType;
                Dafny.ISequence<Dafny.Rune> _out205;
                _out205 = DCOMP.COMP.GenType(_1323_o, false, false);
                _1324_genType = _out205;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1324_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source87.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1325___mcc_h295 = _source87.dtor_args;
              DAST._IType _1326___mcc_h296 = _source87.dtor_result;
              DAST._IType _1327_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1328_genType;
                Dafny.ISequence<Dafny.Rune> _out206;
                _out206 = DCOMP.COMP.GenType(_1327_o, false, false);
                _1328_genType = _out206;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1328_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source87.is_Primitive) {
              DAST._IPrimitive _1329___mcc_h299 = _source87.dtor_Primitive_a0;
              DAST._IPrimitive _source88 = _1329___mcc_h299;
              if (_source88.is_Int) {
                DAST._IType _1330_o = _1294_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1331_genType;
                  Dafny.ISequence<Dafny.Rune> _out207;
                  _out207 = DCOMP.COMP.GenType(_1330_o, false, false);
                  _1331_genType = _out207;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1331_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source88.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source88.is_String) {
                DAST._IType _1332_o = _1294_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1333_genType;
                  Dafny.ISequence<Dafny.Rune> _out208;
                  _out208 = DCOMP.COMP.GenType(_1332_o, false, false);
                  _1333_genType = _out208;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1333_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source88.is_Bool) {
                DAST._IType _1334_o = _1294_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1335_genType;
                  Dafny.ISequence<Dafny.Rune> _out209;
                  _out209 = DCOMP.COMP.GenType(_1334_o, false, false);
                  _1335_genType = _out209;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1335_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1336_o = _1294_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1337_genType;
                  Dafny.ISequence<Dafny.Rune> _out210;
                  _out210 = DCOMP.COMP.GenType(_1336_o, false, false);
                  _1337_genType = _out210;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1337_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source87.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1338___mcc_h301 = _source87.dtor_Passthrough_a0;
              DAST._IType _1339_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1340_genType;
                Dafny.ISequence<Dafny.Rune> _out211;
                _out211 = DCOMP.COMP.GenType(_1339_o, false, false);
                _1340_genType = _out211;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1340_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1341___mcc_h303 = _source87.dtor_TypeArg_a0;
              DAST._IType _1342_o = _1294_t;
              {
                Dafny.ISequence<Dafny.Rune> _1343_genType;
                Dafny.ISequence<Dafny.Rune> _out212;
                _out212 = DCOMP.COMP.GenType(_1342_o, false, false);
                _1343_genType = _out212;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1296_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1295_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1343_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source84.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1344___mcc_h7 = _source84.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1345_l = _1344___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1345_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source84.is_CharLiteral) {
          Dafny.Rune _1346___mcc_h8 = _source84.dtor_CharLiteral_a0;
          Dafny.Rune _1347_c = _1346___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_1347_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1348___mcc_h9 = _source84.dtor_Null_a0;
          DAST._IType _1349_tpe = _1348___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1350_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out213;
            _out213 = DCOMP.COMP.GenType(_1349_tpe, false, false);
            _1350_tpeGen = _out213;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1350_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source83.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1351___mcc_h10 = _source83.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1352_name = _1351___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1352_name);
          if (!((@params).Contains(_1352_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1352_name);
        }
      } else if (_source83.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1353___mcc_h11 = _source83.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1354_path = _1353___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out214;
          _out214 = DCOMP.COMP.GenPath(_1354_path);
          s = _out214;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source83.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1355___mcc_h12 = _source83.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1356_values = _1355___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1357_i;
          _1357_i = BigInteger.Zero;
          while ((_1357_i) < (new BigInteger((_1356_values).Count))) {
            if ((_1357_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1358_recursiveGen;
            bool _1359___v31;
            bool _1360_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1361_recIdents;
            Dafny.ISequence<Dafny.Rune> _out215;
            bool _out216;
            bool _out217;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out218;
            DCOMP.COMP.GenExpr((_1356_values).Select(_1357_i), selfIdent, @params, true, out _out215, out _out216, out _out217, out _out218);
            _1358_recursiveGen = _out215;
            _1359___v31 = _out216;
            _1360_isErased = _out217;
            _1361_recIdents = _out218;
            if (_1360_isErased) {
              _1358_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1361_recIdents);
            _1357_i = (_1357_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source83.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1362___mcc_h13 = _source83.dtor_path;
        Dafny.ISequence<DAST._IType> _1363___mcc_h14 = _source83.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1364___mcc_h15 = _source83.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1365_args = _1364___mcc_h15;
        Dafny.ISequence<DAST._IType> _1366_typeArgs = _1363___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1367_path = _1362___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1368_path;
          Dafny.ISequence<Dafny.Rune> _out219;
          _out219 = DCOMP.COMP.GenPath(_1367_path);
          _1368_path = _out219;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1368_path);
          if ((new BigInteger((_1366_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1369_i;
            _1369_i = BigInteger.Zero;
            while ((_1369_i) < (new BigInteger((_1366_typeArgs).Count))) {
              if ((_1369_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1370_typeString;
              Dafny.ISequence<Dafny.Rune> _out220;
              _out220 = DCOMP.COMP.GenType((_1366_typeArgs).Select(_1369_i), false, false);
              _1370_typeString = _out220;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1370_typeString);
              _1369_i = (_1369_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1371_i;
          _1371_i = BigInteger.Zero;
          while ((_1371_i) < (new BigInteger((_1365_args).Count))) {
            if ((_1371_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1372_recursiveGen;
            bool _1373___v32;
            bool _1374_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1375_recIdents;
            Dafny.ISequence<Dafny.Rune> _out221;
            bool _out222;
            bool _out223;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out224;
            DCOMP.COMP.GenExpr((_1365_args).Select(_1371_i), selfIdent, @params, true, out _out221, out _out222, out _out223, out _out224);
            _1372_recursiveGen = _out221;
            _1373___v32 = _out222;
            _1374_isErased = _out223;
            _1375_recIdents = _out224;
            if (_1374_isErased) {
              _1372_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1372_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1372_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1375_recIdents);
            _1371_i = (_1371_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source83.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1376___mcc_h16 = _source83.dtor_dims;
        DAST._IType _1377___mcc_h17 = _source83.dtor_typ;
        DAST._IType _1378_typ = _1377___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1379_dims = _1376___mcc_h16;
        {
          BigInteger _1380_i;
          _1380_i = (new BigInteger((_1379_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1381_genTyp;
          Dafny.ISequence<Dafny.Rune> _out225;
          _out225 = DCOMP.COMP.GenType(_1378_typ, false, false);
          _1381_genTyp = _out225;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1381_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1380_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1382_recursiveGen;
            bool _1383___v33;
            bool _1384_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1385_recIdents;
            Dafny.ISequence<Dafny.Rune> _out226;
            bool _out227;
            bool _out228;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out229;
            DCOMP.COMP.GenExpr((_1379_dims).Select(_1380_i), selfIdent, @params, true, out _out226, out _out227, out _out228, out _out229);
            _1382_recursiveGen = _out226;
            _1383___v33 = _out227;
            _1384_isErased = _out228;
            _1385_recIdents = _out229;
            if (!(_1384_isErased)) {
              _1382_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1382_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1382_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1385_recIdents);
            _1380_i = (_1380_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source83.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1386___mcc_h18 = _source83.dtor_path;
        Dafny.ISequence<DAST._IType> _1387___mcc_h19 = _source83.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1388___mcc_h20 = _source83.dtor_variant;
        bool _1389___mcc_h21 = _source83.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1390___mcc_h22 = _source83.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1391_values = _1390___mcc_h22;
        bool _1392_isCo = _1389___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1393_variant = _1388___mcc_h20;
        Dafny.ISequence<DAST._IType> _1394_typeArgs = _1387___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1395_path = _1386___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1396_path;
          Dafny.ISequence<Dafny.Rune> _out230;
          _out230 = DCOMP.COMP.GenPath(_1395_path);
          _1396_path = _out230;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1396_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1394_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1397_i;
            _1397_i = BigInteger.Zero;
            while ((_1397_i) < (new BigInteger((_1394_typeArgs).Count))) {
              if ((_1397_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1398_typeString;
              Dafny.ISequence<Dafny.Rune> _out231;
              _out231 = DCOMP.COMP.GenType((_1394_typeArgs).Select(_1397_i), false, false);
              _1398_typeString = _out231;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1398_typeString);
              _1397_i = (_1397_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1393_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1399_i;
          _1399_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1399_i) < (new BigInteger((_1391_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs7 = (_1391_values).Select(_1399_i);
            Dafny.ISequence<Dafny.Rune> _1400_name = _let_tmp_rhs7.dtor__0;
            DAST._IExpression _1401_value = _let_tmp_rhs7.dtor__1;
            if ((_1399_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1392_isCo) {
              Dafny.ISequence<Dafny.Rune> _1402_recursiveGen;
              bool _1403___v34;
              bool _1404_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1405_recIdents;
              Dafny.ISequence<Dafny.Rune> _out232;
              bool _out233;
              bool _out234;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
              DCOMP.COMP.GenExpr(_1401_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out232, out _out233, out _out234, out _out235);
              _1402_recursiveGen = _out232;
              _1403___v34 = _out233;
              _1404_isErased = _out234;
              _1405_recIdents = _out235;
              if (!(_1404_isErased)) {
                _1402_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1402_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1402_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1402_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1405_recIdents);
              Dafny.ISequence<Dafny.Rune> _1406_allReadCloned;
              _1406_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1405_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1407_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_1405_recIdents).Elements) {
                  _1407_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_1405_recIdents).Contains(_1407_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _1406_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1406_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1407_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1407_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1405_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1405_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1407_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1400_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1406_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1402_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1408_recursiveGen;
              bool _1409___v35;
              bool _1410_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1411_recIdents;
              Dafny.ISequence<Dafny.Rune> _out236;
              bool _out237;
              bool _out238;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out239;
              DCOMP.COMP.GenExpr(_1401_value, selfIdent, @params, true, out _out236, out _out237, out _out238, out _out239);
              _1408_recursiveGen = _out236;
              _1409___v35 = _out237;
              _1410_isErased = _out238;
              _1411_recIdents = _out239;
              if (!(_1410_isErased)) {
                _1408_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1408_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1408_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1408_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1400_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1408_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1411_recIdents);
            }
            _1399_i = (_1399_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source83.is_Convert) {
        DAST._IExpression _1412___mcc_h23 = _source83.dtor_value;
        DAST._IType _1413___mcc_h24 = _source83.dtor_from;
        DAST._IType _1414___mcc_h25 = _source83.dtor_typ;
        DAST._IType _1415_toTpe = _1414___mcc_h25;
        DAST._IType _1416_fromTpe = _1413___mcc_h24;
        DAST._IExpression _1417_expr = _1412___mcc_h23;
        {
          if (object.Equals(_1416_fromTpe, _1415_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1418_recursiveGen;
            bool _1419_recOwned;
            bool _1420_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1421_recIdents;
            Dafny.ISequence<Dafny.Rune> _out240;
            bool _out241;
            bool _out242;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out243;
            DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out240, out _out241, out _out242, out _out243);
            _1418_recursiveGen = _out240;
            _1419_recOwned = _out241;
            _1420_recErased = _out242;
            _1421_recIdents = _out243;
            s = _1418_recursiveGen;
            isOwned = _1419_recOwned;
            isErased = _1420_recErased;
            readIdents = _1421_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source89 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1416_fromTpe, _1415_toTpe);
            DAST._IType _1422___mcc_h305 = _source89.dtor__0;
            DAST._IType _1423___mcc_h306 = _source89.dtor__1;
            DAST._IType _source90 = _1422___mcc_h305;
            if (_source90.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1424___mcc_h309 = _source90.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1425___mcc_h310 = _source90.dtor_typeArgs;
              DAST._IResolvedType _1426___mcc_h311 = _source90.dtor_resolved;
              DAST._IResolvedType _source91 = _1426___mcc_h311;
              if (_source91.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1427___mcc_h321 = _source91.dtor_path;
                DAST._IType _source92 = _1423___mcc_h306;
                if (_source92.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1428___mcc_h325 = _source92.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1429___mcc_h326 = _source92.dtor_typeArgs;
                  DAST._IResolvedType _1430___mcc_h327 = _source92.dtor_resolved;
                  DAST._IResolvedType _source93 = _1430___mcc_h327;
                  if (_source93.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1431___mcc_h331 = _source93.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1432_recursiveGen;
                      bool _1433_recOwned;
                      bool _1434_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1435_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out244;
                      bool _out245;
                      bool _out246;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out244, out _out245, out _out246, out _out247);
                      _1432_recursiveGen = _out244;
                      _1433_recOwned = _out245;
                      _1434_recErased = _out246;
                      _1435_recIdents = _out247;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1432_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1433_recOwned;
                      isErased = _1434_recErased;
                      readIdents = _1435_recIdents;
                    }
                  } else if (_source93.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1436___mcc_h333 = _source93.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1437_recursiveGen;
                      bool _1438_recOwned;
                      bool _1439_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1440_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out248;
                      bool _out249;
                      bool _out250;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out248, out _out249, out _out250, out _out251);
                      _1437_recursiveGen = _out248;
                      _1438_recOwned = _out249;
                      _1439_recErased = _out250;
                      _1440_recIdents = _out251;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1437_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1438_recOwned;
                      isErased = _1439_recErased;
                      readIdents = _1440_recIdents;
                    }
                  } else {
                    DAST._IType _1441___mcc_h335 = _source93.dtor_Newtype_a0;
                    DAST._IType _1442_b = _1441___mcc_h335;
                    {
                      if (object.Equals(_1416_fromTpe, _1442_b)) {
                        Dafny.ISequence<Dafny.Rune> _1443_recursiveGen;
                        bool _1444_recOwned;
                        bool _1445_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1446_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out252;
                        bool _out253;
                        bool _out254;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out252, out _out253, out _out254, out _out255);
                        _1443_recursiveGen = _out252;
                        _1444_recOwned = _out253;
                        _1445_recErased = _out254;
                        _1446_recIdents = _out255;
                        Dafny.ISequence<Dafny.Rune> _1447_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out256;
                        _out256 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                        _1447_rhsType = _out256;
                        Dafny.ISequence<Dafny.Rune> _1448_uneraseFn;
                        _1448_uneraseFn = ((_1444_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1447_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1448_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1443_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1444_recOwned;
                        isErased = false;
                        readIdents = _1446_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out257;
                        bool _out258;
                        bool _out259;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1442_b), _1442_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out257, out _out258, out _out259, out _out260);
                        s = _out257;
                        isOwned = _out258;
                        isErased = _out259;
                        readIdents = _out260;
                      }
                    }
                  }
                } else if (_source92.is_Nullable) {
                  DAST._IType _1449___mcc_h337 = _source92.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1450_recursiveGen;
                    bool _1451_recOwned;
                    bool _1452_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1453_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out261;
                    bool _out262;
                    bool _out263;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out264;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out261, out _out262, out _out263, out _out264);
                    _1450_recursiveGen = _out261;
                    _1451_recOwned = _out262;
                    _1452_recErased = _out263;
                    _1453_recIdents = _out264;
                    if (!(_1451_recOwned)) {
                      _1450_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1450_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1450_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1452_recErased;
                    readIdents = _1453_recIdents;
                  }
                } else if (_source92.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1454___mcc_h339 = _source92.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1455_recursiveGen;
                    bool _1456_recOwned;
                    bool _1457_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1458_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out265;
                    bool _out266;
                    bool _out267;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out268;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out265, out _out266, out _out267, out _out268);
                    _1455_recursiveGen = _out265;
                    _1456_recOwned = _out266;
                    _1457_recErased = _out267;
                    _1458_recIdents = _out268;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1455_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1456_recOwned;
                    isErased = _1457_recErased;
                    readIdents = _1458_recIdents;
                  }
                } else if (_source92.is_Array) {
                  DAST._IType _1459___mcc_h341 = _source92.dtor_element;
                  BigInteger _1460___mcc_h342 = _source92.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1461_recursiveGen;
                    bool _1462_recOwned;
                    bool _1463_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1464_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out269;
                    bool _out270;
                    bool _out271;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out272;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out269, out _out270, out _out271, out _out272);
                    _1461_recursiveGen = _out269;
                    _1462_recOwned = _out270;
                    _1463_recErased = _out271;
                    _1464_recIdents = _out272;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1461_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1462_recOwned;
                    isErased = _1463_recErased;
                    readIdents = _1464_recIdents;
                  }
                } else if (_source92.is_Seq) {
                  DAST._IType _1465___mcc_h345 = _source92.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1466_recursiveGen;
                    bool _1467_recOwned;
                    bool _1468_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1469_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out273;
                    bool _out274;
                    bool _out275;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out276;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out273, out _out274, out _out275, out _out276);
                    _1466_recursiveGen = _out273;
                    _1467_recOwned = _out274;
                    _1468_recErased = _out275;
                    _1469_recIdents = _out276;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1466_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1467_recOwned;
                    isErased = _1468_recErased;
                    readIdents = _1469_recIdents;
                  }
                } else if (_source92.is_Set) {
                  DAST._IType _1470___mcc_h347 = _source92.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1471_recursiveGen;
                    bool _1472_recOwned;
                    bool _1473_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1474_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out277;
                    bool _out278;
                    bool _out279;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out280;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out277, out _out278, out _out279, out _out280);
                    _1471_recursiveGen = _out277;
                    _1472_recOwned = _out278;
                    _1473_recErased = _out279;
                    _1474_recIdents = _out280;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1471_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1472_recOwned;
                    isErased = _1473_recErased;
                    readIdents = _1474_recIdents;
                  }
                } else if (_source92.is_Multiset) {
                  DAST._IType _1475___mcc_h349 = _source92.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1476_recursiveGen;
                    bool _1477_recOwned;
                    bool _1478_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1479_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out281;
                    bool _out282;
                    bool _out283;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out284;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out281, out _out282, out _out283, out _out284);
                    _1476_recursiveGen = _out281;
                    _1477_recOwned = _out282;
                    _1478_recErased = _out283;
                    _1479_recIdents = _out284;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1476_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1477_recOwned;
                    isErased = _1478_recErased;
                    readIdents = _1479_recIdents;
                  }
                } else if (_source92.is_Map) {
                  DAST._IType _1480___mcc_h351 = _source92.dtor_key;
                  DAST._IType _1481___mcc_h352 = _source92.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1482_recursiveGen;
                    bool _1483_recOwned;
                    bool _1484_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1485_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out285;
                    bool _out286;
                    bool _out287;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out288;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out285, out _out286, out _out287, out _out288);
                    _1482_recursiveGen = _out285;
                    _1483_recOwned = _out286;
                    _1484_recErased = _out287;
                    _1485_recIdents = _out288;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1482_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1483_recOwned;
                    isErased = _1484_recErased;
                    readIdents = _1485_recIdents;
                  }
                } else if (_source92.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1486___mcc_h355 = _source92.dtor_args;
                  DAST._IType _1487___mcc_h356 = _source92.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1488_recursiveGen;
                    bool _1489_recOwned;
                    bool _1490_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1491_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out289;
                    bool _out290;
                    bool _out291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out292;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out289, out _out290, out _out291, out _out292);
                    _1488_recursiveGen = _out289;
                    _1489_recOwned = _out290;
                    _1490_recErased = _out291;
                    _1491_recIdents = _out292;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1488_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1489_recOwned;
                    isErased = _1490_recErased;
                    readIdents = _1491_recIdents;
                  }
                } else if (_source92.is_Primitive) {
                  DAST._IPrimitive _1492___mcc_h359 = _source92.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1493_recursiveGen;
                    bool _1494_recOwned;
                    bool _1495_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1496_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out293;
                    bool _out294;
                    bool _out295;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out296;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out293, out _out294, out _out295, out _out296);
                    _1493_recursiveGen = _out293;
                    _1494_recOwned = _out294;
                    _1495_recErased = _out295;
                    _1496_recIdents = _out296;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1493_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1494_recOwned;
                    isErased = _1495_recErased;
                    readIdents = _1496_recIdents;
                  }
                } else if (_source92.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1497___mcc_h361 = _source92.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1498_recursiveGen;
                    bool _1499_recOwned;
                    bool _1500_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1501_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out297;
                    bool _out298;
                    bool _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out297, out _out298, out _out299, out _out300);
                    _1498_recursiveGen = _out297;
                    _1499_recOwned = _out298;
                    _1500_recErased = _out299;
                    _1501_recIdents = _out300;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1498_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1499_recOwned;
                    isErased = _1500_recErased;
                    readIdents = _1501_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1502___mcc_h363 = _source92.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1503_recursiveGen;
                    bool _1504_recOwned;
                    bool _1505_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1506_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out301;
                    bool _out302;
                    bool _out303;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out304;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out301, out _out302, out _out303, out _out304);
                    _1503_recursiveGen = _out301;
                    _1504_recOwned = _out302;
                    _1505_recErased = _out303;
                    _1506_recIdents = _out304;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1503_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1504_recOwned;
                    isErased = _1505_recErased;
                    readIdents = _1506_recIdents;
                  }
                }
              } else if (_source91.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1507___mcc_h365 = _source91.dtor_path;
                DAST._IType _source94 = _1423___mcc_h306;
                if (_source94.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1508___mcc_h369 = _source94.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1509___mcc_h370 = _source94.dtor_typeArgs;
                  DAST._IResolvedType _1510___mcc_h371 = _source94.dtor_resolved;
                  DAST._IResolvedType _source95 = _1510___mcc_h371;
                  if (_source95.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1511___mcc_h375 = _source95.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1512_recursiveGen;
                      bool _1513_recOwned;
                      bool _1514_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1515_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out305;
                      bool _out306;
                      bool _out307;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out305, out _out306, out _out307, out _out308);
                      _1512_recursiveGen = _out305;
                      _1513_recOwned = _out306;
                      _1514_recErased = _out307;
                      _1515_recIdents = _out308;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1512_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1513_recOwned;
                      isErased = _1514_recErased;
                      readIdents = _1515_recIdents;
                    }
                  } else if (_source95.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1516___mcc_h377 = _source95.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1517_recursiveGen;
                      bool _1518_recOwned;
                      bool _1519_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1520_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out309;
                      bool _out310;
                      bool _out311;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out309, out _out310, out _out311, out _out312);
                      _1517_recursiveGen = _out309;
                      _1518_recOwned = _out310;
                      _1519_recErased = _out311;
                      _1520_recIdents = _out312;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1517_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1518_recOwned;
                      isErased = _1519_recErased;
                      readIdents = _1520_recIdents;
                    }
                  } else {
                    DAST._IType _1521___mcc_h379 = _source95.dtor_Newtype_a0;
                    DAST._IType _1522_b = _1521___mcc_h379;
                    {
                      if (object.Equals(_1416_fromTpe, _1522_b)) {
                        Dafny.ISequence<Dafny.Rune> _1523_recursiveGen;
                        bool _1524_recOwned;
                        bool _1525_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1526_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out313;
                        bool _out314;
                        bool _out315;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out313, out _out314, out _out315, out _out316);
                        _1523_recursiveGen = _out313;
                        _1524_recOwned = _out314;
                        _1525_recErased = _out315;
                        _1526_recIdents = _out316;
                        Dafny.ISequence<Dafny.Rune> _1527_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out317;
                        _out317 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                        _1527_rhsType = _out317;
                        Dafny.ISequence<Dafny.Rune> _1528_uneraseFn;
                        _1528_uneraseFn = ((_1524_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1527_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1528_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1523_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1524_recOwned;
                        isErased = false;
                        readIdents = _1526_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out318;
                        bool _out319;
                        bool _out320;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out321;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1522_b), _1522_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out318, out _out319, out _out320, out _out321);
                        s = _out318;
                        isOwned = _out319;
                        isErased = _out320;
                        readIdents = _out321;
                      }
                    }
                  }
                } else if (_source94.is_Nullable) {
                  DAST._IType _1529___mcc_h381 = _source94.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1530_recursiveGen;
                    bool _1531_recOwned;
                    bool _1532_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1533_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out322;
                    bool _out323;
                    bool _out324;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out325;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out322, out _out323, out _out324, out _out325);
                    _1530_recursiveGen = _out322;
                    _1531_recOwned = _out323;
                    _1532_recErased = _out324;
                    _1533_recIdents = _out325;
                    if (!(_1531_recOwned)) {
                      _1530_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1530_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1530_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1532_recErased;
                    readIdents = _1533_recIdents;
                  }
                } else if (_source94.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1534___mcc_h383 = _source94.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1535_recursiveGen;
                    bool _1536_recOwned;
                    bool _1537_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1538_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out326;
                    bool _out327;
                    bool _out328;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out329;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out326, out _out327, out _out328, out _out329);
                    _1535_recursiveGen = _out326;
                    _1536_recOwned = _out327;
                    _1537_recErased = _out328;
                    _1538_recIdents = _out329;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1535_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1536_recOwned;
                    isErased = _1537_recErased;
                    readIdents = _1538_recIdents;
                  }
                } else if (_source94.is_Array) {
                  DAST._IType _1539___mcc_h385 = _source94.dtor_element;
                  BigInteger _1540___mcc_h386 = _source94.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1541_recursiveGen;
                    bool _1542_recOwned;
                    bool _1543_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1544_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out330;
                    bool _out331;
                    bool _out332;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out333;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out330, out _out331, out _out332, out _out333);
                    _1541_recursiveGen = _out330;
                    _1542_recOwned = _out331;
                    _1543_recErased = _out332;
                    _1544_recIdents = _out333;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1541_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1542_recOwned;
                    isErased = _1543_recErased;
                    readIdents = _1544_recIdents;
                  }
                } else if (_source94.is_Seq) {
                  DAST._IType _1545___mcc_h389 = _source94.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1546_recursiveGen;
                    bool _1547_recOwned;
                    bool _1548_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1549_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out334;
                    bool _out335;
                    bool _out336;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out337;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out334, out _out335, out _out336, out _out337);
                    _1546_recursiveGen = _out334;
                    _1547_recOwned = _out335;
                    _1548_recErased = _out336;
                    _1549_recIdents = _out337;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1546_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1547_recOwned;
                    isErased = _1548_recErased;
                    readIdents = _1549_recIdents;
                  }
                } else if (_source94.is_Set) {
                  DAST._IType _1550___mcc_h391 = _source94.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1551_recursiveGen;
                    bool _1552_recOwned;
                    bool _1553_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1554_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out338;
                    bool _out339;
                    bool _out340;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out338, out _out339, out _out340, out _out341);
                    _1551_recursiveGen = _out338;
                    _1552_recOwned = _out339;
                    _1553_recErased = _out340;
                    _1554_recIdents = _out341;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1551_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1552_recOwned;
                    isErased = _1553_recErased;
                    readIdents = _1554_recIdents;
                  }
                } else if (_source94.is_Multiset) {
                  DAST._IType _1555___mcc_h393 = _source94.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1556_recursiveGen;
                    bool _1557_recOwned;
                    bool _1558_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1559_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out342;
                    bool _out343;
                    bool _out344;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out345;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out342, out _out343, out _out344, out _out345);
                    _1556_recursiveGen = _out342;
                    _1557_recOwned = _out343;
                    _1558_recErased = _out344;
                    _1559_recIdents = _out345;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1556_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1557_recOwned;
                    isErased = _1558_recErased;
                    readIdents = _1559_recIdents;
                  }
                } else if (_source94.is_Map) {
                  DAST._IType _1560___mcc_h395 = _source94.dtor_key;
                  DAST._IType _1561___mcc_h396 = _source94.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1562_recursiveGen;
                    bool _1563_recOwned;
                    bool _1564_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1565_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out346;
                    bool _out347;
                    bool _out348;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out349;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out346, out _out347, out _out348, out _out349);
                    _1562_recursiveGen = _out346;
                    _1563_recOwned = _out347;
                    _1564_recErased = _out348;
                    _1565_recIdents = _out349;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1562_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1563_recOwned;
                    isErased = _1564_recErased;
                    readIdents = _1565_recIdents;
                  }
                } else if (_source94.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1566___mcc_h399 = _source94.dtor_args;
                  DAST._IType _1567___mcc_h400 = _source94.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1568_recursiveGen;
                    bool _1569_recOwned;
                    bool _1570_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1571_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out350;
                    bool _out351;
                    bool _out352;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out353;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out350, out _out351, out _out352, out _out353);
                    _1568_recursiveGen = _out350;
                    _1569_recOwned = _out351;
                    _1570_recErased = _out352;
                    _1571_recIdents = _out353;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1568_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1569_recOwned;
                    isErased = _1570_recErased;
                    readIdents = _1571_recIdents;
                  }
                } else if (_source94.is_Primitive) {
                  DAST._IPrimitive _1572___mcc_h403 = _source94.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1573_recursiveGen;
                    bool _1574_recOwned;
                    bool _1575_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1576_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out354;
                    bool _out355;
                    bool _out356;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out357;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out354, out _out355, out _out356, out _out357);
                    _1573_recursiveGen = _out354;
                    _1574_recOwned = _out355;
                    _1575_recErased = _out356;
                    _1576_recIdents = _out357;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1573_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1574_recOwned;
                    isErased = _1575_recErased;
                    readIdents = _1576_recIdents;
                  }
                } else if (_source94.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1577___mcc_h405 = _source94.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1578_recursiveGen;
                    bool _1579_recOwned;
                    bool _1580_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1581_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out358;
                    bool _out359;
                    bool _out360;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out358, out _out359, out _out360, out _out361);
                    _1578_recursiveGen = _out358;
                    _1579_recOwned = _out359;
                    _1580_recErased = _out360;
                    _1581_recIdents = _out361;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1578_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1579_recOwned;
                    isErased = _1580_recErased;
                    readIdents = _1581_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1582___mcc_h407 = _source94.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1583_recursiveGen;
                    bool _1584_recOwned;
                    bool _1585_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1586_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out362;
                    bool _out363;
                    bool _out364;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out365;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out362, out _out363, out _out364, out _out365);
                    _1583_recursiveGen = _out362;
                    _1584_recOwned = _out363;
                    _1585_recErased = _out364;
                    _1586_recIdents = _out365;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1583_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1584_recOwned;
                    isErased = _1585_recErased;
                    readIdents = _1586_recIdents;
                  }
                }
              } else {
                DAST._IType _1587___mcc_h409 = _source91.dtor_Newtype_a0;
                DAST._IType _source96 = _1423___mcc_h306;
                if (_source96.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1588___mcc_h413 = _source96.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1589___mcc_h414 = _source96.dtor_typeArgs;
                  DAST._IResolvedType _1590___mcc_h415 = _source96.dtor_resolved;
                  DAST._IResolvedType _source97 = _1590___mcc_h415;
                  if (_source97.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1591___mcc_h422 = _source97.dtor_path;
                    DAST._IType _1592_b = _1587___mcc_h409;
                    {
                      if (object.Equals(_1592_b, _1415_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1593_recursiveGen;
                        bool _1594_recOwned;
                        bool _1595_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1596_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out366;
                        bool _out367;
                        bool _out368;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out369;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out366, out _out367, out _out368, out _out369);
                        _1593_recursiveGen = _out366;
                        _1594_recOwned = _out367;
                        _1595_recErased = _out368;
                        _1596_recIdents = _out369;
                        Dafny.ISequence<Dafny.Rune> _1597_uneraseFn;
                        _1597_uneraseFn = ((_1594_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1597_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1593_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1594_recOwned;
                        isErased = true;
                        readIdents = _1596_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out370;
                        bool _out371;
                        bool _out372;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1592_b), _1592_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out370, out _out371, out _out372, out _out373);
                        s = _out370;
                        isOwned = _out371;
                        isErased = _out372;
                        readIdents = _out373;
                      }
                    }
                  } else if (_source97.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1598___mcc_h425 = _source97.dtor_path;
                    DAST._IType _1599_b = _1587___mcc_h409;
                    {
                      if (object.Equals(_1599_b, _1415_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1600_recursiveGen;
                        bool _1601_recOwned;
                        bool _1602_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1603_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out374;
                        bool _out375;
                        bool _out376;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out377;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out374, out _out375, out _out376, out _out377);
                        _1600_recursiveGen = _out374;
                        _1601_recOwned = _out375;
                        _1602_recErased = _out376;
                        _1603_recIdents = _out377;
                        Dafny.ISequence<Dafny.Rune> _1604_uneraseFn;
                        _1604_uneraseFn = ((_1601_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1604_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1601_recOwned;
                        isErased = true;
                        readIdents = _1603_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out378;
                        bool _out379;
                        bool _out380;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1599_b), _1599_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out378, out _out379, out _out380, out _out381);
                        s = _out378;
                        isOwned = _out379;
                        isErased = _out380;
                        readIdents = _out381;
                      }
                    }
                  } else {
                    DAST._IType _1605___mcc_h428 = _source97.dtor_Newtype_a0;
                    DAST._IType _1606_b = _1605___mcc_h428;
                    {
                      if (object.Equals(_1416_fromTpe, _1606_b)) {
                        Dafny.ISequence<Dafny.Rune> _1607_recursiveGen;
                        bool _1608_recOwned;
                        bool _1609_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1610_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out382;
                        bool _out383;
                        bool _out384;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out382, out _out383, out _out384, out _out385);
                        _1607_recursiveGen = _out382;
                        _1608_recOwned = _out383;
                        _1609_recErased = _out384;
                        _1610_recIdents = _out385;
                        Dafny.ISequence<Dafny.Rune> _1611_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out386;
                        _out386 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                        _1611_rhsType = _out386;
                        Dafny.ISequence<Dafny.Rune> _1612_uneraseFn;
                        _1612_uneraseFn = ((_1608_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1611_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1612_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1607_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1608_recOwned;
                        isErased = false;
                        readIdents = _1610_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out387;
                        bool _out388;
                        bool _out389;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out390;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1606_b), _1606_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out387, out _out388, out _out389, out _out390);
                        s = _out387;
                        isOwned = _out388;
                        isErased = _out389;
                        readIdents = _out390;
                      }
                    }
                  }
                } else if (_source96.is_Nullable) {
                  DAST._IType _1613___mcc_h431 = _source96.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1614_recursiveGen;
                    bool _1615_recOwned;
                    bool _1616_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1617_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out391;
                    bool _out392;
                    bool _out393;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out394;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out391, out _out392, out _out393, out _out394);
                    _1614_recursiveGen = _out391;
                    _1615_recOwned = _out392;
                    _1616_recErased = _out393;
                    _1617_recIdents = _out394;
                    if (!(_1615_recOwned)) {
                      _1614_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1614_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1614_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1616_recErased;
                    readIdents = _1617_recIdents;
                  }
                } else if (_source96.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1618___mcc_h434 = _source96.dtor_Tuple_a0;
                  DAST._IType _1619_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1619_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1620_recursiveGen;
                      bool _1621_recOwned;
                      bool _1622_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1623_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out395;
                      bool _out396;
                      bool _out397;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out398;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out395, out _out396, out _out397, out _out398);
                      _1620_recursiveGen = _out395;
                      _1621_recOwned = _out396;
                      _1622_recErased = _out397;
                      _1623_recIdents = _out398;
                      Dafny.ISequence<Dafny.Rune> _1624_uneraseFn;
                      _1624_uneraseFn = ((_1621_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1624_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1620_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1621_recOwned;
                      isErased = true;
                      readIdents = _1623_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out399;
                      bool _out400;
                      bool _out401;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out402;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1619_b), _1619_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out399, out _out400, out _out401, out _out402);
                      s = _out399;
                      isOwned = _out400;
                      isErased = _out401;
                      readIdents = _out402;
                    }
                  }
                } else if (_source96.is_Array) {
                  DAST._IType _1625___mcc_h437 = _source96.dtor_element;
                  BigInteger _1626___mcc_h438 = _source96.dtor_dims;
                  DAST._IType _1627_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1627_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1628_recursiveGen;
                      bool _1629_recOwned;
                      bool _1630_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1631_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out403;
                      bool _out404;
                      bool _out405;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out406;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out403, out _out404, out _out405, out _out406);
                      _1628_recursiveGen = _out403;
                      _1629_recOwned = _out404;
                      _1630_recErased = _out405;
                      _1631_recIdents = _out406;
                      Dafny.ISequence<Dafny.Rune> _1632_uneraseFn;
                      _1632_uneraseFn = ((_1629_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1632_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1628_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1629_recOwned;
                      isErased = true;
                      readIdents = _1631_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out407;
                      bool _out408;
                      bool _out409;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out410;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1627_b), _1627_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out407, out _out408, out _out409, out _out410);
                      s = _out407;
                      isOwned = _out408;
                      isErased = _out409;
                      readIdents = _out410;
                    }
                  }
                } else if (_source96.is_Seq) {
                  DAST._IType _1633___mcc_h443 = _source96.dtor_element;
                  DAST._IType _1634_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1634_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1635_recursiveGen;
                      bool _1636_recOwned;
                      bool _1637_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1638_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out411;
                      bool _out412;
                      bool _out413;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out414;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out411, out _out412, out _out413, out _out414);
                      _1635_recursiveGen = _out411;
                      _1636_recOwned = _out412;
                      _1637_recErased = _out413;
                      _1638_recIdents = _out414;
                      Dafny.ISequence<Dafny.Rune> _1639_uneraseFn;
                      _1639_uneraseFn = ((_1636_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1639_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1636_recOwned;
                      isErased = true;
                      readIdents = _1638_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out415;
                      bool _out416;
                      bool _out417;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out418;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1634_b), _1634_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out415, out _out416, out _out417, out _out418);
                      s = _out415;
                      isOwned = _out416;
                      isErased = _out417;
                      readIdents = _out418;
                    }
                  }
                } else if (_source96.is_Set) {
                  DAST._IType _1640___mcc_h446 = _source96.dtor_element;
                  DAST._IType _1641_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1641_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1642_recursiveGen;
                      bool _1643_recOwned;
                      bool _1644_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1645_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out419;
                      bool _out420;
                      bool _out421;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out422;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out419, out _out420, out _out421, out _out422);
                      _1642_recursiveGen = _out419;
                      _1643_recOwned = _out420;
                      _1644_recErased = _out421;
                      _1645_recIdents = _out422;
                      Dafny.ISequence<Dafny.Rune> _1646_uneraseFn;
                      _1646_uneraseFn = ((_1643_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1646_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1642_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1643_recOwned;
                      isErased = true;
                      readIdents = _1645_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out423;
                      bool _out424;
                      bool _out425;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out426;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1641_b), _1641_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out423, out _out424, out _out425, out _out426);
                      s = _out423;
                      isOwned = _out424;
                      isErased = _out425;
                      readIdents = _out426;
                    }
                  }
                } else if (_source96.is_Multiset) {
                  DAST._IType _1647___mcc_h449 = _source96.dtor_element;
                  DAST._IType _1648_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1648_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1649_recursiveGen;
                      bool _1650_recOwned;
                      bool _1651_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1652_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out427;
                      bool _out428;
                      bool _out429;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out430;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out427, out _out428, out _out429, out _out430);
                      _1649_recursiveGen = _out427;
                      _1650_recOwned = _out428;
                      _1651_recErased = _out429;
                      _1652_recIdents = _out430;
                      Dafny.ISequence<Dafny.Rune> _1653_uneraseFn;
                      _1653_uneraseFn = ((_1650_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1653_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1649_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1650_recOwned;
                      isErased = true;
                      readIdents = _1652_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out431;
                      bool _out432;
                      bool _out433;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out434;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1648_b), _1648_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out431, out _out432, out _out433, out _out434);
                      s = _out431;
                      isOwned = _out432;
                      isErased = _out433;
                      readIdents = _out434;
                    }
                  }
                } else if (_source96.is_Map) {
                  DAST._IType _1654___mcc_h452 = _source96.dtor_key;
                  DAST._IType _1655___mcc_h453 = _source96.dtor_value;
                  DAST._IType _1656_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1656_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1657_recursiveGen;
                      bool _1658_recOwned;
                      bool _1659_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1660_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out435;
                      bool _out436;
                      bool _out437;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out438;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out435, out _out436, out _out437, out _out438);
                      _1657_recursiveGen = _out435;
                      _1658_recOwned = _out436;
                      _1659_recErased = _out437;
                      _1660_recIdents = _out438;
                      Dafny.ISequence<Dafny.Rune> _1661_uneraseFn;
                      _1661_uneraseFn = ((_1658_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1661_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1657_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1658_recOwned;
                      isErased = true;
                      readIdents = _1660_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out439;
                      bool _out440;
                      bool _out441;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out442;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1656_b), _1656_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out439, out _out440, out _out441, out _out442);
                      s = _out439;
                      isOwned = _out440;
                      isErased = _out441;
                      readIdents = _out442;
                    }
                  }
                } else if (_source96.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1662___mcc_h458 = _source96.dtor_args;
                  DAST._IType _1663___mcc_h459 = _source96.dtor_result;
                  DAST._IType _1664_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1664_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1665_recursiveGen;
                      bool _1666_recOwned;
                      bool _1667_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1668_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out443;
                      bool _out444;
                      bool _out445;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out446;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out443, out _out444, out _out445, out _out446);
                      _1665_recursiveGen = _out443;
                      _1666_recOwned = _out444;
                      _1667_recErased = _out445;
                      _1668_recIdents = _out446;
                      Dafny.ISequence<Dafny.Rune> _1669_uneraseFn;
                      _1669_uneraseFn = ((_1666_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1669_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1665_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1666_recOwned;
                      isErased = true;
                      readIdents = _1668_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out447;
                      bool _out448;
                      bool _out449;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out450;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1664_b), _1664_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out447, out _out448, out _out449, out _out450);
                      s = _out447;
                      isOwned = _out448;
                      isErased = _out449;
                      readIdents = _out450;
                    }
                  }
                } else if (_source96.is_Primitive) {
                  DAST._IPrimitive _1670___mcc_h464 = _source96.dtor_Primitive_a0;
                  DAST._IType _1671_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1671_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1672_recursiveGen;
                      bool _1673_recOwned;
                      bool _1674_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1675_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out451;
                      bool _out452;
                      bool _out453;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out454;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out451, out _out452, out _out453, out _out454);
                      _1672_recursiveGen = _out451;
                      _1673_recOwned = _out452;
                      _1674_recErased = _out453;
                      _1675_recIdents = _out454;
                      Dafny.ISequence<Dafny.Rune> _1676_uneraseFn;
                      _1676_uneraseFn = ((_1673_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1676_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1672_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1673_recOwned;
                      isErased = true;
                      readIdents = _1675_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out455;
                      bool _out456;
                      bool _out457;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out458;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1671_b), _1671_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out455, out _out456, out _out457, out _out458);
                      s = _out455;
                      isOwned = _out456;
                      isErased = _out457;
                      readIdents = _out458;
                    }
                  }
                } else if (_source96.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1677___mcc_h467 = _source96.dtor_Passthrough_a0;
                  DAST._IType _1678_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1678_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1679_recursiveGen;
                      bool _1680_recOwned;
                      bool _1681_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1682_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out459;
                      bool _out460;
                      bool _out461;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out462;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out459, out _out460, out _out461, out _out462);
                      _1679_recursiveGen = _out459;
                      _1680_recOwned = _out460;
                      _1681_recErased = _out461;
                      _1682_recIdents = _out462;
                      Dafny.ISequence<Dafny.Rune> _1683_uneraseFn;
                      _1683_uneraseFn = ((_1680_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1683_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1679_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1680_recOwned;
                      isErased = true;
                      readIdents = _1682_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out463;
                      bool _out464;
                      bool _out465;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out466;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1678_b), _1678_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out463, out _out464, out _out465, out _out466);
                      s = _out463;
                      isOwned = _out464;
                      isErased = _out465;
                      readIdents = _out466;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1684___mcc_h470 = _source96.dtor_TypeArg_a0;
                  DAST._IType _1685_b = _1587___mcc_h409;
                  {
                    if (object.Equals(_1685_b, _1415_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1686_recursiveGen;
                      bool _1687_recOwned;
                      bool _1688_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1689_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out467;
                      bool _out468;
                      bool _out469;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out470;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out467, out _out468, out _out469, out _out470);
                      _1686_recursiveGen = _out467;
                      _1687_recOwned = _out468;
                      _1688_recErased = _out469;
                      _1689_recIdents = _out470;
                      Dafny.ISequence<Dafny.Rune> _1690_uneraseFn;
                      _1690_uneraseFn = ((_1687_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1690_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1687_recOwned;
                      isErased = true;
                      readIdents = _1689_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out471;
                      bool _out472;
                      bool _out473;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out474;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1685_b), _1685_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out471, out _out472, out _out473, out _out474);
                      s = _out471;
                      isOwned = _out472;
                      isErased = _out473;
                      readIdents = _out474;
                    }
                  }
                }
              }
            } else if (_source90.is_Nullable) {
              DAST._IType _1691___mcc_h473 = _source90.dtor_Nullable_a0;
              DAST._IType _source98 = _1423___mcc_h306;
              if (_source98.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1692___mcc_h477 = _source98.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1693___mcc_h478 = _source98.dtor_typeArgs;
                DAST._IResolvedType _1694___mcc_h479 = _source98.dtor_resolved;
                DAST._IResolvedType _source99 = _1694___mcc_h479;
                if (_source99.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1695___mcc_h486 = _source99.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1696_recursiveGen;
                    bool _1697_recOwned;
                    bool _1698_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1699_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out475;
                    bool _out476;
                    bool _out477;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out478;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out475, out _out476, out _out477, out _out478);
                    _1696_recursiveGen = _out475;
                    _1697_recOwned = _out476;
                    _1698_recErased = _out477;
                    _1699_recIdents = _out478;
                    if (!(_1697_recOwned)) {
                      _1696_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1696_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1696_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1697_recOwned;
                    isErased = _1698_recErased;
                    readIdents = _1699_recIdents;
                  }
                } else if (_source99.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1700___mcc_h489 = _source99.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1701_recursiveGen;
                    bool _1702_recOwned;
                    bool _1703_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1704_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out479;
                    bool _out480;
                    bool _out481;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out482;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out479, out _out480, out _out481, out _out482);
                    _1701_recursiveGen = _out479;
                    _1702_recOwned = _out480;
                    _1703_recErased = _out481;
                    _1704_recIdents = _out482;
                    if (!(_1702_recOwned)) {
                      _1701_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1701_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1701_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1702_recOwned;
                    isErased = _1703_recErased;
                    readIdents = _1704_recIdents;
                  }
                } else {
                  DAST._IType _1705___mcc_h492 = _source99.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1706_recursiveGen;
                    bool _1707_recOwned;
                    bool _1708_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1709_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out483;
                    bool _out484;
                    bool _out485;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out486;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out483, out _out484, out _out485, out _out486);
                    _1706_recursiveGen = _out483;
                    _1707_recOwned = _out484;
                    _1708_recErased = _out485;
                    _1709_recIdents = _out486;
                    if (!(_1707_recOwned)) {
                      _1706_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1706_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1706_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1707_recOwned;
                    isErased = _1708_recErased;
                    readIdents = _1709_recIdents;
                  }
                }
              } else if (_source98.is_Nullable) {
                DAST._IType _1710___mcc_h495 = _source98.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1711_recursiveGen;
                  bool _1712_recOwned;
                  bool _1713_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1714_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out487;
                  bool _out488;
                  bool _out489;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out490;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out487, out _out488, out _out489, out _out490);
                  _1711_recursiveGen = _out487;
                  _1712_recOwned = _out488;
                  _1713_recErased = _out489;
                  _1714_recIdents = _out490;
                  if (!(_1712_recOwned)) {
                    _1711_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1711_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1711_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1712_recOwned;
                  isErased = _1713_recErased;
                  readIdents = _1714_recIdents;
                }
              } else if (_source98.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1715___mcc_h498 = _source98.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1716_recursiveGen;
                  bool _1717_recOwned;
                  bool _1718_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1719_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out491;
                  bool _out492;
                  bool _out493;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out494;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out491, out _out492, out _out493, out _out494);
                  _1716_recursiveGen = _out491;
                  _1717_recOwned = _out492;
                  _1718_recErased = _out493;
                  _1719_recIdents = _out494;
                  if (!(_1717_recOwned)) {
                    _1716_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1716_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1716_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1717_recOwned;
                  isErased = _1718_recErased;
                  readIdents = _1719_recIdents;
                }
              } else if (_source98.is_Array) {
                DAST._IType _1720___mcc_h501 = _source98.dtor_element;
                BigInteger _1721___mcc_h502 = _source98.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1722_recursiveGen;
                  bool _1723_recOwned;
                  bool _1724_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1725_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out495;
                  bool _out496;
                  bool _out497;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out498;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out495, out _out496, out _out497, out _out498);
                  _1722_recursiveGen = _out495;
                  _1723_recOwned = _out496;
                  _1724_recErased = _out497;
                  _1725_recIdents = _out498;
                  if (!(_1723_recOwned)) {
                    _1722_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1722_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1722_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1723_recOwned;
                  isErased = _1724_recErased;
                  readIdents = _1725_recIdents;
                }
              } else if (_source98.is_Seq) {
                DAST._IType _1726___mcc_h507 = _source98.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1727_recursiveGen;
                  bool _1728_recOwned;
                  bool _1729_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1730_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out499;
                  bool _out500;
                  bool _out501;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out502;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out499, out _out500, out _out501, out _out502);
                  _1727_recursiveGen = _out499;
                  _1728_recOwned = _out500;
                  _1729_recErased = _out501;
                  _1730_recIdents = _out502;
                  if (!(_1728_recOwned)) {
                    _1727_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1727_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1727_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1728_recOwned;
                  isErased = _1729_recErased;
                  readIdents = _1730_recIdents;
                }
              } else if (_source98.is_Set) {
                DAST._IType _1731___mcc_h510 = _source98.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1732_recursiveGen;
                  bool _1733_recOwned;
                  bool _1734_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1735_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out503;
                  bool _out504;
                  bool _out505;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out506;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out503, out _out504, out _out505, out _out506);
                  _1732_recursiveGen = _out503;
                  _1733_recOwned = _out504;
                  _1734_recErased = _out505;
                  _1735_recIdents = _out506;
                  if (!(_1733_recOwned)) {
                    _1732_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1732_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1732_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1733_recOwned;
                  isErased = _1734_recErased;
                  readIdents = _1735_recIdents;
                }
              } else if (_source98.is_Multiset) {
                DAST._IType _1736___mcc_h513 = _source98.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1737_recursiveGen;
                  bool _1738_recOwned;
                  bool _1739_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1740_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out507;
                  bool _out508;
                  bool _out509;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out510;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out507, out _out508, out _out509, out _out510);
                  _1737_recursiveGen = _out507;
                  _1738_recOwned = _out508;
                  _1739_recErased = _out509;
                  _1740_recIdents = _out510;
                  if (!(_1738_recOwned)) {
                    _1737_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1737_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1737_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1738_recOwned;
                  isErased = _1739_recErased;
                  readIdents = _1740_recIdents;
                }
              } else if (_source98.is_Map) {
                DAST._IType _1741___mcc_h516 = _source98.dtor_key;
                DAST._IType _1742___mcc_h517 = _source98.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1743_recursiveGen;
                  bool _1744_recOwned;
                  bool _1745_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1746_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out511;
                  bool _out512;
                  bool _out513;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out514;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out511, out _out512, out _out513, out _out514);
                  _1743_recursiveGen = _out511;
                  _1744_recOwned = _out512;
                  _1745_recErased = _out513;
                  _1746_recIdents = _out514;
                  if (!(_1744_recOwned)) {
                    _1743_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1743_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1743_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1744_recOwned;
                  isErased = _1745_recErased;
                  readIdents = _1746_recIdents;
                }
              } else if (_source98.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1747___mcc_h522 = _source98.dtor_args;
                DAST._IType _1748___mcc_h523 = _source98.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1749_recursiveGen;
                  bool _1750_recOwned;
                  bool _1751_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1752_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out515;
                  bool _out516;
                  bool _out517;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out518;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out515, out _out516, out _out517, out _out518);
                  _1749_recursiveGen = _out515;
                  _1750_recOwned = _out516;
                  _1751_recErased = _out517;
                  _1752_recIdents = _out518;
                  if (!(_1750_recOwned)) {
                    _1749_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1749_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1749_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1750_recOwned;
                  isErased = _1751_recErased;
                  readIdents = _1752_recIdents;
                }
              } else if (_source98.is_Primitive) {
                DAST._IPrimitive _1753___mcc_h528 = _source98.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1754_recursiveGen;
                  bool _1755_recOwned;
                  bool _1756_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1757_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out519;
                  bool _out520;
                  bool _out521;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out519, out _out520, out _out521, out _out522);
                  _1754_recursiveGen = _out519;
                  _1755_recOwned = _out520;
                  _1756_recErased = _out521;
                  _1757_recIdents = _out522;
                  if (!(_1755_recOwned)) {
                    _1754_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1754_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1754_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1755_recOwned;
                  isErased = _1756_recErased;
                  readIdents = _1757_recIdents;
                }
              } else if (_source98.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1758___mcc_h531 = _source98.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1759_recursiveGen;
                  bool _1760_recOwned;
                  bool _1761_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1762_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out523;
                  bool _out524;
                  bool _out525;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out523, out _out524, out _out525, out _out526);
                  _1759_recursiveGen = _out523;
                  _1760_recOwned = _out524;
                  _1761_recErased = _out525;
                  _1762_recIdents = _out526;
                  if (!(_1760_recOwned)) {
                    _1759_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1759_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1759_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1760_recOwned;
                  isErased = _1761_recErased;
                  readIdents = _1762_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1763___mcc_h534 = _source98.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1764_recursiveGen;
                  bool _1765_recOwned;
                  bool _1766_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1767_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out527;
                  bool _out528;
                  bool _out529;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out530;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out527, out _out528, out _out529, out _out530);
                  _1764_recursiveGen = _out527;
                  _1765_recOwned = _out528;
                  _1766_recErased = _out529;
                  _1767_recIdents = _out530;
                  if (!(_1765_recOwned)) {
                    _1764_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1764_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1764_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1765_recOwned;
                  isErased = _1766_recErased;
                  readIdents = _1767_recIdents;
                }
              }
            } else if (_source90.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1768___mcc_h537 = _source90.dtor_Tuple_a0;
              DAST._IType _source100 = _1423___mcc_h306;
              if (_source100.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1769___mcc_h541 = _source100.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1770___mcc_h542 = _source100.dtor_typeArgs;
                DAST._IResolvedType _1771___mcc_h543 = _source100.dtor_resolved;
                DAST._IResolvedType _source101 = _1771___mcc_h543;
                if (_source101.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1772___mcc_h547 = _source101.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1773_recursiveGen;
                    bool _1774_recOwned;
                    bool _1775_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1776_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out531;
                    bool _out532;
                    bool _out533;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out531, out _out532, out _out533, out _out534);
                    _1773_recursiveGen = _out531;
                    _1774_recOwned = _out532;
                    _1775_recErased = _out533;
                    _1776_recIdents = _out534;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1774_recOwned;
                    isErased = _1775_recErased;
                    readIdents = _1776_recIdents;
                  }
                } else if (_source101.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1777___mcc_h549 = _source101.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1778_recursiveGen;
                    bool _1779_recOwned;
                    bool _1780_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1781_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out535;
                    bool _out536;
                    bool _out537;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out538;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out535, out _out536, out _out537, out _out538);
                    _1778_recursiveGen = _out535;
                    _1779_recOwned = _out536;
                    _1780_recErased = _out537;
                    _1781_recIdents = _out538;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1778_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1779_recOwned;
                    isErased = _1780_recErased;
                    readIdents = _1781_recIdents;
                  }
                } else {
                  DAST._IType _1782___mcc_h551 = _source101.dtor_Newtype_a0;
                  DAST._IType _1783_b = _1782___mcc_h551;
                  {
                    if (object.Equals(_1416_fromTpe, _1783_b)) {
                      Dafny.ISequence<Dafny.Rune> _1784_recursiveGen;
                      bool _1785_recOwned;
                      bool _1786_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1787_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out539;
                      bool _out540;
                      bool _out541;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out539, out _out540, out _out541, out _out542);
                      _1784_recursiveGen = _out539;
                      _1785_recOwned = _out540;
                      _1786_recErased = _out541;
                      _1787_recIdents = _out542;
                      Dafny.ISequence<Dafny.Rune> _1788_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out543;
                      _out543 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _1788_rhsType = _out543;
                      Dafny.ISequence<Dafny.Rune> _1789_uneraseFn;
                      _1789_uneraseFn = ((_1785_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1788_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1789_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1785_recOwned;
                      isErased = false;
                      readIdents = _1787_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out544;
                      bool _out545;
                      bool _out546;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out547;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1783_b), _1783_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out544, out _out545, out _out546, out _out547);
                      s = _out544;
                      isOwned = _out545;
                      isErased = _out546;
                      readIdents = _out547;
                    }
                  }
                }
              } else if (_source100.is_Nullable) {
                DAST._IType _1790___mcc_h553 = _source100.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1791_recursiveGen;
                  bool _1792_recOwned;
                  bool _1793_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1794_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out548;
                  bool _out549;
                  bool _out550;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out551;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out548, out _out549, out _out550, out _out551);
                  _1791_recursiveGen = _out548;
                  _1792_recOwned = _out549;
                  _1793_recErased = _out550;
                  _1794_recIdents = _out551;
                  if (!(_1792_recOwned)) {
                    _1791_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1791_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1791_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1793_recErased;
                  readIdents = _1794_recIdents;
                }
              } else if (_source100.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1795___mcc_h555 = _source100.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1796_recursiveGen;
                  bool _1797_recOwned;
                  bool _1798_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1799_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out552;
                  bool _out553;
                  bool _out554;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out555;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out552, out _out553, out _out554, out _out555);
                  _1796_recursiveGen = _out552;
                  _1797_recOwned = _out553;
                  _1798_recErased = _out554;
                  _1799_recIdents = _out555;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1796_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1797_recOwned;
                  isErased = _1798_recErased;
                  readIdents = _1799_recIdents;
                }
              } else if (_source100.is_Array) {
                DAST._IType _1800___mcc_h557 = _source100.dtor_element;
                BigInteger _1801___mcc_h558 = _source100.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1802_recursiveGen;
                  bool _1803_recOwned;
                  bool _1804_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1805_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out556;
                  bool _out557;
                  bool _out558;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out556, out _out557, out _out558, out _out559);
                  _1802_recursiveGen = _out556;
                  _1803_recOwned = _out557;
                  _1804_recErased = _out558;
                  _1805_recIdents = _out559;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1802_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1803_recOwned;
                  isErased = _1804_recErased;
                  readIdents = _1805_recIdents;
                }
              } else if (_source100.is_Seq) {
                DAST._IType _1806___mcc_h561 = _source100.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1807_recursiveGen;
                  bool _1808_recOwned;
                  bool _1809_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1810_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out560;
                  bool _out561;
                  bool _out562;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out563;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out560, out _out561, out _out562, out _out563);
                  _1807_recursiveGen = _out560;
                  _1808_recOwned = _out561;
                  _1809_recErased = _out562;
                  _1810_recIdents = _out563;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1807_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1808_recOwned;
                  isErased = _1809_recErased;
                  readIdents = _1810_recIdents;
                }
              } else if (_source100.is_Set) {
                DAST._IType _1811___mcc_h563 = _source100.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1812_recursiveGen;
                  bool _1813_recOwned;
                  bool _1814_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1815_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out564;
                  bool _out565;
                  bool _out566;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out567;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out564, out _out565, out _out566, out _out567);
                  _1812_recursiveGen = _out564;
                  _1813_recOwned = _out565;
                  _1814_recErased = _out566;
                  _1815_recIdents = _out567;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1812_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1813_recOwned;
                  isErased = _1814_recErased;
                  readIdents = _1815_recIdents;
                }
              } else if (_source100.is_Multiset) {
                DAST._IType _1816___mcc_h565 = _source100.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1817_recursiveGen;
                  bool _1818_recOwned;
                  bool _1819_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1820_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out568;
                  bool _out569;
                  bool _out570;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out571;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out568, out _out569, out _out570, out _out571);
                  _1817_recursiveGen = _out568;
                  _1818_recOwned = _out569;
                  _1819_recErased = _out570;
                  _1820_recIdents = _out571;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1817_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1818_recOwned;
                  isErased = _1819_recErased;
                  readIdents = _1820_recIdents;
                }
              } else if (_source100.is_Map) {
                DAST._IType _1821___mcc_h567 = _source100.dtor_key;
                DAST._IType _1822___mcc_h568 = _source100.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1823_recursiveGen;
                  bool _1824_recOwned;
                  bool _1825_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1826_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out572;
                  bool _out573;
                  bool _out574;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out575;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out572, out _out573, out _out574, out _out575);
                  _1823_recursiveGen = _out572;
                  _1824_recOwned = _out573;
                  _1825_recErased = _out574;
                  _1826_recIdents = _out575;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1823_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1824_recOwned;
                  isErased = _1825_recErased;
                  readIdents = _1826_recIdents;
                }
              } else if (_source100.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1827___mcc_h571 = _source100.dtor_args;
                DAST._IType _1828___mcc_h572 = _source100.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1829_recursiveGen;
                  bool _1830_recOwned;
                  bool _1831_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1832_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out576;
                  bool _out577;
                  bool _out578;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out579;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out576, out _out577, out _out578, out _out579);
                  _1829_recursiveGen = _out576;
                  _1830_recOwned = _out577;
                  _1831_recErased = _out578;
                  _1832_recIdents = _out579;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1829_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1830_recOwned;
                  isErased = _1831_recErased;
                  readIdents = _1832_recIdents;
                }
              } else if (_source100.is_Primitive) {
                DAST._IPrimitive _1833___mcc_h575 = _source100.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1834_recursiveGen;
                  bool _1835_recOwned;
                  bool _1836_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1837_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out580;
                  bool _out581;
                  bool _out582;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out580, out _out581, out _out582, out _out583);
                  _1834_recursiveGen = _out580;
                  _1835_recOwned = _out581;
                  _1836_recErased = _out582;
                  _1837_recIdents = _out583;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1834_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1835_recOwned;
                  isErased = _1836_recErased;
                  readIdents = _1837_recIdents;
                }
              } else if (_source100.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1838___mcc_h577 = _source100.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1839_recursiveGen;
                  bool _1840_recOwned;
                  bool _1841_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1842_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out584;
                  bool _out585;
                  bool _out586;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out587;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out584, out _out585, out _out586, out _out587);
                  _1839_recursiveGen = _out584;
                  _1840_recOwned = _out585;
                  _1841_recErased = _out586;
                  _1842_recIdents = _out587;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1839_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1840_recOwned;
                  isErased = _1841_recErased;
                  readIdents = _1842_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1843___mcc_h579 = _source100.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1844_recursiveGen;
                  bool _1845_recOwned;
                  bool _1846_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1847_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out588;
                  bool _out589;
                  bool _out590;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out591;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out588, out _out589, out _out590, out _out591);
                  _1844_recursiveGen = _out588;
                  _1845_recOwned = _out589;
                  _1846_recErased = _out590;
                  _1847_recIdents = _out591;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1844_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1845_recOwned;
                  isErased = _1846_recErased;
                  readIdents = _1847_recIdents;
                }
              }
            } else if (_source90.is_Array) {
              DAST._IType _1848___mcc_h581 = _source90.dtor_element;
              BigInteger _1849___mcc_h582 = _source90.dtor_dims;
              DAST._IType _source102 = _1423___mcc_h306;
              if (_source102.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1850___mcc_h589 = _source102.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1851___mcc_h590 = _source102.dtor_typeArgs;
                DAST._IResolvedType _1852___mcc_h591 = _source102.dtor_resolved;
                DAST._IResolvedType _source103 = _1852___mcc_h591;
                if (_source103.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1853___mcc_h595 = _source103.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1854_recursiveGen;
                    bool _1855_recOwned;
                    bool _1856_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1857_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out592;
                    bool _out593;
                    bool _out594;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out592, out _out593, out _out594, out _out595);
                    _1854_recursiveGen = _out592;
                    _1855_recOwned = _out593;
                    _1856_recErased = _out594;
                    _1857_recIdents = _out595;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1854_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1855_recOwned;
                    isErased = _1856_recErased;
                    readIdents = _1857_recIdents;
                  }
                } else if (_source103.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1858___mcc_h597 = _source103.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1859_recursiveGen;
                    bool _1860_recOwned;
                    bool _1861_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1862_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out596;
                    bool _out597;
                    bool _out598;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out599;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out596, out _out597, out _out598, out _out599);
                    _1859_recursiveGen = _out596;
                    _1860_recOwned = _out597;
                    _1861_recErased = _out598;
                    _1862_recIdents = _out599;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1859_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1860_recOwned;
                    isErased = _1861_recErased;
                    readIdents = _1862_recIdents;
                  }
                } else {
                  DAST._IType _1863___mcc_h599 = _source103.dtor_Newtype_a0;
                  DAST._IType _1864_b = _1863___mcc_h599;
                  {
                    if (object.Equals(_1416_fromTpe, _1864_b)) {
                      Dafny.ISequence<Dafny.Rune> _1865_recursiveGen;
                      bool _1866_recOwned;
                      bool _1867_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1868_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out600;
                      bool _out601;
                      bool _out602;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out603;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out600, out _out601, out _out602, out _out603);
                      _1865_recursiveGen = _out600;
                      _1866_recOwned = _out601;
                      _1867_recErased = _out602;
                      _1868_recIdents = _out603;
                      Dafny.ISequence<Dafny.Rune> _1869_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out604;
                      _out604 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _1869_rhsType = _out604;
                      Dafny.ISequence<Dafny.Rune> _1870_uneraseFn;
                      _1870_uneraseFn = ((_1866_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1869_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1870_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1865_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1866_recOwned;
                      isErased = false;
                      readIdents = _1868_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out605;
                      bool _out606;
                      bool _out607;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out608;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1864_b), _1864_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out605, out _out606, out _out607, out _out608);
                      s = _out605;
                      isOwned = _out606;
                      isErased = _out607;
                      readIdents = _out608;
                    }
                  }
                }
              } else if (_source102.is_Nullable) {
                DAST._IType _1871___mcc_h601 = _source102.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1872_recursiveGen;
                  bool _1873_recOwned;
                  bool _1874_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1875_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out609;
                  bool _out610;
                  bool _out611;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out612;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out609, out _out610, out _out611, out _out612);
                  _1872_recursiveGen = _out609;
                  _1873_recOwned = _out610;
                  _1874_recErased = _out611;
                  _1875_recIdents = _out612;
                  if (!(_1873_recOwned)) {
                    _1872_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1872_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1872_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1874_recErased;
                  readIdents = _1875_recIdents;
                }
              } else if (_source102.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1876___mcc_h603 = _source102.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1877_recursiveGen;
                  bool _1878_recOwned;
                  bool _1879_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1880_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out613;
                  bool _out614;
                  bool _out615;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out616;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out613, out _out614, out _out615, out _out616);
                  _1877_recursiveGen = _out613;
                  _1878_recOwned = _out614;
                  _1879_recErased = _out615;
                  _1880_recIdents = _out616;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1877_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1878_recOwned;
                  isErased = _1879_recErased;
                  readIdents = _1880_recIdents;
                }
              } else if (_source102.is_Array) {
                DAST._IType _1881___mcc_h605 = _source102.dtor_element;
                BigInteger _1882___mcc_h606 = _source102.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1883_recursiveGen;
                  bool _1884_recOwned;
                  bool _1885_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1886_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out617;
                  bool _out618;
                  bool _out619;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out620;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out617, out _out618, out _out619, out _out620);
                  _1883_recursiveGen = _out617;
                  _1884_recOwned = _out618;
                  _1885_recErased = _out619;
                  _1886_recIdents = _out620;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1883_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1884_recOwned;
                  isErased = _1885_recErased;
                  readIdents = _1886_recIdents;
                }
              } else if (_source102.is_Seq) {
                DAST._IType _1887___mcc_h609 = _source102.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1888_recursiveGen;
                  bool _1889_recOwned;
                  bool _1890_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1891_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out621;
                  bool _out622;
                  bool _out623;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out624;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out621, out _out622, out _out623, out _out624);
                  _1888_recursiveGen = _out621;
                  _1889_recOwned = _out622;
                  _1890_recErased = _out623;
                  _1891_recIdents = _out624;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1888_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1889_recOwned;
                  isErased = _1890_recErased;
                  readIdents = _1891_recIdents;
                }
              } else if (_source102.is_Set) {
                DAST._IType _1892___mcc_h611 = _source102.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1893_recursiveGen;
                  bool _1894_recOwned;
                  bool _1895_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1896_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out625;
                  bool _out626;
                  bool _out627;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out628;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out625, out _out626, out _out627, out _out628);
                  _1893_recursiveGen = _out625;
                  _1894_recOwned = _out626;
                  _1895_recErased = _out627;
                  _1896_recIdents = _out628;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1893_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1894_recOwned;
                  isErased = _1895_recErased;
                  readIdents = _1896_recIdents;
                }
              } else if (_source102.is_Multiset) {
                DAST._IType _1897___mcc_h613 = _source102.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1898_recursiveGen;
                  bool _1899_recOwned;
                  bool _1900_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1901_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out629;
                  bool _out630;
                  bool _out631;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out632;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out629, out _out630, out _out631, out _out632);
                  _1898_recursiveGen = _out629;
                  _1899_recOwned = _out630;
                  _1900_recErased = _out631;
                  _1901_recIdents = _out632;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1898_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1899_recOwned;
                  isErased = _1900_recErased;
                  readIdents = _1901_recIdents;
                }
              } else if (_source102.is_Map) {
                DAST._IType _1902___mcc_h615 = _source102.dtor_key;
                DAST._IType _1903___mcc_h616 = _source102.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1904_recursiveGen;
                  bool _1905_recOwned;
                  bool _1906_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1907_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out633;
                  bool _out634;
                  bool _out635;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out636;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out633, out _out634, out _out635, out _out636);
                  _1904_recursiveGen = _out633;
                  _1905_recOwned = _out634;
                  _1906_recErased = _out635;
                  _1907_recIdents = _out636;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1904_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1905_recOwned;
                  isErased = _1906_recErased;
                  readIdents = _1907_recIdents;
                }
              } else if (_source102.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1908___mcc_h619 = _source102.dtor_args;
                DAST._IType _1909___mcc_h620 = _source102.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1910_recursiveGen;
                  bool _1911_recOwned;
                  bool _1912_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1913_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out637;
                  bool _out638;
                  bool _out639;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out640;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out637, out _out638, out _out639, out _out640);
                  _1910_recursiveGen = _out637;
                  _1911_recOwned = _out638;
                  _1912_recErased = _out639;
                  _1913_recIdents = _out640;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1910_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1911_recOwned;
                  isErased = _1912_recErased;
                  readIdents = _1913_recIdents;
                }
              } else if (_source102.is_Primitive) {
                DAST._IPrimitive _1914___mcc_h623 = _source102.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1915_recursiveGen;
                  bool _1916_recOwned;
                  bool _1917_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1918_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out641;
                  bool _out642;
                  bool _out643;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out641, out _out642, out _out643, out _out644);
                  _1915_recursiveGen = _out641;
                  _1916_recOwned = _out642;
                  _1917_recErased = _out643;
                  _1918_recIdents = _out644;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1915_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1916_recOwned;
                  isErased = _1917_recErased;
                  readIdents = _1918_recIdents;
                }
              } else if (_source102.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1919___mcc_h625 = _source102.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1920_recursiveGen;
                  bool _1921_recOwned;
                  bool _1922_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1923_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out645;
                  bool _out646;
                  bool _out647;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out648;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out645, out _out646, out _out647, out _out648);
                  _1920_recursiveGen = _out645;
                  _1921_recOwned = _out646;
                  _1922_recErased = _out647;
                  _1923_recIdents = _out648;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1920_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1921_recOwned;
                  isErased = _1922_recErased;
                  readIdents = _1923_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1924___mcc_h627 = _source102.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1925_recursiveGen;
                  bool _1926_recOwned;
                  bool _1927_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1928_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out649;
                  bool _out650;
                  bool _out651;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out652;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out649, out _out650, out _out651, out _out652);
                  _1925_recursiveGen = _out649;
                  _1926_recOwned = _out650;
                  _1927_recErased = _out651;
                  _1928_recIdents = _out652;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1926_recOwned;
                  isErased = _1927_recErased;
                  readIdents = _1928_recIdents;
                }
              }
            } else if (_source90.is_Seq) {
              DAST._IType _1929___mcc_h629 = _source90.dtor_element;
              DAST._IType _source104 = _1423___mcc_h306;
              if (_source104.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1930___mcc_h633 = _source104.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1931___mcc_h634 = _source104.dtor_typeArgs;
                DAST._IResolvedType _1932___mcc_h635 = _source104.dtor_resolved;
                DAST._IResolvedType _source105 = _1932___mcc_h635;
                if (_source105.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1933___mcc_h639 = _source105.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1934_recursiveGen;
                    bool _1935_recOwned;
                    bool _1936_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1937_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out653;
                    bool _out654;
                    bool _out655;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out653, out _out654, out _out655, out _out656);
                    _1934_recursiveGen = _out653;
                    _1935_recOwned = _out654;
                    _1936_recErased = _out655;
                    _1937_recIdents = _out656;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1934_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1935_recOwned;
                    isErased = _1936_recErased;
                    readIdents = _1937_recIdents;
                  }
                } else if (_source105.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1938___mcc_h641 = _source105.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1939_recursiveGen;
                    bool _1940_recOwned;
                    bool _1941_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1942_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out657;
                    bool _out658;
                    bool _out659;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out657, out _out658, out _out659, out _out660);
                    _1939_recursiveGen = _out657;
                    _1940_recOwned = _out658;
                    _1941_recErased = _out659;
                    _1942_recIdents = _out660;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1940_recOwned;
                    isErased = _1941_recErased;
                    readIdents = _1942_recIdents;
                  }
                } else {
                  DAST._IType _1943___mcc_h643 = _source105.dtor_Newtype_a0;
                  DAST._IType _1944_b = _1943___mcc_h643;
                  {
                    if (object.Equals(_1416_fromTpe, _1944_b)) {
                      Dafny.ISequence<Dafny.Rune> _1945_recursiveGen;
                      bool _1946_recOwned;
                      bool _1947_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1948_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out661;
                      bool _out662;
                      bool _out663;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out664;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out661, out _out662, out _out663, out _out664);
                      _1945_recursiveGen = _out661;
                      _1946_recOwned = _out662;
                      _1947_recErased = _out663;
                      _1948_recIdents = _out664;
                      Dafny.ISequence<Dafny.Rune> _1949_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out665;
                      _out665 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _1949_rhsType = _out665;
                      Dafny.ISequence<Dafny.Rune> _1950_uneraseFn;
                      _1950_uneraseFn = ((_1946_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1949_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1950_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1945_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1946_recOwned;
                      isErased = false;
                      readIdents = _1948_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out666;
                      bool _out667;
                      bool _out668;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out669;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _1944_b), _1944_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out666, out _out667, out _out668, out _out669);
                      s = _out666;
                      isOwned = _out667;
                      isErased = _out668;
                      readIdents = _out669;
                    }
                  }
                }
              } else if (_source104.is_Nullable) {
                DAST._IType _1951___mcc_h645 = _source104.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1952_recursiveGen;
                  bool _1953_recOwned;
                  bool _1954_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1955_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out670;
                  bool _out671;
                  bool _out672;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out673;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out670, out _out671, out _out672, out _out673);
                  _1952_recursiveGen = _out670;
                  _1953_recOwned = _out671;
                  _1954_recErased = _out672;
                  _1955_recIdents = _out673;
                  if (!(_1953_recOwned)) {
                    _1952_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1952_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1952_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1954_recErased;
                  readIdents = _1955_recIdents;
                }
              } else if (_source104.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1956___mcc_h647 = _source104.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1957_recursiveGen;
                  bool _1958_recOwned;
                  bool _1959_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1960_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out674;
                  bool _out675;
                  bool _out676;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out677;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out674, out _out675, out _out676, out _out677);
                  _1957_recursiveGen = _out674;
                  _1958_recOwned = _out675;
                  _1959_recErased = _out676;
                  _1960_recIdents = _out677;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1958_recOwned;
                  isErased = _1959_recErased;
                  readIdents = _1960_recIdents;
                }
              } else if (_source104.is_Array) {
                DAST._IType _1961___mcc_h649 = _source104.dtor_element;
                BigInteger _1962___mcc_h650 = _source104.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1963_recursiveGen;
                  bool _1964_recOwned;
                  bool _1965_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1966_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out678;
                  bool _out679;
                  bool _out680;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out681;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out678, out _out679, out _out680, out _out681);
                  _1963_recursiveGen = _out678;
                  _1964_recOwned = _out679;
                  _1965_recErased = _out680;
                  _1966_recIdents = _out681;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1963_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1964_recOwned;
                  isErased = _1965_recErased;
                  readIdents = _1966_recIdents;
                }
              } else if (_source104.is_Seq) {
                DAST._IType _1967___mcc_h653 = _source104.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1968_recursiveGen;
                  bool _1969_recOwned;
                  bool _1970_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1971_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out682;
                  bool _out683;
                  bool _out684;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out685;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out682, out _out683, out _out684, out _out685);
                  _1968_recursiveGen = _out682;
                  _1969_recOwned = _out683;
                  _1970_recErased = _out684;
                  _1971_recIdents = _out685;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1968_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1969_recOwned;
                  isErased = _1970_recErased;
                  readIdents = _1971_recIdents;
                }
              } else if (_source104.is_Set) {
                DAST._IType _1972___mcc_h655 = _source104.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1973_recursiveGen;
                  bool _1974_recOwned;
                  bool _1975_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1976_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out686;
                  bool _out687;
                  bool _out688;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out689;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out686, out _out687, out _out688, out _out689);
                  _1973_recursiveGen = _out686;
                  _1974_recOwned = _out687;
                  _1975_recErased = _out688;
                  _1976_recIdents = _out689;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1973_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1974_recOwned;
                  isErased = _1975_recErased;
                  readIdents = _1976_recIdents;
                }
              } else if (_source104.is_Multiset) {
                DAST._IType _1977___mcc_h657 = _source104.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1978_recursiveGen;
                  bool _1979_recOwned;
                  bool _1980_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1981_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out690;
                  bool _out691;
                  bool _out692;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out693;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out690, out _out691, out _out692, out _out693);
                  _1978_recursiveGen = _out690;
                  _1979_recOwned = _out691;
                  _1980_recErased = _out692;
                  _1981_recIdents = _out693;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1979_recOwned;
                  isErased = _1980_recErased;
                  readIdents = _1981_recIdents;
                }
              } else if (_source104.is_Map) {
                DAST._IType _1982___mcc_h659 = _source104.dtor_key;
                DAST._IType _1983___mcc_h660 = _source104.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1984_recursiveGen;
                  bool _1985_recOwned;
                  bool _1986_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1987_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out694;
                  bool _out695;
                  bool _out696;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out697;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out694, out _out695, out _out696, out _out697);
                  _1984_recursiveGen = _out694;
                  _1985_recOwned = _out695;
                  _1986_recErased = _out696;
                  _1987_recIdents = _out697;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1984_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1985_recOwned;
                  isErased = _1986_recErased;
                  readIdents = _1987_recIdents;
                }
              } else if (_source104.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1988___mcc_h663 = _source104.dtor_args;
                DAST._IType _1989___mcc_h664 = _source104.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1990_recursiveGen;
                  bool _1991_recOwned;
                  bool _1992_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1993_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out698;
                  bool _out699;
                  bool _out700;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out698, out _out699, out _out700, out _out701);
                  _1990_recursiveGen = _out698;
                  _1991_recOwned = _out699;
                  _1992_recErased = _out700;
                  _1993_recIdents = _out701;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1990_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1991_recOwned;
                  isErased = _1992_recErased;
                  readIdents = _1993_recIdents;
                }
              } else if (_source104.is_Primitive) {
                DAST._IPrimitive _1994___mcc_h667 = _source104.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1995_recursiveGen;
                  bool _1996_recOwned;
                  bool _1997_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1998_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out702;
                  bool _out703;
                  bool _out704;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out705;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out702, out _out703, out _out704, out _out705);
                  _1995_recursiveGen = _out702;
                  _1996_recOwned = _out703;
                  _1997_recErased = _out704;
                  _1998_recIdents = _out705;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1995_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1996_recOwned;
                  isErased = _1997_recErased;
                  readIdents = _1998_recIdents;
                }
              } else if (_source104.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1999___mcc_h669 = _source104.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2000_recursiveGen;
                  bool _2001_recOwned;
                  bool _2002_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2003_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out706;
                  bool _out707;
                  bool _out708;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out706, out _out707, out _out708, out _out709);
                  _2000_recursiveGen = _out706;
                  _2001_recOwned = _out707;
                  _2002_recErased = _out708;
                  _2003_recIdents = _out709;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2000_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2001_recOwned;
                  isErased = _2002_recErased;
                  readIdents = _2003_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2004___mcc_h671 = _source104.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2005_recursiveGen;
                  bool _2006_recOwned;
                  bool _2007_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2008_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out710;
                  bool _out711;
                  bool _out712;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out713;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out710, out _out711, out _out712, out _out713);
                  _2005_recursiveGen = _out710;
                  _2006_recOwned = _out711;
                  _2007_recErased = _out712;
                  _2008_recIdents = _out713;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2005_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2006_recOwned;
                  isErased = _2007_recErased;
                  readIdents = _2008_recIdents;
                }
              }
            } else if (_source90.is_Set) {
              DAST._IType _2009___mcc_h673 = _source90.dtor_element;
              DAST._IType _source106 = _1423___mcc_h306;
              if (_source106.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2010___mcc_h677 = _source106.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2011___mcc_h678 = _source106.dtor_typeArgs;
                DAST._IResolvedType _2012___mcc_h679 = _source106.dtor_resolved;
                DAST._IResolvedType _source107 = _2012___mcc_h679;
                if (_source107.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2013___mcc_h683 = _source107.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2014_recursiveGen;
                    bool _2015_recOwned;
                    bool _2016_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2017_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out714;
                    bool _out715;
                    bool _out716;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out717;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out714, out _out715, out _out716, out _out717);
                    _2014_recursiveGen = _out714;
                    _2015_recOwned = _out715;
                    _2016_recErased = _out716;
                    _2017_recIdents = _out717;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2014_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2015_recOwned;
                    isErased = _2016_recErased;
                    readIdents = _2017_recIdents;
                  }
                } else if (_source107.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2018___mcc_h685 = _source107.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2019_recursiveGen;
                    bool _2020_recOwned;
                    bool _2021_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2022_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out718;
                    bool _out719;
                    bool _out720;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out718, out _out719, out _out720, out _out721);
                    _2019_recursiveGen = _out718;
                    _2020_recOwned = _out719;
                    _2021_recErased = _out720;
                    _2022_recIdents = _out721;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2019_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2020_recOwned;
                    isErased = _2021_recErased;
                    readIdents = _2022_recIdents;
                  }
                } else {
                  DAST._IType _2023___mcc_h687 = _source107.dtor_Newtype_a0;
                  DAST._IType _2024_b = _2023___mcc_h687;
                  {
                    if (object.Equals(_1416_fromTpe, _2024_b)) {
                      Dafny.ISequence<Dafny.Rune> _2025_recursiveGen;
                      bool _2026_recOwned;
                      bool _2027_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2028_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out722;
                      bool _out723;
                      bool _out724;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out725;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out722, out _out723, out _out724, out _out725);
                      _2025_recursiveGen = _out722;
                      _2026_recOwned = _out723;
                      _2027_recErased = _out724;
                      _2028_recIdents = _out725;
                      Dafny.ISequence<Dafny.Rune> _2029_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out726;
                      _out726 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _2029_rhsType = _out726;
                      Dafny.ISequence<Dafny.Rune> _2030_uneraseFn;
                      _2030_uneraseFn = ((_2026_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2029_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2030_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2025_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2026_recOwned;
                      isErased = false;
                      readIdents = _2028_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out727;
                      bool _out728;
                      bool _out729;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out730;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2024_b), _2024_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out727, out _out728, out _out729, out _out730);
                      s = _out727;
                      isOwned = _out728;
                      isErased = _out729;
                      readIdents = _out730;
                    }
                  }
                }
              } else if (_source106.is_Nullable) {
                DAST._IType _2031___mcc_h689 = _source106.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2032_recursiveGen;
                  bool _2033_recOwned;
                  bool _2034_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2035_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out731;
                  bool _out732;
                  bool _out733;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out734;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out731, out _out732, out _out733, out _out734);
                  _2032_recursiveGen = _out731;
                  _2033_recOwned = _out732;
                  _2034_recErased = _out733;
                  _2035_recIdents = _out734;
                  if (!(_2033_recOwned)) {
                    _2032_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2032_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2032_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2034_recErased;
                  readIdents = _2035_recIdents;
                }
              } else if (_source106.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2036___mcc_h691 = _source106.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2037_recursiveGen;
                  bool _2038_recOwned;
                  bool _2039_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2040_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out735;
                  bool _out736;
                  bool _out737;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out738;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out735, out _out736, out _out737, out _out738);
                  _2037_recursiveGen = _out735;
                  _2038_recOwned = _out736;
                  _2039_recErased = _out737;
                  _2040_recIdents = _out738;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2037_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2038_recOwned;
                  isErased = _2039_recErased;
                  readIdents = _2040_recIdents;
                }
              } else if (_source106.is_Array) {
                DAST._IType _2041___mcc_h693 = _source106.dtor_element;
                BigInteger _2042___mcc_h694 = _source106.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2043_recursiveGen;
                  bool _2044_recOwned;
                  bool _2045_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2046_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out739;
                  bool _out740;
                  bool _out741;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out742;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out739, out _out740, out _out741, out _out742);
                  _2043_recursiveGen = _out739;
                  _2044_recOwned = _out740;
                  _2045_recErased = _out741;
                  _2046_recIdents = _out742;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2043_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2044_recOwned;
                  isErased = _2045_recErased;
                  readIdents = _2046_recIdents;
                }
              } else if (_source106.is_Seq) {
                DAST._IType _2047___mcc_h697 = _source106.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2048_recursiveGen;
                  bool _2049_recOwned;
                  bool _2050_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2051_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out743;
                  bool _out744;
                  bool _out745;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out746;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out743, out _out744, out _out745, out _out746);
                  _2048_recursiveGen = _out743;
                  _2049_recOwned = _out744;
                  _2050_recErased = _out745;
                  _2051_recIdents = _out746;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2048_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2049_recOwned;
                  isErased = _2050_recErased;
                  readIdents = _2051_recIdents;
                }
              } else if (_source106.is_Set) {
                DAST._IType _2052___mcc_h699 = _source106.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2053_recursiveGen;
                  bool _2054_recOwned;
                  bool _2055_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2056_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out747;
                  bool _out748;
                  bool _out749;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out750;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out747, out _out748, out _out749, out _out750);
                  _2053_recursiveGen = _out747;
                  _2054_recOwned = _out748;
                  _2055_recErased = _out749;
                  _2056_recIdents = _out750;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2053_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2054_recOwned;
                  isErased = _2055_recErased;
                  readIdents = _2056_recIdents;
                }
              } else if (_source106.is_Multiset) {
                DAST._IType _2057___mcc_h701 = _source106.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2058_recursiveGen;
                  bool _2059_recOwned;
                  bool _2060_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2061_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out751;
                  bool _out752;
                  bool _out753;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out754;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out751, out _out752, out _out753, out _out754);
                  _2058_recursiveGen = _out751;
                  _2059_recOwned = _out752;
                  _2060_recErased = _out753;
                  _2061_recIdents = _out754;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2059_recOwned;
                  isErased = _2060_recErased;
                  readIdents = _2061_recIdents;
                }
              } else if (_source106.is_Map) {
                DAST._IType _2062___mcc_h703 = _source106.dtor_key;
                DAST._IType _2063___mcc_h704 = _source106.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2064_recursiveGen;
                  bool _2065_recOwned;
                  bool _2066_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2067_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out755;
                  bool _out756;
                  bool _out757;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out758;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out755, out _out756, out _out757, out _out758);
                  _2064_recursiveGen = _out755;
                  _2065_recOwned = _out756;
                  _2066_recErased = _out757;
                  _2067_recIdents = _out758;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2064_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2065_recOwned;
                  isErased = _2066_recErased;
                  readIdents = _2067_recIdents;
                }
              } else if (_source106.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2068___mcc_h707 = _source106.dtor_args;
                DAST._IType _2069___mcc_h708 = _source106.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2070_recursiveGen;
                  bool _2071_recOwned;
                  bool _2072_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2073_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out759;
                  bool _out760;
                  bool _out761;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out762;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out759, out _out760, out _out761, out _out762);
                  _2070_recursiveGen = _out759;
                  _2071_recOwned = _out760;
                  _2072_recErased = _out761;
                  _2073_recIdents = _out762;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2070_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2071_recOwned;
                  isErased = _2072_recErased;
                  readIdents = _2073_recIdents;
                }
              } else if (_source106.is_Primitive) {
                DAST._IPrimitive _2074___mcc_h711 = _source106.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2075_recursiveGen;
                  bool _2076_recOwned;
                  bool _2077_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2078_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out763;
                  bool _out764;
                  bool _out765;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out763, out _out764, out _out765, out _out766);
                  _2075_recursiveGen = _out763;
                  _2076_recOwned = _out764;
                  _2077_recErased = _out765;
                  _2078_recIdents = _out766;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2076_recOwned;
                  isErased = _2077_recErased;
                  readIdents = _2078_recIdents;
                }
              } else if (_source106.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2079___mcc_h713 = _source106.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2080_recursiveGen;
                  bool _2081_recOwned;
                  bool _2082_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2083_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out767;
                  bool _out768;
                  bool _out769;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out767, out _out768, out _out769, out _out770);
                  _2080_recursiveGen = _out767;
                  _2081_recOwned = _out768;
                  _2082_recErased = _out769;
                  _2083_recIdents = _out770;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2080_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2081_recOwned;
                  isErased = _2082_recErased;
                  readIdents = _2083_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2084___mcc_h715 = _source106.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2085_recursiveGen;
                  bool _2086_recOwned;
                  bool _2087_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2088_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out771;
                  bool _out772;
                  bool _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out771, out _out772, out _out773, out _out774);
                  _2085_recursiveGen = _out771;
                  _2086_recOwned = _out772;
                  _2087_recErased = _out773;
                  _2088_recIdents = _out774;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2085_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2086_recOwned;
                  isErased = _2087_recErased;
                  readIdents = _2088_recIdents;
                }
              }
            } else if (_source90.is_Multiset) {
              DAST._IType _2089___mcc_h717 = _source90.dtor_element;
              DAST._IType _source108 = _1423___mcc_h306;
              if (_source108.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2090___mcc_h721 = _source108.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2091___mcc_h722 = _source108.dtor_typeArgs;
                DAST._IResolvedType _2092___mcc_h723 = _source108.dtor_resolved;
                DAST._IResolvedType _source109 = _2092___mcc_h723;
                if (_source109.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2093___mcc_h727 = _source109.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2094_recursiveGen;
                    bool _2095_recOwned;
                    bool _2096_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2097_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out775;
                    bool _out776;
                    bool _out777;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out778;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out775, out _out776, out _out777, out _out778);
                    _2094_recursiveGen = _out775;
                    _2095_recOwned = _out776;
                    _2096_recErased = _out777;
                    _2097_recIdents = _out778;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2094_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2095_recOwned;
                    isErased = _2096_recErased;
                    readIdents = _2097_recIdents;
                  }
                } else if (_source109.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2098___mcc_h729 = _source109.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2099_recursiveGen;
                    bool _2100_recOwned;
                    bool _2101_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2102_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out779;
                    bool _out780;
                    bool _out781;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out779, out _out780, out _out781, out _out782);
                    _2099_recursiveGen = _out779;
                    _2100_recOwned = _out780;
                    _2101_recErased = _out781;
                    _2102_recIdents = _out782;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2099_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2100_recOwned;
                    isErased = _2101_recErased;
                    readIdents = _2102_recIdents;
                  }
                } else {
                  DAST._IType _2103___mcc_h731 = _source109.dtor_Newtype_a0;
                  DAST._IType _2104_b = _2103___mcc_h731;
                  {
                    if (object.Equals(_1416_fromTpe, _2104_b)) {
                      Dafny.ISequence<Dafny.Rune> _2105_recursiveGen;
                      bool _2106_recOwned;
                      bool _2107_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2108_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out783;
                      bool _out784;
                      bool _out785;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out786;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out783, out _out784, out _out785, out _out786);
                      _2105_recursiveGen = _out783;
                      _2106_recOwned = _out784;
                      _2107_recErased = _out785;
                      _2108_recIdents = _out786;
                      Dafny.ISequence<Dafny.Rune> _2109_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out787;
                      _out787 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _2109_rhsType = _out787;
                      Dafny.ISequence<Dafny.Rune> _2110_uneraseFn;
                      _2110_uneraseFn = ((_2106_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2109_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2110_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2105_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2106_recOwned;
                      isErased = false;
                      readIdents = _2108_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out788;
                      bool _out789;
                      bool _out790;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out791;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2104_b), _2104_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out788, out _out789, out _out790, out _out791);
                      s = _out788;
                      isOwned = _out789;
                      isErased = _out790;
                      readIdents = _out791;
                    }
                  }
                }
              } else if (_source108.is_Nullable) {
                DAST._IType _2111___mcc_h733 = _source108.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2112_recursiveGen;
                  bool _2113_recOwned;
                  bool _2114_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2115_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out792;
                  bool _out793;
                  bool _out794;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out795;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out792, out _out793, out _out794, out _out795);
                  _2112_recursiveGen = _out792;
                  _2113_recOwned = _out793;
                  _2114_recErased = _out794;
                  _2115_recIdents = _out795;
                  if (!(_2113_recOwned)) {
                    _2112_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2112_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2112_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2114_recErased;
                  readIdents = _2115_recIdents;
                }
              } else if (_source108.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2116___mcc_h735 = _source108.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2117_recursiveGen;
                  bool _2118_recOwned;
                  bool _2119_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2120_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out796;
                  bool _out797;
                  bool _out798;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out799;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out796, out _out797, out _out798, out _out799);
                  _2117_recursiveGen = _out796;
                  _2118_recOwned = _out797;
                  _2119_recErased = _out798;
                  _2120_recIdents = _out799;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2117_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2118_recOwned;
                  isErased = _2119_recErased;
                  readIdents = _2120_recIdents;
                }
              } else if (_source108.is_Array) {
                DAST._IType _2121___mcc_h737 = _source108.dtor_element;
                BigInteger _2122___mcc_h738 = _source108.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2123_recursiveGen;
                  bool _2124_recOwned;
                  bool _2125_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2126_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out800;
                  bool _out801;
                  bool _out802;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out803;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out800, out _out801, out _out802, out _out803);
                  _2123_recursiveGen = _out800;
                  _2124_recOwned = _out801;
                  _2125_recErased = _out802;
                  _2126_recIdents = _out803;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2123_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2124_recOwned;
                  isErased = _2125_recErased;
                  readIdents = _2126_recIdents;
                }
              } else if (_source108.is_Seq) {
                DAST._IType _2127___mcc_h741 = _source108.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2128_recursiveGen;
                  bool _2129_recOwned;
                  bool _2130_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2131_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out804;
                  bool _out805;
                  bool _out806;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out807;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out804, out _out805, out _out806, out _out807);
                  _2128_recursiveGen = _out804;
                  _2129_recOwned = _out805;
                  _2130_recErased = _out806;
                  _2131_recIdents = _out807;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2128_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2129_recOwned;
                  isErased = _2130_recErased;
                  readIdents = _2131_recIdents;
                }
              } else if (_source108.is_Set) {
                DAST._IType _2132___mcc_h743 = _source108.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2133_recursiveGen;
                  bool _2134_recOwned;
                  bool _2135_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2136_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out808;
                  bool _out809;
                  bool _out810;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out811;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out808, out _out809, out _out810, out _out811);
                  _2133_recursiveGen = _out808;
                  _2134_recOwned = _out809;
                  _2135_recErased = _out810;
                  _2136_recIdents = _out811;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2133_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2134_recOwned;
                  isErased = _2135_recErased;
                  readIdents = _2136_recIdents;
                }
              } else if (_source108.is_Multiset) {
                DAST._IType _2137___mcc_h745 = _source108.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2138_recursiveGen;
                  bool _2139_recOwned;
                  bool _2140_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2141_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out812;
                  bool _out813;
                  bool _out814;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out815;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out812, out _out813, out _out814, out _out815);
                  _2138_recursiveGen = _out812;
                  _2139_recOwned = _out813;
                  _2140_recErased = _out814;
                  _2141_recIdents = _out815;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2138_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2139_recOwned;
                  isErased = _2140_recErased;
                  readIdents = _2141_recIdents;
                }
              } else if (_source108.is_Map) {
                DAST._IType _2142___mcc_h747 = _source108.dtor_key;
                DAST._IType _2143___mcc_h748 = _source108.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2144_recursiveGen;
                  bool _2145_recOwned;
                  bool _2146_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2147_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out816;
                  bool _out817;
                  bool _out818;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out819;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out816, out _out817, out _out818, out _out819);
                  _2144_recursiveGen = _out816;
                  _2145_recOwned = _out817;
                  _2146_recErased = _out818;
                  _2147_recIdents = _out819;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2144_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2145_recOwned;
                  isErased = _2146_recErased;
                  readIdents = _2147_recIdents;
                }
              } else if (_source108.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2148___mcc_h751 = _source108.dtor_args;
                DAST._IType _2149___mcc_h752 = _source108.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2150_recursiveGen;
                  bool _2151_recOwned;
                  bool _2152_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2153_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out820;
                  bool _out821;
                  bool _out822;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out823;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out820, out _out821, out _out822, out _out823);
                  _2150_recursiveGen = _out820;
                  _2151_recOwned = _out821;
                  _2152_recErased = _out822;
                  _2153_recIdents = _out823;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2150_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2151_recOwned;
                  isErased = _2152_recErased;
                  readIdents = _2153_recIdents;
                }
              } else if (_source108.is_Primitive) {
                DAST._IPrimitive _2154___mcc_h755 = _source108.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2155_recursiveGen;
                  bool _2156_recOwned;
                  bool _2157_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2158_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out824;
                  bool _out825;
                  bool _out826;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out824, out _out825, out _out826, out _out827);
                  _2155_recursiveGen = _out824;
                  _2156_recOwned = _out825;
                  _2157_recErased = _out826;
                  _2158_recIdents = _out827;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2155_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2156_recOwned;
                  isErased = _2157_recErased;
                  readIdents = _2158_recIdents;
                }
              } else if (_source108.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2159___mcc_h757 = _source108.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2160_recursiveGen;
                  bool _2161_recOwned;
                  bool _2162_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2163_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out828;
                  bool _out829;
                  bool _out830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out831;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out828, out _out829, out _out830, out _out831);
                  _2160_recursiveGen = _out828;
                  _2161_recOwned = _out829;
                  _2162_recErased = _out830;
                  _2163_recIdents = _out831;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2160_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2161_recOwned;
                  isErased = _2162_recErased;
                  readIdents = _2163_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2164___mcc_h759 = _source108.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2165_recursiveGen;
                  bool _2166_recOwned;
                  bool _2167_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2168_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out832;
                  bool _out833;
                  bool _out834;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out835;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out832, out _out833, out _out834, out _out835);
                  _2165_recursiveGen = _out832;
                  _2166_recOwned = _out833;
                  _2167_recErased = _out834;
                  _2168_recIdents = _out835;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2165_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2166_recOwned;
                  isErased = _2167_recErased;
                  readIdents = _2168_recIdents;
                }
              }
            } else if (_source90.is_Map) {
              DAST._IType _2169___mcc_h761 = _source90.dtor_key;
              DAST._IType _2170___mcc_h762 = _source90.dtor_value;
              DAST._IType _source110 = _1423___mcc_h306;
              if (_source110.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2171___mcc_h769 = _source110.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2172___mcc_h770 = _source110.dtor_typeArgs;
                DAST._IResolvedType _2173___mcc_h771 = _source110.dtor_resolved;
                DAST._IResolvedType _source111 = _2173___mcc_h771;
                if (_source111.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2174___mcc_h775 = _source111.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2175_recursiveGen;
                    bool _2176_recOwned;
                    bool _2177_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2178_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out836;
                    bool _out837;
                    bool _out838;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out836, out _out837, out _out838, out _out839);
                    _2175_recursiveGen = _out836;
                    _2176_recOwned = _out837;
                    _2177_recErased = _out838;
                    _2178_recIdents = _out839;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2176_recOwned;
                    isErased = _2177_recErased;
                    readIdents = _2178_recIdents;
                  }
                } else if (_source111.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2179___mcc_h777 = _source111.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2180_recursiveGen;
                    bool _2181_recOwned;
                    bool _2182_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2183_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out840;
                    bool _out841;
                    bool _out842;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out843;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out840, out _out841, out _out842, out _out843);
                    _2180_recursiveGen = _out840;
                    _2181_recOwned = _out841;
                    _2182_recErased = _out842;
                    _2183_recIdents = _out843;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2180_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2181_recOwned;
                    isErased = _2182_recErased;
                    readIdents = _2183_recIdents;
                  }
                } else {
                  DAST._IType _2184___mcc_h779 = _source111.dtor_Newtype_a0;
                  DAST._IType _2185_b = _2184___mcc_h779;
                  {
                    if (object.Equals(_1416_fromTpe, _2185_b)) {
                      Dafny.ISequence<Dafny.Rune> _2186_recursiveGen;
                      bool _2187_recOwned;
                      bool _2188_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2189_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out844;
                      bool _out845;
                      bool _out846;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out844, out _out845, out _out846, out _out847);
                      _2186_recursiveGen = _out844;
                      _2187_recOwned = _out845;
                      _2188_recErased = _out846;
                      _2189_recIdents = _out847;
                      Dafny.ISequence<Dafny.Rune> _2190_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out848;
                      _out848 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _2190_rhsType = _out848;
                      Dafny.ISequence<Dafny.Rune> _2191_uneraseFn;
                      _2191_uneraseFn = ((_2187_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2190_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2191_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2186_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2187_recOwned;
                      isErased = false;
                      readIdents = _2189_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out849;
                      bool _out850;
                      bool _out851;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out852;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2185_b), _2185_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out849, out _out850, out _out851, out _out852);
                      s = _out849;
                      isOwned = _out850;
                      isErased = _out851;
                      readIdents = _out852;
                    }
                  }
                }
              } else if (_source110.is_Nullable) {
                DAST._IType _2192___mcc_h781 = _source110.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2193_recursiveGen;
                  bool _2194_recOwned;
                  bool _2195_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2196_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out853;
                  bool _out854;
                  bool _out855;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out856;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out853, out _out854, out _out855, out _out856);
                  _2193_recursiveGen = _out853;
                  _2194_recOwned = _out854;
                  _2195_recErased = _out855;
                  _2196_recIdents = _out856;
                  if (!(_2194_recOwned)) {
                    _2193_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2193_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2193_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2195_recErased;
                  readIdents = _2196_recIdents;
                }
              } else if (_source110.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2197___mcc_h783 = _source110.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2198_recursiveGen;
                  bool _2199_recOwned;
                  bool _2200_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2201_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out857;
                  bool _out858;
                  bool _out859;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out860;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out857, out _out858, out _out859, out _out860);
                  _2198_recursiveGen = _out857;
                  _2199_recOwned = _out858;
                  _2200_recErased = _out859;
                  _2201_recIdents = _out860;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2198_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2199_recOwned;
                  isErased = _2200_recErased;
                  readIdents = _2201_recIdents;
                }
              } else if (_source110.is_Array) {
                DAST._IType _2202___mcc_h785 = _source110.dtor_element;
                BigInteger _2203___mcc_h786 = _source110.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2204_recursiveGen;
                  bool _2205_recOwned;
                  bool _2206_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2207_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out861;
                  bool _out862;
                  bool _out863;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out864;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out861, out _out862, out _out863, out _out864);
                  _2204_recursiveGen = _out861;
                  _2205_recOwned = _out862;
                  _2206_recErased = _out863;
                  _2207_recIdents = _out864;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2204_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2205_recOwned;
                  isErased = _2206_recErased;
                  readIdents = _2207_recIdents;
                }
              } else if (_source110.is_Seq) {
                DAST._IType _2208___mcc_h789 = _source110.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2209_recursiveGen;
                  bool _2210_recOwned;
                  bool _2211_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2212_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out865;
                  bool _out866;
                  bool _out867;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out865, out _out866, out _out867, out _out868);
                  _2209_recursiveGen = _out865;
                  _2210_recOwned = _out866;
                  _2211_recErased = _out867;
                  _2212_recIdents = _out868;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2209_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2210_recOwned;
                  isErased = _2211_recErased;
                  readIdents = _2212_recIdents;
                }
              } else if (_source110.is_Set) {
                DAST._IType _2213___mcc_h791 = _source110.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2214_recursiveGen;
                  bool _2215_recOwned;
                  bool _2216_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2217_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out869;
                  bool _out870;
                  bool _out871;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out872;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out869, out _out870, out _out871, out _out872);
                  _2214_recursiveGen = _out869;
                  _2215_recOwned = _out870;
                  _2216_recErased = _out871;
                  _2217_recIdents = _out872;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2214_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2215_recOwned;
                  isErased = _2216_recErased;
                  readIdents = _2217_recIdents;
                }
              } else if (_source110.is_Multiset) {
                DAST._IType _2218___mcc_h793 = _source110.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2219_recursiveGen;
                  bool _2220_recOwned;
                  bool _2221_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2222_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out873;
                  bool _out874;
                  bool _out875;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out876;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out873, out _out874, out _out875, out _out876);
                  _2219_recursiveGen = _out873;
                  _2220_recOwned = _out874;
                  _2221_recErased = _out875;
                  _2222_recIdents = _out876;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2219_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2220_recOwned;
                  isErased = _2221_recErased;
                  readIdents = _2222_recIdents;
                }
              } else if (_source110.is_Map) {
                DAST._IType _2223___mcc_h795 = _source110.dtor_key;
                DAST._IType _2224___mcc_h796 = _source110.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2225_recursiveGen;
                  bool _2226_recOwned;
                  bool _2227_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2228_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out877;
                  bool _out878;
                  bool _out879;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out880;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out877, out _out878, out _out879, out _out880);
                  _2225_recursiveGen = _out877;
                  _2226_recOwned = _out878;
                  _2227_recErased = _out879;
                  _2228_recIdents = _out880;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2225_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2226_recOwned;
                  isErased = _2227_recErased;
                  readIdents = _2228_recIdents;
                }
              } else if (_source110.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2229___mcc_h799 = _source110.dtor_args;
                DAST._IType _2230___mcc_h800 = _source110.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2231_recursiveGen;
                  bool _2232_recOwned;
                  bool _2233_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2234_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out881;
                  bool _out882;
                  bool _out883;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out884;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out881, out _out882, out _out883, out _out884);
                  _2231_recursiveGen = _out881;
                  _2232_recOwned = _out882;
                  _2233_recErased = _out883;
                  _2234_recIdents = _out884;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2231_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2232_recOwned;
                  isErased = _2233_recErased;
                  readIdents = _2234_recIdents;
                }
              } else if (_source110.is_Primitive) {
                DAST._IPrimitive _2235___mcc_h803 = _source110.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2236_recursiveGen;
                  bool _2237_recOwned;
                  bool _2238_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2239_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out885;
                  bool _out886;
                  bool _out887;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out885, out _out886, out _out887, out _out888);
                  _2236_recursiveGen = _out885;
                  _2237_recOwned = _out886;
                  _2238_recErased = _out887;
                  _2239_recIdents = _out888;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2236_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2237_recOwned;
                  isErased = _2238_recErased;
                  readIdents = _2239_recIdents;
                }
              } else if (_source110.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2240___mcc_h805 = _source110.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2241_recursiveGen;
                  bool _2242_recOwned;
                  bool _2243_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2244_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out889;
                  bool _out890;
                  bool _out891;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out889, out _out890, out _out891, out _out892);
                  _2241_recursiveGen = _out889;
                  _2242_recOwned = _out890;
                  _2243_recErased = _out891;
                  _2244_recIdents = _out892;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2242_recOwned;
                  isErased = _2243_recErased;
                  readIdents = _2244_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2245___mcc_h807 = _source110.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2246_recursiveGen;
                  bool _2247_recOwned;
                  bool _2248_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2249_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out893;
                  bool _out894;
                  bool _out895;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out896;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out893, out _out894, out _out895, out _out896);
                  _2246_recursiveGen = _out893;
                  _2247_recOwned = _out894;
                  _2248_recErased = _out895;
                  _2249_recIdents = _out896;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2246_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2247_recOwned;
                  isErased = _2248_recErased;
                  readIdents = _2249_recIdents;
                }
              }
            } else if (_source90.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2250___mcc_h809 = _source90.dtor_args;
              DAST._IType _2251___mcc_h810 = _source90.dtor_result;
              DAST._IType _source112 = _1423___mcc_h306;
              if (_source112.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2252___mcc_h817 = _source112.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2253___mcc_h818 = _source112.dtor_typeArgs;
                DAST._IResolvedType _2254___mcc_h819 = _source112.dtor_resolved;
                DAST._IResolvedType _source113 = _2254___mcc_h819;
                if (_source113.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2255___mcc_h823 = _source113.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2256_recursiveGen;
                    bool _2257_recOwned;
                    bool _2258_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2259_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out897;
                    bool _out898;
                    bool _out899;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out900;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out897, out _out898, out _out899, out _out900);
                    _2256_recursiveGen = _out897;
                    _2257_recOwned = _out898;
                    _2258_recErased = _out899;
                    _2259_recIdents = _out900;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2256_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2257_recOwned;
                    isErased = _2258_recErased;
                    readIdents = _2259_recIdents;
                  }
                } else if (_source113.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2260___mcc_h825 = _source113.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2261_recursiveGen;
                    bool _2262_recOwned;
                    bool _2263_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2264_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out901;
                    bool _out902;
                    bool _out903;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out901, out _out902, out _out903, out _out904);
                    _2261_recursiveGen = _out901;
                    _2262_recOwned = _out902;
                    _2263_recErased = _out903;
                    _2264_recIdents = _out904;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2261_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2262_recOwned;
                    isErased = _2263_recErased;
                    readIdents = _2264_recIdents;
                  }
                } else {
                  DAST._IType _2265___mcc_h827 = _source113.dtor_Newtype_a0;
                  DAST._IType _2266_b = _2265___mcc_h827;
                  {
                    if (object.Equals(_1416_fromTpe, _2266_b)) {
                      Dafny.ISequence<Dafny.Rune> _2267_recursiveGen;
                      bool _2268_recOwned;
                      bool _2269_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2270_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out905;
                      bool _out906;
                      bool _out907;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out905, out _out906, out _out907, out _out908);
                      _2267_recursiveGen = _out905;
                      _2268_recOwned = _out906;
                      _2269_recErased = _out907;
                      _2270_recIdents = _out908;
                      Dafny.ISequence<Dafny.Rune> _2271_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out909;
                      _out909 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _2271_rhsType = _out909;
                      Dafny.ISequence<Dafny.Rune> _2272_uneraseFn;
                      _2272_uneraseFn = ((_2268_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2271_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2272_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2268_recOwned;
                      isErased = false;
                      readIdents = _2270_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out910;
                      bool _out911;
                      bool _out912;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2266_b), _2266_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out910, out _out911, out _out912, out _out913);
                      s = _out910;
                      isOwned = _out911;
                      isErased = _out912;
                      readIdents = _out913;
                    }
                  }
                }
              } else if (_source112.is_Nullable) {
                DAST._IType _2273___mcc_h829 = _source112.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2274_recursiveGen;
                  bool _2275_recOwned;
                  bool _2276_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2277_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out914;
                  bool _out915;
                  bool _out916;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out917;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out914, out _out915, out _out916, out _out917);
                  _2274_recursiveGen = _out914;
                  _2275_recOwned = _out915;
                  _2276_recErased = _out916;
                  _2277_recIdents = _out917;
                  if (!(_2275_recOwned)) {
                    _2274_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2274_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2274_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2276_recErased;
                  readIdents = _2277_recIdents;
                }
              } else if (_source112.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2278___mcc_h831 = _source112.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2279_recursiveGen;
                  bool _2280_recOwned;
                  bool _2281_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2282_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out918;
                  bool _out919;
                  bool _out920;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out921;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out918, out _out919, out _out920, out _out921);
                  _2279_recursiveGen = _out918;
                  _2280_recOwned = _out919;
                  _2281_recErased = _out920;
                  _2282_recIdents = _out921;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2279_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2280_recOwned;
                  isErased = _2281_recErased;
                  readIdents = _2282_recIdents;
                }
              } else if (_source112.is_Array) {
                DAST._IType _2283___mcc_h833 = _source112.dtor_element;
                BigInteger _2284___mcc_h834 = _source112.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2285_recursiveGen;
                  bool _2286_recOwned;
                  bool _2287_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2288_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out922;
                  bool _out923;
                  bool _out924;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out925;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out922, out _out923, out _out924, out _out925);
                  _2285_recursiveGen = _out922;
                  _2286_recOwned = _out923;
                  _2287_recErased = _out924;
                  _2288_recIdents = _out925;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2285_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2286_recOwned;
                  isErased = _2287_recErased;
                  readIdents = _2288_recIdents;
                }
              } else if (_source112.is_Seq) {
                DAST._IType _2289___mcc_h837 = _source112.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2290_recursiveGen;
                  bool _2291_recOwned;
                  bool _2292_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2293_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out926;
                  bool _out927;
                  bool _out928;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out929;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out926, out _out927, out _out928, out _out929);
                  _2290_recursiveGen = _out926;
                  _2291_recOwned = _out927;
                  _2292_recErased = _out928;
                  _2293_recIdents = _out929;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2290_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2291_recOwned;
                  isErased = _2292_recErased;
                  readIdents = _2293_recIdents;
                }
              } else if (_source112.is_Set) {
                DAST._IType _2294___mcc_h839 = _source112.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2295_recursiveGen;
                  bool _2296_recOwned;
                  bool _2297_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2298_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out930;
                  bool _out931;
                  bool _out932;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out933;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out930, out _out931, out _out932, out _out933);
                  _2295_recursiveGen = _out930;
                  _2296_recOwned = _out931;
                  _2297_recErased = _out932;
                  _2298_recIdents = _out933;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2295_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2296_recOwned;
                  isErased = _2297_recErased;
                  readIdents = _2298_recIdents;
                }
              } else if (_source112.is_Multiset) {
                DAST._IType _2299___mcc_h841 = _source112.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2300_recursiveGen;
                  bool _2301_recOwned;
                  bool _2302_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2303_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out934;
                  bool _out935;
                  bool _out936;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out937;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out934, out _out935, out _out936, out _out937);
                  _2300_recursiveGen = _out934;
                  _2301_recOwned = _out935;
                  _2302_recErased = _out936;
                  _2303_recIdents = _out937;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2300_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2301_recOwned;
                  isErased = _2302_recErased;
                  readIdents = _2303_recIdents;
                }
              } else if (_source112.is_Map) {
                DAST._IType _2304___mcc_h843 = _source112.dtor_key;
                DAST._IType _2305___mcc_h844 = _source112.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2306_recursiveGen;
                  bool _2307_recOwned;
                  bool _2308_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2309_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out938;
                  bool _out939;
                  bool _out940;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out941;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out938, out _out939, out _out940, out _out941);
                  _2306_recursiveGen = _out938;
                  _2307_recOwned = _out939;
                  _2308_recErased = _out940;
                  _2309_recIdents = _out941;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2306_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2307_recOwned;
                  isErased = _2308_recErased;
                  readIdents = _2309_recIdents;
                }
              } else if (_source112.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2310___mcc_h847 = _source112.dtor_args;
                DAST._IType _2311___mcc_h848 = _source112.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2312_recursiveGen;
                  bool _2313_recOwned;
                  bool _2314_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2315_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out942;
                  bool _out943;
                  bool _out944;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out945;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out942, out _out943, out _out944, out _out945);
                  _2312_recursiveGen = _out942;
                  _2313_recOwned = _out943;
                  _2314_recErased = _out944;
                  _2315_recIdents = _out945;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2312_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2313_recOwned;
                  isErased = _2314_recErased;
                  readIdents = _2315_recIdents;
                }
              } else if (_source112.is_Primitive) {
                DAST._IPrimitive _2316___mcc_h851 = _source112.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2317_recursiveGen;
                  bool _2318_recOwned;
                  bool _2319_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2320_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out946;
                  bool _out947;
                  bool _out948;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out946, out _out947, out _out948, out _out949);
                  _2317_recursiveGen = _out946;
                  _2318_recOwned = _out947;
                  _2319_recErased = _out948;
                  _2320_recIdents = _out949;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2317_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2318_recOwned;
                  isErased = _2319_recErased;
                  readIdents = _2320_recIdents;
                }
              } else if (_source112.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2321___mcc_h853 = _source112.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2322_recursiveGen;
                  bool _2323_recOwned;
                  bool _2324_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2325_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out950;
                  bool _out951;
                  bool _out952;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out950, out _out951, out _out952, out _out953);
                  _2322_recursiveGen = _out950;
                  _2323_recOwned = _out951;
                  _2324_recErased = _out952;
                  _2325_recIdents = _out953;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2322_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2323_recOwned;
                  isErased = _2324_recErased;
                  readIdents = _2325_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2326___mcc_h855 = _source112.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2327_recursiveGen;
                  bool _2328_recOwned;
                  bool _2329_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2330_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out954;
                  bool _out955;
                  bool _out956;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out957;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out954, out _out955, out _out956, out _out957);
                  _2327_recursiveGen = _out954;
                  _2328_recOwned = _out955;
                  _2329_recErased = _out956;
                  _2330_recIdents = _out957;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2327_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2328_recOwned;
                  isErased = _2329_recErased;
                  readIdents = _2330_recIdents;
                }
              }
            } else if (_source90.is_Primitive) {
              DAST._IPrimitive _2331___mcc_h857 = _source90.dtor_Primitive_a0;
              DAST._IPrimitive _source114 = _2331___mcc_h857;
              if (_source114.is_Int) {
                DAST._IType _source115 = _1423___mcc_h306;
                if (_source115.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2332___mcc_h861 = _source115.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2333___mcc_h862 = _source115.dtor_typeArgs;
                  DAST._IResolvedType _2334___mcc_h863 = _source115.dtor_resolved;
                  DAST._IResolvedType _source116 = _2334___mcc_h863;
                  if (_source116.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2335___mcc_h867 = _source116.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2336_recursiveGen;
                      bool _2337_recOwned;
                      bool _2338_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2339_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out958;
                      bool _out959;
                      bool _out960;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out961;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out958, out _out959, out _out960, out _out961);
                      _2336_recursiveGen = _out958;
                      _2337_recOwned = _out959;
                      _2338_recErased = _out960;
                      _2339_recIdents = _out961;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2336_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2337_recOwned;
                      isErased = _2338_recErased;
                      readIdents = _2339_recIdents;
                    }
                  } else if (_source116.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2340___mcc_h869 = _source116.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2341_recursiveGen;
                      bool _2342_recOwned;
                      bool _2343_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2344_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out962;
                      bool _out963;
                      bool _out964;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out962, out _out963, out _out964, out _out965);
                      _2341_recursiveGen = _out962;
                      _2342_recOwned = _out963;
                      _2343_recErased = _out964;
                      _2344_recIdents = _out965;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2341_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2342_recOwned;
                      isErased = _2343_recErased;
                      readIdents = _2344_recIdents;
                    }
                  } else {
                    DAST._IType _2345___mcc_h871 = _source116.dtor_Newtype_a0;
                    DAST._IType _2346_b = _2345___mcc_h871;
                    {
                      if (object.Equals(_1416_fromTpe, _2346_b)) {
                        Dafny.ISequence<Dafny.Rune> _2347_recursiveGen;
                        bool _2348_recOwned;
                        bool _2349_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2350_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out966;
                        bool _out967;
                        bool _out968;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out966, out _out967, out _out968, out _out969);
                        _2347_recursiveGen = _out966;
                        _2348_recOwned = _out967;
                        _2349_recErased = _out968;
                        _2350_recIdents = _out969;
                        Dafny.ISequence<Dafny.Rune> _2351_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out970;
                        _out970 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                        _2351_rhsType = _out970;
                        Dafny.ISequence<Dafny.Rune> _2352_uneraseFn;
                        _2352_uneraseFn = ((_2348_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2351_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2352_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2347_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2348_recOwned;
                        isErased = false;
                        readIdents = _2350_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out971;
                        bool _out972;
                        bool _out973;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2346_b), _2346_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out971, out _out972, out _out973, out _out974);
                        s = _out971;
                        isOwned = _out972;
                        isErased = _out973;
                        readIdents = _out974;
                      }
                    }
                  }
                } else if (_source115.is_Nullable) {
                  DAST._IType _2353___mcc_h873 = _source115.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2354_recursiveGen;
                    bool _2355_recOwned;
                    bool _2356_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2357_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out975;
                    bool _out976;
                    bool _out977;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out978;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out975, out _out976, out _out977, out _out978);
                    _2354_recursiveGen = _out975;
                    _2355_recOwned = _out976;
                    _2356_recErased = _out977;
                    _2357_recIdents = _out978;
                    if (!(_2355_recOwned)) {
                      _2354_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2354_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2354_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2356_recErased;
                    readIdents = _2357_recIdents;
                  }
                } else if (_source115.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2358___mcc_h875 = _source115.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2359_recursiveGen;
                    bool _2360_recOwned;
                    bool _2361_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2362_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out979;
                    bool _out980;
                    bool _out981;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out982;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out979, out _out980, out _out981, out _out982);
                    _2359_recursiveGen = _out979;
                    _2360_recOwned = _out980;
                    _2361_recErased = _out981;
                    _2362_recIdents = _out982;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2359_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2360_recOwned;
                    isErased = _2361_recErased;
                    readIdents = _2362_recIdents;
                  }
                } else if (_source115.is_Array) {
                  DAST._IType _2363___mcc_h877 = _source115.dtor_element;
                  BigInteger _2364___mcc_h878 = _source115.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2365_recursiveGen;
                    bool _2366_recOwned;
                    bool _2367_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2368_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out983;
                    bool _out984;
                    bool _out985;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out986;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out983, out _out984, out _out985, out _out986);
                    _2365_recursiveGen = _out983;
                    _2366_recOwned = _out984;
                    _2367_recErased = _out985;
                    _2368_recIdents = _out986;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2365_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2366_recOwned;
                    isErased = _2367_recErased;
                    readIdents = _2368_recIdents;
                  }
                } else if (_source115.is_Seq) {
                  DAST._IType _2369___mcc_h881 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2370_recursiveGen;
                    bool _2371_recOwned;
                    bool _2372_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2373_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out987;
                    bool _out988;
                    bool _out989;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out990;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out987, out _out988, out _out989, out _out990);
                    _2370_recursiveGen = _out987;
                    _2371_recOwned = _out988;
                    _2372_recErased = _out989;
                    _2373_recIdents = _out990;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2370_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2371_recOwned;
                    isErased = _2372_recErased;
                    readIdents = _2373_recIdents;
                  }
                } else if (_source115.is_Set) {
                  DAST._IType _2374___mcc_h883 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2375_recursiveGen;
                    bool _2376_recOwned;
                    bool _2377_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2378_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out991;
                    bool _out992;
                    bool _out993;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out991, out _out992, out _out993, out _out994);
                    _2375_recursiveGen = _out991;
                    _2376_recOwned = _out992;
                    _2377_recErased = _out993;
                    _2378_recIdents = _out994;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2375_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2376_recOwned;
                    isErased = _2377_recErased;
                    readIdents = _2378_recIdents;
                  }
                } else if (_source115.is_Multiset) {
                  DAST._IType _2379___mcc_h885 = _source115.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2380_recursiveGen;
                    bool _2381_recOwned;
                    bool _2382_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2383_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out995;
                    bool _out996;
                    bool _out997;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out995, out _out996, out _out997, out _out998);
                    _2380_recursiveGen = _out995;
                    _2381_recOwned = _out996;
                    _2382_recErased = _out997;
                    _2383_recIdents = _out998;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2380_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2381_recOwned;
                    isErased = _2382_recErased;
                    readIdents = _2383_recIdents;
                  }
                } else if (_source115.is_Map) {
                  DAST._IType _2384___mcc_h887 = _source115.dtor_key;
                  DAST._IType _2385___mcc_h888 = _source115.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2386_recursiveGen;
                    bool _2387_recOwned;
                    bool _2388_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2389_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out999;
                    bool _out1000;
                    bool _out1001;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out999, out _out1000, out _out1001, out _out1002);
                    _2386_recursiveGen = _out999;
                    _2387_recOwned = _out1000;
                    _2388_recErased = _out1001;
                    _2389_recIdents = _out1002;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2386_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2387_recOwned;
                    isErased = _2388_recErased;
                    readIdents = _2389_recIdents;
                  }
                } else if (_source115.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2390___mcc_h891 = _source115.dtor_args;
                  DAST._IType _2391___mcc_h892 = _source115.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2392_recursiveGen;
                    bool _2393_recOwned;
                    bool _2394_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2395_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1003;
                    bool _out1004;
                    bool _out1005;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1006;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1003, out _out1004, out _out1005, out _out1006);
                    _2392_recursiveGen = _out1003;
                    _2393_recOwned = _out1004;
                    _2394_recErased = _out1005;
                    _2395_recIdents = _out1006;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2392_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2393_recOwned;
                    isErased = _2394_recErased;
                    readIdents = _2395_recIdents;
                  }
                } else if (_source115.is_Primitive) {
                  DAST._IPrimitive _2396___mcc_h895 = _source115.dtor_Primitive_a0;
                  DAST._IPrimitive _source117 = _2396___mcc_h895;
                  if (_source117.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2397_recursiveGen;
                      bool _2398_recOwned;
                      bool _2399_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2400_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1007;
                      bool _out1008;
                      bool _out1009;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1007, out _out1008, out _out1009, out _out1010);
                      _2397_recursiveGen = _out1007;
                      _2398_recOwned = _out1008;
                      _2399_recErased = _out1009;
                      _2400_recIdents = _out1010;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2397_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2398_recOwned;
                      isErased = _2399_recErased;
                      readIdents = _2400_recIdents;
                    }
                  } else if (_source117.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2401_recursiveGen;
                      bool _2402___v46;
                      bool _2403___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2404_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1011;
                      bool _out1012;
                      bool _out1013;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1014;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, true, out _out1011, out _out1012, out _out1013, out _out1014);
                      _2401_recursiveGen = _out1011;
                      _2402___v46 = _out1012;
                      _2403___v47 = _out1013;
                      _2404_recIdents = _out1014;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2401_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2404_recIdents;
                    }
                  } else if (_source117.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2405_recursiveGen;
                      bool _2406_recOwned;
                      bool _2407_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2408_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1015;
                      bool _out1016;
                      bool _out1017;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1018;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1015, out _out1016, out _out1017, out _out1018);
                      _2405_recursiveGen = _out1015;
                      _2406_recOwned = _out1016;
                      _2407_recErased = _out1017;
                      _2408_recIdents = _out1018;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2405_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2406_recOwned;
                      isErased = _2407_recErased;
                      readIdents = _2408_recIdents;
                    }
                  } else if (_source117.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2409_recursiveGen;
                      bool _2410_recOwned;
                      bool _2411_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2412_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1019;
                      bool _out1020;
                      bool _out1021;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1022;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1019, out _out1020, out _out1021, out _out1022);
                      _2409_recursiveGen = _out1019;
                      _2410_recOwned = _out1020;
                      _2411_recErased = _out1021;
                      _2412_recIdents = _out1022;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2409_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2410_recOwned;
                      isErased = _2411_recErased;
                      readIdents = _2412_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2413_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1023;
                      _out1023 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _2413_rhsType = _out1023;
                      Dafny.ISequence<Dafny.Rune> _2414_recursiveGen;
                      bool _2415___v56;
                      bool _2416___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2417_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1024;
                      bool _out1025;
                      bool _out1026;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1027;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, true, out _out1024, out _out1025, out _out1026, out _out1027);
                      _2414_recursiveGen = _out1024;
                      _2415___v56 = _out1025;
                      _2416___v57 = _out1026;
                      _2417_recIdents = _out1027;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2414_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2417_recIdents;
                    }
                  }
                } else if (_source115.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2418___mcc_h897 = _source115.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2419_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1028;
                    _out1028 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                    _2419_rhsType = _out1028;
                    Dafny.ISequence<Dafny.Rune> _2420_recursiveGen;
                    bool _2421___v51;
                    bool _2422___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2423_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1029;
                    bool _out1030;
                    bool _out1031;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, true, out _out1029, out _out1030, out _out1031, out _out1032);
                    _2420_recursiveGen = _out1029;
                    _2421___v51 = _out1030;
                    _2422___v52 = _out1031;
                    _2423_recIdents = _out1032;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2419_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2420_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2423_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2424___mcc_h899 = _source115.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2425_recursiveGen;
                    bool _2426_recOwned;
                    bool _2427_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2428_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1033;
                    bool _out1034;
                    bool _out1035;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1033, out _out1034, out _out1035, out _out1036);
                    _2425_recursiveGen = _out1033;
                    _2426_recOwned = _out1034;
                    _2427_recErased = _out1035;
                    _2428_recIdents = _out1036;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2425_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2426_recOwned;
                    isErased = _2427_recErased;
                    readIdents = _2428_recIdents;
                  }
                }
              } else if (_source114.is_Real) {
                DAST._IType _source118 = _1423___mcc_h306;
                if (_source118.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2429___mcc_h901 = _source118.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2430___mcc_h902 = _source118.dtor_typeArgs;
                  DAST._IResolvedType _2431___mcc_h903 = _source118.dtor_resolved;
                  DAST._IResolvedType _source119 = _2431___mcc_h903;
                  if (_source119.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2432___mcc_h907 = _source119.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2433_recursiveGen;
                      bool _2434_recOwned;
                      bool _2435_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2436_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1037;
                      bool _out1038;
                      bool _out1039;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1037, out _out1038, out _out1039, out _out1040);
                      _2433_recursiveGen = _out1037;
                      _2434_recOwned = _out1038;
                      _2435_recErased = _out1039;
                      _2436_recIdents = _out1040;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2433_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2434_recOwned;
                      isErased = _2435_recErased;
                      readIdents = _2436_recIdents;
                    }
                  } else if (_source119.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2437___mcc_h909 = _source119.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2438_recursiveGen;
                      bool _2439_recOwned;
                      bool _2440_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2441_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1041;
                      bool _out1042;
                      bool _out1043;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1044;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1041, out _out1042, out _out1043, out _out1044);
                      _2438_recursiveGen = _out1041;
                      _2439_recOwned = _out1042;
                      _2440_recErased = _out1043;
                      _2441_recIdents = _out1044;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2438_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2439_recOwned;
                      isErased = _2440_recErased;
                      readIdents = _2441_recIdents;
                    }
                  } else {
                    DAST._IType _2442___mcc_h911 = _source119.dtor_Newtype_a0;
                    DAST._IType _2443_b = _2442___mcc_h911;
                    {
                      if (object.Equals(_1416_fromTpe, _2443_b)) {
                        Dafny.ISequence<Dafny.Rune> _2444_recursiveGen;
                        bool _2445_recOwned;
                        bool _2446_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2447_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1045;
                        bool _out1046;
                        bool _out1047;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1048;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1045, out _out1046, out _out1047, out _out1048);
                        _2444_recursiveGen = _out1045;
                        _2445_recOwned = _out1046;
                        _2446_recErased = _out1047;
                        _2447_recIdents = _out1048;
                        Dafny.ISequence<Dafny.Rune> _2448_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1049;
                        _out1049 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                        _2448_rhsType = _out1049;
                        Dafny.ISequence<Dafny.Rune> _2449_uneraseFn;
                        _2449_uneraseFn = ((_2445_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2448_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2449_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2444_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2445_recOwned;
                        isErased = false;
                        readIdents = _2447_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1050;
                        bool _out1051;
                        bool _out1052;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1053;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2443_b), _2443_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out1050, out _out1051, out _out1052, out _out1053);
                        s = _out1050;
                        isOwned = _out1051;
                        isErased = _out1052;
                        readIdents = _out1053;
                      }
                    }
                  }
                } else if (_source118.is_Nullable) {
                  DAST._IType _2450___mcc_h913 = _source118.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2451_recursiveGen;
                    bool _2452_recOwned;
                    bool _2453_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2454_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1054;
                    bool _out1055;
                    bool _out1056;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1057;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1054, out _out1055, out _out1056, out _out1057);
                    _2451_recursiveGen = _out1054;
                    _2452_recOwned = _out1055;
                    _2453_recErased = _out1056;
                    _2454_recIdents = _out1057;
                    if (!(_2452_recOwned)) {
                      _2451_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2451_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2451_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2453_recErased;
                    readIdents = _2454_recIdents;
                  }
                } else if (_source118.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2455___mcc_h915 = _source118.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2456_recursiveGen;
                    bool _2457_recOwned;
                    bool _2458_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2459_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1058;
                    bool _out1059;
                    bool _out1060;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1061;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1058, out _out1059, out _out1060, out _out1061);
                    _2456_recursiveGen = _out1058;
                    _2457_recOwned = _out1059;
                    _2458_recErased = _out1060;
                    _2459_recIdents = _out1061;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2456_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2457_recOwned;
                    isErased = _2458_recErased;
                    readIdents = _2459_recIdents;
                  }
                } else if (_source118.is_Array) {
                  DAST._IType _2460___mcc_h917 = _source118.dtor_element;
                  BigInteger _2461___mcc_h918 = _source118.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2462_recursiveGen;
                    bool _2463_recOwned;
                    bool _2464_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2465_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1062;
                    bool _out1063;
                    bool _out1064;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1062, out _out1063, out _out1064, out _out1065);
                    _2462_recursiveGen = _out1062;
                    _2463_recOwned = _out1063;
                    _2464_recErased = _out1064;
                    _2465_recIdents = _out1065;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2462_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2463_recOwned;
                    isErased = _2464_recErased;
                    readIdents = _2465_recIdents;
                  }
                } else if (_source118.is_Seq) {
                  DAST._IType _2466___mcc_h921 = _source118.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2467_recursiveGen;
                    bool _2468_recOwned;
                    bool _2469_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2470_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1066;
                    bool _out1067;
                    bool _out1068;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1069;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1066, out _out1067, out _out1068, out _out1069);
                    _2467_recursiveGen = _out1066;
                    _2468_recOwned = _out1067;
                    _2469_recErased = _out1068;
                    _2470_recIdents = _out1069;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2467_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2468_recOwned;
                    isErased = _2469_recErased;
                    readIdents = _2470_recIdents;
                  }
                } else if (_source118.is_Set) {
                  DAST._IType _2471___mcc_h923 = _source118.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2472_recursiveGen;
                    bool _2473_recOwned;
                    bool _2474_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2475_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1070;
                    bool _out1071;
                    bool _out1072;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1073;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1070, out _out1071, out _out1072, out _out1073);
                    _2472_recursiveGen = _out1070;
                    _2473_recOwned = _out1071;
                    _2474_recErased = _out1072;
                    _2475_recIdents = _out1073;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2472_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2473_recOwned;
                    isErased = _2474_recErased;
                    readIdents = _2475_recIdents;
                  }
                } else if (_source118.is_Multiset) {
                  DAST._IType _2476___mcc_h925 = _source118.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2477_recursiveGen;
                    bool _2478_recOwned;
                    bool _2479_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2480_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1074;
                    bool _out1075;
                    bool _out1076;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1077;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1074, out _out1075, out _out1076, out _out1077);
                    _2477_recursiveGen = _out1074;
                    _2478_recOwned = _out1075;
                    _2479_recErased = _out1076;
                    _2480_recIdents = _out1077;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2477_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2478_recOwned;
                    isErased = _2479_recErased;
                    readIdents = _2480_recIdents;
                  }
                } else if (_source118.is_Map) {
                  DAST._IType _2481___mcc_h927 = _source118.dtor_key;
                  DAST._IType _2482___mcc_h928 = _source118.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2483_recursiveGen;
                    bool _2484_recOwned;
                    bool _2485_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2486_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1078;
                    bool _out1079;
                    bool _out1080;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1081;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1078, out _out1079, out _out1080, out _out1081);
                    _2483_recursiveGen = _out1078;
                    _2484_recOwned = _out1079;
                    _2485_recErased = _out1080;
                    _2486_recIdents = _out1081;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2483_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2484_recOwned;
                    isErased = _2485_recErased;
                    readIdents = _2486_recIdents;
                  }
                } else if (_source118.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2487___mcc_h931 = _source118.dtor_args;
                  DAST._IType _2488___mcc_h932 = _source118.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2489_recursiveGen;
                    bool _2490_recOwned;
                    bool _2491_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2492_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1082;
                    bool _out1083;
                    bool _out1084;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1085;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1082, out _out1083, out _out1084, out _out1085);
                    _2489_recursiveGen = _out1082;
                    _2490_recOwned = _out1083;
                    _2491_recErased = _out1084;
                    _2492_recIdents = _out1085;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2489_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2490_recOwned;
                    isErased = _2491_recErased;
                    readIdents = _2492_recIdents;
                  }
                } else if (_source118.is_Primitive) {
                  DAST._IPrimitive _2493___mcc_h935 = _source118.dtor_Primitive_a0;
                  DAST._IPrimitive _source120 = _2493___mcc_h935;
                  if (_source120.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2494_recursiveGen;
                      bool _2495___v48;
                      bool _2496___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2497_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1086;
                      bool _out1087;
                      bool _out1088;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1089;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, false, out _out1086, out _out1087, out _out1088, out _out1089);
                      _2494_recursiveGen = _out1086;
                      _2495___v48 = _out1087;
                      _2496___v49 = _out1088;
                      _2497_recIdents = _out1089;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2494_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2497_recIdents;
                    }
                  } else if (_source120.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2498_recursiveGen;
                      bool _2499_recOwned;
                      bool _2500_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2501_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1090;
                      bool _out1091;
                      bool _out1092;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1093;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1090, out _out1091, out _out1092, out _out1093);
                      _2498_recursiveGen = _out1090;
                      _2499_recOwned = _out1091;
                      _2500_recErased = _out1092;
                      _2501_recIdents = _out1093;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2498_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2499_recOwned;
                      isErased = _2500_recErased;
                      readIdents = _2501_recIdents;
                    }
                  } else if (_source120.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2502_recursiveGen;
                      bool _2503_recOwned;
                      bool _2504_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2505_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1094;
                      bool _out1095;
                      bool _out1096;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1097;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1094, out _out1095, out _out1096, out _out1097);
                      _2502_recursiveGen = _out1094;
                      _2503_recOwned = _out1095;
                      _2504_recErased = _out1096;
                      _2505_recIdents = _out1097;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2502_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2503_recOwned;
                      isErased = _2504_recErased;
                      readIdents = _2505_recIdents;
                    }
                  } else if (_source120.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2506_recursiveGen;
                      bool _2507_recOwned;
                      bool _2508_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2509_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1098;
                      bool _out1099;
                      bool _out1100;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1101;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1098, out _out1099, out _out1100, out _out1101);
                      _2506_recursiveGen = _out1098;
                      _2507_recOwned = _out1099;
                      _2508_recErased = _out1100;
                      _2509_recIdents = _out1101;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2506_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2507_recOwned;
                      isErased = _2508_recErased;
                      readIdents = _2509_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2510_recursiveGen;
                      bool _2511_recOwned;
                      bool _2512_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2513_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1102;
                      bool _out1103;
                      bool _out1104;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1102, out _out1103, out _out1104, out _out1105);
                      _2510_recursiveGen = _out1102;
                      _2511_recOwned = _out1103;
                      _2512_recErased = _out1104;
                      _2513_recIdents = _out1105;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2510_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2511_recOwned;
                      isErased = _2512_recErased;
                      readIdents = _2513_recIdents;
                    }
                  }
                } else if (_source118.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2514___mcc_h937 = _source118.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2515_recursiveGen;
                    bool _2516_recOwned;
                    bool _2517_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2518_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1106;
                    bool _out1107;
                    bool _out1108;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1109;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1106, out _out1107, out _out1108, out _out1109);
                    _2515_recursiveGen = _out1106;
                    _2516_recOwned = _out1107;
                    _2517_recErased = _out1108;
                    _2518_recIdents = _out1109;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2515_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2516_recOwned;
                    isErased = _2517_recErased;
                    readIdents = _2518_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2519___mcc_h939 = _source118.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2520_recursiveGen;
                    bool _2521_recOwned;
                    bool _2522_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2523_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1110;
                    bool _out1111;
                    bool _out1112;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1113;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1110, out _out1111, out _out1112, out _out1113);
                    _2520_recursiveGen = _out1110;
                    _2521_recOwned = _out1111;
                    _2522_recErased = _out1112;
                    _2523_recIdents = _out1113;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2520_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2521_recOwned;
                    isErased = _2522_recErased;
                    readIdents = _2523_recIdents;
                  }
                }
              } else if (_source114.is_String) {
                DAST._IType _source121 = _1423___mcc_h306;
                if (_source121.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2524___mcc_h941 = _source121.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2525___mcc_h942 = _source121.dtor_typeArgs;
                  DAST._IResolvedType _2526___mcc_h943 = _source121.dtor_resolved;
                  DAST._IResolvedType _source122 = _2526___mcc_h943;
                  if (_source122.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2527___mcc_h947 = _source122.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2528_recursiveGen;
                      bool _2529_recOwned;
                      bool _2530_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2531_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1114;
                      bool _out1115;
                      bool _out1116;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1117;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1114, out _out1115, out _out1116, out _out1117);
                      _2528_recursiveGen = _out1114;
                      _2529_recOwned = _out1115;
                      _2530_recErased = _out1116;
                      _2531_recIdents = _out1117;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2528_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2529_recOwned;
                      isErased = _2530_recErased;
                      readIdents = _2531_recIdents;
                    }
                  } else if (_source122.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2532___mcc_h949 = _source122.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2533_recursiveGen;
                      bool _2534_recOwned;
                      bool _2535_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2536_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1118;
                      bool _out1119;
                      bool _out1120;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1118, out _out1119, out _out1120, out _out1121);
                      _2533_recursiveGen = _out1118;
                      _2534_recOwned = _out1119;
                      _2535_recErased = _out1120;
                      _2536_recIdents = _out1121;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2533_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2534_recOwned;
                      isErased = _2535_recErased;
                      readIdents = _2536_recIdents;
                    }
                  } else {
                    DAST._IType _2537___mcc_h951 = _source122.dtor_Newtype_a0;
                    DAST._IType _2538_b = _2537___mcc_h951;
                    {
                      if (object.Equals(_1416_fromTpe, _2538_b)) {
                        Dafny.ISequence<Dafny.Rune> _2539_recursiveGen;
                        bool _2540_recOwned;
                        bool _2541_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2542_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1122;
                        bool _out1123;
                        bool _out1124;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1125;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1122, out _out1123, out _out1124, out _out1125);
                        _2539_recursiveGen = _out1122;
                        _2540_recOwned = _out1123;
                        _2541_recErased = _out1124;
                        _2542_recIdents = _out1125;
                        Dafny.ISequence<Dafny.Rune> _2543_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1126;
                        _out1126 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                        _2543_rhsType = _out1126;
                        Dafny.ISequence<Dafny.Rune> _2544_uneraseFn;
                        _2544_uneraseFn = ((_2540_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2543_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2544_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2539_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2540_recOwned;
                        isErased = false;
                        readIdents = _2542_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1127;
                        bool _out1128;
                        bool _out1129;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1130;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2538_b), _2538_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out1127, out _out1128, out _out1129, out _out1130);
                        s = _out1127;
                        isOwned = _out1128;
                        isErased = _out1129;
                        readIdents = _out1130;
                      }
                    }
                  }
                } else if (_source121.is_Nullable) {
                  DAST._IType _2545___mcc_h953 = _source121.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2546_recursiveGen;
                    bool _2547_recOwned;
                    bool _2548_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2549_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1131;
                    bool _out1132;
                    bool _out1133;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1134;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1131, out _out1132, out _out1133, out _out1134);
                    _2546_recursiveGen = _out1131;
                    _2547_recOwned = _out1132;
                    _2548_recErased = _out1133;
                    _2549_recIdents = _out1134;
                    if (!(_2547_recOwned)) {
                      _2546_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2546_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2546_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2548_recErased;
                    readIdents = _2549_recIdents;
                  }
                } else if (_source121.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2550___mcc_h955 = _source121.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2551_recursiveGen;
                    bool _2552_recOwned;
                    bool _2553_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2554_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1135;
                    bool _out1136;
                    bool _out1137;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1138;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1135, out _out1136, out _out1137, out _out1138);
                    _2551_recursiveGen = _out1135;
                    _2552_recOwned = _out1136;
                    _2553_recErased = _out1137;
                    _2554_recIdents = _out1138;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2551_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2552_recOwned;
                    isErased = _2553_recErased;
                    readIdents = _2554_recIdents;
                  }
                } else if (_source121.is_Array) {
                  DAST._IType _2555___mcc_h957 = _source121.dtor_element;
                  BigInteger _2556___mcc_h958 = _source121.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2557_recursiveGen;
                    bool _2558_recOwned;
                    bool _2559_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2560_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1139;
                    bool _out1140;
                    bool _out1141;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1142;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1139, out _out1140, out _out1141, out _out1142);
                    _2557_recursiveGen = _out1139;
                    _2558_recOwned = _out1140;
                    _2559_recErased = _out1141;
                    _2560_recIdents = _out1142;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2557_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2558_recOwned;
                    isErased = _2559_recErased;
                    readIdents = _2560_recIdents;
                  }
                } else if (_source121.is_Seq) {
                  DAST._IType _2561___mcc_h961 = _source121.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2562_recursiveGen;
                    bool _2563_recOwned;
                    bool _2564_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2565_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1143;
                    bool _out1144;
                    bool _out1145;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1143, out _out1144, out _out1145, out _out1146);
                    _2562_recursiveGen = _out1143;
                    _2563_recOwned = _out1144;
                    _2564_recErased = _out1145;
                    _2565_recIdents = _out1146;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2562_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2563_recOwned;
                    isErased = _2564_recErased;
                    readIdents = _2565_recIdents;
                  }
                } else if (_source121.is_Set) {
                  DAST._IType _2566___mcc_h963 = _source121.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2567_recursiveGen;
                    bool _2568_recOwned;
                    bool _2569_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2570_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1147;
                    bool _out1148;
                    bool _out1149;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1150;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1147, out _out1148, out _out1149, out _out1150);
                    _2567_recursiveGen = _out1147;
                    _2568_recOwned = _out1148;
                    _2569_recErased = _out1149;
                    _2570_recIdents = _out1150;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2567_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2568_recOwned;
                    isErased = _2569_recErased;
                    readIdents = _2570_recIdents;
                  }
                } else if (_source121.is_Multiset) {
                  DAST._IType _2571___mcc_h965 = _source121.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2572_recursiveGen;
                    bool _2573_recOwned;
                    bool _2574_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2575_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1151;
                    bool _out1152;
                    bool _out1153;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1154;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1151, out _out1152, out _out1153, out _out1154);
                    _2572_recursiveGen = _out1151;
                    _2573_recOwned = _out1152;
                    _2574_recErased = _out1153;
                    _2575_recIdents = _out1154;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2572_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2573_recOwned;
                    isErased = _2574_recErased;
                    readIdents = _2575_recIdents;
                  }
                } else if (_source121.is_Map) {
                  DAST._IType _2576___mcc_h967 = _source121.dtor_key;
                  DAST._IType _2577___mcc_h968 = _source121.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2578_recursiveGen;
                    bool _2579_recOwned;
                    bool _2580_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2581_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1155;
                    bool _out1156;
                    bool _out1157;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1158;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1155, out _out1156, out _out1157, out _out1158);
                    _2578_recursiveGen = _out1155;
                    _2579_recOwned = _out1156;
                    _2580_recErased = _out1157;
                    _2581_recIdents = _out1158;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2578_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2579_recOwned;
                    isErased = _2580_recErased;
                    readIdents = _2581_recIdents;
                  }
                } else if (_source121.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2582___mcc_h971 = _source121.dtor_args;
                  DAST._IType _2583___mcc_h972 = _source121.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2584_recursiveGen;
                    bool _2585_recOwned;
                    bool _2586_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2587_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1159;
                    bool _out1160;
                    bool _out1161;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1162;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1159, out _out1160, out _out1161, out _out1162);
                    _2584_recursiveGen = _out1159;
                    _2585_recOwned = _out1160;
                    _2586_recErased = _out1161;
                    _2587_recIdents = _out1162;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2584_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2585_recOwned;
                    isErased = _2586_recErased;
                    readIdents = _2587_recIdents;
                  }
                } else if (_source121.is_Primitive) {
                  DAST._IPrimitive _2588___mcc_h975 = _source121.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2589_recursiveGen;
                    bool _2590_recOwned;
                    bool _2591_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2592_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1163;
                    bool _out1164;
                    bool _out1165;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1163, out _out1164, out _out1165, out _out1166);
                    _2589_recursiveGen = _out1163;
                    _2590_recOwned = _out1164;
                    _2591_recErased = _out1165;
                    _2592_recIdents = _out1166;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2589_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2590_recOwned;
                    isErased = _2591_recErased;
                    readIdents = _2592_recIdents;
                  }
                } else if (_source121.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2593___mcc_h977 = _source121.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2594_recursiveGen;
                    bool _2595_recOwned;
                    bool _2596_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2597_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1167;
                    bool _out1168;
                    bool _out1169;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1170;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1167, out _out1168, out _out1169, out _out1170);
                    _2594_recursiveGen = _out1167;
                    _2595_recOwned = _out1168;
                    _2596_recErased = _out1169;
                    _2597_recIdents = _out1170;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2594_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2595_recOwned;
                    isErased = _2596_recErased;
                    readIdents = _2597_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2598___mcc_h979 = _source121.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2599_recursiveGen;
                    bool _2600_recOwned;
                    bool _2601_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2602_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1171;
                    bool _out1172;
                    bool _out1173;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1174;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1171, out _out1172, out _out1173, out _out1174);
                    _2599_recursiveGen = _out1171;
                    _2600_recOwned = _out1172;
                    _2601_recErased = _out1173;
                    _2602_recIdents = _out1174;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2599_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2600_recOwned;
                    isErased = _2601_recErased;
                    readIdents = _2602_recIdents;
                  }
                }
              } else if (_source114.is_Bool) {
                DAST._IType _source123 = _1423___mcc_h306;
                if (_source123.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2603___mcc_h981 = _source123.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2604___mcc_h982 = _source123.dtor_typeArgs;
                  DAST._IResolvedType _2605___mcc_h983 = _source123.dtor_resolved;
                  DAST._IResolvedType _source124 = _2605___mcc_h983;
                  if (_source124.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2606___mcc_h987 = _source124.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2607_recursiveGen;
                      bool _2608_recOwned;
                      bool _2609_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2610_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1175;
                      bool _out1176;
                      bool _out1177;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1175, out _out1176, out _out1177, out _out1178);
                      _2607_recursiveGen = _out1175;
                      _2608_recOwned = _out1176;
                      _2609_recErased = _out1177;
                      _2610_recIdents = _out1178;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2607_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2608_recOwned;
                      isErased = _2609_recErased;
                      readIdents = _2610_recIdents;
                    }
                  } else if (_source124.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2611___mcc_h989 = _source124.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2612_recursiveGen;
                      bool _2613_recOwned;
                      bool _2614_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2615_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1179;
                      bool _out1180;
                      bool _out1181;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1182;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1179, out _out1180, out _out1181, out _out1182);
                      _2612_recursiveGen = _out1179;
                      _2613_recOwned = _out1180;
                      _2614_recErased = _out1181;
                      _2615_recIdents = _out1182;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2612_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2613_recOwned;
                      isErased = _2614_recErased;
                      readIdents = _2615_recIdents;
                    }
                  } else {
                    DAST._IType _2616___mcc_h991 = _source124.dtor_Newtype_a0;
                    DAST._IType _2617_b = _2616___mcc_h991;
                    {
                      if (object.Equals(_1416_fromTpe, _2617_b)) {
                        Dafny.ISequence<Dafny.Rune> _2618_recursiveGen;
                        bool _2619_recOwned;
                        bool _2620_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2621_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1183;
                        bool _out1184;
                        bool _out1185;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1183, out _out1184, out _out1185, out _out1186);
                        _2618_recursiveGen = _out1183;
                        _2619_recOwned = _out1184;
                        _2620_recErased = _out1185;
                        _2621_recIdents = _out1186;
                        Dafny.ISequence<Dafny.Rune> _2622_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1187;
                        _out1187 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                        _2622_rhsType = _out1187;
                        Dafny.ISequence<Dafny.Rune> _2623_uneraseFn;
                        _2623_uneraseFn = ((_2619_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2622_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2623_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2618_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2619_recOwned;
                        isErased = false;
                        readIdents = _2621_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1188;
                        bool _out1189;
                        bool _out1190;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2617_b), _2617_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out1188, out _out1189, out _out1190, out _out1191);
                        s = _out1188;
                        isOwned = _out1189;
                        isErased = _out1190;
                        readIdents = _out1191;
                      }
                    }
                  }
                } else if (_source123.is_Nullable) {
                  DAST._IType _2624___mcc_h993 = _source123.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2625_recursiveGen;
                    bool _2626_recOwned;
                    bool _2627_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2628_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1192;
                    bool _out1193;
                    bool _out1194;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1195;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1192, out _out1193, out _out1194, out _out1195);
                    _2625_recursiveGen = _out1192;
                    _2626_recOwned = _out1193;
                    _2627_recErased = _out1194;
                    _2628_recIdents = _out1195;
                    if (!(_2626_recOwned)) {
                      _2625_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2625_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2627_recErased;
                    readIdents = _2628_recIdents;
                  }
                } else if (_source123.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2629___mcc_h995 = _source123.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2630_recursiveGen;
                    bool _2631_recOwned;
                    bool _2632_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2633_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1196;
                    bool _out1197;
                    bool _out1198;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1199;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1196, out _out1197, out _out1198, out _out1199);
                    _2630_recursiveGen = _out1196;
                    _2631_recOwned = _out1197;
                    _2632_recErased = _out1198;
                    _2633_recIdents = _out1199;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2630_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2631_recOwned;
                    isErased = _2632_recErased;
                    readIdents = _2633_recIdents;
                  }
                } else if (_source123.is_Array) {
                  DAST._IType _2634___mcc_h997 = _source123.dtor_element;
                  BigInteger _2635___mcc_h998 = _source123.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2636_recursiveGen;
                    bool _2637_recOwned;
                    bool _2638_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2639_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1200;
                    bool _out1201;
                    bool _out1202;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1203;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1200, out _out1201, out _out1202, out _out1203);
                    _2636_recursiveGen = _out1200;
                    _2637_recOwned = _out1201;
                    _2638_recErased = _out1202;
                    _2639_recIdents = _out1203;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2636_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2637_recOwned;
                    isErased = _2638_recErased;
                    readIdents = _2639_recIdents;
                  }
                } else if (_source123.is_Seq) {
                  DAST._IType _2640___mcc_h1001 = _source123.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2641_recursiveGen;
                    bool _2642_recOwned;
                    bool _2643_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2644_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1204;
                    bool _out1205;
                    bool _out1206;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1207;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1204, out _out1205, out _out1206, out _out1207);
                    _2641_recursiveGen = _out1204;
                    _2642_recOwned = _out1205;
                    _2643_recErased = _out1206;
                    _2644_recIdents = _out1207;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2641_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2642_recOwned;
                    isErased = _2643_recErased;
                    readIdents = _2644_recIdents;
                  }
                } else if (_source123.is_Set) {
                  DAST._IType _2645___mcc_h1003 = _source123.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2646_recursiveGen;
                    bool _2647_recOwned;
                    bool _2648_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2649_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1208;
                    bool _out1209;
                    bool _out1210;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1211;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1208, out _out1209, out _out1210, out _out1211);
                    _2646_recursiveGen = _out1208;
                    _2647_recOwned = _out1209;
                    _2648_recErased = _out1210;
                    _2649_recIdents = _out1211;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2646_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2647_recOwned;
                    isErased = _2648_recErased;
                    readIdents = _2649_recIdents;
                  }
                } else if (_source123.is_Multiset) {
                  DAST._IType _2650___mcc_h1005 = _source123.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2651_recursiveGen;
                    bool _2652_recOwned;
                    bool _2653_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2654_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1212;
                    bool _out1213;
                    bool _out1214;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1215;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1212, out _out1213, out _out1214, out _out1215);
                    _2651_recursiveGen = _out1212;
                    _2652_recOwned = _out1213;
                    _2653_recErased = _out1214;
                    _2654_recIdents = _out1215;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2651_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2652_recOwned;
                    isErased = _2653_recErased;
                    readIdents = _2654_recIdents;
                  }
                } else if (_source123.is_Map) {
                  DAST._IType _2655___mcc_h1007 = _source123.dtor_key;
                  DAST._IType _2656___mcc_h1008 = _source123.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2657_recursiveGen;
                    bool _2658_recOwned;
                    bool _2659_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2660_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1216;
                    bool _out1217;
                    bool _out1218;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1219;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1216, out _out1217, out _out1218, out _out1219);
                    _2657_recursiveGen = _out1216;
                    _2658_recOwned = _out1217;
                    _2659_recErased = _out1218;
                    _2660_recIdents = _out1219;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2657_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2658_recOwned;
                    isErased = _2659_recErased;
                    readIdents = _2660_recIdents;
                  }
                } else if (_source123.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2661___mcc_h1011 = _source123.dtor_args;
                  DAST._IType _2662___mcc_h1012 = _source123.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2663_recursiveGen;
                    bool _2664_recOwned;
                    bool _2665_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2666_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1220;
                    bool _out1221;
                    bool _out1222;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1223;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1220, out _out1221, out _out1222, out _out1223);
                    _2663_recursiveGen = _out1220;
                    _2664_recOwned = _out1221;
                    _2665_recErased = _out1222;
                    _2666_recIdents = _out1223;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2663_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2664_recOwned;
                    isErased = _2665_recErased;
                    readIdents = _2666_recIdents;
                  }
                } else if (_source123.is_Primitive) {
                  DAST._IPrimitive _2667___mcc_h1015 = _source123.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2668_recursiveGen;
                    bool _2669_recOwned;
                    bool _2670_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2671_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1224;
                    bool _out1225;
                    bool _out1226;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1224, out _out1225, out _out1226, out _out1227);
                    _2668_recursiveGen = _out1224;
                    _2669_recOwned = _out1225;
                    _2670_recErased = _out1226;
                    _2671_recIdents = _out1227;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2668_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2669_recOwned;
                    isErased = _2670_recErased;
                    readIdents = _2671_recIdents;
                  }
                } else if (_source123.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2672___mcc_h1017 = _source123.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2673_recursiveGen;
                    bool _2674_recOwned;
                    bool _2675_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2676_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1228;
                    bool _out1229;
                    bool _out1230;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1231;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1228, out _out1229, out _out1230, out _out1231);
                    _2673_recursiveGen = _out1228;
                    _2674_recOwned = _out1229;
                    _2675_recErased = _out1230;
                    _2676_recIdents = _out1231;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2673_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2674_recOwned;
                    isErased = _2675_recErased;
                    readIdents = _2676_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2677___mcc_h1019 = _source123.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2678_recursiveGen;
                    bool _2679_recOwned;
                    bool _2680_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2681_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1232;
                    bool _out1233;
                    bool _out1234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1232, out _out1233, out _out1234, out _out1235);
                    _2678_recursiveGen = _out1232;
                    _2679_recOwned = _out1233;
                    _2680_recErased = _out1234;
                    _2681_recIdents = _out1235;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2678_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2679_recOwned;
                    isErased = _2680_recErased;
                    readIdents = _2681_recIdents;
                  }
                }
              } else {
                DAST._IType _source125 = _1423___mcc_h306;
                if (_source125.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2682___mcc_h1021 = _source125.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2683___mcc_h1022 = _source125.dtor_typeArgs;
                  DAST._IResolvedType _2684___mcc_h1023 = _source125.dtor_resolved;
                  DAST._IResolvedType _source126 = _2684___mcc_h1023;
                  if (_source126.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2685___mcc_h1027 = _source126.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2686_recursiveGen;
                      bool _2687_recOwned;
                      bool _2688_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2689_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1236;
                      bool _out1237;
                      bool _out1238;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1239;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1236, out _out1237, out _out1238, out _out1239);
                      _2686_recursiveGen = _out1236;
                      _2687_recOwned = _out1237;
                      _2688_recErased = _out1238;
                      _2689_recIdents = _out1239;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2687_recOwned;
                      isErased = _2688_recErased;
                      readIdents = _2689_recIdents;
                    }
                  } else if (_source126.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2690___mcc_h1029 = _source126.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2691_recursiveGen;
                      bool _2692_recOwned;
                      bool _2693_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2694_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1240;
                      bool _out1241;
                      bool _out1242;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1243;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1240, out _out1241, out _out1242, out _out1243);
                      _2691_recursiveGen = _out1240;
                      _2692_recOwned = _out1241;
                      _2693_recErased = _out1242;
                      _2694_recIdents = _out1243;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2691_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2692_recOwned;
                      isErased = _2693_recErased;
                      readIdents = _2694_recIdents;
                    }
                  } else {
                    DAST._IType _2695___mcc_h1031 = _source126.dtor_Newtype_a0;
                    DAST._IType _2696_b = _2695___mcc_h1031;
                    {
                      if (object.Equals(_1416_fromTpe, _2696_b)) {
                        Dafny.ISequence<Dafny.Rune> _2697_recursiveGen;
                        bool _2698_recOwned;
                        bool _2699_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2700_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1244;
                        bool _out1245;
                        bool _out1246;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
                        DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1244, out _out1245, out _out1246, out _out1247);
                        _2697_recursiveGen = _out1244;
                        _2698_recOwned = _out1245;
                        _2699_recErased = _out1246;
                        _2700_recIdents = _out1247;
                        Dafny.ISequence<Dafny.Rune> _2701_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1248;
                        _out1248 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                        _2701_rhsType = _out1248;
                        Dafny.ISequence<Dafny.Rune> _2702_uneraseFn;
                        _2702_uneraseFn = ((_2698_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2701_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2702_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2697_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2698_recOwned;
                        isErased = false;
                        readIdents = _2700_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1249;
                        bool _out1250;
                        bool _out1251;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1252;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2696_b), _2696_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out1249, out _out1250, out _out1251, out _out1252);
                        s = _out1249;
                        isOwned = _out1250;
                        isErased = _out1251;
                        readIdents = _out1252;
                      }
                    }
                  }
                } else if (_source125.is_Nullable) {
                  DAST._IType _2703___mcc_h1033 = _source125.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2704_recursiveGen;
                    bool _2705_recOwned;
                    bool _2706_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2707_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1253;
                    bool _out1254;
                    bool _out1255;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1256;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1253, out _out1254, out _out1255, out _out1256);
                    _2704_recursiveGen = _out1253;
                    _2705_recOwned = _out1254;
                    _2706_recErased = _out1255;
                    _2707_recIdents = _out1256;
                    if (!(_2705_recOwned)) {
                      _2704_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2704_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2704_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2706_recErased;
                    readIdents = _2707_recIdents;
                  }
                } else if (_source125.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2708___mcc_h1035 = _source125.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2709_recursiveGen;
                    bool _2710_recOwned;
                    bool _2711_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2712_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1257;
                    bool _out1258;
                    bool _out1259;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1260;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1257, out _out1258, out _out1259, out _out1260);
                    _2709_recursiveGen = _out1257;
                    _2710_recOwned = _out1258;
                    _2711_recErased = _out1259;
                    _2712_recIdents = _out1260;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2709_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2710_recOwned;
                    isErased = _2711_recErased;
                    readIdents = _2712_recIdents;
                  }
                } else if (_source125.is_Array) {
                  DAST._IType _2713___mcc_h1037 = _source125.dtor_element;
                  BigInteger _2714___mcc_h1038 = _source125.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2715_recursiveGen;
                    bool _2716_recOwned;
                    bool _2717_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2718_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1261;
                    bool _out1262;
                    bool _out1263;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1264;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1261, out _out1262, out _out1263, out _out1264);
                    _2715_recursiveGen = _out1261;
                    _2716_recOwned = _out1262;
                    _2717_recErased = _out1263;
                    _2718_recIdents = _out1264;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2715_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2716_recOwned;
                    isErased = _2717_recErased;
                    readIdents = _2718_recIdents;
                  }
                } else if (_source125.is_Seq) {
                  DAST._IType _2719___mcc_h1041 = _source125.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2720_recursiveGen;
                    bool _2721_recOwned;
                    bool _2722_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2723_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1265;
                    bool _out1266;
                    bool _out1267;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1265, out _out1266, out _out1267, out _out1268);
                    _2720_recursiveGen = _out1265;
                    _2721_recOwned = _out1266;
                    _2722_recErased = _out1267;
                    _2723_recIdents = _out1268;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2720_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2721_recOwned;
                    isErased = _2722_recErased;
                    readIdents = _2723_recIdents;
                  }
                } else if (_source125.is_Set) {
                  DAST._IType _2724___mcc_h1043 = _source125.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2725_recursiveGen;
                    bool _2726_recOwned;
                    bool _2727_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2728_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1269;
                    bool _out1270;
                    bool _out1271;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1269, out _out1270, out _out1271, out _out1272);
                    _2725_recursiveGen = _out1269;
                    _2726_recOwned = _out1270;
                    _2727_recErased = _out1271;
                    _2728_recIdents = _out1272;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2725_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2726_recOwned;
                    isErased = _2727_recErased;
                    readIdents = _2728_recIdents;
                  }
                } else if (_source125.is_Multiset) {
                  DAST._IType _2729___mcc_h1045 = _source125.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2730_recursiveGen;
                    bool _2731_recOwned;
                    bool _2732_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2733_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1273;
                    bool _out1274;
                    bool _out1275;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1276;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1273, out _out1274, out _out1275, out _out1276);
                    _2730_recursiveGen = _out1273;
                    _2731_recOwned = _out1274;
                    _2732_recErased = _out1275;
                    _2733_recIdents = _out1276;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2730_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2731_recOwned;
                    isErased = _2732_recErased;
                    readIdents = _2733_recIdents;
                  }
                } else if (_source125.is_Map) {
                  DAST._IType _2734___mcc_h1047 = _source125.dtor_key;
                  DAST._IType _2735___mcc_h1048 = _source125.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2736_recursiveGen;
                    bool _2737_recOwned;
                    bool _2738_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2739_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1277;
                    bool _out1278;
                    bool _out1279;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1280;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1277, out _out1278, out _out1279, out _out1280);
                    _2736_recursiveGen = _out1277;
                    _2737_recOwned = _out1278;
                    _2738_recErased = _out1279;
                    _2739_recIdents = _out1280;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2737_recOwned;
                    isErased = _2738_recErased;
                    readIdents = _2739_recIdents;
                  }
                } else if (_source125.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2740___mcc_h1051 = _source125.dtor_args;
                  DAST._IType _2741___mcc_h1052 = _source125.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2742_recursiveGen;
                    bool _2743_recOwned;
                    bool _2744_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2745_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1281;
                    bool _out1282;
                    bool _out1283;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1281, out _out1282, out _out1283, out _out1284);
                    _2742_recursiveGen = _out1281;
                    _2743_recOwned = _out1282;
                    _2744_recErased = _out1283;
                    _2745_recIdents = _out1284;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2742_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2743_recOwned;
                    isErased = _2744_recErased;
                    readIdents = _2745_recIdents;
                  }
                } else if (_source125.is_Primitive) {
                  DAST._IPrimitive _2746___mcc_h1055 = _source125.dtor_Primitive_a0;
                  DAST._IPrimitive _source127 = _2746___mcc_h1055;
                  if (_source127.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2747_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1285;
                      _out1285 = DCOMP.COMP.GenType(_1416_fromTpe, true, false);
                      _2747_rhsType = _out1285;
                      Dafny.ISequence<Dafny.Rune> _2748_recursiveGen;
                      bool _2749___v58;
                      bool _2750___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2751_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1286;
                      bool _out1287;
                      bool _out1288;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1289;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, true, out _out1286, out _out1287, out _out1288, out _out1289);
                      _2748_recursiveGen = _out1286;
                      _2749___v58 = _out1287;
                      _2750___v59 = _out1288;
                      _2751_recIdents = _out1289;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2748_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2751_recIdents;
                    }
                  } else if (_source127.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2752_recursiveGen;
                      bool _2753_recOwned;
                      bool _2754_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2755_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1290;
                      bool _out1291;
                      bool _out1292;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1293;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1290, out _out1291, out _out1292, out _out1293);
                      _2752_recursiveGen = _out1290;
                      _2753_recOwned = _out1291;
                      _2754_recErased = _out1292;
                      _2755_recIdents = _out1293;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2752_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2753_recOwned;
                      isErased = _2754_recErased;
                      readIdents = _2755_recIdents;
                    }
                  } else if (_source127.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2756_recursiveGen;
                      bool _2757_recOwned;
                      bool _2758_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2759_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1294;
                      bool _out1295;
                      bool _out1296;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1297;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1294, out _out1295, out _out1296, out _out1297);
                      _2756_recursiveGen = _out1294;
                      _2757_recOwned = _out1295;
                      _2758_recErased = _out1296;
                      _2759_recIdents = _out1297;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2756_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2757_recOwned;
                      isErased = _2758_recErased;
                      readIdents = _2759_recIdents;
                    }
                  } else if (_source127.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2760_recursiveGen;
                      bool _2761_recOwned;
                      bool _2762_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2763_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1298;
                      bool _out1299;
                      bool _out1300;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1301;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1298, out _out1299, out _out1300, out _out1301);
                      _2760_recursiveGen = _out1298;
                      _2761_recOwned = _out1299;
                      _2762_recErased = _out1300;
                      _2763_recIdents = _out1301;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2760_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2761_recOwned;
                      isErased = _2762_recErased;
                      readIdents = _2763_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2764_recursiveGen;
                      bool _2765_recOwned;
                      bool _2766_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2767_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1302;
                      bool _out1303;
                      bool _out1304;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1302, out _out1303, out _out1304, out _out1305);
                      _2764_recursiveGen = _out1302;
                      _2765_recOwned = _out1303;
                      _2766_recErased = _out1304;
                      _2767_recIdents = _out1305;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2764_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2765_recOwned;
                      isErased = _2766_recErased;
                      readIdents = _2767_recIdents;
                    }
                  }
                } else if (_source125.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2768___mcc_h1057 = _source125.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2769_recursiveGen;
                    bool _2770_recOwned;
                    bool _2771_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2772_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1306;
                    bool _out1307;
                    bool _out1308;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1309;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1306, out _out1307, out _out1308, out _out1309);
                    _2769_recursiveGen = _out1306;
                    _2770_recOwned = _out1307;
                    _2771_recErased = _out1308;
                    _2772_recIdents = _out1309;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2769_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2770_recOwned;
                    isErased = _2771_recErased;
                    readIdents = _2772_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2773___mcc_h1059 = _source125.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2774_recursiveGen;
                    bool _2775_recOwned;
                    bool _2776_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2777_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1310;
                    bool _out1311;
                    bool _out1312;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1310, out _out1311, out _out1312, out _out1313);
                    _2774_recursiveGen = _out1310;
                    _2775_recOwned = _out1311;
                    _2776_recErased = _out1312;
                    _2777_recIdents = _out1313;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2774_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2775_recOwned;
                    isErased = _2776_recErased;
                    readIdents = _2777_recIdents;
                  }
                }
              }
            } else if (_source90.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2778___mcc_h1061 = _source90.dtor_Passthrough_a0;
              DAST._IType _source128 = _1423___mcc_h306;
              if (_source128.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2779___mcc_h1065 = _source128.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2780___mcc_h1066 = _source128.dtor_typeArgs;
                DAST._IResolvedType _2781___mcc_h1067 = _source128.dtor_resolved;
                DAST._IResolvedType _source129 = _2781___mcc_h1067;
                if (_source129.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2782___mcc_h1071 = _source129.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2783_recursiveGen;
                    bool _2784_recOwned;
                    bool _2785_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2786_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1314;
                    bool _out1315;
                    bool _out1316;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1317;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1314, out _out1315, out _out1316, out _out1317);
                    _2783_recursiveGen = _out1314;
                    _2784_recOwned = _out1315;
                    _2785_recErased = _out1316;
                    _2786_recIdents = _out1317;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2783_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2784_recOwned;
                    isErased = _2785_recErased;
                    readIdents = _2786_recIdents;
                  }
                } else if (_source129.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2787___mcc_h1073 = _source129.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2788_recursiveGen;
                    bool _2789_recOwned;
                    bool _2790_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2791_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1318;
                    bool _out1319;
                    bool _out1320;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1321;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1318, out _out1319, out _out1320, out _out1321);
                    _2788_recursiveGen = _out1318;
                    _2789_recOwned = _out1319;
                    _2790_recErased = _out1320;
                    _2791_recIdents = _out1321;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2788_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2789_recOwned;
                    isErased = _2790_recErased;
                    readIdents = _2791_recIdents;
                  }
                } else {
                  DAST._IType _2792___mcc_h1075 = _source129.dtor_Newtype_a0;
                  DAST._IType _2793_b = _2792___mcc_h1075;
                  {
                    if (object.Equals(_1416_fromTpe, _2793_b)) {
                      Dafny.ISequence<Dafny.Rune> _2794_recursiveGen;
                      bool _2795_recOwned;
                      bool _2796_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2797_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1322;
                      bool _out1323;
                      bool _out1324;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1322, out _out1323, out _out1324, out _out1325);
                      _2794_recursiveGen = _out1322;
                      _2795_recOwned = _out1323;
                      _2796_recErased = _out1324;
                      _2797_recIdents = _out1325;
                      Dafny.ISequence<Dafny.Rune> _2798_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1326;
                      _out1326 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _2798_rhsType = _out1326;
                      Dafny.ISequence<Dafny.Rune> _2799_uneraseFn;
                      _2799_uneraseFn = ((_2795_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2798_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2799_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2794_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2795_recOwned;
                      isErased = false;
                      readIdents = _2797_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1327;
                      bool _out1328;
                      bool _out1329;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1330;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2793_b), _2793_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out1327, out _out1328, out _out1329, out _out1330);
                      s = _out1327;
                      isOwned = _out1328;
                      isErased = _out1329;
                      readIdents = _out1330;
                    }
                  }
                }
              } else if (_source128.is_Nullable) {
                DAST._IType _2800___mcc_h1077 = _source128.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2801_recursiveGen;
                  bool _2802_recOwned;
                  bool _2803_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2804_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1331;
                  bool _out1332;
                  bool _out1333;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1334;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1331, out _out1332, out _out1333, out _out1334);
                  _2801_recursiveGen = _out1331;
                  _2802_recOwned = _out1332;
                  _2803_recErased = _out1333;
                  _2804_recIdents = _out1334;
                  if (!(_2802_recOwned)) {
                    _2801_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2801_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2801_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2803_recErased;
                  readIdents = _2804_recIdents;
                }
              } else if (_source128.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2805___mcc_h1079 = _source128.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2806_recursiveGen;
                  bool _2807_recOwned;
                  bool _2808_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2809_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1335;
                  bool _out1336;
                  bool _out1337;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1335, out _out1336, out _out1337, out _out1338);
                  _2806_recursiveGen = _out1335;
                  _2807_recOwned = _out1336;
                  _2808_recErased = _out1337;
                  _2809_recIdents = _out1338;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2806_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2807_recOwned;
                  isErased = _2808_recErased;
                  readIdents = _2809_recIdents;
                }
              } else if (_source128.is_Array) {
                DAST._IType _2810___mcc_h1081 = _source128.dtor_element;
                BigInteger _2811___mcc_h1082 = _source128.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2812_recursiveGen;
                  bool _2813_recOwned;
                  bool _2814_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2815_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1339;
                  bool _out1340;
                  bool _out1341;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1342;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1339, out _out1340, out _out1341, out _out1342);
                  _2812_recursiveGen = _out1339;
                  _2813_recOwned = _out1340;
                  _2814_recErased = _out1341;
                  _2815_recIdents = _out1342;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2812_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2813_recOwned;
                  isErased = _2814_recErased;
                  readIdents = _2815_recIdents;
                }
              } else if (_source128.is_Seq) {
                DAST._IType _2816___mcc_h1085 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2817_recursiveGen;
                  bool _2818_recOwned;
                  bool _2819_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2820_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1343;
                  bool _out1344;
                  bool _out1345;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1346;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1343, out _out1344, out _out1345, out _out1346);
                  _2817_recursiveGen = _out1343;
                  _2818_recOwned = _out1344;
                  _2819_recErased = _out1345;
                  _2820_recIdents = _out1346;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2817_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2818_recOwned;
                  isErased = _2819_recErased;
                  readIdents = _2820_recIdents;
                }
              } else if (_source128.is_Set) {
                DAST._IType _2821___mcc_h1087 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2822_recursiveGen;
                  bool _2823_recOwned;
                  bool _2824_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2825_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1347;
                  bool _out1348;
                  bool _out1349;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1350;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1347, out _out1348, out _out1349, out _out1350);
                  _2822_recursiveGen = _out1347;
                  _2823_recOwned = _out1348;
                  _2824_recErased = _out1349;
                  _2825_recIdents = _out1350;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2823_recOwned;
                  isErased = _2824_recErased;
                  readIdents = _2825_recIdents;
                }
              } else if (_source128.is_Multiset) {
                DAST._IType _2826___mcc_h1089 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2827_recursiveGen;
                  bool _2828_recOwned;
                  bool _2829_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2830_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1351;
                  bool _out1352;
                  bool _out1353;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                  _2827_recursiveGen = _out1351;
                  _2828_recOwned = _out1352;
                  _2829_recErased = _out1353;
                  _2830_recIdents = _out1354;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2828_recOwned;
                  isErased = _2829_recErased;
                  readIdents = _2830_recIdents;
                }
              } else if (_source128.is_Map) {
                DAST._IType _2831___mcc_h1091 = _source128.dtor_key;
                DAST._IType _2832___mcc_h1092 = _source128.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2833_recursiveGen;
                  bool _2834_recOwned;
                  bool _2835_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2836_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1355;
                  bool _out1356;
                  bool _out1357;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                  _2833_recursiveGen = _out1355;
                  _2834_recOwned = _out1356;
                  _2835_recErased = _out1357;
                  _2836_recIdents = _out1358;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2833_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2834_recOwned;
                  isErased = _2835_recErased;
                  readIdents = _2836_recIdents;
                }
              } else if (_source128.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2837___mcc_h1095 = _source128.dtor_args;
                DAST._IType _2838___mcc_h1096 = _source128.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2839_recursiveGen;
                  bool _2840_recOwned;
                  bool _2841_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2842_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1359;
                  bool _out1360;
                  bool _out1361;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1359, out _out1360, out _out1361, out _out1362);
                  _2839_recursiveGen = _out1359;
                  _2840_recOwned = _out1360;
                  _2841_recErased = _out1361;
                  _2842_recIdents = _out1362;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2839_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2840_recOwned;
                  isErased = _2841_recErased;
                  readIdents = _2842_recIdents;
                }
              } else if (_source128.is_Primitive) {
                DAST._IPrimitive _2843___mcc_h1099 = _source128.dtor_Primitive_a0;
                DAST._IPrimitive _source130 = _2843___mcc_h1099;
                if (_source130.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2844_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1363;
                    _out1363 = DCOMP.COMP.GenType(_1416_fromTpe, true, false);
                    _2844_rhsType = _out1363;
                    Dafny.ISequence<Dafny.Rune> _2845_recursiveGen;
                    bool _2846___v54;
                    bool _2847___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2848_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1364;
                    bool _out1365;
                    bool _out1366;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1367;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, true, out _out1364, out _out1365, out _out1366, out _out1367);
                    _2845_recursiveGen = _out1364;
                    _2846___v54 = _out1365;
                    _2847___v55 = _out1366;
                    _2848_recIdents = _out1367;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2845_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2848_recIdents;
                  }
                } else if (_source130.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2849_recursiveGen;
                    bool _2850_recOwned;
                    bool _2851_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2852_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1368;
                    bool _out1369;
                    bool _out1370;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                    _2849_recursiveGen = _out1368;
                    _2850_recOwned = _out1369;
                    _2851_recErased = _out1370;
                    _2852_recIdents = _out1371;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2849_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2850_recOwned;
                    isErased = _2851_recErased;
                    readIdents = _2852_recIdents;
                  }
                } else if (_source130.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2853_recursiveGen;
                    bool _2854_recOwned;
                    bool _2855_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2856_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1372;
                    bool _out1373;
                    bool _out1374;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                    _2853_recursiveGen = _out1372;
                    _2854_recOwned = _out1373;
                    _2855_recErased = _out1374;
                    _2856_recIdents = _out1375;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2853_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2854_recOwned;
                    isErased = _2855_recErased;
                    readIdents = _2856_recIdents;
                  }
                } else if (_source130.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2857_recursiveGen;
                    bool _2858_recOwned;
                    bool _2859_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2860_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1376;
                    bool _out1377;
                    bool _out1378;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1376, out _out1377, out _out1378, out _out1379);
                    _2857_recursiveGen = _out1376;
                    _2858_recOwned = _out1377;
                    _2859_recErased = _out1378;
                    _2860_recIdents = _out1379;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2857_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2858_recOwned;
                    isErased = _2859_recErased;
                    readIdents = _2860_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2861_recursiveGen;
                    bool _2862_recOwned;
                    bool _2863_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2864_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1380;
                    bool _out1381;
                    bool _out1382;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1383;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1380, out _out1381, out _out1382, out _out1383);
                    _2861_recursiveGen = _out1380;
                    _2862_recOwned = _out1381;
                    _2863_recErased = _out1382;
                    _2864_recIdents = _out1383;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2861_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2862_recOwned;
                    isErased = _2863_recErased;
                    readIdents = _2864_recIdents;
                  }
                }
              } else if (_source128.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2865___mcc_h1101 = _source128.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2866_recursiveGen;
                  bool _2867___v62;
                  bool _2868___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2869_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1384;
                  bool _out1385;
                  bool _out1386;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1387;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, true, out _out1384, out _out1385, out _out1386, out _out1387);
                  _2866_recursiveGen = _out1384;
                  _2867___v62 = _out1385;
                  _2868___v63 = _out1386;
                  _2869_recIdents = _out1387;
                  Dafny.ISequence<Dafny.Rune> _2870_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1388;
                  _out1388 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                  _2870_toTpeGen = _out1388;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2866_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2870_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2869_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2871___mcc_h1103 = _source128.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2872_recursiveGen;
                  bool _2873_recOwned;
                  bool _2874_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2875_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1389;
                  bool _out1390;
                  bool _out1391;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1392;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1389, out _out1390, out _out1391, out _out1392);
                  _2872_recursiveGen = _out1389;
                  _2873_recOwned = _out1390;
                  _2874_recErased = _out1391;
                  _2875_recIdents = _out1392;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2872_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2873_recOwned;
                  isErased = _2874_recErased;
                  readIdents = _2875_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2876___mcc_h1105 = _source90.dtor_TypeArg_a0;
              DAST._IType _source131 = _1423___mcc_h306;
              if (_source131.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2877___mcc_h1109 = _source131.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2878___mcc_h1110 = _source131.dtor_typeArgs;
                DAST._IResolvedType _2879___mcc_h1111 = _source131.dtor_resolved;
                DAST._IResolvedType _source132 = _2879___mcc_h1111;
                if (_source132.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2880___mcc_h1115 = _source132.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2881_recursiveGen;
                    bool _2882_recOwned;
                    bool _2883_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2884_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1393;
                    bool _out1394;
                    bool _out1395;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1396;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1393, out _out1394, out _out1395, out _out1396);
                    _2881_recursiveGen = _out1393;
                    _2882_recOwned = _out1394;
                    _2883_recErased = _out1395;
                    _2884_recIdents = _out1396;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2881_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2882_recOwned;
                    isErased = _2883_recErased;
                    readIdents = _2884_recIdents;
                  }
                } else if (_source132.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2885___mcc_h1117 = _source132.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2886_recursiveGen;
                    bool _2887_recOwned;
                    bool _2888_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2889_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1397;
                    bool _out1398;
                    bool _out1399;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1400;
                    DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1397, out _out1398, out _out1399, out _out1400);
                    _2886_recursiveGen = _out1397;
                    _2887_recOwned = _out1398;
                    _2888_recErased = _out1399;
                    _2889_recIdents = _out1400;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2886_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2887_recOwned;
                    isErased = _2888_recErased;
                    readIdents = _2889_recIdents;
                  }
                } else {
                  DAST._IType _2890___mcc_h1119 = _source132.dtor_Newtype_a0;
                  DAST._IType _2891_b = _2890___mcc_h1119;
                  {
                    if (object.Equals(_1416_fromTpe, _2891_b)) {
                      Dafny.ISequence<Dafny.Rune> _2892_recursiveGen;
                      bool _2893_recOwned;
                      bool _2894_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2895_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1401;
                      bool _out1402;
                      bool _out1403;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
                      DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1401, out _out1402, out _out1403, out _out1404);
                      _2892_recursiveGen = _out1401;
                      _2893_recOwned = _out1402;
                      _2894_recErased = _out1403;
                      _2895_recIdents = _out1404;
                      Dafny.ISequence<Dafny.Rune> _2896_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1405;
                      _out1405 = DCOMP.COMP.GenType(_1415_toTpe, true, false);
                      _2896_rhsType = _out1405;
                      Dafny.ISequence<Dafny.Rune> _2897_uneraseFn;
                      _2897_uneraseFn = ((_2893_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2896_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2897_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2892_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2893_recOwned;
                      isErased = false;
                      readIdents = _2895_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1406;
                      bool _out1407;
                      bool _out1408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1409;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1417_expr, _1416_fromTpe, _2891_b), _2891_b, _1415_toTpe), selfIdent, @params, mustOwn, out _out1406, out _out1407, out _out1408, out _out1409);
                      s = _out1406;
                      isOwned = _out1407;
                      isErased = _out1408;
                      readIdents = _out1409;
                    }
                  }
                }
              } else if (_source131.is_Nullable) {
                DAST._IType _2898___mcc_h1121 = _source131.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2899_recursiveGen;
                  bool _2900_recOwned;
                  bool _2901_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2902_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1410;
                  bool _out1411;
                  bool _out1412;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1413;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1410, out _out1411, out _out1412, out _out1413);
                  _2899_recursiveGen = _out1410;
                  _2900_recOwned = _out1411;
                  _2901_recErased = _out1412;
                  _2902_recIdents = _out1413;
                  if (!(_2900_recOwned)) {
                    _2899_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2899_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2899_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2901_recErased;
                  readIdents = _2902_recIdents;
                }
              } else if (_source131.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2903___mcc_h1123 = _source131.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2904_recursiveGen;
                  bool _2905_recOwned;
                  bool _2906_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2907_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1414;
                  bool _out1415;
                  bool _out1416;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1417;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1414, out _out1415, out _out1416, out _out1417);
                  _2904_recursiveGen = _out1414;
                  _2905_recOwned = _out1415;
                  _2906_recErased = _out1416;
                  _2907_recIdents = _out1417;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2904_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2905_recOwned;
                  isErased = _2906_recErased;
                  readIdents = _2907_recIdents;
                }
              } else if (_source131.is_Array) {
                DAST._IType _2908___mcc_h1125 = _source131.dtor_element;
                BigInteger _2909___mcc_h1126 = _source131.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2910_recursiveGen;
                  bool _2911_recOwned;
                  bool _2912_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2913_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1418;
                  bool _out1419;
                  bool _out1420;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1421;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1418, out _out1419, out _out1420, out _out1421);
                  _2910_recursiveGen = _out1418;
                  _2911_recOwned = _out1419;
                  _2912_recErased = _out1420;
                  _2913_recIdents = _out1421;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2910_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2911_recOwned;
                  isErased = _2912_recErased;
                  readIdents = _2913_recIdents;
                }
              } else if (_source131.is_Seq) {
                DAST._IType _2914___mcc_h1129 = _source131.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2915_recursiveGen;
                  bool _2916_recOwned;
                  bool _2917_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2918_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1422;
                  bool _out1423;
                  bool _out1424;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1425;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1422, out _out1423, out _out1424, out _out1425);
                  _2915_recursiveGen = _out1422;
                  _2916_recOwned = _out1423;
                  _2917_recErased = _out1424;
                  _2918_recIdents = _out1425;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2915_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2916_recOwned;
                  isErased = _2917_recErased;
                  readIdents = _2918_recIdents;
                }
              } else if (_source131.is_Set) {
                DAST._IType _2919___mcc_h1131 = _source131.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2920_recursiveGen;
                  bool _2921_recOwned;
                  bool _2922_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2923_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1426;
                  bool _out1427;
                  bool _out1428;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1429;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1426, out _out1427, out _out1428, out _out1429);
                  _2920_recursiveGen = _out1426;
                  _2921_recOwned = _out1427;
                  _2922_recErased = _out1428;
                  _2923_recIdents = _out1429;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2920_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2921_recOwned;
                  isErased = _2922_recErased;
                  readIdents = _2923_recIdents;
                }
              } else if (_source131.is_Multiset) {
                DAST._IType _2924___mcc_h1133 = _source131.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2925_recursiveGen;
                  bool _2926_recOwned;
                  bool _2927_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2928_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1430;
                  bool _out1431;
                  bool _out1432;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1433;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1430, out _out1431, out _out1432, out _out1433);
                  _2925_recursiveGen = _out1430;
                  _2926_recOwned = _out1431;
                  _2927_recErased = _out1432;
                  _2928_recIdents = _out1433;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2926_recOwned;
                  isErased = _2927_recErased;
                  readIdents = _2928_recIdents;
                }
              } else if (_source131.is_Map) {
                DAST._IType _2929___mcc_h1135 = _source131.dtor_key;
                DAST._IType _2930___mcc_h1136 = _source131.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2931_recursiveGen;
                  bool _2932_recOwned;
                  bool _2933_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2934_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1434;
                  bool _out1435;
                  bool _out1436;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1437;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1434, out _out1435, out _out1436, out _out1437);
                  _2931_recursiveGen = _out1434;
                  _2932_recOwned = _out1435;
                  _2933_recErased = _out1436;
                  _2934_recIdents = _out1437;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2931_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2932_recOwned;
                  isErased = _2933_recErased;
                  readIdents = _2934_recIdents;
                }
              } else if (_source131.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2935___mcc_h1139 = _source131.dtor_args;
                DAST._IType _2936___mcc_h1140 = _source131.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2937_recursiveGen;
                  bool _2938_recOwned;
                  bool _2939_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2940_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1438;
                  bool _out1439;
                  bool _out1440;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1441;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1438, out _out1439, out _out1440, out _out1441);
                  _2937_recursiveGen = _out1438;
                  _2938_recOwned = _out1439;
                  _2939_recErased = _out1440;
                  _2940_recIdents = _out1441;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2937_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2938_recOwned;
                  isErased = _2939_recErased;
                  readIdents = _2940_recIdents;
                }
              } else if (_source131.is_Primitive) {
                DAST._IPrimitive _2941___mcc_h1143 = _source131.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2942_recursiveGen;
                  bool _2943_recOwned;
                  bool _2944_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2945_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1442;
                  bool _out1443;
                  bool _out1444;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1445;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1442, out _out1443, out _out1444, out _out1445);
                  _2942_recursiveGen = _out1442;
                  _2943_recOwned = _out1443;
                  _2944_recErased = _out1444;
                  _2945_recIdents = _out1445;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2942_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2943_recOwned;
                  isErased = _2944_recErased;
                  readIdents = _2945_recIdents;
                }
              } else if (_source131.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2946___mcc_h1145 = _source131.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2947_recursiveGen;
                  bool _2948_recOwned;
                  bool _2949_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2950_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1446;
                  bool _out1447;
                  bool _out1448;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1446, out _out1447, out _out1448, out _out1449);
                  _2947_recursiveGen = _out1446;
                  _2948_recOwned = _out1447;
                  _2949_recErased = _out1448;
                  _2950_recIdents = _out1449;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2947_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2948_recOwned;
                  isErased = _2949_recErased;
                  readIdents = _2950_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2951___mcc_h1147 = _source131.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2952_recursiveGen;
                  bool _2953_recOwned;
                  bool _2954_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2955_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1450;
                  bool _out1451;
                  bool _out1452;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1453;
                  DCOMP.COMP.GenExpr(_1417_expr, selfIdent, @params, mustOwn, out _out1450, out _out1451, out _out1452, out _out1453);
                  _2952_recursiveGen = _out1450;
                  _2953_recOwned = _out1451;
                  _2954_recErased = _out1452;
                  _2955_recIdents = _out1453;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2952_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2953_recOwned;
                  isErased = _2954_recErased;
                  readIdents = _2955_recIdents;
                }
              }
            }
          }
        }
      } else if (_source83.is_SeqConstruct) {
        DAST._IExpression _2956___mcc_h26 = _source83.dtor_length;
        DAST._IExpression _2957___mcc_h27 = _source83.dtor_elem;
        DAST._IExpression _2958_expr = _2957___mcc_h27;
        DAST._IExpression _2959_length = _2956___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2960_recursiveGen;
          bool _2961___v65;
          bool _2962_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2963_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1454;
          bool _out1455;
          bool _out1456;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
          DCOMP.COMP.GenExpr(_2958_expr, selfIdent, @params, true, out _out1454, out _out1455, out _out1456, out _out1457);
          _2960_recursiveGen = _out1454;
          _2961___v65 = _out1455;
          _2962_eErased = _out1456;
          _2963_recIdents = _out1457;
          Dafny.ISequence<Dafny.Rune> _2964_lengthGen;
          bool _2965___v66;
          bool _2966_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2967_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1458;
          bool _out1459;
          bool _out1460;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
          DCOMP.COMP.GenExpr(_2959_length, selfIdent, @params, true, out _out1458, out _out1459, out _out1460, out _out1461);
          _2964_lengthGen = _out1458;
          _2965___v66 = _out1459;
          _2966_lengthErased = _out1460;
          _2967_lengthIdents = _out1461;
          if (!(_2966_lengthErased)) {
            _2964_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2964_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2960_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2964_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2963_recIdents, _2967_lengthIdents);
          isOwned = true;
          isErased = _2962_eErased;
        }
      } else if (_source83.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2968___mcc_h28 = _source83.dtor_elements;
        DAST._IType _2969___mcc_h29 = _source83.dtor_typ;
        DAST._IType _2970_typ = _2969___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2971_exprs = _2968___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2972_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1462;
          _out1462 = DCOMP.COMP.GenType(_2970_typ, false, false);
          _2972_genTpe = _out1462;
          BigInteger _2973_i;
          _2973_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2973_i = BigInteger.Zero;
          while ((_2973_i) < (new BigInteger((_2971_exprs).Count))) {
            if ((_2973_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2974_recursiveGen;
            bool _2975___v67;
            bool _2976_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2977_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1463;
            bool _out1464;
            bool _out1465;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1466;
            DCOMP.COMP.GenExpr((_2971_exprs).Select(_2973_i), selfIdent, @params, true, out _out1463, out _out1464, out _out1465, out _out1466);
            _2974_recursiveGen = _out1463;
            _2975___v67 = _out1464;
            _2976_isErased = _out1465;
            _2977_recIdents = _out1466;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2977_recIdents);
            if (_2976_isErased) {
              _2974_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2974_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2974_recursiveGen);
            _2973_i = (_2973_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2972_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source83.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2978___mcc_h30 = _source83.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2979_exprs = _2978___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2980_generatedValues;
          _2980_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2981_i;
          _2981_i = BigInteger.Zero;
          bool _2982_allErased;
          _2982_allErased = true;
          while ((_2981_i) < (new BigInteger((_2979_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2983_recursiveGen;
            bool _2984___v68;
            bool _2985_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2986_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1467;
            bool _out1468;
            bool _out1469;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1470;
            DCOMP.COMP.GenExpr((_2979_exprs).Select(_2981_i), selfIdent, @params, true, out _out1467, out _out1468, out _out1469, out _out1470);
            _2983_recursiveGen = _out1467;
            _2984___v68 = _out1468;
            _2985_isErased = _out1469;
            _2986_recIdents = _out1470;
            _2982_allErased = (_2982_allErased) && (_2985_isErased);
            _2980_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2980_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2983_recursiveGen, _2985_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2986_recIdents);
            _2981_i = (_2981_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2981_i = BigInteger.Zero;
          while ((_2981_i) < (new BigInteger((_2980_generatedValues).Count))) {
            if ((_2981_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2987_gen;
            _2987_gen = ((_2980_generatedValues).Select(_2981_i)).dtor__0;
            if ((((_2980_generatedValues).Select(_2981_i)).dtor__1) && (!(_2982_allErased))) {
              _2987_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2987_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2987_gen);
            _2981_i = (_2981_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2982_allErased;
        }
      } else if (_source83.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2988___mcc_h31 = _source83.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2989_mapElems = _2988___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2990_generatedValues;
          _2990_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2991_i;
          _2991_i = BigInteger.Zero;
          bool _2992_allErased;
          _2992_allErased = true;
          while ((_2991_i) < (new BigInteger((_2989_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2993_recursiveGenKey;
            bool _2994___v69;
            bool _2995_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2996_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1471;
            bool _out1472;
            bool _out1473;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1474;
            DCOMP.COMP.GenExpr(((_2989_mapElems).Select(_2991_i)).dtor__0, selfIdent, @params, true, out _out1471, out _out1472, out _out1473, out _out1474);
            _2993_recursiveGenKey = _out1471;
            _2994___v69 = _out1472;
            _2995_isErasedKey = _out1473;
            _2996_recIdentsKey = _out1474;
            Dafny.ISequence<Dafny.Rune> _2997_recursiveGenValue;
            bool _2998___v70;
            bool _2999_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3000_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1475;
            bool _out1476;
            bool _out1477;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1478;
            DCOMP.COMP.GenExpr(((_2989_mapElems).Select(_2991_i)).dtor__1, selfIdent, @params, true, out _out1475, out _out1476, out _out1477, out _out1478);
            _2997_recursiveGenValue = _out1475;
            _2998___v70 = _out1476;
            _2999_isErasedValue = _out1477;
            _3000_recIdentsValue = _out1478;
            _2992_allErased = ((_2992_allErased) && (_2995_isErasedKey)) && (_2999_isErasedValue);
            _2990_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2990_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2993_recursiveGenKey, _2997_recursiveGenValue, _2995_isErasedKey, _2999_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2996_recIdentsKey), _3000_recIdentsValue);
            _2991_i = (_2991_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2991_i = BigInteger.Zero;
          while ((_2991_i) < (new BigInteger((_2990_generatedValues).Count))) {
            if ((_2991_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3001_genKey;
            _3001_genKey = ((_2990_generatedValues).Select(_2991_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _3002_genValue;
            _3002_genValue = ((_2990_generatedValues).Select(_2991_i)).dtor__1;
            if ((((_2990_generatedValues).Select(_2991_i)).dtor__2) && (!(_2992_allErased))) {
              _3001_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3001_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2990_generatedValues).Select(_2991_i)).dtor__3) && (!(_2992_allErased))) {
              _3002_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3002_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3001_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3002_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2991_i = (_2991_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2992_allErased;
        }
      } else if (_source83.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source133 = selfIdent;
          if (_source133.is_Some) {
            Dafny.ISequence<Dafny.Rune> _3003___mcc_h1149 = _source133.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _3004_id = _3003___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_3004_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_3004_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3004_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3004_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source83.is_Ite) {
        DAST._IExpression _3005___mcc_h32 = _source83.dtor_cond;
        DAST._IExpression _3006___mcc_h33 = _source83.dtor_thn;
        DAST._IExpression _3007___mcc_h34 = _source83.dtor_els;
        DAST._IExpression _3008_f = _3007___mcc_h34;
        DAST._IExpression _3009_t = _3006___mcc_h33;
        DAST._IExpression _3010_cond = _3005___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _3011_condString;
          bool _3012___v71;
          bool _3013_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3014_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1479;
          bool _out1480;
          bool _out1481;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1482;
          DCOMP.COMP.GenExpr(_3010_cond, selfIdent, @params, true, out _out1479, out _out1480, out _out1481, out _out1482);
          _3011_condString = _out1479;
          _3012___v71 = _out1480;
          _3013_condErased = _out1481;
          _3014_recIdentsCond = _out1482;
          if (!(_3013_condErased)) {
            _3011_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3011_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _3015___v72;
          bool _3016_tHasToBeOwned;
          bool _3017___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3018___v74;
          Dafny.ISequence<Dafny.Rune> _out1483;
          bool _out1484;
          bool _out1485;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1486;
          DCOMP.COMP.GenExpr(_3009_t, selfIdent, @params, mustOwn, out _out1483, out _out1484, out _out1485, out _out1486);
          _3015___v72 = _out1483;
          _3016_tHasToBeOwned = _out1484;
          _3017___v73 = _out1485;
          _3018___v74 = _out1486;
          Dafny.ISequence<Dafny.Rune> _3019_fString;
          bool _3020_fOwned;
          bool _3021_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3022_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1487;
          bool _out1488;
          bool _out1489;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1490;
          DCOMP.COMP.GenExpr(_3008_f, selfIdent, @params, _3016_tHasToBeOwned, out _out1487, out _out1488, out _out1489, out _out1490);
          _3019_fString = _out1487;
          _3020_fOwned = _out1488;
          _3021_fErased = _out1489;
          _3022_recIdentsF = _out1490;
          Dafny.ISequence<Dafny.Rune> _3023_tString;
          bool _3024___v75;
          bool _3025_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3026_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1491;
          bool _out1492;
          bool _out1493;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1494;
          DCOMP.COMP.GenExpr(_3009_t, selfIdent, @params, _3020_fOwned, out _out1491, out _out1492, out _out1493, out _out1494);
          _3023_tString = _out1491;
          _3024___v75 = _out1492;
          _3025_tErased = _out1493;
          _3026_recIdentsT = _out1494;
          if ((!(_3021_fErased)) || (!(_3025_tErased))) {
            if (_3021_fErased) {
              _3019_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3019_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_3025_tErased) {
              _3023_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3023_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3011_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3023_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3019_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _3020_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3014_recIdentsCond, _3026_recIdentsT), _3022_recIdentsF);
          isErased = (_3021_fErased) || (_3025_tErased);
        }
      } else if (_source83.is_UnOp) {
        DAST._IUnaryOp _3027___mcc_h35 = _source83.dtor_unOp;
        DAST._IExpression _3028___mcc_h36 = _source83.dtor_expr;
        DAST._IUnaryOp _source134 = _3027___mcc_h35;
        if (_source134.is_Not) {
          DAST._IExpression _3029_e = _3028___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3030_recursiveGen;
            bool _3031___v76;
            bool _3032_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3033_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1495;
            bool _out1496;
            bool _out1497;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1498;
            DCOMP.COMP.GenExpr(_3029_e, selfIdent, @params, true, out _out1495, out _out1496, out _out1497, out _out1498);
            _3030_recursiveGen = _out1495;
            _3031___v76 = _out1496;
            _3032_recErased = _out1497;
            _3033_recIdents = _out1498;
            if (!(_3032_recErased)) {
              _3030_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3030_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3030_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3033_recIdents;
            isErased = true;
          }
        } else if (_source134.is_BitwiseNot) {
          DAST._IExpression _3034_e = _3028___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3035_recursiveGen;
            bool _3036___v77;
            bool _3037_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3038_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1499;
            bool _out1500;
            bool _out1501;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1502;
            DCOMP.COMP.GenExpr(_3034_e, selfIdent, @params, true, out _out1499, out _out1500, out _out1501, out _out1502);
            _3035_recursiveGen = _out1499;
            _3036___v77 = _out1500;
            _3037_recErased = _out1501;
            _3038_recIdents = _out1502;
            if (!(_3037_recErased)) {
              _3035_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3035_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _3035_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3038_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _3039_e = _3028___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3040_recursiveGen;
            bool _3041_recOwned;
            bool _3042_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3043_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1503;
            bool _out1504;
            bool _out1505;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1506;
            DCOMP.COMP.GenExpr(_3039_e, selfIdent, @params, false, out _out1503, out _out1504, out _out1505, out _out1506);
            _3040_recursiveGen = _out1503;
            _3041_recOwned = _out1504;
            _3042_recErased = _out1505;
            _3043_recIdents = _out1506;
            if (!(_3042_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3044_eraseFn;
              _3044_eraseFn = ((_3041_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3040_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3044_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3040_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3040_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3043_recIdents;
            isErased = true;
          }
        }
      } else if (_source83.is_BinOp) {
        DAST._IBinOp _3045___mcc_h37 = _source83.dtor_op;
        DAST._IExpression _3046___mcc_h38 = _source83.dtor_left;
        DAST._IExpression _3047___mcc_h39 = _source83.dtor_right;
        DAST._IExpression _3048_r = _3047___mcc_h39;
        DAST._IExpression _3049_l = _3046___mcc_h38;
        DAST._IBinOp _3050_op = _3045___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _3051_left;
          bool _3052___v78;
          bool _3053_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3054_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1507;
          bool _out1508;
          bool _out1509;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1510;
          DCOMP.COMP.GenExpr(_3049_l, selfIdent, @params, true, out _out1507, out _out1508, out _out1509, out _out1510);
          _3051_left = _out1507;
          _3052___v78 = _out1508;
          _3053_leftErased = _out1509;
          _3054_recIdentsL = _out1510;
          Dafny.ISequence<Dafny.Rune> _3055_right;
          bool _3056___v79;
          bool _3057_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3058_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1511;
          bool _out1512;
          bool _out1513;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1514;
          DCOMP.COMP.GenExpr(_3048_r, selfIdent, @params, true, out _out1511, out _out1512, out _out1513, out _out1514);
          _3055_right = _out1511;
          _3056___v79 = _out1512;
          _3057_rightErased = _out1513;
          _3058_recIdentsR = _out1514;
          DAST._IBinOp _source135 = _3050_op;
          if (_source135.is_Eq) {
            bool _3059___mcc_h1150 = _source135.dtor_referential;
            bool _3060___mcc_h1151 = _source135.dtor_nullable;
            {
              if (!(_3053_leftErased)) {
                _3051_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3057_rightErased)) {
                _3055_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source136 = _3050_op;
              if (_source136.is_Eq) {
                bool _3061___mcc_h1160 = _source136.dtor_referential;
                bool _3062___mcc_h1161 = _source136.dtor_nullable;
                bool _3063_nullable = _3062___mcc_h1161;
                bool _3064_referential = _3061___mcc_h1160;
                {
                  if (_3064_referential) {
                    if (_3063_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3055_right);
                  }
                }
              } else if (_source136.is_Neq) {
                bool _3065___mcc_h1162 = _source136.dtor_referential;
                bool _3066___mcc_h1163 = _source136.dtor_nullable;
                bool _3067_nullable = _3066___mcc_h1163;
                bool _3068_referential = _3065___mcc_h1162;
                {
                  if (_3068_referential) {
                    if (_3067_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3055_right);
                  }
                }
              } else if (_source136.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source136.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source136.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source136.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3069___mcc_h1164 = _source136.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3070_op = _3069___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3070_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source135.is_Neq) {
            bool _3071___mcc_h1154 = _source135.dtor_referential;
            bool _3072___mcc_h1155 = _source135.dtor_nullable;
            {
              if (!(_3053_leftErased)) {
                _3051_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3057_rightErased)) {
                _3055_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source137 = _3050_op;
              if (_source137.is_Eq) {
                bool _3073___mcc_h1165 = _source137.dtor_referential;
                bool _3074___mcc_h1166 = _source137.dtor_nullable;
                bool _3075_nullable = _3074___mcc_h1166;
                bool _3076_referential = _3073___mcc_h1165;
                {
                  if (_3076_referential) {
                    if (_3075_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3055_right);
                  }
                }
              } else if (_source137.is_Neq) {
                bool _3077___mcc_h1167 = _source137.dtor_referential;
                bool _3078___mcc_h1168 = _source137.dtor_nullable;
                bool _3079_nullable = _3078___mcc_h1168;
                bool _3080_referential = _3077___mcc_h1167;
                {
                  if (_3080_referential) {
                    if (_3079_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3055_right);
                  }
                }
              } else if (_source137.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source137.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source137.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source137.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3081___mcc_h1169 = _source137.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3082_op = _3081___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3082_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source135.is_Div) {
            {
              if (!(_3053_leftErased)) {
                _3051_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3057_rightErased)) {
                _3055_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source138 = _3050_op;
              if (_source138.is_Eq) {
                bool _3083___mcc_h1170 = _source138.dtor_referential;
                bool _3084___mcc_h1171 = _source138.dtor_nullable;
                bool _3085_nullable = _3084___mcc_h1171;
                bool _3086_referential = _3083___mcc_h1170;
                {
                  if (_3086_referential) {
                    if (_3085_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3055_right);
                  }
                }
              } else if (_source138.is_Neq) {
                bool _3087___mcc_h1172 = _source138.dtor_referential;
                bool _3088___mcc_h1173 = _source138.dtor_nullable;
                bool _3089_nullable = _3088___mcc_h1173;
                bool _3090_referential = _3087___mcc_h1172;
                {
                  if (_3090_referential) {
                    if (_3089_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3055_right);
                  }
                }
              } else if (_source138.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source138.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source138.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source138.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3091___mcc_h1174 = _source138.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3092_op = _3091___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3092_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source135.is_EuclidianDiv) {
            {
              if (!(_3053_leftErased)) {
                _3051_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3057_rightErased)) {
                _3055_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source139 = _3050_op;
              if (_source139.is_Eq) {
                bool _3093___mcc_h1175 = _source139.dtor_referential;
                bool _3094___mcc_h1176 = _source139.dtor_nullable;
                bool _3095_nullable = _3094___mcc_h1176;
                bool _3096_referential = _3093___mcc_h1175;
                {
                  if (_3096_referential) {
                    if (_3095_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3055_right);
                  }
                }
              } else if (_source139.is_Neq) {
                bool _3097___mcc_h1177 = _source139.dtor_referential;
                bool _3098___mcc_h1178 = _source139.dtor_nullable;
                bool _3099_nullable = _3098___mcc_h1178;
                bool _3100_referential = _3097___mcc_h1177;
                {
                  if (_3100_referential) {
                    if (_3099_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3055_right);
                  }
                }
              } else if (_source139.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source139.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source139.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source139.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3101___mcc_h1179 = _source139.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3102_op = _3101___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3102_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source135.is_Mod) {
            {
              if (!(_3053_leftErased)) {
                _3051_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3057_rightErased)) {
                _3055_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source140 = _3050_op;
              if (_source140.is_Eq) {
                bool _3103___mcc_h1180 = _source140.dtor_referential;
                bool _3104___mcc_h1181 = _source140.dtor_nullable;
                bool _3105_nullable = _3104___mcc_h1181;
                bool _3106_referential = _3103___mcc_h1180;
                {
                  if (_3106_referential) {
                    if (_3105_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3055_right);
                  }
                }
              } else if (_source140.is_Neq) {
                bool _3107___mcc_h1182 = _source140.dtor_referential;
                bool _3108___mcc_h1183 = _source140.dtor_nullable;
                bool _3109_nullable = _3108___mcc_h1183;
                bool _3110_referential = _3107___mcc_h1182;
                {
                  if (_3110_referential) {
                    if (_3109_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3055_right);
                  }
                }
              } else if (_source140.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source140.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source140.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source140.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3111___mcc_h1184 = _source140.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3112_op = _3111___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3112_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source135.is_EuclidianMod) {
            {
              if (!(_3053_leftErased)) {
                _3051_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3057_rightErased)) {
                _3055_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source141 = _3050_op;
              if (_source141.is_Eq) {
                bool _3113___mcc_h1185 = _source141.dtor_referential;
                bool _3114___mcc_h1186 = _source141.dtor_nullable;
                bool _3115_nullable = _3114___mcc_h1186;
                bool _3116_referential = _3113___mcc_h1185;
                {
                  if (_3116_referential) {
                    if (_3115_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3055_right);
                  }
                }
              } else if (_source141.is_Neq) {
                bool _3117___mcc_h1187 = _source141.dtor_referential;
                bool _3118___mcc_h1188 = _source141.dtor_nullable;
                bool _3119_nullable = _3118___mcc_h1188;
                bool _3120_referential = _3117___mcc_h1187;
                {
                  if (_3120_referential) {
                    if (_3119_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3055_right);
                  }
                }
              } else if (_source141.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source141.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source141.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source141.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3121___mcc_h1189 = _source141.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3122_op = _3121___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3122_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source135.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _3055_right);
            }
          } else if (_source135.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3055_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source135.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source135.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source135.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3123___mcc_h1158 = _source135.dtor_Passthrough_a0;
            {
              if (!(_3053_leftErased)) {
                _3051_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3057_rightErased)) {
                _3055_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source142 = _3050_op;
              if (_source142.is_Eq) {
                bool _3124___mcc_h1190 = _source142.dtor_referential;
                bool _3125___mcc_h1191 = _source142.dtor_nullable;
                bool _3126_nullable = _3125___mcc_h1191;
                bool _3127_referential = _3124___mcc_h1190;
                {
                  if (_3127_referential) {
                    if (_3126_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3055_right);
                  }
                }
              } else if (_source142.is_Neq) {
                bool _3128___mcc_h1192 = _source142.dtor_referential;
                bool _3129___mcc_h1193 = _source142.dtor_nullable;
                bool _3130_nullable = _3129___mcc_h1193;
                bool _3131_referential = _3128___mcc_h1192;
                {
                  if (_3131_referential) {
                    if (_3130_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3051_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3055_right);
                  }
                }
              } else if (_source142.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source142.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source142.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source142.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3132___mcc_h1194 = _source142.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3133_op = _3132___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3051_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3133_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3055_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3054_recIdentsL, _3058_recIdentsR);
          isErased = true;
        }
      } else if (_source83.is_ArrayLen) {
        DAST._IExpression _3134___mcc_h40 = _source83.dtor_expr;
        BigInteger _3135___mcc_h41 = _source83.dtor_dim;
        BigInteger _3136_dim = _3135___mcc_h41;
        DAST._IExpression _3137_expr = _3134___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _3138_recursiveGen;
          bool _3139___v81;
          bool _3140_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3141_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1515;
          bool _out1516;
          bool _out1517;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1518;
          DCOMP.COMP.GenExpr(_3137_expr, selfIdent, @params, true, out _out1515, out _out1516, out _out1517, out _out1518);
          _3138_recursiveGen = _out1515;
          _3139___v81 = _out1516;
          _3140_recErased = _out1517;
          _3141_recIdents = _out1518;
          if ((_3136_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3138_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _3142_i;
            _3142_i = BigInteger.One;
            while ((_3142_i) < (_3136_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3142_i = (_3142_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3138_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _3141_recIdents;
          isErased = true;
        }
      } else if (_source83.is_Select) {
        DAST._IExpression _3143___mcc_h42 = _source83.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3144___mcc_h43 = _source83.dtor_field;
        bool _3145___mcc_h44 = _source83.dtor_isConstant;
        bool _3146___mcc_h45 = _source83.dtor_onDatatype;
        DAST._IExpression _source143 = _3143___mcc_h42;
        if (_source143.is_Literal) {
          DAST._ILiteral _3147___mcc_h46 = _source143.dtor_Literal_a0;
          bool _3148_isDatatype = _3146___mcc_h45;
          bool _3149_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3150_field = _3144___mcc_h43;
          DAST._IExpression _3151_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3152_onString;
            bool _3153_onOwned;
            bool _3154_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3155_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1519;
            bool _out1520;
            bool _out1521;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1522;
            DCOMP.COMP.GenExpr(_3151_on, selfIdent, @params, false, out _out1519, out _out1520, out _out1521, out _out1522);
            _3152_onString = _out1519;
            _3153_onOwned = _out1520;
            _3154_onErased = _out1521;
            _3155_recIdents = _out1522;
            if ((_3148_isDatatype) || (_3149_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3152_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3150_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3149_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3152_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3150_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3155_recIdents;
          }
        } else if (_source143.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3156___mcc_h48 = _source143.dtor_Ident_a0;
          bool _3157_isDatatype = _3146___mcc_h45;
          bool _3158_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3159_field = _3144___mcc_h43;
          DAST._IExpression _3160_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3161_onString;
            bool _3162_onOwned;
            bool _3163_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3164_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1523;
            bool _out1524;
            bool _out1525;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1526;
            DCOMP.COMP.GenExpr(_3160_on, selfIdent, @params, false, out _out1523, out _out1524, out _out1525, out _out1526);
            _3161_onString = _out1523;
            _3162_onOwned = _out1524;
            _3163_onErased = _out1525;
            _3164_recIdents = _out1526;
            if ((_3157_isDatatype) || (_3158_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3161_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3159_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3158_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3161_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3159_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3164_recIdents;
          }
        } else if (_source143.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3165___mcc_h50 = _source143.dtor_Companion_a0;
          bool _3166_isDatatype = _3146___mcc_h45;
          bool _3167_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3168_field = _3144___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3169_c = _3165___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _3170_onString;
            bool _3171_onOwned;
            bool _3172_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3173_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1527;
            bool _out1528;
            bool _out1529;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1530;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3169_c), selfIdent, @params, false, out _out1527, out _out1528, out _out1529, out _out1530);
            _3170_onString = _out1527;
            _3171_onOwned = _out1528;
            _3172_onErased = _out1529;
            _3173_recIdents = _out1530;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3170_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3168_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3173_recIdents;
          }
        } else if (_source143.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3174___mcc_h52 = _source143.dtor_Tuple_a0;
          bool _3175_isDatatype = _3146___mcc_h45;
          bool _3176_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3177_field = _3144___mcc_h43;
          DAST._IExpression _3178_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3179_onString;
            bool _3180_onOwned;
            bool _3181_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3182_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1531;
            bool _out1532;
            bool _out1533;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1534;
            DCOMP.COMP.GenExpr(_3178_on, selfIdent, @params, false, out _out1531, out _out1532, out _out1533, out _out1534);
            _3179_onString = _out1531;
            _3180_onOwned = _out1532;
            _3181_onErased = _out1533;
            _3182_recIdents = _out1534;
            if ((_3175_isDatatype) || (_3176_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3179_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3177_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3176_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3179_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3177_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3182_recIdents;
          }
        } else if (_source143.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3183___mcc_h54 = _source143.dtor_path;
          Dafny.ISequence<DAST._IType> _3184___mcc_h55 = _source143.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3185___mcc_h56 = _source143.dtor_args;
          bool _3186_isDatatype = _3146___mcc_h45;
          bool _3187_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3188_field = _3144___mcc_h43;
          DAST._IExpression _3189_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3190_onString;
            bool _3191_onOwned;
            bool _3192_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3193_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1535;
            bool _out1536;
            bool _out1537;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1538;
            DCOMP.COMP.GenExpr(_3189_on, selfIdent, @params, false, out _out1535, out _out1536, out _out1537, out _out1538);
            _3190_onString = _out1535;
            _3191_onOwned = _out1536;
            _3192_onErased = _out1537;
            _3193_recIdents = _out1538;
            if ((_3186_isDatatype) || (_3187_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3190_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3188_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3187_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3190_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3188_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3193_recIdents;
          }
        } else if (_source143.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3194___mcc_h60 = _source143.dtor_dims;
          DAST._IType _3195___mcc_h61 = _source143.dtor_typ;
          bool _3196_isDatatype = _3146___mcc_h45;
          bool _3197_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3198_field = _3144___mcc_h43;
          DAST._IExpression _3199_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3200_onString;
            bool _3201_onOwned;
            bool _3202_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3203_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1539;
            bool _out1540;
            bool _out1541;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1542;
            DCOMP.COMP.GenExpr(_3199_on, selfIdent, @params, false, out _out1539, out _out1540, out _out1541, out _out1542);
            _3200_onString = _out1539;
            _3201_onOwned = _out1540;
            _3202_onErased = _out1541;
            _3203_recIdents = _out1542;
            if ((_3196_isDatatype) || (_3197_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3200_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3198_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3197_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3200_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3198_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3203_recIdents;
          }
        } else if (_source143.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3204___mcc_h64 = _source143.dtor_path;
          Dafny.ISequence<DAST._IType> _3205___mcc_h65 = _source143.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3206___mcc_h66 = _source143.dtor_variant;
          bool _3207___mcc_h67 = _source143.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3208___mcc_h68 = _source143.dtor_contents;
          bool _3209_isDatatype = _3146___mcc_h45;
          bool _3210_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3211_field = _3144___mcc_h43;
          DAST._IExpression _3212_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3213_onString;
            bool _3214_onOwned;
            bool _3215_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3216_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1543;
            bool _out1544;
            bool _out1545;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1546;
            DCOMP.COMP.GenExpr(_3212_on, selfIdent, @params, false, out _out1543, out _out1544, out _out1545, out _out1546);
            _3213_onString = _out1543;
            _3214_onOwned = _out1544;
            _3215_onErased = _out1545;
            _3216_recIdents = _out1546;
            if ((_3209_isDatatype) || (_3210_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3213_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3211_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3210_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3213_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3211_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3216_recIdents;
          }
        } else if (_source143.is_Convert) {
          DAST._IExpression _3217___mcc_h74 = _source143.dtor_value;
          DAST._IType _3218___mcc_h75 = _source143.dtor_from;
          DAST._IType _3219___mcc_h76 = _source143.dtor_typ;
          bool _3220_isDatatype = _3146___mcc_h45;
          bool _3221_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3222_field = _3144___mcc_h43;
          DAST._IExpression _3223_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3224_onString;
            bool _3225_onOwned;
            bool _3226_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3227_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1547;
            bool _out1548;
            bool _out1549;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1550;
            DCOMP.COMP.GenExpr(_3223_on, selfIdent, @params, false, out _out1547, out _out1548, out _out1549, out _out1550);
            _3224_onString = _out1547;
            _3225_onOwned = _out1548;
            _3226_onErased = _out1549;
            _3227_recIdents = _out1550;
            if ((_3220_isDatatype) || (_3221_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3224_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3222_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3221_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3224_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3222_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3227_recIdents;
          }
        } else if (_source143.is_SeqConstruct) {
          DAST._IExpression _3228___mcc_h80 = _source143.dtor_length;
          DAST._IExpression _3229___mcc_h81 = _source143.dtor_elem;
          bool _3230_isDatatype = _3146___mcc_h45;
          bool _3231_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3232_field = _3144___mcc_h43;
          DAST._IExpression _3233_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3234_onString;
            bool _3235_onOwned;
            bool _3236_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3237_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1551;
            bool _out1552;
            bool _out1553;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1554;
            DCOMP.COMP.GenExpr(_3233_on, selfIdent, @params, false, out _out1551, out _out1552, out _out1553, out _out1554);
            _3234_onString = _out1551;
            _3235_onOwned = _out1552;
            _3236_onErased = _out1553;
            _3237_recIdents = _out1554;
            if ((_3230_isDatatype) || (_3231_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3234_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3232_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3231_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3234_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3232_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3237_recIdents;
          }
        } else if (_source143.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3238___mcc_h84 = _source143.dtor_elements;
          DAST._IType _3239___mcc_h85 = _source143.dtor_typ;
          bool _3240_isDatatype = _3146___mcc_h45;
          bool _3241_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3242_field = _3144___mcc_h43;
          DAST._IExpression _3243_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3244_onString;
            bool _3245_onOwned;
            bool _3246_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3247_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1555;
            bool _out1556;
            bool _out1557;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1558;
            DCOMP.COMP.GenExpr(_3243_on, selfIdent, @params, false, out _out1555, out _out1556, out _out1557, out _out1558);
            _3244_onString = _out1555;
            _3245_onOwned = _out1556;
            _3246_onErased = _out1557;
            _3247_recIdents = _out1558;
            if ((_3240_isDatatype) || (_3241_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3244_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3242_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3241_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3244_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3242_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3247_recIdents;
          }
        } else if (_source143.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3248___mcc_h88 = _source143.dtor_elements;
          bool _3249_isDatatype = _3146___mcc_h45;
          bool _3250_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3251_field = _3144___mcc_h43;
          DAST._IExpression _3252_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3253_onString;
            bool _3254_onOwned;
            bool _3255_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3256_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1559;
            bool _out1560;
            bool _out1561;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1562;
            DCOMP.COMP.GenExpr(_3252_on, selfIdent, @params, false, out _out1559, out _out1560, out _out1561, out _out1562);
            _3253_onString = _out1559;
            _3254_onOwned = _out1560;
            _3255_onErased = _out1561;
            _3256_recIdents = _out1562;
            if ((_3249_isDatatype) || (_3250_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3253_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3251_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3250_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3253_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3251_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3256_recIdents;
          }
        } else if (_source143.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3257___mcc_h90 = _source143.dtor_mapElems;
          bool _3258_isDatatype = _3146___mcc_h45;
          bool _3259_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3260_field = _3144___mcc_h43;
          DAST._IExpression _3261_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3262_onString;
            bool _3263_onOwned;
            bool _3264_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3265_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1563;
            bool _out1564;
            bool _out1565;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1566;
            DCOMP.COMP.GenExpr(_3261_on, selfIdent, @params, false, out _out1563, out _out1564, out _out1565, out _out1566);
            _3262_onString = _out1563;
            _3263_onOwned = _out1564;
            _3264_onErased = _out1565;
            _3265_recIdents = _out1566;
            if ((_3258_isDatatype) || (_3259_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3262_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3260_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3259_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3262_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3260_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3265_recIdents;
          }
        } else if (_source143.is_This) {
          bool _3266_isDatatype = _3146___mcc_h45;
          bool _3267_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3268_field = _3144___mcc_h43;
          DAST._IExpression _3269_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3270_onString;
            bool _3271_onOwned;
            bool _3272_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3273_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1567;
            bool _out1568;
            bool _out1569;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1570;
            DCOMP.COMP.GenExpr(_3269_on, selfIdent, @params, false, out _out1567, out _out1568, out _out1569, out _out1570);
            _3270_onString = _out1567;
            _3271_onOwned = _out1568;
            _3272_onErased = _out1569;
            _3273_recIdents = _out1570;
            if ((_3266_isDatatype) || (_3267_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3270_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3268_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3267_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3270_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3268_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3273_recIdents;
          }
        } else if (_source143.is_Ite) {
          DAST._IExpression _3274___mcc_h92 = _source143.dtor_cond;
          DAST._IExpression _3275___mcc_h93 = _source143.dtor_thn;
          DAST._IExpression _3276___mcc_h94 = _source143.dtor_els;
          bool _3277_isDatatype = _3146___mcc_h45;
          bool _3278_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3279_field = _3144___mcc_h43;
          DAST._IExpression _3280_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3281_onString;
            bool _3282_onOwned;
            bool _3283_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3284_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1571;
            bool _out1572;
            bool _out1573;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1574;
            DCOMP.COMP.GenExpr(_3280_on, selfIdent, @params, false, out _out1571, out _out1572, out _out1573, out _out1574);
            _3281_onString = _out1571;
            _3282_onOwned = _out1572;
            _3283_onErased = _out1573;
            _3284_recIdents = _out1574;
            if ((_3277_isDatatype) || (_3278_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3281_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3279_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3278_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3281_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3279_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3284_recIdents;
          }
        } else if (_source143.is_UnOp) {
          DAST._IUnaryOp _3285___mcc_h98 = _source143.dtor_unOp;
          DAST._IExpression _3286___mcc_h99 = _source143.dtor_expr;
          bool _3287_isDatatype = _3146___mcc_h45;
          bool _3288_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3289_field = _3144___mcc_h43;
          DAST._IExpression _3290_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3291_onString;
            bool _3292_onOwned;
            bool _3293_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3294_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1575;
            bool _out1576;
            bool _out1577;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1578;
            DCOMP.COMP.GenExpr(_3290_on, selfIdent, @params, false, out _out1575, out _out1576, out _out1577, out _out1578);
            _3291_onString = _out1575;
            _3292_onOwned = _out1576;
            _3293_onErased = _out1577;
            _3294_recIdents = _out1578;
            if ((_3287_isDatatype) || (_3288_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3291_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3289_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3288_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3291_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3289_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3294_recIdents;
          }
        } else if (_source143.is_BinOp) {
          DAST._IBinOp _3295___mcc_h102 = _source143.dtor_op;
          DAST._IExpression _3296___mcc_h103 = _source143.dtor_left;
          DAST._IExpression _3297___mcc_h104 = _source143.dtor_right;
          bool _3298_isDatatype = _3146___mcc_h45;
          bool _3299_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3300_field = _3144___mcc_h43;
          DAST._IExpression _3301_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3302_onString;
            bool _3303_onOwned;
            bool _3304_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3305_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1579;
            bool _out1580;
            bool _out1581;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1582;
            DCOMP.COMP.GenExpr(_3301_on, selfIdent, @params, false, out _out1579, out _out1580, out _out1581, out _out1582);
            _3302_onString = _out1579;
            _3303_onOwned = _out1580;
            _3304_onErased = _out1581;
            _3305_recIdents = _out1582;
            if ((_3298_isDatatype) || (_3299_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3299_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3305_recIdents;
          }
        } else if (_source143.is_ArrayLen) {
          DAST._IExpression _3306___mcc_h108 = _source143.dtor_expr;
          BigInteger _3307___mcc_h109 = _source143.dtor_dim;
          bool _3308_isDatatype = _3146___mcc_h45;
          bool _3309_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3310_field = _3144___mcc_h43;
          DAST._IExpression _3311_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3312_onString;
            bool _3313_onOwned;
            bool _3314_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3315_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1583;
            bool _out1584;
            bool _out1585;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1586;
            DCOMP.COMP.GenExpr(_3311_on, selfIdent, @params, false, out _out1583, out _out1584, out _out1585, out _out1586);
            _3312_onString = _out1583;
            _3313_onOwned = _out1584;
            _3314_onErased = _out1585;
            _3315_recIdents = _out1586;
            if ((_3308_isDatatype) || (_3309_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3312_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3310_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3309_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3312_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3310_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3315_recIdents;
          }
        } else if (_source143.is_Select) {
          DAST._IExpression _3316___mcc_h112 = _source143.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3317___mcc_h113 = _source143.dtor_field;
          bool _3318___mcc_h114 = _source143.dtor_isConstant;
          bool _3319___mcc_h115 = _source143.dtor_onDatatype;
          bool _3320_isDatatype = _3146___mcc_h45;
          bool _3321_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3322_field = _3144___mcc_h43;
          DAST._IExpression _3323_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3324_onString;
            bool _3325_onOwned;
            bool _3326_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3327_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1587;
            bool _out1588;
            bool _out1589;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
            DCOMP.COMP.GenExpr(_3323_on, selfIdent, @params, false, out _out1587, out _out1588, out _out1589, out _out1590);
            _3324_onString = _out1587;
            _3325_onOwned = _out1588;
            _3326_onErased = _out1589;
            _3327_recIdents = _out1590;
            if ((_3320_isDatatype) || (_3321_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3324_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3322_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3321_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3324_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3322_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3327_recIdents;
          }
        } else if (_source143.is_SelectFn) {
          DAST._IExpression _3328___mcc_h120 = _source143.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3329___mcc_h121 = _source143.dtor_field;
          bool _3330___mcc_h122 = _source143.dtor_onDatatype;
          bool _3331___mcc_h123 = _source143.dtor_isStatic;
          BigInteger _3332___mcc_h124 = _source143.dtor_arity;
          bool _3333_isDatatype = _3146___mcc_h45;
          bool _3334_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3335_field = _3144___mcc_h43;
          DAST._IExpression _3336_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3337_onString;
            bool _3338_onOwned;
            bool _3339_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3340_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1591;
            bool _out1592;
            bool _out1593;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1594;
            DCOMP.COMP.GenExpr(_3336_on, selfIdent, @params, false, out _out1591, out _out1592, out _out1593, out _out1594);
            _3337_onString = _out1591;
            _3338_onOwned = _out1592;
            _3339_onErased = _out1593;
            _3340_recIdents = _out1594;
            if ((_3333_isDatatype) || (_3334_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3337_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3335_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3334_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3337_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3335_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3340_recIdents;
          }
        } else if (_source143.is_Index) {
          DAST._IExpression _3341___mcc_h130 = _source143.dtor_expr;
          DAST._ICollKind _3342___mcc_h131 = _source143.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3343___mcc_h132 = _source143.dtor_indices;
          bool _3344_isDatatype = _3146___mcc_h45;
          bool _3345_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3346_field = _3144___mcc_h43;
          DAST._IExpression _3347_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3348_onString;
            bool _3349_onOwned;
            bool _3350_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3351_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1595;
            bool _out1596;
            bool _out1597;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1598;
            DCOMP.COMP.GenExpr(_3347_on, selfIdent, @params, false, out _out1595, out _out1596, out _out1597, out _out1598);
            _3348_onString = _out1595;
            _3349_onOwned = _out1596;
            _3350_onErased = _out1597;
            _3351_recIdents = _out1598;
            if ((_3344_isDatatype) || (_3345_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3348_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3346_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3345_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3348_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3346_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3351_recIdents;
          }
        } else if (_source143.is_IndexRange) {
          DAST._IExpression _3352___mcc_h136 = _source143.dtor_expr;
          bool _3353___mcc_h137 = _source143.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _3354___mcc_h138 = _source143.dtor_low;
          DAST._IOptional<DAST._IExpression> _3355___mcc_h139 = _source143.dtor_high;
          bool _3356_isDatatype = _3146___mcc_h45;
          bool _3357_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3358_field = _3144___mcc_h43;
          DAST._IExpression _3359_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3360_onString;
            bool _3361_onOwned;
            bool _3362_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3363_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1599;
            bool _out1600;
            bool _out1601;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1602;
            DCOMP.COMP.GenExpr(_3359_on, selfIdent, @params, false, out _out1599, out _out1600, out _out1601, out _out1602);
            _3360_onString = _out1599;
            _3361_onOwned = _out1600;
            _3362_onErased = _out1601;
            _3363_recIdents = _out1602;
            if ((_3356_isDatatype) || (_3357_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3360_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3358_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3357_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3360_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3358_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3363_recIdents;
          }
        } else if (_source143.is_TupleSelect) {
          DAST._IExpression _3364___mcc_h144 = _source143.dtor_expr;
          BigInteger _3365___mcc_h145 = _source143.dtor_index;
          bool _3366_isDatatype = _3146___mcc_h45;
          bool _3367_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3368_field = _3144___mcc_h43;
          DAST._IExpression _3369_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3370_onString;
            bool _3371_onOwned;
            bool _3372_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3373_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1603;
            bool _out1604;
            bool _out1605;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1606;
            DCOMP.COMP.GenExpr(_3369_on, selfIdent, @params, false, out _out1603, out _out1604, out _out1605, out _out1606);
            _3370_onString = _out1603;
            _3371_onOwned = _out1604;
            _3372_onErased = _out1605;
            _3373_recIdents = _out1606;
            if ((_3366_isDatatype) || (_3367_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3370_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3368_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3367_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3370_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3368_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3373_recIdents;
          }
        } else if (_source143.is_Call) {
          DAST._IExpression _3374___mcc_h148 = _source143.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3375___mcc_h149 = _source143.dtor_name;
          Dafny.ISequence<DAST._IType> _3376___mcc_h150 = _source143.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3377___mcc_h151 = _source143.dtor_args;
          bool _3378_isDatatype = _3146___mcc_h45;
          bool _3379_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3380_field = _3144___mcc_h43;
          DAST._IExpression _3381_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3382_onString;
            bool _3383_onOwned;
            bool _3384_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3385_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1607;
            bool _out1608;
            bool _out1609;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1610;
            DCOMP.COMP.GenExpr(_3381_on, selfIdent, @params, false, out _out1607, out _out1608, out _out1609, out _out1610);
            _3382_onString = _out1607;
            _3383_onOwned = _out1608;
            _3384_onErased = _out1609;
            _3385_recIdents = _out1610;
            if ((_3378_isDatatype) || (_3379_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3382_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3380_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3379_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3382_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3380_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3385_recIdents;
          }
        } else if (_source143.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3386___mcc_h156 = _source143.dtor_params;
          DAST._IType _3387___mcc_h157 = _source143.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3388___mcc_h158 = _source143.dtor_body;
          bool _3389_isDatatype = _3146___mcc_h45;
          bool _3390_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3391_field = _3144___mcc_h43;
          DAST._IExpression _3392_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3393_onString;
            bool _3394_onOwned;
            bool _3395_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3396_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1611;
            bool _out1612;
            bool _out1613;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1614;
            DCOMP.COMP.GenExpr(_3392_on, selfIdent, @params, false, out _out1611, out _out1612, out _out1613, out _out1614);
            _3393_onString = _out1611;
            _3394_onOwned = _out1612;
            _3395_onErased = _out1613;
            _3396_recIdents = _out1614;
            if ((_3389_isDatatype) || (_3390_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3393_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3391_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3390_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3393_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3391_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3396_recIdents;
          }
        } else if (_source143.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3397___mcc_h162 = _source143.dtor_values;
          DAST._IType _3398___mcc_h163 = _source143.dtor_retType;
          DAST._IExpression _3399___mcc_h164 = _source143.dtor_expr;
          bool _3400_isDatatype = _3146___mcc_h45;
          bool _3401_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3402_field = _3144___mcc_h43;
          DAST._IExpression _3403_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3404_onString;
            bool _3405_onOwned;
            bool _3406_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3407_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1615;
            bool _out1616;
            bool _out1617;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
            DCOMP.COMP.GenExpr(_3403_on, selfIdent, @params, false, out _out1615, out _out1616, out _out1617, out _out1618);
            _3404_onString = _out1615;
            _3405_onOwned = _out1616;
            _3406_onErased = _out1617;
            _3407_recIdents = _out1618;
            if ((_3400_isDatatype) || (_3401_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3404_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3402_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3401_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3404_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3402_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3407_recIdents;
          }
        } else if (_source143.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3408___mcc_h168 = _source143.dtor_name;
          DAST._IType _3409___mcc_h169 = _source143.dtor_typ;
          DAST._IExpression _3410___mcc_h170 = _source143.dtor_value;
          DAST._IExpression _3411___mcc_h171 = _source143.dtor_iifeBody;
          bool _3412_isDatatype = _3146___mcc_h45;
          bool _3413_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3414_field = _3144___mcc_h43;
          DAST._IExpression _3415_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3416_onString;
            bool _3417_onOwned;
            bool _3418_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3419_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1619;
            bool _out1620;
            bool _out1621;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1622;
            DCOMP.COMP.GenExpr(_3415_on, selfIdent, @params, false, out _out1619, out _out1620, out _out1621, out _out1622);
            _3416_onString = _out1619;
            _3417_onOwned = _out1620;
            _3418_onErased = _out1621;
            _3419_recIdents = _out1622;
            if ((_3412_isDatatype) || (_3413_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3416_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3414_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3413_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3416_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3414_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3419_recIdents;
          }
        } else if (_source143.is_Apply) {
          DAST._IExpression _3420___mcc_h176 = _source143.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3421___mcc_h177 = _source143.dtor_args;
          bool _3422_isDatatype = _3146___mcc_h45;
          bool _3423_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3424_field = _3144___mcc_h43;
          DAST._IExpression _3425_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3426_onString;
            bool _3427_onOwned;
            bool _3428_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3429_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1623;
            bool _out1624;
            bool _out1625;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1626;
            DCOMP.COMP.GenExpr(_3425_on, selfIdent, @params, false, out _out1623, out _out1624, out _out1625, out _out1626);
            _3426_onString = _out1623;
            _3427_onOwned = _out1624;
            _3428_onErased = _out1625;
            _3429_recIdents = _out1626;
            if ((_3422_isDatatype) || (_3423_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3426_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3424_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3423_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3426_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3424_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3429_recIdents;
          }
        } else if (_source143.is_TypeTest) {
          DAST._IExpression _3430___mcc_h180 = _source143.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3431___mcc_h181 = _source143.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3432___mcc_h182 = _source143.dtor_variant;
          bool _3433_isDatatype = _3146___mcc_h45;
          bool _3434_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3435_field = _3144___mcc_h43;
          DAST._IExpression _3436_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3437_onString;
            bool _3438_onOwned;
            bool _3439_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3440_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1627;
            bool _out1628;
            bool _out1629;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1630;
            DCOMP.COMP.GenExpr(_3436_on, selfIdent, @params, false, out _out1627, out _out1628, out _out1629, out _out1630);
            _3437_onString = _out1627;
            _3438_onOwned = _out1628;
            _3439_onErased = _out1629;
            _3440_recIdents = _out1630;
            if ((_3433_isDatatype) || (_3434_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3437_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3435_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3434_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3437_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3435_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3440_recIdents;
          }
        } else if (_source143.is_InitializationValue) {
          DAST._IType _3441___mcc_h186 = _source143.dtor_typ;
          bool _3442_isDatatype = _3146___mcc_h45;
          bool _3443_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3444_field = _3144___mcc_h43;
          DAST._IExpression _3445_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3446_onString;
            bool _3447_onOwned;
            bool _3448_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3449_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1631;
            bool _out1632;
            bool _out1633;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1634;
            DCOMP.COMP.GenExpr(_3445_on, selfIdent, @params, false, out _out1631, out _out1632, out _out1633, out _out1634);
            _3446_onString = _out1631;
            _3447_onOwned = _out1632;
            _3448_onErased = _out1633;
            _3449_recIdents = _out1634;
            if ((_3442_isDatatype) || (_3443_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3446_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3444_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3443_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3446_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3444_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3449_recIdents;
          }
        } else if (_source143.is_BoolBoundedPool) {
          bool _3450_isDatatype = _3146___mcc_h45;
          bool _3451_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3452_field = _3144___mcc_h43;
          DAST._IExpression _3453_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3454_onString;
            bool _3455_onOwned;
            bool _3456_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3457_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1635;
            bool _out1636;
            bool _out1637;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1638;
            DCOMP.COMP.GenExpr(_3453_on, selfIdent, @params, false, out _out1635, out _out1636, out _out1637, out _out1638);
            _3454_onString = _out1635;
            _3455_onOwned = _out1636;
            _3456_onErased = _out1637;
            _3457_recIdents = _out1638;
            if ((_3450_isDatatype) || (_3451_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3454_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3452_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3451_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3454_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3452_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3457_recIdents;
          }
        } else if (_source143.is_SetBoundedPool) {
          DAST._IExpression _3458___mcc_h188 = _source143.dtor_of;
          bool _3459_isDatatype = _3146___mcc_h45;
          bool _3460_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3461_field = _3144___mcc_h43;
          DAST._IExpression _3462_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3463_onString;
            bool _3464_onOwned;
            bool _3465_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3466_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1639;
            bool _out1640;
            bool _out1641;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1642;
            DCOMP.COMP.GenExpr(_3462_on, selfIdent, @params, false, out _out1639, out _out1640, out _out1641, out _out1642);
            _3463_onString = _out1639;
            _3464_onOwned = _out1640;
            _3465_onErased = _out1641;
            _3466_recIdents = _out1642;
            if ((_3459_isDatatype) || (_3460_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3463_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3461_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3460_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3463_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3461_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3466_recIdents;
          }
        } else if (_source143.is_SeqBoundedPool) {
          DAST._IExpression _3467___mcc_h190 = _source143.dtor_of;
          bool _3468___mcc_h191 = _source143.dtor_includeDuplicates;
          bool _3469_isDatatype = _3146___mcc_h45;
          bool _3470_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3471_field = _3144___mcc_h43;
          DAST._IExpression _3472_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3473_onString;
            bool _3474_onOwned;
            bool _3475_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3476_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1643;
            bool _out1644;
            bool _out1645;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1646;
            DCOMP.COMP.GenExpr(_3472_on, selfIdent, @params, false, out _out1643, out _out1644, out _out1645, out _out1646);
            _3473_onString = _out1643;
            _3474_onOwned = _out1644;
            _3475_onErased = _out1645;
            _3476_recIdents = _out1646;
            if ((_3469_isDatatype) || (_3470_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3473_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3471_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3470_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3473_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3471_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3476_recIdents;
          }
        } else {
          DAST._IExpression _3477___mcc_h194 = _source143.dtor_lo;
          DAST._IExpression _3478___mcc_h195 = _source143.dtor_hi;
          bool _3479_isDatatype = _3146___mcc_h45;
          bool _3480_isConstant = _3145___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3481_field = _3144___mcc_h43;
          DAST._IExpression _3482_on = _3143___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3483_onString;
            bool _3484_onOwned;
            bool _3485_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3486_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1647;
            bool _out1648;
            bool _out1649;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1650;
            DCOMP.COMP.GenExpr(_3482_on, selfIdent, @params, false, out _out1647, out _out1648, out _out1649, out _out1650);
            _3483_onString = _out1647;
            _3484_onOwned = _out1648;
            _3485_onErased = _out1649;
            _3486_recIdents = _out1650;
            if ((_3479_isDatatype) || (_3480_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3483_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3481_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3480_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3483_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3481_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3486_recIdents;
          }
        }
      } else if (_source83.is_SelectFn) {
        DAST._IExpression _3487___mcc_h198 = _source83.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3488___mcc_h199 = _source83.dtor_field;
        bool _3489___mcc_h200 = _source83.dtor_onDatatype;
        bool _3490___mcc_h201 = _source83.dtor_isStatic;
        BigInteger _3491___mcc_h202 = _source83.dtor_arity;
        BigInteger _3492_arity = _3491___mcc_h202;
        bool _3493_isStatic = _3490___mcc_h201;
        bool _3494_isDatatype = _3489___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3495_field = _3488___mcc_h199;
        DAST._IExpression _3496_on = _3487___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3497_onString;
          bool _3498_onOwned;
          bool _3499___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3500_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1651;
          bool _out1652;
          bool _out1653;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1654;
          DCOMP.COMP.GenExpr(_3496_on, selfIdent, @params, false, out _out1651, out _out1652, out _out1653, out _out1654);
          _3497_onString = _out1651;
          _3498_onOwned = _out1652;
          _3499___v82 = _out1653;
          _3500_recIdents = _out1654;
          if (_3493_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3497_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3495_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3497_onString), ((_3498_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3501_args;
            _3501_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3502_i;
            _3502_i = BigInteger.Zero;
            while ((_3502_i) < (_3492_arity)) {
              if ((_3502_i).Sign == 1) {
                _3501_args = Dafny.Sequence<Dafny.Rune>.Concat(_3501_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3501_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3501_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_3502_i));
              _3502_i = (_3502_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3501_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3495_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3501_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3503_typeShape;
          _3503_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3504_i;
          _3504_i = BigInteger.Zero;
          while ((_3504_i) < (_3492_arity)) {
            if ((_3504_i).Sign == 1) {
              _3503_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3503_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3503_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3503_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3504_i = (_3504_i) + (BigInteger.One);
          }
          _3503_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3503_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3503_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3500_recIdents;
        }
      } else if (_source83.is_Index) {
        DAST._IExpression _3505___mcc_h203 = _source83.dtor_expr;
        DAST._ICollKind _3506___mcc_h204 = _source83.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3507___mcc_h205 = _source83.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3508_indices = _3507___mcc_h205;
        DAST._ICollKind _3509_collKind = _3506___mcc_h204;
        DAST._IExpression _3510_on = _3505___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3511_onString;
          bool _3512_onOwned;
          bool _3513_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3514_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1655;
          bool _out1656;
          bool _out1657;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1658;
          DCOMP.COMP.GenExpr(_3510_on, selfIdent, @params, false, out _out1655, out _out1656, out _out1657, out _out1658);
          _3511_onString = _out1655;
          _3512_onOwned = _out1656;
          _3513_onErased = _out1657;
          _3514_recIdents = _out1658;
          readIdents = _3514_recIdents;
          s = _3511_onString;
          BigInteger _3515_i;
          _3515_i = BigInteger.Zero;
          while ((_3515_i) < (new BigInteger((_3508_indices).Count))) {
            if (object.Equals(_3509_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3509_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3516_idx;
              bool _3517_idxOwned;
              bool _3518_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3519_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1659;
              bool _out1660;
              bool _out1661;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
              DCOMP.COMP.GenExpr((_3508_indices).Select(_3515_i), selfIdent, @params, false, out _out1659, out _out1660, out _out1661, out _out1662);
              _3516_idx = _out1659;
              _3517_idxOwned = _out1660;
              _3518_idxErased = _out1661;
              _3519_recIdentsIdx = _out1662;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3517_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3516_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3519_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3520_idx;
              bool _3521___v83;
              bool _3522_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3523_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1663;
              bool _out1664;
              bool _out1665;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
              DCOMP.COMP.GenExpr((_3508_indices).Select(_3515_i), selfIdent, @params, true, out _out1663, out _out1664, out _out1665, out _out1666);
              _3520_idx = _out1663;
              _3521___v83 = _out1664;
              _3522_idxErased = _out1665;
              _3523_recIdentsIdx = _out1666;
              if (!(_3522_idxErased)) {
                _3520_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3520_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3520_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3523_recIdentsIdx);
            }
            _3515_i = (_3515_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3513_onErased;
        }
      } else if (_source83.is_IndexRange) {
        DAST._IExpression _3524___mcc_h206 = _source83.dtor_expr;
        bool _3525___mcc_h207 = _source83.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _3526___mcc_h208 = _source83.dtor_low;
        DAST._IOptional<DAST._IExpression> _3527___mcc_h209 = _source83.dtor_high;
        DAST._IOptional<DAST._IExpression> _3528_high = _3527___mcc_h209;
        DAST._IOptional<DAST._IExpression> _3529_low = _3526___mcc_h208;
        bool _3530_isArray = _3525___mcc_h207;
        DAST._IExpression _3531_on = _3524___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3532_onString;
          bool _3533_onOwned;
          bool _3534_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3535_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          bool _out1668;
          bool _out1669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1670;
          DCOMP.COMP.GenExpr(_3531_on, selfIdent, @params, false, out _out1667, out _out1668, out _out1669, out _out1670);
          _3532_onString = _out1667;
          _3533_onOwned = _out1668;
          _3534_onErased = _out1669;
          _3535_recIdents = _out1670;
          readIdents = _3535_recIdents;
          s = _3532_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3536_lowString;
          _3536_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source144 = _3529_low;
          if (_source144.is_Some) {
            DAST._IExpression _3537___mcc_h1195 = _source144.dtor_Some_a0;
            DAST._IExpression _3538_l = _3537___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3539_lString;
              bool _3540___v84;
              bool _3541_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1671;
              bool _out1672;
              bool _out1673;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1674;
              DCOMP.COMP.GenExpr(_3538_l, selfIdent, @params, true, out _out1671, out _out1672, out _out1673, out _out1674);
              _3539_lString = _out1671;
              _3540___v84 = _out1672;
              _3541_lErased = _out1673;
              _3542_recIdentsL = _out1674;
              if (!(_3541_lErased)) {
                _3539_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3539_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3536_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3539_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3542_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3543_highString;
          _3543_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source145 = _3528_high;
          if (_source145.is_Some) {
            DAST._IExpression _3544___mcc_h1196 = _source145.dtor_Some_a0;
            DAST._IExpression _3545_h = _3544___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3546_hString;
              bool _3547___v85;
              bool _3548_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3549_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1675;
              bool _out1676;
              bool _out1677;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1678;
              DCOMP.COMP.GenExpr(_3545_h, selfIdent, @params, true, out _out1675, out _out1676, out _out1677, out _out1678);
              _3546_hString = _out1675;
              _3547___v85 = _out1676;
              _3548_hErased = _out1677;
              _3549_recIdentsH = _out1678;
              if (!(_3548_hErased)) {
                _3546_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3546_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3543_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3546_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3549_recIdentsH);
            }
          } else {
          }
          if (_3530_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source146) => {
            if (_source146.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3550___mcc_h1197 = _source146.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3551_l = _3550___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3551_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3536_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source147) => {
            if (_source147.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3552___mcc_h1198 = _source147.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3553_h = _3552___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3553_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3543_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3534_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source83.is_TupleSelect) {
        DAST._IExpression _3554___mcc_h210 = _source83.dtor_expr;
        BigInteger _3555___mcc_h211 = _source83.dtor_index;
        BigInteger _3556_idx = _3555___mcc_h211;
        DAST._IExpression _3557_on = _3554___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3558_onString;
          bool _3559___v86;
          bool _3560_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3561_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1679;
          bool _out1680;
          bool _out1681;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1682;
          DCOMP.COMP.GenExpr(_3557_on, selfIdent, @params, false, out _out1679, out _out1680, out _out1681, out _out1682);
          _3558_onString = _out1679;
          _3559___v86 = _out1680;
          _3560_tupErased = _out1681;
          _3561_recIdents = _out1682;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3558_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_3556_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3560_tupErased;
          readIdents = _3561_recIdents;
        }
      } else if (_source83.is_Call) {
        DAST._IExpression _3562___mcc_h212 = _source83.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3563___mcc_h213 = _source83.dtor_name;
        Dafny.ISequence<DAST._IType> _3564___mcc_h214 = _source83.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3565___mcc_h215 = _source83.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3566_args = _3565___mcc_h215;
        Dafny.ISequence<DAST._IType> _3567_typeArgs = _3564___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3568_name = _3563___mcc_h213;
        DAST._IExpression _3569_on = _3562___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3570_typeArgString;
          _3570_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3567_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3571_typeI;
            _3571_typeI = BigInteger.Zero;
            _3570_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3571_typeI) < (new BigInteger((_3567_typeArgs).Count))) {
              if ((_3571_typeI).Sign == 1) {
                _3570_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3570_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3572_typeString;
              Dafny.ISequence<Dafny.Rune> _out1683;
              _out1683 = DCOMP.COMP.GenType((_3567_typeArgs).Select(_3571_typeI), false, false);
              _3572_typeString = _out1683;
              _3570_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3570_typeArgString, _3572_typeString);
              _3571_typeI = (_3571_typeI) + (BigInteger.One);
            }
            _3570_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3570_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3573_argString;
          _3573_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3574_i;
          _3574_i = BigInteger.Zero;
          while ((_3574_i) < (new BigInteger((_3566_args).Count))) {
            if ((_3574_i).Sign == 1) {
              _3573_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3573_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3575_argExpr;
            bool _3576_isOwned;
            bool _3577_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3578_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1684;
            bool _out1685;
            bool _out1686;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1687;
            DCOMP.COMP.GenExpr((_3566_args).Select(_3574_i), selfIdent, @params, false, out _out1684, out _out1685, out _out1686, out _out1687);
            _3575_argExpr = _out1684;
            _3576_isOwned = _out1685;
            _3577_argErased = _out1686;
            _3578_argIdents = _out1687;
            if (_3576_isOwned) {
              _3575_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3575_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3577_argErased)) {
              _3575_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3575_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3575_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3575_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3573_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3573_argString, _3575_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3578_argIdents);
            _3574_i = (_3574_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3579_enclosingString;
          bool _3580___v87;
          bool _3581___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3582_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1688;
          bool _out1689;
          bool _out1690;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1691;
          DCOMP.COMP.GenExpr(_3569_on, selfIdent, @params, false, out _out1688, out _out1689, out _out1690, out _out1691);
          _3579_enclosingString = _out1688;
          _3580___v87 = _out1689;
          _3581___v88 = _out1690;
          _3582_recIdents = _out1691;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3582_recIdents);
          DAST._IExpression _source148 = _3569_on;
          if (_source148.is_Literal) {
            DAST._ILiteral _3583___mcc_h1199 = _source148.dtor_Literal_a0;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3584___mcc_h1201 = _source148.dtor_Ident_a0;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3585___mcc_h1203 = _source148.dtor_Companion_a0;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3579_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3586___mcc_h1205 = _source148.dtor_Tuple_a0;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3587___mcc_h1207 = _source148.dtor_path;
            Dafny.ISequence<DAST._IType> _3588___mcc_h1208 = _source148.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3589___mcc_h1209 = _source148.dtor_args;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3590___mcc_h1213 = _source148.dtor_dims;
            DAST._IType _3591___mcc_h1214 = _source148.dtor_typ;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3592___mcc_h1217 = _source148.dtor_path;
            Dafny.ISequence<DAST._IType> _3593___mcc_h1218 = _source148.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3594___mcc_h1219 = _source148.dtor_variant;
            bool _3595___mcc_h1220 = _source148.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3596___mcc_h1221 = _source148.dtor_contents;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Convert) {
            DAST._IExpression _3597___mcc_h1227 = _source148.dtor_value;
            DAST._IType _3598___mcc_h1228 = _source148.dtor_from;
            DAST._IType _3599___mcc_h1229 = _source148.dtor_typ;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_SeqConstruct) {
            DAST._IExpression _3600___mcc_h1233 = _source148.dtor_length;
            DAST._IExpression _3601___mcc_h1234 = _source148.dtor_elem;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3602___mcc_h1237 = _source148.dtor_elements;
            DAST._IType _3603___mcc_h1238 = _source148.dtor_typ;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3604___mcc_h1241 = _source148.dtor_elements;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3605___mcc_h1243 = _source148.dtor_mapElems;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_This) {
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Ite) {
            DAST._IExpression _3606___mcc_h1245 = _source148.dtor_cond;
            DAST._IExpression _3607___mcc_h1246 = _source148.dtor_thn;
            DAST._IExpression _3608___mcc_h1247 = _source148.dtor_els;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_UnOp) {
            DAST._IUnaryOp _3609___mcc_h1251 = _source148.dtor_unOp;
            DAST._IExpression _3610___mcc_h1252 = _source148.dtor_expr;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_BinOp) {
            DAST._IBinOp _3611___mcc_h1255 = _source148.dtor_op;
            DAST._IExpression _3612___mcc_h1256 = _source148.dtor_left;
            DAST._IExpression _3613___mcc_h1257 = _source148.dtor_right;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_ArrayLen) {
            DAST._IExpression _3614___mcc_h1261 = _source148.dtor_expr;
            BigInteger _3615___mcc_h1262 = _source148.dtor_dim;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Select) {
            DAST._IExpression _3616___mcc_h1265 = _source148.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3617___mcc_h1266 = _source148.dtor_field;
            bool _3618___mcc_h1267 = _source148.dtor_isConstant;
            bool _3619___mcc_h1268 = _source148.dtor_onDatatype;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_SelectFn) {
            DAST._IExpression _3620___mcc_h1273 = _source148.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3621___mcc_h1274 = _source148.dtor_field;
            bool _3622___mcc_h1275 = _source148.dtor_onDatatype;
            bool _3623___mcc_h1276 = _source148.dtor_isStatic;
            BigInteger _3624___mcc_h1277 = _source148.dtor_arity;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Index) {
            DAST._IExpression _3625___mcc_h1283 = _source148.dtor_expr;
            DAST._ICollKind _3626___mcc_h1284 = _source148.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3627___mcc_h1285 = _source148.dtor_indices;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_IndexRange) {
            DAST._IExpression _3628___mcc_h1289 = _source148.dtor_expr;
            bool _3629___mcc_h1290 = _source148.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3630___mcc_h1291 = _source148.dtor_low;
            DAST._IOptional<DAST._IExpression> _3631___mcc_h1292 = _source148.dtor_high;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_TupleSelect) {
            DAST._IExpression _3632___mcc_h1297 = _source148.dtor_expr;
            BigInteger _3633___mcc_h1298 = _source148.dtor_index;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Call) {
            DAST._IExpression _3634___mcc_h1301 = _source148.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3635___mcc_h1302 = _source148.dtor_name;
            Dafny.ISequence<DAST._IType> _3636___mcc_h1303 = _source148.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3637___mcc_h1304 = _source148.dtor_args;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3638___mcc_h1309 = _source148.dtor_params;
            DAST._IType _3639___mcc_h1310 = _source148.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3640___mcc_h1311 = _source148.dtor_body;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3641___mcc_h1315 = _source148.dtor_values;
            DAST._IType _3642___mcc_h1316 = _source148.dtor_retType;
            DAST._IExpression _3643___mcc_h1317 = _source148.dtor_expr;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3644___mcc_h1321 = _source148.dtor_name;
            DAST._IType _3645___mcc_h1322 = _source148.dtor_typ;
            DAST._IExpression _3646___mcc_h1323 = _source148.dtor_value;
            DAST._IExpression _3647___mcc_h1324 = _source148.dtor_iifeBody;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_Apply) {
            DAST._IExpression _3648___mcc_h1329 = _source148.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3649___mcc_h1330 = _source148.dtor_args;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_TypeTest) {
            DAST._IExpression _3650___mcc_h1333 = _source148.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3651___mcc_h1334 = _source148.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3652___mcc_h1335 = _source148.dtor_variant;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_InitializationValue) {
            DAST._IType _3653___mcc_h1339 = _source148.dtor_typ;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_BoolBoundedPool) {
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_SetBoundedPool) {
            DAST._IExpression _3654___mcc_h1341 = _source148.dtor_of;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else if (_source148.is_SeqBoundedPool) {
            DAST._IExpression _3655___mcc_h1343 = _source148.dtor_of;
            bool _3656___mcc_h1344 = _source148.dtor_includeDuplicates;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          } else {
            DAST._IExpression _3657___mcc_h1347 = _source148.dtor_lo;
            DAST._IExpression _3658___mcc_h1348 = _source148.dtor_hi;
            {
              _3579_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3579_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3568_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3579_enclosingString, _3570_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3573_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source83.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3659___mcc_h216 = _source83.dtor_params;
        DAST._IType _3660___mcc_h217 = _source83.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3661___mcc_h218 = _source83.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3662_body = _3661___mcc_h218;
        DAST._IType _3663_retType = _3660___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3664_params = _3659___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3665_paramNames;
          _3665_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3666_i;
          _3666_i = BigInteger.Zero;
          while ((_3666_i) < (new BigInteger((_3664_params).Count))) {
            _3665_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3665_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3664_params).Select(_3666_i)).dtor_name));
            _3666_i = (_3666_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3667_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3668_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1692;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1693;
          DCOMP.COMP.GenStmts(_3662_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3665_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1692, out _out1693);
          _3667_recursiveGen = _out1692;
          _3668_recIdents = _out1693;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3669_allReadCloned;
          _3669_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3668_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3670_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_3668_recIdents).Elements) {
              _3670_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_3668_recIdents).Contains(_3670_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3670_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3669_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3669_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3665_paramNames).Contains(_3670_next))) {
              _3669_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3669_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3670_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3670_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3670_next));
            }
            _3668_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3668_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3670_next));
          }
          Dafny.ISequence<Dafny.Rune> _3671_paramsString;
          _3671_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3672_paramTypes;
          _3672_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3666_i = BigInteger.Zero;
          while ((_3666_i) < (new BigInteger((_3664_params).Count))) {
            if ((_3666_i).Sign == 1) {
              _3671_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3671_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3672_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3672_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3673_typStr;
            Dafny.ISequence<Dafny.Rune> _out1694;
            _out1694 = DCOMP.COMP.GenType(((_3664_params).Select(_3666_i)).dtor_typ, false, true);
            _3673_typStr = _out1694;
            _3671_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3671_paramsString, ((_3664_params).Select(_3666_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3673_typStr);
            _3672_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3672_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3673_typStr);
            _3666_i = (_3666_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3674_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1695;
          _out1695 = DCOMP.COMP.GenType(_3663_retType, false, true);
          _3674_retTypeGen = _out1695;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3672_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3674_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3669_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3671_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3674_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3667_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source83.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3675___mcc_h219 = _source83.dtor_values;
        DAST._IType _3676___mcc_h220 = _source83.dtor_retType;
        DAST._IExpression _3677___mcc_h221 = _source83.dtor_expr;
        DAST._IExpression _3678_expr = _3677___mcc_h221;
        DAST._IType _3679_retType = _3676___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3680_values = _3675___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3681_paramNames;
          _3681_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3682_paramNamesSet;
          _3682_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3683_i;
          _3683_i = BigInteger.Zero;
          while ((_3683_i) < (new BigInteger((_3680_values).Count))) {
            _3681_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3681_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3680_values).Select(_3683_i)).dtor__0).dtor_name));
            _3682_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3682_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3680_values).Select(_3683_i)).dtor__0).dtor_name));
            _3683_i = (_3683_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3684_paramsString;
          _3684_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3683_i = BigInteger.Zero;
          while ((_3683_i) < (new BigInteger((_3680_values).Count))) {
            if ((_3683_i).Sign == 1) {
              _3684_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3684_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3685_typStr;
            Dafny.ISequence<Dafny.Rune> _out1696;
            _out1696 = DCOMP.COMP.GenType((((_3680_values).Select(_3683_i)).dtor__0).dtor_typ, false, true);
            _3685_typStr = _out1696;
            Dafny.ISequence<Dafny.Rune> _3686_valueGen;
            bool _3687___v91;
            bool _3688_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3689_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1697;
            bool _out1698;
            bool _out1699;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1700;
            DCOMP.COMP.GenExpr(((_3680_values).Select(_3683_i)).dtor__1, selfIdent, @params, true, out _out1697, out _out1698, out _out1699, out _out1700);
            _3686_valueGen = _out1697;
            _3687___v91 = _out1698;
            _3688_valueErased = _out1699;
            _3689_recIdents = _out1700;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3680_values).Select(_3683_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3685_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3689_recIdents);
            if (_3688_valueErased) {
              _3686_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3686_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3686_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3683_i = (_3683_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3690_recGen;
          bool _3691_recOwned;
          bool _3692_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3693_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1701;
          bool _out1702;
          bool _out1703;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1704;
          DCOMP.COMP.GenExpr(_3678_expr, selfIdent, _3681_paramNames, mustOwn, out _out1701, out _out1702, out _out1703, out _out1704);
          _3690_recGen = _out1701;
          _3691_recOwned = _out1702;
          _3692_recErased = _out1703;
          _3693_recIdents = _out1704;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3693_recIdents, _3682_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3690_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3691_recOwned;
          isErased = _3692_recErased;
        }
      } else if (_source83.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3694___mcc_h222 = _source83.dtor_name;
        DAST._IType _3695___mcc_h223 = _source83.dtor_typ;
        DAST._IExpression _3696___mcc_h224 = _source83.dtor_value;
        DAST._IExpression _3697___mcc_h225 = _source83.dtor_iifeBody;
        DAST._IExpression _3698_iifeBody = _3697___mcc_h225;
        DAST._IExpression _3699_value = _3696___mcc_h224;
        DAST._IType _3700_tpe = _3695___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3701_name = _3694___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3702_valueGen;
          bool _3703___v92;
          bool _3704_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3705_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1705;
          bool _out1706;
          bool _out1707;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1708;
          DCOMP.COMP.GenExpr(_3699_value, selfIdent, @params, true, out _out1705, out _out1706, out _out1707, out _out1708);
          _3702_valueGen = _out1705;
          _3703___v92 = _out1706;
          _3704_valueErased = _out1707;
          _3705_recIdents = _out1708;
          if (_3704_valueErased) {
            _3702_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3702_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3705_recIdents;
          Dafny.ISequence<Dafny.Rune> _3706_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1709;
          _out1709 = DCOMP.COMP.GenType(_3700_tpe, false, true);
          _3706_valueTypeGen = _out1709;
          Dafny.ISequence<Dafny.Rune> _3707_bodyGen;
          bool _3708___v93;
          bool _3709_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3710_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1710;
          bool _out1711;
          bool _out1712;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1713;
          DCOMP.COMP.GenExpr(_3698_iifeBody, selfIdent, @params, true, out _out1710, out _out1711, out _out1712, out _out1713);
          _3707_bodyGen = _out1710;
          _3708___v93 = _out1711;
          _3709_bodyErased = _out1712;
          _3710_bodyIdents = _out1713;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3710_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3701_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3701_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3706_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3702_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3707_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3709_bodyErased;
        }
      } else if (_source83.is_Apply) {
        DAST._IExpression _3711___mcc_h226 = _source83.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3712___mcc_h227 = _source83.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3713_args = _3712___mcc_h227;
        DAST._IExpression _3714_func = _3711___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3715_funcString;
          bool _3716___v94;
          bool _3717_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3718_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1714;
          bool _out1715;
          bool _out1716;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1717;
          DCOMP.COMP.GenExpr(_3714_func, selfIdent, @params, false, out _out1714, out _out1715, out _out1716, out _out1717);
          _3715_funcString = _out1714;
          _3716___v94 = _out1715;
          _3717_funcErased = _out1716;
          _3718_recIdents = _out1717;
          readIdents = _3718_recIdents;
          Dafny.ISequence<Dafny.Rune> _3719_argString;
          _3719_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3720_i;
          _3720_i = BigInteger.Zero;
          while ((_3720_i) < (new BigInteger((_3713_args).Count))) {
            if ((_3720_i).Sign == 1) {
              _3719_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3719_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3721_argExpr;
            bool _3722_isOwned;
            bool _3723_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3724_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1718;
            bool _out1719;
            bool _out1720;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1721;
            DCOMP.COMP.GenExpr((_3713_args).Select(_3720_i), selfIdent, @params, false, out _out1718, out _out1719, out _out1720, out _out1721);
            _3721_argExpr = _out1718;
            _3722_isOwned = _out1719;
            _3723_argErased = _out1720;
            _3724_argIdents = _out1721;
            if (_3722_isOwned) {
              _3721_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3721_argExpr);
            }
            _3719_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3719_argString, _3721_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3724_argIdents);
            _3720_i = (_3720_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3715_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3719_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source83.is_TypeTest) {
        DAST._IExpression _3725___mcc_h228 = _source83.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3726___mcc_h229 = _source83.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3727___mcc_h230 = _source83.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3728_variant = _3727___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3729_dType = _3726___mcc_h229;
        DAST._IExpression _3730_on = _3725___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3731_exprGen;
          bool _3732___v95;
          bool _3733_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3734_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1722;
          bool _out1723;
          bool _out1724;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1725;
          DCOMP.COMP.GenExpr(_3730_on, selfIdent, @params, false, out _out1722, out _out1723, out _out1724, out _out1725);
          _3731_exprGen = _out1722;
          _3732___v95 = _out1723;
          _3733_exprErased = _out1724;
          _3734_recIdents = _out1725;
          Dafny.ISequence<Dafny.Rune> _3735_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1726;
          _out1726 = DCOMP.COMP.GenPath(_3729_dType);
          _3735_dTypePath = _out1726;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3731_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3735_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3728_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3734_recIdents;
        }
      } else if (_source83.is_InitializationValue) {
        DAST._IType _3736___mcc_h231 = _source83.dtor_typ;
        DAST._IType _3737_typ = _3736___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3738_typString;
          Dafny.ISequence<Dafny.Rune> _out1727;
          _out1727 = DCOMP.COMP.GenType(_3737_typ, false, false);
          _3738_typString = _out1727;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3738_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source83.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source83.is_SetBoundedPool) {
        DAST._IExpression _3739___mcc_h232 = _source83.dtor_of;
        DAST._IExpression _3740_of = _3739___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3741_exprGen;
          bool _3742___v96;
          bool _3743_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3744_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1728;
          bool _out1729;
          bool _out1730;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1731;
          DCOMP.COMP.GenExpr(_3740_of, selfIdent, @params, false, out _out1728, out _out1729, out _out1730, out _out1731);
          _3741_exprGen = _out1728;
          _3742___v96 = _out1729;
          _3743_exprErased = _out1730;
          _3744_recIdents = _out1731;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3741_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3743_exprErased;
          readIdents = _3744_recIdents;
        }
      } else if (_source83.is_SeqBoundedPool) {
        DAST._IExpression _3745___mcc_h233 = _source83.dtor_of;
        bool _3746___mcc_h234 = _source83.dtor_includeDuplicates;
        bool _3747_includeDuplicates = _3746___mcc_h234;
        DAST._IExpression _3748_of = _3745___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3749_exprGen;
          bool _3750___v97;
          bool _3751_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3752_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1732;
          bool _out1733;
          bool _out1734;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1735;
          DCOMP.COMP.GenExpr(_3748_of, selfIdent, @params, false, out _out1732, out _out1733, out _out1734, out _out1735);
          _3749_exprGen = _out1732;
          _3750___v97 = _out1733;
          _3751_exprErased = _out1734;
          _3752_recIdents = _out1735;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3749_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3747_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3751_exprErased;
          readIdents = _3752_recIdents;
        }
      } else {
        DAST._IExpression _3753___mcc_h235 = _source83.dtor_lo;
        DAST._IExpression _3754___mcc_h236 = _source83.dtor_hi;
        DAST._IExpression _3755_hi = _3754___mcc_h236;
        DAST._IExpression _3756_lo = _3753___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3757_loString;
          bool _3758___v98;
          bool _3759_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3760_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1736;
          bool _out1737;
          bool _out1738;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
          DCOMP.COMP.GenExpr(_3756_lo, selfIdent, @params, true, out _out1736, out _out1737, out _out1738, out _out1739);
          _3757_loString = _out1736;
          _3758___v98 = _out1737;
          _3759_loErased = _out1738;
          _3760_recIdentsLo = _out1739;
          Dafny.ISequence<Dafny.Rune> _3761_hiString;
          bool _3762___v99;
          bool _3763_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3764_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1740;
          bool _out1741;
          bool _out1742;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1743;
          DCOMP.COMP.GenExpr(_3755_hi, selfIdent, @params, true, out _out1740, out _out1741, out _out1742, out _out1743);
          _3761_hiString = _out1740;
          _3762___v99 = _out1741;
          _3763_hiErased = _out1742;
          _3764_recIdentsHi = _out1743;
          if (!(_3759_loErased)) {
            _3757_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3757_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3763_hiErased)) {
            _3761_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3761_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3757_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3761_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3760_recIdentsLo, _3764_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3765_i;
      _3765_i = BigInteger.Zero;
      while ((_3765_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3766_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1744;
        _out1744 = DCOMP.COMP.GenModule((p).Select(_3765_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3766_generated = _out1744;
        if ((_3765_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3766_generated);
        _3765_i = (_3765_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3767_i;
      _3767_i = BigInteger.Zero;
      while ((_3767_i) < (new BigInteger((fullName).Count))) {
        if ((_3767_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3767_i));
        _3767_i = (_3767_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

