// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out1;
      _out1 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out1;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), RAST.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator) {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
      }
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(RAST.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source0 = this;
      if (_source0.is_Mod) {
        Dafny.ISequence<Dafny.Rune> __mcc_h0 = _source0.dtor_name;
        Dafny.ISequence<RAST._IModDecl> __mcc_h1 = _source0.dtor_body;
        Dafny.ISequence<RAST._IModDecl> body = __mcc_h1;
        Dafny.ISequence<Dafny.Rune> name = __mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IModDecl>(body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((modDecl) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _10___mcc_h2 = _source0.dtor_name;
        Dafny.ISequence<Dafny.Rune> _11_name = _10___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _11_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_ImplDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IImpl dtor_impl { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind) {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_12_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_13_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_13_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _12_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    bool is_StructSimple { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Struct : _IStruct {
    public Struct() {
    }
    private static readonly RAST._IStruct theDefault = create_Struct(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fields) {
      return new Struct_Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_StructSimple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fields) {
      return new Struct_StructSimple(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return this is Struct_Struct; } }
    public bool is_StructSimple { get { return this is Struct_StructSimple; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        var d = this;
        if (d is Struct_Struct) { return ((Struct_Struct)d)._attributes; }
        return ((Struct_StructSimple)d)._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Struct_Struct) { return ((Struct_Struct)d)._name; }
        return ((Struct_StructSimple)d)._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        var d = this;
        if (d is Struct_Struct) { return ((Struct_Struct)d)._typeParams; }
        return ((Struct_StructSimple)d)._typeParams;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_fields {
      get {
        var d = this;
        if (d is Struct_Struct) { return ((Struct_Struct)d)._fields; }
        return ((Struct_StructSimple)d)._fields;
      }
    }
    public abstract _IStruct DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _14_separator = (((this).is_Struct) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), (((this).is_Struct) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")))), RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_15_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_16_field) => {
        return RAST.FieldDecl._ToString(_16_field, Dafny.Sequence<Dafny.Rune>.Concat(_15_ind, RAST.__default.IND));
      })))(ind), _14_separator)), (((this).is_Struct) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"))));
    }
  }
  public class Struct_Struct : Struct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _fields;
    public Struct_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fields) : base() {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public override _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct_Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct_Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Struct_StructSimple : Struct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _fields;
    public Struct_StructSimple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fields) : base() {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public override _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct_StructSimple(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct_StructSimple;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.StructSimple";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content) {
      return new TypeParam(content);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.Rune> ind) {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_17_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_18_t) => {
          return RAST.TypeParam._ToString(_18_t, Dafny.Sequence<Dafny.Rune>.Concat(_17_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IFieldDecl {
    bool is_FieldDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class FieldDecl : _IFieldDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public FieldDecl(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.FieldDecl;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.FieldDecl.FieldDecl";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFieldDecl create(Dafny.ISequence<Dafny.Rune> content) {
      return new FieldDecl(content);
    }
    public static _IFieldDecl create_FieldDecl(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_FieldDecl { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IType {
    bool is_RawType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Type : _IType {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Type(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.RawType";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create(Dafny.ISequence<Dafny.Rune> content) {
      return new Type(content);
    }
    public static _IType create_RawType(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawType { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    Dafny.ISequence<Dafny.Rune> dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.Rune> tpe, Dafny.ISequence<Dafny.Rune> forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.Rune> tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), RAST.Type._ToString((this).dtor_tpe, ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), RAST.Type._ToString((this).dtor_forType, Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_19_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_20_implDecl) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _19_ind), RAST.__default.IND), RAST.ImplDecl._ToString(_20_implDecl, Dafny.Sequence<Dafny.Rune>.Concat(_19_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<Dafny.Rune> _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _body;
    public Impl_ImplFor(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.Rune> tpe, Dafny.ISequence<Dafny.Rune> forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<Dafny.Rune> _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _body;
    public Impl_Impl(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.Rune> tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplDecl {
    bool is_RawImplDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class ImplDecl : _IImplDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplDecl(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplDecl;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplDecl.RawImplDecl";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplDecl create(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplDecl(content);
    }
    public static _IImplDecl create_RawImplDecl(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawImplDecl { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in0 = (i).Drop(new BigInteger(2));
            i = _in0;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in1 = (i).Drop(BigInteger.One);
        i = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _21___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_21___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _21___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_21___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in2 = (i).Drop(new BigInteger(2));
        i = _in2;
        goto TAIL_CALL_START;
      } else {
        _21___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_21___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in3 = (i).Drop(BigInteger.One);
        i = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _22___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_22___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _22___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_22___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in4 = (i).Drop(BigInteger.One);
        i = _in4;
        goto TAIL_CALL_START;
      } else {
        _22___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_22___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in5 = (i).Drop(BigInteger.One);
        i = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if ((!(DCOMP.__default.has__special(i))) && (!(DCOMP.__default.reserved__rust).Contains(i))) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else {
        Dafny.ISequence<Dafny.Rune> _23_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _23_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust {
      get {
        return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
      }
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _24_body;
      Dafny.ISequence<RAST._IModDecl> _out2;
      _out2 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _24_body = _out2;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _24_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _25_i;
      _25_i = BigInteger.Zero;
      while ((_25_i) < (new BigInteger((body).Count))) {
        RAST._IModDecl _26_generated = RAST.ModDecl.Default();
        DAST._IModuleItem _source1 = (body).Select(_25_i);
        if (_source1.is_Module) {
          DAST._IModule _27___mcc_h0 = _source1.dtor_Module_a0;
          DAST._IModule _28_m = _27___mcc_h0;
          RAST._IMod _29_mm;
          RAST._IMod _out3;
          _out3 = DCOMP.COMP.GenModule(_28_m, containingPath);
          _29_mm = _out3;
          _26_generated = RAST.ModDecl.create_ModDecl(_29_mm);
        } else if (_source1.is_Class) {
          DAST._IClass _30___mcc_h1 = _source1.dtor_Class_a0;
          DAST._IClass _31_c = _30___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _32_cc;
          Dafny.ISequence<Dafny.Rune> _out4;
          _out4 = DCOMP.COMP.GenClass(_31_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_31_c).dtor_name)));
          _32_cc = _out4;
          _26_generated = RAST.ModDecl.create_RawDecl(_32_cc);
        } else if (_source1.is_Trait) {
          DAST._ITrait _33___mcc_h2 = _source1.dtor_Trait_a0;
          DAST._ITrait _34_t = _33___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _35_tt;
          Dafny.ISequence<Dafny.Rune> _out5;
          _out5 = DCOMP.COMP.GenTrait(_34_t, containingPath);
          _35_tt = _out5;
          _26_generated = RAST.ModDecl.create_RawDecl(_35_tt);
        } else if (_source1.is_Newtype) {
          DAST._INewtype _36___mcc_h3 = _source1.dtor_Newtype_a0;
          DAST._INewtype _37_n = _36___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _38_nn;
          Dafny.ISequence<Dafny.Rune> _out6;
          _out6 = DCOMP.COMP.GenNewtype(_37_n);
          _38_nn = _out6;
          _26_generated = RAST.ModDecl.create_RawDecl(_38_nn);
        } else {
          DAST._IDatatype _39___mcc_h4 = _source1.dtor_Datatype_a0;
          DAST._IDatatype _40_d = _39___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _41_dd;
          Dafny.ISequence<Dafny.Rune> _out7;
          _out7 = DCOMP.COMP.GenDatatype(_40_d);
          _41_dd = _out7;
          _26_generated = RAST.ModDecl.create_RawDecl(_41_dd);
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_26_generated));
        _25_i = (_25_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _42_tpI;
      _42_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_42_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _43_tp;
          _43_tp = (@params).Select(_42_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_43_tp));
          Dafny.ISequence<Dafny.Rune> _44_genTp;
          Dafny.ISequence<Dafny.Rune> _out8;
          _out8 = DCOMP.COMP.GenType(_43_tp, false, false);
          _44_genTp = _out8;
          typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(typeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_44_genTp));
          Dafny.ISequence<Dafny.Rune> _45_baseConstraints;
          _45_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _44_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_44_genTp, _45_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static"))));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _44_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_44_genTp, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _44_genTp), _45_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _44_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static"))));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _44_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _44_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _42_tpI = (_42_tpI) + (BigInteger.One);
        }
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _46_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _47_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _48_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _49_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _50_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _51_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _52_erasedParams;
      Dafny.ISet<DAST._IType> _out9;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out10;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out11;
      Dafny.ISequence<Dafny.Rune> _out12;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out13;
      Dafny.ISequence<Dafny.Rune> _out14;
      Dafny.ISequence<Dafny.Rune> _out15;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out9, out _out10, out _out11, out _out12, out _out13, out _out14, out _out15);
      _46_typeParamsSet = _out9;
      _47_sTypeParams = _out10;
      _48_sConstrainedTypeParams = _out11;
      _49_whereConstraints = _out12;
      _50_constrainedEraseParams = _out13;
      _51_unerasedParams = _out14;
      _52_erasedParams = _out15;
      Dafny.ISequence<Dafny.Rune> _53_constrainedTypeParams;
      _53_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_48_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _54_fields;
      _54_fields = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.ISequence<Dafny.Rune> _55_fieldInits;
      _55_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _56_fieldI;
      _56_fieldI = BigInteger.Zero;
      while ((_56_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _57_field;
        _57_field = ((c).dtor_fields).Select(_56_fieldI);
        Dafny.ISequence<Dafny.Rune> _58_fieldType;
        Dafny.ISequence<Dafny.Rune> _out16;
        _out16 = DCOMP.COMP.GenType(((_57_field).dtor_formal).dtor_typ, false, false);
        _58_fieldType = _out16;
        _54_fields = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_54_fields, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_57_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _58_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))));
        DAST._IOptional<DAST._IExpression> _source2 = (_57_field).dtor_defaultValue;
        if (_source2.is_Some) {
          DAST._IExpression _59___mcc_h0 = _source2.dtor_Some_a0;
          DAST._IExpression _60_e = _59___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _61_eStr;
            bool _62___v1;
            bool _63___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _64___v3;
            Dafny.ISequence<Dafny.Rune> _out17;
            bool _out18;
            bool _out19;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out20;
            DCOMP.COMP.GenExpr(_60_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out17, out _out18, out _out19, out _out20);
            _61_eStr = _out17;
            _62___v1 = _out18;
            _63___v2 = _out19;
            _64___v3 = _out20;
            _55_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_55_fieldInits, DCOMP.__default.escapeIdent(((_57_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _61_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _55_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_55_fieldInits, DCOMP.__default.escapeIdent(((_57_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _56_fieldI = (_56_fieldI) + (BigInteger.One);
      }
      BigInteger _65_typeParamI;
      _65_typeParamI = BigInteger.Zero;
      while ((_65_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _66_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out21;
        _out21 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_65_typeParamI), false, false);
        _66_tpeGen = _out21;
        _54_fields = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_54_fields, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), RAST.__default.natToString(_65_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _66_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))));
        _55_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_55_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), RAST.__default.natToString(_65_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _65_typeParamI = (_65_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _67_struct;
      _67_struct = RAST.Struct.create_Struct(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _47_sTypeParams, _54_fields);
      Dafny.ISequence<Dafny.Rune> _68_typeParams;
      _68_typeParams = RAST.TypeParam.ToStringMultiple(_47_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      s = (_67_struct)._ToString(RAST.__default.IND);
      Dafny.ISequence<Dafny.Rune> _69_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _70_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out22;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out23;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _46_typeParamsSet, out _out22, out _out23);
      _69_implBody = _out22;
      _70_traitBodies = _out23;
      _69_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _55_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _69_implBody);
      RAST._IImpl _71_i;
      _71_i = RAST.Impl.create_Impl(_48_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _68_typeParams), _49_whereConstraints, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_69_implBody));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), RAST.__default.IND), (_71_i)._ToString(RAST.__default.IND));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _72_i;
        _72_i = BigInteger.Zero;
        while ((_72_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _73_superClass;
          _73_superClass = ((c).dtor_superClasses).Select(_72_i);
          DAST._IType _source3 = _73_superClass;
          if (_source3.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _74___mcc_h1 = _source3.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _75___mcc_h2 = _source3.dtor_typeArgs;
            DAST._IResolvedType _76___mcc_h3 = _source3.dtor_resolved;
            DAST._IResolvedType _source4 = _76___mcc_h3;
            if (_source4.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _77___mcc_h7 = _source4.dtor_path;
            } else if (_source4.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _78___mcc_h9 = _source4.dtor_path;
              Dafny.ISequence<DAST._IType> _79_typeArgs = _75___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _80_traitPath = _74___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _81_pathStr;
                Dafny.ISequence<Dafny.Rune> _out24;
                _out24 = DCOMP.COMP.GenPath(_80_traitPath);
                _81_pathStr = _out24;
                Dafny.ISequence<Dafny.Rune> _82_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out25;
                _out25 = DCOMP.COMP.GenTypeArgs(_79_typeArgs, false, false);
                _82_typeArgs = _out25;
                Dafny.ISequence<Dafny.Rune> _83_body;
                _83_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_70_traitBodies).Contains(_80_traitPath)) {
                  _83_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_70_traitBodies, _80_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _84_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out26;
                _out26 = DCOMP.COMP.GenPath(path);
                _84_genSelfPath = _out26;
                RAST._IImpl _85_x;
                _85_x = RAST.Impl.create_ImplFor(_48_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(_81_pathStr, _82_typeArgs), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), _84_genSelfPath), _68_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _49_whereConstraints, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_83_body));
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), RAST.__default.IND), (_85_x)._ToString(RAST.__default.IND));
              }
            } else {
              DAST._IType _86___mcc_h11 = _source4.dtor_Newtype_a0;
            }
          } else if (_source3.is_Nullable) {
            DAST._IType _87___mcc_h13 = _source3.dtor_Nullable_a0;
          } else if (_source3.is_Tuple) {
            Dafny.ISequence<DAST._IType> _88___mcc_h15 = _source3.dtor_Tuple_a0;
          } else if (_source3.is_Array) {
            DAST._IType _89___mcc_h17 = _source3.dtor_element;
            BigInteger _90___mcc_h18 = _source3.dtor_dims;
          } else if (_source3.is_Seq) {
            DAST._IType _91___mcc_h21 = _source3.dtor_element;
          } else if (_source3.is_Set) {
            DAST._IType _92___mcc_h23 = _source3.dtor_element;
          } else if (_source3.is_Multiset) {
            DAST._IType _93___mcc_h25 = _source3.dtor_element;
          } else if (_source3.is_Map) {
            DAST._IType _94___mcc_h27 = _source3.dtor_key;
            DAST._IType _95___mcc_h28 = _source3.dtor_value;
          } else if (_source3.is_Arrow) {
            Dafny.ISequence<DAST._IType> _96___mcc_h31 = _source3.dtor_args;
            DAST._IType _97___mcc_h32 = _source3.dtor_result;
          } else if (_source3.is_Primitive) {
            DAST._IPrimitive _98___mcc_h35 = _source3.dtor_Primitive_a0;
          } else if (_source3.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _99___mcc_h37 = _source3.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _100___mcc_h39 = _source3.dtor_TypeArg_a0;
          }
          _72_i = (_72_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _101_d;
      _101_d = RAST.Impl.create_ImplFor(_48_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _68_typeParams), _49_whereConstraints, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"))));
      Dafny.ISequence<Dafny.Rune> _102_defaultImpl;
      _102_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, (_101_d)._ToString(RAST.__default.IND));
      RAST._IImpl _103_p;
      _103_p = RAST.Impl.create_ImplFor(_48_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _68_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}"))));
      Dafny.ISequence<Dafny.Rune> _104_printImpl;
      _104_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, (_103_p)._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      RAST._IImpl _105_pp;
      _105_pp = RAST.Impl.create_ImplFor(_47_sTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _68_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"))));
      Dafny.ISequence<Dafny.Rune> _106_ptrPartialEqImpl;
      _106_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, (_105_pp)._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      RAST._IImpl _107_ii;
      _107_ii = RAST.Impl.create_ImplFor(_48_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _68_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), DCOMP.__default.escapeIdent((c).dtor_name)), _52_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))));
      RAST._IImpl _108_u;
      _108_u = RAST.Impl.create_ImplFor(_48_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _51_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _68_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
      Dafny.ISequence<Dafny.Rune> _109_identEraseImpls;
      _109_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, (_107_ii)._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), RAST.__default.IND), (_108_u)._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _102_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _104_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _106_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _109_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _110_typeParamsSet;
      _110_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _111_typeParams;
      _111_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _112_tpI;
      _112_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _111_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_112_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _113_tp;
          _113_tp = ((t).dtor_typeParams).Select(_112_tpI);
          _110_typeParamsSet = Dafny.Set<DAST._IType>.Union(_110_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_113_tp));
          Dafny.ISequence<Dafny.Rune> _114_genTp;
          Dafny.ISequence<Dafny.Rune> _out27;
          _out27 = DCOMP.COMP.GenType(_113_tp, false, false);
          _114_genTp = _out27;
          _111_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_111_typeParams, _114_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _112_tpI = (_112_tpI) + (BigInteger.One);
        }
        _111_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_111_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _115_fullPath;
      _115_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _116_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _117___v6;
      Dafny.ISequence<Dafny.Rune> _out28;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out29;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_115_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_115_fullPath)), _110_typeParamsSet, out _out28, out _out29);
      _116_implBody = _out28;
      _117___v6 = _out29;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _111_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _116_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _118_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _119_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _120_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _121_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _122___v7;
      Dafny.ISequence<Dafny.Rune> _123___v8;
      Dafny.ISequence<Dafny.Rune> _124___v9;
      Dafny.ISet<DAST._IType> _out30;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out31;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out32;
      Dafny.ISequence<Dafny.Rune> _out33;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out34;
      Dafny.ISequence<Dafny.Rune> _out35;
      Dafny.ISequence<Dafny.Rune> _out36;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out30, out _out31, out _out32, out _out33, out _out34, out _out35, out _out36);
      _118_typeParamsSet = _out30;
      _119_sTypeParams = _out31;
      _120_sConstrainedTypeParams = _out32;
      _121_whereConstraints = _out33;
      _122___v7 = _out34;
      _123___v8 = _out35;
      _124___v9 = _out36;
      Dafny.ISequence<Dafny.Rune> _125_typeParams;
      _125_typeParams = RAST.TypeParam.ToStringMultiple(_119_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _126_constrainedTypeParams;
      _126_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_120_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _127_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out37;
      _out37 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _127_underlyingType = _out37;
      s = Dafny.Sequence<Dafny.Rune>.Concat((RAST.Struct.create_StructSimple(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _119_sTypeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), _127_underlyingType))))._ToString(RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.IND), (RAST.Impl.create_ImplFor(_120_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _125_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), _127_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))))._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.IND), (RAST.Impl.create_ImplFor(_120_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), _127_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _125_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.IND), (RAST.Impl.create_ImplFor(_120_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _125_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _125_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      Dafny.ISequence<Dafny.Rune> _128_body;
      _128_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n");
      DAST._IOptional<DAST._IExpression> _source5 = (c).dtor_witnessExpr;
      if (_source5.is_Some) {
        DAST._IExpression _129___mcc_h0 = _source5.dtor_Some_a0;
        DAST._IExpression _130_e = _129___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _131_eStr;
          bool _132___v10;
          bool _133___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _134___v12;
          Dafny.ISequence<Dafny.Rune> _out38;
          bool _out39;
          bool _out40;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out41;
          DCOMP.COMP.GenExpr(_130_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out38, out _out39, out _out40, out _out41);
          _131_eStr = _out38;
          _132___v10 = _out39;
          _133___v11 = _out40;
          _134___v12 = _out41;
          _128_body = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_128_body, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _131_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          _128_body = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_128_body, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      _128_body = Dafny.Sequence<Dafny.Rune>.Concat(_128_body, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.IND), (RAST.Impl.create_ImplFor(_120_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _125_typeParams), _121_whereConstraints, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_128_body)))._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.IND), (RAST.Impl.create_ImplFor(_120_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _125_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")))))._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, RAST.__default.IND), (RAST.Impl.create_ImplFor(_120_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _125_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), _127_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")))))._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _135_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _136_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _137_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _138_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _139_sConstrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _140_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _141_erasedParams;
      Dafny.ISet<DAST._IType> _out42;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out43;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out44;
      Dafny.ISequence<Dafny.Rune> _out45;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out46;
      Dafny.ISequence<Dafny.Rune> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out42, out _out43, out _out44, out _out45, out _out46, out _out47, out _out48);
      _135_typeParamsSet = _out42;
      _136_sTypeParams = _out43;
      _137_sConstrainedTypeParams = _out44;
      _138_whereConstraints = _out45;
      _139_sConstrainedEraseParams = _out46;
      _140_unerasedParams = _out47;
      _141_erasedParams = _out48;
      Dafny.ISequence<Dafny.Rune> _142_typeParams;
      _142_typeParams = RAST.TypeParam.ToStringMultiple(_136_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _143_constrainedTypeParams;
      _143_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_137_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _144_constrainedEraseParams;
      _144_constrainedEraseParams = RAST.TypeParam.ToStringMultiple(_139_sConstrainedEraseParams, RAST.__default.IND);
      Dafny.ISequence<Dafny.Rune> _145_ctors;
      _145_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _146_i;
      _146_i = BigInteger.Zero;
      while ((_146_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _147_ctor;
        _147_ctor = ((c).dtor_ctors).Select(_146_i);
        Dafny.ISequence<Dafny.Rune> _148_ctorBody;
        _148_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_147_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _149_j;
        _149_j = BigInteger.Zero;
        while ((_149_j) < (new BigInteger(((_147_ctor).dtor_args).Count))) {
          DAST._IFormal _150_formal;
          _150_formal = ((_147_ctor).dtor_args).Select(_149_j);
          Dafny.ISequence<Dafny.Rune> _151_formalType;
          Dafny.ISequence<Dafny.Rune> _out49;
          _out49 = DCOMP.COMP.GenType((_150_formal).dtor_typ, false, false);
          _151_formalType = _out49;
          if ((c).dtor_isCo) {
            _148_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_148_ctorBody, DCOMP.__default.escapeIdent((_150_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _151_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _148_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_148_ctorBody, DCOMP.__default.escapeIdent((_150_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _151_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _149_j = (_149_j) + (BigInteger.One);
        }
        _148_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_148_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _145_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_145_ctors, _148_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _146_i = (_146_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _152_selfPath;
      _152_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _153_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _154_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out50;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out51;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_152_selfPath)), _135_typeParamsSet, out _out50, out _out51);
      _153_implBody = _out50;
      _154_traitBodies = _out51;
      _146_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _155_emittedFields;
      _155_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_146_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _156_ctor;
        _156_ctor = ((c).dtor_ctors).Select(_146_i);
        BigInteger _157_j;
        _157_j = BigInteger.Zero;
        while ((_157_j) < (new BigInteger(((_156_ctor).dtor_args).Count))) {
          DAST._IFormal _158_formal;
          _158_formal = ((_156_ctor).dtor_args).Select(_157_j);
          if (!((_155_emittedFields).Contains((_158_formal).dtor_name))) {
            _155_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_155_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_158_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _159_formalType;
            Dafny.ISequence<Dafny.Rune> _out52;
            _out52 = DCOMP.COMP.GenType((_158_formal).dtor_typ, false, false);
            _159_formalType = _out52;
            Dafny.ISequence<Dafny.Rune> _160_methodBody;
            _160_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _161_k;
            _161_k = BigInteger.Zero;
            while ((_161_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _162_ctor2;
              _162_ctor2 = ((c).dtor_ctors).Select(_161_k);
              Dafny.ISequence<Dafny.Rune> _163_ctorMatch;
              _163_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_162_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _164_l;
              _164_l = BigInteger.Zero;
              bool _165_hasMatchingField;
              _165_hasMatchingField = false;
              while ((_164_l) < (new BigInteger(((_162_ctor2).dtor_args).Count))) {
                DAST._IFormal _166_formal2;
                _166_formal2 = ((_162_ctor2).dtor_args).Select(_164_l);
                if (((_158_formal).dtor_name).Equals((_166_formal2).dtor_name)) {
                  _165_hasMatchingField = true;
                }
                _163_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_163_ctorMatch, DCOMP.__default.escapeIdent((_166_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _164_l = (_164_l) + (BigInteger.One);
              }
              if (_165_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _163_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_163_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_158_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _163_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_163_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_158_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _163_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_163_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _160_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_160_methodBody, _163_ctorMatch);
              _161_k = (_161_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _160_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_160_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _160_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_160_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _153_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_153_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_158_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _159_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _160_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _157_j = (_157_j) + (BigInteger.One);
        }
        _146_i = (_146_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _145_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_145_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _167_typeI;
        _167_typeI = BigInteger.Zero;
        while ((_167_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_167_typeI).Sign == 1) {
            _145_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_145_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _168_genTp;
          Dafny.ISequence<Dafny.Rune> _out53;
          _out53 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_167_typeI), false, false);
          _168_genTp = _out53;
          _145_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_145_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _168_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _167_typeI = (_167_typeI) + (BigInteger.One);
        }
        _145_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_145_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _169_enumBody;
      _169_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _142_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _145_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), (RAST.Impl.create_Impl(_137_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _142_typeParams), _138_whereConstraints, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_153_implBody)))._ToString(RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _170_identEraseImpls;
      _170_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat((RAST.Impl.create_ImplFor(_137_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _142_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), DCOMP.__default.escapeIdent((c).dtor_name)), _141_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))))._ToString(RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      _170_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_170_identEraseImpls, (RAST.Impl.create_ImplFor(_139_sConstrainedEraseParams, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _140_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _142_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      _146_i = BigInteger.Zero;
      Dafny.ISequence<Dafny.Rune> _171_printImplBody;
      _171_printImplBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      while ((_146_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _172_ctor;
        _172_ctor = ((c).dtor_ctors).Select(_146_i);
        Dafny.ISequence<Dafny.Rune> _173_ctorMatch;
        _173_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_172_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _174_modulePrefix;
        _174_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _175_printRhs;
        _175_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _174_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_172_ctor).dtor_name), (((_172_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _176_j;
        _176_j = BigInteger.Zero;
        while ((_176_j) < (new BigInteger(((_172_ctor).dtor_args).Count))) {
          DAST._IFormal _177_formal;
          _177_formal = ((_172_ctor).dtor_args).Select(_176_j);
          _173_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_173_ctorMatch, DCOMP.__default.escapeIdent((_177_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_176_j).Sign == 1) {
            _175_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_175_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _175_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_175_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_177_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _176_j = (_176_j) + (BigInteger.One);
        }
        _173_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_173_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_172_ctor).dtor_hasAnyArgs) {
          _175_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_175_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _175_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_175_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _171_printImplBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_171_printImplBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _173_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _175_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _146_i = (_146_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _171_printImplBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_171_printImplBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _171_printImplBody = Dafny.Sequence<Dafny.Rune>.Concat(_171_printImplBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _178_printImpl;
      _178_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, (RAST.Impl.create_ImplFor(_137_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _142_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_171_printImplBody)))._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      Dafny.ISequence<Dafny.Rune> _179_defaultImpl;
      _179_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _146_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _180_defaultImplBody;
        _180_defaultImplBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        while ((_146_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _181_formal;
          _181_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_146_i);
          _180_defaultImplBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_180_defaultImplBody, DCOMP.__default.escapeIdent((_181_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _146_i = (_146_i) + (BigInteger.One);
        }
        _180_defaultImplBody = Dafny.Sequence<Dafny.Rune>.Concat(_180_defaultImplBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n"));
        _179_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, (RAST.Impl.create_ImplFor(_137_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"), Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _142_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_180_defaultImplBody)))._ToString(RAST.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_169_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _170_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _178_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _179_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _182_i;
        _182_i = BigInteger.Zero;
        while ((_182_i) < (new BigInteger((p).Count))) {
          if ((_182_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_182_i))));
          _182_i = (_182_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _183_i;
        _183_i = BigInteger.Zero;
        while ((_183_i) < (new BigInteger((args).Count))) {
          if ((_183_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _184_genTp;
          Dafny.ISequence<Dafny.Rune> _out54;
          _out54 = DCOMP.COMP.GenType((args).Select(_183_i), inBinding, inFn);
          _184_genTp = _out54;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _184_genTp);
          _183_i = (_183_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source6 = c;
      if (_source6.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _185___mcc_h0 = _source6.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _186___mcc_h1 = _source6.dtor_typeArgs;
        DAST._IResolvedType _187___mcc_h2 = _source6.dtor_resolved;
        DAST._IResolvedType _188_resolved = _187___mcc_h2;
        Dafny.ISequence<DAST._IType> _189_args = _186___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _190_p = _185___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out55;
          _out55 = DCOMP.COMP.GenPath(_190_p);
          s = _out55;
          Dafny.ISequence<Dafny.Rune> _191_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out56;
          _out56 = DCOMP.COMP.GenTypeArgs(_189_args, inBinding, inFn);
          _191_typeArgs = _out56;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _191_typeArgs);
          DAST._IResolvedType _source7 = _188_resolved;
          if (_source7.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _192___mcc_h18 = _source7.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source7.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _193___mcc_h20 = _source7.dtor_path;
            {
              if ((_190_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _194___mcc_h22 = _source7.dtor_Newtype_a0;
            DAST._IResolvedType _195_Primitive = _188_resolved;
          }
        }
      } else if (_source6.is_Nullable) {
        DAST._IType _196___mcc_h3 = _source6.dtor_Nullable_a0;
        DAST._IType _197_inner = _196___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _198_innerStr;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenType(_197_inner, inBinding, inFn);
          _198_innerStr = _out57;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _198_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source6.is_Tuple) {
        Dafny.ISequence<DAST._IType> _199___mcc_h4 = _source6.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _200_types = _199___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _201_i;
          _201_i = BigInteger.Zero;
          while ((_201_i) < (new BigInteger((_200_types).Count))) {
            if ((_201_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _202_generated;
            Dafny.ISequence<Dafny.Rune> _out58;
            _out58 = DCOMP.COMP.GenType((_200_types).Select(_201_i), inBinding, inFn);
            _202_generated = _out58;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _202_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _201_i = (_201_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source6.is_Array) {
        DAST._IType _203___mcc_h5 = _source6.dtor_element;
        BigInteger _204___mcc_h6 = _source6.dtor_dims;
        BigInteger _205_dims = _204___mcc_h6;
        DAST._IType _206_element = _203___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _207_elemStr;
          Dafny.ISequence<Dafny.Rune> _out59;
          _out59 = DCOMP.COMP.GenType(_206_element, inBinding, inFn);
          _207_elemStr = _out59;
          s = _207_elemStr;
          BigInteger _208_i;
          _208_i = BigInteger.Zero;
          while ((_208_i) < (_205_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _208_i = (_208_i) + (BigInteger.One);
          }
        }
      } else if (_source6.is_Seq) {
        DAST._IType _209___mcc_h7 = _source6.dtor_element;
        DAST._IType _210_element = _209___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _211_elemStr;
          Dafny.ISequence<Dafny.Rune> _out60;
          _out60 = DCOMP.COMP.GenType(_210_element, inBinding, inFn);
          _211_elemStr = _out60;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _211_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source6.is_Set) {
        DAST._IType _212___mcc_h8 = _source6.dtor_element;
        DAST._IType _213_element = _212___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _214_elemStr;
          Dafny.ISequence<Dafny.Rune> _out61;
          _out61 = DCOMP.COMP.GenType(_213_element, inBinding, inFn);
          _214_elemStr = _out61;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _214_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source6.is_Multiset) {
        DAST._IType _215___mcc_h9 = _source6.dtor_element;
        DAST._IType _216_element = _215___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _217_elemStr;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType(_216_element, inBinding, inFn);
          _217_elemStr = _out62;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _217_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source6.is_Map) {
        DAST._IType _218___mcc_h10 = _source6.dtor_key;
        DAST._IType _219___mcc_h11 = _source6.dtor_value;
        DAST._IType _220_value = _219___mcc_h11;
        DAST._IType _221_key = _218___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _222_keyStr;
          Dafny.ISequence<Dafny.Rune> _out63;
          _out63 = DCOMP.COMP.GenType(_221_key, inBinding, inFn);
          _222_keyStr = _out63;
          Dafny.ISequence<Dafny.Rune> _223_valueStr;
          Dafny.ISequence<Dafny.Rune> _out64;
          _out64 = DCOMP.COMP.GenType(_220_value, inBinding, inFn);
          _223_valueStr = _out64;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _222_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _223_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source6.is_Arrow) {
        Dafny.ISequence<DAST._IType> _224___mcc_h12 = _source6.dtor_args;
        DAST._IType _225___mcc_h13 = _source6.dtor_result;
        DAST._IType _226_result = _225___mcc_h13;
        Dafny.ISequence<DAST._IType> _227_args = _224___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _228_i;
          _228_i = BigInteger.Zero;
          while ((_228_i) < (new BigInteger((_227_args).Count))) {
            if ((_228_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _229_generated;
            Dafny.ISequence<Dafny.Rune> _out65;
            _out65 = DCOMP.COMP.GenType((_227_args).Select(_228_i), inBinding, true);
            _229_generated = _out65;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _229_generated);
            _228_i = (_228_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _230_resultType;
          Dafny.ISequence<Dafny.Rune> _out66;
          _out66 = DCOMP.COMP.GenType(_226_result, inBinding, (inFn) || (inBinding));
          _230_resultType = _out66;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _230_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source6.is_Primitive) {
        DAST._IPrimitive _231___mcc_h14 = _source6.dtor_Primitive_a0;
        DAST._IPrimitive _232_p = _231___mcc_h14;
        {
          DAST._IPrimitive _source8 = _232_p;
          if (_source8.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source8.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source8.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source8.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source6.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _233___mcc_h15 = _source6.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _234_v = _233___mcc_h15;
        s = _234_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _235___mcc_h16 = _source6.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source9 = _235___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _236___mcc_h17 = _source9;
        Dafny.ISequence<Dafny.Rune> _237_name = _236___mcc_h17;
        s = DCOMP.__default.escapeIdent(_237_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _238_i;
      _238_i = BigInteger.Zero;
      while ((_238_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source10 = (body).Select(_238_i);
        DAST._IMethod _239___mcc_h0 = _source10;
        DAST._IMethod _240_m = _239___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source11 = (_240_m).dtor_overridingPath;
          if (_source11.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _241___mcc_h1 = _source11.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _242_p = _241___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _243_existing;
              _243_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_242_p)) {
                _243_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _242_p);
              }
              if ((new BigInteger((_243_existing).Count)).Sign == 1) {
                _243_existing = Dafny.Sequence<Dafny.Rune>.Concat(_243_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _244_genMethod;
              Dafny.ISequence<Dafny.Rune> _out67;
              _out67 = DCOMP.COMP.GenMethod(_240_m, true, enclosingType, enclosingTypeParams);
              _244_genMethod = _out67;
              _243_existing = Dafny.Sequence<Dafny.Rune>.Concat(_243_existing, _244_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_242_p, _243_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _245_generated;
              Dafny.ISequence<Dafny.Rune> _out68;
              _out68 = DCOMP.COMP.GenMethod(_240_m, forTrait, enclosingType, enclosingTypeParams);
              _245_generated = _out68;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _245_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _238_i = (_238_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _246_i;
      _246_i = BigInteger.Zero;
      while ((_246_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _247_param;
        _247_param = (@params).Select(_246_i);
        Dafny.ISequence<Dafny.Rune> _248_paramType;
        Dafny.ISequence<Dafny.Rune> _out69;
        _out69 = DCOMP.COMP.GenType((_247_param).dtor_typ, false, false);
        _248_paramType = _out69;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_247_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _248_paramType);
        if ((_246_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _246_i = (_246_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _249_params;
      Dafny.ISequence<Dafny.Rune> _out70;
      _out70 = DCOMP.COMP.GenParams((m).dtor_params);
      _249_params = _out70;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _250_paramNames;
      _250_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _251_paramI;
      _251_paramI = BigInteger.Zero;
      while ((_251_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _250_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_250_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_251_paramI)).dtor_name));
        _251_paramI = (_251_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _249_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _249_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _252_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out71;
          _out71 = DCOMP.COMP.GenType(enclosingType, false, false);
          _252_enclosingTypeString = _out71;
          _249_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _252_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _249_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _253_retType;
      _253_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _254_typeI;
      _254_typeI = BigInteger.Zero;
      while ((_254_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_254_typeI).Sign == 1) {
          _253_retType = Dafny.Sequence<Dafny.Rune>.Concat(_253_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _255_typeString;
        Dafny.ISequence<Dafny.Rune> _out72;
        _out72 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_254_typeI), false, false);
        _255_typeString = _out72;
        _253_retType = Dafny.Sequence<Dafny.Rune>.Concat(_253_retType, _255_typeString);
        _254_typeI = (_254_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _253_retType = Dafny.Sequence<Dafny.Rune>.Concat(_253_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _256_typeParamsFiltered;
      _256_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _257_typeParamI;
      _257_typeParamI = BigInteger.Zero;
      while ((_257_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _258_typeParam;
        _258_typeParam = ((m).dtor_typeParams).Select(_257_typeParamI);
        if (!((enclosingTypeParams).Contains(_258_typeParam))) {
          _256_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_256_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_258_typeParam));
        }
        _257_typeParamI = (_257_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _259_whereClauses;
      _259_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_256_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _259_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_259_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _260_i;
        _260_i = BigInteger.Zero;
        while ((_260_i) < (new BigInteger((_256_typeParamsFiltered).Count))) {
          if ((_260_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _259_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_259_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _261_typeString;
          Dafny.ISequence<Dafny.Rune> _out73;
          _out73 = DCOMP.COMP.GenType((_256_typeParamsFiltered).Select(_260_i), false, false);
          _261_typeString = _out73;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _261_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _261_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _259_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_259_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _261_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _260_i = (_260_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _249_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _253_retType), _259_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _262_earlyReturn;
        _262_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source12 = (m).dtor_outVars;
        if (_source12.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _263___mcc_h0 = _source12.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _264_outVars = _263___mcc_h0;
          {
            _262_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _265_outI;
            _265_outI = BigInteger.Zero;
            while ((_265_outI) < (new BigInteger((_264_outVars).Count))) {
              if ((_265_outI).Sign == 1) {
                _262_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_262_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _266_outVar;
              _266_outVar = (_264_outVars).Select(_265_outI);
              _262_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_262_earlyReturn, DCOMP.__default.escapeIdent((_266_outVar)));
              _265_outI = (_265_outI) + (BigInteger.One);
            }
            _262_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_262_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _267_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _268___v15;
        Dafny.ISequence<Dafny.Rune> _out74;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out75;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _250_paramNames, true, _262_earlyReturn, out _out74, out _out75);
        _267_body = _out74;
        _268___v15 = _out75;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _267_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _269_declarations;
      _269_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _270_i;
      _270_i = BigInteger.Zero;
      while ((_270_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _271_stmt;
        _271_stmt = (stmts).Select(_270_i);
        Dafny.ISequence<Dafny.Rune> _272_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _273_recIdents;
        Dafny.ISequence<Dafny.Rune> _out76;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out77;
        DCOMP.COMP.GenStmt(_271_stmt, selfIdent, @params, (isLast) && ((_270_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out76, out _out77);
        _272_stmtString = _out76;
        _273_recIdents = _out77;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_273_recIdents, _269_declarations));
        DAST._IStatement _source13 = _271_stmt;
        if (_source13.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _274___mcc_h0 = _source13.dtor_name;
          DAST._IType _275___mcc_h1 = _source13.dtor_typ;
          DAST._IOptional<DAST._IExpression> _276___mcc_h2 = _source13.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _277_name = _274___mcc_h0;
          {
            _269_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_269_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_277_name));
          }
        } else if (_source13.is_Assign) {
          DAST._IAssignLhs _278___mcc_h6 = _source13.dtor_lhs;
          DAST._IExpression _279___mcc_h7 = _source13.dtor_value;
        } else if (_source13.is_If) {
          DAST._IExpression _280___mcc_h10 = _source13.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _281___mcc_h11 = _source13.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _282___mcc_h12 = _source13.dtor_els;
        } else if (_source13.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _283___mcc_h16 = _source13.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _284___mcc_h17 = _source13.dtor_body;
        } else if (_source13.is_While) {
          DAST._IExpression _285___mcc_h20 = _source13.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _286___mcc_h21 = _source13.dtor_body;
        } else if (_source13.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _287___mcc_h24 = _source13.dtor_boundName;
          DAST._IType _288___mcc_h25 = _source13.dtor_boundType;
          DAST._IExpression _289___mcc_h26 = _source13.dtor_over;
          Dafny.ISequence<DAST._IStatement> _290___mcc_h27 = _source13.dtor_body;
        } else if (_source13.is_Call) {
          DAST._IExpression _291___mcc_h32 = _source13.dtor_on;
          Dafny.ISequence<Dafny.Rune> _292___mcc_h33 = _source13.dtor_name;
          Dafny.ISequence<DAST._IType> _293___mcc_h34 = _source13.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _294___mcc_h35 = _source13.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _295___mcc_h36 = _source13.dtor_outs;
        } else if (_source13.is_Return) {
          DAST._IExpression _296___mcc_h42 = _source13.dtor_expr;
        } else if (_source13.is_EarlyReturn) {
        } else if (_source13.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _297___mcc_h44 = _source13.dtor_toLabel;
        } else if (_source13.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _298___mcc_h46 = _source13.dtor_body;
        } else if (_source13.is_JumpTailCallStart) {
        } else if (_source13.is_Halt) {
        } else {
          DAST._IExpression _299___mcc_h48 = _source13.dtor_Print_a0;
        }
        if ((_270_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _272_stmtString);
        _270_i = (_270_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source14 = lhs;
      if (_source14.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _300___mcc_h0 = _source14.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source15 = _300___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _301___mcc_h1 = _source15;
        Dafny.ISequence<Dafny.Rune> _302_id = _301___mcc_h1;
        {
          if ((@params).Contains(_302_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_302_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_302_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_302_id);
          needsIIFE = false;
        }
      } else if (_source14.is_Select) {
        DAST._IExpression _303___mcc_h2 = _source14.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _304___mcc_h3 = _source14.dtor_field;
        Dafny.ISequence<Dafny.Rune> _305_field = _304___mcc_h3;
        DAST._IExpression _306_on = _303___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _307_onExpr;
          bool _308_onOwned;
          bool _309_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _310_recIdents;
          Dafny.ISequence<Dafny.Rune> _out78;
          bool _out79;
          bool _out80;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out81;
          DCOMP.COMP.GenExpr(_306_on, selfIdent, @params, false, out _out78, out _out79, out _out80, out _out81);
          _307_onExpr = _out78;
          _308_onOwned = _out79;
          _309_onErased = _out80;
          _310_recIdents = _out81;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _307_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _305_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _310_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _311___mcc_h4 = _source14.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _312___mcc_h5 = _source14.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _313_indices = _312___mcc_h5;
        DAST._IExpression _314_on = _311___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _315_onExpr;
          bool _316_onOwned;
          bool _317_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _318_recIdents;
          Dafny.ISequence<Dafny.Rune> _out82;
          bool _out83;
          bool _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_314_on, selfIdent, @params, false, out _out82, out _out83, out _out84, out _out85);
          _315_onExpr = _out82;
          _316_onOwned = _out83;
          _317_onErased = _out84;
          _318_recIdents = _out85;
          readIdents = _318_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _319_i;
          _319_i = BigInteger.Zero;
          while ((_319_i) < (new BigInteger((_313_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _320_idx;
            bool _321___v19;
            bool _322_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _323_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out86;
            bool _out87;
            bool _out88;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out89;
            DCOMP.COMP.GenExpr((_313_indices).Select(_319_i), selfIdent, @params, true, out _out86, out _out87, out _out88, out _out89);
            _320_idx = _out86;
            _321___v19 = _out87;
            _322_idxErased = _out88;
            _323_recIdentsIdx = _out89;
            if (!(_322_idxErased)) {
              _320_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _320_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), RAST.__default.natToString(_319_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _320_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _323_recIdentsIdx);
            _319_i = (_319_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _315_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _319_i = BigInteger.Zero;
          while ((_319_i) < (new BigInteger((_313_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), RAST.__default.natToString(_319_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _319_i = (_319_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source16 = stmt;
      if (_source16.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _324___mcc_h0 = _source16.dtor_name;
        DAST._IType _325___mcc_h1 = _source16.dtor_typ;
        DAST._IOptional<DAST._IExpression> _326___mcc_h2 = _source16.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source17 = _326___mcc_h2;
        if (_source17.is_Some) {
          DAST._IExpression _327___mcc_h3 = _source17.dtor_Some_a0;
          DAST._IExpression _328_expression = _327___mcc_h3;
          DAST._IType _329_typ = _325___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _330_name = _324___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _331_typeString;
            Dafny.ISequence<Dafny.Rune> _out90;
            _out90 = DCOMP.COMP.GenType(_329_typ, true, false);
            _331_typeString = _out90;
            Dafny.ISequence<Dafny.Rune> _332_expr;
            bool _333___v20;
            bool _334_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _335_recIdents;
            Dafny.ISequence<Dafny.Rune> _out91;
            bool _out92;
            bool _out93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
            DCOMP.COMP.GenExpr(_328_expression, selfIdent, @params, true, out _out91, out _out92, out _out93, out _out94);
            _332_expr = _out91;
            _333___v20 = _out92;
            _334_recErased = _out93;
            _335_recIdents = _out94;
            if (!(_334_recErased)) {
              _332_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _332_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _332_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _331_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _332_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_330_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _331_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _332_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _335_recIdents;
          }
        } else {
          DAST._IType _336_typ = _325___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _337_name = _324___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _338_typeString;
            Dafny.ISequence<Dafny.Rune> _out95;
            _out95 = DCOMP.COMP.GenType(_336_typ, true, false);
            _338_typeString = _out95;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_337_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _338_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source16.is_Assign) {
        DAST._IAssignLhs _339___mcc_h4 = _source16.dtor_lhs;
        DAST._IExpression _340___mcc_h5 = _source16.dtor_value;
        DAST._IExpression _341_expression = _340___mcc_h5;
        DAST._IAssignLhs _342_lhs = _339___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _343_lhsGen;
          bool _344_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _345_recIdents;
          Dafny.ISequence<Dafny.Rune> _out96;
          bool _out97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
          DCOMP.COMP.GenAssignLhs(_342_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out96, out _out97, out _out98);
          _343_lhsGen = _out96;
          _344_needsIIFE = _out97;
          _345_recIdents = _out98;
          Dafny.ISequence<Dafny.Rune> _346_exprGen;
          bool _347___v21;
          bool _348_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _349_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out99;
          bool _out100;
          bool _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_341_expression, selfIdent, @params, true, out _out99, out _out100, out _out101, out _out102);
          _346_exprGen = _out99;
          _347___v21 = _out100;
          _348_exprErased = _out101;
          _349_exprIdents = _out102;
          if (!(_348_exprErased)) {
            _346_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _346_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _346_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _346_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_344_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _346_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _343_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_343_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _346_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_345_recIdents, _349_exprIdents);
        }
      } else if (_source16.is_If) {
        DAST._IExpression _350___mcc_h6 = _source16.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _351___mcc_h7 = _source16.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _352___mcc_h8 = _source16.dtor_els;
        Dafny.ISequence<DAST._IStatement> _353_els = _352___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _354_thn = _351___mcc_h7;
        DAST._IExpression _355_cond = _350___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _356_condString;
          bool _357___v22;
          bool _358_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _359_recIdents;
          Dafny.ISequence<Dafny.Rune> _out103;
          bool _out104;
          bool _out105;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out106;
          DCOMP.COMP.GenExpr(_355_cond, selfIdent, @params, true, out _out103, out _out104, out _out105, out _out106);
          _356_condString = _out103;
          _357___v22 = _out104;
          _358_condErased = _out105;
          _359_recIdents = _out106;
          if (!(_358_condErased)) {
            _356_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _356_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _359_recIdents;
          Dafny.ISequence<Dafny.Rune> _360_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _361_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
          DCOMP.COMP.GenStmts(_354_thn, selfIdent, @params, isLast, earlyReturn, out _out107, out _out108);
          _360_thnString = _out107;
          _361_thnIdents = _out108;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _361_thnIdents);
          Dafny.ISequence<Dafny.Rune> _362_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _363_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out110;
          DCOMP.COMP.GenStmts(_353_els, selfIdent, @params, isLast, earlyReturn, out _out109, out _out110);
          _362_elsString = _out109;
          _363_elsIdents = _out110;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _363_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _356_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _360_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _362_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _364___mcc_h9 = _source16.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _365___mcc_h10 = _source16.dtor_body;
        Dafny.ISequence<DAST._IStatement> _366_body = _365___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _367_lbl = _364___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _368_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _369_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out111;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out112;
          DCOMP.COMP.GenStmts(_366_body, selfIdent, @params, isLast, earlyReturn, out _out111, out _out112);
          _368_bodyString = _out111;
          _369_bodyIdents = _out112;
          readIdents = _369_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _367_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _368_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_While) {
        DAST._IExpression _370___mcc_h11 = _source16.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _371___mcc_h12 = _source16.dtor_body;
        Dafny.ISequence<DAST._IStatement> _372_body = _371___mcc_h12;
        DAST._IExpression _373_cond = _370___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _374_condString;
          bool _375___v23;
          bool _376_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _377_recIdents;
          Dafny.ISequence<Dafny.Rune> _out113;
          bool _out114;
          bool _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenExpr(_373_cond, selfIdent, @params, true, out _out113, out _out114, out _out115, out _out116);
          _374_condString = _out113;
          _375___v23 = _out114;
          _376_condErased = _out115;
          _377_recIdents = _out116;
          if (!(_376_condErased)) {
            _374_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _374_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _377_recIdents;
          Dafny.ISequence<Dafny.Rune> _378_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _379_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out118;
          DCOMP.COMP.GenStmts(_372_body, selfIdent, @params, false, earlyReturn, out _out117, out _out118);
          _378_bodyString = _out117;
          _379_bodyIdents = _out118;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _379_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _374_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _378_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _380___mcc_h13 = _source16.dtor_boundName;
        DAST._IType _381___mcc_h14 = _source16.dtor_boundType;
        DAST._IExpression _382___mcc_h15 = _source16.dtor_over;
        Dafny.ISequence<DAST._IStatement> _383___mcc_h16 = _source16.dtor_body;
        Dafny.ISequence<DAST._IStatement> _384_body = _383___mcc_h16;
        DAST._IExpression _385_over = _382___mcc_h15;
        DAST._IType _386_boundType = _381___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _387_boundName = _380___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _388_overString;
          bool _389___v24;
          bool _390_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _391_recIdents;
          Dafny.ISequence<Dafny.Rune> _out119;
          bool _out120;
          bool _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenExpr(_385_over, selfIdent, @params, true, out _out119, out _out120, out _out121, out _out122);
          _388_overString = _out119;
          _389___v24 = _out120;
          _390_overErased = _out121;
          _391_recIdents = _out122;
          Dafny.ISequence<Dafny.Rune> _392_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out123;
          _out123 = DCOMP.COMP.GenType(_386_boundType, false, false);
          _392_boundTypeStr = _out123;
          readIdents = _391_recIdents;
          Dafny.ISequence<Dafny.Rune> _393_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _394_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenStmts(_384_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_387_boundName)), false, earlyReturn, out _out124, out _out125);
          _393_bodyString = _out124;
          _394_bodyIdents = _out125;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _394_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_387_boundName));
          Dafny.ISequence<Dafny.Rune> _395_unerasedIter;
          _395_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_390_overErased) {
            _395_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _392_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _395_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _388_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_387_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _395_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _393_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_Call) {
        DAST._IExpression _396___mcc_h17 = _source16.dtor_on;
        Dafny.ISequence<Dafny.Rune> _397___mcc_h18 = _source16.dtor_name;
        Dafny.ISequence<DAST._IType> _398___mcc_h19 = _source16.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _399___mcc_h20 = _source16.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _400___mcc_h21 = _source16.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _401_maybeOutVars = _400___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _402_args = _399___mcc_h20;
        Dafny.ISequence<DAST._IType> _403_typeArgs = _398___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _404_name = _397___mcc_h18;
        DAST._IExpression _405_on = _396___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _406_typeArgString;
          _406_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_403_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _407_typeI;
            _407_typeI = BigInteger.Zero;
            _406_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_407_typeI) < (new BigInteger((_403_typeArgs).Count))) {
              if ((_407_typeI).Sign == 1) {
                _406_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_406_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _408_typeString;
              Dafny.ISequence<Dafny.Rune> _out126;
              _out126 = DCOMP.COMP.GenType((_403_typeArgs).Select(_407_typeI), false, false);
              _408_typeString = _out126;
              _406_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_406_typeArgString, _408_typeString);
              _407_typeI = (_407_typeI) + (BigInteger.One);
            }
            _406_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_406_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _409_argString;
          _409_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _410_i;
          _410_i = BigInteger.Zero;
          while ((_410_i) < (new BigInteger((_402_args).Count))) {
            if ((_410_i).Sign == 1) {
              _409_argString = Dafny.Sequence<Dafny.Rune>.Concat(_409_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _411_argExpr;
            bool _412_isOwned;
            bool _413_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _414_argIdents;
            Dafny.ISequence<Dafny.Rune> _out127;
            bool _out128;
            bool _out129;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out130;
            DCOMP.COMP.GenExpr((_402_args).Select(_410_i), selfIdent, @params, false, out _out127, out _out128, out _out129, out _out130);
            _411_argExpr = _out127;
            _412_isOwned = _out128;
            _413_argErased = _out129;
            _414_argIdents = _out130;
            if (_412_isOwned) {
              _411_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _411_argExpr);
            }
            _409_argString = Dafny.Sequence<Dafny.Rune>.Concat(_409_argString, _411_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _414_argIdents);
            _410_i = (_410_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _415_enclosingString;
          bool _416___v25;
          bool _417___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _418_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out131;
          bool _out132;
          bool _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenExpr(_405_on, selfIdent, @params, false, out _out131, out _out132, out _out133, out _out134);
          _415_enclosingString = _out131;
          _416___v25 = _out132;
          _417___v26 = _out133;
          _418_enclosingIdents = _out134;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _418_enclosingIdents);
          DAST._IExpression _source18 = _405_on;
          if (_source18.is_Literal) {
            DAST._ILiteral _419___mcc_h26 = _source18.dtor_Literal_a0;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _420___mcc_h28 = _source18.dtor_Ident_a0;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _421___mcc_h30 = _source18.dtor_Companion_a0;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_415_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source18.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _422___mcc_h32 = _source18.dtor_Tuple_a0;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _423___mcc_h34 = _source18.dtor_path;
            Dafny.ISequence<DAST._IType> _424___mcc_h35 = _source18.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _425___mcc_h36 = _source18.dtor_args;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _426___mcc_h40 = _source18.dtor_dims;
            DAST._IType _427___mcc_h41 = _source18.dtor_typ;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _428___mcc_h44 = _source18.dtor_path;
            Dafny.ISequence<DAST._IType> _429___mcc_h45 = _source18.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _430___mcc_h46 = _source18.dtor_variant;
            bool _431___mcc_h47 = _source18.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _432___mcc_h48 = _source18.dtor_contents;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Convert) {
            DAST._IExpression _433___mcc_h54 = _source18.dtor_value;
            DAST._IType _434___mcc_h55 = _source18.dtor_from;
            DAST._IType _435___mcc_h56 = _source18.dtor_typ;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SeqConstruct) {
            DAST._IExpression _436___mcc_h60 = _source18.dtor_length;
            DAST._IExpression _437___mcc_h61 = _source18.dtor_elem;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _438___mcc_h64 = _source18.dtor_elements;
            DAST._IType _439___mcc_h65 = _source18.dtor_typ;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _440___mcc_h68 = _source18.dtor_elements;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _441___mcc_h70 = _source18.dtor_mapElems;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_This) {
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Ite) {
            DAST._IExpression _442___mcc_h72 = _source18.dtor_cond;
            DAST._IExpression _443___mcc_h73 = _source18.dtor_thn;
            DAST._IExpression _444___mcc_h74 = _source18.dtor_els;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_UnOp) {
            DAST._IUnaryOp _445___mcc_h78 = _source18.dtor_unOp;
            DAST._IExpression _446___mcc_h79 = _source18.dtor_expr;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_BinOp) {
            DAST._IBinOp _447___mcc_h82 = _source18.dtor_op;
            DAST._IExpression _448___mcc_h83 = _source18.dtor_left;
            DAST._IExpression _449___mcc_h84 = _source18.dtor_right;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_ArrayLen) {
            DAST._IExpression _450___mcc_h88 = _source18.dtor_expr;
            BigInteger _451___mcc_h89 = _source18.dtor_dim;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Select) {
            DAST._IExpression _452___mcc_h92 = _source18.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _453___mcc_h93 = _source18.dtor_field;
            bool _454___mcc_h94 = _source18.dtor_isConstant;
            bool _455___mcc_h95 = _source18.dtor_onDatatype;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SelectFn) {
            DAST._IExpression _456___mcc_h100 = _source18.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _457___mcc_h101 = _source18.dtor_field;
            bool _458___mcc_h102 = _source18.dtor_onDatatype;
            bool _459___mcc_h103 = _source18.dtor_isStatic;
            BigInteger _460___mcc_h104 = _source18.dtor_arity;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Index) {
            DAST._IExpression _461___mcc_h110 = _source18.dtor_expr;
            DAST._ICollKind _462___mcc_h111 = _source18.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _463___mcc_h112 = _source18.dtor_indices;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_IndexRange) {
            DAST._IExpression _464___mcc_h116 = _source18.dtor_expr;
            bool _465___mcc_h117 = _source18.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _466___mcc_h118 = _source18.dtor_low;
            DAST._IOptional<DAST._IExpression> _467___mcc_h119 = _source18.dtor_high;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_TupleSelect) {
            DAST._IExpression _468___mcc_h124 = _source18.dtor_expr;
            BigInteger _469___mcc_h125 = _source18.dtor_index;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Call) {
            DAST._IExpression _470___mcc_h128 = _source18.dtor_on;
            Dafny.ISequence<Dafny.Rune> _471___mcc_h129 = _source18.dtor_name;
            Dafny.ISequence<DAST._IType> _472___mcc_h130 = _source18.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _473___mcc_h131 = _source18.dtor_args;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _474___mcc_h136 = _source18.dtor_params;
            DAST._IType _475___mcc_h137 = _source18.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _476___mcc_h138 = _source18.dtor_body;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _477___mcc_h142 = _source18.dtor_values;
            DAST._IType _478___mcc_h143 = _source18.dtor_retType;
            DAST._IExpression _479___mcc_h144 = _source18.dtor_expr;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _480___mcc_h148 = _source18.dtor_name;
            DAST._IType _481___mcc_h149 = _source18.dtor_typ;
            DAST._IExpression _482___mcc_h150 = _source18.dtor_value;
            DAST._IExpression _483___mcc_h151 = _source18.dtor_iifeBody;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_Apply) {
            DAST._IExpression _484___mcc_h156 = _source18.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _485___mcc_h157 = _source18.dtor_args;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_TypeTest) {
            DAST._IExpression _486___mcc_h160 = _source18.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _487___mcc_h161 = _source18.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _488___mcc_h162 = _source18.dtor_variant;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_InitializationValue) {
            DAST._IType _489___mcc_h166 = _source18.dtor_typ;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_BoolBoundedPool) {
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SetBoundedPool) {
            DAST._IExpression _490___mcc_h168 = _source18.dtor_of;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source18.is_SeqBoundedPool) {
            DAST._IExpression _491___mcc_h170 = _source18.dtor_of;
            bool _492___mcc_h171 = _source18.dtor_includeDuplicates;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _493___mcc_h174 = _source18.dtor_lo;
            DAST._IExpression _494___mcc_h175 = _source18.dtor_hi;
            {
              _415_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _415_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _495_receiver;
          _495_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source19 = _401_maybeOutVars;
          if (_source19.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _496___mcc_h178 = _source19.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _497_outVars = _496___mcc_h178;
            {
              if ((new BigInteger((_497_outVars).Count)) > (BigInteger.One)) {
                _495_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _498_outI;
              _498_outI = BigInteger.Zero;
              while ((_498_outI) < (new BigInteger((_497_outVars).Count))) {
                if ((_498_outI).Sign == 1) {
                  _495_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_495_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _499_outVar;
                _499_outVar = (_497_outVars).Select(_498_outI);
                _495_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_495_receiver, (_499_outVar));
                _498_outI = (_498_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_497_outVars).Count)) > (BigInteger.One)) {
                _495_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_495_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_495_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_495_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _415_enclosingString), DCOMP.__default.escapeIdent(_404_name)), _406_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _409_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source16.is_Return) {
        DAST._IExpression _500___mcc_h22 = _source16.dtor_expr;
        DAST._IExpression _501_expr = _500___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _502_exprString;
          bool _503___v29;
          bool _504_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _505_recIdents;
          Dafny.ISequence<Dafny.Rune> _out135;
          bool _out136;
          bool _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenExpr(_501_expr, selfIdent, @params, true, out _out135, out _out136, out _out137, out _out138);
          _502_exprString = _out135;
          _503___v29 = _out136;
          _504_recErased = _out137;
          _505_recIdents = _out138;
          _502_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _502_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _505_recIdents;
          if (isLast) {
            generated = _502_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _502_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source16.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source16.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _506___mcc_h23 = _source16.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _507_toLabel = _506___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source20 = _507_toLabel;
          if (_source20.is_Some) {
            Dafny.ISequence<Dafny.Rune> _508___mcc_h179 = _source20.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _509_lbl = _508___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _509_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source16.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _510___mcc_h24 = _source16.dtor_body;
        Dafny.ISequence<DAST._IStatement> _511_body = _510___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _512_paramI;
          _512_paramI = BigInteger.Zero;
          while ((_512_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _513_param;
            _513_param = (@params).Select(_512_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_513_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_513_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _512_paramI = (_512_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _514_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _515_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out139;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out140;
          DCOMP.COMP.GenStmts(_511_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out139, out _out140);
          _514_bodyString = _out139;
          _515_bodyIdents = _out140;
          readIdents = _515_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _514_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source16.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source16.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _516___mcc_h25 = _source16.dtor_Print_a0;
        DAST._IExpression _517_e = _516___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _518_printedExpr;
          bool _519_isOwned;
          bool _520___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _521_recIdents;
          Dafny.ISequence<Dafny.Rune> _out141;
          bool _out142;
          bool _out143;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out144;
          DCOMP.COMP.GenExpr(_517_e, selfIdent, @params, false, out _out141, out _out142, out _out143, out _out144);
          _518_printedExpr = _out141;
          _519_isOwned = _out142;
          _520___v30 = _out143;
          _521_recIdents = _out144;
          if (_519_isOwned) {
            _518_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _518_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _518_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _521_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source21 = e;
      if (_source21.is_Literal) {
        DAST._ILiteral _522___mcc_h0 = _source21.dtor_Literal_a0;
        DAST._ILiteral _source22 = _522___mcc_h0;
        if (_source22.is_BoolLiteral) {
          bool _523___mcc_h1 = _source22.dtor_BoolLiteral_a0;
          if ((_523___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source22.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _524___mcc_h2 = _source22.dtor_IntLiteral_a0;
          DAST._IType _525___mcc_h3 = _source22.dtor_IntLiteral_a1;
          DAST._IType _526_t = _525___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _527_i = _524___mcc_h2;
          {
            DAST._IType _source23 = _526_t;
            if (_source23.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _528___mcc_h237 = _source23.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _529___mcc_h238 = _source23.dtor_typeArgs;
              DAST._IResolvedType _530___mcc_h239 = _source23.dtor_resolved;
              DAST._IType _531_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _532_genType;
                Dafny.ISequence<Dafny.Rune> _out145;
                _out145 = DCOMP.COMP.GenType(_531_o, false, false);
                _532_genType = _out145;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _532_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Nullable) {
              DAST._IType _533___mcc_h243 = _source23.dtor_Nullable_a0;
              DAST._IType _534_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _535_genType;
                Dafny.ISequence<Dafny.Rune> _out146;
                _out146 = DCOMP.COMP.GenType(_534_o, false, false);
                _535_genType = _out146;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _535_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Tuple) {
              Dafny.ISequence<DAST._IType> _536___mcc_h245 = _source23.dtor_Tuple_a0;
              DAST._IType _537_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _538_genType;
                Dafny.ISequence<Dafny.Rune> _out147;
                _out147 = DCOMP.COMP.GenType(_537_o, false, false);
                _538_genType = _out147;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _538_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Array) {
              DAST._IType _539___mcc_h247 = _source23.dtor_element;
              BigInteger _540___mcc_h248 = _source23.dtor_dims;
              DAST._IType _541_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _542_genType;
                Dafny.ISequence<Dafny.Rune> _out148;
                _out148 = DCOMP.COMP.GenType(_541_o, false, false);
                _542_genType = _out148;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _542_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Seq) {
              DAST._IType _543___mcc_h251 = _source23.dtor_element;
              DAST._IType _544_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _545_genType;
                Dafny.ISequence<Dafny.Rune> _out149;
                _out149 = DCOMP.COMP.GenType(_544_o, false, false);
                _545_genType = _out149;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _545_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Set) {
              DAST._IType _546___mcc_h253 = _source23.dtor_element;
              DAST._IType _547_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _548_genType;
                Dafny.ISequence<Dafny.Rune> _out150;
                _out150 = DCOMP.COMP.GenType(_547_o, false, false);
                _548_genType = _out150;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _548_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Multiset) {
              DAST._IType _549___mcc_h255 = _source23.dtor_element;
              DAST._IType _550_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _551_genType;
                Dafny.ISequence<Dafny.Rune> _out151;
                _out151 = DCOMP.COMP.GenType(_550_o, false, false);
                _551_genType = _out151;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _551_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Map) {
              DAST._IType _552___mcc_h257 = _source23.dtor_key;
              DAST._IType _553___mcc_h258 = _source23.dtor_value;
              DAST._IType _554_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _555_genType;
                Dafny.ISequence<Dafny.Rune> _out152;
                _out152 = DCOMP.COMP.GenType(_554_o, false, false);
                _555_genType = _out152;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _555_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Arrow) {
              Dafny.ISequence<DAST._IType> _556___mcc_h261 = _source23.dtor_args;
              DAST._IType _557___mcc_h262 = _source23.dtor_result;
              DAST._IType _558_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _559_genType;
                Dafny.ISequence<Dafny.Rune> _out153;
                _out153 = DCOMP.COMP.GenType(_558_o, false, false);
                _559_genType = _out153;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _559_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source23.is_Primitive) {
              DAST._IPrimitive _560___mcc_h265 = _source23.dtor_Primitive_a0;
              DAST._IPrimitive _source24 = _560___mcc_h265;
              if (_source24.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source24.is_Real) {
                DAST._IType _561_o = _526_t;
                {
                  Dafny.ISequence<Dafny.Rune> _562_genType;
                  Dafny.ISequence<Dafny.Rune> _out154;
                  _out154 = DCOMP.COMP.GenType(_561_o, false, false);
                  _562_genType = _out154;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _562_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source24.is_String) {
                DAST._IType _563_o = _526_t;
                {
                  Dafny.ISequence<Dafny.Rune> _564_genType;
                  Dafny.ISequence<Dafny.Rune> _out155;
                  _out155 = DCOMP.COMP.GenType(_563_o, false, false);
                  _564_genType = _out155;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _564_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source24.is_Bool) {
                DAST._IType _565_o = _526_t;
                {
                  Dafny.ISequence<Dafny.Rune> _566_genType;
                  Dafny.ISequence<Dafny.Rune> _out156;
                  _out156 = DCOMP.COMP.GenType(_565_o, false, false);
                  _566_genType = _out156;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _566_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _567_o = _526_t;
                {
                  Dafny.ISequence<Dafny.Rune> _568_genType;
                  Dafny.ISequence<Dafny.Rune> _out157;
                  _out157 = DCOMP.COMP.GenType(_567_o, false, false);
                  _568_genType = _out157;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _568_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source23.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _569___mcc_h267 = _source23.dtor_Passthrough_a0;
              DAST._IType _570_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _571_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_570_o, false, false);
                _571_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _571_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _572___mcc_h269 = _source23.dtor_TypeArg_a0;
              DAST._IType _573_o = _526_t;
              {
                Dafny.ISequence<Dafny.Rune> _574_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_573_o, false, false);
                _574_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _527_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _574_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source22.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _575___mcc_h4 = _source22.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _576___mcc_h5 = _source22.dtor_DecLiteral_a1;
          DAST._IType _577___mcc_h6 = _source22.dtor_DecLiteral_a2;
          DAST._IType _578_t = _577___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _579_d = _576___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _580_n = _575___mcc_h4;
          {
            DAST._IType _source25 = _578_t;
            if (_source25.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _581___mcc_h271 = _source25.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _582___mcc_h272 = _source25.dtor_typeArgs;
              DAST._IResolvedType _583___mcc_h273 = _source25.dtor_resolved;
              DAST._IType _584_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _585_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_584_o, false, false);
                _585_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _585_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Nullable) {
              DAST._IType _586___mcc_h277 = _source25.dtor_Nullable_a0;
              DAST._IType _587_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _588_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_587_o, false, false);
                _588_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _588_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Tuple) {
              Dafny.ISequence<DAST._IType> _589___mcc_h279 = _source25.dtor_Tuple_a0;
              DAST._IType _590_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _591_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_590_o, false, false);
                _591_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _591_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Array) {
              DAST._IType _592___mcc_h281 = _source25.dtor_element;
              BigInteger _593___mcc_h282 = _source25.dtor_dims;
              DAST._IType _594_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _595_genType;
                Dafny.ISequence<Dafny.Rune> _out163;
                _out163 = DCOMP.COMP.GenType(_594_o, false, false);
                _595_genType = _out163;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _595_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Seq) {
              DAST._IType _596___mcc_h285 = _source25.dtor_element;
              DAST._IType _597_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _598_genType;
                Dafny.ISequence<Dafny.Rune> _out164;
                _out164 = DCOMP.COMP.GenType(_597_o, false, false);
                _598_genType = _out164;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _598_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Set) {
              DAST._IType _599___mcc_h287 = _source25.dtor_element;
              DAST._IType _600_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _601_genType;
                Dafny.ISequence<Dafny.Rune> _out165;
                _out165 = DCOMP.COMP.GenType(_600_o, false, false);
                _601_genType = _out165;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _601_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Multiset) {
              DAST._IType _602___mcc_h289 = _source25.dtor_element;
              DAST._IType _603_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _604_genType;
                Dafny.ISequence<Dafny.Rune> _out166;
                _out166 = DCOMP.COMP.GenType(_603_o, false, false);
                _604_genType = _out166;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _604_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Map) {
              DAST._IType _605___mcc_h291 = _source25.dtor_key;
              DAST._IType _606___mcc_h292 = _source25.dtor_value;
              DAST._IType _607_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _608_genType;
                Dafny.ISequence<Dafny.Rune> _out167;
                _out167 = DCOMP.COMP.GenType(_607_o, false, false);
                _608_genType = _out167;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _608_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Arrow) {
              Dafny.ISequence<DAST._IType> _609___mcc_h295 = _source25.dtor_args;
              DAST._IType _610___mcc_h296 = _source25.dtor_result;
              DAST._IType _611_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _612_genType;
                Dafny.ISequence<Dafny.Rune> _out168;
                _out168 = DCOMP.COMP.GenType(_611_o, false, false);
                _612_genType = _out168;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _612_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source25.is_Primitive) {
              DAST._IPrimitive _613___mcc_h299 = _source25.dtor_Primitive_a0;
              DAST._IPrimitive _source26 = _613___mcc_h299;
              if (_source26.is_Int) {
                DAST._IType _614_o = _578_t;
                {
                  Dafny.ISequence<Dafny.Rune> _615_genType;
                  Dafny.ISequence<Dafny.Rune> _out169;
                  _out169 = DCOMP.COMP.GenType(_614_o, false, false);
                  _615_genType = _out169;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _615_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source26.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source26.is_String) {
                DAST._IType _616_o = _578_t;
                {
                  Dafny.ISequence<Dafny.Rune> _617_genType;
                  Dafny.ISequence<Dafny.Rune> _out170;
                  _out170 = DCOMP.COMP.GenType(_616_o, false, false);
                  _617_genType = _out170;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _617_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source26.is_Bool) {
                DAST._IType _618_o = _578_t;
                {
                  Dafny.ISequence<Dafny.Rune> _619_genType;
                  Dafny.ISequence<Dafny.Rune> _out171;
                  _out171 = DCOMP.COMP.GenType(_618_o, false, false);
                  _619_genType = _out171;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _619_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _620_o = _578_t;
                {
                  Dafny.ISequence<Dafny.Rune> _621_genType;
                  Dafny.ISequence<Dafny.Rune> _out172;
                  _out172 = DCOMP.COMP.GenType(_620_o, false, false);
                  _621_genType = _out172;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _621_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source25.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _622___mcc_h301 = _source25.dtor_Passthrough_a0;
              DAST._IType _623_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _624_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_623_o, false, false);
                _624_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _624_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _625___mcc_h303 = _source25.dtor_TypeArg_a0;
              DAST._IType _626_o = _578_t;
              {
                Dafny.ISequence<Dafny.Rune> _627_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_626_o, false, false);
                _627_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _580_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _579_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _627_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source22.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _628___mcc_h7 = _source22.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _629_l = _628___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _629_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source22.is_CharLiteral) {
          Dafny.Rune _630___mcc_h8 = _source22.dtor_CharLiteral_a0;
          Dafny.Rune _631_c = _630___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), RAST.__default.natToString(new BigInteger((_631_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _632___mcc_h9 = _source22.dtor_Null_a0;
          DAST._IType _633_tpe = _632___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _634_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out175;
            _out175 = DCOMP.COMP.GenType(_633_tpe, false, false);
            _634_tpeGen = _out175;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _634_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source21.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _635___mcc_h10 = _source21.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _636_name = _635___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_636_name);
          if (!((@params).Contains(_636_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_636_name);
        }
      } else if (_source21.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _637___mcc_h11 = _source21.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _638_path = _637___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out176;
          _out176 = DCOMP.COMP.GenPath(_638_path);
          s = _out176;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source21.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _639___mcc_h12 = _source21.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _640_values = _639___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _641_i;
          _641_i = BigInteger.Zero;
          while ((_641_i) < (new BigInteger((_640_values).Count))) {
            if ((_641_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _642_recursiveGen;
            bool _643___v31;
            bool _644_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _645_recIdents;
            Dafny.ISequence<Dafny.Rune> _out177;
            bool _out178;
            bool _out179;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out180;
            DCOMP.COMP.GenExpr((_640_values).Select(_641_i), selfIdent, @params, true, out _out177, out _out178, out _out179, out _out180);
            _642_recursiveGen = _out177;
            _643___v31 = _out178;
            _644_isErased = _out179;
            _645_recIdents = _out180;
            if (_644_isErased) {
              _642_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _642_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _642_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _645_recIdents);
            _641_i = (_641_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _646___mcc_h13 = _source21.dtor_path;
        Dafny.ISequence<DAST._IType> _647___mcc_h14 = _source21.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _648___mcc_h15 = _source21.dtor_args;
        Dafny.ISequence<DAST._IExpression> _649_args = _648___mcc_h15;
        Dafny.ISequence<DAST._IType> _650_typeArgs = _647___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _651_path = _646___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _652_path;
          Dafny.ISequence<Dafny.Rune> _out181;
          _out181 = DCOMP.COMP.GenPath(_651_path);
          _652_path = _out181;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _652_path);
          if ((new BigInteger((_650_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _653_i;
            _653_i = BigInteger.Zero;
            while ((_653_i) < (new BigInteger((_650_typeArgs).Count))) {
              if ((_653_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _654_typeString;
              Dafny.ISequence<Dafny.Rune> _out182;
              _out182 = DCOMP.COMP.GenType((_650_typeArgs).Select(_653_i), false, false);
              _654_typeString = _out182;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _654_typeString);
              _653_i = (_653_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _655_i;
          _655_i = BigInteger.Zero;
          while ((_655_i) < (new BigInteger((_649_args).Count))) {
            if ((_655_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _656_recursiveGen;
            bool _657___v32;
            bool _658_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _659_recIdents;
            Dafny.ISequence<Dafny.Rune> _out183;
            bool _out184;
            bool _out185;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out186;
            DCOMP.COMP.GenExpr((_649_args).Select(_655_i), selfIdent, @params, true, out _out183, out _out184, out _out185, out _out186);
            _656_recursiveGen = _out183;
            _657___v32 = _out184;
            _658_isErased = _out185;
            _659_recIdents = _out186;
            if (_658_isErased) {
              _656_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _656_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _656_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _659_recIdents);
            _655_i = (_655_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source21.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _660___mcc_h16 = _source21.dtor_dims;
        DAST._IType _661___mcc_h17 = _source21.dtor_typ;
        DAST._IType _662_typ = _661___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _663_dims = _660___mcc_h16;
        {
          BigInteger _664_i;
          _664_i = (new BigInteger((_663_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _665_genTyp;
          Dafny.ISequence<Dafny.Rune> _out187;
          _out187 = DCOMP.COMP.GenType(_662_typ, false, false);
          _665_genTyp = _out187;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _665_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_664_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _666_recursiveGen;
            bool _667___v33;
            bool _668_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _669_recIdents;
            Dafny.ISequence<Dafny.Rune> _out188;
            bool _out189;
            bool _out190;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
            DCOMP.COMP.GenExpr((_663_dims).Select(_664_i), selfIdent, @params, true, out _out188, out _out189, out _out190, out _out191);
            _666_recursiveGen = _out188;
            _667___v33 = _out189;
            _668_isErased = _out190;
            _669_recIdents = _out191;
            if (!(_668_isErased)) {
              _666_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _666_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _666_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _669_recIdents);
            _664_i = (_664_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _670___mcc_h18 = _source21.dtor_path;
        Dafny.ISequence<DAST._IType> _671___mcc_h19 = _source21.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _672___mcc_h20 = _source21.dtor_variant;
        bool _673___mcc_h21 = _source21.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _674___mcc_h22 = _source21.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _675_values = _674___mcc_h22;
        bool _676_isCo = _673___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _677_variant = _672___mcc_h20;
        Dafny.ISequence<DAST._IType> _678_typeArgs = _671___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _679_path = _670___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _680_path;
          Dafny.ISequence<Dafny.Rune> _out192;
          _out192 = DCOMP.COMP.GenPath(_679_path);
          _680_path = _out192;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _680_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_678_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _681_i;
            _681_i = BigInteger.Zero;
            while ((_681_i) < (new BigInteger((_678_typeArgs).Count))) {
              if ((_681_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _682_typeString;
              Dafny.ISequence<Dafny.Rune> _out193;
              _out193 = DCOMP.COMP.GenType((_678_typeArgs).Select(_681_i), false, false);
              _682_typeString = _out193;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _682_typeString);
              _681_i = (_681_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_677_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _683_i;
          _683_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_683_i) < (new BigInteger((_675_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs0 = (_675_values).Select(_683_i);
            Dafny.ISequence<Dafny.Rune> _684_name = _let_tmp_rhs0.dtor__0;
            DAST._IExpression _685_value = _let_tmp_rhs0.dtor__1;
            if ((_683_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_676_isCo) {
              Dafny.ISequence<Dafny.Rune> _686_recursiveGen;
              bool _687___v34;
              bool _688_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _689_recIdents;
              Dafny.ISequence<Dafny.Rune> _out194;
              bool _out195;
              bool _out196;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out197;
              DCOMP.COMP.GenExpr(_685_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out194, out _out195, out _out196, out _out197);
              _686_recursiveGen = _out194;
              _687___v34 = _out195;
              _688_isErased = _out196;
              _689_recIdents = _out197;
              if (!(_688_isErased)) {
                _686_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _686_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _689_recIdents);
              Dafny.ISequence<Dafny.Rune> _690_allReadCloned;
              _690_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_689_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _691_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_689_recIdents).Elements) {
                  _691_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_689_recIdents).Contains(_691_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1527)");
              after__ASSIGN_SUCH_THAT_0:;
                _690_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_690_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_691_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_691_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _689_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_689_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_691_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_684_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _690_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _692_recursiveGen;
              bool _693___v35;
              bool _694_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _695_recIdents;
              Dafny.ISequence<Dafny.Rune> _out198;
              bool _out199;
              bool _out200;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out201;
              DCOMP.COMP.GenExpr(_685_value, selfIdent, @params, true, out _out198, out _out199, out _out200, out _out201);
              _692_recursiveGen = _out198;
              _693___v35 = _out199;
              _694_isErased = _out200;
              _695_recIdents = _out201;
              if (!(_694_isErased)) {
                _692_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _692_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _692_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _692_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_684_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _692_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _695_recIdents);
            }
            _683_i = (_683_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_Convert) {
        DAST._IExpression _696___mcc_h23 = _source21.dtor_value;
        DAST._IType _697___mcc_h24 = _source21.dtor_from;
        DAST._IType _698___mcc_h25 = _source21.dtor_typ;
        DAST._IType _699_toTpe = _698___mcc_h25;
        DAST._IType _700_fromTpe = _697___mcc_h24;
        DAST._IExpression _701_expr = _696___mcc_h23;
        {
          if (object.Equals(_700_fromTpe, _699_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _702_recursiveGen;
            bool _703_recOwned;
            bool _704_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _705_recIdents;
            Dafny.ISequence<Dafny.Rune> _out202;
            bool _out203;
            bool _out204;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out205;
            DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out202, out _out203, out _out204, out _out205);
            _702_recursiveGen = _out202;
            _703_recOwned = _out203;
            _704_recErased = _out204;
            _705_recIdents = _out205;
            s = _702_recursiveGen;
            isOwned = _703_recOwned;
            isErased = _704_recErased;
            readIdents = _705_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source27 = _System.Tuple2<DAST._IType, DAST._IType>.create(_700_fromTpe, _699_toTpe);
            DAST._IType _706___mcc_h305 = _source27.dtor__0;
            DAST._IType _707___mcc_h306 = _source27.dtor__1;
            DAST._IType _source28 = _706___mcc_h305;
            if (_source28.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _708___mcc_h309 = _source28.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _709___mcc_h310 = _source28.dtor_typeArgs;
              DAST._IResolvedType _710___mcc_h311 = _source28.dtor_resolved;
              DAST._IResolvedType _source29 = _710___mcc_h311;
              if (_source29.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _711___mcc_h321 = _source29.dtor_path;
                DAST._IType _source30 = _707___mcc_h306;
                if (_source30.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _712___mcc_h325 = _source30.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _713___mcc_h326 = _source30.dtor_typeArgs;
                  DAST._IResolvedType _714___mcc_h327 = _source30.dtor_resolved;
                  DAST._IResolvedType _source31 = _714___mcc_h327;
                  if (_source31.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _715___mcc_h331 = _source31.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _716_recursiveGen;
                      bool _717_recOwned;
                      bool _718_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _719_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out206;
                      bool _out207;
                      bool _out208;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out206, out _out207, out _out208, out _out209);
                      _716_recursiveGen = _out206;
                      _717_recOwned = _out207;
                      _718_recErased = _out208;
                      _719_recIdents = _out209;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _716_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _717_recOwned;
                      isErased = _718_recErased;
                      readIdents = _719_recIdents;
                    }
                  } else if (_source31.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _720___mcc_h333 = _source31.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _721_recursiveGen;
                      bool _722_recOwned;
                      bool _723_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _724_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out210;
                      bool _out211;
                      bool _out212;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out213;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out210, out _out211, out _out212, out _out213);
                      _721_recursiveGen = _out210;
                      _722_recOwned = _out211;
                      _723_recErased = _out212;
                      _724_recIdents = _out213;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _721_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _722_recOwned;
                      isErased = _723_recErased;
                      readIdents = _724_recIdents;
                    }
                  } else {
                    DAST._IType _725___mcc_h335 = _source31.dtor_Newtype_a0;
                    DAST._IType _726_b = _725___mcc_h335;
                    {
                      if (object.Equals(_700_fromTpe, _726_b)) {
                        Dafny.ISequence<Dafny.Rune> _727_recursiveGen;
                        bool _728_recOwned;
                        bool _729_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _730_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out214;
                        bool _out215;
                        bool _out216;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out217;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out214, out _out215, out _out216, out _out217);
                        _727_recursiveGen = _out214;
                        _728_recOwned = _out215;
                        _729_recErased = _out216;
                        _730_recIdents = _out217;
                        Dafny.ISequence<Dafny.Rune> _731_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out218;
                        _out218 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                        _731_rhsType = _out218;
                        Dafny.ISequence<Dafny.Rune> _732_uneraseFn;
                        _732_uneraseFn = ((_728_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _731_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _732_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _727_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _728_recOwned;
                        isErased = false;
                        readIdents = _730_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out219;
                        bool _out220;
                        bool _out221;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _726_b), _726_b, _699_toTpe), selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                        s = _out219;
                        isOwned = _out220;
                        isErased = _out221;
                        readIdents = _out222;
                      }
                    }
                  }
                } else if (_source30.is_Nullable) {
                  DAST._IType _733___mcc_h337 = _source30.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _734_recursiveGen;
                    bool _735_recOwned;
                    bool _736_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _737_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out223;
                    bool _out224;
                    bool _out225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                    _734_recursiveGen = _out223;
                    _735_recOwned = _out224;
                    _736_recErased = _out225;
                    _737_recIdents = _out226;
                    if (!(_735_recOwned)) {
                      _734_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_734_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _734_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _736_recErased;
                    readIdents = _737_recIdents;
                  }
                } else if (_source30.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _738___mcc_h339 = _source30.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _739_recursiveGen;
                    bool _740_recOwned;
                    bool _741_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _742_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out227;
                    bool _out228;
                    bool _out229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229, out _out230);
                    _739_recursiveGen = _out227;
                    _740_recOwned = _out228;
                    _741_recErased = _out229;
                    _742_recIdents = _out230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _739_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _740_recOwned;
                    isErased = _741_recErased;
                    readIdents = _742_recIdents;
                  }
                } else if (_source30.is_Array) {
                  DAST._IType _743___mcc_h341 = _source30.dtor_element;
                  BigInteger _744___mcc_h342 = _source30.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _745_recursiveGen;
                    bool _746_recOwned;
                    bool _747_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _748_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out231;
                    bool _out232;
                    bool _out233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out234;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out231, out _out232, out _out233, out _out234);
                    _745_recursiveGen = _out231;
                    _746_recOwned = _out232;
                    _747_recErased = _out233;
                    _748_recIdents = _out234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _745_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _746_recOwned;
                    isErased = _747_recErased;
                    readIdents = _748_recIdents;
                  }
                } else if (_source30.is_Seq) {
                  DAST._IType _749___mcc_h345 = _source30.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _750_recursiveGen;
                    bool _751_recOwned;
                    bool _752_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _753_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out235;
                    bool _out236;
                    bool _out237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out238;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out235, out _out236, out _out237, out _out238);
                    _750_recursiveGen = _out235;
                    _751_recOwned = _out236;
                    _752_recErased = _out237;
                    _753_recIdents = _out238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _750_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _751_recOwned;
                    isErased = _752_recErased;
                    readIdents = _753_recIdents;
                  }
                } else if (_source30.is_Set) {
                  DAST._IType _754___mcc_h347 = _source30.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _755_recursiveGen;
                    bool _756_recOwned;
                    bool _757_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _758_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out239;
                    bool _out240;
                    bool _out241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out242;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out239, out _out240, out _out241, out _out242);
                    _755_recursiveGen = _out239;
                    _756_recOwned = _out240;
                    _757_recErased = _out241;
                    _758_recIdents = _out242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _755_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _756_recOwned;
                    isErased = _757_recErased;
                    readIdents = _758_recIdents;
                  }
                } else if (_source30.is_Multiset) {
                  DAST._IType _759___mcc_h349 = _source30.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _760_recursiveGen;
                    bool _761_recOwned;
                    bool _762_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _763_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out243;
                    bool _out244;
                    bool _out245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out246;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out243, out _out244, out _out245, out _out246);
                    _760_recursiveGen = _out243;
                    _761_recOwned = _out244;
                    _762_recErased = _out245;
                    _763_recIdents = _out246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _760_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _761_recOwned;
                    isErased = _762_recErased;
                    readIdents = _763_recIdents;
                  }
                } else if (_source30.is_Map) {
                  DAST._IType _764___mcc_h351 = _source30.dtor_key;
                  DAST._IType _765___mcc_h352 = _source30.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _766_recursiveGen;
                    bool _767_recOwned;
                    bool _768_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _769_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out247;
                    bool _out248;
                    bool _out249;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out247, out _out248, out _out249, out _out250);
                    _766_recursiveGen = _out247;
                    _767_recOwned = _out248;
                    _768_recErased = _out249;
                    _769_recIdents = _out250;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _766_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _767_recOwned;
                    isErased = _768_recErased;
                    readIdents = _769_recIdents;
                  }
                } else if (_source30.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _770___mcc_h355 = _source30.dtor_args;
                  DAST._IType _771___mcc_h356 = _source30.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _772_recursiveGen;
                    bool _773_recOwned;
                    bool _774_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _775_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out251;
                    bool _out252;
                    bool _out253;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out254;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out251, out _out252, out _out253, out _out254);
                    _772_recursiveGen = _out251;
                    _773_recOwned = _out252;
                    _774_recErased = _out253;
                    _775_recIdents = _out254;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _772_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _773_recOwned;
                    isErased = _774_recErased;
                    readIdents = _775_recIdents;
                  }
                } else if (_source30.is_Primitive) {
                  DAST._IPrimitive _776___mcc_h359 = _source30.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _777_recursiveGen;
                    bool _778_recOwned;
                    bool _779_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _780_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out255;
                    bool _out256;
                    bool _out257;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out258;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out255, out _out256, out _out257, out _out258);
                    _777_recursiveGen = _out255;
                    _778_recOwned = _out256;
                    _779_recErased = _out257;
                    _780_recIdents = _out258;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _777_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _778_recOwned;
                    isErased = _779_recErased;
                    readIdents = _780_recIdents;
                  }
                } else if (_source30.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _781___mcc_h361 = _source30.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _782_recursiveGen;
                    bool _783_recOwned;
                    bool _784_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _785_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out259;
                    bool _out260;
                    bool _out261;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out262;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out259, out _out260, out _out261, out _out262);
                    _782_recursiveGen = _out259;
                    _783_recOwned = _out260;
                    _784_recErased = _out261;
                    _785_recIdents = _out262;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _782_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _783_recOwned;
                    isErased = _784_recErased;
                    readIdents = _785_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _786___mcc_h363 = _source30.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _787_recursiveGen;
                    bool _788_recOwned;
                    bool _789_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _790_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out263;
                    bool _out264;
                    bool _out265;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out266;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out263, out _out264, out _out265, out _out266);
                    _787_recursiveGen = _out263;
                    _788_recOwned = _out264;
                    _789_recErased = _out265;
                    _790_recIdents = _out266;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _787_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _788_recOwned;
                    isErased = _789_recErased;
                    readIdents = _790_recIdents;
                  }
                }
              } else if (_source29.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _791___mcc_h365 = _source29.dtor_path;
                DAST._IType _source32 = _707___mcc_h306;
                if (_source32.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _792___mcc_h369 = _source32.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _793___mcc_h370 = _source32.dtor_typeArgs;
                  DAST._IResolvedType _794___mcc_h371 = _source32.dtor_resolved;
                  DAST._IResolvedType _source33 = _794___mcc_h371;
                  if (_source33.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _795___mcc_h375 = _source33.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _796_recursiveGen;
                      bool _797_recOwned;
                      bool _798_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _799_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out267;
                      bool _out268;
                      bool _out269;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out267, out _out268, out _out269, out _out270);
                      _796_recursiveGen = _out267;
                      _797_recOwned = _out268;
                      _798_recErased = _out269;
                      _799_recIdents = _out270;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _796_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _797_recOwned;
                      isErased = _798_recErased;
                      readIdents = _799_recIdents;
                    }
                  } else if (_source33.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _800___mcc_h377 = _source33.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _801_recursiveGen;
                      bool _802_recOwned;
                      bool _803_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _804_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out271;
                      bool _out272;
                      bool _out273;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out274;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out271, out _out272, out _out273, out _out274);
                      _801_recursiveGen = _out271;
                      _802_recOwned = _out272;
                      _803_recErased = _out273;
                      _804_recIdents = _out274;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _801_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _802_recOwned;
                      isErased = _803_recErased;
                      readIdents = _804_recIdents;
                    }
                  } else {
                    DAST._IType _805___mcc_h379 = _source33.dtor_Newtype_a0;
                    DAST._IType _806_b = _805___mcc_h379;
                    {
                      if (object.Equals(_700_fromTpe, _806_b)) {
                        Dafny.ISequence<Dafny.Rune> _807_recursiveGen;
                        bool _808_recOwned;
                        bool _809_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _810_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out275;
                        bool _out276;
                        bool _out277;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out278;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out275, out _out276, out _out277, out _out278);
                        _807_recursiveGen = _out275;
                        _808_recOwned = _out276;
                        _809_recErased = _out277;
                        _810_recIdents = _out278;
                        Dafny.ISequence<Dafny.Rune> _811_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out279;
                        _out279 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                        _811_rhsType = _out279;
                        Dafny.ISequence<Dafny.Rune> _812_uneraseFn;
                        _812_uneraseFn = ((_808_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _811_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _812_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _807_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _808_recOwned;
                        isErased = false;
                        readIdents = _810_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out280;
                        bool _out281;
                        bool _out282;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _806_b), _806_b, _699_toTpe), selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                        s = _out280;
                        isOwned = _out281;
                        isErased = _out282;
                        readIdents = _out283;
                      }
                    }
                  }
                } else if (_source32.is_Nullable) {
                  DAST._IType _813___mcc_h381 = _source32.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _814_recursiveGen;
                    bool _815_recOwned;
                    bool _816_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _817_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out284;
                    bool _out285;
                    bool _out286;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                    _814_recursiveGen = _out284;
                    _815_recOwned = _out285;
                    _816_recErased = _out286;
                    _817_recIdents = _out287;
                    if (!(_815_recOwned)) {
                      _814_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_814_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _814_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _816_recErased;
                    readIdents = _817_recIdents;
                  }
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _818___mcc_h383 = _source32.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _819_recursiveGen;
                    bool _820_recOwned;
                    bool _821_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _822_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out288;
                    bool _out289;
                    bool _out290;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                    _819_recursiveGen = _out288;
                    _820_recOwned = _out289;
                    _821_recErased = _out290;
                    _822_recIdents = _out291;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _819_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _820_recOwned;
                    isErased = _821_recErased;
                    readIdents = _822_recIdents;
                  }
                } else if (_source32.is_Array) {
                  DAST._IType _823___mcc_h385 = _source32.dtor_element;
                  BigInteger _824___mcc_h386 = _source32.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _825_recursiveGen;
                    bool _826_recOwned;
                    bool _827_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _828_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out292;
                    bool _out293;
                    bool _out294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out292, out _out293, out _out294, out _out295);
                    _825_recursiveGen = _out292;
                    _826_recOwned = _out293;
                    _827_recErased = _out294;
                    _828_recIdents = _out295;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _825_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _826_recOwned;
                    isErased = _827_recErased;
                    readIdents = _828_recIdents;
                  }
                } else if (_source32.is_Seq) {
                  DAST._IType _829___mcc_h389 = _source32.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _830_recursiveGen;
                    bool _831_recOwned;
                    bool _832_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _833_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out296;
                    bool _out297;
                    bool _out298;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out299;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out296, out _out297, out _out298, out _out299);
                    _830_recursiveGen = _out296;
                    _831_recOwned = _out297;
                    _832_recErased = _out298;
                    _833_recIdents = _out299;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _830_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _831_recOwned;
                    isErased = _832_recErased;
                    readIdents = _833_recIdents;
                  }
                } else if (_source32.is_Set) {
                  DAST._IType _834___mcc_h391 = _source32.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _835_recursiveGen;
                    bool _836_recOwned;
                    bool _837_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _838_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out300;
                    bool _out301;
                    bool _out302;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out303;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out300, out _out301, out _out302, out _out303);
                    _835_recursiveGen = _out300;
                    _836_recOwned = _out301;
                    _837_recErased = _out302;
                    _838_recIdents = _out303;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _835_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _836_recOwned;
                    isErased = _837_recErased;
                    readIdents = _838_recIdents;
                  }
                } else if (_source32.is_Multiset) {
                  DAST._IType _839___mcc_h393 = _source32.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _840_recursiveGen;
                    bool _841_recOwned;
                    bool _842_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _843_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out304;
                    bool _out305;
                    bool _out306;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out307;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out304, out _out305, out _out306, out _out307);
                    _840_recursiveGen = _out304;
                    _841_recOwned = _out305;
                    _842_recErased = _out306;
                    _843_recIdents = _out307;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _840_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _841_recOwned;
                    isErased = _842_recErased;
                    readIdents = _843_recIdents;
                  }
                } else if (_source32.is_Map) {
                  DAST._IType _844___mcc_h395 = _source32.dtor_key;
                  DAST._IType _845___mcc_h396 = _source32.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _846_recursiveGen;
                    bool _847_recOwned;
                    bool _848_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _849_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out308;
                    bool _out309;
                    bool _out310;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out308, out _out309, out _out310, out _out311);
                    _846_recursiveGen = _out308;
                    _847_recOwned = _out309;
                    _848_recErased = _out310;
                    _849_recIdents = _out311;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _846_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _847_recOwned;
                    isErased = _848_recErased;
                    readIdents = _849_recIdents;
                  }
                } else if (_source32.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _850___mcc_h399 = _source32.dtor_args;
                  DAST._IType _851___mcc_h400 = _source32.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _852_recursiveGen;
                    bool _853_recOwned;
                    bool _854_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _855_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out312;
                    bool _out313;
                    bool _out314;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out315;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out312, out _out313, out _out314, out _out315);
                    _852_recursiveGen = _out312;
                    _853_recOwned = _out313;
                    _854_recErased = _out314;
                    _855_recIdents = _out315;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _852_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _853_recOwned;
                    isErased = _854_recErased;
                    readIdents = _855_recIdents;
                  }
                } else if (_source32.is_Primitive) {
                  DAST._IPrimitive _856___mcc_h403 = _source32.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _857_recursiveGen;
                    bool _858_recOwned;
                    bool _859_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _860_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out316;
                    bool _out317;
                    bool _out318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out319;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out316, out _out317, out _out318, out _out319);
                    _857_recursiveGen = _out316;
                    _858_recOwned = _out317;
                    _859_recErased = _out318;
                    _860_recIdents = _out319;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _857_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _858_recOwned;
                    isErased = _859_recErased;
                    readIdents = _860_recIdents;
                  }
                } else if (_source32.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _861___mcc_h405 = _source32.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _862_recursiveGen;
                    bool _863_recOwned;
                    bool _864_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _865_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out320;
                    bool _out321;
                    bool _out322;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out320, out _out321, out _out322, out _out323);
                    _862_recursiveGen = _out320;
                    _863_recOwned = _out321;
                    _864_recErased = _out322;
                    _865_recIdents = _out323;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _862_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _863_recOwned;
                    isErased = _864_recErased;
                    readIdents = _865_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _866___mcc_h407 = _source32.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _867_recursiveGen;
                    bool _868_recOwned;
                    bool _869_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _870_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out324;
                    bool _out325;
                    bool _out326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out327;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out324, out _out325, out _out326, out _out327);
                    _867_recursiveGen = _out324;
                    _868_recOwned = _out325;
                    _869_recErased = _out326;
                    _870_recIdents = _out327;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _867_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _868_recOwned;
                    isErased = _869_recErased;
                    readIdents = _870_recIdents;
                  }
                }
              } else {
                DAST._IType _871___mcc_h409 = _source29.dtor_Newtype_a0;
                DAST._IType _source34 = _707___mcc_h306;
                if (_source34.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _872___mcc_h413 = _source34.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _873___mcc_h414 = _source34.dtor_typeArgs;
                  DAST._IResolvedType _874___mcc_h415 = _source34.dtor_resolved;
                  DAST._IResolvedType _source35 = _874___mcc_h415;
                  if (_source35.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _875___mcc_h422 = _source35.dtor_path;
                    DAST._IType _876_b = _871___mcc_h409;
                    {
                      if (object.Equals(_876_b, _699_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _877_recursiveGen;
                        bool _878_recOwned;
                        bool _879_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _880_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out328;
                        bool _out329;
                        bool _out330;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out328, out _out329, out _out330, out _out331);
                        _877_recursiveGen = _out328;
                        _878_recOwned = _out329;
                        _879_recErased = _out330;
                        _880_recIdents = _out331;
                        Dafny.ISequence<Dafny.Rune> _881_uneraseFn;
                        _881_uneraseFn = ((_878_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _881_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _877_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _878_recOwned;
                        isErased = true;
                        readIdents = _880_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out332;
                        bool _out333;
                        bool _out334;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out335;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _876_b), _876_b, _699_toTpe), selfIdent, @params, mustOwn, out _out332, out _out333, out _out334, out _out335);
                        s = _out332;
                        isOwned = _out333;
                        isErased = _out334;
                        readIdents = _out335;
                      }
                    }
                  } else if (_source35.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _882___mcc_h425 = _source35.dtor_path;
                    DAST._IType _883_b = _871___mcc_h409;
                    {
                      if (object.Equals(_883_b, _699_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _884_recursiveGen;
                        bool _885_recOwned;
                        bool _886_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _887_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out336;
                        bool _out337;
                        bool _out338;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out339;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out336, out _out337, out _out338, out _out339);
                        _884_recursiveGen = _out336;
                        _885_recOwned = _out337;
                        _886_recErased = _out338;
                        _887_recIdents = _out339;
                        Dafny.ISequence<Dafny.Rune> _888_uneraseFn;
                        _888_uneraseFn = ((_885_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _888_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _884_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _885_recOwned;
                        isErased = true;
                        readIdents = _887_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out340;
                        bool _out341;
                        bool _out342;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out343;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _883_b), _883_b, _699_toTpe), selfIdent, @params, mustOwn, out _out340, out _out341, out _out342, out _out343);
                        s = _out340;
                        isOwned = _out341;
                        isErased = _out342;
                        readIdents = _out343;
                      }
                    }
                  } else {
                    DAST._IType _889___mcc_h428 = _source35.dtor_Newtype_a0;
                    DAST._IType _890_b = _889___mcc_h428;
                    {
                      if (object.Equals(_700_fromTpe, _890_b)) {
                        Dafny.ISequence<Dafny.Rune> _891_recursiveGen;
                        bool _892_recOwned;
                        bool _893_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _894_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out344;
                        bool _out345;
                        bool _out346;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out347;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out344, out _out345, out _out346, out _out347);
                        _891_recursiveGen = _out344;
                        _892_recOwned = _out345;
                        _893_recErased = _out346;
                        _894_recIdents = _out347;
                        Dafny.ISequence<Dafny.Rune> _895_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out348;
                        _out348 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                        _895_rhsType = _out348;
                        Dafny.ISequence<Dafny.Rune> _896_uneraseFn;
                        _896_uneraseFn = ((_892_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _895_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _896_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _891_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _892_recOwned;
                        isErased = false;
                        readIdents = _894_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _890_b), _890_b, _699_toTpe), selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        s = _out349;
                        isOwned = _out350;
                        isErased = _out351;
                        readIdents = _out352;
                      }
                    }
                  }
                } else if (_source34.is_Nullable) {
                  DAST._IType _897___mcc_h431 = _source34.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _898_recursiveGen;
                    bool _899_recOwned;
                    bool _900_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _901_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out353;
                    bool _out354;
                    bool _out355;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                    _898_recursiveGen = _out353;
                    _899_recOwned = _out354;
                    _900_recErased = _out355;
                    _901_recIdents = _out356;
                    if (!(_899_recOwned)) {
                      _898_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_898_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _898_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _900_recErased;
                    readIdents = _901_recIdents;
                  }
                } else if (_source34.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _902___mcc_h434 = _source34.dtor_Tuple_a0;
                  DAST._IType _903_b = _871___mcc_h409;
                  {
                    if (object.Equals(_903_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _904_recursiveGen;
                      bool _905_recOwned;
                      bool _906_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _907_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out357;
                      bool _out358;
                      bool _out359;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                      _904_recursiveGen = _out357;
                      _905_recOwned = _out358;
                      _906_recErased = _out359;
                      _907_recIdents = _out360;
                      Dafny.ISequence<Dafny.Rune> _908_uneraseFn;
                      _908_uneraseFn = ((_905_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _908_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _904_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _905_recOwned;
                      isErased = true;
                      readIdents = _907_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out361;
                      bool _out362;
                      bool _out363;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out364;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _903_b), _903_b, _699_toTpe), selfIdent, @params, mustOwn, out _out361, out _out362, out _out363, out _out364);
                      s = _out361;
                      isOwned = _out362;
                      isErased = _out363;
                      readIdents = _out364;
                    }
                  }
                } else if (_source34.is_Array) {
                  DAST._IType _909___mcc_h437 = _source34.dtor_element;
                  BigInteger _910___mcc_h438 = _source34.dtor_dims;
                  DAST._IType _911_b = _871___mcc_h409;
                  {
                    if (object.Equals(_911_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _912_recursiveGen;
                      bool _913_recOwned;
                      bool _914_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _915_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out365;
                      bool _out366;
                      bool _out367;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out368;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out365, out _out366, out _out367, out _out368);
                      _912_recursiveGen = _out365;
                      _913_recOwned = _out366;
                      _914_recErased = _out367;
                      _915_recIdents = _out368;
                      Dafny.ISequence<Dafny.Rune> _916_uneraseFn;
                      _916_uneraseFn = ((_913_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _916_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _912_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _913_recOwned;
                      isErased = true;
                      readIdents = _915_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out369;
                      bool _out370;
                      bool _out371;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out372;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _911_b), _911_b, _699_toTpe), selfIdent, @params, mustOwn, out _out369, out _out370, out _out371, out _out372);
                      s = _out369;
                      isOwned = _out370;
                      isErased = _out371;
                      readIdents = _out372;
                    }
                  }
                } else if (_source34.is_Seq) {
                  DAST._IType _917___mcc_h443 = _source34.dtor_element;
                  DAST._IType _918_b = _871___mcc_h409;
                  {
                    if (object.Equals(_918_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _919_recursiveGen;
                      bool _920_recOwned;
                      bool _921_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _922_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out373;
                      bool _out374;
                      bool _out375;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out373, out _out374, out _out375, out _out376);
                      _919_recursiveGen = _out373;
                      _920_recOwned = _out374;
                      _921_recErased = _out375;
                      _922_recIdents = _out376;
                      Dafny.ISequence<Dafny.Rune> _923_uneraseFn;
                      _923_uneraseFn = ((_920_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _923_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _920_recOwned;
                      isErased = true;
                      readIdents = _922_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out377;
                      bool _out378;
                      bool _out379;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out380;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _918_b), _918_b, _699_toTpe), selfIdent, @params, mustOwn, out _out377, out _out378, out _out379, out _out380);
                      s = _out377;
                      isOwned = _out378;
                      isErased = _out379;
                      readIdents = _out380;
                    }
                  }
                } else if (_source34.is_Set) {
                  DAST._IType _924___mcc_h446 = _source34.dtor_element;
                  DAST._IType _925_b = _871___mcc_h409;
                  {
                    if (object.Equals(_925_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _926_recursiveGen;
                      bool _927_recOwned;
                      bool _928_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _929_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out381;
                      bool _out382;
                      bool _out383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out381, out _out382, out _out383, out _out384);
                      _926_recursiveGen = _out381;
                      _927_recOwned = _out382;
                      _928_recErased = _out383;
                      _929_recIdents = _out384;
                      Dafny.ISequence<Dafny.Rune> _930_uneraseFn;
                      _930_uneraseFn = ((_927_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _930_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _926_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _927_recOwned;
                      isErased = true;
                      readIdents = _929_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out385;
                      bool _out386;
                      bool _out387;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out388;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _925_b), _925_b, _699_toTpe), selfIdent, @params, mustOwn, out _out385, out _out386, out _out387, out _out388);
                      s = _out385;
                      isOwned = _out386;
                      isErased = _out387;
                      readIdents = _out388;
                    }
                  }
                } else if (_source34.is_Multiset) {
                  DAST._IType _931___mcc_h449 = _source34.dtor_element;
                  DAST._IType _932_b = _871___mcc_h409;
                  {
                    if (object.Equals(_932_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _933_recursiveGen;
                      bool _934_recOwned;
                      bool _935_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _936_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out389;
                      bool _out390;
                      bool _out391;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out389, out _out390, out _out391, out _out392);
                      _933_recursiveGen = _out389;
                      _934_recOwned = _out390;
                      _935_recErased = _out391;
                      _936_recIdents = _out392;
                      Dafny.ISequence<Dafny.Rune> _937_uneraseFn;
                      _937_uneraseFn = ((_934_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _937_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _933_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _934_recOwned;
                      isErased = true;
                      readIdents = _936_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out393;
                      bool _out394;
                      bool _out395;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _932_b), _932_b, _699_toTpe), selfIdent, @params, mustOwn, out _out393, out _out394, out _out395, out _out396);
                      s = _out393;
                      isOwned = _out394;
                      isErased = _out395;
                      readIdents = _out396;
                    }
                  }
                } else if (_source34.is_Map) {
                  DAST._IType _938___mcc_h452 = _source34.dtor_key;
                  DAST._IType _939___mcc_h453 = _source34.dtor_value;
                  DAST._IType _940_b = _871___mcc_h409;
                  {
                    if (object.Equals(_940_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _941_recursiveGen;
                      bool _942_recOwned;
                      bool _943_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _944_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out397;
                      bool _out398;
                      bool _out399;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out397, out _out398, out _out399, out _out400);
                      _941_recursiveGen = _out397;
                      _942_recOwned = _out398;
                      _943_recErased = _out399;
                      _944_recIdents = _out400;
                      Dafny.ISequence<Dafny.Rune> _945_uneraseFn;
                      _945_uneraseFn = ((_942_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _945_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _941_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _942_recOwned;
                      isErased = true;
                      readIdents = _944_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out401;
                      bool _out402;
                      bool _out403;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _940_b), _940_b, _699_toTpe), selfIdent, @params, mustOwn, out _out401, out _out402, out _out403, out _out404);
                      s = _out401;
                      isOwned = _out402;
                      isErased = _out403;
                      readIdents = _out404;
                    }
                  }
                } else if (_source34.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _946___mcc_h458 = _source34.dtor_args;
                  DAST._IType _947___mcc_h459 = _source34.dtor_result;
                  DAST._IType _948_b = _871___mcc_h409;
                  {
                    if (object.Equals(_948_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _949_recursiveGen;
                      bool _950_recOwned;
                      bool _951_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _952_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out405;
                      bool _out406;
                      bool _out407;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out405, out _out406, out _out407, out _out408);
                      _949_recursiveGen = _out405;
                      _950_recOwned = _out406;
                      _951_recErased = _out407;
                      _952_recIdents = _out408;
                      Dafny.ISequence<Dafny.Rune> _953_uneraseFn;
                      _953_uneraseFn = ((_950_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _953_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _949_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _950_recOwned;
                      isErased = true;
                      readIdents = _952_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out409;
                      bool _out410;
                      bool _out411;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _948_b), _948_b, _699_toTpe), selfIdent, @params, mustOwn, out _out409, out _out410, out _out411, out _out412);
                      s = _out409;
                      isOwned = _out410;
                      isErased = _out411;
                      readIdents = _out412;
                    }
                  }
                } else if (_source34.is_Primitive) {
                  DAST._IPrimitive _954___mcc_h464 = _source34.dtor_Primitive_a0;
                  DAST._IType _955_b = _871___mcc_h409;
                  {
                    if (object.Equals(_955_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _956_recursiveGen;
                      bool _957_recOwned;
                      bool _958_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _959_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out413;
                      bool _out414;
                      bool _out415;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out413, out _out414, out _out415, out _out416);
                      _956_recursiveGen = _out413;
                      _957_recOwned = _out414;
                      _958_recErased = _out415;
                      _959_recIdents = _out416;
                      Dafny.ISequence<Dafny.Rune> _960_uneraseFn;
                      _960_uneraseFn = ((_957_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _960_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _957_recOwned;
                      isErased = true;
                      readIdents = _959_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out417;
                      bool _out418;
                      bool _out419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _955_b), _955_b, _699_toTpe), selfIdent, @params, mustOwn, out _out417, out _out418, out _out419, out _out420);
                      s = _out417;
                      isOwned = _out418;
                      isErased = _out419;
                      readIdents = _out420;
                    }
                  }
                } else if (_source34.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _961___mcc_h467 = _source34.dtor_Passthrough_a0;
                  DAST._IType _962_b = _871___mcc_h409;
                  {
                    if (object.Equals(_962_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _963_recursiveGen;
                      bool _964_recOwned;
                      bool _965_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _966_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out421;
                      bool _out422;
                      bool _out423;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out421, out _out422, out _out423, out _out424);
                      _963_recursiveGen = _out421;
                      _964_recOwned = _out422;
                      _965_recErased = _out423;
                      _966_recIdents = _out424;
                      Dafny.ISequence<Dafny.Rune> _967_uneraseFn;
                      _967_uneraseFn = ((_964_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _967_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _963_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _964_recOwned;
                      isErased = true;
                      readIdents = _966_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out425;
                      bool _out426;
                      bool _out427;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _962_b), _962_b, _699_toTpe), selfIdent, @params, mustOwn, out _out425, out _out426, out _out427, out _out428);
                      s = _out425;
                      isOwned = _out426;
                      isErased = _out427;
                      readIdents = _out428;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _968___mcc_h470 = _source34.dtor_TypeArg_a0;
                  DAST._IType _969_b = _871___mcc_h409;
                  {
                    if (object.Equals(_969_b, _699_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _970_recursiveGen;
                      bool _971_recOwned;
                      bool _972_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _973_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out429;
                      bool _out430;
                      bool _out431;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out429, out _out430, out _out431, out _out432);
                      _970_recursiveGen = _out429;
                      _971_recOwned = _out430;
                      _972_recErased = _out431;
                      _973_recIdents = _out432;
                      Dafny.ISequence<Dafny.Rune> _974_uneraseFn;
                      _974_uneraseFn = ((_971_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _974_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _970_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _971_recOwned;
                      isErased = true;
                      readIdents = _973_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out433;
                      bool _out434;
                      bool _out435;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _969_b), _969_b, _699_toTpe), selfIdent, @params, mustOwn, out _out433, out _out434, out _out435, out _out436);
                      s = _out433;
                      isOwned = _out434;
                      isErased = _out435;
                      readIdents = _out436;
                    }
                  }
                }
              }
            } else if (_source28.is_Nullable) {
              DAST._IType _975___mcc_h473 = _source28.dtor_Nullable_a0;
              DAST._IType _source36 = _707___mcc_h306;
              if (_source36.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _976___mcc_h477 = _source36.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _977___mcc_h478 = _source36.dtor_typeArgs;
                DAST._IResolvedType _978___mcc_h479 = _source36.dtor_resolved;
                DAST._IResolvedType _source37 = _978___mcc_h479;
                if (_source37.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _979___mcc_h486 = _source37.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _980_recursiveGen;
                    bool _981_recOwned;
                    bool _982_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _983_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out437;
                    bool _out438;
                    bool _out439;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out437, out _out438, out _out439, out _out440);
                    _980_recursiveGen = _out437;
                    _981_recOwned = _out438;
                    _982_recErased = _out439;
                    _983_recIdents = _out440;
                    if (!(_981_recOwned)) {
                      _980_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_980_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_980_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _981_recOwned;
                    isErased = _982_recErased;
                    readIdents = _983_recIdents;
                  }
                } else if (_source37.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _984___mcc_h489 = _source37.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _985_recursiveGen;
                    bool _986_recOwned;
                    bool _987_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _988_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out441;
                    bool _out442;
                    bool _out443;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out444;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out441, out _out442, out _out443, out _out444);
                    _985_recursiveGen = _out441;
                    _986_recOwned = _out442;
                    _987_recErased = _out443;
                    _988_recIdents = _out444;
                    if (!(_986_recOwned)) {
                      _985_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_985_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_985_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _986_recOwned;
                    isErased = _987_recErased;
                    readIdents = _988_recIdents;
                  }
                } else {
                  DAST._IType _989___mcc_h492 = _source37.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _990_recursiveGen;
                    bool _991_recOwned;
                    bool _992_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _993_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out445;
                    bool _out446;
                    bool _out447;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out445, out _out446, out _out447, out _out448);
                    _990_recursiveGen = _out445;
                    _991_recOwned = _out446;
                    _992_recErased = _out447;
                    _993_recIdents = _out448;
                    if (!(_991_recOwned)) {
                      _990_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_990_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_990_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _991_recOwned;
                    isErased = _992_recErased;
                    readIdents = _993_recIdents;
                  }
                }
              } else if (_source36.is_Nullable) {
                DAST._IType _994___mcc_h495 = _source36.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _995_recursiveGen;
                  bool _996_recOwned;
                  bool _997_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _998_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out449;
                  bool _out450;
                  bool _out451;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out452;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out449, out _out450, out _out451, out _out452);
                  _995_recursiveGen = _out449;
                  _996_recOwned = _out450;
                  _997_recErased = _out451;
                  _998_recIdents = _out452;
                  if (!(_996_recOwned)) {
                    _995_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_995_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_995_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _996_recOwned;
                  isErased = _997_recErased;
                  readIdents = _998_recIdents;
                }
              } else if (_source36.is_Tuple) {
                Dafny.ISequence<DAST._IType> _999___mcc_h498 = _source36.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1000_recursiveGen;
                  bool _1001_recOwned;
                  bool _1002_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1003_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out453;
                  bool _out454;
                  bool _out455;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out453, out _out454, out _out455, out _out456);
                  _1000_recursiveGen = _out453;
                  _1001_recOwned = _out454;
                  _1002_recErased = _out455;
                  _1003_recIdents = _out456;
                  if (!(_1001_recOwned)) {
                    _1000_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1000_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1000_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1001_recOwned;
                  isErased = _1002_recErased;
                  readIdents = _1003_recIdents;
                }
              } else if (_source36.is_Array) {
                DAST._IType _1004___mcc_h501 = _source36.dtor_element;
                BigInteger _1005___mcc_h502 = _source36.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1006_recursiveGen;
                  bool _1007_recOwned;
                  bool _1008_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1009_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out457;
                  bool _out458;
                  bool _out459;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out460;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out457, out _out458, out _out459, out _out460);
                  _1006_recursiveGen = _out457;
                  _1007_recOwned = _out458;
                  _1008_recErased = _out459;
                  _1009_recIdents = _out460;
                  if (!(_1007_recOwned)) {
                    _1006_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1006_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1006_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1007_recOwned;
                  isErased = _1008_recErased;
                  readIdents = _1009_recIdents;
                }
              } else if (_source36.is_Seq) {
                DAST._IType _1010___mcc_h507 = _source36.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1011_recursiveGen;
                  bool _1012_recOwned;
                  bool _1013_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1014_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out461;
                  bool _out462;
                  bool _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out461, out _out462, out _out463, out _out464);
                  _1011_recursiveGen = _out461;
                  _1012_recOwned = _out462;
                  _1013_recErased = _out463;
                  _1014_recIdents = _out464;
                  if (!(_1012_recOwned)) {
                    _1011_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1011_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1011_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1012_recOwned;
                  isErased = _1013_recErased;
                  readIdents = _1014_recIdents;
                }
              } else if (_source36.is_Set) {
                DAST._IType _1015___mcc_h510 = _source36.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1016_recursiveGen;
                  bool _1017_recOwned;
                  bool _1018_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1019_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out465;
                  bool _out466;
                  bool _out467;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out468;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out465, out _out466, out _out467, out _out468);
                  _1016_recursiveGen = _out465;
                  _1017_recOwned = _out466;
                  _1018_recErased = _out467;
                  _1019_recIdents = _out468;
                  if (!(_1017_recOwned)) {
                    _1016_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1016_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1016_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1017_recOwned;
                  isErased = _1018_recErased;
                  readIdents = _1019_recIdents;
                }
              } else if (_source36.is_Multiset) {
                DAST._IType _1020___mcc_h513 = _source36.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1021_recursiveGen;
                  bool _1022_recOwned;
                  bool _1023_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1024_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out469;
                  bool _out470;
                  bool _out471;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out469, out _out470, out _out471, out _out472);
                  _1021_recursiveGen = _out469;
                  _1022_recOwned = _out470;
                  _1023_recErased = _out471;
                  _1024_recIdents = _out472;
                  if (!(_1022_recOwned)) {
                    _1021_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1021_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1021_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1022_recOwned;
                  isErased = _1023_recErased;
                  readIdents = _1024_recIdents;
                }
              } else if (_source36.is_Map) {
                DAST._IType _1025___mcc_h516 = _source36.dtor_key;
                DAST._IType _1026___mcc_h517 = _source36.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1027_recursiveGen;
                  bool _1028_recOwned;
                  bool _1029_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1030_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out473;
                  bool _out474;
                  bool _out475;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out476;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out473, out _out474, out _out475, out _out476);
                  _1027_recursiveGen = _out473;
                  _1028_recOwned = _out474;
                  _1029_recErased = _out475;
                  _1030_recIdents = _out476;
                  if (!(_1028_recOwned)) {
                    _1027_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1027_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1027_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1028_recOwned;
                  isErased = _1029_recErased;
                  readIdents = _1030_recIdents;
                }
              } else if (_source36.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1031___mcc_h522 = _source36.dtor_args;
                DAST._IType _1032___mcc_h523 = _source36.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1033_recursiveGen;
                  bool _1034_recOwned;
                  bool _1035_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1036_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out477;
                  bool _out478;
                  bool _out479;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out477, out _out478, out _out479, out _out480);
                  _1033_recursiveGen = _out477;
                  _1034_recOwned = _out478;
                  _1035_recErased = _out479;
                  _1036_recIdents = _out480;
                  if (!(_1034_recOwned)) {
                    _1033_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1033_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1033_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1034_recOwned;
                  isErased = _1035_recErased;
                  readIdents = _1036_recIdents;
                }
              } else if (_source36.is_Primitive) {
                DAST._IPrimitive _1037___mcc_h528 = _source36.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1038_recursiveGen;
                  bool _1039_recOwned;
                  bool _1040_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1041_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out481;
                  bool _out482;
                  bool _out483;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out484;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out481, out _out482, out _out483, out _out484);
                  _1038_recursiveGen = _out481;
                  _1039_recOwned = _out482;
                  _1040_recErased = _out483;
                  _1041_recIdents = _out484;
                  if (!(_1039_recOwned)) {
                    _1038_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1038_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1038_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1039_recOwned;
                  isErased = _1040_recErased;
                  readIdents = _1041_recIdents;
                }
              } else if (_source36.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1042___mcc_h531 = _source36.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1043_recursiveGen;
                  bool _1044_recOwned;
                  bool _1045_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1046_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out485;
                  bool _out486;
                  bool _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out485, out _out486, out _out487, out _out488);
                  _1043_recursiveGen = _out485;
                  _1044_recOwned = _out486;
                  _1045_recErased = _out487;
                  _1046_recIdents = _out488;
                  if (!(_1044_recOwned)) {
                    _1043_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1043_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1043_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1044_recOwned;
                  isErased = _1045_recErased;
                  readIdents = _1046_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1047___mcc_h534 = _source36.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1048_recursiveGen;
                  bool _1049_recOwned;
                  bool _1050_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1051_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out489;
                  bool _out490;
                  bool _out491;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out492;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out489, out _out490, out _out491, out _out492);
                  _1048_recursiveGen = _out489;
                  _1049_recOwned = _out490;
                  _1050_recErased = _out491;
                  _1051_recIdents = _out492;
                  if (!(_1049_recOwned)) {
                    _1048_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1048_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1048_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1049_recOwned;
                  isErased = _1050_recErased;
                  readIdents = _1051_recIdents;
                }
              }
            } else if (_source28.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1052___mcc_h537 = _source28.dtor_Tuple_a0;
              DAST._IType _source38 = _707___mcc_h306;
              if (_source38.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1053___mcc_h541 = _source38.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1054___mcc_h542 = _source38.dtor_typeArgs;
                DAST._IResolvedType _1055___mcc_h543 = _source38.dtor_resolved;
                DAST._IResolvedType _source39 = _1055___mcc_h543;
                if (_source39.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1056___mcc_h547 = _source39.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1057_recursiveGen;
                    bool _1058_recOwned;
                    bool _1059_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1060_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out493;
                    bool _out494;
                    bool _out495;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out493, out _out494, out _out495, out _out496);
                    _1057_recursiveGen = _out493;
                    _1058_recOwned = _out494;
                    _1059_recErased = _out495;
                    _1060_recIdents = _out496;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1057_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1058_recOwned;
                    isErased = _1059_recErased;
                    readIdents = _1060_recIdents;
                  }
                } else if (_source39.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1061___mcc_h549 = _source39.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1062_recursiveGen;
                    bool _1063_recOwned;
                    bool _1064_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1065_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out497;
                    bool _out498;
                    bool _out499;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out500;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out497, out _out498, out _out499, out _out500);
                    _1062_recursiveGen = _out497;
                    _1063_recOwned = _out498;
                    _1064_recErased = _out499;
                    _1065_recIdents = _out500;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1062_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1063_recOwned;
                    isErased = _1064_recErased;
                    readIdents = _1065_recIdents;
                  }
                } else {
                  DAST._IType _1066___mcc_h551 = _source39.dtor_Newtype_a0;
                  DAST._IType _1067_b = _1066___mcc_h551;
                  {
                    if (object.Equals(_700_fromTpe, _1067_b)) {
                      Dafny.ISequence<Dafny.Rune> _1068_recursiveGen;
                      bool _1069_recOwned;
                      bool _1070_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1071_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out501;
                      bool _out502;
                      bool _out503;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out501, out _out502, out _out503, out _out504);
                      _1068_recursiveGen = _out501;
                      _1069_recOwned = _out502;
                      _1070_recErased = _out503;
                      _1071_recIdents = _out504;
                      Dafny.ISequence<Dafny.Rune> _1072_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out505;
                      _out505 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _1072_rhsType = _out505;
                      Dafny.ISequence<Dafny.Rune> _1073_uneraseFn;
                      _1073_uneraseFn = ((_1069_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1072_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1073_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1068_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1069_recOwned;
                      isErased = false;
                      readIdents = _1071_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out506;
                      bool _out507;
                      bool _out508;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1067_b), _1067_b, _699_toTpe), selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                      s = _out506;
                      isOwned = _out507;
                      isErased = _out508;
                      readIdents = _out509;
                    }
                  }
                }
              } else if (_source38.is_Nullable) {
                DAST._IType _1074___mcc_h553 = _source38.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1075_recursiveGen;
                  bool _1076_recOwned;
                  bool _1077_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1078_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out510;
                  bool _out511;
                  bool _out512;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                  _1075_recursiveGen = _out510;
                  _1076_recOwned = _out511;
                  _1077_recErased = _out512;
                  _1078_recIdents = _out513;
                  if (!(_1076_recOwned)) {
                    _1075_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1075_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1077_recErased;
                  readIdents = _1078_recIdents;
                }
              } else if (_source38.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1079___mcc_h555 = _source38.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1080_recursiveGen;
                  bool _1081_recOwned;
                  bool _1082_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1083_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out514;
                  bool _out515;
                  bool _out516;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                  _1080_recursiveGen = _out514;
                  _1081_recOwned = _out515;
                  _1082_recErased = _out516;
                  _1083_recIdents = _out517;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1080_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1081_recOwned;
                  isErased = _1082_recErased;
                  readIdents = _1083_recIdents;
                }
              } else if (_source38.is_Array) {
                DAST._IType _1084___mcc_h557 = _source38.dtor_element;
                BigInteger _1085___mcc_h558 = _source38.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1086_recursiveGen;
                  bool _1087_recOwned;
                  bool _1088_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1089_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out518;
                  bool _out519;
                  bool _out520;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out521;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out518, out _out519, out _out520, out _out521);
                  _1086_recursiveGen = _out518;
                  _1087_recOwned = _out519;
                  _1088_recErased = _out520;
                  _1089_recIdents = _out521;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1087_recOwned;
                  isErased = _1088_recErased;
                  readIdents = _1089_recIdents;
                }
              } else if (_source38.is_Seq) {
                DAST._IType _1090___mcc_h561 = _source38.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1091_recursiveGen;
                  bool _1092_recOwned;
                  bool _1093_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1094_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out522;
                  bool _out523;
                  bool _out524;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out525;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out522, out _out523, out _out524, out _out525);
                  _1091_recursiveGen = _out522;
                  _1092_recOwned = _out523;
                  _1093_recErased = _out524;
                  _1094_recIdents = _out525;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1091_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1092_recOwned;
                  isErased = _1093_recErased;
                  readIdents = _1094_recIdents;
                }
              } else if (_source38.is_Set) {
                DAST._IType _1095___mcc_h563 = _source38.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1096_recursiveGen;
                  bool _1097_recOwned;
                  bool _1098_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1099_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out526;
                  bool _out527;
                  bool _out528;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out526, out _out527, out _out528, out _out529);
                  _1096_recursiveGen = _out526;
                  _1097_recOwned = _out527;
                  _1098_recErased = _out528;
                  _1099_recIdents = _out529;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1096_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1097_recOwned;
                  isErased = _1098_recErased;
                  readIdents = _1099_recIdents;
                }
              } else if (_source38.is_Multiset) {
                DAST._IType _1100___mcc_h565 = _source38.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1101_recursiveGen;
                  bool _1102_recOwned;
                  bool _1103_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1104_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out530;
                  bool _out531;
                  bool _out532;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out533;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out530, out _out531, out _out532, out _out533);
                  _1101_recursiveGen = _out530;
                  _1102_recOwned = _out531;
                  _1103_recErased = _out532;
                  _1104_recIdents = _out533;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1101_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1102_recOwned;
                  isErased = _1103_recErased;
                  readIdents = _1104_recIdents;
                }
              } else if (_source38.is_Map) {
                DAST._IType _1105___mcc_h567 = _source38.dtor_key;
                DAST._IType _1106___mcc_h568 = _source38.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1107_recursiveGen;
                  bool _1108_recOwned;
                  bool _1109_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1110_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out534;
                  bool _out535;
                  bool _out536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out537;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out534, out _out535, out _out536, out _out537);
                  _1107_recursiveGen = _out534;
                  _1108_recOwned = _out535;
                  _1109_recErased = _out536;
                  _1110_recIdents = _out537;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1107_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1108_recOwned;
                  isErased = _1109_recErased;
                  readIdents = _1110_recIdents;
                }
              } else if (_source38.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1111___mcc_h571 = _source38.dtor_args;
                DAST._IType _1112___mcc_h572 = _source38.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1113_recursiveGen;
                  bool _1114_recOwned;
                  bool _1115_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1116_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out538;
                  bool _out539;
                  bool _out540;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out541;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out538, out _out539, out _out540, out _out541);
                  _1113_recursiveGen = _out538;
                  _1114_recOwned = _out539;
                  _1115_recErased = _out540;
                  _1116_recIdents = _out541;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1113_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1114_recOwned;
                  isErased = _1115_recErased;
                  readIdents = _1116_recIdents;
                }
              } else if (_source38.is_Primitive) {
                DAST._IPrimitive _1117___mcc_h575 = _source38.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1118_recursiveGen;
                  bool _1119_recOwned;
                  bool _1120_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1121_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out542;
                  bool _out543;
                  bool _out544;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out545;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out542, out _out543, out _out544, out _out545);
                  _1118_recursiveGen = _out542;
                  _1119_recOwned = _out543;
                  _1120_recErased = _out544;
                  _1121_recIdents = _out545;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1118_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1119_recOwned;
                  isErased = _1120_recErased;
                  readIdents = _1121_recIdents;
                }
              } else if (_source38.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1122___mcc_h577 = _source38.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1123_recursiveGen;
                  bool _1124_recOwned;
                  bool _1125_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1126_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out546;
                  bool _out547;
                  bool _out548;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out546, out _out547, out _out548, out _out549);
                  _1123_recursiveGen = _out546;
                  _1124_recOwned = _out547;
                  _1125_recErased = _out548;
                  _1126_recIdents = _out549;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1123_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1124_recOwned;
                  isErased = _1125_recErased;
                  readIdents = _1126_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1127___mcc_h579 = _source38.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1128_recursiveGen;
                  bool _1129_recOwned;
                  bool _1130_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1131_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out550;
                  bool _out551;
                  bool _out552;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out553;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out550, out _out551, out _out552, out _out553);
                  _1128_recursiveGen = _out550;
                  _1129_recOwned = _out551;
                  _1130_recErased = _out552;
                  _1131_recIdents = _out553;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1128_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1129_recOwned;
                  isErased = _1130_recErased;
                  readIdents = _1131_recIdents;
                }
              }
            } else if (_source28.is_Array) {
              DAST._IType _1132___mcc_h581 = _source28.dtor_element;
              BigInteger _1133___mcc_h582 = _source28.dtor_dims;
              DAST._IType _source40 = _707___mcc_h306;
              if (_source40.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1134___mcc_h589 = _source40.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1135___mcc_h590 = _source40.dtor_typeArgs;
                DAST._IResolvedType _1136___mcc_h591 = _source40.dtor_resolved;
                DAST._IResolvedType _source41 = _1136___mcc_h591;
                if (_source41.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1137___mcc_h595 = _source41.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1138_recursiveGen;
                    bool _1139_recOwned;
                    bool _1140_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1141_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out554;
                    bool _out555;
                    bool _out556;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out557;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out554, out _out555, out _out556, out _out557);
                    _1138_recursiveGen = _out554;
                    _1139_recOwned = _out555;
                    _1140_recErased = _out556;
                    _1141_recIdents = _out557;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1138_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1139_recOwned;
                    isErased = _1140_recErased;
                    readIdents = _1141_recIdents;
                  }
                } else if (_source41.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1142___mcc_h597 = _source41.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1143_recursiveGen;
                    bool _1144_recOwned;
                    bool _1145_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1146_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out558;
                    bool _out559;
                    bool _out560;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out561;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out558, out _out559, out _out560, out _out561);
                    _1143_recursiveGen = _out558;
                    _1144_recOwned = _out559;
                    _1145_recErased = _out560;
                    _1146_recIdents = _out561;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1143_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1144_recOwned;
                    isErased = _1145_recErased;
                    readIdents = _1146_recIdents;
                  }
                } else {
                  DAST._IType _1147___mcc_h599 = _source41.dtor_Newtype_a0;
                  DAST._IType _1148_b = _1147___mcc_h599;
                  {
                    if (object.Equals(_700_fromTpe, _1148_b)) {
                      Dafny.ISequence<Dafny.Rune> _1149_recursiveGen;
                      bool _1150_recOwned;
                      bool _1151_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1152_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out562;
                      bool _out563;
                      bool _out564;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out565;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out562, out _out563, out _out564, out _out565);
                      _1149_recursiveGen = _out562;
                      _1150_recOwned = _out563;
                      _1151_recErased = _out564;
                      _1152_recIdents = _out565;
                      Dafny.ISequence<Dafny.Rune> _1153_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out566;
                      _out566 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _1153_rhsType = _out566;
                      Dafny.ISequence<Dafny.Rune> _1154_uneraseFn;
                      _1154_uneraseFn = ((_1150_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1153_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1154_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1149_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1150_recOwned;
                      isErased = false;
                      readIdents = _1152_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out567;
                      bool _out568;
                      bool _out569;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1148_b), _1148_b, _699_toTpe), selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                      s = _out567;
                      isOwned = _out568;
                      isErased = _out569;
                      readIdents = _out570;
                    }
                  }
                }
              } else if (_source40.is_Nullable) {
                DAST._IType _1155___mcc_h601 = _source40.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1156_recursiveGen;
                  bool _1157_recOwned;
                  bool _1158_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1159_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out571;
                  bool _out572;
                  bool _out573;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                  _1156_recursiveGen = _out571;
                  _1157_recOwned = _out572;
                  _1158_recErased = _out573;
                  _1159_recIdents = _out574;
                  if (!(_1157_recOwned)) {
                    _1156_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1156_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1156_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1158_recErased;
                  readIdents = _1159_recIdents;
                }
              } else if (_source40.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1160___mcc_h603 = _source40.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1161_recursiveGen;
                  bool _1162_recOwned;
                  bool _1163_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1164_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out575;
                  bool _out576;
                  bool _out577;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                  _1161_recursiveGen = _out575;
                  _1162_recOwned = _out576;
                  _1163_recErased = _out577;
                  _1164_recIdents = _out578;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1161_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1162_recOwned;
                  isErased = _1163_recErased;
                  readIdents = _1164_recIdents;
                }
              } else if (_source40.is_Array) {
                DAST._IType _1165___mcc_h605 = _source40.dtor_element;
                BigInteger _1166___mcc_h606 = _source40.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1167_recursiveGen;
                  bool _1168_recOwned;
                  bool _1169_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1170_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out579;
                  bool _out580;
                  bool _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out579, out _out580, out _out581, out _out582);
                  _1167_recursiveGen = _out579;
                  _1168_recOwned = _out580;
                  _1169_recErased = _out581;
                  _1170_recIdents = _out582;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1167_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1168_recOwned;
                  isErased = _1169_recErased;
                  readIdents = _1170_recIdents;
                }
              } else if (_source40.is_Seq) {
                DAST._IType _1171___mcc_h609 = _source40.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1172_recursiveGen;
                  bool _1173_recOwned;
                  bool _1174_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1175_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out583;
                  bool _out584;
                  bool _out585;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out586;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out583, out _out584, out _out585, out _out586);
                  _1172_recursiveGen = _out583;
                  _1173_recOwned = _out584;
                  _1174_recErased = _out585;
                  _1175_recIdents = _out586;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1172_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1173_recOwned;
                  isErased = _1174_recErased;
                  readIdents = _1175_recIdents;
                }
              } else if (_source40.is_Set) {
                DAST._IType _1176___mcc_h611 = _source40.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1177_recursiveGen;
                  bool _1178_recOwned;
                  bool _1179_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1180_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out587;
                  bool _out588;
                  bool _out589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out587, out _out588, out _out589, out _out590);
                  _1177_recursiveGen = _out587;
                  _1178_recOwned = _out588;
                  _1179_recErased = _out589;
                  _1180_recIdents = _out590;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1177_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1178_recOwned;
                  isErased = _1179_recErased;
                  readIdents = _1180_recIdents;
                }
              } else if (_source40.is_Multiset) {
                DAST._IType _1181___mcc_h613 = _source40.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1182_recursiveGen;
                  bool _1183_recOwned;
                  bool _1184_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1185_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out591;
                  bool _out592;
                  bool _out593;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out591, out _out592, out _out593, out _out594);
                  _1182_recursiveGen = _out591;
                  _1183_recOwned = _out592;
                  _1184_recErased = _out593;
                  _1185_recIdents = _out594;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1182_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1183_recOwned;
                  isErased = _1184_recErased;
                  readIdents = _1185_recIdents;
                }
              } else if (_source40.is_Map) {
                DAST._IType _1186___mcc_h615 = _source40.dtor_key;
                DAST._IType _1187___mcc_h616 = _source40.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1188_recursiveGen;
                  bool _1189_recOwned;
                  bool _1190_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1191_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out595;
                  bool _out596;
                  bool _out597;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out595, out _out596, out _out597, out _out598);
                  _1188_recursiveGen = _out595;
                  _1189_recOwned = _out596;
                  _1190_recErased = _out597;
                  _1191_recIdents = _out598;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1188_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1189_recOwned;
                  isErased = _1190_recErased;
                  readIdents = _1191_recIdents;
                }
              } else if (_source40.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1192___mcc_h619 = _source40.dtor_args;
                DAST._IType _1193___mcc_h620 = _source40.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1194_recursiveGen;
                  bool _1195_recOwned;
                  bool _1196_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1197_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out599;
                  bool _out600;
                  bool _out601;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out599, out _out600, out _out601, out _out602);
                  _1194_recursiveGen = _out599;
                  _1195_recOwned = _out600;
                  _1196_recErased = _out601;
                  _1197_recIdents = _out602;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1194_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1195_recOwned;
                  isErased = _1196_recErased;
                  readIdents = _1197_recIdents;
                }
              } else if (_source40.is_Primitive) {
                DAST._IPrimitive _1198___mcc_h623 = _source40.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1199_recursiveGen;
                  bool _1200_recOwned;
                  bool _1201_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1202_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out603;
                  bool _out604;
                  bool _out605;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out606;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out603, out _out604, out _out605, out _out606);
                  _1199_recursiveGen = _out603;
                  _1200_recOwned = _out604;
                  _1201_recErased = _out605;
                  _1202_recIdents = _out606;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1199_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1200_recOwned;
                  isErased = _1201_recErased;
                  readIdents = _1202_recIdents;
                }
              } else if (_source40.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1203___mcc_h625 = _source40.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1204_recursiveGen;
                  bool _1205_recOwned;
                  bool _1206_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1207_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out607;
                  bool _out608;
                  bool _out609;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out607, out _out608, out _out609, out _out610);
                  _1204_recursiveGen = _out607;
                  _1205_recOwned = _out608;
                  _1206_recErased = _out609;
                  _1207_recIdents = _out610;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1204_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1205_recOwned;
                  isErased = _1206_recErased;
                  readIdents = _1207_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1208___mcc_h627 = _source40.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1209_recursiveGen;
                  bool _1210_recOwned;
                  bool _1211_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1212_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out611;
                  bool _out612;
                  bool _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out611, out _out612, out _out613, out _out614);
                  _1209_recursiveGen = _out611;
                  _1210_recOwned = _out612;
                  _1211_recErased = _out613;
                  _1212_recIdents = _out614;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1209_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1210_recOwned;
                  isErased = _1211_recErased;
                  readIdents = _1212_recIdents;
                }
              }
            } else if (_source28.is_Seq) {
              DAST._IType _1213___mcc_h629 = _source28.dtor_element;
              DAST._IType _source42 = _707___mcc_h306;
              if (_source42.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1214___mcc_h633 = _source42.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1215___mcc_h634 = _source42.dtor_typeArgs;
                DAST._IResolvedType _1216___mcc_h635 = _source42.dtor_resolved;
                DAST._IResolvedType _source43 = _1216___mcc_h635;
                if (_source43.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1217___mcc_h639 = _source43.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1218_recursiveGen;
                    bool _1219_recOwned;
                    bool _1220_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1221_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out615;
                    bool _out616;
                    bool _out617;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out618;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out615, out _out616, out _out617, out _out618);
                    _1218_recursiveGen = _out615;
                    _1219_recOwned = _out616;
                    _1220_recErased = _out617;
                    _1221_recIdents = _out618;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1218_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1219_recOwned;
                    isErased = _1220_recErased;
                    readIdents = _1221_recIdents;
                  }
                } else if (_source43.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1222___mcc_h641 = _source43.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1223_recursiveGen;
                    bool _1224_recOwned;
                    bool _1225_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1226_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out619;
                    bool _out620;
                    bool _out621;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out619, out _out620, out _out621, out _out622);
                    _1223_recursiveGen = _out619;
                    _1224_recOwned = _out620;
                    _1225_recErased = _out621;
                    _1226_recIdents = _out622;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1223_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1224_recOwned;
                    isErased = _1225_recErased;
                    readIdents = _1226_recIdents;
                  }
                } else {
                  DAST._IType _1227___mcc_h643 = _source43.dtor_Newtype_a0;
                  DAST._IType _1228_b = _1227___mcc_h643;
                  {
                    if (object.Equals(_700_fromTpe, _1228_b)) {
                      Dafny.ISequence<Dafny.Rune> _1229_recursiveGen;
                      bool _1230_recOwned;
                      bool _1231_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1232_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out623;
                      bool _out624;
                      bool _out625;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out626;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out623, out _out624, out _out625, out _out626);
                      _1229_recursiveGen = _out623;
                      _1230_recOwned = _out624;
                      _1231_recErased = _out625;
                      _1232_recIdents = _out626;
                      Dafny.ISequence<Dafny.Rune> _1233_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out627;
                      _out627 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _1233_rhsType = _out627;
                      Dafny.ISequence<Dafny.Rune> _1234_uneraseFn;
                      _1234_uneraseFn = ((_1230_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1233_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1234_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1229_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1230_recOwned;
                      isErased = false;
                      readIdents = _1232_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out628;
                      bool _out629;
                      bool _out630;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1228_b), _1228_b, _699_toTpe), selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                      s = _out628;
                      isOwned = _out629;
                      isErased = _out630;
                      readIdents = _out631;
                    }
                  }
                }
              } else if (_source42.is_Nullable) {
                DAST._IType _1235___mcc_h645 = _source42.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1236_recursiveGen;
                  bool _1237_recOwned;
                  bool _1238_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1239_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out632;
                  bool _out633;
                  bool _out634;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                  _1236_recursiveGen = _out632;
                  _1237_recOwned = _out633;
                  _1238_recErased = _out634;
                  _1239_recIdents = _out635;
                  if (!(_1237_recOwned)) {
                    _1236_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1236_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1236_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1238_recErased;
                  readIdents = _1239_recIdents;
                }
              } else if (_source42.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1240___mcc_h647 = _source42.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1241_recursiveGen;
                  bool _1242_recOwned;
                  bool _1243_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1244_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out636;
                  bool _out637;
                  bool _out638;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                  _1241_recursiveGen = _out636;
                  _1242_recOwned = _out637;
                  _1243_recErased = _out638;
                  _1244_recIdents = _out639;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1241_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1242_recOwned;
                  isErased = _1243_recErased;
                  readIdents = _1244_recIdents;
                }
              } else if (_source42.is_Array) {
                DAST._IType _1245___mcc_h649 = _source42.dtor_element;
                BigInteger _1246___mcc_h650 = _source42.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1247_recursiveGen;
                  bool _1248_recOwned;
                  bool _1249_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1250_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out640;
                  bool _out641;
                  bool _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out640, out _out641, out _out642, out _out643);
                  _1247_recursiveGen = _out640;
                  _1248_recOwned = _out641;
                  _1249_recErased = _out642;
                  _1250_recIdents = _out643;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1247_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1248_recOwned;
                  isErased = _1249_recErased;
                  readIdents = _1250_recIdents;
                }
              } else if (_source42.is_Seq) {
                DAST._IType _1251___mcc_h653 = _source42.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1252_recursiveGen;
                  bool _1253_recOwned;
                  bool _1254_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1255_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out644;
                  bool _out645;
                  bool _out646;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out647;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out644, out _out645, out _out646, out _out647);
                  _1252_recursiveGen = _out644;
                  _1253_recOwned = _out645;
                  _1254_recErased = _out646;
                  _1255_recIdents = _out647;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1252_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1253_recOwned;
                  isErased = _1254_recErased;
                  readIdents = _1255_recIdents;
                }
              } else if (_source42.is_Set) {
                DAST._IType _1256___mcc_h655 = _source42.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1257_recursiveGen;
                  bool _1258_recOwned;
                  bool _1259_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1260_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out648;
                  bool _out649;
                  bool _out650;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out648, out _out649, out _out650, out _out651);
                  _1257_recursiveGen = _out648;
                  _1258_recOwned = _out649;
                  _1259_recErased = _out650;
                  _1260_recIdents = _out651;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1257_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1258_recOwned;
                  isErased = _1259_recErased;
                  readIdents = _1260_recIdents;
                }
              } else if (_source42.is_Multiset) {
                DAST._IType _1261___mcc_h657 = _source42.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1262_recursiveGen;
                  bool _1263_recOwned;
                  bool _1264_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1265_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out652;
                  bool _out653;
                  bool _out654;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out652, out _out653, out _out654, out _out655);
                  _1262_recursiveGen = _out652;
                  _1263_recOwned = _out653;
                  _1264_recErased = _out654;
                  _1265_recIdents = _out655;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1262_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1263_recOwned;
                  isErased = _1264_recErased;
                  readIdents = _1265_recIdents;
                }
              } else if (_source42.is_Map) {
                DAST._IType _1266___mcc_h659 = _source42.dtor_key;
                DAST._IType _1267___mcc_h660 = _source42.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1268_recursiveGen;
                  bool _1269_recOwned;
                  bool _1270_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1271_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out656;
                  bool _out657;
                  bool _out658;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out659;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out656, out _out657, out _out658, out _out659);
                  _1268_recursiveGen = _out656;
                  _1269_recOwned = _out657;
                  _1270_recErased = _out658;
                  _1271_recIdents = _out659;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1268_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1269_recOwned;
                  isErased = _1270_recErased;
                  readIdents = _1271_recIdents;
                }
              } else if (_source42.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1272___mcc_h663 = _source42.dtor_args;
                DAST._IType _1273___mcc_h664 = _source42.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1274_recursiveGen;
                  bool _1275_recOwned;
                  bool _1276_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1277_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out660;
                  bool _out661;
                  bool _out662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out663;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out660, out _out661, out _out662, out _out663);
                  _1274_recursiveGen = _out660;
                  _1275_recOwned = _out661;
                  _1276_recErased = _out662;
                  _1277_recIdents = _out663;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1274_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1275_recOwned;
                  isErased = _1276_recErased;
                  readIdents = _1277_recIdents;
                }
              } else if (_source42.is_Primitive) {
                DAST._IPrimitive _1278___mcc_h667 = _source42.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1279_recursiveGen;
                  bool _1280_recOwned;
                  bool _1281_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1282_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out664;
                  bool _out665;
                  bool _out666;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out667;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out664, out _out665, out _out666, out _out667);
                  _1279_recursiveGen = _out664;
                  _1280_recOwned = _out665;
                  _1281_recErased = _out666;
                  _1282_recIdents = _out667;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1279_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1280_recOwned;
                  isErased = _1281_recErased;
                  readIdents = _1282_recIdents;
                }
              } else if (_source42.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1283___mcc_h669 = _source42.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1284_recursiveGen;
                  bool _1285_recOwned;
                  bool _1286_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1287_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out668;
                  bool _out669;
                  bool _out670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out668, out _out669, out _out670, out _out671);
                  _1284_recursiveGen = _out668;
                  _1285_recOwned = _out669;
                  _1286_recErased = _out670;
                  _1287_recIdents = _out671;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1284_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1285_recOwned;
                  isErased = _1286_recErased;
                  readIdents = _1287_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1288___mcc_h671 = _source42.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1289_recursiveGen;
                  bool _1290_recOwned;
                  bool _1291_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1292_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out672;
                  bool _out673;
                  bool _out674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out672, out _out673, out _out674, out _out675);
                  _1289_recursiveGen = _out672;
                  _1290_recOwned = _out673;
                  _1291_recErased = _out674;
                  _1292_recIdents = _out675;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1289_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1290_recOwned;
                  isErased = _1291_recErased;
                  readIdents = _1292_recIdents;
                }
              }
            } else if (_source28.is_Set) {
              DAST._IType _1293___mcc_h673 = _source28.dtor_element;
              DAST._IType _source44 = _707___mcc_h306;
              if (_source44.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1294___mcc_h677 = _source44.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1295___mcc_h678 = _source44.dtor_typeArgs;
                DAST._IResolvedType _1296___mcc_h679 = _source44.dtor_resolved;
                DAST._IResolvedType _source45 = _1296___mcc_h679;
                if (_source45.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1297___mcc_h683 = _source45.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1298_recursiveGen;
                    bool _1299_recOwned;
                    bool _1300_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1301_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out676;
                    bool _out677;
                    bool _out678;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out679;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out676, out _out677, out _out678, out _out679);
                    _1298_recursiveGen = _out676;
                    _1299_recOwned = _out677;
                    _1300_recErased = _out678;
                    _1301_recIdents = _out679;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1298_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1299_recOwned;
                    isErased = _1300_recErased;
                    readIdents = _1301_recIdents;
                  }
                } else if (_source45.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1302___mcc_h685 = _source45.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1303_recursiveGen;
                    bool _1304_recOwned;
                    bool _1305_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1306_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out680;
                    bool _out681;
                    bool _out682;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out683;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out680, out _out681, out _out682, out _out683);
                    _1303_recursiveGen = _out680;
                    _1304_recOwned = _out681;
                    _1305_recErased = _out682;
                    _1306_recIdents = _out683;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1303_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1304_recOwned;
                    isErased = _1305_recErased;
                    readIdents = _1306_recIdents;
                  }
                } else {
                  DAST._IType _1307___mcc_h687 = _source45.dtor_Newtype_a0;
                  DAST._IType _1308_b = _1307___mcc_h687;
                  {
                    if (object.Equals(_700_fromTpe, _1308_b)) {
                      Dafny.ISequence<Dafny.Rune> _1309_recursiveGen;
                      bool _1310_recOwned;
                      bool _1311_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1312_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out684;
                      bool _out685;
                      bool _out686;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out687;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out684, out _out685, out _out686, out _out687);
                      _1309_recursiveGen = _out684;
                      _1310_recOwned = _out685;
                      _1311_recErased = _out686;
                      _1312_recIdents = _out687;
                      Dafny.ISequence<Dafny.Rune> _1313_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out688;
                      _out688 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _1313_rhsType = _out688;
                      Dafny.ISequence<Dafny.Rune> _1314_uneraseFn;
                      _1314_uneraseFn = ((_1310_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1313_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1314_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1309_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1310_recOwned;
                      isErased = false;
                      readIdents = _1312_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out689;
                      bool _out690;
                      bool _out691;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1308_b), _1308_b, _699_toTpe), selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                      s = _out689;
                      isOwned = _out690;
                      isErased = _out691;
                      readIdents = _out692;
                    }
                  }
                }
              } else if (_source44.is_Nullable) {
                DAST._IType _1315___mcc_h689 = _source44.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1316_recursiveGen;
                  bool _1317_recOwned;
                  bool _1318_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1319_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out693;
                  bool _out694;
                  bool _out695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                  _1316_recursiveGen = _out693;
                  _1317_recOwned = _out694;
                  _1318_recErased = _out695;
                  _1319_recIdents = _out696;
                  if (!(_1317_recOwned)) {
                    _1316_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1316_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1318_recErased;
                  readIdents = _1319_recIdents;
                }
              } else if (_source44.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1320___mcc_h691 = _source44.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1321_recursiveGen;
                  bool _1322_recOwned;
                  bool _1323_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1324_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out697;
                  bool _out698;
                  bool _out699;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                  _1321_recursiveGen = _out697;
                  _1322_recOwned = _out698;
                  _1323_recErased = _out699;
                  _1324_recIdents = _out700;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1321_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1322_recOwned;
                  isErased = _1323_recErased;
                  readIdents = _1324_recIdents;
                }
              } else if (_source44.is_Array) {
                DAST._IType _1325___mcc_h693 = _source44.dtor_element;
                BigInteger _1326___mcc_h694 = _source44.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1327_recursiveGen;
                  bool _1328_recOwned;
                  bool _1329_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1330_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out701;
                  bool _out702;
                  bool _out703;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out704;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out701, out _out702, out _out703, out _out704);
                  _1327_recursiveGen = _out701;
                  _1328_recOwned = _out702;
                  _1329_recErased = _out703;
                  _1330_recIdents = _out704;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1327_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1328_recOwned;
                  isErased = _1329_recErased;
                  readIdents = _1330_recIdents;
                }
              } else if (_source44.is_Seq) {
                DAST._IType _1331___mcc_h697 = _source44.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1332_recursiveGen;
                  bool _1333_recOwned;
                  bool _1334_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1335_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out705;
                  bool _out706;
                  bool _out707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out708;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out705, out _out706, out _out707, out _out708);
                  _1332_recursiveGen = _out705;
                  _1333_recOwned = _out706;
                  _1334_recErased = _out707;
                  _1335_recIdents = _out708;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1332_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1333_recOwned;
                  isErased = _1334_recErased;
                  readIdents = _1335_recIdents;
                }
              } else if (_source44.is_Set) {
                DAST._IType _1336___mcc_h699 = _source44.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1337_recursiveGen;
                  bool _1338_recOwned;
                  bool _1339_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1340_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out709;
                  bool _out710;
                  bool _out711;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out712;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out709, out _out710, out _out711, out _out712);
                  _1337_recursiveGen = _out709;
                  _1338_recOwned = _out710;
                  _1339_recErased = _out711;
                  _1340_recIdents = _out712;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1337_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1338_recOwned;
                  isErased = _1339_recErased;
                  readIdents = _1340_recIdents;
                }
              } else if (_source44.is_Multiset) {
                DAST._IType _1341___mcc_h701 = _source44.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1342_recursiveGen;
                  bool _1343_recOwned;
                  bool _1344_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1345_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out713;
                  bool _out714;
                  bool _out715;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out713, out _out714, out _out715, out _out716);
                  _1342_recursiveGen = _out713;
                  _1343_recOwned = _out714;
                  _1344_recErased = _out715;
                  _1345_recIdents = _out716;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1342_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1343_recOwned;
                  isErased = _1344_recErased;
                  readIdents = _1345_recIdents;
                }
              } else if (_source44.is_Map) {
                DAST._IType _1346___mcc_h703 = _source44.dtor_key;
                DAST._IType _1347___mcc_h704 = _source44.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1348_recursiveGen;
                  bool _1349_recOwned;
                  bool _1350_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1351_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out717;
                  bool _out718;
                  bool _out719;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out720;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out717, out _out718, out _out719, out _out720);
                  _1348_recursiveGen = _out717;
                  _1349_recOwned = _out718;
                  _1350_recErased = _out719;
                  _1351_recIdents = _out720;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1348_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1349_recOwned;
                  isErased = _1350_recErased;
                  readIdents = _1351_recIdents;
                }
              } else if (_source44.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1352___mcc_h707 = _source44.dtor_args;
                DAST._IType _1353___mcc_h708 = _source44.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1354_recursiveGen;
                  bool _1355_recOwned;
                  bool _1356_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1357_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out721;
                  bool _out722;
                  bool _out723;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out724;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out721, out _out722, out _out723, out _out724);
                  _1354_recursiveGen = _out721;
                  _1355_recOwned = _out722;
                  _1356_recErased = _out723;
                  _1357_recIdents = _out724;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1354_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1355_recOwned;
                  isErased = _1356_recErased;
                  readIdents = _1357_recIdents;
                }
              } else if (_source44.is_Primitive) {
                DAST._IPrimitive _1358___mcc_h711 = _source44.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1359_recursiveGen;
                  bool _1360_recOwned;
                  bool _1361_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1362_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out725;
                  bool _out726;
                  bool _out727;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out728;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out725, out _out726, out _out727, out _out728);
                  _1359_recursiveGen = _out725;
                  _1360_recOwned = _out726;
                  _1361_recErased = _out727;
                  _1362_recIdents = _out728;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1359_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1360_recOwned;
                  isErased = _1361_recErased;
                  readIdents = _1362_recIdents;
                }
              } else if (_source44.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1363___mcc_h713 = _source44.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1364_recursiveGen;
                  bool _1365_recOwned;
                  bool _1366_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1367_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out729;
                  bool _out730;
                  bool _out731;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out732;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out729, out _out730, out _out731, out _out732);
                  _1364_recursiveGen = _out729;
                  _1365_recOwned = _out730;
                  _1366_recErased = _out731;
                  _1367_recIdents = _out732;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1364_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1365_recOwned;
                  isErased = _1366_recErased;
                  readIdents = _1367_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1368___mcc_h715 = _source44.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1369_recursiveGen;
                  bool _1370_recOwned;
                  bool _1371_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1372_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out733;
                  bool _out734;
                  bool _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out733, out _out734, out _out735, out _out736);
                  _1369_recursiveGen = _out733;
                  _1370_recOwned = _out734;
                  _1371_recErased = _out735;
                  _1372_recIdents = _out736;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1369_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1370_recOwned;
                  isErased = _1371_recErased;
                  readIdents = _1372_recIdents;
                }
              }
            } else if (_source28.is_Multiset) {
              DAST._IType _1373___mcc_h717 = _source28.dtor_element;
              DAST._IType _source46 = _707___mcc_h306;
              if (_source46.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1374___mcc_h721 = _source46.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1375___mcc_h722 = _source46.dtor_typeArgs;
                DAST._IResolvedType _1376___mcc_h723 = _source46.dtor_resolved;
                DAST._IResolvedType _source47 = _1376___mcc_h723;
                if (_source47.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1377___mcc_h727 = _source47.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1378_recursiveGen;
                    bool _1379_recOwned;
                    bool _1380_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1381_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out737;
                    bool _out738;
                    bool _out739;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out740;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out737, out _out738, out _out739, out _out740);
                    _1378_recursiveGen = _out737;
                    _1379_recOwned = _out738;
                    _1380_recErased = _out739;
                    _1381_recIdents = _out740;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1378_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1379_recOwned;
                    isErased = _1380_recErased;
                    readIdents = _1381_recIdents;
                  }
                } else if (_source47.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1382___mcc_h729 = _source47.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1383_recursiveGen;
                    bool _1384_recOwned;
                    bool _1385_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1386_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out741;
                    bool _out742;
                    bool _out743;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out744;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out741, out _out742, out _out743, out _out744);
                    _1383_recursiveGen = _out741;
                    _1384_recOwned = _out742;
                    _1385_recErased = _out743;
                    _1386_recIdents = _out744;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1383_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1384_recOwned;
                    isErased = _1385_recErased;
                    readIdents = _1386_recIdents;
                  }
                } else {
                  DAST._IType _1387___mcc_h731 = _source47.dtor_Newtype_a0;
                  DAST._IType _1388_b = _1387___mcc_h731;
                  {
                    if (object.Equals(_700_fromTpe, _1388_b)) {
                      Dafny.ISequence<Dafny.Rune> _1389_recursiveGen;
                      bool _1390_recOwned;
                      bool _1391_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1392_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out745;
                      bool _out746;
                      bool _out747;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out748;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out745, out _out746, out _out747, out _out748);
                      _1389_recursiveGen = _out745;
                      _1390_recOwned = _out746;
                      _1391_recErased = _out747;
                      _1392_recIdents = _out748;
                      Dafny.ISequence<Dafny.Rune> _1393_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out749;
                      _out749 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _1393_rhsType = _out749;
                      Dafny.ISequence<Dafny.Rune> _1394_uneraseFn;
                      _1394_uneraseFn = ((_1390_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1393_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1394_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1389_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1390_recOwned;
                      isErased = false;
                      readIdents = _1392_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out750;
                      bool _out751;
                      bool _out752;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1388_b), _1388_b, _699_toTpe), selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                      s = _out750;
                      isOwned = _out751;
                      isErased = _out752;
                      readIdents = _out753;
                    }
                  }
                }
              } else if (_source46.is_Nullable) {
                DAST._IType _1395___mcc_h733 = _source46.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1396_recursiveGen;
                  bool _1397_recOwned;
                  bool _1398_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1399_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out754;
                  bool _out755;
                  bool _out756;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                  _1396_recursiveGen = _out754;
                  _1397_recOwned = _out755;
                  _1398_recErased = _out756;
                  _1399_recIdents = _out757;
                  if (!(_1397_recOwned)) {
                    _1396_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1396_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1396_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1398_recErased;
                  readIdents = _1399_recIdents;
                }
              } else if (_source46.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1400___mcc_h735 = _source46.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1401_recursiveGen;
                  bool _1402_recOwned;
                  bool _1403_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1404_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out758;
                  bool _out759;
                  bool _out760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                  _1401_recursiveGen = _out758;
                  _1402_recOwned = _out759;
                  _1403_recErased = _out760;
                  _1404_recIdents = _out761;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1401_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1402_recOwned;
                  isErased = _1403_recErased;
                  readIdents = _1404_recIdents;
                }
              } else if (_source46.is_Array) {
                DAST._IType _1405___mcc_h737 = _source46.dtor_element;
                BigInteger _1406___mcc_h738 = _source46.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1407_recursiveGen;
                  bool _1408_recOwned;
                  bool _1409_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1410_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out762;
                  bool _out763;
                  bool _out764;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out765;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out762, out _out763, out _out764, out _out765);
                  _1407_recursiveGen = _out762;
                  _1408_recOwned = _out763;
                  _1409_recErased = _out764;
                  _1410_recIdents = _out765;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1407_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1408_recOwned;
                  isErased = _1409_recErased;
                  readIdents = _1410_recIdents;
                }
              } else if (_source46.is_Seq) {
                DAST._IType _1411___mcc_h741 = _source46.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1412_recursiveGen;
                  bool _1413_recOwned;
                  bool _1414_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1415_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out766;
                  bool _out767;
                  bool _out768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out769;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out766, out _out767, out _out768, out _out769);
                  _1412_recursiveGen = _out766;
                  _1413_recOwned = _out767;
                  _1414_recErased = _out768;
                  _1415_recIdents = _out769;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1413_recOwned;
                  isErased = _1414_recErased;
                  readIdents = _1415_recIdents;
                }
              } else if (_source46.is_Set) {
                DAST._IType _1416___mcc_h743 = _source46.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1417_recursiveGen;
                  bool _1418_recOwned;
                  bool _1419_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1420_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out770;
                  bool _out771;
                  bool _out772;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out773;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out770, out _out771, out _out772, out _out773);
                  _1417_recursiveGen = _out770;
                  _1418_recOwned = _out771;
                  _1419_recErased = _out772;
                  _1420_recIdents = _out773;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1417_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1418_recOwned;
                  isErased = _1419_recErased;
                  readIdents = _1420_recIdents;
                }
              } else if (_source46.is_Multiset) {
                DAST._IType _1421___mcc_h745 = _source46.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1422_recursiveGen;
                  bool _1423_recOwned;
                  bool _1424_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1425_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out774;
                  bool _out775;
                  bool _out776;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out774, out _out775, out _out776, out _out777);
                  _1422_recursiveGen = _out774;
                  _1423_recOwned = _out775;
                  _1424_recErased = _out776;
                  _1425_recIdents = _out777;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1422_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1423_recOwned;
                  isErased = _1424_recErased;
                  readIdents = _1425_recIdents;
                }
              } else if (_source46.is_Map) {
                DAST._IType _1426___mcc_h747 = _source46.dtor_key;
                DAST._IType _1427___mcc_h748 = _source46.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1428_recursiveGen;
                  bool _1429_recOwned;
                  bool _1430_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1431_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out778;
                  bool _out779;
                  bool _out780;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out781;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out778, out _out779, out _out780, out _out781);
                  _1428_recursiveGen = _out778;
                  _1429_recOwned = _out779;
                  _1430_recErased = _out780;
                  _1431_recIdents = _out781;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1428_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1429_recOwned;
                  isErased = _1430_recErased;
                  readIdents = _1431_recIdents;
                }
              } else if (_source46.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1432___mcc_h751 = _source46.dtor_args;
                DAST._IType _1433___mcc_h752 = _source46.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1434_recursiveGen;
                  bool _1435_recOwned;
                  bool _1436_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1437_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out782;
                  bool _out783;
                  bool _out784;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out785;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out782, out _out783, out _out784, out _out785);
                  _1434_recursiveGen = _out782;
                  _1435_recOwned = _out783;
                  _1436_recErased = _out784;
                  _1437_recIdents = _out785;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1434_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1435_recOwned;
                  isErased = _1436_recErased;
                  readIdents = _1437_recIdents;
                }
              } else if (_source46.is_Primitive) {
                DAST._IPrimitive _1438___mcc_h755 = _source46.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1439_recursiveGen;
                  bool _1440_recOwned;
                  bool _1441_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1442_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out786;
                  bool _out787;
                  bool _out788;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out789;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out786, out _out787, out _out788, out _out789);
                  _1439_recursiveGen = _out786;
                  _1440_recOwned = _out787;
                  _1441_recErased = _out788;
                  _1442_recIdents = _out789;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1439_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1440_recOwned;
                  isErased = _1441_recErased;
                  readIdents = _1442_recIdents;
                }
              } else if (_source46.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1443___mcc_h757 = _source46.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1444_recursiveGen;
                  bool _1445_recOwned;
                  bool _1446_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1447_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out790;
                  bool _out791;
                  bool _out792;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out793;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out790, out _out791, out _out792, out _out793);
                  _1444_recursiveGen = _out790;
                  _1445_recOwned = _out791;
                  _1446_recErased = _out792;
                  _1447_recIdents = _out793;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1444_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1445_recOwned;
                  isErased = _1446_recErased;
                  readIdents = _1447_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1448___mcc_h759 = _source46.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1449_recursiveGen;
                  bool _1450_recOwned;
                  bool _1451_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1452_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out794;
                  bool _out795;
                  bool _out796;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out794, out _out795, out _out796, out _out797);
                  _1449_recursiveGen = _out794;
                  _1450_recOwned = _out795;
                  _1451_recErased = _out796;
                  _1452_recIdents = _out797;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1449_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1450_recOwned;
                  isErased = _1451_recErased;
                  readIdents = _1452_recIdents;
                }
              }
            } else if (_source28.is_Map) {
              DAST._IType _1453___mcc_h761 = _source28.dtor_key;
              DAST._IType _1454___mcc_h762 = _source28.dtor_value;
              DAST._IType _source48 = _707___mcc_h306;
              if (_source48.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1455___mcc_h769 = _source48.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1456___mcc_h770 = _source48.dtor_typeArgs;
                DAST._IResolvedType _1457___mcc_h771 = _source48.dtor_resolved;
                DAST._IResolvedType _source49 = _1457___mcc_h771;
                if (_source49.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1458___mcc_h775 = _source49.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1459_recursiveGen;
                    bool _1460_recOwned;
                    bool _1461_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1462_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out798;
                    bool _out799;
                    bool _out800;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out801;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out798, out _out799, out _out800, out _out801);
                    _1459_recursiveGen = _out798;
                    _1460_recOwned = _out799;
                    _1461_recErased = _out800;
                    _1462_recIdents = _out801;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1459_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1460_recOwned;
                    isErased = _1461_recErased;
                    readIdents = _1462_recIdents;
                  }
                } else if (_source49.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1463___mcc_h777 = _source49.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1464_recursiveGen;
                    bool _1465_recOwned;
                    bool _1466_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1467_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out802;
                    bool _out803;
                    bool _out804;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out805;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out802, out _out803, out _out804, out _out805);
                    _1464_recursiveGen = _out802;
                    _1465_recOwned = _out803;
                    _1466_recErased = _out804;
                    _1467_recIdents = _out805;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1464_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1465_recOwned;
                    isErased = _1466_recErased;
                    readIdents = _1467_recIdents;
                  }
                } else {
                  DAST._IType _1468___mcc_h779 = _source49.dtor_Newtype_a0;
                  DAST._IType _1469_b = _1468___mcc_h779;
                  {
                    if (object.Equals(_700_fromTpe, _1469_b)) {
                      Dafny.ISequence<Dafny.Rune> _1470_recursiveGen;
                      bool _1471_recOwned;
                      bool _1472_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1473_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out806;
                      bool _out807;
                      bool _out808;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out809;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out806, out _out807, out _out808, out _out809);
                      _1470_recursiveGen = _out806;
                      _1471_recOwned = _out807;
                      _1472_recErased = _out808;
                      _1473_recIdents = _out809;
                      Dafny.ISequence<Dafny.Rune> _1474_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out810;
                      _out810 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _1474_rhsType = _out810;
                      Dafny.ISequence<Dafny.Rune> _1475_uneraseFn;
                      _1475_uneraseFn = ((_1471_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1474_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1475_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1470_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1471_recOwned;
                      isErased = false;
                      readIdents = _1473_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out811;
                      bool _out812;
                      bool _out813;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1469_b), _1469_b, _699_toTpe), selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                      s = _out811;
                      isOwned = _out812;
                      isErased = _out813;
                      readIdents = _out814;
                    }
                  }
                }
              } else if (_source48.is_Nullable) {
                DAST._IType _1476___mcc_h781 = _source48.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1477_recursiveGen;
                  bool _1478_recOwned;
                  bool _1479_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1480_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out815;
                  bool _out816;
                  bool _out817;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                  _1477_recursiveGen = _out815;
                  _1478_recOwned = _out816;
                  _1479_recErased = _out817;
                  _1480_recIdents = _out818;
                  if (!(_1478_recOwned)) {
                    _1477_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1477_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1477_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1479_recErased;
                  readIdents = _1480_recIdents;
                }
              } else if (_source48.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1481___mcc_h783 = _source48.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1482_recursiveGen;
                  bool _1483_recOwned;
                  bool _1484_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1485_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out819;
                  bool _out820;
                  bool _out821;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                  _1482_recursiveGen = _out819;
                  _1483_recOwned = _out820;
                  _1484_recErased = _out821;
                  _1485_recIdents = _out822;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1482_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1483_recOwned;
                  isErased = _1484_recErased;
                  readIdents = _1485_recIdents;
                }
              } else if (_source48.is_Array) {
                DAST._IType _1486___mcc_h785 = _source48.dtor_element;
                BigInteger _1487___mcc_h786 = _source48.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1488_recursiveGen;
                  bool _1489_recOwned;
                  bool _1490_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1491_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out823;
                  bool _out824;
                  bool _out825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out826;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out823, out _out824, out _out825, out _out826);
                  _1488_recursiveGen = _out823;
                  _1489_recOwned = _out824;
                  _1490_recErased = _out825;
                  _1491_recIdents = _out826;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1488_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1489_recOwned;
                  isErased = _1490_recErased;
                  readIdents = _1491_recIdents;
                }
              } else if (_source48.is_Seq) {
                DAST._IType _1492___mcc_h789 = _source48.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1493_recursiveGen;
                  bool _1494_recOwned;
                  bool _1495_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1496_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out827;
                  bool _out828;
                  bool _out829;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out830;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out827, out _out828, out _out829, out _out830);
                  _1493_recursiveGen = _out827;
                  _1494_recOwned = _out828;
                  _1495_recErased = _out829;
                  _1496_recIdents = _out830;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1493_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1494_recOwned;
                  isErased = _1495_recErased;
                  readIdents = _1496_recIdents;
                }
              } else if (_source48.is_Set) {
                DAST._IType _1497___mcc_h791 = _source48.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1498_recursiveGen;
                  bool _1499_recOwned;
                  bool _1500_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1501_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out831;
                  bool _out832;
                  bool _out833;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out834;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out831, out _out832, out _out833, out _out834);
                  _1498_recursiveGen = _out831;
                  _1499_recOwned = _out832;
                  _1500_recErased = _out833;
                  _1501_recIdents = _out834;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1498_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1499_recOwned;
                  isErased = _1500_recErased;
                  readIdents = _1501_recIdents;
                }
              } else if (_source48.is_Multiset) {
                DAST._IType _1502___mcc_h793 = _source48.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1503_recursiveGen;
                  bool _1504_recOwned;
                  bool _1505_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1506_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out835;
                  bool _out836;
                  bool _out837;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out838;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out835, out _out836, out _out837, out _out838);
                  _1503_recursiveGen = _out835;
                  _1504_recOwned = _out836;
                  _1505_recErased = _out837;
                  _1506_recIdents = _out838;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1503_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1504_recOwned;
                  isErased = _1505_recErased;
                  readIdents = _1506_recIdents;
                }
              } else if (_source48.is_Map) {
                DAST._IType _1507___mcc_h795 = _source48.dtor_key;
                DAST._IType _1508___mcc_h796 = _source48.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1509_recursiveGen;
                  bool _1510_recOwned;
                  bool _1511_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1512_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out839;
                  bool _out840;
                  bool _out841;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out839, out _out840, out _out841, out _out842);
                  _1509_recursiveGen = _out839;
                  _1510_recOwned = _out840;
                  _1511_recErased = _out841;
                  _1512_recIdents = _out842;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1509_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1510_recOwned;
                  isErased = _1511_recErased;
                  readIdents = _1512_recIdents;
                }
              } else if (_source48.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1513___mcc_h799 = _source48.dtor_args;
                DAST._IType _1514___mcc_h800 = _source48.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1515_recursiveGen;
                  bool _1516_recOwned;
                  bool _1517_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1518_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out843;
                  bool _out844;
                  bool _out845;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out846;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out843, out _out844, out _out845, out _out846);
                  _1515_recursiveGen = _out843;
                  _1516_recOwned = _out844;
                  _1517_recErased = _out845;
                  _1518_recIdents = _out846;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1515_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1516_recOwned;
                  isErased = _1517_recErased;
                  readIdents = _1518_recIdents;
                }
              } else if (_source48.is_Primitive) {
                DAST._IPrimitive _1519___mcc_h803 = _source48.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1520_recursiveGen;
                  bool _1521_recOwned;
                  bool _1522_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1523_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out847;
                  bool _out848;
                  bool _out849;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out847, out _out848, out _out849, out _out850);
                  _1520_recursiveGen = _out847;
                  _1521_recOwned = _out848;
                  _1522_recErased = _out849;
                  _1523_recIdents = _out850;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1520_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1521_recOwned;
                  isErased = _1522_recErased;
                  readIdents = _1523_recIdents;
                }
              } else if (_source48.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1524___mcc_h805 = _source48.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1525_recursiveGen;
                  bool _1526_recOwned;
                  bool _1527_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1528_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out851;
                  bool _out852;
                  bool _out853;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out854;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out851, out _out852, out _out853, out _out854);
                  _1525_recursiveGen = _out851;
                  _1526_recOwned = _out852;
                  _1527_recErased = _out853;
                  _1528_recIdents = _out854;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1525_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1526_recOwned;
                  isErased = _1527_recErased;
                  readIdents = _1528_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1529___mcc_h807 = _source48.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1530_recursiveGen;
                  bool _1531_recOwned;
                  bool _1532_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1533_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out855;
                  bool _out856;
                  bool _out857;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out855, out _out856, out _out857, out _out858);
                  _1530_recursiveGen = _out855;
                  _1531_recOwned = _out856;
                  _1532_recErased = _out857;
                  _1533_recIdents = _out858;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1530_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1531_recOwned;
                  isErased = _1532_recErased;
                  readIdents = _1533_recIdents;
                }
              }
            } else if (_source28.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1534___mcc_h809 = _source28.dtor_args;
              DAST._IType _1535___mcc_h810 = _source28.dtor_result;
              DAST._IType _source50 = _707___mcc_h306;
              if (_source50.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1536___mcc_h817 = _source50.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1537___mcc_h818 = _source50.dtor_typeArgs;
                DAST._IResolvedType _1538___mcc_h819 = _source50.dtor_resolved;
                DAST._IResolvedType _source51 = _1538___mcc_h819;
                if (_source51.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1539___mcc_h823 = _source51.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1540_recursiveGen;
                    bool _1541_recOwned;
                    bool _1542_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1543_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out859;
                    bool _out860;
                    bool _out861;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out862;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out859, out _out860, out _out861, out _out862);
                    _1540_recursiveGen = _out859;
                    _1541_recOwned = _out860;
                    _1542_recErased = _out861;
                    _1543_recIdents = _out862;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1540_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1541_recOwned;
                    isErased = _1542_recErased;
                    readIdents = _1543_recIdents;
                  }
                } else if (_source51.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1544___mcc_h825 = _source51.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1545_recursiveGen;
                    bool _1546_recOwned;
                    bool _1547_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1548_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out863;
                    bool _out864;
                    bool _out865;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out866;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out863, out _out864, out _out865, out _out866);
                    _1545_recursiveGen = _out863;
                    _1546_recOwned = _out864;
                    _1547_recErased = _out865;
                    _1548_recIdents = _out866;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1545_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1546_recOwned;
                    isErased = _1547_recErased;
                    readIdents = _1548_recIdents;
                  }
                } else {
                  DAST._IType _1549___mcc_h827 = _source51.dtor_Newtype_a0;
                  DAST._IType _1550_b = _1549___mcc_h827;
                  {
                    if (object.Equals(_700_fromTpe, _1550_b)) {
                      Dafny.ISequence<Dafny.Rune> _1551_recursiveGen;
                      bool _1552_recOwned;
                      bool _1553_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1554_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out867;
                      bool _out868;
                      bool _out869;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out870;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out867, out _out868, out _out869, out _out870);
                      _1551_recursiveGen = _out867;
                      _1552_recOwned = _out868;
                      _1553_recErased = _out869;
                      _1554_recIdents = _out870;
                      Dafny.ISequence<Dafny.Rune> _1555_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out871;
                      _out871 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _1555_rhsType = _out871;
                      Dafny.ISequence<Dafny.Rune> _1556_uneraseFn;
                      _1556_uneraseFn = ((_1552_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1555_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1556_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1551_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1552_recOwned;
                      isErased = false;
                      readIdents = _1554_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out872;
                      bool _out873;
                      bool _out874;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1550_b), _1550_b, _699_toTpe), selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                      s = _out872;
                      isOwned = _out873;
                      isErased = _out874;
                      readIdents = _out875;
                    }
                  }
                }
              } else if (_source50.is_Nullable) {
                DAST._IType _1557___mcc_h829 = _source50.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1558_recursiveGen;
                  bool _1559_recOwned;
                  bool _1560_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1561_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out876;
                  bool _out877;
                  bool _out878;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                  _1558_recursiveGen = _out876;
                  _1559_recOwned = _out877;
                  _1560_recErased = _out878;
                  _1561_recIdents = _out879;
                  if (!(_1559_recOwned)) {
                    _1558_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1558_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1558_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1560_recErased;
                  readIdents = _1561_recIdents;
                }
              } else if (_source50.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1562___mcc_h831 = _source50.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1563_recursiveGen;
                  bool _1564_recOwned;
                  bool _1565_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1566_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out880;
                  bool _out881;
                  bool _out882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                  _1563_recursiveGen = _out880;
                  _1564_recOwned = _out881;
                  _1565_recErased = _out882;
                  _1566_recIdents = _out883;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1563_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1564_recOwned;
                  isErased = _1565_recErased;
                  readIdents = _1566_recIdents;
                }
              } else if (_source50.is_Array) {
                DAST._IType _1567___mcc_h833 = _source50.dtor_element;
                BigInteger _1568___mcc_h834 = _source50.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1569_recursiveGen;
                  bool _1570_recOwned;
                  bool _1571_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1572_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out884;
                  bool _out885;
                  bool _out886;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out887;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out884, out _out885, out _out886, out _out887);
                  _1569_recursiveGen = _out884;
                  _1570_recOwned = _out885;
                  _1571_recErased = _out886;
                  _1572_recIdents = _out887;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1569_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1570_recOwned;
                  isErased = _1571_recErased;
                  readIdents = _1572_recIdents;
                }
              } else if (_source50.is_Seq) {
                DAST._IType _1573___mcc_h837 = _source50.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1574_recursiveGen;
                  bool _1575_recOwned;
                  bool _1576_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1577_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out888;
                  bool _out889;
                  bool _out890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out891;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out888, out _out889, out _out890, out _out891);
                  _1574_recursiveGen = _out888;
                  _1575_recOwned = _out889;
                  _1576_recErased = _out890;
                  _1577_recIdents = _out891;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1574_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1575_recOwned;
                  isErased = _1576_recErased;
                  readIdents = _1577_recIdents;
                }
              } else if (_source50.is_Set) {
                DAST._IType _1578___mcc_h839 = _source50.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1579_recursiveGen;
                  bool _1580_recOwned;
                  bool _1581_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1582_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out892;
                  bool _out893;
                  bool _out894;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out895;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out892, out _out893, out _out894, out _out895);
                  _1579_recursiveGen = _out892;
                  _1580_recOwned = _out893;
                  _1581_recErased = _out894;
                  _1582_recIdents = _out895;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1579_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1580_recOwned;
                  isErased = _1581_recErased;
                  readIdents = _1582_recIdents;
                }
              } else if (_source50.is_Multiset) {
                DAST._IType _1583___mcc_h841 = _source50.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1584_recursiveGen;
                  bool _1585_recOwned;
                  bool _1586_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1587_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out896;
                  bool _out897;
                  bool _out898;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out899;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out896, out _out897, out _out898, out _out899);
                  _1584_recursiveGen = _out896;
                  _1585_recOwned = _out897;
                  _1586_recErased = _out898;
                  _1587_recIdents = _out899;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1584_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1585_recOwned;
                  isErased = _1586_recErased;
                  readIdents = _1587_recIdents;
                }
              } else if (_source50.is_Map) {
                DAST._IType _1588___mcc_h843 = _source50.dtor_key;
                DAST._IType _1589___mcc_h844 = _source50.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1590_recursiveGen;
                  bool _1591_recOwned;
                  bool _1592_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1593_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out900;
                  bool _out901;
                  bool _out902;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out900, out _out901, out _out902, out _out903);
                  _1590_recursiveGen = _out900;
                  _1591_recOwned = _out901;
                  _1592_recErased = _out902;
                  _1593_recIdents = _out903;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1590_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1591_recOwned;
                  isErased = _1592_recErased;
                  readIdents = _1593_recIdents;
                }
              } else if (_source50.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1594___mcc_h847 = _source50.dtor_args;
                DAST._IType _1595___mcc_h848 = _source50.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1596_recursiveGen;
                  bool _1597_recOwned;
                  bool _1598_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1599_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out904;
                  bool _out905;
                  bool _out906;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out907;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out904, out _out905, out _out906, out _out907);
                  _1596_recursiveGen = _out904;
                  _1597_recOwned = _out905;
                  _1598_recErased = _out906;
                  _1599_recIdents = _out907;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1596_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1597_recOwned;
                  isErased = _1598_recErased;
                  readIdents = _1599_recIdents;
                }
              } else if (_source50.is_Primitive) {
                DAST._IPrimitive _1600___mcc_h851 = _source50.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1601_recursiveGen;
                  bool _1602_recOwned;
                  bool _1603_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1604_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out908;
                  bool _out909;
                  bool _out910;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out911;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out908, out _out909, out _out910, out _out911);
                  _1601_recursiveGen = _out908;
                  _1602_recOwned = _out909;
                  _1603_recErased = _out910;
                  _1604_recIdents = _out911;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1601_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1602_recOwned;
                  isErased = _1603_recErased;
                  readIdents = _1604_recIdents;
                }
              } else if (_source50.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1605___mcc_h853 = _source50.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1606_recursiveGen;
                  bool _1607_recOwned;
                  bool _1608_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1609_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out912;
                  bool _out913;
                  bool _out914;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out915;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out912, out _out913, out _out914, out _out915);
                  _1606_recursiveGen = _out912;
                  _1607_recOwned = _out913;
                  _1608_recErased = _out914;
                  _1609_recIdents = _out915;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1606_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1607_recOwned;
                  isErased = _1608_recErased;
                  readIdents = _1609_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1610___mcc_h855 = _source50.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1611_recursiveGen;
                  bool _1612_recOwned;
                  bool _1613_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1614_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out916;
                  bool _out917;
                  bool _out918;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out919;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out916, out _out917, out _out918, out _out919);
                  _1611_recursiveGen = _out916;
                  _1612_recOwned = _out917;
                  _1613_recErased = _out918;
                  _1614_recIdents = _out919;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1611_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1612_recOwned;
                  isErased = _1613_recErased;
                  readIdents = _1614_recIdents;
                }
              }
            } else if (_source28.is_Primitive) {
              DAST._IPrimitive _1615___mcc_h857 = _source28.dtor_Primitive_a0;
              DAST._IPrimitive _source52 = _1615___mcc_h857;
              if (_source52.is_Int) {
                DAST._IType _source53 = _707___mcc_h306;
                if (_source53.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1616___mcc_h861 = _source53.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1617___mcc_h862 = _source53.dtor_typeArgs;
                  DAST._IResolvedType _1618___mcc_h863 = _source53.dtor_resolved;
                  DAST._IResolvedType _source54 = _1618___mcc_h863;
                  if (_source54.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1619___mcc_h867 = _source54.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1620_recursiveGen;
                      bool _1621_recOwned;
                      bool _1622_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1623_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out920;
                      bool _out921;
                      bool _out922;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out920, out _out921, out _out922, out _out923);
                      _1620_recursiveGen = _out920;
                      _1621_recOwned = _out921;
                      _1622_recErased = _out922;
                      _1623_recIdents = _out923;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1620_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1621_recOwned;
                      isErased = _1622_recErased;
                      readIdents = _1623_recIdents;
                    }
                  } else if (_source54.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1624___mcc_h869 = _source54.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1625_recursiveGen;
                      bool _1626_recOwned;
                      bool _1627_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1628_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out924;
                      bool _out925;
                      bool _out926;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out927;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out924, out _out925, out _out926, out _out927);
                      _1625_recursiveGen = _out924;
                      _1626_recOwned = _out925;
                      _1627_recErased = _out926;
                      _1628_recIdents = _out927;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1626_recOwned;
                      isErased = _1627_recErased;
                      readIdents = _1628_recIdents;
                    }
                  } else {
                    DAST._IType _1629___mcc_h871 = _source54.dtor_Newtype_a0;
                    DAST._IType _1630_b = _1629___mcc_h871;
                    {
                      if (object.Equals(_700_fromTpe, _1630_b)) {
                        Dafny.ISequence<Dafny.Rune> _1631_recursiveGen;
                        bool _1632_recOwned;
                        bool _1633_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1634_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out928;
                        bool _out929;
                        bool _out930;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out931;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out928, out _out929, out _out930, out _out931);
                        _1631_recursiveGen = _out928;
                        _1632_recOwned = _out929;
                        _1633_recErased = _out930;
                        _1634_recIdents = _out931;
                        Dafny.ISequence<Dafny.Rune> _1635_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out932;
                        _out932 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                        _1635_rhsType = _out932;
                        Dafny.ISequence<Dafny.Rune> _1636_uneraseFn;
                        _1636_uneraseFn = ((_1632_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1635_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1636_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1631_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1632_recOwned;
                        isErased = false;
                        readIdents = _1634_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out933;
                        bool _out934;
                        bool _out935;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1630_b), _1630_b, _699_toTpe), selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                        s = _out933;
                        isOwned = _out934;
                        isErased = _out935;
                        readIdents = _out936;
                      }
                    }
                  }
                } else if (_source53.is_Nullable) {
                  DAST._IType _1637___mcc_h873 = _source53.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1638_recursiveGen;
                    bool _1639_recOwned;
                    bool _1640_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1641_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out937;
                    bool _out938;
                    bool _out939;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                    _1638_recursiveGen = _out937;
                    _1639_recOwned = _out938;
                    _1640_recErased = _out939;
                    _1641_recIdents = _out940;
                    if (!(_1639_recOwned)) {
                      _1638_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1638_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1638_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1640_recErased;
                    readIdents = _1641_recIdents;
                  }
                } else if (_source53.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1642___mcc_h875 = _source53.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1643_recursiveGen;
                    bool _1644_recOwned;
                    bool _1645_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1646_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out941;
                    bool _out942;
                    bool _out943;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                    _1643_recursiveGen = _out941;
                    _1644_recOwned = _out942;
                    _1645_recErased = _out943;
                    _1646_recIdents = _out944;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1643_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1644_recOwned;
                    isErased = _1645_recErased;
                    readIdents = _1646_recIdents;
                  }
                } else if (_source53.is_Array) {
                  DAST._IType _1647___mcc_h877 = _source53.dtor_element;
                  BigInteger _1648___mcc_h878 = _source53.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1649_recursiveGen;
                    bool _1650_recOwned;
                    bool _1651_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1652_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out945;
                    bool _out946;
                    bool _out947;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out948;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out945, out _out946, out _out947, out _out948);
                    _1649_recursiveGen = _out945;
                    _1650_recOwned = _out946;
                    _1651_recErased = _out947;
                    _1652_recIdents = _out948;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1649_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1650_recOwned;
                    isErased = _1651_recErased;
                    readIdents = _1652_recIdents;
                  }
                } else if (_source53.is_Seq) {
                  DAST._IType _1653___mcc_h881 = _source53.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1654_recursiveGen;
                    bool _1655_recOwned;
                    bool _1656_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1657_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out949;
                    bool _out950;
                    bool _out951;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out952;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out949, out _out950, out _out951, out _out952);
                    _1654_recursiveGen = _out949;
                    _1655_recOwned = _out950;
                    _1656_recErased = _out951;
                    _1657_recIdents = _out952;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1654_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1655_recOwned;
                    isErased = _1656_recErased;
                    readIdents = _1657_recIdents;
                  }
                } else if (_source53.is_Set) {
                  DAST._IType _1658___mcc_h883 = _source53.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1659_recursiveGen;
                    bool _1660_recOwned;
                    bool _1661_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1662_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out953;
                    bool _out954;
                    bool _out955;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out956;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out953, out _out954, out _out955, out _out956);
                    _1659_recursiveGen = _out953;
                    _1660_recOwned = _out954;
                    _1661_recErased = _out955;
                    _1662_recIdents = _out956;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1659_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1660_recOwned;
                    isErased = _1661_recErased;
                    readIdents = _1662_recIdents;
                  }
                } else if (_source53.is_Multiset) {
                  DAST._IType _1663___mcc_h885 = _source53.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1664_recursiveGen;
                    bool _1665_recOwned;
                    bool _1666_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1667_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out957;
                    bool _out958;
                    bool _out959;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out960;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out957, out _out958, out _out959, out _out960);
                    _1664_recursiveGen = _out957;
                    _1665_recOwned = _out958;
                    _1666_recErased = _out959;
                    _1667_recIdents = _out960;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1664_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1665_recOwned;
                    isErased = _1666_recErased;
                    readIdents = _1667_recIdents;
                  }
                } else if (_source53.is_Map) {
                  DAST._IType _1668___mcc_h887 = _source53.dtor_key;
                  DAST._IType _1669___mcc_h888 = _source53.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1670_recursiveGen;
                    bool _1671_recOwned;
                    bool _1672_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1673_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out961;
                    bool _out962;
                    bool _out963;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out961, out _out962, out _out963, out _out964);
                    _1670_recursiveGen = _out961;
                    _1671_recOwned = _out962;
                    _1672_recErased = _out963;
                    _1673_recIdents = _out964;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1670_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1671_recOwned;
                    isErased = _1672_recErased;
                    readIdents = _1673_recIdents;
                  }
                } else if (_source53.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1674___mcc_h891 = _source53.dtor_args;
                  DAST._IType _1675___mcc_h892 = _source53.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1676_recursiveGen;
                    bool _1677_recOwned;
                    bool _1678_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1679_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out965;
                    bool _out966;
                    bool _out967;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out968;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out965, out _out966, out _out967, out _out968);
                    _1676_recursiveGen = _out965;
                    _1677_recOwned = _out966;
                    _1678_recErased = _out967;
                    _1679_recIdents = _out968;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1676_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1677_recOwned;
                    isErased = _1678_recErased;
                    readIdents = _1679_recIdents;
                  }
                } else if (_source53.is_Primitive) {
                  DAST._IPrimitive _1680___mcc_h895 = _source53.dtor_Primitive_a0;
                  DAST._IPrimitive _source55 = _1680___mcc_h895;
                  if (_source55.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1681_recursiveGen;
                      bool _1682_recOwned;
                      bool _1683_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1684_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out969;
                      bool _out970;
                      bool _out971;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out972;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out969, out _out970, out _out971, out _out972);
                      _1681_recursiveGen = _out969;
                      _1682_recOwned = _out970;
                      _1683_recErased = _out971;
                      _1684_recIdents = _out972;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1681_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1682_recOwned;
                      isErased = _1683_recErased;
                      readIdents = _1684_recIdents;
                    }
                  } else if (_source55.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1685_recursiveGen;
                      bool _1686___v46;
                      bool _1687___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1688_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out973;
                      bool _out974;
                      bool _out975;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out976;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, true, out _out973, out _out974, out _out975, out _out976);
                      _1685_recursiveGen = _out973;
                      _1686___v46 = _out974;
                      _1687___v47 = _out975;
                      _1688_recIdents = _out976;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _1685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1688_recIdents;
                    }
                  } else if (_source55.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1689_recursiveGen;
                      bool _1690_recOwned;
                      bool _1691_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1692_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out977;
                      bool _out978;
                      bool _out979;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out980;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out977, out _out978, out _out979, out _out980);
                      _1689_recursiveGen = _out977;
                      _1690_recOwned = _out978;
                      _1691_recErased = _out979;
                      _1692_recIdents = _out980;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1689_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1690_recOwned;
                      isErased = _1691_recErased;
                      readIdents = _1692_recIdents;
                    }
                  } else if (_source55.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1693_recursiveGen;
                      bool _1694_recOwned;
                      bool _1695_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1696_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out981;
                      bool _out982;
                      bool _out983;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out981, out _out982, out _out983, out _out984);
                      _1693_recursiveGen = _out981;
                      _1694_recOwned = _out982;
                      _1695_recErased = _out983;
                      _1696_recIdents = _out984;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1693_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1694_recOwned;
                      isErased = _1695_recErased;
                      readIdents = _1696_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1697_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out985;
                      _out985 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _1697_rhsType = _out985;
                      Dafny.ISequence<Dafny.Rune> _1698_recursiveGen;
                      bool _1699___v56;
                      bool _1700___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1701_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, true, out _out986, out _out987, out _out988, out _out989);
                      _1698_recursiveGen = _out986;
                      _1699___v56 = _out987;
                      _1700___v57 = _out988;
                      _1701_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _1698_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1701_recIdents;
                    }
                  }
                } else if (_source53.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1702___mcc_h897 = _source53.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1703_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out990;
                    _out990 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                    _1703_rhsType = _out990;
                    Dafny.ISequence<Dafny.Rune> _1704_recursiveGen;
                    bool _1705___v51;
                    bool _1706___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1707_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out991;
                    bool _out992;
                    bool _out993;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, true, out _out991, out _out992, out _out993, out _out994);
                    _1704_recursiveGen = _out991;
                    _1705___v51 = _out992;
                    _1706___v52 = _out993;
                    _1707_recIdents = _out994;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1703_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _1704_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _1707_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1708___mcc_h899 = _source53.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1709_recursiveGen;
                    bool _1710_recOwned;
                    bool _1711_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1712_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out995;
                    bool _out996;
                    bool _out997;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out995, out _out996, out _out997, out _out998);
                    _1709_recursiveGen = _out995;
                    _1710_recOwned = _out996;
                    _1711_recErased = _out997;
                    _1712_recIdents = _out998;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1709_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1710_recOwned;
                    isErased = _1711_recErased;
                    readIdents = _1712_recIdents;
                  }
                }
              } else if (_source52.is_Real) {
                DAST._IType _source56 = _707___mcc_h306;
                if (_source56.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1713___mcc_h901 = _source56.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1714___mcc_h902 = _source56.dtor_typeArgs;
                  DAST._IResolvedType _1715___mcc_h903 = _source56.dtor_resolved;
                  DAST._IResolvedType _source57 = _1715___mcc_h903;
                  if (_source57.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1716___mcc_h907 = _source57.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1717_recursiveGen;
                      bool _1718_recOwned;
                      bool _1719_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1720_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out999;
                      bool _out1000;
                      bool _out1001;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out999, out _out1000, out _out1001, out _out1002);
                      _1717_recursiveGen = _out999;
                      _1718_recOwned = _out1000;
                      _1719_recErased = _out1001;
                      _1720_recIdents = _out1002;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1717_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1718_recOwned;
                      isErased = _1719_recErased;
                      readIdents = _1720_recIdents;
                    }
                  } else if (_source57.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1721___mcc_h909 = _source57.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1722_recursiveGen;
                      bool _1723_recOwned;
                      bool _1724_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1725_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1003;
                      bool _out1004;
                      bool _out1005;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1006;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1003, out _out1004, out _out1005, out _out1006);
                      _1722_recursiveGen = _out1003;
                      _1723_recOwned = _out1004;
                      _1724_recErased = _out1005;
                      _1725_recIdents = _out1006;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1722_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1723_recOwned;
                      isErased = _1724_recErased;
                      readIdents = _1725_recIdents;
                    }
                  } else {
                    DAST._IType _1726___mcc_h911 = _source57.dtor_Newtype_a0;
                    DAST._IType _1727_b = _1726___mcc_h911;
                    {
                      if (object.Equals(_700_fromTpe, _1727_b)) {
                        Dafny.ISequence<Dafny.Rune> _1728_recursiveGen;
                        bool _1729_recOwned;
                        bool _1730_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1731_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1007;
                        bool _out1008;
                        bool _out1009;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1007, out _out1008, out _out1009, out _out1010);
                        _1728_recursiveGen = _out1007;
                        _1729_recOwned = _out1008;
                        _1730_recErased = _out1009;
                        _1731_recIdents = _out1010;
                        Dafny.ISequence<Dafny.Rune> _1732_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1011;
                        _out1011 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                        _1732_rhsType = _out1011;
                        Dafny.ISequence<Dafny.Rune> _1733_uneraseFn;
                        _1733_uneraseFn = ((_1729_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1732_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1733_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1728_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1729_recOwned;
                        isErased = false;
                        readIdents = _1731_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1012;
                        bool _out1013;
                        bool _out1014;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1727_b), _1727_b, _699_toTpe), selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                        s = _out1012;
                        isOwned = _out1013;
                        isErased = _out1014;
                        readIdents = _out1015;
                      }
                    }
                  }
                } else if (_source56.is_Nullable) {
                  DAST._IType _1734___mcc_h913 = _source56.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1735_recursiveGen;
                    bool _1736_recOwned;
                    bool _1737_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1738_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1016;
                    bool _out1017;
                    bool _out1018;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                    _1735_recursiveGen = _out1016;
                    _1736_recOwned = _out1017;
                    _1737_recErased = _out1018;
                    _1738_recIdents = _out1019;
                    if (!(_1736_recOwned)) {
                      _1735_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1735_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1735_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1737_recErased;
                    readIdents = _1738_recIdents;
                  }
                } else if (_source56.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1739___mcc_h915 = _source56.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1740_recursiveGen;
                    bool _1741_recOwned;
                    bool _1742_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1743_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1020;
                    bool _out1021;
                    bool _out1022;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1023;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1020, out _out1021, out _out1022, out _out1023);
                    _1740_recursiveGen = _out1020;
                    _1741_recOwned = _out1021;
                    _1742_recErased = _out1022;
                    _1743_recIdents = _out1023;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1740_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1741_recOwned;
                    isErased = _1742_recErased;
                    readIdents = _1743_recIdents;
                  }
                } else if (_source56.is_Array) {
                  DAST._IType _1744___mcc_h917 = _source56.dtor_element;
                  BigInteger _1745___mcc_h918 = _source56.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1746_recursiveGen;
                    bool _1747_recOwned;
                    bool _1748_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1749_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1024;
                    bool _out1025;
                    bool _out1026;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1027;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1024, out _out1025, out _out1026, out _out1027);
                    _1746_recursiveGen = _out1024;
                    _1747_recOwned = _out1025;
                    _1748_recErased = _out1026;
                    _1749_recIdents = _out1027;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1746_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1747_recOwned;
                    isErased = _1748_recErased;
                    readIdents = _1749_recIdents;
                  }
                } else if (_source56.is_Seq) {
                  DAST._IType _1750___mcc_h921 = _source56.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1751_recursiveGen;
                    bool _1752_recOwned;
                    bool _1753_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1754_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1028;
                    bool _out1029;
                    bool _out1030;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1031;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1028, out _out1029, out _out1030, out _out1031);
                    _1751_recursiveGen = _out1028;
                    _1752_recOwned = _out1029;
                    _1753_recErased = _out1030;
                    _1754_recIdents = _out1031;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1751_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1752_recOwned;
                    isErased = _1753_recErased;
                    readIdents = _1754_recIdents;
                  }
                } else if (_source56.is_Set) {
                  DAST._IType _1755___mcc_h923 = _source56.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1756_recursiveGen;
                    bool _1757_recOwned;
                    bool _1758_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1759_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1032;
                    bool _out1033;
                    bool _out1034;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1032, out _out1033, out _out1034, out _out1035);
                    _1756_recursiveGen = _out1032;
                    _1757_recOwned = _out1033;
                    _1758_recErased = _out1034;
                    _1759_recIdents = _out1035;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1756_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1757_recOwned;
                    isErased = _1758_recErased;
                    readIdents = _1759_recIdents;
                  }
                } else if (_source56.is_Multiset) {
                  DAST._IType _1760___mcc_h925 = _source56.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1761_recursiveGen;
                    bool _1762_recOwned;
                    bool _1763_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1764_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1036;
                    bool _out1037;
                    bool _out1038;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1039;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1036, out _out1037, out _out1038, out _out1039);
                    _1761_recursiveGen = _out1036;
                    _1762_recOwned = _out1037;
                    _1763_recErased = _out1038;
                    _1764_recIdents = _out1039;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1761_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1762_recOwned;
                    isErased = _1763_recErased;
                    readIdents = _1764_recIdents;
                  }
                } else if (_source56.is_Map) {
                  DAST._IType _1765___mcc_h927 = _source56.dtor_key;
                  DAST._IType _1766___mcc_h928 = _source56.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1767_recursiveGen;
                    bool _1768_recOwned;
                    bool _1769_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1770_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1040;
                    bool _out1041;
                    bool _out1042;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1040, out _out1041, out _out1042, out _out1043);
                    _1767_recursiveGen = _out1040;
                    _1768_recOwned = _out1041;
                    _1769_recErased = _out1042;
                    _1770_recIdents = _out1043;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1767_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1768_recOwned;
                    isErased = _1769_recErased;
                    readIdents = _1770_recIdents;
                  }
                } else if (_source56.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1771___mcc_h931 = _source56.dtor_args;
                  DAST._IType _1772___mcc_h932 = _source56.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1773_recursiveGen;
                    bool _1774_recOwned;
                    bool _1775_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1776_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1044;
                    bool _out1045;
                    bool _out1046;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1047;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1044, out _out1045, out _out1046, out _out1047);
                    _1773_recursiveGen = _out1044;
                    _1774_recOwned = _out1045;
                    _1775_recErased = _out1046;
                    _1776_recIdents = _out1047;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1774_recOwned;
                    isErased = _1775_recErased;
                    readIdents = _1776_recIdents;
                  }
                } else if (_source56.is_Primitive) {
                  DAST._IPrimitive _1777___mcc_h935 = _source56.dtor_Primitive_a0;
                  DAST._IPrimitive _source58 = _1777___mcc_h935;
                  if (_source58.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1778_recursiveGen;
                      bool _1779___v48;
                      bool _1780___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1781_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1048;
                      bool _out1049;
                      bool _out1050;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1051;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, false, out _out1048, out _out1049, out _out1050, out _out1051);
                      _1778_recursiveGen = _out1048;
                      _1779___v48 = _out1049;
                      _1780___v49 = _out1050;
                      _1781_recIdents = _out1051;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _1778_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _1781_recIdents;
                    }
                  } else if (_source58.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1782_recursiveGen;
                      bool _1783_recOwned;
                      bool _1784_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1785_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1052;
                      bool _out1053;
                      bool _out1054;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1052, out _out1053, out _out1054, out _out1055);
                      _1782_recursiveGen = _out1052;
                      _1783_recOwned = _out1053;
                      _1784_recErased = _out1054;
                      _1785_recIdents = _out1055;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1782_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1783_recOwned;
                      isErased = _1784_recErased;
                      readIdents = _1785_recIdents;
                    }
                  } else if (_source58.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1786_recursiveGen;
                      bool _1787_recOwned;
                      bool _1788_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1789_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1056;
                      bool _out1057;
                      bool _out1058;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1059;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1056, out _out1057, out _out1058, out _out1059);
                      _1786_recursiveGen = _out1056;
                      _1787_recOwned = _out1057;
                      _1788_recErased = _out1058;
                      _1789_recIdents = _out1059;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1786_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1787_recOwned;
                      isErased = _1788_recErased;
                      readIdents = _1789_recIdents;
                    }
                  } else if (_source58.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _1790_recursiveGen;
                      bool _1791_recOwned;
                      bool _1792_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1793_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1060;
                      bool _out1061;
                      bool _out1062;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1063;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1060, out _out1061, out _out1062, out _out1063);
                      _1790_recursiveGen = _out1060;
                      _1791_recOwned = _out1061;
                      _1792_recErased = _out1062;
                      _1793_recIdents = _out1063;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1790_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1791_recOwned;
                      isErased = _1792_recErased;
                      readIdents = _1793_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _1794_recursiveGen;
                      bool _1795_recOwned;
                      bool _1796_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1797_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1064;
                      bool _out1065;
                      bool _out1066;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1067;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1064, out _out1065, out _out1066, out _out1067);
                      _1794_recursiveGen = _out1064;
                      _1795_recOwned = _out1065;
                      _1796_recErased = _out1066;
                      _1797_recIdents = _out1067;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1794_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1795_recOwned;
                      isErased = _1796_recErased;
                      readIdents = _1797_recIdents;
                    }
                  }
                } else if (_source56.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1798___mcc_h937 = _source56.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1799_recursiveGen;
                    bool _1800_recOwned;
                    bool _1801_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1802_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1068;
                    bool _out1069;
                    bool _out1070;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1071;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1068, out _out1069, out _out1070, out _out1071);
                    _1799_recursiveGen = _out1068;
                    _1800_recOwned = _out1069;
                    _1801_recErased = _out1070;
                    _1802_recIdents = _out1071;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1799_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1800_recOwned;
                    isErased = _1801_recErased;
                    readIdents = _1802_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1803___mcc_h939 = _source56.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1804_recursiveGen;
                    bool _1805_recOwned;
                    bool _1806_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1807_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1072;
                    bool _out1073;
                    bool _out1074;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1072, out _out1073, out _out1074, out _out1075);
                    _1804_recursiveGen = _out1072;
                    _1805_recOwned = _out1073;
                    _1806_recErased = _out1074;
                    _1807_recIdents = _out1075;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1804_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1805_recOwned;
                    isErased = _1806_recErased;
                    readIdents = _1807_recIdents;
                  }
                }
              } else if (_source52.is_String) {
                DAST._IType _source59 = _707___mcc_h306;
                if (_source59.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1808___mcc_h941 = _source59.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1809___mcc_h942 = _source59.dtor_typeArgs;
                  DAST._IResolvedType _1810___mcc_h943 = _source59.dtor_resolved;
                  DAST._IResolvedType _source60 = _1810___mcc_h943;
                  if (_source60.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1811___mcc_h947 = _source60.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1812_recursiveGen;
                      bool _1813_recOwned;
                      bool _1814_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1815_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1076;
                      bool _out1077;
                      bool _out1078;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1079;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1076, out _out1077, out _out1078, out _out1079);
                      _1812_recursiveGen = _out1076;
                      _1813_recOwned = _out1077;
                      _1814_recErased = _out1078;
                      _1815_recIdents = _out1079;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1812_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1813_recOwned;
                      isErased = _1814_recErased;
                      readIdents = _1815_recIdents;
                    }
                  } else if (_source60.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1816___mcc_h949 = _source60.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1817_recursiveGen;
                      bool _1818_recOwned;
                      bool _1819_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1820_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1080;
                      bool _out1081;
                      bool _out1082;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1083;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1080, out _out1081, out _out1082, out _out1083);
                      _1817_recursiveGen = _out1080;
                      _1818_recOwned = _out1081;
                      _1819_recErased = _out1082;
                      _1820_recIdents = _out1083;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1817_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1818_recOwned;
                      isErased = _1819_recErased;
                      readIdents = _1820_recIdents;
                    }
                  } else {
                    DAST._IType _1821___mcc_h951 = _source60.dtor_Newtype_a0;
                    DAST._IType _1822_b = _1821___mcc_h951;
                    {
                      if (object.Equals(_700_fromTpe, _1822_b)) {
                        Dafny.ISequence<Dafny.Rune> _1823_recursiveGen;
                        bool _1824_recOwned;
                        bool _1825_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1826_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1084;
                        bool _out1085;
                        bool _out1086;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1087;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1084, out _out1085, out _out1086, out _out1087);
                        _1823_recursiveGen = _out1084;
                        _1824_recOwned = _out1085;
                        _1825_recErased = _out1086;
                        _1826_recIdents = _out1087;
                        Dafny.ISequence<Dafny.Rune> _1827_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1088;
                        _out1088 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                        _1827_rhsType = _out1088;
                        Dafny.ISequence<Dafny.Rune> _1828_uneraseFn;
                        _1828_uneraseFn = ((_1824_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1827_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1828_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1823_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1824_recOwned;
                        isErased = false;
                        readIdents = _1826_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1089;
                        bool _out1090;
                        bool _out1091;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1822_b), _1822_b, _699_toTpe), selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                        s = _out1089;
                        isOwned = _out1090;
                        isErased = _out1091;
                        readIdents = _out1092;
                      }
                    }
                  }
                } else if (_source59.is_Nullable) {
                  DAST._IType _1829___mcc_h953 = _source59.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1830_recursiveGen;
                    bool _1831_recOwned;
                    bool _1832_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1833_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1093;
                    bool _out1094;
                    bool _out1095;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                    _1830_recursiveGen = _out1093;
                    _1831_recOwned = _out1094;
                    _1832_recErased = _out1095;
                    _1833_recIdents = _out1096;
                    if (!(_1831_recOwned)) {
                      _1830_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1830_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1830_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1832_recErased;
                    readIdents = _1833_recIdents;
                  }
                } else if (_source59.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1834___mcc_h955 = _source59.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1835_recursiveGen;
                    bool _1836_recOwned;
                    bool _1837_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1838_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1097;
                    bool _out1098;
                    bool _out1099;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                    _1835_recursiveGen = _out1097;
                    _1836_recOwned = _out1098;
                    _1837_recErased = _out1099;
                    _1838_recIdents = _out1100;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1835_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1836_recOwned;
                    isErased = _1837_recErased;
                    readIdents = _1838_recIdents;
                  }
                } else if (_source59.is_Array) {
                  DAST._IType _1839___mcc_h957 = _source59.dtor_element;
                  BigInteger _1840___mcc_h958 = _source59.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1841_recursiveGen;
                    bool _1842_recOwned;
                    bool _1843_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1844_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1101;
                    bool _out1102;
                    bool _out1103;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1104;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1101, out _out1102, out _out1103, out _out1104);
                    _1841_recursiveGen = _out1101;
                    _1842_recOwned = _out1102;
                    _1843_recErased = _out1103;
                    _1844_recIdents = _out1104;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1841_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1842_recOwned;
                    isErased = _1843_recErased;
                    readIdents = _1844_recIdents;
                  }
                } else if (_source59.is_Seq) {
                  DAST._IType _1845___mcc_h961 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1846_recursiveGen;
                    bool _1847_recOwned;
                    bool _1848_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1849_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1105;
                    bool _out1106;
                    bool _out1107;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1108;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1105, out _out1106, out _out1107, out _out1108);
                    _1846_recursiveGen = _out1105;
                    _1847_recOwned = _out1106;
                    _1848_recErased = _out1107;
                    _1849_recIdents = _out1108;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1846_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1847_recOwned;
                    isErased = _1848_recErased;
                    readIdents = _1849_recIdents;
                  }
                } else if (_source59.is_Set) {
                  DAST._IType _1850___mcc_h963 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1851_recursiveGen;
                    bool _1852_recOwned;
                    bool _1853_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1854_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1109;
                    bool _out1110;
                    bool _out1111;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1112;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1109, out _out1110, out _out1111, out _out1112);
                    _1851_recursiveGen = _out1109;
                    _1852_recOwned = _out1110;
                    _1853_recErased = _out1111;
                    _1854_recIdents = _out1112;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1851_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1852_recOwned;
                    isErased = _1853_recErased;
                    readIdents = _1854_recIdents;
                  }
                } else if (_source59.is_Multiset) {
                  DAST._IType _1855___mcc_h965 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1856_recursiveGen;
                    bool _1857_recOwned;
                    bool _1858_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1859_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1113;
                    bool _out1114;
                    bool _out1115;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1116;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1113, out _out1114, out _out1115, out _out1116);
                    _1856_recursiveGen = _out1113;
                    _1857_recOwned = _out1114;
                    _1858_recErased = _out1115;
                    _1859_recIdents = _out1116;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1856_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1857_recOwned;
                    isErased = _1858_recErased;
                    readIdents = _1859_recIdents;
                  }
                } else if (_source59.is_Map) {
                  DAST._IType _1860___mcc_h967 = _source59.dtor_key;
                  DAST._IType _1861___mcc_h968 = _source59.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1862_recursiveGen;
                    bool _1863_recOwned;
                    bool _1864_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1865_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1117;
                    bool _out1118;
                    bool _out1119;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1117, out _out1118, out _out1119, out _out1120);
                    _1862_recursiveGen = _out1117;
                    _1863_recOwned = _out1118;
                    _1864_recErased = _out1119;
                    _1865_recIdents = _out1120;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1862_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1863_recOwned;
                    isErased = _1864_recErased;
                    readIdents = _1865_recIdents;
                  }
                } else if (_source59.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1866___mcc_h971 = _source59.dtor_args;
                  DAST._IType _1867___mcc_h972 = _source59.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1868_recursiveGen;
                    bool _1869_recOwned;
                    bool _1870_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1871_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1121;
                    bool _out1122;
                    bool _out1123;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1124;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1121, out _out1122, out _out1123, out _out1124);
                    _1868_recursiveGen = _out1121;
                    _1869_recOwned = _out1122;
                    _1870_recErased = _out1123;
                    _1871_recIdents = _out1124;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1868_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1869_recOwned;
                    isErased = _1870_recErased;
                    readIdents = _1871_recIdents;
                  }
                } else if (_source59.is_Primitive) {
                  DAST._IPrimitive _1872___mcc_h975 = _source59.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1873_recursiveGen;
                    bool _1874_recOwned;
                    bool _1875_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1876_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1125;
                    bool _out1126;
                    bool _out1127;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1125, out _out1126, out _out1127, out _out1128);
                    _1873_recursiveGen = _out1125;
                    _1874_recOwned = _out1126;
                    _1875_recErased = _out1127;
                    _1876_recIdents = _out1128;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1873_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1874_recOwned;
                    isErased = _1875_recErased;
                    readIdents = _1876_recIdents;
                  }
                } else if (_source59.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1877___mcc_h977 = _source59.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1878_recursiveGen;
                    bool _1879_recOwned;
                    bool _1880_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1881_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1129;
                    bool _out1130;
                    bool _out1131;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1132;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1129, out _out1130, out _out1131, out _out1132);
                    _1878_recursiveGen = _out1129;
                    _1879_recOwned = _out1130;
                    _1880_recErased = _out1131;
                    _1881_recIdents = _out1132;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1878_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1879_recOwned;
                    isErased = _1880_recErased;
                    readIdents = _1881_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1882___mcc_h979 = _source59.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1883_recursiveGen;
                    bool _1884_recOwned;
                    bool _1885_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1886_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1133;
                    bool _out1134;
                    bool _out1135;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1133, out _out1134, out _out1135, out _out1136);
                    _1883_recursiveGen = _out1133;
                    _1884_recOwned = _out1134;
                    _1885_recErased = _out1135;
                    _1886_recIdents = _out1136;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1883_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1884_recOwned;
                    isErased = _1885_recErased;
                    readIdents = _1886_recIdents;
                  }
                }
              } else if (_source52.is_Bool) {
                DAST._IType _source61 = _707___mcc_h306;
                if (_source61.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1887___mcc_h981 = _source61.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1888___mcc_h982 = _source61.dtor_typeArgs;
                  DAST._IResolvedType _1889___mcc_h983 = _source61.dtor_resolved;
                  DAST._IResolvedType _source62 = _1889___mcc_h983;
                  if (_source62.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1890___mcc_h987 = _source62.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1891_recursiveGen;
                      bool _1892_recOwned;
                      bool _1893_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1894_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1137;
                      bool _out1138;
                      bool _out1139;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1140;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1137, out _out1138, out _out1139, out _out1140);
                      _1891_recursiveGen = _out1137;
                      _1892_recOwned = _out1138;
                      _1893_recErased = _out1139;
                      _1894_recIdents = _out1140;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1891_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1892_recOwned;
                      isErased = _1893_recErased;
                      readIdents = _1894_recIdents;
                    }
                  } else if (_source62.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1895___mcc_h989 = _source62.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1896_recursiveGen;
                      bool _1897_recOwned;
                      bool _1898_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1899_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1141;
                      bool _out1142;
                      bool _out1143;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1144;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1141, out _out1142, out _out1143, out _out1144);
                      _1896_recursiveGen = _out1141;
                      _1897_recOwned = _out1142;
                      _1898_recErased = _out1143;
                      _1899_recIdents = _out1144;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1896_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1897_recOwned;
                      isErased = _1898_recErased;
                      readIdents = _1899_recIdents;
                    }
                  } else {
                    DAST._IType _1900___mcc_h991 = _source62.dtor_Newtype_a0;
                    DAST._IType _1901_b = _1900___mcc_h991;
                    {
                      if (object.Equals(_700_fromTpe, _1901_b)) {
                        Dafny.ISequence<Dafny.Rune> _1902_recursiveGen;
                        bool _1903_recOwned;
                        bool _1904_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1905_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1145;
                        bool _out1146;
                        bool _out1147;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1148;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1145, out _out1146, out _out1147, out _out1148);
                        _1902_recursiveGen = _out1145;
                        _1903_recOwned = _out1146;
                        _1904_recErased = _out1147;
                        _1905_recIdents = _out1148;
                        Dafny.ISequence<Dafny.Rune> _1906_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1149;
                        _out1149 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                        _1906_rhsType = _out1149;
                        Dafny.ISequence<Dafny.Rune> _1907_uneraseFn;
                        _1907_uneraseFn = ((_1903_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1906_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1907_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1902_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1903_recOwned;
                        isErased = false;
                        readIdents = _1905_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1150;
                        bool _out1151;
                        bool _out1152;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1901_b), _1901_b, _699_toTpe), selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                        s = _out1150;
                        isOwned = _out1151;
                        isErased = _out1152;
                        readIdents = _out1153;
                      }
                    }
                  }
                } else if (_source61.is_Nullable) {
                  DAST._IType _1908___mcc_h993 = _source61.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1909_recursiveGen;
                    bool _1910_recOwned;
                    bool _1911_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1912_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1154;
                    bool _out1155;
                    bool _out1156;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                    _1909_recursiveGen = _out1154;
                    _1910_recOwned = _out1155;
                    _1911_recErased = _out1156;
                    _1912_recIdents = _out1157;
                    if (!(_1910_recOwned)) {
                      _1909_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1909_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1909_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1911_recErased;
                    readIdents = _1912_recIdents;
                  }
                } else if (_source61.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1913___mcc_h995 = _source61.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1914_recursiveGen;
                    bool _1915_recOwned;
                    bool _1916_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1917_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1158;
                    bool _out1159;
                    bool _out1160;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                    _1914_recursiveGen = _out1158;
                    _1915_recOwned = _out1159;
                    _1916_recErased = _out1160;
                    _1917_recIdents = _out1161;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1914_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1915_recOwned;
                    isErased = _1916_recErased;
                    readIdents = _1917_recIdents;
                  }
                } else if (_source61.is_Array) {
                  DAST._IType _1918___mcc_h997 = _source61.dtor_element;
                  BigInteger _1919___mcc_h998 = _source61.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1920_recursiveGen;
                    bool _1921_recOwned;
                    bool _1922_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1923_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1162;
                    bool _out1163;
                    bool _out1164;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1165;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1162, out _out1163, out _out1164, out _out1165);
                    _1920_recursiveGen = _out1162;
                    _1921_recOwned = _out1163;
                    _1922_recErased = _out1164;
                    _1923_recIdents = _out1165;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1920_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1921_recOwned;
                    isErased = _1922_recErased;
                    readIdents = _1923_recIdents;
                  }
                } else if (_source61.is_Seq) {
                  DAST._IType _1924___mcc_h1001 = _source61.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1925_recursiveGen;
                    bool _1926_recOwned;
                    bool _1927_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1928_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1166;
                    bool _out1167;
                    bool _out1168;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1169;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1166, out _out1167, out _out1168, out _out1169);
                    _1925_recursiveGen = _out1166;
                    _1926_recOwned = _out1167;
                    _1927_recErased = _out1168;
                    _1928_recIdents = _out1169;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1925_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1926_recOwned;
                    isErased = _1927_recErased;
                    readIdents = _1928_recIdents;
                  }
                } else if (_source61.is_Set) {
                  DAST._IType _1929___mcc_h1003 = _source61.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1930_recursiveGen;
                    bool _1931_recOwned;
                    bool _1932_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1933_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1170;
                    bool _out1171;
                    bool _out1172;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1173;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1170, out _out1171, out _out1172, out _out1173);
                    _1930_recursiveGen = _out1170;
                    _1931_recOwned = _out1171;
                    _1932_recErased = _out1172;
                    _1933_recIdents = _out1173;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1931_recOwned;
                    isErased = _1932_recErased;
                    readIdents = _1933_recIdents;
                  }
                } else if (_source61.is_Multiset) {
                  DAST._IType _1934___mcc_h1005 = _source61.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1935_recursiveGen;
                    bool _1936_recOwned;
                    bool _1937_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1938_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1174;
                    bool _out1175;
                    bool _out1176;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1177;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1174, out _out1175, out _out1176, out _out1177);
                    _1935_recursiveGen = _out1174;
                    _1936_recOwned = _out1175;
                    _1937_recErased = _out1176;
                    _1938_recIdents = _out1177;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1936_recOwned;
                    isErased = _1937_recErased;
                    readIdents = _1938_recIdents;
                  }
                } else if (_source61.is_Map) {
                  DAST._IType _1939___mcc_h1007 = _source61.dtor_key;
                  DAST._IType _1940___mcc_h1008 = _source61.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1941_recursiveGen;
                    bool _1942_recOwned;
                    bool _1943_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1944_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1178;
                    bool _out1179;
                    bool _out1180;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1178, out _out1179, out _out1180, out _out1181);
                    _1941_recursiveGen = _out1178;
                    _1942_recOwned = _out1179;
                    _1943_recErased = _out1180;
                    _1944_recIdents = _out1181;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1941_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1942_recOwned;
                    isErased = _1943_recErased;
                    readIdents = _1944_recIdents;
                  }
                } else if (_source61.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1945___mcc_h1011 = _source61.dtor_args;
                  DAST._IType _1946___mcc_h1012 = _source61.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1947_recursiveGen;
                    bool _1948_recOwned;
                    bool _1949_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1950_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1182;
                    bool _out1183;
                    bool _out1184;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1185;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1182, out _out1183, out _out1184, out _out1185);
                    _1947_recursiveGen = _out1182;
                    _1948_recOwned = _out1183;
                    _1949_recErased = _out1184;
                    _1950_recIdents = _out1185;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1947_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1948_recOwned;
                    isErased = _1949_recErased;
                    readIdents = _1950_recIdents;
                  }
                } else if (_source61.is_Primitive) {
                  DAST._IPrimitive _1951___mcc_h1015 = _source61.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1952_recursiveGen;
                    bool _1953_recOwned;
                    bool _1954_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1955_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1186;
                    bool _out1187;
                    bool _out1188;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1189;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1186, out _out1187, out _out1188, out _out1189);
                    _1952_recursiveGen = _out1186;
                    _1953_recOwned = _out1187;
                    _1954_recErased = _out1188;
                    _1955_recIdents = _out1189;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1952_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1953_recOwned;
                    isErased = _1954_recErased;
                    readIdents = _1955_recIdents;
                  }
                } else if (_source61.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1956___mcc_h1017 = _source61.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1957_recursiveGen;
                    bool _1958_recOwned;
                    bool _1959_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1960_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1190;
                    bool _out1191;
                    bool _out1192;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1193;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1190, out _out1191, out _out1192, out _out1193);
                    _1957_recursiveGen = _out1190;
                    _1958_recOwned = _out1191;
                    _1959_recErased = _out1192;
                    _1960_recIdents = _out1193;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1958_recOwned;
                    isErased = _1959_recErased;
                    readIdents = _1960_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1961___mcc_h1019 = _source61.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1962_recursiveGen;
                    bool _1963_recOwned;
                    bool _1964_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1965_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1194;
                    bool _out1195;
                    bool _out1196;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1197;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1194, out _out1195, out _out1196, out _out1197);
                    _1962_recursiveGen = _out1194;
                    _1963_recOwned = _out1195;
                    _1964_recErased = _out1196;
                    _1965_recIdents = _out1197;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1963_recOwned;
                    isErased = _1964_recErased;
                    readIdents = _1965_recIdents;
                  }
                }
              } else {
                DAST._IType _source63 = _707___mcc_h306;
                if (_source63.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1966___mcc_h1021 = _source63.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1967___mcc_h1022 = _source63.dtor_typeArgs;
                  DAST._IResolvedType _1968___mcc_h1023 = _source63.dtor_resolved;
                  DAST._IResolvedType _source64 = _1968___mcc_h1023;
                  if (_source64.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1969___mcc_h1027 = _source64.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1970_recursiveGen;
                      bool _1971_recOwned;
                      bool _1972_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1973_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1198;
                      bool _out1199;
                      bool _out1200;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1201;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1198, out _out1199, out _out1200, out _out1201);
                      _1970_recursiveGen = _out1198;
                      _1971_recOwned = _out1199;
                      _1972_recErased = _out1200;
                      _1973_recIdents = _out1201;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1970_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1971_recOwned;
                      isErased = _1972_recErased;
                      readIdents = _1973_recIdents;
                    }
                  } else if (_source64.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1974___mcc_h1029 = _source64.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1975_recursiveGen;
                      bool _1976_recOwned;
                      bool _1977_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1978_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1202;
                      bool _out1203;
                      bool _out1204;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1205;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1202, out _out1203, out _out1204, out _out1205);
                      _1975_recursiveGen = _out1202;
                      _1976_recOwned = _out1203;
                      _1977_recErased = _out1204;
                      _1978_recIdents = _out1205;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1975_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1976_recOwned;
                      isErased = _1977_recErased;
                      readIdents = _1978_recIdents;
                    }
                  } else {
                    DAST._IType _1979___mcc_h1031 = _source64.dtor_Newtype_a0;
                    DAST._IType _1980_b = _1979___mcc_h1031;
                    {
                      if (object.Equals(_700_fromTpe, _1980_b)) {
                        Dafny.ISequence<Dafny.Rune> _1981_recursiveGen;
                        bool _1982_recOwned;
                        bool _1983_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1984_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1206;
                        bool _out1207;
                        bool _out1208;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1209;
                        DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1206, out _out1207, out _out1208, out _out1209);
                        _1981_recursiveGen = _out1206;
                        _1982_recOwned = _out1207;
                        _1983_recErased = _out1208;
                        _1984_recIdents = _out1209;
                        Dafny.ISequence<Dafny.Rune> _1985_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1210;
                        _out1210 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                        _1985_rhsType = _out1210;
                        Dafny.ISequence<Dafny.Rune> _1986_uneraseFn;
                        _1986_uneraseFn = ((_1982_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1985_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1986_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1981_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1982_recOwned;
                        isErased = false;
                        readIdents = _1984_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1211;
                        bool _out1212;
                        bool _out1213;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _1980_b), _1980_b, _699_toTpe), selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                        s = _out1211;
                        isOwned = _out1212;
                        isErased = _out1213;
                        readIdents = _out1214;
                      }
                    }
                  }
                } else if (_source63.is_Nullable) {
                  DAST._IType _1987___mcc_h1033 = _source63.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1988_recursiveGen;
                    bool _1989_recOwned;
                    bool _1990_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1991_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1215;
                    bool _out1216;
                    bool _out1217;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                    _1988_recursiveGen = _out1215;
                    _1989_recOwned = _out1216;
                    _1990_recErased = _out1217;
                    _1991_recIdents = _out1218;
                    if (!(_1989_recOwned)) {
                      _1988_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1988_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1988_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1990_recErased;
                    readIdents = _1991_recIdents;
                  }
                } else if (_source63.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1992___mcc_h1035 = _source63.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1993_recursiveGen;
                    bool _1994_recOwned;
                    bool _1995_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1996_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1219;
                    bool _out1220;
                    bool _out1221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                    _1993_recursiveGen = _out1219;
                    _1994_recOwned = _out1220;
                    _1995_recErased = _out1221;
                    _1996_recIdents = _out1222;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1993_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1994_recOwned;
                    isErased = _1995_recErased;
                    readIdents = _1996_recIdents;
                  }
                } else if (_source63.is_Array) {
                  DAST._IType _1997___mcc_h1037 = _source63.dtor_element;
                  BigInteger _1998___mcc_h1038 = _source63.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1999_recursiveGen;
                    bool _2000_recOwned;
                    bool _2001_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2002_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1223;
                    bool _out1224;
                    bool _out1225;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1226;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1223, out _out1224, out _out1225, out _out1226);
                    _1999_recursiveGen = _out1223;
                    _2000_recOwned = _out1224;
                    _2001_recErased = _out1225;
                    _2002_recIdents = _out1226;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1999_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2000_recOwned;
                    isErased = _2001_recErased;
                    readIdents = _2002_recIdents;
                  }
                } else if (_source63.is_Seq) {
                  DAST._IType _2003___mcc_h1041 = _source63.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2004_recursiveGen;
                    bool _2005_recOwned;
                    bool _2006_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2007_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1227;
                    bool _out1228;
                    bool _out1229;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1230;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1227, out _out1228, out _out1229, out _out1230);
                    _2004_recursiveGen = _out1227;
                    _2005_recOwned = _out1228;
                    _2006_recErased = _out1229;
                    _2007_recIdents = _out1230;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2004_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2005_recOwned;
                    isErased = _2006_recErased;
                    readIdents = _2007_recIdents;
                  }
                } else if (_source63.is_Set) {
                  DAST._IType _2008___mcc_h1043 = _source63.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2009_recursiveGen;
                    bool _2010_recOwned;
                    bool _2011_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2012_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1231;
                    bool _out1232;
                    bool _out1233;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1231, out _out1232, out _out1233, out _out1234);
                    _2009_recursiveGen = _out1231;
                    _2010_recOwned = _out1232;
                    _2011_recErased = _out1233;
                    _2012_recIdents = _out1234;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2009_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2010_recOwned;
                    isErased = _2011_recErased;
                    readIdents = _2012_recIdents;
                  }
                } else if (_source63.is_Multiset) {
                  DAST._IType _2013___mcc_h1045 = _source63.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2014_recursiveGen;
                    bool _2015_recOwned;
                    bool _2016_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2017_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1235;
                    bool _out1236;
                    bool _out1237;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1238;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1235, out _out1236, out _out1237, out _out1238);
                    _2014_recursiveGen = _out1235;
                    _2015_recOwned = _out1236;
                    _2016_recErased = _out1237;
                    _2017_recIdents = _out1238;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2014_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2015_recOwned;
                    isErased = _2016_recErased;
                    readIdents = _2017_recIdents;
                  }
                } else if (_source63.is_Map) {
                  DAST._IType _2018___mcc_h1047 = _source63.dtor_key;
                  DAST._IType _2019___mcc_h1048 = _source63.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2020_recursiveGen;
                    bool _2021_recOwned;
                    bool _2022_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2023_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1239;
                    bool _out1240;
                    bool _out1241;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1239, out _out1240, out _out1241, out _out1242);
                    _2020_recursiveGen = _out1239;
                    _2021_recOwned = _out1240;
                    _2022_recErased = _out1241;
                    _2023_recIdents = _out1242;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2020_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2021_recOwned;
                    isErased = _2022_recErased;
                    readIdents = _2023_recIdents;
                  }
                } else if (_source63.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2024___mcc_h1051 = _source63.dtor_args;
                  DAST._IType _2025___mcc_h1052 = _source63.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2026_recursiveGen;
                    bool _2027_recOwned;
                    bool _2028_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2029_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1243;
                    bool _out1244;
                    bool _out1245;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1246;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1243, out _out1244, out _out1245, out _out1246);
                    _2026_recursiveGen = _out1243;
                    _2027_recOwned = _out1244;
                    _2028_recErased = _out1245;
                    _2029_recIdents = _out1246;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2026_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2027_recOwned;
                    isErased = _2028_recErased;
                    readIdents = _2029_recIdents;
                  }
                } else if (_source63.is_Primitive) {
                  DAST._IPrimitive _2030___mcc_h1055 = _source63.dtor_Primitive_a0;
                  DAST._IPrimitive _source65 = _2030___mcc_h1055;
                  if (_source65.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2031_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1247;
                      _out1247 = DCOMP.COMP.GenType(_700_fromTpe, true, false);
                      _2031_rhsType = _out1247;
                      Dafny.ISequence<Dafny.Rune> _2032_recursiveGen;
                      bool _2033___v58;
                      bool _2034___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2035_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1248;
                      bool _out1249;
                      bool _out1250;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, true, out _out1248, out _out1249, out _out1250, out _out1251);
                      _2032_recursiveGen = _out1248;
                      _2033___v58 = _out1249;
                      _2034___v59 = _out1250;
                      _2035_recIdents = _out1251;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2032_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2035_recIdents;
                    }
                  } else if (_source65.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2036_recursiveGen;
                      bool _2037_recOwned;
                      bool _2038_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2039_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1252;
                      bool _out1253;
                      bool _out1254;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                      _2036_recursiveGen = _out1252;
                      _2037_recOwned = _out1253;
                      _2038_recErased = _out1254;
                      _2039_recIdents = _out1255;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2036_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2037_recOwned;
                      isErased = _2038_recErased;
                      readIdents = _2039_recIdents;
                    }
                  } else if (_source65.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2040_recursiveGen;
                      bool _2041_recOwned;
                      bool _2042_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2043_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1256;
                      bool _out1257;
                      bool _out1258;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                      _2040_recursiveGen = _out1256;
                      _2041_recOwned = _out1257;
                      _2042_recErased = _out1258;
                      _2043_recIdents = _out1259;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2040_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2041_recOwned;
                      isErased = _2042_recErased;
                      readIdents = _2043_recIdents;
                    }
                  } else if (_source65.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2044_recursiveGen;
                      bool _2045_recOwned;
                      bool _2046_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2047_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1260;
                      bool _out1261;
                      bool _out1262;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1263;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1260, out _out1261, out _out1262, out _out1263);
                      _2044_recursiveGen = _out1260;
                      _2045_recOwned = _out1261;
                      _2046_recErased = _out1262;
                      _2047_recIdents = _out1263;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2044_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2045_recOwned;
                      isErased = _2046_recErased;
                      readIdents = _2047_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2048_recursiveGen;
                      bool _2049_recOwned;
                      bool _2050_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2051_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1264;
                      bool _out1265;
                      bool _out1266;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1264, out _out1265, out _out1266, out _out1267);
                      _2048_recursiveGen = _out1264;
                      _2049_recOwned = _out1265;
                      _2050_recErased = _out1266;
                      _2051_recIdents = _out1267;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2048_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2049_recOwned;
                      isErased = _2050_recErased;
                      readIdents = _2051_recIdents;
                    }
                  }
                } else if (_source63.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2052___mcc_h1057 = _source63.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2053_recursiveGen;
                    bool _2054_recOwned;
                    bool _2055_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2056_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1268;
                    bool _out1269;
                    bool _out1270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1271;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1268, out _out1269, out _out1270, out _out1271);
                    _2053_recursiveGen = _out1268;
                    _2054_recOwned = _out1269;
                    _2055_recErased = _out1270;
                    _2056_recIdents = _out1271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2053_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2054_recOwned;
                    isErased = _2055_recErased;
                    readIdents = _2056_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2057___mcc_h1059 = _source63.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2058_recursiveGen;
                    bool _2059_recOwned;
                    bool _2060_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2061_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1272;
                    bool _out1273;
                    bool _out1274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1275;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1272, out _out1273, out _out1274, out _out1275);
                    _2058_recursiveGen = _out1272;
                    _2059_recOwned = _out1273;
                    _2060_recErased = _out1274;
                    _2061_recIdents = _out1275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2059_recOwned;
                    isErased = _2060_recErased;
                    readIdents = _2061_recIdents;
                  }
                }
              }
            } else if (_source28.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2062___mcc_h1061 = _source28.dtor_Passthrough_a0;
              DAST._IType _source66 = _707___mcc_h306;
              if (_source66.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2063___mcc_h1065 = _source66.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2064___mcc_h1066 = _source66.dtor_typeArgs;
                DAST._IResolvedType _2065___mcc_h1067 = _source66.dtor_resolved;
                DAST._IResolvedType _source67 = _2065___mcc_h1067;
                if (_source67.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2066___mcc_h1071 = _source67.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2067_recursiveGen;
                    bool _2068_recOwned;
                    bool _2069_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2070_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1276;
                    bool _out1277;
                    bool _out1278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1279;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1276, out _out1277, out _out1278, out _out1279);
                    _2067_recursiveGen = _out1276;
                    _2068_recOwned = _out1277;
                    _2069_recErased = _out1278;
                    _2070_recIdents = _out1279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2067_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2068_recOwned;
                    isErased = _2069_recErased;
                    readIdents = _2070_recIdents;
                  }
                } else if (_source67.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2071___mcc_h1073 = _source67.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2072_recursiveGen;
                    bool _2073_recOwned;
                    bool _2074_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2075_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1280;
                    bool _out1281;
                    bool _out1282;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1283;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1280, out _out1281, out _out1282, out _out1283);
                    _2072_recursiveGen = _out1280;
                    _2073_recOwned = _out1281;
                    _2074_recErased = _out1282;
                    _2075_recIdents = _out1283;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2072_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2073_recOwned;
                    isErased = _2074_recErased;
                    readIdents = _2075_recIdents;
                  }
                } else {
                  DAST._IType _2076___mcc_h1075 = _source67.dtor_Newtype_a0;
                  DAST._IType _2077_b = _2076___mcc_h1075;
                  {
                    if (object.Equals(_700_fromTpe, _2077_b)) {
                      Dafny.ISequence<Dafny.Rune> _2078_recursiveGen;
                      bool _2079_recOwned;
                      bool _2080_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2081_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1284;
                      bool _out1285;
                      bool _out1286;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1284, out _out1285, out _out1286, out _out1287);
                      _2078_recursiveGen = _out1284;
                      _2079_recOwned = _out1285;
                      _2080_recErased = _out1286;
                      _2081_recIdents = _out1287;
                      Dafny.ISequence<Dafny.Rune> _2082_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1288;
                      _out1288 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _2082_rhsType = _out1288;
                      Dafny.ISequence<Dafny.Rune> _2083_uneraseFn;
                      _2083_uneraseFn = ((_2079_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2082_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2083_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2078_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2079_recOwned;
                      isErased = false;
                      readIdents = _2081_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1289;
                      bool _out1290;
                      bool _out1291;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _2077_b), _2077_b, _699_toTpe), selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                      s = _out1289;
                      isOwned = _out1290;
                      isErased = _out1291;
                      readIdents = _out1292;
                    }
                  }
                }
              } else if (_source66.is_Nullable) {
                DAST._IType _2084___mcc_h1077 = _source66.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2085_recursiveGen;
                  bool _2086_recOwned;
                  bool _2087_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2088_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1293;
                  bool _out1294;
                  bool _out1295;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                  _2085_recursiveGen = _out1293;
                  _2086_recOwned = _out1294;
                  _2087_recErased = _out1295;
                  _2088_recIdents = _out1296;
                  if (!(_2086_recOwned)) {
                    _2085_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2085_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2085_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2087_recErased;
                  readIdents = _2088_recIdents;
                }
              } else if (_source66.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2089___mcc_h1079 = _source66.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2090_recursiveGen;
                  bool _2091_recOwned;
                  bool _2092_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2093_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1297;
                  bool _out1298;
                  bool _out1299;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                  _2090_recursiveGen = _out1297;
                  _2091_recOwned = _out1298;
                  _2092_recErased = _out1299;
                  _2093_recIdents = _out1300;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2090_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2091_recOwned;
                  isErased = _2092_recErased;
                  readIdents = _2093_recIdents;
                }
              } else if (_source66.is_Array) {
                DAST._IType _2094___mcc_h1081 = _source66.dtor_element;
                BigInteger _2095___mcc_h1082 = _source66.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2096_recursiveGen;
                  bool _2097_recOwned;
                  bool _2098_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2099_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1301;
                  bool _out1302;
                  bool _out1303;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1304;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1301, out _out1302, out _out1303, out _out1304);
                  _2096_recursiveGen = _out1301;
                  _2097_recOwned = _out1302;
                  _2098_recErased = _out1303;
                  _2099_recIdents = _out1304;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2097_recOwned;
                  isErased = _2098_recErased;
                  readIdents = _2099_recIdents;
                }
              } else if (_source66.is_Seq) {
                DAST._IType _2100___mcc_h1085 = _source66.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2101_recursiveGen;
                  bool _2102_recOwned;
                  bool _2103_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2104_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1305;
                  bool _out1306;
                  bool _out1307;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1305, out _out1306, out _out1307, out _out1308);
                  _2101_recursiveGen = _out1305;
                  _2102_recOwned = _out1306;
                  _2103_recErased = _out1307;
                  _2104_recIdents = _out1308;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2101_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2102_recOwned;
                  isErased = _2103_recErased;
                  readIdents = _2104_recIdents;
                }
              } else if (_source66.is_Set) {
                DAST._IType _2105___mcc_h1087 = _source66.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2106_recursiveGen;
                  bool _2107_recOwned;
                  bool _2108_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2109_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1309;
                  bool _out1310;
                  bool _out1311;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1309, out _out1310, out _out1311, out _out1312);
                  _2106_recursiveGen = _out1309;
                  _2107_recOwned = _out1310;
                  _2108_recErased = _out1311;
                  _2109_recIdents = _out1312;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2106_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2107_recOwned;
                  isErased = _2108_recErased;
                  readIdents = _2109_recIdents;
                }
              } else if (_source66.is_Multiset) {
                DAST._IType _2110___mcc_h1089 = _source66.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2111_recursiveGen;
                  bool _2112_recOwned;
                  bool _2113_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2114_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1313;
                  bool _out1314;
                  bool _out1315;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1316;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1313, out _out1314, out _out1315, out _out1316);
                  _2111_recursiveGen = _out1313;
                  _2112_recOwned = _out1314;
                  _2113_recErased = _out1315;
                  _2114_recIdents = _out1316;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2111_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2112_recOwned;
                  isErased = _2113_recErased;
                  readIdents = _2114_recIdents;
                }
              } else if (_source66.is_Map) {
                DAST._IType _2115___mcc_h1091 = _source66.dtor_key;
                DAST._IType _2116___mcc_h1092 = _source66.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2117_recursiveGen;
                  bool _2118_recOwned;
                  bool _2119_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2120_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1317;
                  bool _out1318;
                  bool _out1319;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1317, out _out1318, out _out1319, out _out1320);
                  _2117_recursiveGen = _out1317;
                  _2118_recOwned = _out1318;
                  _2119_recErased = _out1319;
                  _2120_recIdents = _out1320;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2117_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2118_recOwned;
                  isErased = _2119_recErased;
                  readIdents = _2120_recIdents;
                }
              } else if (_source66.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2121___mcc_h1095 = _source66.dtor_args;
                DAST._IType _2122___mcc_h1096 = _source66.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2123_recursiveGen;
                  bool _2124_recOwned;
                  bool _2125_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2126_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1321;
                  bool _out1322;
                  bool _out1323;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1324;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1321, out _out1322, out _out1323, out _out1324);
                  _2123_recursiveGen = _out1321;
                  _2124_recOwned = _out1322;
                  _2125_recErased = _out1323;
                  _2126_recIdents = _out1324;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2123_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2124_recOwned;
                  isErased = _2125_recErased;
                  readIdents = _2126_recIdents;
                }
              } else if (_source66.is_Primitive) {
                DAST._IPrimitive _2127___mcc_h1099 = _source66.dtor_Primitive_a0;
                DAST._IPrimitive _source68 = _2127___mcc_h1099;
                if (_source68.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2128_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1325;
                    _out1325 = DCOMP.COMP.GenType(_700_fromTpe, true, false);
                    _2128_rhsType = _out1325;
                    Dafny.ISequence<Dafny.Rune> _2129_recursiveGen;
                    bool _2130___v54;
                    bool _2131___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2132_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1326;
                    bool _out1327;
                    bool _out1328;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, true, out _out1326, out _out1327, out _out1328, out _out1329);
                    _2129_recursiveGen = _out1326;
                    _2130___v54 = _out1327;
                    _2131___v55 = _out1328;
                    _2132_recIdents = _out1329;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2129_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2132_recIdents;
                  }
                } else if (_source68.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2133_recursiveGen;
                    bool _2134_recOwned;
                    bool _2135_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2136_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1330;
                    bool _out1331;
                    bool _out1332;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                    _2133_recursiveGen = _out1330;
                    _2134_recOwned = _out1331;
                    _2135_recErased = _out1332;
                    _2136_recIdents = _out1333;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2133_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2134_recOwned;
                    isErased = _2135_recErased;
                    readIdents = _2136_recIdents;
                  }
                } else if (_source68.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2137_recursiveGen;
                    bool _2138_recOwned;
                    bool _2139_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2140_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1334;
                    bool _out1335;
                    bool _out1336;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                    _2137_recursiveGen = _out1334;
                    _2138_recOwned = _out1335;
                    _2139_recErased = _out1336;
                    _2140_recIdents = _out1337;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2137_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2138_recOwned;
                    isErased = _2139_recErased;
                    readIdents = _2140_recIdents;
                  }
                } else if (_source68.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2141_recursiveGen;
                    bool _2142_recOwned;
                    bool _2143_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2144_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1338;
                    bool _out1339;
                    bool _out1340;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1338, out _out1339, out _out1340, out _out1341);
                    _2141_recursiveGen = _out1338;
                    _2142_recOwned = _out1339;
                    _2143_recErased = _out1340;
                    _2144_recIdents = _out1341;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2141_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2142_recOwned;
                    isErased = _2143_recErased;
                    readIdents = _2144_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2145_recursiveGen;
                    bool _2146_recOwned;
                    bool _2147_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2148_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1342;
                    bool _out1343;
                    bool _out1344;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1345;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1342, out _out1343, out _out1344, out _out1345);
                    _2145_recursiveGen = _out1342;
                    _2146_recOwned = _out1343;
                    _2147_recErased = _out1344;
                    _2148_recIdents = _out1345;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2145_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2146_recOwned;
                    isErased = _2147_recErased;
                    readIdents = _2148_recIdents;
                  }
                }
              } else if (_source66.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2149___mcc_h1101 = _source66.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2150_recursiveGen;
                  bool _2151___v62;
                  bool _2152___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2153_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1346;
                  bool _out1347;
                  bool _out1348;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1349;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, true, out _out1346, out _out1347, out _out1348, out _out1349);
                  _2150_recursiveGen = _out1346;
                  _2151___v62 = _out1347;
                  _2152___v63 = _out1348;
                  _2153_recIdents = _out1349;
                  Dafny.ISequence<Dafny.Rune> _2154_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1350;
                  _out1350 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                  _2154_toTpeGen = _out1350;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2150_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2154_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2153_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2155___mcc_h1103 = _source66.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2156_recursiveGen;
                  bool _2157_recOwned;
                  bool _2158_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2159_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1351;
                  bool _out1352;
                  bool _out1353;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                  _2156_recursiveGen = _out1351;
                  _2157_recOwned = _out1352;
                  _2158_recErased = _out1353;
                  _2159_recIdents = _out1354;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2156_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2157_recOwned;
                  isErased = _2158_recErased;
                  readIdents = _2159_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2160___mcc_h1105 = _source28.dtor_TypeArg_a0;
              DAST._IType _source69 = _707___mcc_h306;
              if (_source69.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2161___mcc_h1109 = _source69.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2162___mcc_h1110 = _source69.dtor_typeArgs;
                DAST._IResolvedType _2163___mcc_h1111 = _source69.dtor_resolved;
                DAST._IResolvedType _source70 = _2163___mcc_h1111;
                if (_source70.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2164___mcc_h1115 = _source70.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2165_recursiveGen;
                    bool _2166_recOwned;
                    bool _2167_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2168_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1355;
                    bool _out1356;
                    bool _out1357;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                    _2165_recursiveGen = _out1355;
                    _2166_recOwned = _out1356;
                    _2167_recErased = _out1357;
                    _2168_recIdents = _out1358;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2165_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2166_recOwned;
                    isErased = _2167_recErased;
                    readIdents = _2168_recIdents;
                  }
                } else if (_source70.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2169___mcc_h1117 = _source70.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2170_recursiveGen;
                    bool _2171_recOwned;
                    bool _2172_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2173_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1359;
                    bool _out1360;
                    bool _out1361;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                    DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1359, out _out1360, out _out1361, out _out1362);
                    _2170_recursiveGen = _out1359;
                    _2171_recOwned = _out1360;
                    _2172_recErased = _out1361;
                    _2173_recIdents = _out1362;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2170_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2171_recOwned;
                    isErased = _2172_recErased;
                    readIdents = _2173_recIdents;
                  }
                } else {
                  DAST._IType _2174___mcc_h1119 = _source70.dtor_Newtype_a0;
                  DAST._IType _2175_b = _2174___mcc_h1119;
                  {
                    if (object.Equals(_700_fromTpe, _2175_b)) {
                      Dafny.ISequence<Dafny.Rune> _2176_recursiveGen;
                      bool _2177_recOwned;
                      bool _2178_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2179_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1363;
                      bool _out1364;
                      bool _out1365;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1366;
                      DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1363, out _out1364, out _out1365, out _out1366);
                      _2176_recursiveGen = _out1363;
                      _2177_recOwned = _out1364;
                      _2178_recErased = _out1365;
                      _2179_recIdents = _out1366;
                      Dafny.ISequence<Dafny.Rune> _2180_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1367;
                      _out1367 = DCOMP.COMP.GenType(_699_toTpe, true, false);
                      _2180_rhsType = _out1367;
                      Dafny.ISequence<Dafny.Rune> _2181_uneraseFn;
                      _2181_uneraseFn = ((_2177_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2180_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2181_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2176_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2177_recOwned;
                      isErased = false;
                      readIdents = _2179_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1368;
                      bool _out1369;
                      bool _out1370;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_701_expr, _700_fromTpe, _2175_b), _2175_b, _699_toTpe), selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                      s = _out1368;
                      isOwned = _out1369;
                      isErased = _out1370;
                      readIdents = _out1371;
                    }
                  }
                }
              } else if (_source69.is_Nullable) {
                DAST._IType _2182___mcc_h1121 = _source69.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2183_recursiveGen;
                  bool _2184_recOwned;
                  bool _2185_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2186_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1372;
                  bool _out1373;
                  bool _out1374;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                  _2183_recursiveGen = _out1372;
                  _2184_recOwned = _out1373;
                  _2185_recErased = _out1374;
                  _2186_recIdents = _out1375;
                  if (!(_2184_recOwned)) {
                    _2183_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2183_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2183_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2185_recErased;
                  readIdents = _2186_recIdents;
                }
              } else if (_source69.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2187___mcc_h1123 = _source69.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2188_recursiveGen;
                  bool _2189_recOwned;
                  bool _2190_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2191_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1376;
                  bool _out1377;
                  bool _out1378;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1376, out _out1377, out _out1378, out _out1379);
                  _2188_recursiveGen = _out1376;
                  _2189_recOwned = _out1377;
                  _2190_recErased = _out1378;
                  _2191_recIdents = _out1379;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2188_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2189_recOwned;
                  isErased = _2190_recErased;
                  readIdents = _2191_recIdents;
                }
              } else if (_source69.is_Array) {
                DAST._IType _2192___mcc_h1125 = _source69.dtor_element;
                BigInteger _2193___mcc_h1126 = _source69.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2194_recursiveGen;
                  bool _2195_recOwned;
                  bool _2196_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2197_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1380;
                  bool _out1381;
                  bool _out1382;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1383;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1380, out _out1381, out _out1382, out _out1383);
                  _2194_recursiveGen = _out1380;
                  _2195_recOwned = _out1381;
                  _2196_recErased = _out1382;
                  _2197_recIdents = _out1383;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2194_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2195_recOwned;
                  isErased = _2196_recErased;
                  readIdents = _2197_recIdents;
                }
              } else if (_source69.is_Seq) {
                DAST._IType _2198___mcc_h1129 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2199_recursiveGen;
                  bool _2200_recOwned;
                  bool _2201_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2202_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1384;
                  bool _out1385;
                  bool _out1386;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1387;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1384, out _out1385, out _out1386, out _out1387);
                  _2199_recursiveGen = _out1384;
                  _2200_recOwned = _out1385;
                  _2201_recErased = _out1386;
                  _2202_recIdents = _out1387;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2199_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2200_recOwned;
                  isErased = _2201_recErased;
                  readIdents = _2202_recIdents;
                }
              } else if (_source69.is_Set) {
                DAST._IType _2203___mcc_h1131 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2204_recursiveGen;
                  bool _2205_recOwned;
                  bool _2206_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2207_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1388;
                  bool _out1389;
                  bool _out1390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1388, out _out1389, out _out1390, out _out1391);
                  _2204_recursiveGen = _out1388;
                  _2205_recOwned = _out1389;
                  _2206_recErased = _out1390;
                  _2207_recIdents = _out1391;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2204_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2205_recOwned;
                  isErased = _2206_recErased;
                  readIdents = _2207_recIdents;
                }
              } else if (_source69.is_Multiset) {
                DAST._IType _2208___mcc_h1133 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2209_recursiveGen;
                  bool _2210_recOwned;
                  bool _2211_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2212_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1392;
                  bool _out1393;
                  bool _out1394;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1395;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1392, out _out1393, out _out1394, out _out1395);
                  _2209_recursiveGen = _out1392;
                  _2210_recOwned = _out1393;
                  _2211_recErased = _out1394;
                  _2212_recIdents = _out1395;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2209_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2210_recOwned;
                  isErased = _2211_recErased;
                  readIdents = _2212_recIdents;
                }
              } else if (_source69.is_Map) {
                DAST._IType _2213___mcc_h1135 = _source69.dtor_key;
                DAST._IType _2214___mcc_h1136 = _source69.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2215_recursiveGen;
                  bool _2216_recOwned;
                  bool _2217_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2218_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1396;
                  bool _out1397;
                  bool _out1398;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1396, out _out1397, out _out1398, out _out1399);
                  _2215_recursiveGen = _out1396;
                  _2216_recOwned = _out1397;
                  _2217_recErased = _out1398;
                  _2218_recIdents = _out1399;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2215_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2216_recOwned;
                  isErased = _2217_recErased;
                  readIdents = _2218_recIdents;
                }
              } else if (_source69.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2219___mcc_h1139 = _source69.dtor_args;
                DAST._IType _2220___mcc_h1140 = _source69.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2221_recursiveGen;
                  bool _2222_recOwned;
                  bool _2223_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2224_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1400;
                  bool _out1401;
                  bool _out1402;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1400, out _out1401, out _out1402, out _out1403);
                  _2221_recursiveGen = _out1400;
                  _2222_recOwned = _out1401;
                  _2223_recErased = _out1402;
                  _2224_recIdents = _out1403;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2221_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2222_recOwned;
                  isErased = _2223_recErased;
                  readIdents = _2224_recIdents;
                }
              } else if (_source69.is_Primitive) {
                DAST._IPrimitive _2225___mcc_h1143 = _source69.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2226_recursiveGen;
                  bool _2227_recOwned;
                  bool _2228_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2229_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1404;
                  bool _out1405;
                  bool _out1406;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1407;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1404, out _out1405, out _out1406, out _out1407);
                  _2226_recursiveGen = _out1404;
                  _2227_recOwned = _out1405;
                  _2228_recErased = _out1406;
                  _2229_recIdents = _out1407;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2226_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2227_recOwned;
                  isErased = _2228_recErased;
                  readIdents = _2229_recIdents;
                }
              } else if (_source69.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2230___mcc_h1145 = _source69.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2231_recursiveGen;
                  bool _2232_recOwned;
                  bool _2233_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2234_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1408;
                  bool _out1409;
                  bool _out1410;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1411;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1408, out _out1409, out _out1410, out _out1411);
                  _2231_recursiveGen = _out1408;
                  _2232_recOwned = _out1409;
                  _2233_recErased = _out1410;
                  _2234_recIdents = _out1411;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2231_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2232_recOwned;
                  isErased = _2233_recErased;
                  readIdents = _2234_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2235___mcc_h1147 = _source69.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2236_recursiveGen;
                  bool _2237_recOwned;
                  bool _2238_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2239_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1412;
                  bool _out1413;
                  bool _out1414;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1415;
                  DCOMP.COMP.GenExpr(_701_expr, selfIdent, @params, mustOwn, out _out1412, out _out1413, out _out1414, out _out1415);
                  _2236_recursiveGen = _out1412;
                  _2237_recOwned = _out1413;
                  _2238_recErased = _out1414;
                  _2239_recIdents = _out1415;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2236_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2237_recOwned;
                  isErased = _2238_recErased;
                  readIdents = _2239_recIdents;
                }
              }
            }
          }
        }
      } else if (_source21.is_SeqConstruct) {
        DAST._IExpression _2240___mcc_h26 = _source21.dtor_length;
        DAST._IExpression _2241___mcc_h27 = _source21.dtor_elem;
        DAST._IExpression _2242_expr = _2241___mcc_h27;
        DAST._IExpression _2243_length = _2240___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _2244_recursiveGen;
          bool _2245___v65;
          bool _2246_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2247_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1416;
          bool _out1417;
          bool _out1418;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
          DCOMP.COMP.GenExpr(_2242_expr, selfIdent, @params, true, out _out1416, out _out1417, out _out1418, out _out1419);
          _2244_recursiveGen = _out1416;
          _2245___v65 = _out1417;
          _2246_eErased = _out1418;
          _2247_recIdents = _out1419;
          Dafny.ISequence<Dafny.Rune> _2248_lengthGen;
          bool _2249___v66;
          bool _2250_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2251_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1420;
          bool _out1421;
          bool _out1422;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1423;
          DCOMP.COMP.GenExpr(_2243_length, selfIdent, @params, true, out _out1420, out _out1421, out _out1422, out _out1423);
          _2248_lengthGen = _out1420;
          _2249___v66 = _out1421;
          _2250_lengthErased = _out1422;
          _2251_lengthIdents = _out1423;
          if (!(_2250_lengthErased)) {
            _2248_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2248_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _2244_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _2248_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2247_recIdents, _2251_lengthIdents);
          isOwned = true;
          isErased = _2246_eErased;
        }
      } else if (_source21.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _2252___mcc_h28 = _source21.dtor_elements;
        DAST._IType _2253___mcc_h29 = _source21.dtor_typ;
        DAST._IType _2254_typ = _2253___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _2255_exprs = _2252___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2256_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1424;
          _out1424 = DCOMP.COMP.GenType(_2254_typ, false, false);
          _2256_genTpe = _out1424;
          BigInteger _2257_i;
          _2257_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _2257_i = BigInteger.Zero;
          while ((_2257_i) < (new BigInteger((_2255_exprs).Count))) {
            if ((_2257_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2258_recursiveGen;
            bool _2259___v67;
            bool _2260_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2261_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1425;
            bool _out1426;
            bool _out1427;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
            DCOMP.COMP.GenExpr((_2255_exprs).Select(_2257_i), selfIdent, @params, true, out _out1425, out _out1426, out _out1427, out _out1428);
            _2258_recursiveGen = _out1425;
            _2259___v67 = _out1426;
            _2260_isErased = _out1427;
            _2261_recIdents = _out1428;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2261_recIdents);
            if (_2260_isErased) {
              _2258_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2258_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2258_recursiveGen);
            _2257_i = (_2257_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _2256_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _2262___mcc_h30 = _source21.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _2263_exprs = _2262___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _2264_generatedValues;
          _2264_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2265_i;
          _2265_i = BigInteger.Zero;
          bool _2266_allErased;
          _2266_allErased = true;
          while ((_2265_i) < (new BigInteger((_2263_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _2267_recursiveGen;
            bool _2268___v68;
            bool _2269_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2270_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1429;
            bool _out1430;
            bool _out1431;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
            DCOMP.COMP.GenExpr((_2263_exprs).Select(_2265_i), selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
            _2267_recursiveGen = _out1429;
            _2268___v68 = _out1430;
            _2269_isErased = _out1431;
            _2270_recIdents = _out1432;
            _2266_allErased = (_2266_allErased) && (_2269_isErased);
            _2264_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_2264_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_2267_recursiveGen, _2269_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2270_recIdents);
            _2265_i = (_2265_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2265_i = BigInteger.Zero;
          while ((_2265_i) < (new BigInteger((_2264_generatedValues).Count))) {
            if ((_2265_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2271_gen;
            _2271_gen = ((_2264_generatedValues).Select(_2265_i)).dtor__0;
            if ((((_2264_generatedValues).Select(_2265_i)).dtor__1) && (!(_2266_allErased))) {
              _2271_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2271_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _2271_gen);
            _2265_i = (_2265_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _2266_allErased;
        }
      } else if (_source21.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2272___mcc_h31 = _source21.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2273_mapElems = _2272___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _2274_generatedValues;
          _2274_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2275_i;
          _2275_i = BigInteger.Zero;
          bool _2276_allErased;
          _2276_allErased = true;
          while ((_2275_i) < (new BigInteger((_2273_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _2277_recursiveGenKey;
            bool _2278___v69;
            bool _2279_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2280_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1433;
            bool _out1434;
            bool _out1435;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
            DCOMP.COMP.GenExpr(((_2273_mapElems).Select(_2275_i)).dtor__0, selfIdent, @params, true, out _out1433, out _out1434, out _out1435, out _out1436);
            _2277_recursiveGenKey = _out1433;
            _2278___v69 = _out1434;
            _2279_isErasedKey = _out1435;
            _2280_recIdentsKey = _out1436;
            Dafny.ISequence<Dafny.Rune> _2281_recursiveGenValue;
            bool _2282___v70;
            bool _2283_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2284_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1437;
            bool _out1438;
            bool _out1439;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1440;
            DCOMP.COMP.GenExpr(((_2273_mapElems).Select(_2275_i)).dtor__1, selfIdent, @params, true, out _out1437, out _out1438, out _out1439, out _out1440);
            _2281_recursiveGenValue = _out1437;
            _2282___v70 = _out1438;
            _2283_isErasedValue = _out1439;
            _2284_recIdentsValue = _out1440;
            _2276_allErased = ((_2276_allErased) && (_2279_isErasedKey)) && (_2283_isErasedValue);
            _2274_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_2274_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_2277_recursiveGenKey, _2281_recursiveGenValue, _2279_isErasedKey, _2283_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2280_recIdentsKey), _2284_recIdentsValue);
            _2275_i = (_2275_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _2275_i = BigInteger.Zero;
          while ((_2275_i) < (new BigInteger((_2274_generatedValues).Count))) {
            if ((_2275_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2285_genKey;
            _2285_genKey = ((_2274_generatedValues).Select(_2275_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _2286_genValue;
            _2286_genValue = ((_2274_generatedValues).Select(_2275_i)).dtor__1;
            if ((((_2274_generatedValues).Select(_2275_i)).dtor__2) && (!(_2276_allErased))) {
              _2285_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2285_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_2274_generatedValues).Select(_2275_i)).dtor__3) && (!(_2276_allErased))) {
              _2286_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _2286_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2285_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2286_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2275_i = (_2275_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _2276_allErased;
        }
      } else if (_source21.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source71 = selfIdent;
          if (_source71.is_Some) {
            Dafny.ISequence<Dafny.Rune> _2287___mcc_h1149 = _source71.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _2288_id = _2287___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_2288_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_2288_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _2288_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2288_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source21.is_Ite) {
        DAST._IExpression _2289___mcc_h32 = _source21.dtor_cond;
        DAST._IExpression _2290___mcc_h33 = _source21.dtor_thn;
        DAST._IExpression _2291___mcc_h34 = _source21.dtor_els;
        DAST._IExpression _2292_f = _2291___mcc_h34;
        DAST._IExpression _2293_t = _2290___mcc_h33;
        DAST._IExpression _2294_cond = _2289___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _2295_condString;
          bool _2296___v71;
          bool _2297_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2298_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1441;
          bool _out1442;
          bool _out1443;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
          DCOMP.COMP.GenExpr(_2294_cond, selfIdent, @params, true, out _out1441, out _out1442, out _out1443, out _out1444);
          _2295_condString = _out1441;
          _2296___v71 = _out1442;
          _2297_condErased = _out1443;
          _2298_recIdentsCond = _out1444;
          if (!(_2297_condErased)) {
            _2295_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2295_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _2299___v72;
          bool _2300_tHasToBeOwned;
          bool _2301___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2302___v74;
          Dafny.ISequence<Dafny.Rune> _out1445;
          bool _out1446;
          bool _out1447;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1448;
          DCOMP.COMP.GenExpr(_2293_t, selfIdent, @params, mustOwn, out _out1445, out _out1446, out _out1447, out _out1448);
          _2299___v72 = _out1445;
          _2300_tHasToBeOwned = _out1446;
          _2301___v73 = _out1447;
          _2302___v74 = _out1448;
          Dafny.ISequence<Dafny.Rune> _2303_fString;
          bool _2304_fOwned;
          bool _2305_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2306_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1449;
          bool _out1450;
          bool _out1451;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1452;
          DCOMP.COMP.GenExpr(_2292_f, selfIdent, @params, _2300_tHasToBeOwned, out _out1449, out _out1450, out _out1451, out _out1452);
          _2303_fString = _out1449;
          _2304_fOwned = _out1450;
          _2305_fErased = _out1451;
          _2306_recIdentsF = _out1452;
          Dafny.ISequence<Dafny.Rune> _2307_tString;
          bool _2308___v75;
          bool _2309_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2310_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1453;
          bool _out1454;
          bool _out1455;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
          DCOMP.COMP.GenExpr(_2293_t, selfIdent, @params, _2304_fOwned, out _out1453, out _out1454, out _out1455, out _out1456);
          _2307_tString = _out1453;
          _2308___v75 = _out1454;
          _2309_tErased = _out1455;
          _2310_recIdentsT = _out1456;
          if ((!(_2305_fErased)) || (!(_2309_tErased))) {
            if (_2305_fErased) {
              _2303_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2303_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_2309_tErased) {
              _2307_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2307_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _2295_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2307_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _2303_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _2304_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2298_recIdentsCond, _2310_recIdentsT), _2306_recIdentsF);
          isErased = (_2305_fErased) || (_2309_tErased);
        }
      } else if (_source21.is_UnOp) {
        DAST._IUnaryOp _2311___mcc_h35 = _source21.dtor_unOp;
        DAST._IExpression _2312___mcc_h36 = _source21.dtor_expr;
        DAST._IUnaryOp _source72 = _2311___mcc_h35;
        if (_source72.is_Not) {
          DAST._IExpression _2313_e = _2312___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2314_recursiveGen;
            bool _2315___v76;
            bool _2316_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2317_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1457;
            bool _out1458;
            bool _out1459;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1460;
            DCOMP.COMP.GenExpr(_2313_e, selfIdent, @params, true, out _out1457, out _out1458, out _out1459, out _out1460);
            _2314_recursiveGen = _out1457;
            _2315___v76 = _out1458;
            _2316_recErased = _out1459;
            _2317_recIdents = _out1460;
            if (!(_2316_recErased)) {
              _2314_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2314_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2314_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2317_recIdents;
            isErased = true;
          }
        } else if (_source72.is_BitwiseNot) {
          DAST._IExpression _2318_e = _2312___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2319_recursiveGen;
            bool _2320___v77;
            bool _2321_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2322_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1461;
            bool _out1462;
            bool _out1463;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
            DCOMP.COMP.GenExpr(_2318_e, selfIdent, @params, true, out _out1461, out _out1462, out _out1463, out _out1464);
            _2319_recursiveGen = _out1461;
            _2320___v77 = _out1462;
            _2321_recErased = _out1463;
            _2322_recIdents = _out1464;
            if (!(_2321_recErased)) {
              _2319_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2319_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _2319_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _2322_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _2323_e = _2312___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _2324_recursiveGen;
            bool _2325_recOwned;
            bool _2326_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2327_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1465;
            bool _out1466;
            bool _out1467;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1468;
            DCOMP.COMP.GenExpr(_2323_e, selfIdent, @params, false, out _out1465, out _out1466, out _out1467, out _out1468);
            _2324_recursiveGen = _out1465;
            _2325_recOwned = _out1466;
            _2326_recErased = _out1467;
            _2327_recIdents = _out1468;
            if (!(_2326_recErased)) {
              Dafny.ISequence<Dafny.Rune> _2328_eraseFn;
              _2328_eraseFn = ((_2325_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _2324_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _2328_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2324_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2324_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _2327_recIdents;
            isErased = true;
          }
        }
      } else if (_source21.is_BinOp) {
        DAST._IBinOp _2329___mcc_h37 = _source21.dtor_op;
        DAST._IExpression _2330___mcc_h38 = _source21.dtor_left;
        DAST._IExpression _2331___mcc_h39 = _source21.dtor_right;
        DAST._IExpression _2332_r = _2331___mcc_h39;
        DAST._IExpression _2333_l = _2330___mcc_h38;
        DAST._IBinOp _2334_op = _2329___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _2335_left;
          bool _2336___v78;
          bool _2337_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2338_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1469;
          bool _out1470;
          bool _out1471;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1472;
          DCOMP.COMP.GenExpr(_2333_l, selfIdent, @params, true, out _out1469, out _out1470, out _out1471, out _out1472);
          _2335_left = _out1469;
          _2336___v78 = _out1470;
          _2337_leftErased = _out1471;
          _2338_recIdentsL = _out1472;
          Dafny.ISequence<Dafny.Rune> _2339_right;
          bool _2340___v79;
          bool _2341_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2342_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1473;
          bool _out1474;
          bool _out1475;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
          DCOMP.COMP.GenExpr(_2332_r, selfIdent, @params, true, out _out1473, out _out1474, out _out1475, out _out1476);
          _2339_right = _out1473;
          _2340___v79 = _out1474;
          _2341_rightErased = _out1475;
          _2342_recIdentsR = _out1476;
          DAST._IBinOp _source73 = _2334_op;
          if (_source73.is_Eq) {
            bool _2343___mcc_h1150 = _source73.dtor_referential;
            bool _2344___mcc_h1151 = _source73.dtor_nullable;
            {
              if (!(_2337_leftErased)) {
                _2335_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2341_rightErased)) {
                _2339_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source74 = _2334_op;
              if (_source74.is_Eq) {
                bool _2345___mcc_h1160 = _source74.dtor_referential;
                bool _2346___mcc_h1161 = _source74.dtor_nullable;
                bool _2347_nullable = _2346___mcc_h1161;
                bool _2348_referential = _2345___mcc_h1160;
                {
                  if (_2348_referential) {
                    if (_2347_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2339_right);
                  }
                }
              } else if (_source74.is_Neq) {
                bool _2349___mcc_h1162 = _source74.dtor_referential;
                bool _2350___mcc_h1163 = _source74.dtor_nullable;
                bool _2351_nullable = _2350___mcc_h1163;
                bool _2352_referential = _2349___mcc_h1162;
                {
                  if (_2352_referential) {
                    if (_2351_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2339_right);
                  }
                }
              } else if (_source74.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source74.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2353___mcc_h1164 = _source74.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2354_op = _2353___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2354_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_Neq) {
            bool _2355___mcc_h1154 = _source73.dtor_referential;
            bool _2356___mcc_h1155 = _source73.dtor_nullable;
            {
              if (!(_2337_leftErased)) {
                _2335_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2341_rightErased)) {
                _2339_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source75 = _2334_op;
              if (_source75.is_Eq) {
                bool _2357___mcc_h1165 = _source75.dtor_referential;
                bool _2358___mcc_h1166 = _source75.dtor_nullable;
                bool _2359_nullable = _2358___mcc_h1166;
                bool _2360_referential = _2357___mcc_h1165;
                {
                  if (_2360_referential) {
                    if (_2359_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2339_right);
                  }
                }
              } else if (_source75.is_Neq) {
                bool _2361___mcc_h1167 = _source75.dtor_referential;
                bool _2362___mcc_h1168 = _source75.dtor_nullable;
                bool _2363_nullable = _2362___mcc_h1168;
                bool _2364_referential = _2361___mcc_h1167;
                {
                  if (_2364_referential) {
                    if (_2363_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2339_right);
                  }
                }
              } else if (_source75.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source75.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2365___mcc_h1169 = _source75.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2366_op = _2365___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2366_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_Div) {
            {
              if (!(_2337_leftErased)) {
                _2335_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2341_rightErased)) {
                _2339_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source76 = _2334_op;
              if (_source76.is_Eq) {
                bool _2367___mcc_h1170 = _source76.dtor_referential;
                bool _2368___mcc_h1171 = _source76.dtor_nullable;
                bool _2369_nullable = _2368___mcc_h1171;
                bool _2370_referential = _2367___mcc_h1170;
                {
                  if (_2370_referential) {
                    if (_2369_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2339_right);
                  }
                }
              } else if (_source76.is_Neq) {
                bool _2371___mcc_h1172 = _source76.dtor_referential;
                bool _2372___mcc_h1173 = _source76.dtor_nullable;
                bool _2373_nullable = _2372___mcc_h1173;
                bool _2374_referential = _2371___mcc_h1172;
                {
                  if (_2374_referential) {
                    if (_2373_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2339_right);
                  }
                }
              } else if (_source76.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source76.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2375___mcc_h1174 = _source76.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2376_op = _2375___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2376_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_EuclidianDiv) {
            {
              if (!(_2337_leftErased)) {
                _2335_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2341_rightErased)) {
                _2339_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source77 = _2334_op;
              if (_source77.is_Eq) {
                bool _2377___mcc_h1175 = _source77.dtor_referential;
                bool _2378___mcc_h1176 = _source77.dtor_nullable;
                bool _2379_nullable = _2378___mcc_h1176;
                bool _2380_referential = _2377___mcc_h1175;
                {
                  if (_2380_referential) {
                    if (_2379_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2339_right);
                  }
                }
              } else if (_source77.is_Neq) {
                bool _2381___mcc_h1177 = _source77.dtor_referential;
                bool _2382___mcc_h1178 = _source77.dtor_nullable;
                bool _2383_nullable = _2382___mcc_h1178;
                bool _2384_referential = _2381___mcc_h1177;
                {
                  if (_2384_referential) {
                    if (_2383_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2339_right);
                  }
                }
              } else if (_source77.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source77.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2385___mcc_h1179 = _source77.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2386_op = _2385___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2386_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_Mod) {
            {
              if (!(_2337_leftErased)) {
                _2335_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2341_rightErased)) {
                _2339_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source78 = _2334_op;
              if (_source78.is_Eq) {
                bool _2387___mcc_h1180 = _source78.dtor_referential;
                bool _2388___mcc_h1181 = _source78.dtor_nullable;
                bool _2389_nullable = _2388___mcc_h1181;
                bool _2390_referential = _2387___mcc_h1180;
                {
                  if (_2390_referential) {
                    if (_2389_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2339_right);
                  }
                }
              } else if (_source78.is_Neq) {
                bool _2391___mcc_h1182 = _source78.dtor_referential;
                bool _2392___mcc_h1183 = _source78.dtor_nullable;
                bool _2393_nullable = _2392___mcc_h1183;
                bool _2394_referential = _2391___mcc_h1182;
                {
                  if (_2394_referential) {
                    if (_2393_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2339_right);
                  }
                }
              } else if (_source78.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source78.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2395___mcc_h1184 = _source78.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2396_op = _2395___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2396_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_EuclidianMod) {
            {
              if (!(_2337_leftErased)) {
                _2335_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2341_rightErased)) {
                _2339_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source79 = _2334_op;
              if (_source79.is_Eq) {
                bool _2397___mcc_h1185 = _source79.dtor_referential;
                bool _2398___mcc_h1186 = _source79.dtor_nullable;
                bool _2399_nullable = _2398___mcc_h1186;
                bool _2400_referential = _2397___mcc_h1185;
                {
                  if (_2400_referential) {
                    if (_2399_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2339_right);
                  }
                }
              } else if (_source79.is_Neq) {
                bool _2401___mcc_h1187 = _source79.dtor_referential;
                bool _2402___mcc_h1188 = _source79.dtor_nullable;
                bool _2403_nullable = _2402___mcc_h1188;
                bool _2404_referential = _2401___mcc_h1187;
                {
                  if (_2404_referential) {
                    if (_2403_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2339_right);
                  }
                }
              } else if (_source79.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source79.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2405___mcc_h1189 = _source79.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2406_op = _2405___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2406_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source73.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _2339_right);
            }
          } else if (_source73.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2339_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source73.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source73.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source73.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2407___mcc_h1158 = _source73.dtor_Passthrough_a0;
            {
              if (!(_2337_leftErased)) {
                _2335_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_2341_rightErased)) {
                _2339_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source80 = _2334_op;
              if (_source80.is_Eq) {
                bool _2408___mcc_h1190 = _source80.dtor_referential;
                bool _2409___mcc_h1191 = _source80.dtor_nullable;
                bool _2410_nullable = _2409___mcc_h1191;
                bool _2411_referential = _2408___mcc_h1190;
                {
                  if (_2411_referential) {
                    if (_2410_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _2339_right);
                  }
                }
              } else if (_source80.is_Neq) {
                bool _2412___mcc_h1192 = _source80.dtor_referential;
                bool _2413___mcc_h1193 = _source80.dtor_nullable;
                bool _2414_nullable = _2413___mcc_h1193;
                bool _2415_referential = _2412___mcc_h1192;
                {
                  if (_2415_referential) {
                    if (_2414_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2335_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _2339_right);
                  }
                }
              } else if (_source80.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source80.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source80.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source80.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2416___mcc_h1194 = _source80.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _2417_op = _2416___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2335_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2417_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _2339_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2338_recIdentsL, _2342_recIdentsR);
          isErased = true;
        }
      } else if (_source21.is_ArrayLen) {
        DAST._IExpression _2418___mcc_h40 = _source21.dtor_expr;
        BigInteger _2419___mcc_h41 = _source21.dtor_dim;
        BigInteger _2420_dim = _2419___mcc_h41;
        DAST._IExpression _2421_expr = _2418___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _2422_recursiveGen;
          bool _2423___v81;
          bool _2424_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2425_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1477;
          bool _out1478;
          bool _out1479;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1480;
          DCOMP.COMP.GenExpr(_2421_expr, selfIdent, @params, true, out _out1477, out _out1478, out _out1479, out _out1480);
          _2422_recursiveGen = _out1477;
          _2423___v81 = _out1478;
          _2424_recErased = _out1479;
          _2425_recIdents = _out1480;
          if ((_2420_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _2422_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _2426_i;
            _2426_i = BigInteger.One;
            while ((_2426_i) < (_2420_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _2426_i = (_2426_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2422_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _2425_recIdents;
          isErased = true;
        }
      } else if (_source21.is_Select) {
        DAST._IExpression _2427___mcc_h42 = _source21.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2428___mcc_h43 = _source21.dtor_field;
        bool _2429___mcc_h44 = _source21.dtor_isConstant;
        bool _2430___mcc_h45 = _source21.dtor_onDatatype;
        DAST._IExpression _source81 = _2427___mcc_h42;
        if (_source81.is_Literal) {
          DAST._ILiteral _2431___mcc_h46 = _source81.dtor_Literal_a0;
          bool _2432_isDatatype = _2430___mcc_h45;
          bool _2433_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2434_field = _2428___mcc_h43;
          DAST._IExpression _2435_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2436_onString;
            bool _2437_onOwned;
            bool _2438_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2439_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1481;
            bool _out1482;
            bool _out1483;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
            DCOMP.COMP.GenExpr(_2435_on, selfIdent, @params, false, out _out1481, out _out1482, out _out1483, out _out1484);
            _2436_onString = _out1481;
            _2437_onOwned = _out1482;
            _2438_onErased = _out1483;
            _2439_recIdents = _out1484;
            if ((_2432_isDatatype) || (_2433_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2436_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2434_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2433_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2436_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2434_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2439_recIdents;
          }
        } else if (_source81.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _2440___mcc_h48 = _source81.dtor_Ident_a0;
          bool _2441_isDatatype = _2430___mcc_h45;
          bool _2442_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2443_field = _2428___mcc_h43;
          DAST._IExpression _2444_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2445_onString;
            bool _2446_onOwned;
            bool _2447_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2448_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1485;
            bool _out1486;
            bool _out1487;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1488;
            DCOMP.COMP.GenExpr(_2444_on, selfIdent, @params, false, out _out1485, out _out1486, out _out1487, out _out1488);
            _2445_onString = _out1485;
            _2446_onOwned = _out1486;
            _2447_onErased = _out1487;
            _2448_recIdents = _out1488;
            if ((_2441_isDatatype) || (_2442_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2445_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2443_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2442_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2445_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2443_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2448_recIdents;
          }
        } else if (_source81.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2449___mcc_h50 = _source81.dtor_Companion_a0;
          bool _2450_isDatatype = _2430___mcc_h45;
          bool _2451_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2452_field = _2428___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2453_c = _2449___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _2454_onString;
            bool _2455_onOwned;
            bool _2456_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2457_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1489;
            bool _out1490;
            bool _out1491;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_2453_c), selfIdent, @params, false, out _out1489, out _out1490, out _out1491, out _out1492);
            _2454_onString = _out1489;
            _2455_onOwned = _out1490;
            _2456_onErased = _out1491;
            _2457_recIdents = _out1492;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2454_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_2452_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _2457_recIdents;
          }
        } else if (_source81.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _2458___mcc_h52 = _source81.dtor_Tuple_a0;
          bool _2459_isDatatype = _2430___mcc_h45;
          bool _2460_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2461_field = _2428___mcc_h43;
          DAST._IExpression _2462_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2463_onString;
            bool _2464_onOwned;
            bool _2465_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2466_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1493;
            bool _out1494;
            bool _out1495;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1496;
            DCOMP.COMP.GenExpr(_2462_on, selfIdent, @params, false, out _out1493, out _out1494, out _out1495, out _out1496);
            _2463_onString = _out1493;
            _2464_onOwned = _out1494;
            _2465_onErased = _out1495;
            _2466_recIdents = _out1496;
            if ((_2459_isDatatype) || (_2460_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2463_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2461_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2460_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2463_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2461_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2466_recIdents;
          }
        } else if (_source81.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2467___mcc_h54 = _source81.dtor_path;
          Dafny.ISequence<DAST._IType> _2468___mcc_h55 = _source81.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2469___mcc_h56 = _source81.dtor_args;
          bool _2470_isDatatype = _2430___mcc_h45;
          bool _2471_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2472_field = _2428___mcc_h43;
          DAST._IExpression _2473_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2474_onString;
            bool _2475_onOwned;
            bool _2476_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2477_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1497;
            bool _out1498;
            bool _out1499;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1500;
            DCOMP.COMP.GenExpr(_2473_on, selfIdent, @params, false, out _out1497, out _out1498, out _out1499, out _out1500);
            _2474_onString = _out1497;
            _2475_onOwned = _out1498;
            _2476_onErased = _out1499;
            _2477_recIdents = _out1500;
            if ((_2470_isDatatype) || (_2471_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2474_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2472_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2471_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2474_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2472_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2477_recIdents;
          }
        } else if (_source81.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _2478___mcc_h60 = _source81.dtor_dims;
          DAST._IType _2479___mcc_h61 = _source81.dtor_typ;
          bool _2480_isDatatype = _2430___mcc_h45;
          bool _2481_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2482_field = _2428___mcc_h43;
          DAST._IExpression _2483_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2484_onString;
            bool _2485_onOwned;
            bool _2486_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2487_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1501;
            bool _out1502;
            bool _out1503;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
            DCOMP.COMP.GenExpr(_2483_on, selfIdent, @params, false, out _out1501, out _out1502, out _out1503, out _out1504);
            _2484_onString = _out1501;
            _2485_onOwned = _out1502;
            _2486_onErased = _out1503;
            _2487_recIdents = _out1504;
            if ((_2480_isDatatype) || (_2481_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2484_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2482_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2481_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2484_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2482_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2487_recIdents;
          }
        } else if (_source81.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2488___mcc_h64 = _source81.dtor_path;
          Dafny.ISequence<DAST._IType> _2489___mcc_h65 = _source81.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _2490___mcc_h66 = _source81.dtor_variant;
          bool _2491___mcc_h67 = _source81.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2492___mcc_h68 = _source81.dtor_contents;
          bool _2493_isDatatype = _2430___mcc_h45;
          bool _2494_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2495_field = _2428___mcc_h43;
          DAST._IExpression _2496_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2497_onString;
            bool _2498_onOwned;
            bool _2499_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2500_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1505;
            bool _out1506;
            bool _out1507;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1508;
            DCOMP.COMP.GenExpr(_2496_on, selfIdent, @params, false, out _out1505, out _out1506, out _out1507, out _out1508);
            _2497_onString = _out1505;
            _2498_onOwned = _out1506;
            _2499_onErased = _out1507;
            _2500_recIdents = _out1508;
            if ((_2493_isDatatype) || (_2494_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2497_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2495_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2494_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2497_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2495_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2500_recIdents;
          }
        } else if (_source81.is_Convert) {
          DAST._IExpression _2501___mcc_h74 = _source81.dtor_value;
          DAST._IType _2502___mcc_h75 = _source81.dtor_from;
          DAST._IType _2503___mcc_h76 = _source81.dtor_typ;
          bool _2504_isDatatype = _2430___mcc_h45;
          bool _2505_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2506_field = _2428___mcc_h43;
          DAST._IExpression _2507_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2508_onString;
            bool _2509_onOwned;
            bool _2510_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2511_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1509;
            bool _out1510;
            bool _out1511;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
            DCOMP.COMP.GenExpr(_2507_on, selfIdent, @params, false, out _out1509, out _out1510, out _out1511, out _out1512);
            _2508_onString = _out1509;
            _2509_onOwned = _out1510;
            _2510_onErased = _out1511;
            _2511_recIdents = _out1512;
            if ((_2504_isDatatype) || (_2505_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2508_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2506_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2505_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2508_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2506_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2511_recIdents;
          }
        } else if (_source81.is_SeqConstruct) {
          DAST._IExpression _2512___mcc_h80 = _source81.dtor_length;
          DAST._IExpression _2513___mcc_h81 = _source81.dtor_elem;
          bool _2514_isDatatype = _2430___mcc_h45;
          bool _2515_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2516_field = _2428___mcc_h43;
          DAST._IExpression _2517_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2518_onString;
            bool _2519_onOwned;
            bool _2520_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2521_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1513;
            bool _out1514;
            bool _out1515;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1516;
            DCOMP.COMP.GenExpr(_2517_on, selfIdent, @params, false, out _out1513, out _out1514, out _out1515, out _out1516);
            _2518_onString = _out1513;
            _2519_onOwned = _out1514;
            _2520_onErased = _out1515;
            _2521_recIdents = _out1516;
            if ((_2514_isDatatype) || (_2515_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2518_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2516_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2515_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2518_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2516_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2521_recIdents;
          }
        } else if (_source81.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _2522___mcc_h84 = _source81.dtor_elements;
          DAST._IType _2523___mcc_h85 = _source81.dtor_typ;
          bool _2524_isDatatype = _2430___mcc_h45;
          bool _2525_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2526_field = _2428___mcc_h43;
          DAST._IExpression _2527_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2528_onString;
            bool _2529_onOwned;
            bool _2530_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2531_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1517;
            bool _out1518;
            bool _out1519;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1520;
            DCOMP.COMP.GenExpr(_2527_on, selfIdent, @params, false, out _out1517, out _out1518, out _out1519, out _out1520);
            _2528_onString = _out1517;
            _2529_onOwned = _out1518;
            _2530_onErased = _out1519;
            _2531_recIdents = _out1520;
            if ((_2524_isDatatype) || (_2525_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2528_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2526_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2525_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2528_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2526_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2531_recIdents;
          }
        } else if (_source81.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _2532___mcc_h88 = _source81.dtor_elements;
          bool _2533_isDatatype = _2430___mcc_h45;
          bool _2534_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2535_field = _2428___mcc_h43;
          DAST._IExpression _2536_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2537_onString;
            bool _2538_onOwned;
            bool _2539_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2540_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1521;
            bool _out1522;
            bool _out1523;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1524;
            DCOMP.COMP.GenExpr(_2536_on, selfIdent, @params, false, out _out1521, out _out1522, out _out1523, out _out1524);
            _2537_onString = _out1521;
            _2538_onOwned = _out1522;
            _2539_onErased = _out1523;
            _2540_recIdents = _out1524;
            if ((_2533_isDatatype) || (_2534_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2537_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2535_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2534_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2537_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2535_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2540_recIdents;
          }
        } else if (_source81.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2541___mcc_h90 = _source81.dtor_mapElems;
          bool _2542_isDatatype = _2430___mcc_h45;
          bool _2543_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2544_field = _2428___mcc_h43;
          DAST._IExpression _2545_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2546_onString;
            bool _2547_onOwned;
            bool _2548_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2549_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1525;
            bool _out1526;
            bool _out1527;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1528;
            DCOMP.COMP.GenExpr(_2545_on, selfIdent, @params, false, out _out1525, out _out1526, out _out1527, out _out1528);
            _2546_onString = _out1525;
            _2547_onOwned = _out1526;
            _2548_onErased = _out1527;
            _2549_recIdents = _out1528;
            if ((_2542_isDatatype) || (_2543_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2546_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2544_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2543_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2546_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2544_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2549_recIdents;
          }
        } else if (_source81.is_This) {
          bool _2550_isDatatype = _2430___mcc_h45;
          bool _2551_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2552_field = _2428___mcc_h43;
          DAST._IExpression _2553_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2554_onString;
            bool _2555_onOwned;
            bool _2556_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2557_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1529;
            bool _out1530;
            bool _out1531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
            DCOMP.COMP.GenExpr(_2553_on, selfIdent, @params, false, out _out1529, out _out1530, out _out1531, out _out1532);
            _2554_onString = _out1529;
            _2555_onOwned = _out1530;
            _2556_onErased = _out1531;
            _2557_recIdents = _out1532;
            if ((_2550_isDatatype) || (_2551_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2554_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2552_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2551_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2554_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2552_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2557_recIdents;
          }
        } else if (_source81.is_Ite) {
          DAST._IExpression _2558___mcc_h92 = _source81.dtor_cond;
          DAST._IExpression _2559___mcc_h93 = _source81.dtor_thn;
          DAST._IExpression _2560___mcc_h94 = _source81.dtor_els;
          bool _2561_isDatatype = _2430___mcc_h45;
          bool _2562_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2563_field = _2428___mcc_h43;
          DAST._IExpression _2564_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2565_onString;
            bool _2566_onOwned;
            bool _2567_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2568_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1533;
            bool _out1534;
            bool _out1535;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1536;
            DCOMP.COMP.GenExpr(_2564_on, selfIdent, @params, false, out _out1533, out _out1534, out _out1535, out _out1536);
            _2565_onString = _out1533;
            _2566_onOwned = _out1534;
            _2567_onErased = _out1535;
            _2568_recIdents = _out1536;
            if ((_2561_isDatatype) || (_2562_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2565_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2563_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2562_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2565_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2563_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2568_recIdents;
          }
        } else if (_source81.is_UnOp) {
          DAST._IUnaryOp _2569___mcc_h98 = _source81.dtor_unOp;
          DAST._IExpression _2570___mcc_h99 = _source81.dtor_expr;
          bool _2571_isDatatype = _2430___mcc_h45;
          bool _2572_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2573_field = _2428___mcc_h43;
          DAST._IExpression _2574_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2575_onString;
            bool _2576_onOwned;
            bool _2577_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2578_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1537;
            bool _out1538;
            bool _out1539;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
            DCOMP.COMP.GenExpr(_2574_on, selfIdent, @params, false, out _out1537, out _out1538, out _out1539, out _out1540);
            _2575_onString = _out1537;
            _2576_onOwned = _out1538;
            _2577_onErased = _out1539;
            _2578_recIdents = _out1540;
            if ((_2571_isDatatype) || (_2572_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2575_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2573_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2572_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2575_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2573_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2578_recIdents;
          }
        } else if (_source81.is_BinOp) {
          DAST._IBinOp _2579___mcc_h102 = _source81.dtor_op;
          DAST._IExpression _2580___mcc_h103 = _source81.dtor_left;
          DAST._IExpression _2581___mcc_h104 = _source81.dtor_right;
          bool _2582_isDatatype = _2430___mcc_h45;
          bool _2583_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2584_field = _2428___mcc_h43;
          DAST._IExpression _2585_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2586_onString;
            bool _2587_onOwned;
            bool _2588_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2589_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1541;
            bool _out1542;
            bool _out1543;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1544;
            DCOMP.COMP.GenExpr(_2585_on, selfIdent, @params, false, out _out1541, out _out1542, out _out1543, out _out1544);
            _2586_onString = _out1541;
            _2587_onOwned = _out1542;
            _2588_onErased = _out1543;
            _2589_recIdents = _out1544;
            if ((_2582_isDatatype) || (_2583_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2586_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2584_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2583_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2586_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2584_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2589_recIdents;
          }
        } else if (_source81.is_ArrayLen) {
          DAST._IExpression _2590___mcc_h108 = _source81.dtor_expr;
          BigInteger _2591___mcc_h109 = _source81.dtor_dim;
          bool _2592_isDatatype = _2430___mcc_h45;
          bool _2593_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2594_field = _2428___mcc_h43;
          DAST._IExpression _2595_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2596_onString;
            bool _2597_onOwned;
            bool _2598_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2599_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1545;
            bool _out1546;
            bool _out1547;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1548;
            DCOMP.COMP.GenExpr(_2595_on, selfIdent, @params, false, out _out1545, out _out1546, out _out1547, out _out1548);
            _2596_onString = _out1545;
            _2597_onOwned = _out1546;
            _2598_onErased = _out1547;
            _2599_recIdents = _out1548;
            if ((_2592_isDatatype) || (_2593_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2596_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2594_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2593_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2596_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2594_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2599_recIdents;
          }
        } else if (_source81.is_Select) {
          DAST._IExpression _2600___mcc_h112 = _source81.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2601___mcc_h113 = _source81.dtor_field;
          bool _2602___mcc_h114 = _source81.dtor_isConstant;
          bool _2603___mcc_h115 = _source81.dtor_onDatatype;
          bool _2604_isDatatype = _2430___mcc_h45;
          bool _2605_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2606_field = _2428___mcc_h43;
          DAST._IExpression _2607_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2608_onString;
            bool _2609_onOwned;
            bool _2610_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2611_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1549;
            bool _out1550;
            bool _out1551;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
            DCOMP.COMP.GenExpr(_2607_on, selfIdent, @params, false, out _out1549, out _out1550, out _out1551, out _out1552);
            _2608_onString = _out1549;
            _2609_onOwned = _out1550;
            _2610_onErased = _out1551;
            _2611_recIdents = _out1552;
            if ((_2604_isDatatype) || (_2605_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2608_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2606_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2605_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2608_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2606_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2611_recIdents;
          }
        } else if (_source81.is_SelectFn) {
          DAST._IExpression _2612___mcc_h120 = _source81.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _2613___mcc_h121 = _source81.dtor_field;
          bool _2614___mcc_h122 = _source81.dtor_onDatatype;
          bool _2615___mcc_h123 = _source81.dtor_isStatic;
          BigInteger _2616___mcc_h124 = _source81.dtor_arity;
          bool _2617_isDatatype = _2430___mcc_h45;
          bool _2618_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2619_field = _2428___mcc_h43;
          DAST._IExpression _2620_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2621_onString;
            bool _2622_onOwned;
            bool _2623_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2624_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1553;
            bool _out1554;
            bool _out1555;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1556;
            DCOMP.COMP.GenExpr(_2620_on, selfIdent, @params, false, out _out1553, out _out1554, out _out1555, out _out1556);
            _2621_onString = _out1553;
            _2622_onOwned = _out1554;
            _2623_onErased = _out1555;
            _2624_recIdents = _out1556;
            if ((_2617_isDatatype) || (_2618_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2621_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2619_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2618_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2621_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2619_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2624_recIdents;
          }
        } else if (_source81.is_Index) {
          DAST._IExpression _2625___mcc_h130 = _source81.dtor_expr;
          DAST._ICollKind _2626___mcc_h131 = _source81.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _2627___mcc_h132 = _source81.dtor_indices;
          bool _2628_isDatatype = _2430___mcc_h45;
          bool _2629_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2630_field = _2428___mcc_h43;
          DAST._IExpression _2631_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2632_onString;
            bool _2633_onOwned;
            bool _2634_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2635_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1557;
            bool _out1558;
            bool _out1559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
            DCOMP.COMP.GenExpr(_2631_on, selfIdent, @params, false, out _out1557, out _out1558, out _out1559, out _out1560);
            _2632_onString = _out1557;
            _2633_onOwned = _out1558;
            _2634_onErased = _out1559;
            _2635_recIdents = _out1560;
            if ((_2628_isDatatype) || (_2629_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2632_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2630_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2629_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2632_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2630_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2635_recIdents;
          }
        } else if (_source81.is_IndexRange) {
          DAST._IExpression _2636___mcc_h136 = _source81.dtor_expr;
          bool _2637___mcc_h137 = _source81.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _2638___mcc_h138 = _source81.dtor_low;
          DAST._IOptional<DAST._IExpression> _2639___mcc_h139 = _source81.dtor_high;
          bool _2640_isDatatype = _2430___mcc_h45;
          bool _2641_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2642_field = _2428___mcc_h43;
          DAST._IExpression _2643_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2644_onString;
            bool _2645_onOwned;
            bool _2646_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2647_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1561;
            bool _out1562;
            bool _out1563;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1564;
            DCOMP.COMP.GenExpr(_2643_on, selfIdent, @params, false, out _out1561, out _out1562, out _out1563, out _out1564);
            _2644_onString = _out1561;
            _2645_onOwned = _out1562;
            _2646_onErased = _out1563;
            _2647_recIdents = _out1564;
            if ((_2640_isDatatype) || (_2641_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2644_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2642_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2641_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2644_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2642_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2647_recIdents;
          }
        } else if (_source81.is_TupleSelect) {
          DAST._IExpression _2648___mcc_h144 = _source81.dtor_expr;
          BigInteger _2649___mcc_h145 = _source81.dtor_index;
          bool _2650_isDatatype = _2430___mcc_h45;
          bool _2651_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2652_field = _2428___mcc_h43;
          DAST._IExpression _2653_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2654_onString;
            bool _2655_onOwned;
            bool _2656_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2657_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1565;
            bool _out1566;
            bool _out1567;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1568;
            DCOMP.COMP.GenExpr(_2653_on, selfIdent, @params, false, out _out1565, out _out1566, out _out1567, out _out1568);
            _2654_onString = _out1565;
            _2655_onOwned = _out1566;
            _2656_onErased = _out1567;
            _2657_recIdents = _out1568;
            if ((_2650_isDatatype) || (_2651_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2654_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2652_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2651_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2654_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2652_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2657_recIdents;
          }
        } else if (_source81.is_Call) {
          DAST._IExpression _2658___mcc_h148 = _source81.dtor_on;
          Dafny.ISequence<Dafny.Rune> _2659___mcc_h149 = _source81.dtor_name;
          Dafny.ISequence<DAST._IType> _2660___mcc_h150 = _source81.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2661___mcc_h151 = _source81.dtor_args;
          bool _2662_isDatatype = _2430___mcc_h45;
          bool _2663_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2664_field = _2428___mcc_h43;
          DAST._IExpression _2665_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2666_onString;
            bool _2667_onOwned;
            bool _2668_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2669_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1569;
            bool _out1570;
            bool _out1571;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
            DCOMP.COMP.GenExpr(_2665_on, selfIdent, @params, false, out _out1569, out _out1570, out _out1571, out _out1572);
            _2666_onString = _out1569;
            _2667_onOwned = _out1570;
            _2668_onErased = _out1571;
            _2669_recIdents = _out1572;
            if ((_2662_isDatatype) || (_2663_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2666_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2664_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2663_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2666_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2664_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2669_recIdents;
          }
        } else if (_source81.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _2670___mcc_h156 = _source81.dtor_params;
          DAST._IType _2671___mcc_h157 = _source81.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _2672___mcc_h158 = _source81.dtor_body;
          bool _2673_isDatatype = _2430___mcc_h45;
          bool _2674_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2675_field = _2428___mcc_h43;
          DAST._IExpression _2676_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2677_onString;
            bool _2678_onOwned;
            bool _2679_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2680_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1573;
            bool _out1574;
            bool _out1575;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1576;
            DCOMP.COMP.GenExpr(_2676_on, selfIdent, @params, false, out _out1573, out _out1574, out _out1575, out _out1576);
            _2677_onString = _out1573;
            _2678_onOwned = _out1574;
            _2679_onErased = _out1575;
            _2680_recIdents = _out1576;
            if ((_2673_isDatatype) || (_2674_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2677_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2675_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2674_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2677_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2675_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2680_recIdents;
          }
        } else if (_source81.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2681___mcc_h162 = _source81.dtor_values;
          DAST._IType _2682___mcc_h163 = _source81.dtor_retType;
          DAST._IExpression _2683___mcc_h164 = _source81.dtor_expr;
          bool _2684_isDatatype = _2430___mcc_h45;
          bool _2685_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2686_field = _2428___mcc_h43;
          DAST._IExpression _2687_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2688_onString;
            bool _2689_onOwned;
            bool _2690_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2691_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1577;
            bool _out1578;
            bool _out1579;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
            DCOMP.COMP.GenExpr(_2687_on, selfIdent, @params, false, out _out1577, out _out1578, out _out1579, out _out1580);
            _2688_onString = _out1577;
            _2689_onOwned = _out1578;
            _2690_onErased = _out1579;
            _2691_recIdents = _out1580;
            if ((_2684_isDatatype) || (_2685_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2688_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2686_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2685_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2688_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2686_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2691_recIdents;
          }
        } else if (_source81.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _2692___mcc_h168 = _source81.dtor_name;
          DAST._IType _2693___mcc_h169 = _source81.dtor_typ;
          DAST._IExpression _2694___mcc_h170 = _source81.dtor_value;
          DAST._IExpression _2695___mcc_h171 = _source81.dtor_iifeBody;
          bool _2696_isDatatype = _2430___mcc_h45;
          bool _2697_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2698_field = _2428___mcc_h43;
          DAST._IExpression _2699_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2700_onString;
            bool _2701_onOwned;
            bool _2702_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2703_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1581;
            bool _out1582;
            bool _out1583;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1584;
            DCOMP.COMP.GenExpr(_2699_on, selfIdent, @params, false, out _out1581, out _out1582, out _out1583, out _out1584);
            _2700_onString = _out1581;
            _2701_onOwned = _out1582;
            _2702_onErased = _out1583;
            _2703_recIdents = _out1584;
            if ((_2696_isDatatype) || (_2697_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2700_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2698_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2697_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2700_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2698_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2703_recIdents;
          }
        } else if (_source81.is_Apply) {
          DAST._IExpression _2704___mcc_h176 = _source81.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _2705___mcc_h177 = _source81.dtor_args;
          bool _2706_isDatatype = _2430___mcc_h45;
          bool _2707_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2708_field = _2428___mcc_h43;
          DAST._IExpression _2709_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2710_onString;
            bool _2711_onOwned;
            bool _2712_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2713_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1585;
            bool _out1586;
            bool _out1587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1588;
            DCOMP.COMP.GenExpr(_2709_on, selfIdent, @params, false, out _out1585, out _out1586, out _out1587, out _out1588);
            _2710_onString = _out1585;
            _2711_onOwned = _out1586;
            _2712_onErased = _out1587;
            _2713_recIdents = _out1588;
            if ((_2706_isDatatype) || (_2707_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2710_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2708_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2707_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2710_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2708_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2713_recIdents;
          }
        } else if (_source81.is_TypeTest) {
          DAST._IExpression _2714___mcc_h180 = _source81.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2715___mcc_h181 = _source81.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _2716___mcc_h182 = _source81.dtor_variant;
          bool _2717_isDatatype = _2430___mcc_h45;
          bool _2718_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2719_field = _2428___mcc_h43;
          DAST._IExpression _2720_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2721_onString;
            bool _2722_onOwned;
            bool _2723_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2724_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1589;
            bool _out1590;
            bool _out1591;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1592;
            DCOMP.COMP.GenExpr(_2720_on, selfIdent, @params, false, out _out1589, out _out1590, out _out1591, out _out1592);
            _2721_onString = _out1589;
            _2722_onOwned = _out1590;
            _2723_onErased = _out1591;
            _2724_recIdents = _out1592;
            if ((_2717_isDatatype) || (_2718_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2721_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2719_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2718_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2721_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2719_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2724_recIdents;
          }
        } else if (_source81.is_InitializationValue) {
          DAST._IType _2725___mcc_h186 = _source81.dtor_typ;
          bool _2726_isDatatype = _2430___mcc_h45;
          bool _2727_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2728_field = _2428___mcc_h43;
          DAST._IExpression _2729_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2730_onString;
            bool _2731_onOwned;
            bool _2732_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2733_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1593;
            bool _out1594;
            bool _out1595;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1596;
            DCOMP.COMP.GenExpr(_2729_on, selfIdent, @params, false, out _out1593, out _out1594, out _out1595, out _out1596);
            _2730_onString = _out1593;
            _2731_onOwned = _out1594;
            _2732_onErased = _out1595;
            _2733_recIdents = _out1596;
            if ((_2726_isDatatype) || (_2727_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2730_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2728_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2727_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2730_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2728_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2733_recIdents;
          }
        } else if (_source81.is_BoolBoundedPool) {
          bool _2734_isDatatype = _2430___mcc_h45;
          bool _2735_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2736_field = _2428___mcc_h43;
          DAST._IExpression _2737_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2738_onString;
            bool _2739_onOwned;
            bool _2740_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2741_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1597;
            bool _out1598;
            bool _out1599;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
            DCOMP.COMP.GenExpr(_2737_on, selfIdent, @params, false, out _out1597, out _out1598, out _out1599, out _out1600);
            _2738_onString = _out1597;
            _2739_onOwned = _out1598;
            _2740_onErased = _out1599;
            _2741_recIdents = _out1600;
            if ((_2734_isDatatype) || (_2735_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2738_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2736_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2735_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2738_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2736_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2741_recIdents;
          }
        } else if (_source81.is_SetBoundedPool) {
          DAST._IExpression _2742___mcc_h188 = _source81.dtor_of;
          bool _2743_isDatatype = _2430___mcc_h45;
          bool _2744_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2745_field = _2428___mcc_h43;
          DAST._IExpression _2746_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2747_onString;
            bool _2748_onOwned;
            bool _2749_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2750_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1601;
            bool _out1602;
            bool _out1603;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1604;
            DCOMP.COMP.GenExpr(_2746_on, selfIdent, @params, false, out _out1601, out _out1602, out _out1603, out _out1604);
            _2747_onString = _out1601;
            _2748_onOwned = _out1602;
            _2749_onErased = _out1603;
            _2750_recIdents = _out1604;
            if ((_2743_isDatatype) || (_2744_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2747_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2745_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2744_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2747_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2745_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2750_recIdents;
          }
        } else if (_source81.is_SeqBoundedPool) {
          DAST._IExpression _2751___mcc_h190 = _source81.dtor_of;
          bool _2752___mcc_h191 = _source81.dtor_includeDuplicates;
          bool _2753_isDatatype = _2430___mcc_h45;
          bool _2754_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2755_field = _2428___mcc_h43;
          DAST._IExpression _2756_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2757_onString;
            bool _2758_onOwned;
            bool _2759_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2760_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1605;
            bool _out1606;
            bool _out1607;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
            DCOMP.COMP.GenExpr(_2756_on, selfIdent, @params, false, out _out1605, out _out1606, out _out1607, out _out1608);
            _2757_onString = _out1605;
            _2758_onOwned = _out1606;
            _2759_onErased = _out1607;
            _2760_recIdents = _out1608;
            if ((_2753_isDatatype) || (_2754_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2757_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2755_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2754_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2757_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2755_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2760_recIdents;
          }
        } else {
          DAST._IExpression _2761___mcc_h194 = _source81.dtor_lo;
          DAST._IExpression _2762___mcc_h195 = _source81.dtor_hi;
          bool _2763_isDatatype = _2430___mcc_h45;
          bool _2764_isConstant = _2429___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _2765_field = _2428___mcc_h43;
          DAST._IExpression _2766_on = _2427___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _2767_onString;
            bool _2768_onOwned;
            bool _2769_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2770_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1609;
            bool _out1610;
            bool _out1611;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1612;
            DCOMP.COMP.GenExpr(_2766_on, selfIdent, @params, false, out _out1609, out _out1610, out _out1611, out _out1612);
            _2767_onString = _out1609;
            _2768_onOwned = _out1610;
            _2769_onErased = _out1611;
            _2770_recIdents = _out1612;
            if ((_2763_isDatatype) || (_2764_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2767_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2765_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_2764_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _2767_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_2765_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _2770_recIdents;
          }
        }
      } else if (_source21.is_SelectFn) {
        DAST._IExpression _2771___mcc_h198 = _source21.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2772___mcc_h199 = _source21.dtor_field;
        bool _2773___mcc_h200 = _source21.dtor_onDatatype;
        bool _2774___mcc_h201 = _source21.dtor_isStatic;
        BigInteger _2775___mcc_h202 = _source21.dtor_arity;
        BigInteger _2776_arity = _2775___mcc_h202;
        bool _2777_isStatic = _2774___mcc_h201;
        bool _2778_isDatatype = _2773___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _2779_field = _2772___mcc_h199;
        DAST._IExpression _2780_on = _2771___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _2781_onString;
          bool _2782_onOwned;
          bool _2783___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2784_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1613;
          bool _out1614;
          bool _out1615;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1616;
          DCOMP.COMP.GenExpr(_2780_on, selfIdent, @params, false, out _out1613, out _out1614, out _out1615, out _out1616);
          _2781_onString = _out1613;
          _2782_onOwned = _out1614;
          _2783___v82 = _out1615;
          _2784_recIdents = _out1616;
          if (_2777_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2781_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2779_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _2781_onString), ((_2782_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _2785_args;
            _2785_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _2786_i;
            _2786_i = BigInteger.Zero;
            while ((_2786_i) < (_2776_arity)) {
              if ((_2786_i).Sign == 1) {
                _2785_args = Dafny.Sequence<Dafny.Rune>.Concat(_2785_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _2785_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2785_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), RAST.__default.natToString(_2786_i));
              _2786_i = (_2786_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _2785_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _2779_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2785_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _2787_typeShape;
          _2787_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _2788_i;
          _2788_i = BigInteger.Zero;
          while ((_2788_i) < (_2776_arity)) {
            if ((_2788_i).Sign == 1) {
              _2787_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2787_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _2787_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2787_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _2788_i = (_2788_i) + (BigInteger.One);
          }
          _2787_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_2787_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _2787_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _2784_recIdents;
        }
      } else if (_source21.is_Index) {
        DAST._IExpression _2789___mcc_h203 = _source21.dtor_expr;
        DAST._ICollKind _2790___mcc_h204 = _source21.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _2791___mcc_h205 = _source21.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2792_indices = _2791___mcc_h205;
        DAST._ICollKind _2793_collKind = _2790___mcc_h204;
        DAST._IExpression _2794_on = _2789___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _2795_onString;
          bool _2796_onOwned;
          bool _2797_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2798_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1617;
          bool _out1618;
          bool _out1619;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1620;
          DCOMP.COMP.GenExpr(_2794_on, selfIdent, @params, false, out _out1617, out _out1618, out _out1619, out _out1620);
          _2795_onString = _out1617;
          _2796_onOwned = _out1618;
          _2797_onErased = _out1619;
          _2798_recIdents = _out1620;
          readIdents = _2798_recIdents;
          s = _2795_onString;
          BigInteger _2799_i;
          _2799_i = BigInteger.Zero;
          while ((_2799_i) < (new BigInteger((_2792_indices).Count))) {
            if (object.Equals(_2793_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_2793_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _2800_idx;
              bool _2801_idxOwned;
              bool _2802_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2803_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1621;
              bool _out1622;
              bool _out1623;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1624;
              DCOMP.COMP.GenExpr((_2792_indices).Select(_2799_i), selfIdent, @params, false, out _out1621, out _out1622, out _out1623, out _out1624);
              _2800_idx = _out1621;
              _2801_idxOwned = _out1622;
              _2802_idxErased = _out1623;
              _2803_recIdentsIdx = _out1624;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_2801_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2800_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2803_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _2804_idx;
              bool _2805___v83;
              bool _2806_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2807_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1625;
              bool _out1626;
              bool _out1627;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
              DCOMP.COMP.GenExpr((_2792_indices).Select(_2799_i), selfIdent, @params, true, out _out1625, out _out1626, out _out1627, out _out1628);
              _2804_idx = _out1625;
              _2805___v83 = _out1626;
              _2806_idxErased = _out1627;
              _2807_recIdentsIdx = _out1628;
              if (!(_2806_idxErased)) {
                _2804_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2804_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _2804_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2807_recIdentsIdx);
            }
            _2799_i = (_2799_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _2797_onErased;
        }
      } else if (_source21.is_IndexRange) {
        DAST._IExpression _2808___mcc_h206 = _source21.dtor_expr;
        bool _2809___mcc_h207 = _source21.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _2810___mcc_h208 = _source21.dtor_low;
        DAST._IOptional<DAST._IExpression> _2811___mcc_h209 = _source21.dtor_high;
        DAST._IOptional<DAST._IExpression> _2812_high = _2811___mcc_h209;
        DAST._IOptional<DAST._IExpression> _2813_low = _2810___mcc_h208;
        bool _2814_isArray = _2809___mcc_h207;
        DAST._IExpression _2815_on = _2808___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _2816_onString;
          bool _2817_onOwned;
          bool _2818_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2819_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1629;
          bool _out1630;
          bool _out1631;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1632;
          DCOMP.COMP.GenExpr(_2815_on, selfIdent, @params, false, out _out1629, out _out1630, out _out1631, out _out1632);
          _2816_onString = _out1629;
          _2817_onOwned = _out1630;
          _2818_onErased = _out1631;
          _2819_recIdents = _out1632;
          readIdents = _2819_recIdents;
          s = _2816_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2820_lowString;
          _2820_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source82 = _2813_low;
          if (_source82.is_Some) {
            DAST._IExpression _2821___mcc_h1195 = _source82.dtor_Some_a0;
            DAST._IExpression _2822_l = _2821___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _2823_lString;
              bool _2824___v84;
              bool _2825_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2826_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1633;
              bool _out1634;
              bool _out1635;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
              DCOMP.COMP.GenExpr(_2822_l, selfIdent, @params, true, out _out1633, out _out1634, out _out1635, out _out1636);
              _2823_lString = _out1633;
              _2824___v84 = _out1634;
              _2825_lErased = _out1635;
              _2826_recIdentsL = _out1636;
              if (!(_2825_lErased)) {
                _2823_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2823_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2820_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2823_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2826_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _2827_highString;
          _2827_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source83 = _2812_high;
          if (_source83.is_Some) {
            DAST._IExpression _2828___mcc_h1196 = _source83.dtor_Some_a0;
            DAST._IExpression _2829_h = _2828___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _2830_hString;
              bool _2831___v85;
              bool _2832_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2833_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1637;
              bool _out1638;
              bool _out1639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1640;
              DCOMP.COMP.GenExpr(_2829_h, selfIdent, @params, true, out _out1637, out _out1638, out _out1639, out _out1640);
              _2830_hString = _out1637;
              _2831___v85 = _out1638;
              _2832_hErased = _out1639;
              _2833_recIdentsH = _out1640;
              if (!(_2832_hErased)) {
                _2830_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _2830_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _2827_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_2830_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2833_recIdentsH);
            }
          } else {
          }
          if (_2814_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source84) => {
            if (_source84.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2834___mcc_h1197 = _source84.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2835_l = _2834___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2835_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2820_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source85) => {
            if (_source85.is_Some) {
              Dafny.ISequence<Dafny.Rune> _2836___mcc_h1198 = _source85.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _2837_h = _2836___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _2837_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_2827_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _2818_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source21.is_TupleSelect) {
        DAST._IExpression _2838___mcc_h210 = _source21.dtor_expr;
        BigInteger _2839___mcc_h211 = _source21.dtor_index;
        BigInteger _2840_idx = _2839___mcc_h211;
        DAST._IExpression _2841_on = _2838___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _2842_onString;
          bool _2843___v86;
          bool _2844_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2845_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1641;
          bool _out1642;
          bool _out1643;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1644;
          DCOMP.COMP.GenExpr(_2841_on, selfIdent, @params, false, out _out1641, out _out1642, out _out1643, out _out1644);
          _2842_onString = _out1641;
          _2843___v86 = _out1642;
          _2844_tupErased = _out1643;
          _2845_recIdents = _out1644;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2842_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), RAST.__default.natToString(_2840_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _2844_tupErased;
          readIdents = _2845_recIdents;
        }
      } else if (_source21.is_Call) {
        DAST._IExpression _2846___mcc_h212 = _source21.dtor_on;
        Dafny.ISequence<Dafny.Rune> _2847___mcc_h213 = _source21.dtor_name;
        Dafny.ISequence<DAST._IType> _2848___mcc_h214 = _source21.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2849___mcc_h215 = _source21.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2850_args = _2849___mcc_h215;
        Dafny.ISequence<DAST._IType> _2851_typeArgs = _2848___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _2852_name = _2847___mcc_h213;
        DAST._IExpression _2853_on = _2846___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2854_typeArgString;
          _2854_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2851_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2855_typeI;
            _2855_typeI = BigInteger.Zero;
            _2854_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_2855_typeI) < (new BigInteger((_2851_typeArgs).Count))) {
              if ((_2855_typeI).Sign == 1) {
                _2854_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2854_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _2856_typeString;
              Dafny.ISequence<Dafny.Rune> _out1645;
              _out1645 = DCOMP.COMP.GenType((_2851_typeArgs).Select(_2855_typeI), false, false);
              _2856_typeString = _out1645;
              _2854_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2854_typeArgString, _2856_typeString);
              _2855_typeI = (_2855_typeI) + (BigInteger.One);
            }
            _2854_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_2854_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _2857_argString;
          _2857_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2858_i;
          _2858_i = BigInteger.Zero;
          while ((_2858_i) < (new BigInteger((_2850_args).Count))) {
            if ((_2858_i).Sign == 1) {
              _2857_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2857_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2859_argExpr;
            bool _2860_isOwned;
            bool _2861_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2862_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1646;
            bool _out1647;
            bool _out1648;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
            DCOMP.COMP.GenExpr((_2850_args).Select(_2858_i), selfIdent, @params, false, out _out1646, out _out1647, out _out1648, out _out1649);
            _2859_argExpr = _out1646;
            _2860_isOwned = _out1647;
            _2861_argErased = _out1648;
            _2862_argIdents = _out1649;
            if (_2860_isOwned) {
              _2859_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _2859_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_2861_argErased)) {
              _2859_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _2859_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _2859_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _2859_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _2857_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2857_argString, _2859_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2862_argIdents);
            _2858_i = (_2858_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2863_enclosingString;
          bool _2864___v87;
          bool _2865___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2866_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1650;
          bool _out1651;
          bool _out1652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
          DCOMP.COMP.GenExpr(_2853_on, selfIdent, @params, false, out _out1650, out _out1651, out _out1652, out _out1653);
          _2863_enclosingString = _out1650;
          _2864___v87 = _out1651;
          _2865___v88 = _out1652;
          _2866_recIdents = _out1653;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2866_recIdents);
          DAST._IExpression _source86 = _2853_on;
          if (_source86.is_Literal) {
            DAST._ILiteral _2867___mcc_h1199 = _source86.dtor_Literal_a0;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2868___mcc_h1201 = _source86.dtor_Ident_a0;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2869___mcc_h1203 = _source86.dtor_Companion_a0;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2863_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2870___mcc_h1205 = _source86.dtor_Tuple_a0;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2871___mcc_h1207 = _source86.dtor_path;
            Dafny.ISequence<DAST._IType> _2872___mcc_h1208 = _source86.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2873___mcc_h1209 = _source86.dtor_args;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2874___mcc_h1213 = _source86.dtor_dims;
            DAST._IType _2875___mcc_h1214 = _source86.dtor_typ;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2876___mcc_h1217 = _source86.dtor_path;
            Dafny.ISequence<DAST._IType> _2877___mcc_h1218 = _source86.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2878___mcc_h1219 = _source86.dtor_variant;
            bool _2879___mcc_h1220 = _source86.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2880___mcc_h1221 = _source86.dtor_contents;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Convert) {
            DAST._IExpression _2881___mcc_h1227 = _source86.dtor_value;
            DAST._IType _2882___mcc_h1228 = _source86.dtor_from;
            DAST._IType _2883___mcc_h1229 = _source86.dtor_typ;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_SeqConstruct) {
            DAST._IExpression _2884___mcc_h1233 = _source86.dtor_length;
            DAST._IExpression _2885___mcc_h1234 = _source86.dtor_elem;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2886___mcc_h1237 = _source86.dtor_elements;
            DAST._IType _2887___mcc_h1238 = _source86.dtor_typ;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2888___mcc_h1241 = _source86.dtor_elements;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2889___mcc_h1243 = _source86.dtor_mapElems;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_This) {
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Ite) {
            DAST._IExpression _2890___mcc_h1245 = _source86.dtor_cond;
            DAST._IExpression _2891___mcc_h1246 = _source86.dtor_thn;
            DAST._IExpression _2892___mcc_h1247 = _source86.dtor_els;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_UnOp) {
            DAST._IUnaryOp _2893___mcc_h1251 = _source86.dtor_unOp;
            DAST._IExpression _2894___mcc_h1252 = _source86.dtor_expr;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_BinOp) {
            DAST._IBinOp _2895___mcc_h1255 = _source86.dtor_op;
            DAST._IExpression _2896___mcc_h1256 = _source86.dtor_left;
            DAST._IExpression _2897___mcc_h1257 = _source86.dtor_right;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_ArrayLen) {
            DAST._IExpression _2898___mcc_h1261 = _source86.dtor_expr;
            BigInteger _2899___mcc_h1262 = _source86.dtor_dim;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Select) {
            DAST._IExpression _2900___mcc_h1265 = _source86.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2901___mcc_h1266 = _source86.dtor_field;
            bool _2902___mcc_h1267 = _source86.dtor_isConstant;
            bool _2903___mcc_h1268 = _source86.dtor_onDatatype;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_SelectFn) {
            DAST._IExpression _2904___mcc_h1273 = _source86.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2905___mcc_h1274 = _source86.dtor_field;
            bool _2906___mcc_h1275 = _source86.dtor_onDatatype;
            bool _2907___mcc_h1276 = _source86.dtor_isStatic;
            BigInteger _2908___mcc_h1277 = _source86.dtor_arity;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Index) {
            DAST._IExpression _2909___mcc_h1283 = _source86.dtor_expr;
            DAST._ICollKind _2910___mcc_h1284 = _source86.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2911___mcc_h1285 = _source86.dtor_indices;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_IndexRange) {
            DAST._IExpression _2912___mcc_h1289 = _source86.dtor_expr;
            bool _2913___mcc_h1290 = _source86.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _2914___mcc_h1291 = _source86.dtor_low;
            DAST._IOptional<DAST._IExpression> _2915___mcc_h1292 = _source86.dtor_high;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_TupleSelect) {
            DAST._IExpression _2916___mcc_h1297 = _source86.dtor_expr;
            BigInteger _2917___mcc_h1298 = _source86.dtor_index;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Call) {
            DAST._IExpression _2918___mcc_h1301 = _source86.dtor_on;
            Dafny.ISequence<Dafny.Rune> _2919___mcc_h1302 = _source86.dtor_name;
            Dafny.ISequence<DAST._IType> _2920___mcc_h1303 = _source86.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2921___mcc_h1304 = _source86.dtor_args;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2922___mcc_h1309 = _source86.dtor_params;
            DAST._IType _2923___mcc_h1310 = _source86.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2924___mcc_h1311 = _source86.dtor_body;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2925___mcc_h1315 = _source86.dtor_values;
            DAST._IType _2926___mcc_h1316 = _source86.dtor_retType;
            DAST._IExpression _2927___mcc_h1317 = _source86.dtor_expr;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2928___mcc_h1321 = _source86.dtor_name;
            DAST._IType _2929___mcc_h1322 = _source86.dtor_typ;
            DAST._IExpression _2930___mcc_h1323 = _source86.dtor_value;
            DAST._IExpression _2931___mcc_h1324 = _source86.dtor_iifeBody;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_Apply) {
            DAST._IExpression _2932___mcc_h1329 = _source86.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2933___mcc_h1330 = _source86.dtor_args;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_TypeTest) {
            DAST._IExpression _2934___mcc_h1333 = _source86.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2935___mcc_h1334 = _source86.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2936___mcc_h1335 = _source86.dtor_variant;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_InitializationValue) {
            DAST._IType _2937___mcc_h1339 = _source86.dtor_typ;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_BoolBoundedPool) {
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_SetBoundedPool) {
            DAST._IExpression _2938___mcc_h1341 = _source86.dtor_of;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else if (_source86.is_SeqBoundedPool) {
            DAST._IExpression _2939___mcc_h1343 = _source86.dtor_of;
            bool _2940___mcc_h1344 = _source86.dtor_includeDuplicates;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          } else {
            DAST._IExpression _2941___mcc_h1347 = _source86.dtor_lo;
            DAST._IExpression _2942___mcc_h1348 = _source86.dtor_hi;
            {
              _2863_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2863_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_2852_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2863_enclosingString, _2854_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2857_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _2943___mcc_h216 = _source21.dtor_params;
        DAST._IType _2944___mcc_h217 = _source21.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _2945___mcc_h218 = _source21.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2946_body = _2945___mcc_h218;
        DAST._IType _2947_retType = _2944___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _2948_params = _2943___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2949_paramNames;
          _2949_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2950_i;
          _2950_i = BigInteger.Zero;
          while ((_2950_i) < (new BigInteger((_2948_params).Count))) {
            _2949_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2949_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_2948_params).Select(_2950_i)).dtor_name));
            _2950_i = (_2950_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2951_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2952_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1655;
          DCOMP.COMP.GenStmts(_2946_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _2949_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1654, out _out1655);
          _2951_recursiveGen = _out1654;
          _2952_recIdents = _out1655;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2953_allReadCloned;
          _2953_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_2952_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _2954_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_2952_recIdents).Elements) {
              _2954_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_2952_recIdents).Contains(_2954_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 2218)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_2954_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _2953_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_2953_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_2949_paramNames).Contains(_2954_next))) {
              _2953_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2953_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_2954_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_2954_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2954_next));
            }
            _2952_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2952_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2954_next));
          }
          Dafny.ISequence<Dafny.Rune> _2955_paramsString;
          _2955_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _2956_paramTypes;
          _2956_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2950_i = BigInteger.Zero;
          while ((_2950_i) < (new BigInteger((_2948_params).Count))) {
            if ((_2950_i).Sign == 1) {
              _2955_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2955_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _2956_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_2956_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2957_typStr;
            Dafny.ISequence<Dafny.Rune> _out1656;
            _out1656 = DCOMP.COMP.GenType(((_2948_params).Select(_2950_i)).dtor_typ, false, true);
            _2957_typStr = _out1656;
            _2955_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2955_paramsString, ((_2948_params).Select(_2950_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _2957_typStr);
            _2956_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2956_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _2957_typStr);
            _2950_i = (_2950_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2958_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1657;
          _out1657 = DCOMP.COMP.GenType(_2947_retType, false, true);
          _2958_retTypeGen = _out1657;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _2956_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _2958_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _2953_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _2955_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _2958_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _2951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2959___mcc_h219 = _source21.dtor_values;
        DAST._IType _2960___mcc_h220 = _source21.dtor_retType;
        DAST._IExpression _2961___mcc_h221 = _source21.dtor_expr;
        DAST._IExpression _2962_expr = _2961___mcc_h221;
        DAST._IType _2963_retType = _2960___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2964_values = _2959___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2965_paramNames;
          _2965_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2966_paramNamesSet;
          _2966_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _2967_i;
          _2967_i = BigInteger.Zero;
          while ((_2967_i) < (new BigInteger((_2964_values).Count))) {
            _2965_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2965_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2964_values).Select(_2967_i)).dtor__0).dtor_name));
            _2966_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2966_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_2964_values).Select(_2967_i)).dtor__0).dtor_name));
            _2967_i = (_2967_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _2968_paramsString;
          _2968_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _2967_i = BigInteger.Zero;
          while ((_2967_i) < (new BigInteger((_2964_values).Count))) {
            if ((_2967_i).Sign == 1) {
              _2968_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_2968_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _2969_typStr;
            Dafny.ISequence<Dafny.Rune> _out1658;
            _out1658 = DCOMP.COMP.GenType((((_2964_values).Select(_2967_i)).dtor__0).dtor_typ, false, true);
            _2969_typStr = _out1658;
            Dafny.ISequence<Dafny.Rune> _2970_valueGen;
            bool _2971___v91;
            bool _2972_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2973_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1659;
            bool _out1660;
            bool _out1661;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
            DCOMP.COMP.GenExpr(((_2964_values).Select(_2967_i)).dtor__1, selfIdent, @params, true, out _out1659, out _out1660, out _out1661, out _out1662);
            _2970_valueGen = _out1659;
            _2971___v91 = _out1660;
            _2972_valueErased = _out1661;
            _2973_recIdents = _out1662;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_2964_values).Select(_2967_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2969_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2973_recIdents);
            if (_2972_valueErased) {
              _2970_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2970_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2970_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _2967_i = (_2967_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _2974_recGen;
          bool _2975_recOwned;
          bool _2976_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2977_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          bool _out1664;
          bool _out1665;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
          DCOMP.COMP.GenExpr(_2962_expr, selfIdent, _2965_paramNames, mustOwn, out _out1663, out _out1664, out _out1665, out _out1666);
          _2974_recGen = _out1663;
          _2975_recOwned = _out1664;
          _2976_recErased = _out1665;
          _2977_recIdents = _out1666;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2977_recIdents, _2966_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _2974_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _2975_recOwned;
          isErased = _2976_recErased;
        }
      } else if (_source21.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _2978___mcc_h222 = _source21.dtor_name;
        DAST._IType _2979___mcc_h223 = _source21.dtor_typ;
        DAST._IExpression _2980___mcc_h224 = _source21.dtor_value;
        DAST._IExpression _2981___mcc_h225 = _source21.dtor_iifeBody;
        DAST._IExpression _2982_iifeBody = _2981___mcc_h225;
        DAST._IExpression _2983_value = _2980___mcc_h224;
        DAST._IType _2984_tpe = _2979___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _2985_name = _2978___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _2986_valueGen;
          bool _2987___v92;
          bool _2988_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2989_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          bool _out1668;
          bool _out1669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1670;
          DCOMP.COMP.GenExpr(_2983_value, selfIdent, @params, true, out _out1667, out _out1668, out _out1669, out _out1670);
          _2986_valueGen = _out1667;
          _2987___v92 = _out1668;
          _2988_valueErased = _out1669;
          _2989_recIdents = _out1670;
          if (_2988_valueErased) {
            _2986_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2986_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _2989_recIdents;
          Dafny.ISequence<Dafny.Rune> _2990_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1671;
          _out1671 = DCOMP.COMP.GenType(_2984_tpe, false, true);
          _2990_valueTypeGen = _out1671;
          Dafny.ISequence<Dafny.Rune> _2991_bodyGen;
          bool _2992___v93;
          bool _2993_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2994_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1672;
          bool _out1673;
          bool _out1674;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
          DCOMP.COMP.GenExpr(_2982_iifeBody, selfIdent, @params, true, out _out1672, out _out1673, out _out1674, out _out1675);
          _2991_bodyGen = _out1672;
          _2992___v93 = _out1673;
          _2993_bodyErased = _out1674;
          _2994_bodyIdents = _out1675;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2994_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2985_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_2985_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _2990_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _2986_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _2991_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _2993_bodyErased;
        }
      } else if (_source21.is_Apply) {
        DAST._IExpression _2995___mcc_h226 = _source21.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2996___mcc_h227 = _source21.dtor_args;
        Dafny.ISequence<DAST._IExpression> _2997_args = _2996___mcc_h227;
        DAST._IExpression _2998_func = _2995___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _2999_funcString;
          bool _3000___v94;
          bool _3001_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3002_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_2998_func, selfIdent, @params, false, out _out1676, out _out1677, out _out1678, out _out1679);
          _2999_funcString = _out1676;
          _3000___v94 = _out1677;
          _3001_funcErased = _out1678;
          _3002_recIdents = _out1679;
          readIdents = _3002_recIdents;
          Dafny.ISequence<Dafny.Rune> _3003_argString;
          _3003_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3004_i;
          _3004_i = BigInteger.Zero;
          while ((_3004_i) < (new BigInteger((_2997_args).Count))) {
            if ((_3004_i).Sign == 1) {
              _3003_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3003_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3005_argExpr;
            bool _3006_isOwned;
            bool _3007_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3008_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1680;
            bool _out1681;
            bool _out1682;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1683;
            DCOMP.COMP.GenExpr((_2997_args).Select(_3004_i), selfIdent, @params, false, out _out1680, out _out1681, out _out1682, out _out1683);
            _3005_argExpr = _out1680;
            _3006_isOwned = _out1681;
            _3007_argErased = _out1682;
            _3008_argIdents = _out1683;
            if (_3006_isOwned) {
              _3005_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3005_argExpr);
            }
            _3003_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3003_argString, _3005_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3008_argIdents);
            _3004_i = (_3004_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2999_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3003_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source21.is_TypeTest) {
        DAST._IExpression _3009___mcc_h228 = _source21.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3010___mcc_h229 = _source21.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3011___mcc_h230 = _source21.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3012_variant = _3011___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3013_dType = _3010___mcc_h229;
        DAST._IExpression _3014_on = _3009___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3015_exprGen;
          bool _3016___v95;
          bool _3017_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3018_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1684;
          bool _out1685;
          bool _out1686;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1687;
          DCOMP.COMP.GenExpr(_3014_on, selfIdent, @params, false, out _out1684, out _out1685, out _out1686, out _out1687);
          _3015_exprGen = _out1684;
          _3016___v95 = _out1685;
          _3017_exprErased = _out1686;
          _3018_recIdents = _out1687;
          Dafny.ISequence<Dafny.Rune> _3019_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1688;
          _out1688 = DCOMP.COMP.GenPath(_3013_dType);
          _3019_dTypePath = _out1688;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3015_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3019_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3012_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3018_recIdents;
        }
      } else if (_source21.is_InitializationValue) {
        DAST._IType _3020___mcc_h231 = _source21.dtor_typ;
        DAST._IType _3021_typ = _3020___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3022_typString;
          Dafny.ISequence<Dafny.Rune> _out1689;
          _out1689 = DCOMP.COMP.GenType(_3021_typ, false, false);
          _3022_typString = _out1689;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3022_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source21.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source21.is_SetBoundedPool) {
        DAST._IExpression _3023___mcc_h232 = _source21.dtor_of;
        DAST._IExpression _3024_of = _3023___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3025_exprGen;
          bool _3026___v96;
          bool _3027_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3028_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1690;
          bool _out1691;
          bool _out1692;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1693;
          DCOMP.COMP.GenExpr(_3024_of, selfIdent, @params, false, out _out1690, out _out1691, out _out1692, out _out1693);
          _3025_exprGen = _out1690;
          _3026___v96 = _out1691;
          _3027_exprErased = _out1692;
          _3028_recIdents = _out1693;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3025_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3027_exprErased;
          readIdents = _3028_recIdents;
        }
      } else if (_source21.is_SeqBoundedPool) {
        DAST._IExpression _3029___mcc_h233 = _source21.dtor_of;
        bool _3030___mcc_h234 = _source21.dtor_includeDuplicates;
        bool _3031_includeDuplicates = _3030___mcc_h234;
        DAST._IExpression _3032_of = _3029___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3033_exprGen;
          bool _3034___v97;
          bool _3035_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3036_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1694;
          bool _out1695;
          bool _out1696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1697;
          DCOMP.COMP.GenExpr(_3032_of, selfIdent, @params, false, out _out1694, out _out1695, out _out1696, out _out1697);
          _3033_exprGen = _out1694;
          _3034___v97 = _out1695;
          _3035_exprErased = _out1696;
          _3036_recIdents = _out1697;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3033_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3031_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3035_exprErased;
          readIdents = _3036_recIdents;
        }
      } else {
        DAST._IExpression _3037___mcc_h235 = _source21.dtor_lo;
        DAST._IExpression _3038___mcc_h236 = _source21.dtor_hi;
        DAST._IExpression _3039_hi = _3038___mcc_h236;
        DAST._IExpression _3040_lo = _3037___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3041_loString;
          bool _3042___v98;
          bool _3043_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3044_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1698;
          bool _out1699;
          bool _out1700;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1701;
          DCOMP.COMP.GenExpr(_3040_lo, selfIdent, @params, true, out _out1698, out _out1699, out _out1700, out _out1701);
          _3041_loString = _out1698;
          _3042___v98 = _out1699;
          _3043_loErased = _out1700;
          _3044_recIdentsLo = _out1701;
          Dafny.ISequence<Dafny.Rune> _3045_hiString;
          bool _3046___v99;
          bool _3047_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3048_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1702;
          bool _out1703;
          bool _out1704;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1705;
          DCOMP.COMP.GenExpr(_3039_hi, selfIdent, @params, true, out _out1702, out _out1703, out _out1704, out _out1705);
          _3045_hiString = _out1702;
          _3046___v99 = _out1703;
          _3047_hiErased = _out1704;
          _3048_recIdentsHi = _out1705;
          if (!(_3043_loErased)) {
            _3041_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3041_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3047_hiErased)) {
            _3045_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3045_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3041_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3045_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3044_recIdentsLo, _3048_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3049_i;
      _3049_i = BigInteger.Zero;
      while ((_3049_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3050_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _3051_m;
        RAST._IMod _out1706;
        _out1706 = DCOMP.COMP.GenModule((p).Select(_3049_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3051_m = _out1706;
        _3050_generated = (_3051_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_3049_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3050_generated);
        _3049_i = (_3049_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3052_i;
      _3052_i = BigInteger.Zero;
      while ((_3052_i) < (new BigInteger((fullName).Count))) {
        if ((_3052_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3052_i));
        _3052_i = (_3052_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

