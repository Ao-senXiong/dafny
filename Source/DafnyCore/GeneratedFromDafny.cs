// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    DAST._IOptional<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly DAST._IOptional<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, DAST.Optional<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, DAST._IOptional<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    DAST._IOptional<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly DAST._IOptional<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, DAST._IOptional<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Optional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IOptional<T> {
    bool is_Some { get; }
    bool is_None { get; }
    T dtor_Some_a0 { get; }
    _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public abstract class Optional<T> : _IOptional<T> {
    public Optional() {
    }
    public static DAST._IOptional<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAST._IOptional<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAST._IOptional<T>>(DAST.Optional<T>.Default());
    }
    public static _IOptional<T> create_Some(T _a0) {
      return new Optional_Some<T>(_a0);
    }
    public static _IOptional<T> create_None() {
      return new Optional_None<T>();
    }
    public bool is_Some { get { return this is Optional_Some<T>; } }
    public bool is_None { get { return this is Optional_None<T>; } }
    public T dtor_Some_a0 {
      get {
        var d = this;
        return ((Optional_Some<T>)d)._a0;
      }
    }
    public abstract _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0);
  }
  public class Optional_Some<T> : Optional<T> {
    public readonly T _a0;
    public Optional_Some(T _a0) : base() {
      this._a0 = _a0;
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_Some<__T>(converter0(_a0));
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_Some<T>;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Optional_None<T> : Optional<T> {
    public Optional_None() : base() {
    }
    public override _IOptional<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOptional<__T> dt) { return dt; }
      return new Optional_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Optional_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Optional.None";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    DAST._IOptional<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), DAST.Optional<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public DAST._IOptional<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IOptional<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IOptional<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(DAST._IOptional<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    DAST._IOptional<DAST._IExpression> dtor_low { get; }
    DAST._IOptional<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public DAST._IOptional<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly DAST._IOptional<DAST._IExpression> _low;
    public readonly DAST._IOptional<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, DAST._IOptional<DAST._IExpression> low, DAST._IOptional<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST
namespace DAM.Utils {

  public partial class __default {
    public static DAM.Utils._IOption<__A> SeqGet<__A>(Dafny.ISequence<__A> s, BigInteger idx) {
      if ((idx) < (new BigInteger((s).Count))) {
        return DAM.Utils.Option<__A>.create_Some((s).Select(idx));
      } else {
        return DAM.Utils.Option<__A>.create_None();
      }
    }
    public static _System._ITuple2<BigInteger, Dafny.ISequence<__A>> Extend<__A>(Dafny.ISequence<__A> s, __A elt) {
      return _System.Tuple2<BigInteger, Dafny.ISequence<__A>>.create(new BigInteger((s).Count), Dafny.Sequence<__A>.Concat(s, Dafny.Sequence<__A>.FromElements(elt)));
    }
    public static DAM.Utils._IOption<__V> mapGet<__K, __V>(Dafny.IMap<__K, __V> m, __K k) {
      if ((m).Contains(k)) {
        return DAM.Utils.Option<__V>.create_Some(Dafny.Map<__K, __V>.Select(m, k));
      } else {
        return DAM.Utils.Option<__V>.create_None();
      }
    }
    public static DAM.Utils._IOption<Dafny.IMap<__K, __V>> mapOption<__K, __V>(Dafny.IMap<__K, DAM.Utils._IOption<__V>> m) {
      if (Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, bool>>((m) => Dafny.Helpers.Quantifier<__K>((m).Keys.Elements, true, (((_forall_var_0) => {
        __K k = (__K)_forall_var_0;
        return !((m).Contains(k)) || ((Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).is_Some);
      }))))(m)) {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_Some(Dafny.Helpers.Id<Func<Dafny.IMap<__K, DAM.Utils._IOption<__V>>, Dafny.IMap<__K, __V>>>((m) => ((System.Func<Dafny.IMap<__K, __V>>)(() => {
          var _coll0 = new System.Collections.Generic.List<Dafny.Pair<__K, __V>>();
          foreach (__K _compr_0 in (m).Keys.Elements) {
            __K k = (__K)_compr_0;
            if ((m).Contains(k)) {
              _coll0.Add(new Dafny.Pair<__K, __V>(k, (Dafny.Map<__K, DAM.Utils._IOption<__V>>.Select(m, k)).Extract()));
            }
          }
          return Dafny.Map<__K, __V>.FromCollection(_coll0);
        }))())(m));
      } else {
        return DAM.Utils.Option<Dafny.IMap<__K, __V>>.create_None();
      }
    }
  }

  public interface _IOption<A> {
    bool is_None { get; }
    bool is_Some { get; }
    A dtor_value { get; }
    _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    bool IsFailure();
    DAM.Utils._IOption<__B> PropagateFailure<__B>();
    A Extract();
    A GetOr(A @default);
  }
  public abstract class Option<A> : _IOption<A> {
    public Option() {
    }
    public static DAM.Utils._IOption<A> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<DAM.Utils._IOption<A>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<DAM.Utils._IOption<A>>(DAM.Utils.Option<A>.Default());
    }
    public static _IOption<A> create_None() {
      return new Option_None<A>();
    }
    public static _IOption<A> create_Some(A @value) {
      return new Option_Some<A>(@value);
    }
    public bool is_None { get { return this is Option_None<A>; } }
    public bool is_Some { get { return this is Option_Some<A>; } }
    public A dtor_value {
      get {
        var d = this;
        return ((Option_Some<A>)d)._value;
      }
    }
    public abstract _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public DAM.Utils._IOption<__B> PropagateFailure<__B>() {
      return DAM.Utils.Option<__B>.create_None();
    }
    public A Extract() {
      return (this).dtor_value;
    }
    public A GetOr(A @default) {
      DAM.Utils._IOption<A> _source0 = this;
      if (_source0.is_None) {
        return @default;
      } else {
        A __mcc_h0 = _source0.dtor_value;
        A v = __mcc_h0;
        return v;
      }
    }
  }
  public class Option_None<A> : Option<A> {
    public Option_None() : base() {
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_None<__A>();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_None<A>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.None";
      return s;
    }
  }
  public class Option_Some<A> : Option<A> {
    public readonly A _value;
    public Option_Some(A @value) : base() {
      this._value = @value;
    }
    public override _IOption<__A> DowncastClone<__A>(Func<A, __A> converter0) {
      if (this is _IOption<__A> dt) { return dt; }
      return new Option_Some<__A>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Utils.Option_Some<A>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Utils.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Utils
namespace DAM.Syntax {

  public partial class __default {
    public static DAM.Syntax._IStmt Let(DAM.Syntax._IExpr lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IPos ty, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Call(DAM.Syntax.Stmt.create_Func(var__, ty, rhs), lhs);
    }
    public static DAM.Syntax._INeg Command() {
      return DAM.Syntax.Neg.create_Value(DAM.Syntax.Pos.create_Unit());
    }
    public static DAM.Syntax._IStmt Then(DAM.Syntax._IStmt lhs, DAM.Syntax._IStmt rhs) {
      return DAM.Syntax.Stmt.create_Bind(lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), rhs);
    }
    public static DAM.Syntax._IStmt Skip() {
      return DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Unit());
    }
    public static DAM.Syntax._IStmt While(DAM.Syntax._IStmt guard, DAM.Syntax._IStmt body, DAM.Syntax._IStmt next) {
      return DAM.Syntax.Stmt.create_Rec(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), DAM.Syntax.__default.Command(), DAM.Syntax.Stmt.create_Bind(guard, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), DAM.Syntax.__default.Then(body, DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while")))), next)));
    }
  }

  public interface _IPos {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    DAM.Syntax._INeg dtor_neg { get; }
    DAM.Syntax._IPos dtor_ref { get; }
    DAM.Syntax._INeg dtor_start { get; }
    _IPos DowncastClone();
  }
  public abstract class Pos : _IPos {
    public Pos() {
    }
    private static readonly DAM.Syntax._IPos theDefault = create_Unit();
    public static DAM.Syntax._IPos Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IPos> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IPos>(DAM.Syntax.Pos.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IPos> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPos create_Unit() {
      return new Pos_Unit();
    }
    public static _IPos create_Bool() {
      return new Pos_Bool();
    }
    public static _IPos create_Int() {
      return new Pos_Int();
    }
    public static _IPos create_Thunk(DAM.Syntax._INeg neg) {
      return new Pos_Thunk(neg);
    }
    public static _IPos create_Ref(DAM.Syntax._IPos @ref) {
      return new Pos_Ref(@ref);
    }
    public static _IPos create_Stack(DAM.Syntax._INeg start) {
      return new Pos_Stack(start);
    }
    public bool is_Unit { get { return this is Pos_Unit; } }
    public bool is_Bool { get { return this is Pos_Bool; } }
    public bool is_Int { get { return this is Pos_Int; } }
    public bool is_Thunk { get { return this is Pos_Thunk; } }
    public bool is_Ref { get { return this is Pos_Ref; } }
    public bool is_Stack { get { return this is Pos_Stack; } }
    public DAM.Syntax._INeg dtor_neg {
      get {
        var d = this;
        return ((Pos_Thunk)d)._neg;
      }
    }
    public DAM.Syntax._IPos dtor_ref {
      get {
        var d = this;
        return ((Pos_Ref)d)._ref;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Pos_Stack)d)._start;
      }
    }
    public abstract _IPos DowncastClone();
  }
  public class Pos_Unit : Pos {
    public Pos_Unit() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Unit";
      return s;
    }
  }
  public class Pos_Bool : Pos {
    public Pos_Bool() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Bool";
      return s;
    }
  }
  public class Pos_Int : Pos {
    public Pos_Int() : base() {
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Int";
      return s;
    }
  }
  public class Pos_Thunk : Pos {
    public readonly DAM.Syntax._INeg _neg;
    public Pos_Thunk(DAM.Syntax._INeg neg) : base() {
      this._neg = neg;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Thunk(_neg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Thunk;
      return oth != null && object.Equals(this._neg, oth._neg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._neg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._neg);
      s += ")";
      return s;
    }
  }
  public class Pos_Ref : Pos {
    public readonly DAM.Syntax._IPos _ref;
    public Pos_Ref(DAM.Syntax._IPos @ref) : base() {
      this._ref = @ref;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Ref(_ref);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Ref;
      return oth != null && object.Equals(this._ref, oth._ref);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ")";
      return s;
    }
  }
  public class Pos_Stack : Pos {
    public readonly DAM.Syntax._INeg _start;
    public Pos_Stack(DAM.Syntax._INeg start) : base() {
      this._start = start;
    }
    public override _IPos DowncastClone() {
      if (this is _IPos dt) { return dt; }
      return new Pos_Stack(_start);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Pos_Stack;
      return oth != null && object.Equals(this._start, oth._start);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Pos.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ")";
      return s;
    }
  }

  public interface _INeg {
    bool is_Value { get; }
    bool is_Function { get; }
    bool is_Record { get; }
    DAM.Syntax._IPos dtor_pos { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._INeg dtor_cod { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields { get; }
    _INeg DowncastClone();
  }
  public abstract class Neg : _INeg {
    public Neg() {
    }
    private static readonly DAM.Syntax._INeg theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>.Empty);
    public static DAM.Syntax._INeg Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._INeg> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._INeg>(DAM.Syntax.Neg.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._INeg> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INeg create_Value(DAM.Syntax._IPos pos) {
      return new Neg_Value(pos);
    }
    public static _INeg create_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) {
      return new Neg_Function(dom, cod);
    }
    public static _INeg create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) {
      return new Neg_Record(fields);
    }
    public bool is_Value { get { return this is Neg_Value; } }
    public bool is_Function { get { return this is Neg_Function; } }
    public bool is_Record { get { return this is Neg_Record; } }
    public DAM.Syntax._IPos dtor_pos {
      get {
        var d = this;
        return ((Neg_Value)d)._pos;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Neg_Function)d)._dom;
      }
    }
    public DAM.Syntax._INeg dtor_cod {
      get {
        var d = this;
        return ((Neg_Function)d)._cod;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> dtor_fields {
      get {
        var d = this;
        return ((Neg_Record)d)._fields;
      }
    }
    public abstract _INeg DowncastClone();
  }
  public class Neg_Value : Neg {
    public readonly DAM.Syntax._IPos _pos;
    public Neg_Value(DAM.Syntax._IPos pos) : base() {
      this._pos = pos;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Value(_pos);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Value;
      return oth != null && object.Equals(this._pos, oth._pos);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pos));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Value";
      s += "(";
      s += Dafny.Helpers.ToString(this._pos);
      s += ")";
      return s;
    }
  }
  public class Neg_Function : Neg {
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._INeg _cod;
    public Neg_Function(DAM.Syntax._IPos dom, DAM.Syntax._INeg cod) : base() {
      this._dom = dom;
      this._cod = cod;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Function(_dom, _cod);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Function;
      return oth != null && object.Equals(this._dom, oth._dom) && object.Equals(this._cod, oth._cod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Function";
      s += "(";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cod);
      s += ")";
      return s;
    }
  }
  public class Neg_Record : Neg {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _fields;
    public Neg_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> fields) : base() {
      this._fields = fields;
    }
    public override _INeg DowncastClone() {
      if (this is _INeg dt) { return dt; }
      return new Neg_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Neg_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Neg.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_Var { get; }
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Var_a0 { get; }
    bool dtor_Bool_a0 { get; }
    BigInteger dtor_Int_a0 { get; }
    DAM.Syntax._IStmt dtor_Thunk_a0 { get; }
    _IExpr DowncastClone();
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly DAM.Syntax._IExpr theDefault = create_Var(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAM.Syntax._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IExpr>(DAM.Syntax.Expr.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_Var(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expr_Var(_a0);
    }
    public static _IExpr create_Unit() {
      return new Expr_Unit();
    }
    public static _IExpr create_Bool(bool _a0) {
      return new Expr_Bool(_a0);
    }
    public static _IExpr create_Int(BigInteger _a0) {
      return new Expr_Int(_a0);
    }
    public static _IExpr create_Thunk(DAM.Syntax._IStmt _a0) {
      return new Expr_Thunk(_a0);
    }
    public bool is_Var { get { return this is Expr_Var; } }
    public bool is_Unit { get { return this is Expr_Unit; } }
    public bool is_Bool { get { return this is Expr_Bool; } }
    public bool is_Int { get { return this is Expr_Int; } }
    public bool is_Thunk { get { return this is Expr_Thunk; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Var_a0 {
      get {
        var d = this;
        return ((Expr_Var)d)._a0;
      }
    }
    public bool dtor_Bool_a0 {
      get {
        var d = this;
        return ((Expr_Bool)d)._a0;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Expr_Int)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_Thunk_a0 {
      get {
        var d = this;
        return ((Expr_Thunk)d)._a0;
      }
    }
    public abstract _IExpr DowncastClone();
  }
  public class Expr_Var : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expr_Var(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Var(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Var;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Var";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Unit : Expr {
    public Expr_Unit() : base() {
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Unit";
      return s;
    }
  }
  public class Expr_Bool : Expr {
    public readonly bool _a0;
    public Expr_Bool(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Bool(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Bool;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Int : Expr {
    public readonly BigInteger _a0;
    public Expr_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expr_Thunk : Expr {
    public readonly DAM.Syntax._IStmt _a0;
    public Expr_Thunk(DAM.Syntax._IStmt _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Thunk(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Expr_Thunk;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Expr.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IStmt {
    bool is_Pure { get; }
    bool is_Bind { get; }
    bool is_Ite { get; }
    bool is_Func { get; }
    bool is_Call { get; }
    bool is_Record { get; }
    bool is_Select { get; }
    bool is_Force { get; }
    bool is_New { get; }
    bool is_Read { get; }
    bool is_Write { get; }
    bool is_Print { get; }
    bool is_Rec { get; }
    bool is_LetCS { get; }
    bool is_Throw { get; }
    DAM.Syntax._IExpr dtor_Pure_a0 { get; }
    DAM.Syntax._IStmt dtor_lhs { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    DAM.Syntax._IStmt dtor_rhs { get; }
    DAM.Syntax._IExpr dtor_guard { get; }
    DAM.Syntax._IStmt dtor_then__ { get; }
    DAM.Syntax._IStmt dtor_else__ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_bound { get; }
    DAM.Syntax._IPos dtor_dom { get; }
    DAM.Syntax._IStmt dtor_body { get; }
    DAM.Syntax._IStmt dtor_func { get; }
    DAM.Syntax._IExpr dtor_arg { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields { get; }
    DAM.Syntax._IStmt dtor_record { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    DAM.Syntax._IExpr dtor_Force_a0 { get; }
    DAM.Syntax._IExpr dtor_init { get; }
    DAM.Syntax._IStmt dtor_next { get; }
    DAM.Syntax._IExpr dtor_ref { get; }
    DAM.Syntax._IExpr dtor_lvalue { get; }
    DAM.Syntax._IExpr dtor_rvalue { get; }
    DAM.Syntax._IExpr dtor_Print_a0 { get; }
    DAM.Syntax._INeg dtor_fix { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Syntax._IExpr dtor_stack { get; }
    DAM.Syntax._INeg dtor_oldstart { get; }
    _IStmt DowncastClone();
  }
  public abstract class Stmt : _IStmt {
    public Stmt() {
    }
    private static readonly DAM.Syntax._IStmt theDefault = create_Record(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Empty);
    public static DAM.Syntax._IStmt Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TYPE = new Dafny.TypeDescriptor<DAM.Syntax._IStmt>(DAM.Syntax.Stmt.Default());
    public static Dafny.TypeDescriptor<DAM.Syntax._IStmt> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStmt create_Pure(DAM.Syntax._IExpr _a0) {
      return new Stmt_Pure(_a0);
    }
    public static _IStmt create_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) {
      return new Stmt_Bind(lhs, var__, rhs);
    }
    public static _IStmt create_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) {
      return new Stmt_Ite(guard, then__, else__);
    }
    public static _IStmt create_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) {
      return new Stmt_Func(bound, dom, body);
    }
    public static _IStmt create_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) {
      return new Stmt_Call(func, arg);
    }
    public static _IStmt create_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) {
      return new Stmt_Record(fields);
    }
    public static _IStmt create_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) {
      return new Stmt_Select(record, field);
    }
    public static _IStmt create_Force(DAM.Syntax._IExpr _a0) {
      return new Stmt_Force(_a0);
    }
    public static _IStmt create_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_New(init, var__, next);
    }
    public static _IStmt create_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) {
      return new Stmt_Read(@ref, var__, next);
    }
    public static _IStmt create_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) {
      return new Stmt_Write(lvalue, rvalue, next);
    }
    public static _IStmt create_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) {
      return new Stmt_Print(_a0, next);
    }
    public static _IStmt create_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) {
      return new Stmt_Rec(bound, fix, body);
    }
    public static _IStmt create_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) {
      return new Stmt_LetCS(bound, start, body);
    }
    public static _IStmt create_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) {
      return new Stmt_Throw(stack, oldstart, next);
    }
    public bool is_Pure { get { return this is Stmt_Pure; } }
    public bool is_Bind { get { return this is Stmt_Bind; } }
    public bool is_Ite { get { return this is Stmt_Ite; } }
    public bool is_Func { get { return this is Stmt_Func; } }
    public bool is_Call { get { return this is Stmt_Call; } }
    public bool is_Record { get { return this is Stmt_Record; } }
    public bool is_Select { get { return this is Stmt_Select; } }
    public bool is_Force { get { return this is Stmt_Force; } }
    public bool is_New { get { return this is Stmt_New; } }
    public bool is_Read { get { return this is Stmt_Read; } }
    public bool is_Write { get { return this is Stmt_Write; } }
    public bool is_Print { get { return this is Stmt_Print; } }
    public bool is_Rec { get { return this is Stmt_Rec; } }
    public bool is_LetCS { get { return this is Stmt_LetCS; } }
    public bool is_Throw { get { return this is Stmt_Throw; } }
    public DAM.Syntax._IExpr dtor_Pure_a0 {
      get {
        var d = this;
        return ((Stmt_Pure)d)._a0;
      }
    }
    public DAM.Syntax._IStmt dtor_lhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._lhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        if (d is Stmt_Bind) { return ((Stmt_Bind)d)._var__; }
        if (d is Stmt_New) { return ((Stmt_New)d)._var__; }
        return ((Stmt_Read)d)._var__;
      }
    }
    public DAM.Syntax._IStmt dtor_rhs {
      get {
        var d = this;
        return ((Stmt_Bind)d)._rhs;
      }
    }
    public DAM.Syntax._IExpr dtor_guard {
      get {
        var d = this;
        return ((Stmt_Ite)d)._guard;
      }
    }
    public DAM.Syntax._IStmt dtor_then__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._then__;
      }
    }
    public DAM.Syntax._IStmt dtor_else__ {
      get {
        var d = this;
        return ((Stmt_Ite)d)._else__;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_bound {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._bound; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._bound; }
        return ((Stmt_LetCS)d)._bound;
      }
    }
    public DAM.Syntax._IPos dtor_dom {
      get {
        var d = this;
        return ((Stmt_Func)d)._dom;
      }
    }
    public DAM.Syntax._IStmt dtor_body {
      get {
        var d = this;
        if (d is Stmt_Func) { return ((Stmt_Func)d)._body; }
        if (d is Stmt_Rec) { return ((Stmt_Rec)d)._body; }
        return ((Stmt_LetCS)d)._body;
      }
    }
    public DAM.Syntax._IStmt dtor_func {
      get {
        var d = this;
        return ((Stmt_Call)d)._func;
      }
    }
    public DAM.Syntax._IExpr dtor_arg {
      get {
        var d = this;
        return ((Stmt_Call)d)._arg;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> dtor_fields {
      get {
        var d = this;
        return ((Stmt_Record)d)._fields;
      }
    }
    public DAM.Syntax._IStmt dtor_record {
      get {
        var d = this;
        return ((Stmt_Select)d)._record;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Stmt_Select)d)._field;
      }
    }
    public DAM.Syntax._IExpr dtor_Force_a0 {
      get {
        var d = this;
        return ((Stmt_Force)d)._a0;
      }
    }
    public DAM.Syntax._IExpr dtor_init {
      get {
        var d = this;
        return ((Stmt_New)d)._init;
      }
    }
    public DAM.Syntax._IStmt dtor_next {
      get {
        var d = this;
        if (d is Stmt_New) { return ((Stmt_New)d)._next; }
        if (d is Stmt_Read) { return ((Stmt_Read)d)._next; }
        if (d is Stmt_Write) { return ((Stmt_Write)d)._next; }
        if (d is Stmt_Print) { return ((Stmt_Print)d)._next; }
        return ((Stmt_Throw)d)._next;
      }
    }
    public DAM.Syntax._IExpr dtor_ref {
      get {
        var d = this;
        return ((Stmt_Read)d)._ref;
      }
    }
    public DAM.Syntax._IExpr dtor_lvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._lvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_rvalue {
      get {
        var d = this;
        return ((Stmt_Write)d)._rvalue;
      }
    }
    public DAM.Syntax._IExpr dtor_Print_a0 {
      get {
        var d = this;
        return ((Stmt_Print)d)._a0;
      }
    }
    public DAM.Syntax._INeg dtor_fix {
      get {
        var d = this;
        return ((Stmt_Rec)d)._fix;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Stmt_LetCS)d)._start;
      }
    }
    public DAM.Syntax._IExpr dtor_stack {
      get {
        var d = this;
        return ((Stmt_Throw)d)._stack;
      }
    }
    public DAM.Syntax._INeg dtor_oldstart {
      get {
        var d = this;
        return ((Stmt_Throw)d)._oldstart;
      }
    }
    public abstract _IStmt DowncastClone();
  }
  public class Stmt_Pure : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Pure(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Pure(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Pure;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Pure";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_Bind : Stmt {
    public readonly DAM.Syntax._IStmt _lhs;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _rhs;
    public Stmt_Bind(DAM.Syntax._IStmt lhs, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt rhs) : base() {
      this._lhs = lhs;
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Bind(_lhs, _var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Bind;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Bind";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Stmt_Ite : Stmt {
    public readonly DAM.Syntax._IExpr _guard;
    public readonly DAM.Syntax._IStmt _then__;
    public readonly DAM.Syntax._IStmt _else__;
    public Stmt_Ite(DAM.Syntax._IExpr guard, DAM.Syntax._IStmt then__, DAM.Syntax._IStmt else__) : base() {
      this._guard = guard;
      this._then__ = then__;
      this._else__ = else__;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Ite(_guard, _then__, _else__);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Ite;
      return oth != null && object.Equals(this._guard, oth._guard) && object.Equals(this._then__, oth._then__) && object.Equals(this._else__, oth._else__);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._guard));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._then__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._else__));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._guard);
      s += ", ";
      s += Dafny.Helpers.ToString(this._then__);
      s += ", ";
      s += Dafny.Helpers.ToString(this._else__);
      s += ")";
      return s;
    }
  }
  public class Stmt_Func : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._IPos _dom;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Func(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._IPos dom, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._dom = dom;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Func(_bound, _dom, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Func;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._dom, oth._dom) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dom));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Func";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dom);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Call : Stmt {
    public readonly DAM.Syntax._IStmt _func;
    public readonly DAM.Syntax._IExpr _arg;
    public Stmt_Call(DAM.Syntax._IStmt func, DAM.Syntax._IExpr arg) : base() {
      this._func = func;
      this._arg = arg;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Call(_func, _arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Call;
      return oth != null && object.Equals(this._func, oth._func) && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._func));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._func);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Stmt_Record : Stmt {
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _fields;
    public Stmt_Record(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> fields) : base() {
      this._fields = fields;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Record(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Record;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Record";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Stmt_Select : Stmt {
    public readonly DAM.Syntax._IStmt _record;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Stmt_Select(DAM.Syntax._IStmt record, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._record = record;
      this._field = field;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Select(_record, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Select;
      return oth != null && object.Equals(this._record, oth._record) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._record));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._record);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Stmt_Force : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public Stmt_Force(DAM.Syntax._IExpr _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Force(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Force;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Force";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Stmt_New : Stmt {
    public readonly DAM.Syntax._IExpr _init;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_New(DAM.Syntax._IExpr init, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._init = init;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_New(_init, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_New;
      return oth != null && object.Equals(this._init, oth._init) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._init));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._init);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Read : Stmt {
    public readonly DAM.Syntax._IExpr _ref;
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Read(DAM.Syntax._IExpr @ref, Dafny.ISequence<Dafny.Rune> var__, DAM.Syntax._IStmt next) : base() {
      this._ref = @ref;
      this._var__ = var__;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Read(_ref, _var__, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Read;
      return oth != null && object.Equals(this._ref, oth._ref) && object.Equals(this._var__, oth._var__) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ref));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Read";
      s += "(";
      s += Dafny.Helpers.ToString(this._ref);
      s += ", ";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Write : Stmt {
    public readonly DAM.Syntax._IExpr _lvalue;
    public readonly DAM.Syntax._IExpr _rvalue;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Write(DAM.Syntax._IExpr lvalue, DAM.Syntax._IExpr rvalue, DAM.Syntax._IStmt next) : base() {
      this._lvalue = lvalue;
      this._rvalue = rvalue;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Write(_lvalue, _rvalue, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Write;
      return oth != null && object.Equals(this._lvalue, oth._lvalue) && object.Equals(this._rvalue, oth._rvalue) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rvalue));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Write";
      s += "(";
      s += Dafny.Helpers.ToString(this._lvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rvalue);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Print : Stmt {
    public readonly DAM.Syntax._IExpr _a0;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Print(DAM.Syntax._IExpr _a0, DAM.Syntax._IStmt next) : base() {
      this._a0 = _a0;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Print(_a0, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Print;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Stmt_Rec : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _fix;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_Rec(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg fix, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._fix = fix;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Rec(_bound, _fix, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Rec;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._fix, oth._fix) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fix));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Rec";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fix);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_LetCS : Stmt {
    public readonly Dafny.ISequence<Dafny.Rune> _bound;
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Syntax._IStmt _body;
    public Stmt_LetCS(Dafny.ISequence<Dafny.Rune> bound, DAM.Syntax._INeg start, DAM.Syntax._IStmt body) : base() {
      this._bound = bound;
      this._start = start;
      this._body = body;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_LetCS(_bound, _start, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_LetCS;
      return oth != null && object.Equals(this._bound, oth._bound) && object.Equals(this._start, oth._start) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._bound));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.LetCS";
      s += "(";
      s += this._bound.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Stmt_Throw : Stmt {
    public readonly DAM.Syntax._IExpr _stack;
    public readonly DAM.Syntax._INeg _oldstart;
    public readonly DAM.Syntax._IStmt _next;
    public Stmt_Throw(DAM.Syntax._IExpr stack, DAM.Syntax._INeg oldstart, DAM.Syntax._IStmt next) : base() {
      this._stack = stack;
      this._oldstart = oldstart;
      this._next = next;
    }
    public override _IStmt DowncastClone() {
      if (this is _IStmt dt) { return dt; }
      return new Stmt_Throw(_stack, _oldstart, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Syntax.Stmt_Throw;
      return oth != null && object.Equals(this._stack, oth._stack) && object.Equals(this._oldstart, oth._oldstart) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._oldstart));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Syntax.Stmt.Throw";
      s += "(";
      s += Dafny.Helpers.ToString(this._stack);
      s += ", ";
      s += Dafny.Helpers.ToString(this._oldstart);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
} // end of namespace DAM.Syntax
namespace DAM.Machine {

  public partial class __default {
    public static DAM.Machine._IOutput Next(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Silent(), next);
    }
  }

  public interface _IVal {
    bool is_Unit { get; }
    bool is_Bool { get; }
    bool is_Int { get; }
    bool is_Thunk { get; }
    bool is_Ref { get; }
    bool is_Stack { get; }
    bool dtor_answer { get; }
    BigInteger dtor_Int_a0 { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure { get; }
    BigInteger dtor_addr { get; }
    DAM.Syntax._INeg dtor_start { get; }
    DAM.Machine._IStack dtor_stack { get; }
    _IVal DowncastClone();
  }
  public abstract class Val : _IVal {
    public Val() {
    }
    private static readonly DAM.Machine._IVal theDefault = create_Unit();
    public static DAM.Machine._IVal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IVal> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IVal>(DAM.Machine.Val.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IVal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVal create_Unit() {
      return new Val_Unit();
    }
    public static _IVal create_Bool(bool answer) {
      return new Val_Bool(answer);
    }
    public static _IVal create_Int(BigInteger _a0) {
      return new Val_Int(_a0);
    }
    public static _IVal create_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) {
      return new Val_Thunk(closure);
    }
    public static _IVal create_Ref(BigInteger addr) {
      return new Val_Ref(addr);
    }
    public static _IVal create_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
      return new Val_Stack(start, stack);
    }
    public bool is_Unit { get { return this is Val_Unit; } }
    public bool is_Bool { get { return this is Val_Bool; } }
    public bool is_Int { get { return this is Val_Int; } }
    public bool is_Thunk { get { return this is Val_Thunk; } }
    public bool is_Ref { get { return this is Val_Ref; } }
    public bool is_Stack { get { return this is Val_Stack; } }
    public bool dtor_answer {
      get {
        var d = this;
        return ((Val_Bool)d)._answer;
      }
    }
    public BigInteger dtor_Int_a0 {
      get {
        var d = this;
        return ((Val_Int)d)._a0;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_closure {
      get {
        var d = this;
        return ((Val_Thunk)d)._closure;
      }
    }
    public BigInteger dtor_addr {
      get {
        var d = this;
        return ((Val_Ref)d)._addr;
      }
    }
    public DAM.Syntax._INeg dtor_start {
      get {
        var d = this;
        return ((Val_Stack)d)._start;
      }
    }
    public DAM.Machine._IStack dtor_stack {
      get {
        var d = this;
        return ((Val_Stack)d)._stack;
      }
    }
    public abstract _IVal DowncastClone();
  }
  public class Val_Unit : Val {
    public Val_Unit() : base() {
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Unit();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Unit;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Unit";
      return s;
    }
  }
  public class Val_Bool : Val {
    public readonly bool _answer;
    public Val_Bool(bool answer) : base() {
      this._answer = answer;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Bool(_answer);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Bool;
      return oth != null && this._answer == oth._answer;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._answer));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Bool";
      s += "(";
      s += Dafny.Helpers.ToString(this._answer);
      s += ")";
      return s;
    }
  }
  public class Val_Int : Val {
    public readonly BigInteger _a0;
    public Val_Int(BigInteger _a0) : base() {
      this._a0 = _a0;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Int(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Int;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Int";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Val_Thunk : Val {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _closure;
    public Val_Thunk(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> closure) : base() {
      this._closure = closure;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Thunk(_closure);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Thunk;
      return oth != null && object.Equals(this._closure, oth._closure);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._closure));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Thunk";
      s += "(";
      s += Dafny.Helpers.ToString(this._closure);
      s += ")";
      return s;
    }
  }
  public class Val_Ref : Val {
    public readonly BigInteger _addr;
    public Val_Ref(BigInteger addr) : base() {
      this._addr = addr;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Ref(_addr);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Ref;
      return oth != null && this._addr == oth._addr;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._addr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Ref";
      s += "(";
      s += Dafny.Helpers.ToString(this._addr);
      s += ")";
      return s;
    }
  }
  public class Val_Stack : Val {
    public readonly DAM.Syntax._INeg _start;
    public readonly DAM.Machine._IStack _stack;
    public Val_Stack(DAM.Syntax._INeg start, DAM.Machine._IStack stack) : base() {
      this._start = start;
      this._stack = stack;
    }
    public override _IVal DowncastClone() {
      if (this is _IVal dt) { return dt; }
      return new Val_Stack(_start, _stack);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Val_Stack;
      return oth != null && object.Equals(this._start, oth._start) && object.Equals(this._stack, oth._stack);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._start));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stack));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Val.Stack";
      s += "(";
      s += Dafny.Helpers.ToString(this._start);
      s += ", ";
      s += Dafny.Helpers.ToString(this._stack);
      s += ")";
      return s;
    }
  }

  public interface _IStack {
    bool is_Empty { get; }
    bool is_Push { get; }
    DAM.Machine._IFrame dtor_top { get; }
    DAM.Machine._IStack dtor_rest { get; }
    _IStack DowncastClone();
    DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop();
  }
  public abstract class Stack : _IStack {
    public Stack() {
    }
    private static readonly DAM.Machine._IStack theDefault = create_Empty();
    public static DAM.Machine._IStack Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IStack> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IStack>(DAM.Machine.Stack.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IStack> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStack create_Empty() {
      return new Stack_Empty();
    }
    public static _IStack create_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) {
      return new Stack_Push(top, rest);
    }
    public bool is_Empty { get { return this is Stack_Empty; } }
    public bool is_Push { get { return this is Stack_Push; } }
    public DAM.Machine._IFrame dtor_top {
      get {
        var d = this;
        return ((Stack_Push)d)._top;
      }
    }
    public DAM.Machine._IStack dtor_rest {
      get {
        var d = this;
        return ((Stack_Push)d)._rest;
      }
    }
    public abstract _IStack DowncastClone();
    public DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> Pop() {
      DAM.Machine._IStack _source1 = this;
      if (_source1.is_Empty) {
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_None();
      } else {
        DAM.Machine._IFrame _10___mcc_h0 = _source1.dtor_top;
        DAM.Machine._IStack _11___mcc_h1 = _source1.dtor_rest;
        DAM.Machine._IStack _12_r = _11___mcc_h1;
        DAM.Machine._IFrame _13_t = _10___mcc_h0;
        return DAM.Utils.Option<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>>.create_Some(_System.Tuple2<DAM.Machine._IFrame, DAM.Machine._IStack>.create(_13_t, _12_r));
      }
    }
  }
  public class Stack_Empty : Stack {
    public Stack_Empty() : base() {
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Empty();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Empty;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Empty";
      return s;
    }
  }
  public class Stack_Push : Stack {
    public readonly DAM.Machine._IFrame _top;
    public readonly DAM.Machine._IStack _rest;
    public Stack_Push(DAM.Machine._IFrame top, DAM.Machine._IStack rest) : base() {
      this._top = top;
      this._rest = rest;
    }
    public override _IStack DowncastClone() {
      if (this is _IStack dt) { return dt; }
      return new Stack_Push(_top, _rest);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Stack_Push;
      return oth != null && object.Equals(this._top, oth._top) && object.Equals(this._rest, oth._rest);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._top));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rest));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Stack.Push";
      s += "(";
      s += Dafny.Helpers.ToString(this._top);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rest);
      s += ")";
      return s;
    }
  }

  public interface _IFrame {
    bool is_Bind { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    Dafny.ISequence<Dafny.Rune> dtor_var__ { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs { get; }
    _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    _IFrame DowncastClone();
  }
  public abstract class Frame : _IFrame {
    public Frame() {
    }
    private static readonly DAM.Machine._IFrame theDefault = create_Bind(Dafny.Sequence<Dafny.Rune>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()));
    public static DAM.Machine._IFrame Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IFrame> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IFrame>(DAM.Machine.Frame.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IFrame> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFrame create_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) {
      return new Frame_Bind(var__, rhs);
    }
    public static _IFrame create_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) {
      return new Frame_Call(arg);
    }
    public static _IFrame create_Select(Dafny.ISequence<Dafny.Rune> field) {
      return new Frame_Select(field);
    }
    public bool is_Bind { get { return this is Frame_Bind; } }
    public bool is_Call { get { return this is Frame_Call; } }
    public bool is_Select { get { return this is Frame_Select; } }
    public Dafny.ISequence<Dafny.Rune> dtor_var__ {
      get {
        var d = this;
        return ((Frame_Bind)d)._var__;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> dtor_rhs {
      get {
        var d = this;
        return ((Frame_Bind)d)._rhs;
      }
    }
    public _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> dtor_arg {
      get {
        var d = this;
        return ((Frame_Call)d)._arg;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((Frame_Select)d)._field;
      }
    }
    public abstract _IFrame DowncastClone();
  }
  public class Frame_Bind : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _var__;
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _rhs;
    public Frame_Bind(Dafny.ISequence<Dafny.Rune> var__, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> rhs) : base() {
      this._var__ = var__;
      this._rhs = rhs;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Bind(_var__, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Bind;
      return oth != null && object.Equals(this._var__, oth._var__) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._var__));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Bind";
      s += "(";
      s += this._var__.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Frame_Call : Frame {
    public readonly _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _arg;
    public Frame_Call(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> arg) : base() {
      this._arg = arg;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Call(_arg);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Call;
      return oth != null && object.Equals(this._arg, oth._arg);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arg));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._arg);
      s += ")";
      return s;
    }
  }
  public class Frame_Select : Frame {
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public Frame_Select(Dafny.ISequence<Dafny.Rune> field) : base() {
      this._field = field;
    }
    public override _IFrame DowncastClone() {
      if (this is _IFrame dt) { return dt; }
      return new Frame_Select(_field);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Frame_Select;
      return oth != null && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Frame.Select";
      s += "(";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IEvent {
    bool is_Silent { get; }
    bool is_Print { get; }
    DAM.Machine._IVal dtor_Print_a0 { get; }
    _IEvent DowncastClone();
  }
  public abstract class Event : _IEvent {
    public Event() {
    }
    private static readonly DAM.Machine._IEvent theDefault = create_Silent();
    public static DAM.Machine._IEvent Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IEvent> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IEvent>(DAM.Machine.Event.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IEvent> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEvent create_Silent() {
      return new Event_Silent();
    }
    public static _IEvent create_Print(DAM.Machine._IVal _a0) {
      return new Event_Print(_a0);
    }
    public bool is_Silent { get { return this is Event_Silent; } }
    public bool is_Print { get { return this is Event_Print; } }
    public DAM.Machine._IVal dtor_Print_a0 {
      get {
        var d = this;
        return ((Event_Print)d)._a0;
      }
    }
    public abstract _IEvent DowncastClone();
  }
  public class Event_Silent : Event {
    public Event_Silent() : base() {
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Silent();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Silent;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Silent";
      return s;
    }
  }
  public class Event_Print : Event {
    public readonly DAM.Machine._IVal _a0;
    public Event_Print(DAM.Machine._IVal _a0) : base() {
      this._a0 = _a0;
    }
    public override _IEvent DowncastClone() {
      if (this is _IEvent dt) { return dt; }
      return new Event_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Event_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Event.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IOutput {
    bool is_Raise { get; }
    bool is_Terminal { get; }
    DAM.Machine._IEvent dtor_event { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next { get; }
    _IOutput DowncastClone();
  }
  public abstract class Output : _IOutput {
    public Output() {
    }
    private static readonly DAM.Machine._IOutput theDefault = create_Raise(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()));
    public static DAM.Machine._IOutput Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Machine._IOutput> _TYPE = new Dafny.TypeDescriptor<DAM.Machine._IOutput>(DAM.Machine.Output.Default());
    public static Dafny.TypeDescriptor<DAM.Machine._IOutput> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOutput create_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) {
      return new Output_Raise(@event, next);
    }
    public static _IOutput create_Terminal() {
      return new Output_Terminal();
    }
    public bool is_Raise { get { return this is Output_Raise; } }
    public bool is_Terminal { get { return this is Output_Terminal; } }
    public DAM.Machine._IEvent dtor_event {
      get {
        var d = this;
        return ((Output_Raise)d)._event;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_next {
      get {
        var d = this;
        return ((Output_Raise)d)._next;
      }
    }
    public abstract _IOutput DowncastClone();
  }
  public class Output_Raise : Output {
    public readonly DAM.Machine._IEvent _event;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _next;
    public Output_Raise(DAM.Machine._IEvent @event, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> next) : base() {
      this._event = @event;
      this._next = next;
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Raise(_event, _next);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Raise;
      return oth != null && object.Equals(this._event, oth._event) && object.Equals(this._next, oth._next);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._event));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._next));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Raise";
      s += "(";
      s += Dafny.Helpers.ToString(this._event);
      s += ", ";
      s += Dafny.Helpers.ToString(this._next);
      s += ")";
      return s;
    }
  }
  public class Output_Terminal : Output {
    public Output_Terminal() : base() {
    }
    public override _IOutput DowncastClone() {
      if (this is _IOutput dt) { return dt; }
      return new Output_Terminal();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Machine.Output_Terminal;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Machine.Output.Terminal";
      return s;
    }
  }
} // end of namespace DAM.Machine
namespace DAM.Statics {

  public partial class __default {
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr expr) {
      DAM.Syntax._IExpr _source2 = expr;
      if (_source2.is_Var) {
        Dafny.ISequence<Dafny.Rune> _14___mcc_h0 = _source2.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _15_x = _14___mcc_h0;
        return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(g, _15_x);
      } else if (_source2.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source2.is_Bool) {
        bool _16___mcc_h1 = _source2.dtor_Bool_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source2.is_Int) {
        BigInteger _17___mcc_h2 = _source2.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else {
        DAM.Syntax._IStmt _18___mcc_h3 = _source2.dtor_Thunk_a0;
        DAM.Syntax._IStmt _19_s = _18___mcc_h3;
        DAM.Utils._IOption<DAM.Syntax._INeg> _20_valueOrError0 = DAM.Statics.__default.SynthStmt(g, _19_s);
        if ((_20_valueOrError0).IsFailure()) {
          return (_20_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._INeg _21_t = (_20_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_21_t));
        }
      }
    }
    public static bool CheckExpr(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IExpr e, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthExpr(g, e), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt) {
      DAM.Syntax._IStmt _source3 = stmt;
      if (_source3.is_Pure) {
        DAM.Syntax._IExpr _22___mcc_h0 = _source3.dtor_Pure_a0;
        DAM.Syntax._IExpr _23_e = _22___mcc_h0;
        DAM.Utils._IOption<DAM.Syntax._IPos> _24_valueOrError0 = DAM.Statics.__default.SynthExpr(g, _23_e);
        if ((_24_valueOrError0).IsFailure()) {
          return (_24_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _25_t = (_24_valueOrError0).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Value(_25_t));
        }
      } else if (_source3.is_Bind) {
        DAM.Syntax._IStmt _26___mcc_h1 = _source3.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _27___mcc_h2 = _source3.dtor_var__;
        DAM.Syntax._IStmt _28___mcc_h3 = _source3.dtor_rhs;
        DAM.Syntax._IStmt _29_rhs = _28___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _30_var__ = _27___mcc_h2;
        DAM.Syntax._IStmt _31_lhs = _26___mcc_h1;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source4 = DAM.Statics.__default.SynthStmt(g, _31_lhs);
        if (_source4.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _32___mcc_h36 = _source4.dtor_value;
          DAM.Syntax._INeg _source5 = _32___mcc_h36;
          if (_source5.is_Value) {
            DAM.Syntax._IPos _33___mcc_h38 = _source5.dtor_pos;
            DAM.Syntax._IPos _34_t = _33___mcc_h38;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _30_var__, _34_t), _29_rhs);
          } else if (_source5.is_Function) {
            DAM.Syntax._IPos _35___mcc_h40 = _source5.dtor_dom;
            DAM.Syntax._INeg _36___mcc_h41 = _source5.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _37___mcc_h44 = _source5.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Ite) {
        DAM.Syntax._IExpr _38___mcc_h4 = _source3.dtor_guard;
        DAM.Syntax._IStmt _39___mcc_h5 = _source3.dtor_then__;
        DAM.Syntax._IStmt _40___mcc_h6 = _source3.dtor_else__;
        DAM.Syntax._IStmt _41_else__ = _40___mcc_h6;
        DAM.Syntax._IStmt _42_then__ = _39___mcc_h5;
        DAM.Syntax._IExpr _43_guard = _38___mcc_h4;
        if (DAM.Statics.__default.CheckExpr(g, _43_guard, DAM.Syntax.Pos.create_Bool())) {
          DAM.Utils._IOption<DAM.Syntax._INeg> _44_valueOrError1 = DAM.Statics.__default.SynthStmt(g, _42_then__);
          if ((_44_valueOrError1).IsFailure()) {
            return (_44_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _45_t = (_44_valueOrError1).Extract();
            if (DAM.Statics.__default.CheckStmt(g, _41_else__, _45_t)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_45_t);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_Func) {
        Dafny.ISequence<Dafny.Rune> _46___mcc_h7 = _source3.dtor_bound;
        DAM.Syntax._IPos _47___mcc_h8 = _source3.dtor_dom;
        DAM.Syntax._IStmt _48___mcc_h9 = _source3.dtor_body;
        DAM.Syntax._IStmt _49_body = _48___mcc_h9;
        DAM.Syntax._IPos _50_dom = _47___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _51_bound = _46___mcc_h7;
        DAM.Utils._IOption<DAM.Syntax._INeg> _52_valueOrError2 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _51_bound, _50_dom), _49_body);
        if ((_52_valueOrError2).IsFailure()) {
          return (_52_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _53_cod = (_52_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Function(_50_dom, _53_cod));
        }
      } else if (_source3.is_Call) {
        DAM.Syntax._IStmt _54___mcc_h10 = _source3.dtor_func;
        DAM.Syntax._IExpr _55___mcc_h11 = _source3.dtor_arg;
        DAM.Syntax._IExpr _56_arg = _55___mcc_h11;
        DAM.Syntax._IStmt _57_func = _54___mcc_h10;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source6 = DAM.Statics.__default.SynthStmt(g, _57_func);
        if (_source6.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _58___mcc_h46 = _source6.dtor_value;
          DAM.Syntax._INeg _source7 = _58___mcc_h46;
          if (_source7.is_Value) {
            DAM.Syntax._IPos _59___mcc_h48 = _source7.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source7.is_Function) {
            DAM.Syntax._IPos _60___mcc_h50 = _source7.dtor_dom;
            DAM.Syntax._INeg _61___mcc_h51 = _source7.dtor_cod;
            DAM.Syntax._INeg _62_cod = _61___mcc_h51;
            DAM.Syntax._IPos _63_dom = _60___mcc_h50;
            if (DAM.Statics.__default.CheckExpr(g, _56_arg, _63_dom)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_62_cod);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _64___mcc_h54 = _source7.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _65___mcc_h12 = _source3.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _66_fields = _65___mcc_h12;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>> _67_valueOrError4 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>>((_68_fields, _69_g) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>)(() => {
          var _coll1 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_1 in (_68_fields).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _70_lbl = (Dafny.ISequence<Dafny.Rune>)_compr_1;
            if ((_68_fields).Contains(_70_lbl)) {
              _coll1.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>(_70_lbl, DAM.Statics.__default.SynthStmt(_69_g, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_68_fields, _70_lbl))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._INeg>>.FromCollection(_coll1);
        }))())(_66_fields, g));
        if ((_67_valueOrError4).IsFailure()) {
          return (_67_valueOrError4).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _71_fields = (_67_valueOrError4).Extract();
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(DAM.Syntax.Neg.create_Record(_71_fields));
        }
      } else if (_source3.is_Select) {
        DAM.Syntax._IStmt _72___mcc_h13 = _source3.dtor_record;
        Dafny.ISequence<Dafny.Rune> _73___mcc_h14 = _source3.dtor_field;
        Dafny.ISequence<Dafny.Rune> _74_lbl = _73___mcc_h14;
        DAM.Syntax._IStmt _75_record = _72___mcc_h13;
        DAM.Utils._IOption<DAM.Syntax._INeg> _source8 = DAM.Statics.__default.SynthStmt(g, _75_record);
        if (_source8.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._INeg _76___mcc_h56 = _source8.dtor_value;
          DAM.Syntax._INeg _source9 = _76___mcc_h56;
          if (_source9.is_Value) {
            DAM.Syntax._IPos _77___mcc_h58 = _source9.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source9.is_Function) {
            DAM.Syntax._IPos _78___mcc_h60 = _source9.dtor_dom;
            DAM.Syntax._INeg _79___mcc_h61 = _source9.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _80___mcc_h64 = _source9.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _81_fields = _80___mcc_h64;
            return DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_81_fields, _74_lbl);
          }
        }
      } else if (_source3.is_Force) {
        DAM.Syntax._IExpr _82___mcc_h15 = _source3.dtor_Force_a0;
        DAM.Syntax._IExpr _83_expr = _82___mcc_h15;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source10 = DAM.Statics.__default.SynthExpr(g, _83_expr);
        if (_source10.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _84___mcc_h66 = _source10.dtor_value;
          DAM.Syntax._IPos _source11 = _84___mcc_h66;
          if (_source11.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source11.is_Thunk) {
            DAM.Syntax._INeg _85___mcc_h68 = _source11.dtor_neg;
            DAM.Syntax._INeg _86_t = _85___mcc_h68;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_86_t);
          } else if (_source11.is_Ref) {
            DAM.Syntax._IPos _87___mcc_h70 = _source11.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _88___mcc_h72 = _source11.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_New) {
        DAM.Syntax._IExpr _89___mcc_h16 = _source3.dtor_init;
        Dafny.ISequence<Dafny.Rune> _90___mcc_h17 = _source3.dtor_var__;
        DAM.Syntax._IStmt _91___mcc_h18 = _source3.dtor_next;
        DAM.Syntax._IStmt _92_next = _91___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _93_var__ = _90___mcc_h17;
        DAM.Syntax._IExpr _94_init = _89___mcc_h16;
        DAM.Utils._IOption<DAM.Syntax._IPos> _95_valueOrError5 = DAM.Statics.__default.SynthExpr(g, _94_init);
        if ((_95_valueOrError5).IsFailure()) {
          return (_95_valueOrError5).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _96_t = (_95_valueOrError5).Extract();
          return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _93_var__, DAM.Syntax.Pos.create_Ref(_96_t)), _92_next);
        }
      } else if (_source3.is_Read) {
        DAM.Syntax._IExpr _97___mcc_h19 = _source3.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _98___mcc_h20 = _source3.dtor_var__;
        DAM.Syntax._IStmt _99___mcc_h21 = _source3.dtor_next;
        DAM.Syntax._IStmt _100_next = _99___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _101_var__ = _98___mcc_h20;
        DAM.Syntax._IExpr _102_ref = _97___mcc_h19;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source12 = DAM.Statics.__default.SynthExpr(g, _102_ref);
        if (_source12.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _103___mcc_h74 = _source12.dtor_value;
          DAM.Syntax._IPos _source13 = _103___mcc_h74;
          if (_source13.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Thunk) {
            DAM.Syntax._INeg _104___mcc_h76 = _source13.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source13.is_Ref) {
            DAM.Syntax._IPos _105___mcc_h78 = _source13.dtor_ref;
            DAM.Syntax._IPos _106_t = _105___mcc_h78;
            return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _101_var__, _106_t), _100_next);
          } else {
            DAM.Syntax._INeg _107___mcc_h80 = _source13.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Write) {
        DAM.Syntax._IExpr _108___mcc_h22 = _source3.dtor_lvalue;
        DAM.Syntax._IExpr _109___mcc_h23 = _source3.dtor_rvalue;
        DAM.Syntax._IStmt _110___mcc_h24 = _source3.dtor_next;
        DAM.Syntax._IStmt _111_next = _110___mcc_h24;
        DAM.Syntax._IExpr _112_rhs = _109___mcc_h23;
        DAM.Syntax._IExpr _113_lhs = _108___mcc_h22;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source14 = DAM.Statics.__default.SynthExpr(g, _113_lhs);
        if (_source14.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _114___mcc_h82 = _source14.dtor_value;
          DAM.Syntax._IPos _source15 = _114___mcc_h82;
          if (_source15.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Thunk) {
            DAM.Syntax._INeg _115___mcc_h84 = _source15.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source15.is_Ref) {
            DAM.Syntax._IPos _116___mcc_h86 = _source15.dtor_ref;
            DAM.Syntax._IPos _117_t = _116___mcc_h86;
            if (DAM.Statics.__default.CheckExpr(g, _112_rhs, _117_t)) {
              return DAM.Statics.__default.SynthStmt(g, _111_next);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            DAM.Syntax._INeg _118___mcc_h88 = _source15.dtor_start;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        }
      } else if (_source3.is_Print) {
        DAM.Syntax._IExpr _119___mcc_h25 = _source3.dtor_Print_a0;
        DAM.Syntax._IStmt _120___mcc_h26 = _source3.dtor_next;
        DAM.Syntax._IStmt _121_next = _120___mcc_h26;
        DAM.Syntax._IExpr _122_expr = _119___mcc_h25;
        DAM.Utils._IOption<DAM.Syntax._IPos> _123_valueOrError3 = DAM.Statics.__default.SynthExpr(g, _122_expr);
        if ((_123_valueOrError3).IsFailure()) {
          return (_123_valueOrError3).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._IPos _124___v14 = (_123_valueOrError3).Extract();
          return DAM.Statics.__default.SynthStmt(g, _121_next);
        }
      } else if (_source3.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _125___mcc_h27 = _source3.dtor_bound;
        DAM.Syntax._INeg _126___mcc_h28 = _source3.dtor_fix;
        DAM.Syntax._IStmt _127___mcc_h29 = _source3.dtor_body;
        DAM.Syntax._IStmt _128_body = _127___mcc_h29;
        DAM.Syntax._INeg _129_fix = _126___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _130_self = _125___mcc_h27;
        if (DAM.Statics.__default.CheckStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _130_self, DAM.Syntax.Pos.create_Thunk(_129_fix)), _128_body, _129_fix)) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_129_fix);
        } else {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        }
      } else if (_source3.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _131___mcc_h30 = _source3.dtor_bound;
        DAM.Syntax._INeg _132___mcc_h31 = _source3.dtor_start;
        DAM.Syntax._IStmt _133___mcc_h32 = _source3.dtor_body;
        DAM.Syntax._IStmt _134_body = _133___mcc_h32;
        DAM.Syntax._INeg _135_start = _132___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _136_bound = _131___mcc_h30;
        return DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(g, _136_bound, DAM.Syntax.Pos.create_Stack(_135_start)), _134_body);
      } else {
        DAM.Syntax._IExpr _137___mcc_h33 = _source3.dtor_stack;
        DAM.Syntax._INeg _138___mcc_h34 = _source3.dtor_oldstart;
        DAM.Syntax._IStmt _139___mcc_h35 = _source3.dtor_next;
        DAM.Syntax._IStmt _140_next = _139___mcc_h35;
        DAM.Syntax._INeg _141_oldstart = _138___mcc_h34;
        DAM.Syntax._IExpr _142_stack = _137___mcc_h33;
        DAM.Utils._IOption<DAM.Syntax._IPos> _source16 = DAM.Statics.__default.SynthExpr(g, _142_stack);
        if (_source16.is_None) {
          return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
        } else {
          DAM.Syntax._IPos _143___mcc_h90 = _source16.dtor_value;
          DAM.Syntax._IPos _source17 = _143___mcc_h90;
          if (_source17.is_Unit) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Bool) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Int) {
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Thunk) {
            DAM.Syntax._INeg _144___mcc_h92 = _source17.dtor_neg;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source17.is_Ref) {
            DAM.Syntax._IPos _145___mcc_h94 = _source17.dtor_ref;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            DAM.Syntax._INeg _146___mcc_h96 = _source17.dtor_start;
            DAM.Syntax._INeg _147_start = _146___mcc_h96;
            if (DAM.Statics.__default.CheckStmt(g, _140_next, _147_start)) {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_141_oldstart);
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          }
        }
      }
    }
    public static bool CheckStmt(Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g, DAM.Syntax._IStmt stmt, DAM.Syntax._INeg t) {
      return object.Equals(DAM.Statics.__default.SynthStmt(g, stmt), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(t));
    }
    public static DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> SynthEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env) {
      return DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_148_env, _149_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
        var _coll2 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
        foreach (Dafny.ISequence<Dafny.Rune> _compr_2 in (_148_env).Keys.Elements) {
          Dafny.ISequence<Dafny.Rune> _150_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_2;
          if ((_148_env).Contains(_150_var__)) {
            _coll2.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_150_var__, DAM.Statics.__default.SynthVal(_149_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_148_env, _150_var__))));
          }
        }
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll2);
      }))())(env, s));
    }
    public static bool CheckEnv(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> env, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> g) {
      return object.Equals(DAM.Statics.__default.SynthEnv(s, env), DAM.Utils.Option<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>>.create_Some(g));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs0 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _151_env = _let_tmp_rhs0.dtor__0;
      DAM.Syntax._IExpr _152_expr = _let_tmp_rhs0.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _153_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _151_env);
      if ((_153_valueOrError0).IsFailure()) {
        return (_153_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _154_g = (_153_valueOrError0).Extract();
        return DAM.Statics.__default.SynthExpr(_154_g, _152_expr);
      }
    }
    public static bool CheckClosedExpr(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthClosedExpr(s, expr), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthClosedStmt(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> stmt) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs1 = stmt;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _155_env = _let_tmp_rhs1.dtor__0;
      DAM.Syntax._IStmt _156_stmt = _let_tmp_rhs1.dtor__1;
      DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _157_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _155_env);
      if ((_157_valueOrError0).IsFailure()) {
        return (_157_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
      } else {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _158_g = (_157_valueOrError0).Extract();
        return DAM.Statics.__default.SynthStmt(_158_g, _156_stmt);
      }
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack) {
    TAIL_CALL_START:;
      DAM.Machine._IStack _source18 = stack;
      if (_source18.is_Empty) {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(start);
      } else {
        DAM.Machine._IFrame _159___mcc_h0 = _source18.dtor_top;
        DAM.Machine._IStack _160___mcc_h1 = _source18.dtor_rest;
        DAM.Machine._IFrame _source19 = _159___mcc_h0;
        if (_source19.is_Bind) {
          Dafny.ISequence<Dafny.Rune> _161___mcc_h2 = _source19.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _162___mcc_h3 = _source19.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source20 = _162___mcc_h3;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _163___mcc_h4 = _source20.dtor__0;
          DAM.Syntax._IStmt _164___mcc_h5 = _source20.dtor__1;
          DAM.Machine._IStack _165_stack = _160___mcc_h1;
          DAM.Syntax._IStmt _166_rhs = _164___mcc_h5;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _167_env = _163___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _168_var__ = _161___mcc_h2;
          DAM.Syntax._INeg _source21 = start;
          if (_source21.is_Value) {
            DAM.Syntax._IPos _169___mcc_h8 = _source21.dtor_pos;
            DAM.Syntax._IPos _170_t = _169___mcc_h8;
            DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _171_valueOrError0 = DAM.Statics.__default.SynthEnv(s, _167_env);
            if ((_171_valueOrError0).IsFailure()) {
              return (_171_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _172_g = (_171_valueOrError0).Extract();
              DAM.Utils._IOption<DAM.Syntax._INeg> _173_valueOrError1 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_172_g, _168_var__, _170_t), _166_rhs);
              if ((_173_valueOrError1).IsFailure()) {
                return (_173_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
              } else {
                DAM.Syntax._INeg _174_start = (_173_valueOrError1).Extract();
                Dafny.ISequence<DAM.Syntax._IPos> _in0 = s;
                DAM.Syntax._INeg _in1 = _174_start;
                DAM.Machine._IStack _in2 = _165_stack;
                s = _in0;
                start = _in1;
                stack = _in2;
                goto TAIL_CALL_START;
              }
            }
          } else if (_source21.is_Function) {
            DAM.Syntax._IPos _175___mcc_h10 = _source21.dtor_dom;
            DAM.Syntax._INeg _176___mcc_h11 = _source21.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _177___mcc_h14 = _source21.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else if (_source19.is_Call) {
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _178___mcc_h6 = _source19.dtor_arg;
          DAM.Machine._IStack _179_stack = _160___mcc_h1;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _180_arg = _178___mcc_h6;
          DAM.Syntax._INeg _source22 = start;
          if (_source22.is_Value) {
            DAM.Syntax._IPos _181___mcc_h16 = _source22.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source22.is_Function) {
            DAM.Syntax._IPos _182___mcc_h18 = _source22.dtor_dom;
            DAM.Syntax._INeg _183___mcc_h19 = _source22.dtor_cod;
            DAM.Syntax._INeg _184_cod = _183___mcc_h19;
            DAM.Syntax._IPos _185_dom = _182___mcc_h18;
            if (DAM.Statics.__default.CheckClosedExpr(s, _180_arg, _185_dom)) {
              Dafny.ISequence<DAM.Syntax._IPos> _in3 = s;
              DAM.Syntax._INeg _in4 = _184_cod;
              DAM.Machine._IStack _in5 = _179_stack;
              s = _in3;
              start = _in4;
              stack = _in5;
              goto TAIL_CALL_START;
            } else {
              return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
            }
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _186___mcc_h22 = _source22.dtor_fields;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _187___mcc_h7 = _source19.dtor_field;
          DAM.Machine._IStack _188_stack = _160___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _189_lbl = _187___mcc_h7;
          DAM.Syntax._INeg _source23 = start;
          if (_source23.is_Value) {
            DAM.Syntax._IPos _190___mcc_h24 = _source23.dtor_pos;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else if (_source23.is_Function) {
            DAM.Syntax._IPos _191___mcc_h26 = _source23.dtor_dom;
            DAM.Syntax._INeg _192___mcc_h27 = _source23.dtor_cod;
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
          } else {
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _193___mcc_h30 = _source23.dtor_fields;
            Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg> _194_fields = _193___mcc_h30;
            DAM.Utils._IOption<DAM.Syntax._INeg> _195_valueOrError2 = DAM.Utils.__default.mapGet<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._INeg>(_194_fields, _189_lbl);
            if ((_195_valueOrError2).IsFailure()) {
              return (_195_valueOrError2).PropagateFailure<DAM.Syntax._INeg>();
            } else {
              DAM.Syntax._INeg _196_start = (_195_valueOrError2).Extract();
              Dafny.ISequence<DAM.Syntax._IPos> _in6 = s;
              DAM.Syntax._INeg _in7 = _196_start;
              DAM.Machine._IStack _in8 = _188_stack;
              s = _in6;
              start = _in7;
              stack = _in8;
              goto TAIL_CALL_START;
            }
          }
        }
      }
    }
    public static bool CheckStack(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Syntax._INeg start, DAM.Machine._IStack stack, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthStack(s, start, stack), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static DAM.Utils._IOption<DAM.Syntax._IPos> SynthVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val) {
      DAM.Machine._IVal _source24 = val;
      if (_source24.is_Unit) {
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Unit());
      } else if (_source24.is_Bool) {
        bool _197___mcc_h0 = _source24.dtor_answer;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Bool());
      } else if (_source24.is_Int) {
        BigInteger _198___mcc_h1 = _source24.dtor_Int_a0;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Int());
      } else if (_source24.is_Thunk) {
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _199___mcc_h2 = _source24.dtor_closure;
        _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source25 = _199___mcc_h2;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _200___mcc_h3 = _source25.dtor__0;
        DAM.Syntax._IStmt _201___mcc_h4 = _source25.dtor__1;
        DAM.Syntax._IStmt _202_stmt = _201___mcc_h4;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _203_env = _200___mcc_h3;
        DAM.Utils._IOption<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>> _204_valueOrError0 = DAM.Utils.__default.mapOption<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>(Dafny.Helpers.Id<Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>>((_205_env, _206_s) => ((System.Func<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>)(() => {
          var _coll3 = new System.Collections.Generic.List<Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>>();
          foreach (Dafny.ISequence<Dafny.Rune> _compr_3 in (_205_env).Keys.Elements) {
            Dafny.ISequence<Dafny.Rune> _207_var__ = (Dafny.ISequence<Dafny.Rune>)_compr_3;
            if ((_205_env).Contains(_207_var__)) {
              _coll3.Add(new Dafny.Pair<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>(_207_var__, DAM.Statics.__default.SynthVal(_206_s, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_205_env, _207_var__))));
            }
          }
          return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Utils._IOption<DAM.Syntax._IPos>>.FromCollection(_coll3);
        }))())(_203_env, s));
        if ((_204_valueOrError0).IsFailure()) {
          return (_204_valueOrError0).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _208_g = (_204_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _209_valueOrError1 = DAM.Statics.__default.SynthStmt(_208_g, _202_stmt);
          if ((_209_valueOrError1).IsFailure()) {
            return (_209_valueOrError1).PropagateFailure<DAM.Syntax._IPos>();
          } else {
            DAM.Syntax._INeg _210_t = (_209_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Thunk(_210_t));
          }
        }
      } else if (_source24.is_Ref) {
        BigInteger _211___mcc_h5 = _source24.dtor_addr;
        BigInteger _212_addr = _211___mcc_h5;
        DAM.Utils._IOption<DAM.Syntax._IPos> _213_valueOrError2 = DAM.Utils.__default.SeqGet<DAM.Syntax._IPos>(s, _212_addr);
        if ((_213_valueOrError2).IsFailure()) {
          return (_213_valueOrError2).PropagateFailure<DAM.Syntax._IPos>();
        } else {
          DAM.Syntax._IPos _214_t = (_213_valueOrError2).Extract();
          return DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(DAM.Syntax.Pos.create_Ref(_214_t));
        }
      } else {
        DAM.Syntax._INeg _215___mcc_h6 = _source24.dtor_start;
        DAM.Machine._IStack _216___mcc_h7 = _source24.dtor_stack;
        DAM.Machine._IStack _217_stack = _216___mcc_h7;
        DAM.Syntax._INeg _218_start = _215___mcc_h6;
        return DAM.Utils.Option<DAM.Syntax._IPos>.create_None();
      }
    }
    public static bool CheckVal(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IVal val, DAM.Syntax._IPos t) {
      return object.Equals(DAM.Statics.__default.SynthVal(s, val), DAM.Utils.Option<DAM.Syntax._IPos>.create_Some(t));
    }
    public static bool CheckStore(Dafny.ISequence<DAM.Syntax._IPos> s, Dafny.ISequence<DAM.Machine._IVal> store) {
      return ((new BigInteger((store).Count)) == (new BigInteger((s).Count))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<DAM.Machine._IVal>, Dafny.ISequence<DAM.Syntax._IPos>, bool>>((_219_store, _220_s) => Dafny.Helpers.Quantifier<BigInteger>(Dafny.Helpers.IntegerRange(BigInteger.Zero, new BigInteger((_219_store).Count)), true, (((_forall_var_1) => {
        BigInteger _221_addr = (BigInteger)_forall_var_1;
        return !(((_221_addr).Sign != -1) && ((_221_addr) < (new BigInteger((_219_store).Count)))) || (DAM.Statics.__default.CheckVal(_220_s, (_219_store).Select(_221_addr), (_220_s).Select(_221_addr)));
      }))))(store, s));
    }
    public static DAM.Utils._IOption<DAM.Syntax._INeg> SynthInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs2 = input;
      Dafny.ISequence<DAM.Machine._IVal> _222_sto = _let_tmp_rhs2.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _223_stmt = _let_tmp_rhs2.dtor__1;
      DAM.Machine._IStack _224_stack = _let_tmp_rhs2.dtor__2;
      if (DAM.Statics.__default.CheckStore(s, _222_sto)) {
        DAM.Utils._IOption<DAM.Syntax._INeg> _225_valueOrError0 = DAM.Statics.__default.SynthClosedStmt(s, _223_stmt);
        if ((_225_valueOrError0).IsFailure()) {
          return (_225_valueOrError0).PropagateFailure<DAM.Syntax._INeg>();
        } else {
          DAM.Syntax._INeg _226_start = (_225_valueOrError0).Extract();
          DAM.Utils._IOption<DAM.Syntax._INeg> _227_valueOrError1 = DAM.Statics.__default.SynthStack(s, _226_start, _224_stack);
          if ((_227_valueOrError1).IsFailure()) {
            return (_227_valueOrError1).PropagateFailure<DAM.Syntax._INeg>();
          } else {
            DAM.Syntax._INeg _228_end = (_227_valueOrError1).Extract();
            return DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(_228_end);
          }
        }
      } else {
        return DAM.Utils.Option<DAM.Syntax._INeg>.create_None();
      }
    }
    public static bool CheckInput(Dafny.ISequence<DAM.Syntax._IPos> s, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input, DAM.Syntax._INeg end) {
      return object.Equals(DAM.Statics.__default.SynthInput(s, input), DAM.Utils.Option<DAM.Syntax._INeg>.create_Some(end));
    }
    public static bool CheckOutput(Dafny.ISequence<DAM.Syntax._IPos> s, DAM.Machine._IOutput @out, DAM.Syntax._INeg end) {
      DAM.Machine._IOutput _source26 = @out;
      if (_source26.is_Raise) {
        DAM.Machine._IEvent _229___mcc_h0 = _source26.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _230___mcc_h1 = _source26.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _231_next = _230___mcc_h1;
        return DAM.Statics.__default.CheckInput(s, _231_next, end);
      } else {
        return true;
      }
    }
  }
} // end of namespace DAM.Statics
namespace DAM.Dynamics {

  public partial class __default {
    public static DAM.Machine._IVal Eval(_System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> expr) {
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _let_tmp_rhs3 = expr;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _232_env = _let_tmp_rhs3.dtor__0;
      DAM.Syntax._IExpr _233_expr = _let_tmp_rhs3.dtor__1;
      DAM.Syntax._IExpr _source27 = _233_expr;
      if (_source27.is_Var) {
        Dafny.ISequence<Dafny.Rune> _234___mcc_h0 = _source27.dtor_Var_a0;
        Dafny.ISequence<Dafny.Rune> _235_x = _234___mcc_h0;
        return Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Select(_232_env, _235_x);
      } else if (_source27.is_Unit) {
        return DAM.Machine.Val.create_Unit();
      } else if (_source27.is_Bool) {
        bool _236___mcc_h1 = _source27.dtor_Bool_a0;
        bool _237_b = _236___mcc_h1;
        return DAM.Machine.Val.create_Bool(_237_b);
      } else if (_source27.is_Int) {
        BigInteger _238___mcc_h2 = _source27.dtor_Int_a0;
        BigInteger _239_i = _238___mcc_h2;
        return DAM.Machine.Val.create_Int(_239_i);
      } else {
        DAM.Syntax._IStmt _240___mcc_h3 = _source27.dtor_Thunk_a0;
        DAM.Syntax._IStmt _241_stmt = _240___mcc_h3;
        return DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_232_env, _241_stmt));
      }
    }
    public static DAM.Machine._IOutput Step(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _let_tmp_rhs4 = input;
      Dafny.ISequence<DAM.Machine._IVal> _242_store = _let_tmp_rhs4.dtor__0;
      _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _let_tmp_rhs5 = _let_tmp_rhs4.dtor__1;
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _243_env = _let_tmp_rhs5.dtor__0;
      DAM.Syntax._IStmt _244_stmt = _let_tmp_rhs5.dtor__1;
      DAM.Machine._IStack _245_stack = _let_tmp_rhs4.dtor__2;
      DAM.Syntax._IStmt _source28 = _244_stmt;
      if (_source28.is_Pure) {
        DAM.Syntax._IExpr _246___mcc_h0 = _source28.dtor_Pure_a0;
        DAM.Syntax._IExpr _247_expr = _246___mcc_h0;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source29 = (_245_stack).Pop();
        if (_source29.is_None) {
          DAM.Machine._IOutput _248_output = DAM.Machine.Output.create_Terminal();
          return _248_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _249___mcc_h36 = _source29.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source30 = _249___mcc_h36;
          DAM.Machine._IFrame _250___mcc_h37 = _source30.dtor__0;
          DAM.Machine._IStack _251___mcc_h38 = _source30.dtor__1;
          DAM.Machine._IFrame _source31 = _250___mcc_h37;
          Dafny.ISequence<Dafny.Rune> _252___mcc_h39 = _source31.dtor_var__;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _253___mcc_h40 = _source31.dtor_rhs;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt> _source32 = _253___mcc_h40;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _254___mcc_h41 = _source32.dtor__0;
          DAM.Syntax._IStmt _255___mcc_h42 = _source32.dtor__1;
          DAM.Machine._IStack _256_stack = _251___mcc_h38;
          DAM.Syntax._IStmt _257_rhs = _255___mcc_h42;
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal> _258_env_k = _254___mcc_h41;
          Dafny.ISequence<Dafny.Rune> _259_var__ = _252___mcc_h39;
          DAM.Machine._IVal _260_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _247_expr));
          DAM.Machine._IOutput _261_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_258_env_k, _259_var__, _260_val), _257_rhs), _256_stack));
          return _261_output;
        }
      } else if (_source28.is_Bind) {
        DAM.Syntax._IStmt _262___mcc_h1 = _source28.dtor_lhs;
        Dafny.ISequence<Dafny.Rune> _263___mcc_h2 = _source28.dtor_var__;
        DAM.Syntax._IStmt _264___mcc_h3 = _source28.dtor_rhs;
        DAM.Syntax._IStmt _265_rhs = _264___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _266_var__ = _263___mcc_h2;
        DAM.Syntax._IStmt _267_lhs = _262___mcc_h1;
        DAM.Machine._IOutput _268_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _267_lhs), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Bind(_266_var__, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _265_rhs)), _245_stack)));
        return _268_output;
      } else if (_source28.is_Ite) {
        DAM.Syntax._IExpr _269___mcc_h4 = _source28.dtor_guard;
        DAM.Syntax._IStmt _270___mcc_h5 = _source28.dtor_then__;
        DAM.Syntax._IStmt _271___mcc_h6 = _source28.dtor_else__;
        DAM.Syntax._IStmt _272_else__ = _271___mcc_h6;
        DAM.Syntax._IStmt _273_then__ = _270___mcc_h5;
        DAM.Syntax._IExpr _274_guard = _269___mcc_h4;
        DAM.Machine._IVal _275_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _274_guard));
        DAM.Machine._IOutput _276_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, (((_275_val).dtor_answer) ? (_273_then__) : (_272_else__))), _245_stack));
        return _276_output;
      } else if (_source28.is_Func) {
        Dafny.ISequence<Dafny.Rune> _277___mcc_h7 = _source28.dtor_bound;
        DAM.Syntax._IPos _278___mcc_h8 = _source28.dtor_dom;
        DAM.Syntax._IStmt _279___mcc_h9 = _source28.dtor_body;
        DAM.Syntax._IStmt _280_body = _279___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _281_bound = _277___mcc_h7;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source33 = (_245_stack).Pop();
        if (_source33.is_None) {
          DAM.Machine._IOutput _282_output = DAM.Machine.Output.create_Terminal();
          return _282_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _283___mcc_h45 = _source33.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source34 = _283___mcc_h45;
          DAM.Machine._IFrame _284___mcc_h46 = _source34.dtor__0;
          DAM.Machine._IStack _285___mcc_h47 = _source34.dtor__1;
          DAM.Machine._IFrame _source35 = _284___mcc_h46;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _286___mcc_h50 = _source35.dtor_arg;
          DAM.Machine._IStack _287_stack = _285___mcc_h47;
          _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr> _288_arg = _286___mcc_h50;
          DAM.Machine._IVal _289_val = DAM.Dynamics.__default.Eval(_288_arg);
          DAM.Machine._IOutput _290_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _281_bound, _289_val), _280_body), _287_stack));
          return _290_output;
        }
      } else if (_source28.is_Call) {
        DAM.Syntax._IStmt _291___mcc_h10 = _source28.dtor_func;
        DAM.Syntax._IExpr _292___mcc_h11 = _source28.dtor_arg;
        DAM.Syntax._IExpr _293_arg = _292___mcc_h11;
        DAM.Syntax._IStmt _294_func = _291___mcc_h10;
        DAM.Machine._IOutput _295_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _294_func), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Call(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _293_arg)), _245_stack)));
        return _295_output;
      } else if (_source28.is_Record) {
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _296___mcc_h12 = _source28.dtor_fields;
        Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _297_fields = _296___mcc_h12;
        DAM.Utils._IOption<_System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack>> _source36 = (_245_stack).Pop();
        if (_source36.is_None) {
          DAM.Machine._IOutput _298_output = DAM.Machine.Output.create_Terminal();
          return _298_output;
        } else {
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _299___mcc_h52 = _source36.dtor_value;
          _System._ITuple2<DAM.Machine._IFrame, DAM.Machine._IStack> _source37 = _299___mcc_h52;
          DAM.Machine._IFrame _300___mcc_h53 = _source37.dtor__0;
          DAM.Machine._IStack _301___mcc_h54 = _source37.dtor__1;
          DAM.Machine._IFrame _source38 = _300___mcc_h53;
          Dafny.ISequence<Dafny.Rune> _302___mcc_h58 = _source38.dtor_field;
          DAM.Machine._IStack _303_stack = _301___mcc_h54;
          Dafny.ISequence<Dafny.Rune> _304_lbl = _302___mcc_h58;
          DAM.Machine._IOutput _305_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Select(_297_fields, _304_lbl)), _303_stack));
          return _305_output;
        }
      } else if (_source28.is_Select) {
        DAM.Syntax._IStmt _306___mcc_h13 = _source28.dtor_record;
        Dafny.ISequence<Dafny.Rune> _307___mcc_h14 = _source28.dtor_field;
        Dafny.ISequence<Dafny.Rune> _308_field = _307___mcc_h14;
        DAM.Syntax._IStmt _309_record = _306___mcc_h13;
        DAM.Machine._IOutput _310_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _309_record), DAM.Machine.Stack.create_Push(DAM.Machine.Frame.create_Select(_308_field), _245_stack)));
        return _310_output;
      } else if (_source28.is_Force) {
        DAM.Syntax._IExpr _311___mcc_h15 = _source28.dtor_Force_a0;
        DAM.Syntax._IExpr _312_thunk = _311___mcc_h15;
        DAM.Machine._IVal _313_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _312_thunk));
        DAM.Machine._IOutput _314_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, (_313_val).dtor_closure, _245_stack));
        return _314_output;
      } else if (_source28.is_New) {
        DAM.Syntax._IExpr _315___mcc_h16 = _source28.dtor_init;
        Dafny.ISequence<Dafny.Rune> _316___mcc_h17 = _source28.dtor_var__;
        DAM.Syntax._IStmt _317___mcc_h18 = _source28.dtor_next;
        DAM.Syntax._IStmt _318_next = _317___mcc_h18;
        Dafny.ISequence<Dafny.Rune> _319_var__ = _316___mcc_h17;
        DAM.Syntax._IExpr _320_init = _315___mcc_h16;
        DAM.Machine._IVal _321_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _320_init));
        _System._ITuple2<BigInteger, Dafny.ISequence<DAM.Machine._IVal>> _let_tmp_rhs6 = DAM.Utils.__default.Extend<DAM.Machine._IVal>(_242_store, _321_val);
        BigInteger _322_addr = _let_tmp_rhs6.dtor__0;
        Dafny.ISequence<DAM.Machine._IVal> _323_store_k = _let_tmp_rhs6.dtor__1;
        DAM.Machine._IOutput _324_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_323_store_k, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _319_var__, DAM.Machine.Val.create_Ref(_322_addr)), _318_next), _245_stack));
        return _324_output;
      } else if (_source28.is_Read) {
        DAM.Syntax._IExpr _325___mcc_h19 = _source28.dtor_ref;
        Dafny.ISequence<Dafny.Rune> _326___mcc_h20 = _source28.dtor_var__;
        DAM.Syntax._IStmt _327___mcc_h21 = _source28.dtor_next;
        DAM.Syntax._IStmt _328_next = _327___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _329_var__ = _326___mcc_h20;
        DAM.Syntax._IExpr _330_ref = _325___mcc_h19;
        DAM.Machine._IVal _331_val = (_242_store).Select((DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _330_ref))).dtor_addr);
        DAM.Machine._IOutput _332_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _329_var__, _331_val), _328_next), _245_stack));
        return _332_output;
      } else if (_source28.is_Write) {
        DAM.Syntax._IExpr _333___mcc_h22 = _source28.dtor_lvalue;
        DAM.Syntax._IExpr _334___mcc_h23 = _source28.dtor_rvalue;
        DAM.Syntax._IStmt _335___mcc_h24 = _source28.dtor_next;
        DAM.Syntax._IStmt _336_next = _335___mcc_h24;
        DAM.Syntax._IExpr _337_rhs = _334___mcc_h23;
        DAM.Syntax._IExpr _338_lhs = _333___mcc_h22;
        BigInteger _339_lval = (DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _338_lhs))).dtor_addr;
        DAM.Machine._IVal _340_rval = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _337_rhs));
        DAM.Machine._IOutput _341_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.Update(_242_store, _339_lval, _340_rval), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _336_next), _245_stack));
        return _341_output;
      } else if (_source28.is_Print) {
        DAM.Syntax._IExpr _342___mcc_h25 = _source28.dtor_Print_a0;
        DAM.Syntax._IStmt _343___mcc_h26 = _source28.dtor_next;
        DAM.Syntax._IStmt _344_next = _343___mcc_h26;
        DAM.Syntax._IExpr _345_expr = _342___mcc_h25;
        DAM.Machine._IVal _346_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _345_expr));
        DAM.Machine._IOutput _347_output = DAM.Machine.Output.create_Raise(DAM.Machine.Event.create_Print(_346_val), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _344_next), _245_stack));
        return _347_output;
      } else if (_source28.is_Rec) {
        Dafny.ISequence<Dafny.Rune> _348___mcc_h27 = _source28.dtor_bound;
        DAM.Syntax._INeg _349___mcc_h28 = _source28.dtor_fix;
        DAM.Syntax._IStmt _350___mcc_h29 = _source28.dtor_body;
        DAM.Syntax._IStmt _351_body = _350___mcc_h29;
        DAM.Syntax._INeg _352_fix = _349___mcc_h28;
        Dafny.ISequence<Dafny.Rune> _353_self = _348___mcc_h27;
        DAM.Machine._IVal _354_val = DAM.Machine.Val.create_Thunk(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _244_stmt));
        DAM.Machine._IOutput _355_output = DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _353_self, _354_val), _351_body), _245_stack));
        return _355_output;
      } else if (_source28.is_LetCS) {
        Dafny.ISequence<Dafny.Rune> _356___mcc_h30 = _source28.dtor_bound;
        DAM.Syntax._INeg _357___mcc_h31 = _source28.dtor_start;
        DAM.Syntax._IStmt _358___mcc_h32 = _source28.dtor_body;
        DAM.Syntax._IStmt _359_body = _358___mcc_h32;
        DAM.Syntax._INeg _360_start = _357___mcc_h31;
        Dafny.ISequence<Dafny.Rune> _361_bound = _356___mcc_h30;
        return DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Update(_243_env, _361_bound, DAM.Machine.Val.create_Stack(_360_start, _245_stack)), _359_body), _245_stack));
      } else {
        DAM.Syntax._IExpr _362___mcc_h33 = _source28.dtor_stack;
        DAM.Syntax._INeg _363___mcc_h34 = _source28.dtor_oldstart;
        DAM.Syntax._IStmt _364___mcc_h35 = _source28.dtor_next;
        DAM.Syntax._IStmt _365_next = _364___mcc_h35;
        DAM.Syntax._IExpr _366_expr = _362___mcc_h33;
        DAM.Machine._IVal _367_val = DAM.Dynamics.__default.Eval(_System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IExpr>.create(_243_env, _366_expr));
        return DAM.Machine.__default.Next(_System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(_242_store, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(_243_env, _365_next), (_367_val).dtor_stack));
      }
    }
    public static DAM.Dynamics._ITrace Run(_System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> input) {
      DAM.Machine._IOutput _source39 = DAM.Dynamics.__default.Step(input);
      if (_source39.is_Raise) {
        DAM.Machine._IEvent _368___mcc_h0 = _source39.dtor_event;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _369___mcc_h1 = _source39.dtor_next;
        _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _370_next = _369___mcc_h1;
        DAM.Machine._IEvent _371_evt = _368___mcc_h0;
        return new DAM.Dynamics.Trace__Lazy(() => { return new DAM.Dynamics.Trace_Stepping(_371_evt, _370_next, DAM.Dynamics.__default.Run(_370_next)); });
      } else {
        return DAM.Dynamics.Trace.create_Done();
      }
    }
    public static _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> Initial(DAM.Syntax._IStmt stmt) {
      return _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.create(Dafny.Sequence<DAM.Machine._IVal>.FromElements(), _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.create(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.FromElements(), stmt), DAM.Machine.Stack.create_Empty());
    }
    public static DAM.Utils._IOption<DAM.Dynamics._ITrace> RunSafe(DAM.Syntax._IStmt stmt) {
      DAM.Utils._IOption<DAM.Syntax._INeg> _372_valueOrError0 = DAM.Statics.__default.SynthStmt(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements(), stmt);
      if ((_372_valueOrError0).IsFailure()) {
        return (_372_valueOrError0).PropagateFailure<DAM.Dynamics._ITrace>();
      } else {
        DAM.Syntax._INeg _373_end = (_372_valueOrError0).Extract();
        return DAM.Utils.Option<DAM.Dynamics._ITrace>.create_Some(DAM.Dynamics.__default.Run(DAM.Dynamics.__default.Initial(stmt)));
      }
    }
    public static DAM.Dynamics._ITrace RunUnsafe(DAM.Syntax._IStmt stmt) {
      return DAM.Dynamics.__default.Run(DAM.Dynamics.__default.Initial(stmt));
    }
  }

  public interface _ITrace {
    _ITrace _Get();
    bool is_Stepping { get; }
    bool is_Done { get; }
    DAM.Machine._IEvent dtor_Stepping_a0 { get; }
    _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a1 { get; }
    DAM.Dynamics._ITrace dtor_Stepping_a2 { get; }
    _ITrace DowncastClone();
  }
  public abstract class Trace : _ITrace {
    public Trace() {
    }
    private static readonly DAM.Dynamics._ITrace theDefault = new DAM.Dynamics.Trace__Lazy(() => { return create_Stepping(DAM.Machine.Event.Default(), _System.Tuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack>.Default(Dafny.Sequence<DAM.Machine._IVal>.Empty, _System.Tuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>.Default(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>.Empty, DAM.Syntax.Stmt.Default()), DAM.Machine.Stack.Default()), DAM.Dynamics.Trace.Default()); });
    public static DAM.Dynamics._ITrace Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TYPE = new Dafny.TypeDescriptor<DAM.Dynamics._ITrace>(DAM.Dynamics.Trace.Default());
    public static Dafny.TypeDescriptor<DAM.Dynamics._ITrace> _TypeDescriptor() {
      return _TYPE;
    }
    public abstract _ITrace _Get();
    public static _ITrace create_Stepping(DAM.Machine._IEvent _a0, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1, DAM.Dynamics._ITrace _a2) {
      return new Trace_Stepping(_a0, _a1, _a2);
    }
    public static _ITrace create_Done() {
      return new Trace_Done();
    }
    public bool is_Stepping { get { return this is Trace_Stepping; } }
    public bool is_Done { get { return this is Trace_Done; } }
    public DAM.Machine._IEvent dtor_Stepping_a0 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a0;
      }
    }
    public _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> dtor_Stepping_a1 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a1;
      }
    }
    public DAM.Dynamics._ITrace dtor_Stepping_a2 {
      get {
        var d = this._Get();
        return ((Trace_Stepping)d)._a2;
      }
    }
    public abstract _ITrace DowncastClone();
  }
  public class Trace__Lazy : Trace {
    public delegate _ITrace Computer();
    Computer c;
    _ITrace d;
    public Trace__Lazy(Computer c) : base() {
      this.c = c;
    }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new DAM.Dynamics.Trace__Lazy(() => _Get().DowncastClone());
    }
    public override _ITrace _Get() { if (c != null) { d = c(); c = null; } return d; }
    public override string ToString() { return _Get().ToString(); }
  }
  public class Trace_Stepping : Trace {
    public readonly DAM.Machine._IEvent _a0;
    public readonly _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1;
    public readonly DAM.Dynamics._ITrace _a2;
    public Trace_Stepping(DAM.Machine._IEvent _a0, _System._ITuple3<Dafny.ISequence<DAM.Machine._IVal>, _System._ITuple2<Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Machine._IVal>, DAM.Syntax._IStmt>, DAM.Machine._IStack> _a1, DAM.Dynamics._ITrace _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Stepping(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Stepping;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Stepping";
    }
  }
  public class Trace_Done : Trace {
    public Trace_Done() : base() {
    }
    public override _ITrace _Get() { return this; }
    public override _ITrace DowncastClone() {
      if (this is _ITrace dt) { return dt; }
      return new Trace_Done();
    }
    public override bool Equals(object other) {
      var oth = other as DAM.Dynamics.Trace_Done;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      return "Dynamics.Trace.Done";
    }
  }
} // end of namespace DAM.Dynamics


namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _hi0 = new BigInteger((d).Count);
      for (BigInteger _374_i = BigInteger.Zero; _374_i < _hi0; _374_i++) {
        Dafny.ISequence<Dafny.Rune> _375_s_k;
        Dafny.ISequence<Dafny.Rune> _out1;
        _out1 = D2DPrettyPrinter.__default.PModule((d).Select(_374_i));
        _375_s_k = _out1;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _375_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PModule(DAST._IModule mod) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("module "), (mod).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi1 = new BigInteger(((mod).dtor_body).Count);
      for (BigInteger _376_i = BigInteger.Zero; _376_i < _hi1; _376_i++) {
        DAST._IModuleItem _source40 = ((mod).dtor_body).Select(_376_i);
        if (_source40.is_Module) {
          DAST._IModule _377___mcc_h0 = _source40.dtor_Module_a0;
          DAST._IModule _378_m = _377___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _379_s_k;
          Dafny.ISequence<Dafny.Rune> _out2;
          _out2 = D2DPrettyPrinter.__default.PModule(_378_m);
          _379_s_k = _out2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _379_s_k);
        } else if (_source40.is_Class) {
          DAST._IClass _380___mcc_h1 = _source40.dtor_Class_a0;
          DAST._IClass _381_c = _380___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _382_s_k;
          Dafny.ISequence<Dafny.Rune> _out3;
          _out3 = D2DPrettyPrinter.__default.PClass(_381_c);
          _382_s_k = _out3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _382_s_k);
        } else if (_source40.is_Trait) {
          DAST._ITrait _383___mcc_h2 = _source40.dtor_Trait_a0;
          DAST._ITrait _384_c = _383___mcc_h2;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else if (_source40.is_Newtype) {
          DAST._INewtype _385___mcc_h3 = _source40.dtor_Newtype_a0;
          DAST._INewtype _386_n = _385___mcc_h3;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        } else {
          DAST._IDatatype _387___mcc_h4 = _source40.dtor_Datatype_a0;
          DAST._IDatatype _388_d = _387___mcc_h4;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PClass(DAST._IClass c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("class "), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      BigInteger _hi2 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _389_i = BigInteger.Zero; _389_i < _hi2; _389_i++) {
        DAST._IMethod _source41 = ((c).dtor_body).Select(_389_i);
        DAST._IMethod _390___mcc_h0 = _source41;
        DAST._IMethod _391_m = _390___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _392_s_k;
        Dafny.ISequence<Dafny.Rune> _out4;
        _out4 = D2DPrettyPrinter.__default.PMethod(_391_m);
        _392_s_k = _out4;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _392_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PMethod(DAST._IMethod meth) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("method "), (meth).dtor_name);
      Dafny.ISequence<Dafny.Rune> _393_s_k;
      Dafny.ISequence<Dafny.Rune> _out5;
      _out5 = D2DPrettyPrinter.__default.PFormals((meth).dtor_params, (meth).dtor_typeParams);
      _393_s_k = _out5;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _393_s_k);
      Dafny.ISequence<Dafny.Rune> _out6;
      _out6 = D2DPrettyPrinter.__default.PBlock((meth).dtor_body);
      _393_s_k = _out6;
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, _393_s_k);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PFormals(Dafny.ISequence<DAST._IFormal> names, Dafny.ISequence<DAST._IType> types) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
      BigInteger _hi3 = new BigInteger((names).Count);
      for (BigInteger _394_i = BigInteger.Zero; _394_i < _hi3; _394_i++) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, ((names).Select(_394_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": _,"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PBlock(Dafny.ISequence<DAST._IStatement> stmt) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
      }
      BigInteger _hi4 = new BigInteger((stmt).Count);
      for (BigInteger _395_i = BigInteger.Zero; _395_i < _hi4; _395_i++) {
        Dafny.ISequence<Dafny.Rune> _396_s_k;
        Dafny.ISequence<Dafny.Rune> _out7;
        _out7 = D2DPrettyPrinter.__default.PStatement((stmt).Select(_395_i));
        _396_s_k = _out7;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _396_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      if ((new BigInteger((stmt).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PStatement(DAST._IStatement st) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IStatement _source42 = st;
      if (_source42.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _397___mcc_h0 = _source42.dtor_name;
        DAST._IType _398___mcc_h1 = _source42.dtor_typ;
        DAST._IOptional<DAST._IExpression> _399___mcc_h2 = _source42.dtor_maybeValue;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Assign) {
        DAST._IAssignLhs _400___mcc_h6 = _source42.dtor_lhs;
        DAST._IExpression _401___mcc_h7 = _source42.dtor_value;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_If) {
        DAST._IExpression _402___mcc_h10 = _source42.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _403___mcc_h11 = _source42.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _404___mcc_h12 = _source42.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _405___mcc_h16 = _source42.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _406___mcc_h17 = _source42.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_While) {
        DAST._IExpression _407___mcc_h20 = _source42.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _408___mcc_h21 = _source42.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _409___mcc_h24 = _source42.dtor_boundName;
        DAST._IType _410___mcc_h25 = _source42.dtor_boundType;
        DAST._IExpression _411___mcc_h26 = _source42.dtor_over;
        Dafny.ISequence<DAST._IStatement> _412___mcc_h27 = _source42.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Call) {
        DAST._IExpression _413___mcc_h32 = _source42.dtor_on;
        Dafny.ISequence<Dafny.Rune> _414___mcc_h33 = _source42.dtor_name;
        Dafny.ISequence<DAST._IType> _415___mcc_h34 = _source42.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _416___mcc_h35 = _source42.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _417___mcc_h36 = _source42.dtor_outs;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Return) {
        DAST._IExpression _418___mcc_h42 = _source42.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_EarlyReturn) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return");
      } else if (_source42.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _419___mcc_h44 = _source42.dtor_toLabel;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _420___mcc_h46 = _source42.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_JumpTailCallStart) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source42.is_Halt) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _421___mcc_h48 = _source42.dtor_Print_a0;
        DAST._IExpression _422_e = _421___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _423_s_k;
        Dafny.ISequence<Dafny.Rune> _out8;
        _out8 = D2DPrettyPrinter.__default.PExpression(_422_e);
        _423_s_k = _out8;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print "), _423_s_k);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PExpression(DAST._IExpression e) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IExpression _source43 = e;
      if (_source43.is_Literal) {
        DAST._ILiteral _424___mcc_h0 = _source43.dtor_Literal_a0;
        DAST._ILiteral _425_l = _424___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out9;
        _out9 = D2DPrettyPrinter.__default.PLiteral(_425_l);
        s = _out9;
      } else if (_source43.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _426___mcc_h2 = _source43.dtor_Ident_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _427___mcc_h4 = _source43.dtor_Companion_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _428___mcc_h6 = _source43.dtor_Tuple_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _429___mcc_h8 = _source43.dtor_path;
        Dafny.ISequence<DAST._IType> _430___mcc_h9 = _source43.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _431___mcc_h10 = _source43.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _432___mcc_h14 = _source43.dtor_dims;
        DAST._IType _433___mcc_h15 = _source43.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _434___mcc_h18 = _source43.dtor_path;
        Dafny.ISequence<DAST._IType> _435___mcc_h19 = _source43.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _436___mcc_h20 = _source43.dtor_variant;
        bool _437___mcc_h21 = _source43.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _438___mcc_h22 = _source43.dtor_contents;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Convert) {
        DAST._IExpression _439___mcc_h28 = _source43.dtor_value;
        DAST._IType _440___mcc_h29 = _source43.dtor_from;
        DAST._IType _441___mcc_h30 = _source43.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SeqConstruct) {
        DAST._IExpression _442___mcc_h34 = _source43.dtor_length;
        DAST._IExpression _443___mcc_h35 = _source43.dtor_elem;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _444___mcc_h38 = _source43.dtor_elements;
        DAST._IType _445___mcc_h39 = _source43.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _446___mcc_h42 = _source43.dtor_elements;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _447___mcc_h44 = _source43.dtor_mapElems;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_This) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Ite) {
        DAST._IExpression _448___mcc_h46 = _source43.dtor_cond;
        DAST._IExpression _449___mcc_h47 = _source43.dtor_thn;
        DAST._IExpression _450___mcc_h48 = _source43.dtor_els;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_UnOp) {
        DAST._IUnaryOp _451___mcc_h52 = _source43.dtor_unOp;
        DAST._IExpression _452___mcc_h53 = _source43.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_BinOp) {
        DAST._IBinOp _453___mcc_h56 = _source43.dtor_op;
        DAST._IExpression _454___mcc_h57 = _source43.dtor_left;
        DAST._IExpression _455___mcc_h58 = _source43.dtor_right;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_ArrayLen) {
        DAST._IExpression _456___mcc_h62 = _source43.dtor_expr;
        BigInteger _457___mcc_h63 = _source43.dtor_dim;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Select) {
        DAST._IExpression _458___mcc_h66 = _source43.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _459___mcc_h67 = _source43.dtor_field;
        bool _460___mcc_h68 = _source43.dtor_isConstant;
        bool _461___mcc_h69 = _source43.dtor_onDatatype;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SelectFn) {
        DAST._IExpression _462___mcc_h74 = _source43.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _463___mcc_h75 = _source43.dtor_field;
        bool _464___mcc_h76 = _source43.dtor_onDatatype;
        bool _465___mcc_h77 = _source43.dtor_isStatic;
        BigInteger _466___mcc_h78 = _source43.dtor_arity;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Index) {
        DAST._IExpression _467___mcc_h84 = _source43.dtor_expr;
        DAST._ICollKind _468___mcc_h85 = _source43.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _469___mcc_h86 = _source43.dtor_indices;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_IndexRange) {
        DAST._IExpression _470___mcc_h90 = _source43.dtor_expr;
        bool _471___mcc_h91 = _source43.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _472___mcc_h92 = _source43.dtor_low;
        DAST._IOptional<DAST._IExpression> _473___mcc_h93 = _source43.dtor_high;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_TupleSelect) {
        DAST._IExpression _474___mcc_h98 = _source43.dtor_expr;
        BigInteger _475___mcc_h99 = _source43.dtor_index;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Call) {
        DAST._IExpression _476___mcc_h102 = _source43.dtor_on;
        Dafny.ISequence<Dafny.Rune> _477___mcc_h103 = _source43.dtor_name;
        Dafny.ISequence<DAST._IType> _478___mcc_h104 = _source43.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _479___mcc_h105 = _source43.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _480___mcc_h110 = _source43.dtor_params;
        DAST._IType _481___mcc_h111 = _source43.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _482___mcc_h112 = _source43.dtor_body;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _483___mcc_h116 = _source43.dtor_values;
        DAST._IType _484___mcc_h117 = _source43.dtor_retType;
        DAST._IExpression _485___mcc_h118 = _source43.dtor_expr;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _486___mcc_h122 = _source43.dtor_name;
        DAST._IType _487___mcc_h123 = _source43.dtor_typ;
        DAST._IExpression _488___mcc_h124 = _source43.dtor_value;
        DAST._IExpression _489___mcc_h125 = _source43.dtor_iifeBody;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_Apply) {
        DAST._IExpression _490___mcc_h130 = _source43.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _491___mcc_h131 = _source43.dtor_args;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_TypeTest) {
        DAST._IExpression _492___mcc_h134 = _source43.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _493___mcc_h135 = _source43.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _494___mcc_h136 = _source43.dtor_variant;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_InitializationValue) {
        DAST._IType _495___mcc_h140 = _source43.dtor_typ;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_BoolBoundedPool) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SetBoundedPool) {
        DAST._IExpression _496___mcc_h142 = _source43.dtor_of;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else if (_source43.is_SeqBoundedPool) {
        DAST._IExpression _497___mcc_h144 = _source43.dtor_of;
        bool _498___mcc_h145 = _source43.dtor_includeDuplicates;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      } else {
        DAST._IExpression _499___mcc_h148 = _source43.dtor_lo;
        DAST._IExpression _500___mcc_h149 = _source43.dtor_hi;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("NYI");
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> PLiteral(DAST._ILiteral l) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._ILiteral _source44 = l;
      if (_source44.is_BoolLiteral) {
        bool _501___mcc_h0 = _source44.dtor_BoolLiteral_a0;
        bool _502_b = _501___mcc_h0;
        s = ((_502_b) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")));
      } else if (_source44.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _503___mcc_h1 = _source44.dtor_IntLiteral_a0;
        DAST._IType _504___mcc_h2 = _source44.dtor_IntLiteral_a1;
        Dafny.ISequence<Dafny.Rune> _505_i = _503___mcc_h1;
        s = _505_i;
      } else if (_source44.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _506___mcc_h3 = _source44.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _507___mcc_h4 = _source44.dtor_DecLiteral_a1;
        DAST._IType _508___mcc_h5 = _source44.dtor_DecLiteral_a2;
        Dafny.ISequence<Dafny.Rune> _509_r = _507___mcc_h4;
        Dafny.ISequence<Dafny.Rune> _510_l = _506___mcc_h3;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_510_l, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _509_r);
      } else if (_source44.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _511___mcc_h6 = _source44.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _512_s_k = _511___mcc_h6;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _512_s_k), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source44.is_CharLiteral) {
        Dafny.Rune _513___mcc_h7 = _source44.dtor_CharLiteral_a0;
        Dafny.Rune _514_c = _513___mcc_h7;
        s = Dafny.Sequence<Dafny.Rune>.FromElements(_514_c);
      } else {
        DAST._IType _515___mcc_h8 = _source44.dtor_Null_a0;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("null");
      }
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class Lower {
    public Lower() {
      this.main = DAM.Syntax.Stmt.Default();
    }
    public DAM.Syntax._IStmt main { get; set; }
    public void __ctor() {
    }
    public static DAM.Syntax._IPos PolarizePos(DAST._IType t) {
      DAM.Syntax._IPos p = DAM.Syntax.Pos.Default();
      DAST._IType _source45 = t;
      if (_source45.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _516___mcc_h0 = _source45.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _517___mcc_h1 = _source45.dtor_typeArgs;
        DAST._IResolvedType _518___mcc_h2 = _source45.dtor_resolved;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Nullable) {
        DAST._IType _519___mcc_h6 = _source45.dtor_Nullable_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Tuple) {
        Dafny.ISequence<DAST._IType> _520___mcc_h8 = _source45.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Array) {
        DAST._IType _521___mcc_h10 = _source45.dtor_element;
        BigInteger _522___mcc_h11 = _source45.dtor_dims;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Seq) {
        DAST._IType _523___mcc_h14 = _source45.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Set) {
        DAST._IType _524___mcc_h16 = _source45.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Multiset) {
        DAST._IType _525___mcc_h18 = _source45.dtor_element;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Map) {
        DAST._IType _526___mcc_h20 = _source45.dtor_key;
        DAST._IType _527___mcc_h21 = _source45.dtor_value;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Arrow) {
        Dafny.ISequence<DAST._IType> _528___mcc_h24 = _source45.dtor_args;
        DAST._IType _529___mcc_h25 = _source45.dtor_result;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else if (_source45.is_Primitive) {
        DAST._IPrimitive _530___mcc_h28 = _source45.dtor_Primitive_a0;
        DAST._IPrimitive _source46 = _530___mcc_h28;
        if (_source46.is_Int) {
          p = DAM.Syntax.Pos.create_Int();
          return p;
        } else if (_source46.is_Real) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source46.is_String) {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        } else if (_source46.is_Bool) {
          p = DAM.Syntax.Pos.create_Bool();
          return p;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          p = DAM.Syntax.Pos.create_Unit();
        }
      } else if (_source45.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _531___mcc_h30 = _source45.dtor_Passthrough_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      } else {
        Dafny.ISequence<Dafny.Rune> _532___mcc_h32 = _source45.dtor_TypeArg_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        p = DAM.Syntax.Pos.create_Unit();
      }
      return p;
    }
    public DAM.Syntax._IStmt EmitModule(DAST._IModule m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _533_members;
      _533_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi5 = new BigInteger(((m).dtor_body).Count);
      for (BigInteger _534_i = BigInteger.Zero; _534_i < _hi5; _534_i++) {
        DAST._IModuleItem _source47 = ((m).dtor_body).Select(_534_i);
        if (_source47.is_Module) {
          DAST._IModule _535___mcc_h0 = _source47.dtor_Module_a0;
          DAST._IModule _536_m = _535___mcc_h0;
          DAM.Syntax._IStmt _537_mod;
          DAM.Syntax._IStmt _out10;
          _out10 = (this).EmitModule(_536_m);
          _537_mod = _out10;
          _533_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_533_members, (_536_m).dtor_name, _537_mod);
        } else if (_source47.is_Class) {
          DAST._IClass _538___mcc_h2 = _source47.dtor_Class_a0;
          DAST._IClass _539_c = _538___mcc_h2;
          DAM.Syntax._IStmt _540_cls;
          DAM.Syntax._IStmt _out11;
          _out11 = (this).EmitClass(_539_c);
          _540_cls = _out11;
          _533_members = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_533_members, (_539_c).dtor_name, _540_cls);
        } else if (_source47.is_Trait) {
          DAST._ITrait _541___mcc_h4 = _source47.dtor_Trait_a0;
          goto continue_0;
        } else if (_source47.is_Newtype) {
          DAST._INewtype _542___mcc_h6 = _source47.dtor_Newtype_a0;
          goto continue_0;
        } else {
          DAST._IDatatype _543___mcc_h8 = _source47.dtor_Datatype_a0;
          goto continue_0;
        }
      continue_0:;
      }
    after_0:;
      s = DAM.Syntax.Stmt.create_Record(_533_members);
      return s;
    }
    public DAM.Syntax._IStmt EmitClass(DAST._IClass c) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt> _544_fields;
      _544_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.FromElements();
      BigInteger _hi6 = new BigInteger(((c).dtor_body).Count);
      for (BigInteger _545_i = BigInteger.Zero; _545_i < _hi6; _545_i++) {
        DAST._IMethod _source48 = ((c).dtor_body).Select(_545_i);
        DAST._IMethod _546___mcc_h0 = _source48;
        DAST._IMethod _547_m = _546___mcc_h0;
        DAM.Syntax._IStmt _548_meth;
        DAM.Syntax._IStmt _out12;
        _out12 = (this).EmitMethod(_547_m);
        _548_meth = _out12;
        _544_fields = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IStmt>.Update(_544_fields, (_547_m).dtor_name, _548_meth);
      }
      s = DAM.Syntax.Stmt.create_Record(_544_fields);
      return s;
    }
    public DAM.Syntax._IStmt EmitMethod(DAST._IMethod m) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAM.Syntax._IStmt _549_body;
      DAM.Syntax._IStmt _out13;
      _out13 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock((m).dtor_body);
      _549_body = _out13;
      s = DAM.Syntax.Stmt.create_LetCS(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), DAM.Syntax.__default.Command(), _549_body);
      DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source49 = (m).dtor_outVars;
      if (_source49.is_Some) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _550___mcc_h0 = _source49.dtor_Some_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _551_outs = _550___mcc_h0;
        {
          BigInteger _hi7 = new BigInteger((_551_outs).Count);
          for (BigInteger _552_i = BigInteger.Zero; _552_i < _hi7; _552_i++) {
            Dafny.ISequence<Dafny.Rune> _source50 = (_551_outs).Select(((new BigInteger((_551_outs).Count)) - (_552_i)) - (BigInteger.One));
            Dafny.ISequence<Dafny.Rune> _553___mcc_h1 = _source50;
            Dafny.ISequence<Dafny.Rune> _554_ret = _553___mcc_h1;
            if (!((_552_i) < (new BigInteger(((m).dtor_outTypes).Count)))) {
              throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(93,12): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
            }
            DAM.Syntax._IPos _555_cod;
            DAM.Syntax._IPos _out14;
            _out14 = ResolvedDesugaredExecutableDafnyPlugin.Lower.PolarizePos(((m).dtor_outTypes).Select(_552_i));
            _555_cod = _out14;
            s = DAM.Syntax.Stmt.create_Func(_554_ret, DAM.Syntax.Pos.create_Ref(_555_cod), s);
          }
        }
      } else {
      }
      BigInteger _hi8 = new BigInteger(((m).dtor_params).Count);
      for (BigInteger _556_i = BigInteger.Zero; _556_i < _hi8; _556_i++) {
        DAST._IFormal _source51 = ((m).dtor_params).Select(((new BigInteger(((m).dtor_params).Count)) - (_556_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _557___mcc_h2 = _source51.dtor_name;
        DAST._IType _558___mcc_h3 = _source51.dtor_typ;
        DAST._IType _559_dom = _558___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _560_arg = _557___mcc_h2;
        DAM.Syntax._IPos _561_dom;
        DAM.Syntax._IPos _out15;
        _out15 = ResolvedDesugaredExecutableDafnyPlugin.Lower.PolarizePos(_559_dom);
        _561_dom = _out15;
        s = DAM.Syntax.Stmt.create_Func(_560_arg, DAM.Syntax.Pos.create_Ref(_561_dom), s);
      }
      if (((m).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Main"))) {
        (this).main = s;
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitExpr(DAST._IExpression e) {
      DAM.Syntax._IStmt s = DAM.Syntax.Stmt.Default();
      DAST._IExpression _source52 = e;
      if (_source52.is_Literal) {
        DAST._ILiteral _562___mcc_h0 = _source52.dtor_Literal_a0;
        DAST._ILiteral _source53 = _562___mcc_h0;
        if (_source53.is_BoolLiteral) {
          bool _563___mcc_h2 = _source53.dtor_BoolLiteral_a0;
          bool _564_b = _563___mcc_h2;
          s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(_564_b));
          return s;
        } else if (_source53.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _565___mcc_h4 = _source53.dtor_IntLiteral_a0;
          DAST._IType _566___mcc_h5 = _source53.dtor_IntLiteral_a1;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source53.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _567___mcc_h8 = _source53.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _568___mcc_h9 = _source53.dtor_DecLiteral_a1;
          DAST._IType _569___mcc_h10 = _source53.dtor_DecLiteral_a2;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source53.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _570___mcc_h14 = _source53.dtor_StringLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source53.is_CharLiteral) {
          Dafny.Rune _571___mcc_h16 = _source53.dtor_CharLiteral_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          DAST._IType _572___mcc_h18 = _source53.dtor_Null_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source52.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _573___mcc_h20 = _source52.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _574_v = _573___mcc_h20;
        s = DAM.Syntax.Stmt.create_Read(DAM.Syntax.Expr.create_Var(_574_v), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"))));
        return s;
      } else if (_source52.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _575___mcc_h22 = _source52.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _576_path = _575___mcc_h22;
        if (!((new BigInteger((_576_path).Count)).Sign == 1)) {
          throw new Dafny.HaltException("Compilers/ResolvedDesugaredExecutableDafny/Dafny-compiler-fdafny.dfy(125,8): " + Dafny.Sequence<Dafny.Rune>.UnicodeFromString("expectation violation").ToVerbatimString(false));
        }
        s = DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(((_576_path).Select(BigInteger.Zero))));
        BigInteger _hi9 = new BigInteger((_576_path).Count);
        for (BigInteger _577_i = BigInteger.One; _577_i < _hi9; _577_i++) {
          s = DAM.Syntax.Stmt.create_Select(s, ((_576_path).Select(_577_i)));
        }
      } else if (_source52.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _578___mcc_h24 = _source52.dtor_Tuple_a0;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _579___mcc_h26 = _source52.dtor_path;
        Dafny.ISequence<DAST._IType> _580___mcc_h27 = _source52.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _581___mcc_h28 = _source52.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _582___mcc_h32 = _source52.dtor_dims;
        DAST._IType _583___mcc_h33 = _source52.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _584___mcc_h36 = _source52.dtor_path;
        Dafny.ISequence<DAST._IType> _585___mcc_h37 = _source52.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _586___mcc_h38 = _source52.dtor_variant;
        bool _587___mcc_h39 = _source52.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _588___mcc_h40 = _source52.dtor_contents;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Convert) {
        DAST._IExpression _589___mcc_h46 = _source52.dtor_value;
        DAST._IType _590___mcc_h47 = _source52.dtor_from;
        DAST._IType _591___mcc_h48 = _source52.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SeqConstruct) {
        DAST._IExpression _592___mcc_h52 = _source52.dtor_length;
        DAST._IExpression _593___mcc_h53 = _source52.dtor_elem;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _594___mcc_h56 = _source52.dtor_elements;
        DAST._IType _595___mcc_h57 = _source52.dtor_typ;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _596___mcc_h60 = _source52.dtor_elements;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _597___mcc_h62 = _source52.dtor_mapElems;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_This) {
        s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("this")));
        return s;
      } else if (_source52.is_Ite) {
        DAST._IExpression _598___mcc_h64 = _source52.dtor_cond;
        DAST._IExpression _599___mcc_h65 = _source52.dtor_thn;
        DAST._IExpression _600___mcc_h66 = _source52.dtor_els;
        DAST._IExpression _601_els = _600___mcc_h66;
        DAST._IExpression _602_thn = _599___mcc_h65;
        DAST._IExpression _603_cond = _598___mcc_h64;
        DAM.Syntax._IStmt _604_cond;
        DAM.Syntax._IStmt _out16;
        _out16 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_603_cond);
        _604_cond = _out16;
        DAM.Syntax._IStmt _605_thn;
        DAM.Syntax._IStmt _out17;
        _out17 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_602_thn);
        _605_thn = _out17;
        DAM.Syntax._IStmt _606_els;
        DAM.Syntax._IStmt _out18;
        _out18 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_601_els);
        _606_els = _out18;
        s = DAM.Syntax.Stmt.create_Bind(_604_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _605_thn, _606_els));
      } else if (_source52.is_UnOp) {
        DAST._IUnaryOp _607___mcc_h70 = _source52.dtor_unOp;
        DAST._IExpression _608___mcc_h71 = _source52.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_BinOp) {
        DAST._IBinOp _609___mcc_h74 = _source52.dtor_op;
        DAST._IExpression _610___mcc_h75 = _source52.dtor_left;
        DAST._IExpression _611___mcc_h76 = _source52.dtor_right;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_ArrayLen) {
        DAST._IExpression _612___mcc_h80 = _source52.dtor_expr;
        BigInteger _613___mcc_h81 = _source52.dtor_dim;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Select) {
        DAST._IExpression _614___mcc_h84 = _source52.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _615___mcc_h85 = _source52.dtor_field;
        bool _616___mcc_h86 = _source52.dtor_isConstant;
        bool _617___mcc_h87 = _source52.dtor_onDatatype;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SelectFn) {
        DAST._IExpression _618___mcc_h92 = _source52.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _619___mcc_h93 = _source52.dtor_field;
        bool _620___mcc_h94 = _source52.dtor_onDatatype;
        bool _621___mcc_h95 = _source52.dtor_isStatic;
        BigInteger _622___mcc_h96 = _source52.dtor_arity;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Index) {
        DAST._IExpression _623___mcc_h102 = _source52.dtor_expr;
        DAST._ICollKind _624___mcc_h103 = _source52.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _625___mcc_h104 = _source52.dtor_indices;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_IndexRange) {
        DAST._IExpression _626___mcc_h108 = _source52.dtor_expr;
        bool _627___mcc_h109 = _source52.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _628___mcc_h110 = _source52.dtor_low;
        DAST._IOptional<DAST._IExpression> _629___mcc_h111 = _source52.dtor_high;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_TupleSelect) {
        DAST._IExpression _630___mcc_h116 = _source52.dtor_expr;
        BigInteger _631___mcc_h117 = _source52.dtor_index;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Call) {
        DAST._IExpression _632___mcc_h120 = _source52.dtor_on;
        Dafny.ISequence<Dafny.Rune> _633___mcc_h121 = _source52.dtor_name;
        Dafny.ISequence<DAST._IType> _634___mcc_h122 = _source52.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _635___mcc_h123 = _source52.dtor_args;
        Dafny.ISequence<Dafny.Rune> _source54 = _633___mcc_h121;
        Dafny.ISequence<Dafny.Rune> _636___mcc_h128 = _source54;
        Dafny.ISequence<DAST._IExpression> _637_args = _635___mcc_h123;
        Dafny.ISequence<Dafny.Rune> _638_meth = _636___mcc_h128;
        DAST._IExpression _639_obj = _632___mcc_h120;
        DAM.Syntax._IStmt _out19;
        _out19 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_639_obj);
        s = _out19;
        s = DAM.Syntax.Stmt.create_Select(s, _638_meth);
        BigInteger _hi10 = new BigInteger((_637_args).Count);
        for (BigInteger _640_i = BigInteger.Zero; _640_i < _hi10; _640_i++) {
          DAM.Syntax._IStmt _641_arg;
          DAM.Syntax._IStmt _out20;
          _out20 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr((_637_args).Select(_640_i));
          _641_arg = _out20;
          s = DAM.Syntax.Stmt.create_Bind(_641_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(s, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
        }
      } else if (_source52.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _642___mcc_h130 = _source52.dtor_params;
        DAST._IType _643___mcc_h131 = _source52.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _644___mcc_h132 = _source52.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _645___mcc_h136 = _source52.dtor_values;
        DAST._IType _646___mcc_h137 = _source52.dtor_retType;
        DAST._IExpression _647___mcc_h138 = _source52.dtor_expr;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _648___mcc_h142 = _source52.dtor_name;
        DAST._IType _649___mcc_h143 = _source52.dtor_typ;
        DAST._IExpression _650___mcc_h144 = _source52.dtor_value;
        DAST._IExpression _651___mcc_h145 = _source52.dtor_iifeBody;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_Apply) {
        DAST._IExpression _652___mcc_h150 = _source52.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _653___mcc_h151 = _source52.dtor_args;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_TypeTest) {
        DAST._IExpression _654___mcc_h154 = _source52.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _655___mcc_h155 = _source52.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _656___mcc_h156 = _source52.dtor_variant;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_InitializationValue) {
        DAST._IType _657___mcc_h160 = _source52.dtor_typ;
        DAST._IType _source55 = _657___mcc_h160;
        if (_source55.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _658___mcc_h162 = _source55.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _659___mcc_h163 = _source55.dtor_typeArgs;
          DAST._IResolvedType _660___mcc_h164 = _source55.dtor_resolved;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Nullable) {
          DAST._IType _661___mcc_h168 = _source55.dtor_Nullable_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Tuple) {
          Dafny.ISequence<DAST._IType> _662___mcc_h170 = _source55.dtor_Tuple_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Array) {
          DAST._IType _663___mcc_h172 = _source55.dtor_element;
          BigInteger _664___mcc_h173 = _source55.dtor_dims;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Seq) {
          DAST._IType _665___mcc_h176 = _source55.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Set) {
          DAST._IType _666___mcc_h178 = _source55.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Multiset) {
          DAST._IType _667___mcc_h180 = _source55.dtor_element;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Map) {
          DAST._IType _668___mcc_h182 = _source55.dtor_key;
          DAST._IType _669___mcc_h183 = _source55.dtor_value;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Arrow) {
          Dafny.ISequence<DAST._IType> _670___mcc_h186 = _source55.dtor_args;
          DAST._IType _671___mcc_h187 = _source55.dtor_result;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else if (_source55.is_Primitive) {
          DAST._IPrimitive _672___mcc_h190 = _source55.dtor_Primitive_a0;
          DAST._IPrimitive _source56 = _672___mcc_h190;
          if (_source56.is_Int) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
            return s;
          } else if (_source56.is_Real) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source56.is_String) {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          } else if (_source56.is_Bool) {
            s = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
            return s;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            s = DAM.Syntax.__default.Skip();
          }
        } else if (_source55.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _673___mcc_h192 = _source55.dtor_Passthrough_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        } else {
          Dafny.ISequence<Dafny.Rune> _674___mcc_h194 = _source55.dtor_TypeArg_a0;
          Microsoft.Dafny.Compilers.WrapException.Throw();
          s = DAM.Syntax.__default.Skip();
        }
      } else if (_source52.is_BoolBoundedPool) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SetBoundedPool) {
        DAST._IExpression _675___mcc_h196 = _source52.dtor_of;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else if (_source52.is_SeqBoundedPool) {
        DAST._IExpression _676___mcc_h198 = _source52.dtor_of;
        bool _677___mcc_h199 = _source52.dtor_includeDuplicates;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      } else {
        DAST._IExpression _678___mcc_h202 = _source52.dtor_lo;
        DAST._IExpression _679___mcc_h203 = _source52.dtor_hi;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        s = DAM.Syntax.__default.Skip();
      }
      return s;
    }
    public static DAM.Syntax._IStmt EmitBlock(Dafny.ISequence<DAST._IStatement> block) {
      DAM.Syntax._IStmt st = DAM.Syntax.Stmt.Default();
      if ((new BigInteger((block).Count)).Sign != 1) {
        st = DAM.Syntax.__default.Skip();
        return st;
      }
      Dafny.ISequence<DAST._IStatement> _680_next;
      _680_next = (block).Drop(BigInteger.One);
      DAST._IStatement _source57 = (block).Select(BigInteger.Zero);
      if (_source57.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _681___mcc_h0 = _source57.dtor_name;
        DAST._IType _682___mcc_h1 = _source57.dtor_typ;
        DAST._IOptional<DAST._IExpression> _683___mcc_h2 = _source57.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _684_init = _683___mcc_h2;
        DAST._IType _685_ty = _682___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _686_var__ = _681___mcc_h0;
        DAM.Syntax._IStmt _687_init;
        DAM.Syntax._IStmt _out21;
        _out21 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitRHS(_685_ty, _684_init);
        _687_init = _out21;
        DAM.Syntax._IStmt _688_next;
        DAM.Syntax._IStmt _out22;
        _out22 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
        _688_next = _out22;
        st = DAM.Syntax.Stmt.create_Bind(_687_init, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _686_var__, _688_next));
        return st;
      } else if (_source57.is_Assign) {
        DAST._IAssignLhs _689___mcc_h6 = _source57.dtor_lhs;
        DAST._IExpression _690___mcc_h7 = _source57.dtor_value;
        DAST._IExpression _691_rhs = _690___mcc_h7;
        DAST._IAssignLhs _692_lhs = _689___mcc_h6;
        {
          DAM.Syntax._IStmt _693_rhs;
          DAM.Syntax._IStmt _out23;
          _out23 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_691_rhs);
          _693_rhs = _out23;
          DAM.Syntax._IStmt _694_next;
          DAM.Syntax._IStmt _out24;
          _out24 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
          _694_next = _out24;
          DAST._IAssignLhs _source58 = _692_lhs;
          if (_source58.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _695___mcc_h50 = _source58.dtor_Ident_a0;
            Dafny.ISequence<Dafny.Rune> _source59 = _695___mcc_h50;
            Dafny.ISequence<Dafny.Rune> _696___mcc_h52 = _source59;
            Dafny.ISequence<Dafny.Rune> _697_v = _696___mcc_h52;
            st = DAM.Syntax.Stmt.create_Bind(_693_rhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Write(DAM.Syntax.Expr.create_Var(_697_v), DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _694_next));
            return st;
          } else if (_source58.is_Select) {
            DAST._IExpression _698___mcc_h54 = _source58.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _699___mcc_h55 = _source58.dtor_field;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          } else {
            DAST._IExpression _700___mcc_h58 = _source58.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _701___mcc_h59 = _source58.dtor_indices;
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source57.is_If) {
        DAST._IExpression _702___mcc_h10 = _source57.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _703___mcc_h11 = _source57.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _704___mcc_h12 = _source57.dtor_els;
        Dafny.ISequence<DAST._IStatement> _705_els = _704___mcc_h12;
        Dafny.ISequence<DAST._IStatement> _706_thn = _703___mcc_h11;
        DAST._IExpression _707_cond = _702___mcc_h10;
        DAM.Syntax._IStmt _708_cond;
        DAM.Syntax._IStmt _out25;
        _out25 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_707_cond);
        _708_cond = _out25;
        DAM.Syntax._IStmt _709_thn;
        DAM.Syntax._IStmt _out26;
        _out26 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_706_thn);
        _709_thn = _out26;
        DAM.Syntax._IStmt _710_els;
        DAM.Syntax._IStmt _out27;
        _out27 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_705_els);
        _710_els = _out27;
        DAM.Syntax._IStmt _711_next;
        DAM.Syntax._IStmt _out28;
        _out28 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
        _711_next = _out28;
        st = DAM.Syntax.__default.Then(DAM.Syntax.Stmt.create_Bind(_708_cond, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), DAM.Syntax.Stmt.create_Ite(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if")), _709_thn, _710_els)), _711_next);
      } else if (_source57.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _712___mcc_h16 = _source57.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _713___mcc_h17 = _source57.dtor_body;
        Dafny.ISequence<DAST._IStatement> _714_stmt = _713___mcc_h17;
        Dafny.ISequence<Dafny.Rune> _715_lab = _712___mcc_h16;
        DAM.Syntax._IStmt _716_block;
        DAM.Syntax._IStmt _out29;
        _out29 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(Dafny.Sequence<DAST._IStatement>.Concat(_714_stmt, _680_next));
        _716_block = _out29;
        st = DAM.Syntax.Stmt.create_LetCS(_715_lab, DAM.Syntax.__default.Command(), _716_block);
        return st;
      } else if (_source57.is_While) {
        DAST._IExpression _717___mcc_h20 = _source57.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _718___mcc_h21 = _source57.dtor_body;
        Dafny.ISequence<DAST._IStatement> _719_body = _718___mcc_h21;
        DAST._IExpression _720_guard = _717___mcc_h20;
        DAM.Syntax._IStmt _721_guard;
        DAM.Syntax._IStmt _out30;
        _out30 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_720_guard);
        _721_guard = _out30;
        DAM.Syntax._IStmt _722_body;
        DAM.Syntax._IStmt _out31;
        _out31 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_719_body);
        _722_body = _out31;
        DAM.Syntax._IStmt _723_next;
        DAM.Syntax._IStmt _out32;
        _out32 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
        _723_next = _out32;
        st = DAM.Syntax.__default.While(_721_guard, _722_body, _723_next);
      } else if (_source57.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _724___mcc_h24 = _source57.dtor_boundName;
        DAST._IType _725___mcc_h25 = _source57.dtor_boundType;
        DAST._IExpression _726___mcc_h26 = _source57.dtor_over;
        Dafny.ISequence<DAST._IStatement> _727___mcc_h27 = _source57.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source57.is_Call) {
        DAST._IExpression _728___mcc_h32 = _source57.dtor_on;
        Dafny.ISequence<Dafny.Rune> _729___mcc_h33 = _source57.dtor_name;
        Dafny.ISequence<DAST._IType> _730___mcc_h34 = _source57.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _731___mcc_h35 = _source57.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _732___mcc_h36 = _source57.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _733_outs = _732___mcc_h36;
        Dafny.ISequence<DAST._IExpression> _734_args = _731___mcc_h35;
        Dafny.ISequence<Dafny.Rune> _735_meth = _729___mcc_h33;
        DAST._IExpression _736_obj = _728___mcc_h32;
        {
          DAM.Syntax._IStmt _737_obj;
          DAM.Syntax._IStmt _out33;
          _out33 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_736_obj);
          _737_obj = _out33;
          st = DAM.Syntax.Stmt.create_Select(_737_obj, _735_meth);
          BigInteger _hi11 = new BigInteger((_734_args).Count);
          for (BigInteger _738_i = BigInteger.Zero; _738_i < _hi11; _738_i++) {
            DAM.Syntax._IStmt _739_arg;
            DAM.Syntax._IStmt _out34;
            _out34 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr((_734_args).Select(_738_i));
            _739_arg = _out34;
            st = DAM.Syntax.Stmt.create_Bind(_739_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_New(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")))));
          }
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source60 = _733_outs;
          if (_source60.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _740___mcc_h62 = _source60.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _741_outs = _740___mcc_h62;
            BigInteger _hi12 = new BigInteger((_741_outs).Count);
            for (BigInteger _742_i = BigInteger.Zero; _742_i < _hi12; _742_i++) {
              st = DAM.Syntax.Stmt.create_Call(st, DAM.Syntax.Expr.create_Var(((_741_outs).Select(_742_i))));
            }
          } else {
          }
          DAM.Syntax._IStmt _743_next;
          DAM.Syntax._IStmt _out35;
          _out35 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
          _743_next = _out35;
          st = DAM.Syntax.__default.Then(st, _743_next);
        }
      } else if (_source57.is_Return) {
        DAST._IExpression _744___mcc_h42 = _source57.dtor_expr;
        DAST._IExpression _745_expr = _744___mcc_h42;
        DAM.Syntax._IStmt _746_ret;
        DAM.Syntax._IStmt _out36;
        _out36 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_745_expr);
        _746_ret = _out36;
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), _746_ret);
        return st;
      } else if (_source57.is_EarlyReturn) {
        st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return")), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
        return st;
      } else if (_source57.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _747___mcc_h44 = _source57.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _748_lab = _747___mcc_h44;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source61 = _748_lab;
          if (_source61.is_Some) {
            Dafny.ISequence<Dafny.Rune> _749___mcc_h63 = _source61.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _750_lab = _749___mcc_h63;
            st = DAM.Syntax.Stmt.create_Throw(DAM.Syntax.Expr.create_Var(_750_lab), DAM.Syntax.__default.Command(), DAM.Syntax.__default.Skip());
            return st;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            st = DAM.Syntax.__default.Skip();
            return st;
          }
        }
      } else if (_source57.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _751___mcc_h46 = _source57.dtor_body;
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source57.is_JumpTailCallStart) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else if (_source57.is_Halt) {
        Microsoft.Dafny.Compilers.WrapException.Throw();
        st = DAM.Syntax.__default.Skip();
        return st;
      } else {
        DAST._IExpression _752___mcc_h48 = _source57.dtor_Print_a0;
        DAST._IExpression _753_expr = _752___mcc_h48;
        DAM.Syntax._IStmt _754_arg;
        DAM.Syntax._IStmt _out37;
        _out37 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_753_expr);
        _754_arg = _out37;
        DAM.Syntax._IStmt _755_next;
        DAM.Syntax._IStmt _out38;
        _out38 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitBlock(_680_next);
        _755_next = _out38;
        st = DAM.Syntax.Stmt.create_Bind(_754_arg, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var"), DAM.Syntax.Stmt.create_Print(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("var")), _755_next));
        return st;
      }
      return st;
    }
    public static DAM.Syntax._IStmt EmitRHS(DAST._IType type__, DAST._IOptional<DAST._IExpression> rhs) {
      DAM.Syntax._IStmt @out = DAM.Syntax.Stmt.Default();
      _System._ITuple2<DAST._IType, DAST._IOptional<DAST._IExpression>> _source62 = _System.Tuple2<DAST._IType, DAST._IOptional<DAST._IExpression>>.create(type__, rhs);
      DAST._IType _756___mcc_h0 = _source62.dtor__0;
      DAST._IOptional<DAST._IExpression> _757___mcc_h1 = _source62.dtor__1;
      DAST._IType _source63 = _756___mcc_h0;
      if (_source63.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _758___mcc_h4 = _source63.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _759___mcc_h5 = _source63.dtor_typeArgs;
        DAST._IResolvedType _760___mcc_h6 = _source63.dtor_resolved;
        DAST._IOptional<DAST._IExpression> _source64 = _757___mcc_h1;
        if (_source64.is_Some) {
          DAST._IExpression _761___mcc_h13 = _source64.dtor_Some_a0;
          DAST._IExpression _762_init = _761___mcc_h13;
          DAM.Syntax._IStmt _out39;
          _out39 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_762_init);
          @out = _out39;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source63.is_Nullable) {
        DAST._IType _763___mcc_h15 = _source63.dtor_Nullable_a0;
        DAST._IOptional<DAST._IExpression> _source65 = _757___mcc_h1;
        if (_source65.is_Some) {
          DAST._IExpression _764___mcc_h18 = _source65.dtor_Some_a0;
          DAST._IExpression _765_init = _764___mcc_h18;
          DAM.Syntax._IStmt _out40;
          _out40 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_765_init);
          @out = _out40;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source63.is_Tuple) {
        Dafny.ISequence<DAST._IType> _766___mcc_h20 = _source63.dtor_Tuple_a0;
        DAST._IOptional<DAST._IExpression> _source66 = _757___mcc_h1;
        if (_source66.is_Some) {
          DAST._IExpression _767___mcc_h23 = _source66.dtor_Some_a0;
          DAST._IExpression _768_init = _767___mcc_h23;
          DAM.Syntax._IStmt _out41;
          _out41 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_768_init);
          @out = _out41;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source63.is_Array) {
        DAST._IType _769___mcc_h25 = _source63.dtor_element;
        BigInteger _770___mcc_h26 = _source63.dtor_dims;
        DAST._IOptional<DAST._IExpression> _source67 = _757___mcc_h1;
        if (_source67.is_Some) {
          DAST._IExpression _771___mcc_h31 = _source67.dtor_Some_a0;
          DAST._IExpression _772_init = _771___mcc_h31;
          DAM.Syntax._IStmt _out42;
          _out42 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_772_init);
          @out = _out42;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source63.is_Seq) {
        DAST._IType _773___mcc_h33 = _source63.dtor_element;
        DAST._IOptional<DAST._IExpression> _source68 = _757___mcc_h1;
        if (_source68.is_Some) {
          DAST._IExpression _774___mcc_h36 = _source68.dtor_Some_a0;
          DAST._IExpression _775_init = _774___mcc_h36;
          DAM.Syntax._IStmt _out43;
          _out43 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_775_init);
          @out = _out43;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source63.is_Set) {
        DAST._IType _776___mcc_h38 = _source63.dtor_element;
        DAST._IOptional<DAST._IExpression> _source69 = _757___mcc_h1;
        if (_source69.is_Some) {
          DAST._IExpression _777___mcc_h41 = _source69.dtor_Some_a0;
          DAST._IExpression _778_init = _777___mcc_h41;
          DAM.Syntax._IStmt _out44;
          _out44 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_778_init);
          @out = _out44;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source63.is_Multiset) {
        DAST._IType _779___mcc_h43 = _source63.dtor_element;
        DAST._IOptional<DAST._IExpression> _source70 = _757___mcc_h1;
        if (_source70.is_Some) {
          DAST._IExpression _780___mcc_h46 = _source70.dtor_Some_a0;
          DAST._IExpression _781_init = _780___mcc_h46;
          DAM.Syntax._IStmt _out45;
          _out45 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_781_init);
          @out = _out45;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source63.is_Map) {
        DAST._IType _782___mcc_h48 = _source63.dtor_key;
        DAST._IType _783___mcc_h49 = _source63.dtor_value;
        DAST._IOptional<DAST._IExpression> _source71 = _757___mcc_h1;
        if (_source71.is_Some) {
          DAST._IExpression _784___mcc_h54 = _source71.dtor_Some_a0;
          DAST._IExpression _785_init = _784___mcc_h54;
          DAM.Syntax._IStmt _out46;
          _out46 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_785_init);
          @out = _out46;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source63.is_Arrow) {
        Dafny.ISequence<DAST._IType> _786___mcc_h56 = _source63.dtor_args;
        DAST._IType _787___mcc_h57 = _source63.dtor_result;
        DAST._IOptional<DAST._IExpression> _source72 = _757___mcc_h1;
        if (_source72.is_Some) {
          DAST._IExpression _788___mcc_h62 = _source72.dtor_Some_a0;
          DAST._IExpression _789_init = _788___mcc_h62;
          DAM.Syntax._IStmt _out47;
          _out47 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_789_init);
          @out = _out47;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else if (_source63.is_Primitive) {
        DAST._IPrimitive _790___mcc_h64 = _source63.dtor_Primitive_a0;
        DAST._IPrimitive _source73 = _790___mcc_h64;
        if (_source73.is_Int) {
          DAST._IOptional<DAST._IExpression> _source74 = _757___mcc_h1;
          if (_source74.is_Some) {
            DAST._IExpression _791___mcc_h67 = _source74.dtor_Some_a0;
            DAST._IExpression _792_init = _791___mcc_h67;
            DAM.Syntax._IStmt _out48;
            _out48 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_792_init);
            @out = _out48;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Int(BigInteger.Zero));
          }
        } else if (_source73.is_Real) {
          DAST._IOptional<DAST._IExpression> _source75 = _757___mcc_h1;
          if (_source75.is_Some) {
            DAST._IExpression _793___mcc_h70 = _source75.dtor_Some_a0;
            DAST._IExpression _794_init = _793___mcc_h70;
            DAM.Syntax._IStmt _out49;
            _out49 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_794_init);
            @out = _out49;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source73.is_String) {
          DAST._IOptional<DAST._IExpression> _source76 = _757___mcc_h1;
          if (_source76.is_Some) {
            DAST._IExpression _795___mcc_h72 = _source76.dtor_Some_a0;
            DAST._IExpression _796_init = _795___mcc_h72;
            DAM.Syntax._IStmt _out50;
            _out50 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_796_init);
            @out = _out50;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        } else if (_source73.is_Bool) {
          DAST._IOptional<DAST._IExpression> _source77 = _757___mcc_h1;
          if (_source77.is_Some) {
            DAST._IExpression _797___mcc_h74 = _source77.dtor_Some_a0;
            DAST._IExpression _798_init = _797___mcc_h74;
            DAM.Syntax._IStmt _out51;
            _out51 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_798_init);
            @out = _out51;
          } else {
            @out = DAM.Syntax.Stmt.create_Pure(DAM.Syntax.Expr.create_Bool(false));
          }
        } else {
          DAST._IOptional<DAST._IExpression> _source78 = _757___mcc_h1;
          if (_source78.is_Some) {
            DAST._IExpression _799___mcc_h77 = _source78.dtor_Some_a0;
            DAST._IExpression _800_init = _799___mcc_h77;
            DAM.Syntax._IStmt _out52;
            _out52 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_800_init);
            @out = _out52;
          } else {
            Microsoft.Dafny.Compilers.WrapException.Throw();
            @out = DAM.Syntax.__default.Skip();
          }
        }
      } else if (_source63.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _801___mcc_h79 = _source63.dtor_Passthrough_a0;
        DAST._IOptional<DAST._IExpression> _source79 = _757___mcc_h1;
        if (_source79.is_Some) {
          DAST._IExpression _802___mcc_h82 = _source79.dtor_Some_a0;
          DAST._IExpression _803_init = _802___mcc_h82;
          DAM.Syntax._IStmt _out53;
          _out53 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_803_init);
          @out = _out53;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _804___mcc_h84 = _source63.dtor_TypeArg_a0;
        DAST._IOptional<DAST._IExpression> _source80 = _757___mcc_h1;
        if (_source80.is_Some) {
          DAST._IExpression _805___mcc_h87 = _source80.dtor_Some_a0;
          DAST._IExpression _806_init = _805___mcc_h87;
          DAM.Syntax._IStmt _out54;
          _out54 = ResolvedDesugaredExecutableDafnyPlugin.Lower.EmitExpr(_806_init);
          @out = _out54;
        } else {
          Microsoft.Dafny.Compilers.WrapException.Throw();
          @out = DAM.Syntax.__default.Skip();
        }
      }
      return @out;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      ResolvedDesugaredExecutableDafnyPlugin.Lower _807_lower;
      ResolvedDesugaredExecutableDafnyPlugin.Lower _nw1 = new ResolvedDesugaredExecutableDafnyPlugin.Lower();
      _nw1.__ctor();
      _807_lower = _nw1;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>> _808_modules;
      _808_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos> _809_bindings;
      _809_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.FromElements();
      BigInteger _hi13 = new BigInteger((p).Count);
      for (BigInteger _810_i = BigInteger.Zero; _810_i < _hi13; _810_i++) {
        Dafny.ISequence<Dafny.Rune> _811_name;
        _811_name = ((p).Select(_810_i)).dtor_name;
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Lowering module ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_811_name).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" into the DAM instruction set...\n")).ToVerbatimString(false));
        DAM.Syntax._IStmt _812_m;
        DAM.Syntax._IStmt _out55;
        _out55 = (_807_lower).EmitModule((p).Select(_810_i));
        _812_m = _out55;
        DAM.Syntax._IExpr _813_mthunk;
        _813_mthunk = DAM.Syntax.Expr.create_Thunk(_812_m);
        DAM.Utils._IOption<DAM.Syntax._IPos> _814_mtype;
        _814_mtype = DAM.Statics.__default.SynthExpr(_809_bindings, _813_mthunk);
        if ((_814_mtype).is_None) {
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Unable to synthesize type for module ")).ToVerbatimString(false));
          Dafny.Helpers.Print((_811_name).ToVerbatimString(false));
          Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!\n")).ToVerbatimString(false));
          Microsoft.Dafny.Compilers.WrapException.Throw();
          return s;
        }
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Successfully synthesized type for module ")).ToVerbatimString(false));
        Dafny.Helpers.Print((_811_name).ToVerbatimString(false));
        Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
        _808_modules = Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.Concat(_808_modules, Dafny.Sequence<_System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>>.FromElements(_System.Tuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos>.create(_811_name, _813_mthunk, (_814_mtype).Extract())));
        _809_bindings = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IPos>.Update(_809_bindings, _811_name, (_814_mtype).Extract());
      }
      DAM.Syntax._IStmt _815_body;
      _815_body = DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Select(DAM.Syntax.Stmt.create_Force(DAM.Syntax.Expr.create_Var(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__default")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Main"));
      BigInteger _hi14 = new BigInteger((_808_modules).Count);
      for (BigInteger _816_i = BigInteger.Zero; _816_i < _hi14; _816_i++) {
        _System._ITuple3<Dafny.ISequence<Dafny.Rune>, DAM.Syntax._IExpr, DAM.Syntax._IPos> _let_tmp_rhs7 = (_808_modules).Select(((new BigInteger((_808_modules).Count)) - (_816_i)) - (BigInteger.One));
        Dafny.ISequence<Dafny.Rune> _817_name = _let_tmp_rhs7.dtor__0;
        DAM.Syntax._IExpr _818_mod = _let_tmp_rhs7.dtor__1;
        DAM.Syntax._IPos _819_modtype = _let_tmp_rhs7.dtor__2;
        _815_body = DAM.Syntax.__default.Let(_818_mod, _817_name, _819_modtype, _815_body);
      }
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Tracing execution of Main() below\n")).ToVerbatimString(false));
      Dafny.Helpers.Print((DAM.Dynamics.__default.RunSafe(_815_body)));
      Dafny.Helpers.Print((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")).ToVerbatimString(false));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> natToString(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0");
      } else if ((n) == (BigInteger.One)) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
      } else if ((n) == (new BigInteger(2))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("2");
      } else if ((n) == (new BigInteger(3))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("3");
      } else if ((n) == (new BigInteger(4))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("4");
      } else if ((n) == (new BigInteger(5))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("5");
      } else if ((n) == (new BigInteger(6))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("6");
      } else if ((n) == (new BigInteger(7))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("7");
      } else if ((n) == (new BigInteger(8))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("8");
      } else if ((n) == (new BigInteger(9))) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("9");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.natToString(Dafny.Helpers.EuclideanDivision(n, new BigInteger(10))), DCOMP.__default.natToString(Dafny.Helpers.EuclideanModulus(n, new BigInteger(10))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _820___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_820___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else {
        if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
          _820___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_820___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
          Dafny.ISequence<Dafny.Rune> _in9 = (i).Drop(BigInteger.One);
          i = _in9;
          goto TAIL_CALL_START;
        } else {
          _820___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_820___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
          Dafny.ISequence<Dafny.Rune> _in10 = (i).Drop(BigInteger.One);
          i = _in10;
          goto TAIL_CALL_START;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), DCOMP.__default.replaceDots(i));
    }
  }

  public partial class stringNat {
    private static readonly Dafny.ISequence<Dafny.Rune> Witness = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("1");
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return Witness;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(DCOMP.stringNat.Default());
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _821_body;
      Dafny.ISequence<Dafny.Rune> _out56;
      _out56 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _821_body = _out56;
      if ((mod).dtor_isExtern) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), DCOMP.__default.escapeIdent((mod).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _821_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _822_i;
      _822_i = BigInteger.Zero;
      while ((_822_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<Dafny.Rune> _823_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        DAST._IModuleItem _source81 = (body).Select(_822_i);
        if (_source81.is_Module) {
          DAST._IModule _824___mcc_h0 = _source81.dtor_Module_a0;
          DAST._IModule _825_m = _824___mcc_h0;
          Dafny.ISequence<Dafny.Rune> _out57;
          _out57 = DCOMP.COMP.GenModule(_825_m, containingPath);
          _823_generated = _out57;
        } else if (_source81.is_Class) {
          DAST._IClass _826___mcc_h1 = _source81.dtor_Class_a0;
          DAST._IClass _827_c = _826___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _out58;
          _out58 = DCOMP.COMP.GenClass(_827_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_827_c).dtor_name)));
          _823_generated = _out58;
        } else if (_source81.is_Trait) {
          DAST._ITrait _828___mcc_h2 = _source81.dtor_Trait_a0;
          DAST._ITrait _829_t = _828___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _out59;
          _out59 = DCOMP.COMP.GenTrait(_829_t, containingPath);
          _823_generated = _out59;
        } else if (_source81.is_Newtype) {
          DAST._INewtype _830___mcc_h3 = _source81.dtor_Newtype_a0;
          DAST._INewtype _831_n = _830___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _out60;
          _out60 = DCOMP.COMP.GenNewtype(_831_n);
          _823_generated = _out60;
        } else {
          DAST._IDatatype _832___mcc_h4 = _source81.dtor_Datatype_a0;
          DAST._IDatatype _833_d = _832___mcc_h4;
          Dafny.ISequence<Dafny.Rune> _out61;
          _out61 = DCOMP.COMP.GenDatatype(_833_d);
          _823_generated = _out61;
        }
        if ((_822_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _823_generated);
        _822_i = (_822_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.Rune> typeParams, out Dafny.ISequence<Dafny.Rune> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.Rune> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _834_tpI;
      _834_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_834_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _835_tp;
          _835_tp = (@params).Select(_834_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_835_tp));
          Dafny.ISequence<Dafny.Rune> _836_genTp;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType(_835_tp, false, false);
          _836_genTp = _out62;
          typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(typeParams, _836_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          Dafny.ISequence<Dafny.Rune> _837_baseConstraints;
          _837_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _836_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, _836_genTp), _837_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static, "));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _836_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, _836_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _836_genTp), _837_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _836_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static, "));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _836_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _836_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _834_tpI = (_834_tpI) + (BigInteger.One);
        }
        typeParams = Dafny.Sequence<Dafny.Rune>.Concat(typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedTypeParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        constrainedEraseParams = Dafny.Sequence<Dafny.Rune>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _838_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _839_typeParams;
      Dafny.ISequence<Dafny.Rune> _840_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _841_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _842_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _843_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _844_erasedParams;
      Dafny.ISet<DAST._IType> _out63;
      Dafny.ISequence<Dafny.Rune> _out64;
      Dafny.ISequence<Dafny.Rune> _out65;
      Dafny.ISequence<Dafny.Rune> _out66;
      Dafny.ISequence<Dafny.Rune> _out67;
      Dafny.ISequence<Dafny.Rune> _out68;
      Dafny.ISequence<Dafny.Rune> _out69;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out63, out _out64, out _out65, out _out66, out _out67, out _out68, out _out69);
      _838_typeParamsSet = _out63;
      _839_typeParams = _out64;
      _840_constrainedTypeParams = _out65;
      _841_whereConstraints = _out66;
      _842_constrainedEraseParams = _out67;
      _843_unerasedParams = _out68;
      _844_erasedParams = _out69;
      Dafny.ISequence<Dafny.Rune> _845_fields;
      _845_fields = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.Rune> _846_fieldInits;
      _846_fieldInits = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _847_fieldI;
      _847_fieldI = BigInteger.Zero;
      while ((_847_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _848_field;
        _848_field = ((c).dtor_fields).Select(_847_fieldI);
        Dafny.ISequence<Dafny.Rune> _849_fieldType;
        Dafny.ISequence<Dafny.Rune> _out70;
        _out70 = DCOMP.COMP.GenType(((_848_field).dtor_formal).dtor_typ, false, false);
        _849_fieldType = _out70;
        _845_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_845_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")), DCOMP.__default.escapeIdent(((_848_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell<")), _849_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        DAST._IOptional<DAST._IExpression> _source82 = (_848_field).dtor_defaultValue;
        if (_source82.is_Some) {
          DAST._IExpression _850___mcc_h0 = _source82.dtor_Some_a0;
          DAST._IExpression _851_e = _850___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _852_eStr;
            bool _853___v1;
            bool _854___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _855___v3;
            Dafny.ISequence<Dafny.Rune> _out71;
            bool _out72;
            bool _out73;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out74;
            DCOMP.COMP.GenExpr(_851_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out71, out _out72, out _out73, out _out74);
            _852_eStr = _out71;
            _853___v1 = _out72;
            _854___v2 = _out73;
            _855___v3 = _out74;
            _846_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_846_fieldInits, DCOMP.__default.escapeIdent(((_848_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(")), _852_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("),\n"));
          }
        } else {
          {
            _846_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_846_fieldInits, DCOMP.__default.escapeIdent(((_848_field).dtor_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::cell::RefCell::new(::std::default::Default::default()),\n"));
          }
        }
        _847_fieldI = (_847_fieldI) + (BigInteger.One);
      }
      BigInteger _856_typeParamI;
      _856_typeParamI = BigInteger.Zero;
      while ((_856_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _857_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out75;
        _out75 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_856_typeParamI), false, false);
        _857_tpeGen = _out75;
        _845_fields = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_845_fields, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_856_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData<")), _857_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">,\n"));
        _846_fieldInits = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_846_fieldInits, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_")), DCOMP.__default.natToString(_856_typeParamI)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::marker::PhantomData,\n"));
        _856_typeParamI = (_856_typeParamI) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _839_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _845_fields), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _858_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _859_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out76;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out77;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _838_typeParamsSet, out _out76, out _out77);
      _858_implBody = _out76;
      _859_traitBodies = _out77;
      _858_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn new() -> Self {\n"), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _846_fieldInits), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n")), _858_implBody);
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _840_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _839_typeParams), _841_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _858_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _860_i;
        _860_i = BigInteger.Zero;
        while ((_860_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _861_superClass;
          _861_superClass = ((c).dtor_superClasses).Select(_860_i);
          DAST._IType _source83 = _861_superClass;
          if (_source83.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _862___mcc_h1 = _source83.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _863___mcc_h2 = _source83.dtor_typeArgs;
            DAST._IResolvedType _864___mcc_h3 = _source83.dtor_resolved;
            DAST._IResolvedType _source84 = _864___mcc_h3;
            if (_source84.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _865___mcc_h7 = _source84.dtor_path;
            } else if (_source84.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _866___mcc_h9 = _source84.dtor_path;
              Dafny.ISequence<DAST._IType> _867_typeArgs = _863___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _868_traitPath = _862___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _869_pathStr;
                Dafny.ISequence<Dafny.Rune> _out78;
                _out78 = DCOMP.COMP.GenPath(_868_traitPath);
                _869_pathStr = _out78;
                Dafny.ISequence<Dafny.Rune> _870_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out79;
                _out79 = DCOMP.COMP.GenTypeArgs(_867_typeArgs, false, false);
                _870_typeArgs = _out79;
                Dafny.ISequence<Dafny.Rune> _871_body;
                _871_body = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
                if ((_859_traitBodies).Contains(_868_traitPath)) {
                  _871_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(_859_traitBodies, _868_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _872_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out80;
                _out80 = DCOMP.COMP.GenPath(path);
                _872_genSelfPath = _out80;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nimpl ")), _840_constrainedTypeParams), _869_pathStr), _870_typeArgs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for ::std::rc::Rc<")), _872_genSelfPath), _839_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")), _841_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _871_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
              }
            } else {
              DAST._IType _873___mcc_h11 = _source84.dtor_Newtype_a0;
            }
          } else if (_source83.is_Nullable) {
            DAST._IType _874___mcc_h13 = _source83.dtor_Nullable_a0;
          } else if (_source83.is_Tuple) {
            Dafny.ISequence<DAST._IType> _875___mcc_h15 = _source83.dtor_Tuple_a0;
          } else if (_source83.is_Array) {
            DAST._IType _876___mcc_h17 = _source83.dtor_element;
            BigInteger _877___mcc_h18 = _source83.dtor_dims;
          } else if (_source83.is_Seq) {
            DAST._IType _878___mcc_h21 = _source83.dtor_element;
          } else if (_source83.is_Set) {
            DAST._IType _879___mcc_h23 = _source83.dtor_element;
          } else if (_source83.is_Multiset) {
            DAST._IType _880___mcc_h25 = _source83.dtor_element;
          } else if (_source83.is_Map) {
            DAST._IType _881___mcc_h27 = _source83.dtor_key;
            DAST._IType _882___mcc_h28 = _source83.dtor_value;
          } else if (_source83.is_Arrow) {
            Dafny.ISequence<DAST._IType> _883___mcc_h31 = _source83.dtor_args;
            DAST._IType _884___mcc_h32 = _source83.dtor_result;
          } else if (_source83.is_Primitive) {
            DAST._IPrimitive _885___mcc_h35 = _source83.dtor_Primitive_a0;
          } else if (_source83.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _886___mcc_h37 = _source83.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _887___mcc_h39 = _source83.dtor_TypeArg_a0;
          }
          _860_i = (_860_i) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.Rune> _888_defaultImpl;
      _888_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _840_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _839_typeParams), _841_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _888_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_888_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      _888_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_888_defaultImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()\n"));
      _888_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_888_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      _888_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_888_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      Dafny.ISequence<Dafny.Rune> _889_printImpl;
      _889_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _840_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _839_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n"));
      _889_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_889_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \"")), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _890_ptrPartialEqImpl;
      _890_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _839_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::cmp::PartialEq for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _839_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      _890_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_890_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn eq(&self, other: &Self) -> bool {\n"));
      _890_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_890_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)"));
      _890_ptrPartialEqImpl = Dafny.Sequence<Dafny.Rune>.Concat(_890_ptrPartialEqImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _891_identEraseImpls;
      _891_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _840_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _839_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _844_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _891_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_891_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _842_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _843_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _839_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _888_defaultImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _889_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _890_ptrPartialEqImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _891_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _892_typeParamsSet;
      _892_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _893_typeParams;
      _893_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _894_tpI;
      _894_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _893_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_894_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _895_tp;
          _895_tp = ((t).dtor_typeParams).Select(_894_tpI);
          _892_typeParamsSet = Dafny.Set<DAST._IType>.Union(_892_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_895_tp));
          Dafny.ISequence<Dafny.Rune> _896_genTp;
          Dafny.ISequence<Dafny.Rune> _out81;
          _out81 = DCOMP.COMP.GenType(_895_tp, false, false);
          _896_genTp = _out81;
          _893_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_893_typeParams, _896_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _894_tpI = (_894_tpI) + (BigInteger.One);
        }
        _893_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_893_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _897_fullPath;
      _897_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<Dafny.Rune> _898_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _899___v6;
      Dafny.ISequence<Dafny.Rune> _out82;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out83;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_897_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_897_fullPath)), _892_typeParamsSet, out _out82, out _out83);
      _898_implBody = _out82;
      _899___v6 = _out83;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub trait "), DCOMP.__default.escapeIdent((t).dtor_name)), _893_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _898_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _900_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _901_typeParams;
      Dafny.ISequence<Dafny.Rune> _902_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _903_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _904___v7;
      Dafny.ISequence<Dafny.Rune> _905___v8;
      Dafny.ISequence<Dafny.Rune> _906___v9;
      Dafny.ISet<DAST._IType> _out84;
      Dafny.ISequence<Dafny.Rune> _out85;
      Dafny.ISequence<Dafny.Rune> _out86;
      Dafny.ISequence<Dafny.Rune> _out87;
      Dafny.ISequence<Dafny.Rune> _out88;
      Dafny.ISequence<Dafny.Rune> _out89;
      Dafny.ISequence<Dafny.Rune> _out90;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out84, out _out85, out _out86, out _out87, out _out88, out _out89, out _out90);
      _900_typeParamsSet = _out84;
      _901_typeParams = _out85;
      _902_constrainedTypeParams = _out86;
      _903_whereConstraints = _out87;
      _904___v7 = _out88;
      _905___v8 = _out89;
      _906___v9 = _out90;
      Dafny.ISequence<Dafny.Rune> _907_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out91;
      _out91 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _907_underlyingType = _out91;
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]\n#[repr(transparent)]\npub struct "), DCOMP.__default.escapeIdent((c).dtor_name)), _901_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(pub ")), _907_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _902_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _901_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), _907_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _902_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), _907_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _901_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _902_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _901_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _901_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _902_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _901_typeParams), _903_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n"));
      DAST._IOptional<DAST._IExpression> _source85 = (c).dtor_witnessExpr;
      if (_source85.is_Some) {
        DAST._IExpression _908___mcc_h0 = _source85.dtor_Some_a0;
        DAST._IExpression _909_e = _908___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _910_eStr;
          bool _911___v10;
          bool _912___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _913___v12;
          Dafny.ISequence<Dafny.Rune> _out92;
          bool _out93;
          bool _out94;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out95;
          DCOMP.COMP.GenExpr(_909_e, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out92, out _out93, out _out94, out _out95);
          _910_eStr = _out92;
          _911___v10 = _out93;
          _912___v11 = _out94;
          _913___v12 = _out95;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _910_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      } else {
        {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())\n"));
        }
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _902_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _901_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, in_seq: bool) -> ::std::fmt::Result {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, __fmt_print_formatter, in_seq)\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _902_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::ops::Deref for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _901_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = ")), _907_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn deref(&self) -> &Self::Target {\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _914_typeParamsSet;
      Dafny.ISequence<Dafny.Rune> _915_typeParams;
      Dafny.ISequence<Dafny.Rune> _916_constrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _917_whereConstraints;
      Dafny.ISequence<Dafny.Rune> _918_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _919_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _920_erasedParams;
      Dafny.ISet<DAST._IType> _out96;
      Dafny.ISequence<Dafny.Rune> _out97;
      Dafny.ISequence<Dafny.Rune> _out98;
      Dafny.ISequence<Dafny.Rune> _out99;
      Dafny.ISequence<Dafny.Rune> _out100;
      Dafny.ISequence<Dafny.Rune> _out101;
      Dafny.ISequence<Dafny.Rune> _out102;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out96, out _out97, out _out98, out _out99, out _out100, out _out101, out _out102);
      _914_typeParamsSet = _out96;
      _915_typeParams = _out97;
      _916_constrainedTypeParams = _out98;
      _917_whereConstraints = _out99;
      _918_constrainedEraseParams = _out100;
      _919_unerasedParams = _out101;
      _920_erasedParams = _out102;
      Dafny.ISequence<Dafny.Rune> _921_ctors;
      _921_ctors = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _922_i;
      _922_i = BigInteger.Zero;
      while ((_922_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _923_ctor;
        _923_ctor = ((c).dtor_ctors).Select(_922_i);
        Dafny.ISequence<Dafny.Rune> _924_ctorBody;
        _924_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_923_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        BigInteger _925_j;
        _925_j = BigInteger.Zero;
        while ((_925_j) < (new BigInteger(((_923_ctor).dtor_args).Count))) {
          DAST._IFormal _926_formal;
          _926_formal = ((_923_ctor).dtor_args).Select(_925_j);
          Dafny.ISequence<Dafny.Rune> _927_formalType;
          Dafny.ISequence<Dafny.Rune> _out103;
          _out103 = DCOMP.COMP.GenType((_926_formal).dtor_typ, false, false);
          _927_formalType = _out103;
          if ((c).dtor_isCo) {
            _924_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_924_ctorBody, DCOMP.__default.escapeIdent((_926_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper<")), _927_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">, "));
          } else {
            _924_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_924_ctorBody, DCOMP.__default.escapeIdent((_926_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _927_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          _925_j = (_925_j) + (BigInteger.One);
        }
        _924_ctorBody = Dafny.Sequence<Dafny.Rune>.Concat(_924_ctorBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        _921_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_921_ctors, _924_ctorBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
        _922_i = (_922_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _928_selfPath;
      _928_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<Dafny.Rune> _929_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _930_traitBodies;
      Dafny.ISequence<Dafny.Rune> _out104;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> _out105;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_928_selfPath)), _914_typeParamsSet, out _out104, out _out105);
      _929_implBody = _out104;
      _930_traitBodies = _out105;
      _922_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _931_emittedFields;
      _931_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_922_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _932_ctor;
        _932_ctor = ((c).dtor_ctors).Select(_922_i);
        BigInteger _933_j;
        _933_j = BigInteger.Zero;
        while ((_933_j) < (new BigInteger(((_932_ctor).dtor_args).Count))) {
          DAST._IFormal _934_formal;
          _934_formal = ((_932_ctor).dtor_args).Select(_933_j);
          if (!((_931_emittedFields).Contains((_934_formal).dtor_name))) {
            _931_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_931_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_934_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _935_formalType;
            Dafny.ISequence<Dafny.Rune> _out106;
            _out106 = DCOMP.COMP.GenType((_934_formal).dtor_typ, false, false);
            _935_formalType = _out106;
            Dafny.ISequence<Dafny.Rune> _936_methodBody;
            _936_methodBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n");
            BigInteger _937_k;
            _937_k = BigInteger.Zero;
            while ((_937_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _938_ctor2;
              _938_ctor2 = ((c).dtor_ctors).Select(_937_k);
              Dafny.ISequence<Dafny.Rune> _939_ctorMatch;
              _939_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_938_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              BigInteger _940_l;
              _940_l = BigInteger.Zero;
              bool _941_hasMatchingField;
              _941_hasMatchingField = false;
              while ((_940_l) < (new BigInteger(((_938_ctor2).dtor_args).Count))) {
                DAST._IFormal _942_formal2;
                _942_formal2 = ((_938_ctor2).dtor_args).Select(_940_l);
                if (((_934_formal).dtor_name).Equals((_942_formal2).dtor_name)) {
                  _941_hasMatchingField = true;
                }
                _939_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_939_ctorMatch, DCOMP.__default.escapeIdent((_942_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _940_l = (_940_l) + (BigInteger.One);
              }
              if (_941_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _939_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_939_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ::std::ops::Deref::deref(&")), DCOMP.__default.escapeIdent((_934_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0),\n"));
                } else {
                  _939_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_939_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => ")), DCOMP.__default.escapeIdent((_934_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"));
                }
              } else {
                _939_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_939_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} => panic!(\"field does not exist on this variant\"),\n"));
              }
              _936_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_936_methodBody, _939_ctorMatch);
              _937_k = (_937_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _936_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_936_methodBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => panic!(),\n"));
            }
            _936_methodBody = Dafny.Sequence<Dafny.Rune>.Concat(_936_methodBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _929_implBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_929_implBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn ")), DCOMP.__default.escapeIdent((_934_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&self) -> &")), _935_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _936_methodBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
          }
          _933_j = (_933_j) + (BigInteger.One);
        }
        _922_i = (_922_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _921_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_921_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant("));
        BigInteger _943_typeI;
        _943_typeI = BigInteger.Zero;
        while ((_943_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          if ((_943_typeI).Sign == 1) {
            _921_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_921_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _944_genTp;
          Dafny.ISequence<Dafny.Rune> _out107;
          _out107 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_943_typeI), false, false);
          _944_genTp = _out107;
          _921_ctors = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_921_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<")), _944_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          _943_typeI = (_943_typeI) + (BigInteger.One);
        }
        _921_ctors = Dafny.Sequence<Dafny.Rune>.Concat(_921_ctors, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      Dafny.ISequence<Dafny.Rune> _945_enumBody;
      _945_enumBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]\npub enum "), DCOMP.__default.escapeIdent((c).dtor_name)), _915_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _921_ctors), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _916_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), DCOMP.__default.escapeIdent((c).dtor_name)), _915_typeParams), _917_whereConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _929_implBody), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
      Dafny.ISequence<Dafny.Rune> _946_identEraseImpls;
      _946_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _916_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyErasable for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _915_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = ")), DCOMP.__default.escapeIdent((c).dtor_name)), _920_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}\n"));
      _946_identEraseImpls = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_946_identEraseImpls, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl ")), _918_constrainedEraseParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyUnerasable<")), DCOMP.__default.escapeIdent((c).dtor_name)), _919_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _915_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {}\n"));
      Dafny.ISequence<Dafny.Rune> _947_printImpl;
      _947_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _916_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::dafny_runtime::DafnyPrint for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _915_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn fmt_print(&self, __fmt_print_formatter: &mut ::std::fmt::Formatter, _in_seq: bool) -> std::fmt::Result {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match self {\n"));
      _922_i = BigInteger.Zero;
      while ((_922_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _948_ctor;
        _948_ctor = ((c).dtor_ctors).Select(_922_i);
        Dafny.ISequence<Dafny.Rune> _949_ctorMatch;
        _949_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_948_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _950_modulePrefix;
        _950_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        Dafny.ISequence<Dafny.Rune> _951_printRhs;
        _951_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(__fmt_print_formatter, \""), _950_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (_948_ctor).dtor_name), (((_948_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?;")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?;"))));
        BigInteger _952_j;
        _952_j = BigInteger.Zero;
        while ((_952_j) < (new BigInteger(((_948_ctor).dtor_args).Count))) {
          DAST._IFormal _953_formal;
          _953_formal = ((_948_ctor).dtor_args).Select(_952_j);
          _949_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_949_ctorMatch, DCOMP.__default.escapeIdent((_953_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_952_j).Sign == 1) {
            _951_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_951_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \", \")?;"));
          }
          _951_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_951_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n::dafny_runtime::DafnyPrint::fmt_print(")), DCOMP.__default.escapeIdent((_953_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", __fmt_print_formatter, false)?;"));
          _952_j = (_952_j) + (BigInteger.One);
        }
        _949_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_949_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_948_ctor).dtor_hasAnyArgs) {
          _951_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_951_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nwrite!(__fmt_print_formatter, \")\")?;"));
        }
        _951_printRhs = Dafny.Sequence<Dafny.Rune>.Concat(_951_printRhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nOk(())"));
        _947_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_947_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _949_ctorMatch), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" => {\n")), _951_printRhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
        _922_i = (_922_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _947_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_947_printImpl, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..) => {panic!()\n}\n"));
      }
      _947_printImpl = Dafny.Sequence<Dafny.Rune>.Concat(_947_printImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      Dafny.ISequence<Dafny.Rune> _954_defaultImpl;
      _954_defaultImpl = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _954_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), _916_constrainedTypeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ::std::default::Default for ")), DCOMP.__default.escapeIdent((c).dtor_name)), _915_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn default() -> Self {\n")), DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
        _922_i = BigInteger.Zero;
        while ((_922_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _955_formal;
          _955_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_922_i);
          _954_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_954_defaultImpl, DCOMP.__default.escapeIdent((_955_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::std::default::Default::default(),\n"));
          _922_i = (_922_i) + (BigInteger.One);
        }
        _954_defaultImpl = Dafny.Sequence<Dafny.Rune>.Concat(_954_defaultImpl, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n}\n}\n"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_945_enumBody, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _946_identEraseImpls), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _947_printImpl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _954_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _956_i;
        _956_i = BigInteger.Zero;
        while ((_956_i) < (new BigInteger((p).Count))) {
          if ((_956_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_956_i))));
          _956_i = (_956_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _957_i;
        _957_i = BigInteger.Zero;
        while ((_957_i) < (new BigInteger((args).Count))) {
          if ((_957_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _958_genTp;
          Dafny.ISequence<Dafny.Rune> _out108;
          _out108 = DCOMP.COMP.GenType((args).Select(_957_i), inBinding, inFn);
          _958_genTp = _out108;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _958_genTp);
          _957_i = (_957_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source86 = c;
      if (_source86.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _959___mcc_h0 = _source86.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _960___mcc_h1 = _source86.dtor_typeArgs;
        DAST._IResolvedType _961___mcc_h2 = _source86.dtor_resolved;
        DAST._IResolvedType _962_resolved = _961___mcc_h2;
        Dafny.ISequence<DAST._IType> _963_args = _960___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _964_p = _959___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _out109;
          _out109 = DCOMP.COMP.GenPath(_964_p);
          s = _out109;
          Dafny.ISequence<Dafny.Rune> _965_typeArgs;
          Dafny.ISequence<Dafny.Rune> _out110;
          _out110 = DCOMP.COMP.GenTypeArgs(_963_args, inBinding, inFn);
          _965_typeArgs = _out110;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _965_typeArgs);
          DAST._IResolvedType _source87 = _962_resolved;
          if (_source87.is_Datatype) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _966___mcc_h18 = _source87.dtor_path;
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
            }
          } else if (_source87.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _967___mcc_h20 = _source87.dtor_path;
            {
              if ((_964_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
              } else {
                if (inBinding) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              }
            }
          } else {
            DAST._IType _968___mcc_h22 = _source87.dtor_Newtype_a0;
            DAST._IResolvedType _969_Primitive = _962_resolved;
          }
        }
      } else if (_source86.is_Nullable) {
        DAST._IType _970___mcc_h3 = _source86.dtor_Nullable_a0;
        DAST._IType _971_inner = _970___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _972_innerStr;
          Dafny.ISequence<Dafny.Rune> _out111;
          _out111 = DCOMP.COMP.GenType(_971_inner, inBinding, inFn);
          _972_innerStr = _out111;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _972_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source86.is_Tuple) {
        Dafny.ISequence<DAST._IType> _973___mcc_h4 = _source86.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _974_types = _973___mcc_h4;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          BigInteger _975_i;
          _975_i = BigInteger.Zero;
          while ((_975_i) < (new BigInteger((_974_types).Count))) {
            if ((_975_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _976_generated;
            Dafny.ISequence<Dafny.Rune> _out112;
            _out112 = DCOMP.COMP.GenType((_974_types).Select(_975_i), inBinding, inFn);
            _976_generated = _out112;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _976_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            _975_i = (_975_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source86.is_Array) {
        DAST._IType _977___mcc_h5 = _source86.dtor_element;
        BigInteger _978___mcc_h6 = _source86.dtor_dims;
        BigInteger _979_dims = _978___mcc_h6;
        DAST._IType _980_element = _977___mcc_h5;
        {
          Dafny.ISequence<Dafny.Rune> _981_elemStr;
          Dafny.ISequence<Dafny.Rune> _out113;
          _out113 = DCOMP.COMP.GenType(_980_element, inBinding, inFn);
          _981_elemStr = _out113;
          s = _981_elemStr;
          BigInteger _982_i;
          _982_i = BigInteger.Zero;
          while ((_982_i) < (_979_dims)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
            _982_i = (_982_i) + (BigInteger.One);
          }
        }
      } else if (_source86.is_Seq) {
        DAST._IType _983___mcc_h7 = _source86.dtor_element;
        DAST._IType _984_element = _983___mcc_h7;
        {
          Dafny.ISequence<Dafny.Rune> _985_elemStr;
          Dafny.ISequence<Dafny.Rune> _out114;
          _out114 = DCOMP.COMP.GenType(_984_element, inBinding, inFn);
          _985_elemStr = _out114;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _985_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source86.is_Set) {
        DAST._IType _986___mcc_h8 = _source86.dtor_element;
        DAST._IType _987_element = _986___mcc_h8;
        {
          Dafny.ISequence<Dafny.Rune> _988_elemStr;
          Dafny.ISequence<Dafny.Rune> _out115;
          _out115 = DCOMP.COMP.GenType(_987_element, inBinding, inFn);
          _988_elemStr = _out115;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _988_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source86.is_Multiset) {
        DAST._IType _989___mcc_h9 = _source86.dtor_element;
        DAST._IType _990_element = _989___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _991_elemStr;
          Dafny.ISequence<Dafny.Rune> _out116;
          _out116 = DCOMP.COMP.GenType(_990_element, inBinding, inFn);
          _991_elemStr = _out116;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _991_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
        }
      } else if (_source86.is_Map) {
        DAST._IType _992___mcc_h10 = _source86.dtor_key;
        DAST._IType _993___mcc_h11 = _source86.dtor_value;
        DAST._IType _994_value = _993___mcc_h11;
        DAST._IType _995_key = _992___mcc_h10;
        {
          Dafny.ISequence<Dafny.Rune> _996_keyStr;
          Dafny.ISequence<Dafny.Rune> _out117;
          _out117 = DCOMP.COMP.GenType(_995_key, inBinding, inFn);
          _996_keyStr = _out117;
          Dafny.ISequence<Dafny.Rune> _997_valueStr;
          Dafny.ISequence<Dafny.Rune> _out118;
          _out118 = DCOMP.COMP.GenType(_994_value, inBinding, inFn);
          _997_valueStr = _out118;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _996_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _997_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source86.is_Arrow) {
        Dafny.ISequence<DAST._IType> _998___mcc_h12 = _source86.dtor_args;
        DAST._IType _999___mcc_h13 = _source86.dtor_result;
        DAST._IType _1000_result = _999___mcc_h13;
        Dafny.ISequence<DAST._IType> _1001_args = _998___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
          BigInteger _1002_i;
          _1002_i = BigInteger.Zero;
          while ((_1002_i) < (new BigInteger((_1001_args).Count))) {
            if ((_1002_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1003_generated;
            Dafny.ISequence<Dafny.Rune> _out119;
            _out119 = DCOMP.COMP.GenType((_1001_args).Select(_1002_i), inBinding, true);
            _1003_generated = _out119;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _1003_generated);
            _1002_i = (_1002_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1004_resultType;
          Dafny.ISequence<Dafny.Rune> _out120;
          _out120 = DCOMP.COMP.GenType(_1000_result, inBinding, (inFn) || (inBinding));
          _1004_resultType = _out120;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1004_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
        }
      } else if (_source86.is_Primitive) {
        DAST._IPrimitive _1005___mcc_h14 = _source86.dtor_Primitive_a0;
        DAST._IPrimitive _1006_p = _1005___mcc_h14;
        {
          DAST._IPrimitive _source88 = _1006_p;
          if (_source88.is_Int) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
          } else if (_source88.is_Real) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
          } else if (_source88.is_String) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
          } else if (_source88.is_Bool) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
          }
        }
      } else if (_source86.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1007___mcc_h15 = _source86.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1008_v = _1007___mcc_h15;
        s = _1008_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _1009___mcc_h16 = _source86.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source89 = _1009___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1010___mcc_h17 = _source89;
        Dafny.ISequence<Dafny.Rune> _1011_name = _1010___mcc_h17;
        s = DCOMP.__default.escapeIdent(_1011_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<Dafny.Rune> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>> traitBodies) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1012_i;
      _1012_i = BigInteger.Zero;
      while ((_1012_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source90 = (body).Select(_1012_i);
        DAST._IMethod _1013___mcc_h0 = _source90;
        DAST._IMethod _1014_m = _1013___mcc_h0;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source91 = (_1014_m).dtor_overridingPath;
          if (_source91.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1015___mcc_h1 = _source91.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1016_p = _1015___mcc_h1;
            {
              Dafny.ISequence<Dafny.Rune> _1017_existing;
              _1017_existing = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              if ((traitBodies).Contains(_1016_p)) {
                _1017_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Select(traitBodies, _1016_p);
              }
              if ((new BigInteger((_1017_existing).Count)).Sign == 1) {
                _1017_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1017_existing, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
              }
              Dafny.ISequence<Dafny.Rune> _1018_genMethod;
              Dafny.ISequence<Dafny.Rune> _out121;
              _out121 = DCOMP.COMP.GenMethod(_1014_m, true, enclosingType, enclosingTypeParams);
              _1018_genMethod = _out121;
              _1017_existing = Dafny.Sequence<Dafny.Rune>.Concat(_1017_existing, _1018_genMethod);
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>(_1016_p, _1017_existing)));
            }
          } else {
            {
              Dafny.ISequence<Dafny.Rune> _1019_generated;
              Dafny.ISequence<Dafny.Rune> _out122;
              _out122 = DCOMP.COMP.GenMethod(_1014_m, forTrait, enclosingType, enclosingTypeParams);
              _1019_generated = _out122;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1019_generated);
            }
          }
        }
        if ((new BigInteger((s).Count)).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        _1012_i = (_1012_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _1020_i;
      _1020_i = BigInteger.Zero;
      while ((_1020_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1021_param;
        _1021_param = (@params).Select(_1020_i);
        Dafny.ISequence<Dafny.Rune> _1022_paramType;
        Dafny.ISequence<Dafny.Rune> _out123;
        _out123 = DCOMP.COMP.GenType((_1021_param).dtor_typ, false, false);
        _1022_paramType = _out123;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((_1021_param).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _1022_paramType);
        if ((_1020_i) < ((new BigInteger((@params).Count)) - (BigInteger.One))) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        _1020_i = (_1020_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _1023_params;
      Dafny.ISequence<Dafny.Rune> _out124;
      _out124 = DCOMP.COMP.GenParams((m).dtor_params);
      _1023_params = _out124;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1024_paramNames;
      _1024_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1025_paramI;
      _1025_paramI = BigInteger.Zero;
      while ((_1025_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1024_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1024_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1025_paramI)).dtor_name));
        _1025_paramI = (_1025_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1023_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1023_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _1026_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out125;
          _out125 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1026_enclosingTypeString = _out125;
          _1023_params = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self: &"), _1026_enclosingTypeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1023_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _1027_retType;
      _1027_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _1028_typeI;
      _1028_typeI = BigInteger.Zero;
      while ((_1028_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_1028_typeI).Sign == 1) {
          _1027_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1027_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _1029_typeString;
        Dafny.ISequence<Dafny.Rune> _out126;
        _out126 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1028_typeI), false, false);
        _1029_typeString = _out126;
        _1027_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1027_retType, _1029_typeString);
        _1028_typeI = (_1028_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _1027_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1027_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      if (forTrait) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub fn "), DCOMP.__default.escapeIdent((m).dtor_name));
      }
      Dafny.ISequence<DAST._IType> _1030_typeParamsFiltered;
      _1030_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1031_typeParamI;
      _1031_typeParamI = BigInteger.Zero;
      while ((_1031_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1032_typeParam;
        _1032_typeParam = ((m).dtor_typeParams).Select(_1031_typeParamI);
        if (!((enclosingTypeParams).Contains(_1032_typeParam))) {
          _1030_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1030_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1032_typeParam));
        }
        _1031_typeParamI = (_1031_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1033_whereClauses;
      _1033_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((_1030_typeParamsFiltered).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        _1033_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1033_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1034_i;
        _1034_i = BigInteger.Zero;
        while ((_1034_i) < (new BigInteger((_1030_typeParamsFiltered).Count))) {
          if ((_1034_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            _1033_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1033_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1035_typeString;
          Dafny.ISequence<Dafny.Rune> _out127;
          _out127 = DCOMP.COMP.GenType((_1030_typeParamsFiltered).Select(_1034_i), false, false);
          _1035_typeString = _out127;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1035_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _1035_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"));
          _1033_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1033_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _1035_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _1034_i = (_1034_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1023_params), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1027_retType), _1033_whereClauses);
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _1036_earlyReturn;
        _1036_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source92 = (m).dtor_outVars;
        if (_source92.is_Some) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1037___mcc_h0 = _source92.dtor_Some_a0;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1038_outVars = _1037___mcc_h0;
          {
            _1036_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _1039_outI;
            _1039_outI = BigInteger.Zero;
            while ((_1039_outI) < (new BigInteger((_1038_outVars).Count))) {
              if ((_1039_outI).Sign == 1) {
                _1036_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1036_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1040_outVar;
              _1040_outVar = (_1038_outVars).Select(_1039_outI);
              _1036_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1036_earlyReturn, DCOMP.__default.escapeIdent((_1040_outVar)));
              _1039_outI = (_1039_outI) + (BigInteger.One);
            }
            _1036_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1036_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        } else {
        }
        Dafny.ISequence<Dafny.Rune> _1041_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1042___v15;
        Dafny.ISequence<Dafny.Rune> _out128;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None()) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1024_paramNames, true, _1036_earlyReturn, out _out128, out _out129);
        _1041_body = _out128;
        _1042___v15 = _out129;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1041_body), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}\n"));
      } else {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
      }
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1043_declarations;
      _1043_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1044_i;
      _1044_i = BigInteger.Zero;
      while ((_1044_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1045_stmt;
        _1045_stmt = (stmts).Select(_1044_i);
        Dafny.ISequence<Dafny.Rune> _1046_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1047_recIdents;
        Dafny.ISequence<Dafny.Rune> _out130;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
        DCOMP.COMP.GenStmt(_1045_stmt, selfIdent, @params, (isLast) && ((_1044_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out130, out _out131);
        _1046_stmtString = _out130;
        _1047_recIdents = _out131;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1047_recIdents, _1043_declarations));
        DAST._IStatement _source93 = _1045_stmt;
        if (_source93.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1048___mcc_h0 = _source93.dtor_name;
          DAST._IType _1049___mcc_h1 = _source93.dtor_typ;
          DAST._IOptional<DAST._IExpression> _1050___mcc_h2 = _source93.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1051_name = _1048___mcc_h0;
          {
            _1043_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1043_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1051_name));
          }
        } else if (_source93.is_Assign) {
          DAST._IAssignLhs _1052___mcc_h6 = _source93.dtor_lhs;
          DAST._IExpression _1053___mcc_h7 = _source93.dtor_value;
        } else if (_source93.is_If) {
          DAST._IExpression _1054___mcc_h10 = _source93.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1055___mcc_h11 = _source93.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1056___mcc_h12 = _source93.dtor_els;
        } else if (_source93.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1057___mcc_h16 = _source93.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1058___mcc_h17 = _source93.dtor_body;
        } else if (_source93.is_While) {
          DAST._IExpression _1059___mcc_h20 = _source93.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1060___mcc_h21 = _source93.dtor_body;
        } else if (_source93.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1061___mcc_h24 = _source93.dtor_boundName;
          DAST._IType _1062___mcc_h25 = _source93.dtor_boundType;
          DAST._IExpression _1063___mcc_h26 = _source93.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1064___mcc_h27 = _source93.dtor_body;
        } else if (_source93.is_Call) {
          DAST._IExpression _1065___mcc_h32 = _source93.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1066___mcc_h33 = _source93.dtor_name;
          Dafny.ISequence<DAST._IType> _1067___mcc_h34 = _source93.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1068___mcc_h35 = _source93.dtor_args;
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1069___mcc_h36 = _source93.dtor_outs;
        } else if (_source93.is_Return) {
          DAST._IExpression _1070___mcc_h42 = _source93.dtor_expr;
        } else if (_source93.is_EarlyReturn) {
        } else if (_source93.is_Break) {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1071___mcc_h44 = _source93.dtor_toLabel;
        } else if (_source93.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1072___mcc_h46 = _source93.dtor_body;
        } else if (_source93.is_JumpTailCallStart) {
        } else if (_source93.is_Halt) {
        } else {
          DAST._IExpression _1073___mcc_h48 = _source93.dtor_Print_a0;
        }
        if ((_1044_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _1046_stmtString);
        _1044_i = (_1044_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source94 = lhs;
      if (_source94.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1074___mcc_h0 = _source94.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source95 = _1074___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1075___mcc_h1 = _source95;
        Dafny.ISequence<Dafny.Rune> _1076_id = _1075___mcc_h1;
        {
          if ((@params).Contains(_1076_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1076_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1076_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1076_id);
          needsIIFE = false;
        }
      } else if (_source94.is_Select) {
        DAST._IExpression _1077___mcc_h2 = _source94.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1078___mcc_h3 = _source94.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1079_field = _1078___mcc_h3;
        DAST._IExpression _1080_on = _1077___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _1081_onExpr;
          bool _1082_onOwned;
          bool _1083_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1084_recIdents;
          Dafny.ISequence<Dafny.Rune> _out132;
          bool _out133;
          bool _out134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out135;
          DCOMP.COMP.GenExpr(_1080_on, selfIdent, @params, false, out _out132, out _out133, out _out134, out _out135);
          _1081_onExpr = _out132;
          _1082_onOwned = _out133;
          _1083_onErased = _out134;
          _1084_recIdents = _out135;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _1081_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1079_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1084_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1085___mcc_h4 = _source94.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1086___mcc_h5 = _source94.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1087_indices = _1086___mcc_h5;
        DAST._IExpression _1088_on = _1085___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1089_onExpr;
          bool _1090_onOwned;
          bool _1091_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1092_recIdents;
          Dafny.ISequence<Dafny.Rune> _out136;
          bool _out137;
          bool _out138;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out139;
          DCOMP.COMP.GenExpr(_1088_on, selfIdent, @params, false, out _out136, out _out137, out _out138, out _out139);
          _1089_onExpr = _out136;
          _1090_onOwned = _out137;
          _1091_onErased = _out138;
          _1092_recIdents = _out139;
          readIdents = _1092_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1093_i;
          _1093_i = BigInteger.Zero;
          while ((_1093_i) < (new BigInteger((_1087_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _1094_idx;
            bool _1095___v19;
            bool _1096_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1097_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out140;
            bool _out141;
            bool _out142;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out143;
            DCOMP.COMP.GenExpr((_1087_indices).Select(_1093_i), selfIdent, @params, true, out _out140, out _out141, out _out142, out _out143);
            _1094_idx = _out140;
            _1095___v19 = _out141;
            _1096_idxErased = _out142;
            _1097_recIdentsIdx = _out143;
            if (!(_1096_idxErased)) {
              _1094_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1094_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), DCOMP.__default.natToString(_1093_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _1094_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1097_recIdentsIdx);
            _1093_i = (_1093_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _1089_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1093_i = BigInteger.Zero;
          while ((_1093_i) < (new BigInteger((_1087_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), DCOMP.__default.natToString(_1093_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1093_i = (_1093_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source96 = stmt;
      if (_source96.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1098___mcc_h0 = _source96.dtor_name;
        DAST._IType _1099___mcc_h1 = _source96.dtor_typ;
        DAST._IOptional<DAST._IExpression> _1100___mcc_h2 = _source96.dtor_maybeValue;
        DAST._IOptional<DAST._IExpression> _source97 = _1100___mcc_h2;
        if (_source97.is_Some) {
          DAST._IExpression _1101___mcc_h3 = _source97.dtor_Some_a0;
          DAST._IExpression _1102_expression = _1101___mcc_h3;
          DAST._IType _1103_typ = _1099___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1104_name = _1098___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1105_typeString;
            Dafny.ISequence<Dafny.Rune> _out144;
            _out144 = DCOMP.COMP.GenType(_1103_typ, true, false);
            _1105_typeString = _out144;
            Dafny.ISequence<Dafny.Rune> _1106_expr;
            bool _1107___v20;
            bool _1108_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1109_recIdents;
            Dafny.ISequence<Dafny.Rune> _out145;
            bool _out146;
            bool _out147;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out148;
            DCOMP.COMP.GenExpr(_1102_expression, selfIdent, @params, true, out _out145, out _out146, out _out147, out _out148);
            _1106_expr = _out145;
            _1107___v20 = _out146;
            _1108_recErased = _out147;
            _1109_recIdents = _out148;
            if (!(_1108_recErased)) {
              _1106_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1106_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1106_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1105_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1106_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1104_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1105_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1106_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1109_recIdents;
          }
        } else {
          DAST._IType _1110_typ = _1099___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1111_name = _1098___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1112_typeString;
            Dafny.ISequence<Dafny.Rune> _out149;
            _out149 = DCOMP.COMP.GenType(_1110_typ, true, false);
            _1112_typeString = _out149;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1111_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1112_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source96.is_Assign) {
        DAST._IAssignLhs _1113___mcc_h4 = _source96.dtor_lhs;
        DAST._IExpression _1114___mcc_h5 = _source96.dtor_value;
        DAST._IExpression _1115_expression = _1114___mcc_h5;
        DAST._IAssignLhs _1116_lhs = _1113___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1117_lhsGen;
          bool _1118_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1119_recIdents;
          Dafny.ISequence<Dafny.Rune> _out150;
          bool _out151;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out152;
          DCOMP.COMP.GenAssignLhs(_1116_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out150, out _out151, out _out152);
          _1117_lhsGen = _out150;
          _1118_needsIIFE = _out151;
          _1119_recIdents = _out152;
          Dafny.ISequence<Dafny.Rune> _1120_exprGen;
          bool _1121___v21;
          bool _1122_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1123_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out153;
          bool _out154;
          bool _out155;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out156;
          DCOMP.COMP.GenExpr(_1115_expression, selfIdent, @params, true, out _out153, out _out154, out _out155, out _out156);
          _1120_exprGen = _out153;
          _1121___v21 = _out154;
          _1122_exprErased = _out155;
          _1123_exprIdents = _out156;
          if (!(_1122_exprErased)) {
            _1120_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1120_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1120_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1120_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1118_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1120_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1117_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1117_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1120_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1119_recIdents, _1123_exprIdents);
        }
      } else if (_source96.is_If) {
        DAST._IExpression _1124___mcc_h6 = _source96.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1125___mcc_h7 = _source96.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1126___mcc_h8 = _source96.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1127_els = _1126___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1128_thn = _1125___mcc_h7;
        DAST._IExpression _1129_cond = _1124___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1130_condString;
          bool _1131___v22;
          bool _1132_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1133_recIdents;
          Dafny.ISequence<Dafny.Rune> _out157;
          bool _out158;
          bool _out159;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out160;
          DCOMP.COMP.GenExpr(_1129_cond, selfIdent, @params, true, out _out157, out _out158, out _out159, out _out160);
          _1130_condString = _out157;
          _1131___v22 = _out158;
          _1132_condErased = _out159;
          _1133_recIdents = _out160;
          if (!(_1132_condErased)) {
            _1130_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1130_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1133_recIdents;
          Dafny.ISequence<Dafny.Rune> _1134_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1135_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out161;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out162;
          DCOMP.COMP.GenStmts(_1128_thn, selfIdent, @params, isLast, earlyReturn, out _out161, out _out162);
          _1134_thnString = _out161;
          _1135_thnIdents = _out162;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1135_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1136_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1137_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out163;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out164;
          DCOMP.COMP.GenStmts(_1127_els, selfIdent, @params, isLast, earlyReturn, out _out163, out _out164);
          _1136_elsString = _out163;
          _1137_elsIdents = _out164;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1137_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1130_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1134_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1136_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source96.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1138___mcc_h9 = _source96.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1139___mcc_h10 = _source96.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1140_body = _1139___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1141_lbl = _1138___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1142_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1143_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out165;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out166;
          DCOMP.COMP.GenStmts(_1140_body, selfIdent, @params, isLast, earlyReturn, out _out165, out _out166);
          _1142_bodyString = _out165;
          _1143_bodyIdents = _out166;
          readIdents = _1143_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1141_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1142_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source96.is_While) {
        DAST._IExpression _1144___mcc_h11 = _source96.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1145___mcc_h12 = _source96.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1146_body = _1145___mcc_h12;
        DAST._IExpression _1147_cond = _1144___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _1148_condString;
          bool _1149___v23;
          bool _1150_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1151_recIdents;
          Dafny.ISequence<Dafny.Rune> _out167;
          bool _out168;
          bool _out169;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out170;
          DCOMP.COMP.GenExpr(_1147_cond, selfIdent, @params, true, out _out167, out _out168, out _out169, out _out170);
          _1148_condString = _out167;
          _1149___v23 = _out168;
          _1150_condErased = _out169;
          _1151_recIdents = _out170;
          if (!(_1150_condErased)) {
            _1148_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1148_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1151_recIdents;
          Dafny.ISequence<Dafny.Rune> _1152_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1153_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out171;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out172;
          DCOMP.COMP.GenStmts(_1146_body, selfIdent, @params, false, earlyReturn, out _out171, out _out172);
          _1152_bodyString = _out171;
          _1153_bodyIdents = _out172;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1153_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _1148_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1152_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source96.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1154___mcc_h13 = _source96.dtor_boundName;
        DAST._IType _1155___mcc_h14 = _source96.dtor_boundType;
        DAST._IExpression _1156___mcc_h15 = _source96.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1157___mcc_h16 = _source96.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1158_body = _1157___mcc_h16;
        DAST._IExpression _1159_over = _1156___mcc_h15;
        DAST._IType _1160_boundType = _1155___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1161_boundName = _1154___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1162_overString;
          bool _1163___v24;
          bool _1164_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1165_recIdents;
          Dafny.ISequence<Dafny.Rune> _out173;
          bool _out174;
          bool _out175;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out176;
          DCOMP.COMP.GenExpr(_1159_over, selfIdent, @params, true, out _out173, out _out174, out _out175, out _out176);
          _1162_overString = _out173;
          _1163___v24 = _out174;
          _1164_overErased = _out175;
          _1165_recIdents = _out176;
          Dafny.ISequence<Dafny.Rune> _1166_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out177;
          _out177 = DCOMP.COMP.GenType(_1160_boundType, false, false);
          _1166_boundTypeStr = _out177;
          readIdents = _1165_recIdents;
          Dafny.ISequence<Dafny.Rune> _1167_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1168_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out178;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out179;
          DCOMP.COMP.GenStmts(_1158_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1161_boundName)), false, earlyReturn, out _out178, out _out179);
          _1167_bodyString = _out178;
          _1168_bodyIdents = _out179;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1168_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1161_boundName));
          Dafny.ISequence<Dafny.Rune> _1169_unerasedIter;
          _1169_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_1164_overErased) {
            _1169_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1166_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1169_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _1162_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1161_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1169_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1167_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source96.is_Call) {
        DAST._IExpression _1170___mcc_h17 = _source96.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1171___mcc_h18 = _source96.dtor_name;
        Dafny.ISequence<DAST._IType> _1172___mcc_h19 = _source96.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1173___mcc_h20 = _source96.dtor_args;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1174___mcc_h21 = _source96.dtor_outs;
        DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1175_maybeOutVars = _1174___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1176_args = _1173___mcc_h20;
        Dafny.ISequence<DAST._IType> _1177_typeArgs = _1172___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1178_name = _1171___mcc_h18;
        DAST._IExpression _1179_on = _1170___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1180_typeArgString;
          _1180_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1177_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1181_typeI;
            _1181_typeI = BigInteger.Zero;
            _1180_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_1181_typeI) < (new BigInteger((_1177_typeArgs).Count))) {
              if ((_1181_typeI).Sign == 1) {
                _1180_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1180_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1182_typeString;
              Dafny.ISequence<Dafny.Rune> _out180;
              _out180 = DCOMP.COMP.GenType((_1177_typeArgs).Select(_1181_typeI), false, false);
              _1182_typeString = _out180;
              _1180_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1180_typeArgString, _1182_typeString);
              _1181_typeI = (_1181_typeI) + (BigInteger.One);
            }
            _1180_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1180_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _1183_argString;
          _1183_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1184_i;
          _1184_i = BigInteger.Zero;
          while ((_1184_i) < (new BigInteger((_1176_args).Count))) {
            if ((_1184_i).Sign == 1) {
              _1183_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1183_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1185_argExpr;
            bool _1186_isOwned;
            bool _1187_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1188_argIdents;
            Dafny.ISequence<Dafny.Rune> _out181;
            bool _out182;
            bool _out183;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out184;
            DCOMP.COMP.GenExpr((_1176_args).Select(_1184_i), selfIdent, @params, false, out _out181, out _out182, out _out183, out _out184);
            _1185_argExpr = _out181;
            _1186_isOwned = _out182;
            _1187_argErased = _out183;
            _1188_argIdents = _out184;
            if (_1186_isOwned) {
              _1185_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1185_argExpr);
            }
            _1183_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1183_argString, _1185_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1188_argIdents);
            _1184_i = (_1184_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1189_enclosingString;
          bool _1190___v25;
          bool _1191___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1192_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out185;
          bool _out186;
          bool _out187;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out188;
          DCOMP.COMP.GenExpr(_1179_on, selfIdent, @params, false, out _out185, out _out186, out _out187, out _out188);
          _1189_enclosingString = _out185;
          _1190___v25 = _out186;
          _1191___v26 = _out187;
          _1192_enclosingIdents = _out188;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1192_enclosingIdents);
          DAST._IExpression _source98 = _1179_on;
          if (_source98.is_Literal) {
            DAST._ILiteral _1193___mcc_h26 = _source98.dtor_Literal_a0;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1194___mcc_h28 = _source98.dtor_Ident_a0;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1195___mcc_h30 = _source98.dtor_Companion_a0;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1189_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source98.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1196___mcc_h32 = _source98.dtor_Tuple_a0;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1197___mcc_h34 = _source98.dtor_path;
            Dafny.ISequence<DAST._IType> _1198___mcc_h35 = _source98.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1199___mcc_h36 = _source98.dtor_args;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1200___mcc_h40 = _source98.dtor_dims;
            DAST._IType _1201___mcc_h41 = _source98.dtor_typ;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1202___mcc_h44 = _source98.dtor_path;
            Dafny.ISequence<DAST._IType> _1203___mcc_h45 = _source98.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1204___mcc_h46 = _source98.dtor_variant;
            bool _1205___mcc_h47 = _source98.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1206___mcc_h48 = _source98.dtor_contents;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_Convert) {
            DAST._IExpression _1207___mcc_h54 = _source98.dtor_value;
            DAST._IType _1208___mcc_h55 = _source98.dtor_from;
            DAST._IType _1209___mcc_h56 = _source98.dtor_typ;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_SeqConstruct) {
            DAST._IExpression _1210___mcc_h60 = _source98.dtor_length;
            DAST._IExpression _1211___mcc_h61 = _source98.dtor_elem;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _1212___mcc_h64 = _source98.dtor_elements;
            DAST._IType _1213___mcc_h65 = _source98.dtor_typ;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _1214___mcc_h68 = _source98.dtor_elements;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1215___mcc_h70 = _source98.dtor_mapElems;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_This) {
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_Ite) {
            DAST._IExpression _1216___mcc_h72 = _source98.dtor_cond;
            DAST._IExpression _1217___mcc_h73 = _source98.dtor_thn;
            DAST._IExpression _1218___mcc_h74 = _source98.dtor_els;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_UnOp) {
            DAST._IUnaryOp _1219___mcc_h78 = _source98.dtor_unOp;
            DAST._IExpression _1220___mcc_h79 = _source98.dtor_expr;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_BinOp) {
            DAST._IBinOp _1221___mcc_h82 = _source98.dtor_op;
            DAST._IExpression _1222___mcc_h83 = _source98.dtor_left;
            DAST._IExpression _1223___mcc_h84 = _source98.dtor_right;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_ArrayLen) {
            DAST._IExpression _1224___mcc_h88 = _source98.dtor_expr;
            BigInteger _1225___mcc_h89 = _source98.dtor_dim;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_Select) {
            DAST._IExpression _1226___mcc_h92 = _source98.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1227___mcc_h93 = _source98.dtor_field;
            bool _1228___mcc_h94 = _source98.dtor_isConstant;
            bool _1229___mcc_h95 = _source98.dtor_onDatatype;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_SelectFn) {
            DAST._IExpression _1230___mcc_h100 = _source98.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1231___mcc_h101 = _source98.dtor_field;
            bool _1232___mcc_h102 = _source98.dtor_onDatatype;
            bool _1233___mcc_h103 = _source98.dtor_isStatic;
            BigInteger _1234___mcc_h104 = _source98.dtor_arity;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_Index) {
            DAST._IExpression _1235___mcc_h110 = _source98.dtor_expr;
            DAST._ICollKind _1236___mcc_h111 = _source98.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1237___mcc_h112 = _source98.dtor_indices;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_IndexRange) {
            DAST._IExpression _1238___mcc_h116 = _source98.dtor_expr;
            bool _1239___mcc_h117 = _source98.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _1240___mcc_h118 = _source98.dtor_low;
            DAST._IOptional<DAST._IExpression> _1241___mcc_h119 = _source98.dtor_high;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_TupleSelect) {
            DAST._IExpression _1242___mcc_h124 = _source98.dtor_expr;
            BigInteger _1243___mcc_h125 = _source98.dtor_index;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_Call) {
            DAST._IExpression _1244___mcc_h128 = _source98.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1245___mcc_h129 = _source98.dtor_name;
            Dafny.ISequence<DAST._IType> _1246___mcc_h130 = _source98.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1247___mcc_h131 = _source98.dtor_args;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1248___mcc_h136 = _source98.dtor_params;
            DAST._IType _1249___mcc_h137 = _source98.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1250___mcc_h138 = _source98.dtor_body;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1251___mcc_h142 = _source98.dtor_values;
            DAST._IType _1252___mcc_h143 = _source98.dtor_retType;
            DAST._IExpression _1253___mcc_h144 = _source98.dtor_expr;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1254___mcc_h148 = _source98.dtor_name;
            DAST._IType _1255___mcc_h149 = _source98.dtor_typ;
            DAST._IExpression _1256___mcc_h150 = _source98.dtor_value;
            DAST._IExpression _1257___mcc_h151 = _source98.dtor_iifeBody;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_Apply) {
            DAST._IExpression _1258___mcc_h156 = _source98.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1259___mcc_h157 = _source98.dtor_args;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_TypeTest) {
            DAST._IExpression _1260___mcc_h160 = _source98.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1261___mcc_h161 = _source98.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1262___mcc_h162 = _source98.dtor_variant;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_InitializationValue) {
            DAST._IType _1263___mcc_h166 = _source98.dtor_typ;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_BoolBoundedPool) {
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_SetBoundedPool) {
            DAST._IExpression _1264___mcc_h168 = _source98.dtor_of;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source98.is_SeqBoundedPool) {
            DAST._IExpression _1265___mcc_h170 = _source98.dtor_of;
            bool _1266___mcc_h171 = _source98.dtor_includeDuplicates;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1267___mcc_h174 = _source98.dtor_lo;
            DAST._IExpression _1268___mcc_h175 = _source98.dtor_hi;
            {
              _1189_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1189_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1269_receiver;
          _1269_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          DAST._IOptional<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source99 = _1175_maybeOutVars;
          if (_source99.is_Some) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1270___mcc_h178 = _source99.dtor_Some_a0;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1271_outVars = _1270___mcc_h178;
            {
              if ((new BigInteger((_1271_outVars).Count)) > (BigInteger.One)) {
                _1269_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1272_outI;
              _1272_outI = BigInteger.Zero;
              while ((_1272_outI) < (new BigInteger((_1271_outVars).Count))) {
                if ((_1272_outI).Sign == 1) {
                  _1269_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1269_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1273_outVar;
                _1273_outVar = (_1271_outVars).Select(_1272_outI);
                _1269_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1269_receiver, (_1273_outVar));
                _1272_outI = (_1272_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1271_outVars).Count)) > (BigInteger.One)) {
                _1269_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1269_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          } else {
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1269_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1269_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1189_enclosingString), DCOMP.__default.escapeIdent(_1178_name)), _1180_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1183_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source96.is_Return) {
        DAST._IExpression _1274___mcc_h22 = _source96.dtor_expr;
        DAST._IExpression _1275_expr = _1274___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1276_exprString;
          bool _1277___v29;
          bool _1278_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1279_recIdents;
          Dafny.ISequence<Dafny.Rune> _out189;
          bool _out190;
          bool _out191;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out192;
          DCOMP.COMP.GenExpr(_1275_expr, selfIdent, @params, true, out _out189, out _out190, out _out191, out _out192);
          _1276_exprString = _out189;
          _1277___v29 = _out190;
          _1278_recErased = _out191;
          _1279_recIdents = _out192;
          _1276_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1276_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1279_recIdents;
          if (isLast) {
            generated = _1276_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1276_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source96.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source96.is_Break) {
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1280___mcc_h23 = _source96.dtor_toLabel;
        DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _1281_toLabel = _1280___mcc_h23;
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source100 = _1281_toLabel;
          if (_source100.is_Some) {
            Dafny.ISequence<Dafny.Rune> _1282___mcc_h179 = _source100.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _1283_lbl = _1282___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1283_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          } else {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source96.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1284___mcc_h24 = _source96.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1285_body = _1284___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1286_paramI;
          _1286_paramI = BigInteger.Zero;
          while ((_1286_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1287_param;
            _1287_param = (@params).Select(_1286_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1287_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1287_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1286_paramI = (_1286_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1288_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1289_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out193;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
          DCOMP.COMP.GenStmts(_1285_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out193, out _out194);
          _1288_bodyString = _out193;
          _1289_bodyIdents = _out194;
          readIdents = _1289_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1288_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source96.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source96.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1290___mcc_h25 = _source96.dtor_Print_a0;
        DAST._IExpression _1291_e = _1290___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1292_printedExpr;
          bool _1293_isOwned;
          bool _1294___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1295_recIdents;
          Dafny.ISequence<Dafny.Rune> _out195;
          bool _out196;
          bool _out197;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out198;
          DCOMP.COMP.GenExpr(_1291_e, selfIdent, @params, false, out _out195, out _out196, out _out197, out _out198);
          _1292_printedExpr = _out195;
          _1293_isOwned = _out196;
          _1294___v30 = _out197;
          _1295_recIdents = _out198;
          if (_1293_isOwned) {
            _1292_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1292_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1292_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1295_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, DAST._IOptional<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source101 = e;
      if (_source101.is_Literal) {
        DAST._ILiteral _1296___mcc_h0 = _source101.dtor_Literal_a0;
        DAST._ILiteral _source102 = _1296___mcc_h0;
        if (_source102.is_BoolLiteral) {
          bool _1297___mcc_h1 = _source102.dtor_BoolLiteral_a0;
          if ((_1297___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source102.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1298___mcc_h2 = _source102.dtor_IntLiteral_a0;
          DAST._IType _1299___mcc_h3 = _source102.dtor_IntLiteral_a1;
          DAST._IType _1300_t = _1299___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1301_i = _1298___mcc_h2;
          {
            DAST._IType _source103 = _1300_t;
            if (_source103.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1302___mcc_h237 = _source103.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1303___mcc_h238 = _source103.dtor_typeArgs;
              DAST._IResolvedType _1304___mcc_h239 = _source103.dtor_resolved;
              DAST._IType _1305_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1306_genType;
                Dafny.ISequence<Dafny.Rune> _out199;
                _out199 = DCOMP.COMP.GenType(_1305_o, false, false);
                _1306_genType = _out199;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1306_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source103.is_Nullable) {
              DAST._IType _1307___mcc_h243 = _source103.dtor_Nullable_a0;
              DAST._IType _1308_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1309_genType;
                Dafny.ISequence<Dafny.Rune> _out200;
                _out200 = DCOMP.COMP.GenType(_1308_o, false, false);
                _1309_genType = _out200;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1309_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source103.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1310___mcc_h245 = _source103.dtor_Tuple_a0;
              DAST._IType _1311_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1312_genType;
                Dafny.ISequence<Dafny.Rune> _out201;
                _out201 = DCOMP.COMP.GenType(_1311_o, false, false);
                _1312_genType = _out201;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1312_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source103.is_Array) {
              DAST._IType _1313___mcc_h247 = _source103.dtor_element;
              BigInteger _1314___mcc_h248 = _source103.dtor_dims;
              DAST._IType _1315_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1316_genType;
                Dafny.ISequence<Dafny.Rune> _out202;
                _out202 = DCOMP.COMP.GenType(_1315_o, false, false);
                _1316_genType = _out202;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1316_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source103.is_Seq) {
              DAST._IType _1317___mcc_h251 = _source103.dtor_element;
              DAST._IType _1318_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1319_genType;
                Dafny.ISequence<Dafny.Rune> _out203;
                _out203 = DCOMP.COMP.GenType(_1318_o, false, false);
                _1319_genType = _out203;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1319_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source103.is_Set) {
              DAST._IType _1320___mcc_h253 = _source103.dtor_element;
              DAST._IType _1321_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1322_genType;
                Dafny.ISequence<Dafny.Rune> _out204;
                _out204 = DCOMP.COMP.GenType(_1321_o, false, false);
                _1322_genType = _out204;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1322_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source103.is_Multiset) {
              DAST._IType _1323___mcc_h255 = _source103.dtor_element;
              DAST._IType _1324_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1325_genType;
                Dafny.ISequence<Dafny.Rune> _out205;
                _out205 = DCOMP.COMP.GenType(_1324_o, false, false);
                _1325_genType = _out205;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1325_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source103.is_Map) {
              DAST._IType _1326___mcc_h257 = _source103.dtor_key;
              DAST._IType _1327___mcc_h258 = _source103.dtor_value;
              DAST._IType _1328_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1329_genType;
                Dafny.ISequence<Dafny.Rune> _out206;
                _out206 = DCOMP.COMP.GenType(_1328_o, false, false);
                _1329_genType = _out206;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1329_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source103.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1330___mcc_h261 = _source103.dtor_args;
              DAST._IType _1331___mcc_h262 = _source103.dtor_result;
              DAST._IType _1332_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1333_genType;
                Dafny.ISequence<Dafny.Rune> _out207;
                _out207 = DCOMP.COMP.GenType(_1332_o, false, false);
                _1333_genType = _out207;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1333_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source103.is_Primitive) {
              DAST._IPrimitive _1334___mcc_h265 = _source103.dtor_Primitive_a0;
              DAST._IPrimitive _source104 = _1334___mcc_h265;
              if (_source104.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source104.is_Real) {
                DAST._IType _1335_o = _1300_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1336_genType;
                  Dafny.ISequence<Dafny.Rune> _out208;
                  _out208 = DCOMP.COMP.GenType(_1335_o, false, false);
                  _1336_genType = _out208;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1336_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source104.is_String) {
                DAST._IType _1337_o = _1300_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1338_genType;
                  Dafny.ISequence<Dafny.Rune> _out209;
                  _out209 = DCOMP.COMP.GenType(_1337_o, false, false);
                  _1338_genType = _out209;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1338_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source104.is_Bool) {
                DAST._IType _1339_o = _1300_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1340_genType;
                  Dafny.ISequence<Dafny.Rune> _out210;
                  _out210 = DCOMP.COMP.GenType(_1339_o, false, false);
                  _1340_genType = _out210;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1340_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1341_o = _1300_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1342_genType;
                  Dafny.ISequence<Dafny.Rune> _out211;
                  _out211 = DCOMP.COMP.GenType(_1341_o, false, false);
                  _1342_genType = _out211;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1342_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source103.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1343___mcc_h267 = _source103.dtor_Passthrough_a0;
              DAST._IType _1344_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1345_genType;
                Dafny.ISequence<Dafny.Rune> _out212;
                _out212 = DCOMP.COMP.GenType(_1344_o, false, false);
                _1345_genType = _out212;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1345_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1346___mcc_h269 = _source103.dtor_TypeArg_a0;
              DAST._IType _1347_o = _1300_t;
              {
                Dafny.ISequence<Dafny.Rune> _1348_genType;
                Dafny.ISequence<Dafny.Rune> _out213;
                _out213 = DCOMP.COMP.GenType(_1347_o, false, false);
                _1348_genType = _out213;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1301_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1348_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source102.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1349___mcc_h4 = _source102.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1350___mcc_h5 = _source102.dtor_DecLiteral_a1;
          DAST._IType _1351___mcc_h6 = _source102.dtor_DecLiteral_a2;
          DAST._IType _1352_t = _1351___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1353_d = _1350___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1354_n = _1349___mcc_h4;
          {
            DAST._IType _source105 = _1352_t;
            if (_source105.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1355___mcc_h271 = _source105.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1356___mcc_h272 = _source105.dtor_typeArgs;
              DAST._IResolvedType _1357___mcc_h273 = _source105.dtor_resolved;
              DAST._IType _1358_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1359_genType;
                Dafny.ISequence<Dafny.Rune> _out214;
                _out214 = DCOMP.COMP.GenType(_1358_o, false, false);
                _1359_genType = _out214;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1359_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source105.is_Nullable) {
              DAST._IType _1360___mcc_h277 = _source105.dtor_Nullable_a0;
              DAST._IType _1361_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1362_genType;
                Dafny.ISequence<Dafny.Rune> _out215;
                _out215 = DCOMP.COMP.GenType(_1361_o, false, false);
                _1362_genType = _out215;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1362_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source105.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1363___mcc_h279 = _source105.dtor_Tuple_a0;
              DAST._IType _1364_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1365_genType;
                Dafny.ISequence<Dafny.Rune> _out216;
                _out216 = DCOMP.COMP.GenType(_1364_o, false, false);
                _1365_genType = _out216;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1365_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source105.is_Array) {
              DAST._IType _1366___mcc_h281 = _source105.dtor_element;
              BigInteger _1367___mcc_h282 = _source105.dtor_dims;
              DAST._IType _1368_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1369_genType;
                Dafny.ISequence<Dafny.Rune> _out217;
                _out217 = DCOMP.COMP.GenType(_1368_o, false, false);
                _1369_genType = _out217;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1369_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source105.is_Seq) {
              DAST._IType _1370___mcc_h285 = _source105.dtor_element;
              DAST._IType _1371_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1372_genType;
                Dafny.ISequence<Dafny.Rune> _out218;
                _out218 = DCOMP.COMP.GenType(_1371_o, false, false);
                _1372_genType = _out218;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1372_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source105.is_Set) {
              DAST._IType _1373___mcc_h287 = _source105.dtor_element;
              DAST._IType _1374_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1375_genType;
                Dafny.ISequence<Dafny.Rune> _out219;
                _out219 = DCOMP.COMP.GenType(_1374_o, false, false);
                _1375_genType = _out219;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1375_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source105.is_Multiset) {
              DAST._IType _1376___mcc_h289 = _source105.dtor_element;
              DAST._IType _1377_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1378_genType;
                Dafny.ISequence<Dafny.Rune> _out220;
                _out220 = DCOMP.COMP.GenType(_1377_o, false, false);
                _1378_genType = _out220;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1378_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source105.is_Map) {
              DAST._IType _1379___mcc_h291 = _source105.dtor_key;
              DAST._IType _1380___mcc_h292 = _source105.dtor_value;
              DAST._IType _1381_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1382_genType;
                Dafny.ISequence<Dafny.Rune> _out221;
                _out221 = DCOMP.COMP.GenType(_1381_o, false, false);
                _1382_genType = _out221;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1382_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source105.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1383___mcc_h295 = _source105.dtor_args;
              DAST._IType _1384___mcc_h296 = _source105.dtor_result;
              DAST._IType _1385_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1386_genType;
                Dafny.ISequence<Dafny.Rune> _out222;
                _out222 = DCOMP.COMP.GenType(_1385_o, false, false);
                _1386_genType = _out222;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1386_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source105.is_Primitive) {
              DAST._IPrimitive _1387___mcc_h299 = _source105.dtor_Primitive_a0;
              DAST._IPrimitive _source106 = _1387___mcc_h299;
              if (_source106.is_Int) {
                DAST._IType _1388_o = _1352_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1389_genType;
                  Dafny.ISequence<Dafny.Rune> _out223;
                  _out223 = DCOMP.COMP.GenType(_1388_o, false, false);
                  _1389_genType = _out223;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1389_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source106.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source106.is_String) {
                DAST._IType _1390_o = _1352_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1391_genType;
                  Dafny.ISequence<Dafny.Rune> _out224;
                  _out224 = DCOMP.COMP.GenType(_1390_o, false, false);
                  _1391_genType = _out224;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1391_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source106.is_Bool) {
                DAST._IType _1392_o = _1352_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1393_genType;
                  Dafny.ISequence<Dafny.Rune> _out225;
                  _out225 = DCOMP.COMP.GenType(_1392_o, false, false);
                  _1393_genType = _out225;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1393_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1394_o = _1352_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1395_genType;
                  Dafny.ISequence<Dafny.Rune> _out226;
                  _out226 = DCOMP.COMP.GenType(_1394_o, false, false);
                  _1395_genType = _out226;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1395_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source105.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1396___mcc_h301 = _source105.dtor_Passthrough_a0;
              DAST._IType _1397_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1398_genType;
                Dafny.ISequence<Dafny.Rune> _out227;
                _out227 = DCOMP.COMP.GenType(_1397_o, false, false);
                _1398_genType = _out227;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1398_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1399___mcc_h303 = _source105.dtor_TypeArg_a0;
              DAST._IType _1400_o = _1352_t;
              {
                Dafny.ISequence<Dafny.Rune> _1401_genType;
                Dafny.ISequence<Dafny.Rune> _out228;
                _out228 = DCOMP.COMP.GenType(_1400_o, false, false);
                _1401_genType = _out228;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1354_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1353_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1401_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source102.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1402___mcc_h7 = _source102.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1403_l = _1402___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1403_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source102.is_CharLiteral) {
          Dafny.Rune _1404___mcc_h8 = _source102.dtor_CharLiteral_a0;
          Dafny.Rune _1405_c = _1404___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), DCOMP.__default.natToString(new BigInteger((_1405_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1406___mcc_h9 = _source102.dtor_Null_a0;
          DAST._IType _1407_tpe = _1406___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1408_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out229;
            _out229 = DCOMP.COMP.GenType(_1407_tpe, false, false);
            _1408_tpeGen = _out229;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1408_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source101.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1409___mcc_h10 = _source101.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1410_name = _1409___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1410_name);
          if (!((@params).Contains(_1410_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1410_name);
        }
      } else if (_source101.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1411___mcc_h11 = _source101.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1412_path = _1411___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out230;
          _out230 = DCOMP.COMP.GenPath(_1412_path);
          s = _out230;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source101.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1413___mcc_h12 = _source101.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1414_values = _1413___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1415_i;
          _1415_i = BigInteger.Zero;
          while ((_1415_i) < (new BigInteger((_1414_values).Count))) {
            if ((_1415_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1416_recursiveGen;
            bool _1417___v31;
            bool _1418_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1419_recIdents;
            Dafny.ISequence<Dafny.Rune> _out231;
            bool _out232;
            bool _out233;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out234;
            DCOMP.COMP.GenExpr((_1414_values).Select(_1415_i), selfIdent, @params, true, out _out231, out _out232, out _out233, out _out234);
            _1416_recursiveGen = _out231;
            _1417___v31 = _out232;
            _1418_isErased = _out233;
            _1419_recIdents = _out234;
            if (_1418_isErased) {
              _1416_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1416_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1416_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1419_recIdents);
            _1415_i = (_1415_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source101.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1420___mcc_h13 = _source101.dtor_path;
        Dafny.ISequence<DAST._IType> _1421___mcc_h14 = _source101.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1422___mcc_h15 = _source101.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1423_args = _1422___mcc_h15;
        Dafny.ISequence<DAST._IType> _1424_typeArgs = _1421___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1425_path = _1420___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1426_path;
          Dafny.ISequence<Dafny.Rune> _out235;
          _out235 = DCOMP.COMP.GenPath(_1425_path);
          _1426_path = _out235;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1426_path);
          if ((new BigInteger((_1424_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1427_i;
            _1427_i = BigInteger.Zero;
            while ((_1427_i) < (new BigInteger((_1424_typeArgs).Count))) {
              if ((_1427_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1428_typeString;
              Dafny.ISequence<Dafny.Rune> _out236;
              _out236 = DCOMP.COMP.GenType((_1424_typeArgs).Select(_1427_i), false, false);
              _1428_typeString = _out236;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1428_typeString);
              _1427_i = (_1427_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1429_i;
          _1429_i = BigInteger.Zero;
          while ((_1429_i) < (new BigInteger((_1423_args).Count))) {
            if ((_1429_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1430_recursiveGen;
            bool _1431___v32;
            bool _1432_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1433_recIdents;
            Dafny.ISequence<Dafny.Rune> _out237;
            bool _out238;
            bool _out239;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out240;
            DCOMP.COMP.GenExpr((_1423_args).Select(_1429_i), selfIdent, @params, true, out _out237, out _out238, out _out239, out _out240);
            _1430_recursiveGen = _out237;
            _1431___v32 = _out238;
            _1432_isErased = _out239;
            _1433_recIdents = _out240;
            if (_1432_isErased) {
              _1430_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1430_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1430_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1433_recIdents);
            _1429_i = (_1429_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source101.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1434___mcc_h16 = _source101.dtor_dims;
        DAST._IType _1435___mcc_h17 = _source101.dtor_typ;
        DAST._IType _1436_typ = _1435___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1437_dims = _1434___mcc_h16;
        {
          BigInteger _1438_i;
          _1438_i = (new BigInteger((_1437_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1439_genTyp;
          Dafny.ISequence<Dafny.Rune> _out241;
          _out241 = DCOMP.COMP.GenType(_1436_typ, false, false);
          _1439_genTyp = _out241;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1439_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1438_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1440_recursiveGen;
            bool _1441___v33;
            bool _1442_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1443_recIdents;
            Dafny.ISequence<Dafny.Rune> _out242;
            bool _out243;
            bool _out244;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out245;
            DCOMP.COMP.GenExpr((_1437_dims).Select(_1438_i), selfIdent, @params, true, out _out242, out _out243, out _out244, out _out245);
            _1440_recursiveGen = _out242;
            _1441___v33 = _out243;
            _1442_isErased = _out244;
            _1443_recIdents = _out245;
            if (!(_1442_isErased)) {
              _1440_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1440_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1440_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1443_recIdents);
            _1438_i = (_1438_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source101.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1444___mcc_h18 = _source101.dtor_path;
        Dafny.ISequence<DAST._IType> _1445___mcc_h19 = _source101.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1446___mcc_h20 = _source101.dtor_variant;
        bool _1447___mcc_h21 = _source101.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1448___mcc_h22 = _source101.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1449_values = _1448___mcc_h22;
        bool _1450_isCo = _1447___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1451_variant = _1446___mcc_h20;
        Dafny.ISequence<DAST._IType> _1452_typeArgs = _1445___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1453_path = _1444___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1454_path;
          Dafny.ISequence<Dafny.Rune> _out246;
          _out246 = DCOMP.COMP.GenPath(_1453_path);
          _1454_path = _out246;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1454_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1452_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1455_i;
            _1455_i = BigInteger.Zero;
            while ((_1455_i) < (new BigInteger((_1452_typeArgs).Count))) {
              if ((_1455_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1456_typeString;
              Dafny.ISequence<Dafny.Rune> _out247;
              _out247 = DCOMP.COMP.GenType((_1452_typeArgs).Select(_1455_i), false, false);
              _1456_typeString = _out247;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1456_typeString);
              _1455_i = (_1455_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1451_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1457_i;
          _1457_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1457_i) < (new BigInteger((_1449_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs8 = (_1449_values).Select(_1457_i);
            Dafny.ISequence<Dafny.Rune> _1458_name = _let_tmp_rhs8.dtor__0;
            DAST._IExpression _1459_value = _let_tmp_rhs8.dtor__1;
            if ((_1457_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1450_isCo) {
              Dafny.ISequence<Dafny.Rune> _1460_recursiveGen;
              bool _1461___v34;
              bool _1462_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1463_recIdents;
              Dafny.ISequence<Dafny.Rune> _out248;
              bool _out249;
              bool _out250;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
              DCOMP.COMP.GenExpr(_1459_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out248, out _out249, out _out250, out _out251);
              _1460_recursiveGen = _out248;
              _1461___v34 = _out249;
              _1462_isErased = _out250;
              _1463_recIdents = _out251;
              if (!(_1462_isErased)) {
                _1460_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1460_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1460_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1460_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1463_recIdents);
              Dafny.ISequence<Dafny.Rune> _1464_allReadCloned;
              _1464_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1463_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1465_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_0 in (_1463_recIdents).Elements) {
                  _1465_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_0;
                  if ((_1463_recIdents).Contains(_1465_next)) {
                    goto after__ASSIGN_SUCH_THAT_0;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1242)");
              after__ASSIGN_SUCH_THAT_0:;
                _1464_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1464_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1465_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1465_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1463_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1463_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1465_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1458_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1464_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1460_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1466_recursiveGen;
              bool _1467___v35;
              bool _1468_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1469_recIdents;
              Dafny.ISequence<Dafny.Rune> _out252;
              bool _out253;
              bool _out254;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
              DCOMP.COMP.GenExpr(_1459_value, selfIdent, @params, true, out _out252, out _out253, out _out254, out _out255);
              _1466_recursiveGen = _out252;
              _1467___v35 = _out253;
              _1468_isErased = _out254;
              _1469_recIdents = _out255;
              if (!(_1468_isErased)) {
                _1466_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1466_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1466_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1466_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1458_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1466_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1469_recIdents);
            }
            _1457_i = (_1457_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source101.is_Convert) {
        DAST._IExpression _1470___mcc_h23 = _source101.dtor_value;
        DAST._IType _1471___mcc_h24 = _source101.dtor_from;
        DAST._IType _1472___mcc_h25 = _source101.dtor_typ;
        DAST._IType _1473_toTpe = _1472___mcc_h25;
        DAST._IType _1474_fromTpe = _1471___mcc_h24;
        DAST._IExpression _1475_expr = _1470___mcc_h23;
        {
          if (object.Equals(_1474_fromTpe, _1473_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1476_recursiveGen;
            bool _1477_recOwned;
            bool _1478_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1479_recIdents;
            Dafny.ISequence<Dafny.Rune> _out256;
            bool _out257;
            bool _out258;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out259;
            DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out256, out _out257, out _out258, out _out259);
            _1476_recursiveGen = _out256;
            _1477_recOwned = _out257;
            _1478_recErased = _out258;
            _1479_recIdents = _out259;
            s = _1476_recursiveGen;
            isOwned = _1477_recOwned;
            isErased = _1478_recErased;
            readIdents = _1479_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source107 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1474_fromTpe, _1473_toTpe);
            DAST._IType _1480___mcc_h305 = _source107.dtor__0;
            DAST._IType _1481___mcc_h306 = _source107.dtor__1;
            DAST._IType _source108 = _1480___mcc_h305;
            if (_source108.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1482___mcc_h309 = _source108.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1483___mcc_h310 = _source108.dtor_typeArgs;
              DAST._IResolvedType _1484___mcc_h311 = _source108.dtor_resolved;
              DAST._IResolvedType _source109 = _1484___mcc_h311;
              if (_source109.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1485___mcc_h321 = _source109.dtor_path;
                DAST._IType _source110 = _1481___mcc_h306;
                if (_source110.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1486___mcc_h325 = _source110.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1487___mcc_h326 = _source110.dtor_typeArgs;
                  DAST._IResolvedType _1488___mcc_h327 = _source110.dtor_resolved;
                  DAST._IResolvedType _source111 = _1488___mcc_h327;
                  if (_source111.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1489___mcc_h331 = _source111.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1490_recursiveGen;
                      bool _1491_recOwned;
                      bool _1492_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1493_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out260;
                      bool _out261;
                      bool _out262;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out260, out _out261, out _out262, out _out263);
                      _1490_recursiveGen = _out260;
                      _1491_recOwned = _out261;
                      _1492_recErased = _out262;
                      _1493_recIdents = _out263;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1490_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1491_recOwned;
                      isErased = _1492_recErased;
                      readIdents = _1493_recIdents;
                    }
                  } else if (_source111.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1494___mcc_h333 = _source111.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1495_recursiveGen;
                      bool _1496_recOwned;
                      bool _1497_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1498_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out264;
                      bool _out265;
                      bool _out266;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out267;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266, out _out267);
                      _1495_recursiveGen = _out264;
                      _1496_recOwned = _out265;
                      _1497_recErased = _out266;
                      _1498_recIdents = _out267;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1495_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1496_recOwned;
                      isErased = _1497_recErased;
                      readIdents = _1498_recIdents;
                    }
                  } else {
                    DAST._IType _1499___mcc_h335 = _source111.dtor_Newtype_a0;
                    DAST._IType _1500_b = _1499___mcc_h335;
                    {
                      if (object.Equals(_1474_fromTpe, _1500_b)) {
                        Dafny.ISequence<Dafny.Rune> _1501_recursiveGen;
                        bool _1502_recOwned;
                        bool _1503_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1504_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out268;
                        bool _out269;
                        bool _out270;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out271;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out268, out _out269, out _out270, out _out271);
                        _1501_recursiveGen = _out268;
                        _1502_recOwned = _out269;
                        _1503_recErased = _out270;
                        _1504_recIdents = _out271;
                        Dafny.ISequence<Dafny.Rune> _1505_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out272;
                        _out272 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                        _1505_rhsType = _out272;
                        Dafny.ISequence<Dafny.Rune> _1506_uneraseFn;
                        _1506_uneraseFn = ((_1502_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1505_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1506_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1501_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1502_recOwned;
                        isErased = false;
                        readIdents = _1504_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out273;
                        bool _out274;
                        bool _out275;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out276;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1500_b), _1500_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out273, out _out274, out _out275, out _out276);
                        s = _out273;
                        isOwned = _out274;
                        isErased = _out275;
                        readIdents = _out276;
                      }
                    }
                  }
                } else if (_source110.is_Nullable) {
                  DAST._IType _1507___mcc_h337 = _source110.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1508_recursiveGen;
                    bool _1509_recOwned;
                    bool _1510_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1511_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out277;
                    bool _out278;
                    bool _out279;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out280;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out277, out _out278, out _out279, out _out280);
                    _1508_recursiveGen = _out277;
                    _1509_recOwned = _out278;
                    _1510_recErased = _out279;
                    _1511_recIdents = _out280;
                    if (!(_1509_recOwned)) {
                      _1508_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1508_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1508_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1510_recErased;
                    readIdents = _1511_recIdents;
                  }
                } else if (_source110.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1512___mcc_h339 = _source110.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1513_recursiveGen;
                    bool _1514_recOwned;
                    bool _1515_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1516_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out281;
                    bool _out282;
                    bool _out283;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out284;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out281, out _out282, out _out283, out _out284);
                    _1513_recursiveGen = _out281;
                    _1514_recOwned = _out282;
                    _1515_recErased = _out283;
                    _1516_recIdents = _out284;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1513_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1514_recOwned;
                    isErased = _1515_recErased;
                    readIdents = _1516_recIdents;
                  }
                } else if (_source110.is_Array) {
                  DAST._IType _1517___mcc_h341 = _source110.dtor_element;
                  BigInteger _1518___mcc_h342 = _source110.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1519_recursiveGen;
                    bool _1520_recOwned;
                    bool _1521_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1522_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out285;
                    bool _out286;
                    bool _out287;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out288;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out285, out _out286, out _out287, out _out288);
                    _1519_recursiveGen = _out285;
                    _1520_recOwned = _out286;
                    _1521_recErased = _out287;
                    _1522_recIdents = _out288;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1519_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1520_recOwned;
                    isErased = _1521_recErased;
                    readIdents = _1522_recIdents;
                  }
                } else if (_source110.is_Seq) {
                  DAST._IType _1523___mcc_h345 = _source110.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1524_recursiveGen;
                    bool _1525_recOwned;
                    bool _1526_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1527_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out289;
                    bool _out290;
                    bool _out291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out292;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out289, out _out290, out _out291, out _out292);
                    _1524_recursiveGen = _out289;
                    _1525_recOwned = _out290;
                    _1526_recErased = _out291;
                    _1527_recIdents = _out292;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1524_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1525_recOwned;
                    isErased = _1526_recErased;
                    readIdents = _1527_recIdents;
                  }
                } else if (_source110.is_Set) {
                  DAST._IType _1528___mcc_h347 = _source110.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1529_recursiveGen;
                    bool _1530_recOwned;
                    bool _1531_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1532_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out293;
                    bool _out294;
                    bool _out295;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out296;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out293, out _out294, out _out295, out _out296);
                    _1529_recursiveGen = _out293;
                    _1530_recOwned = _out294;
                    _1531_recErased = _out295;
                    _1532_recIdents = _out296;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1529_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1530_recOwned;
                    isErased = _1531_recErased;
                    readIdents = _1532_recIdents;
                  }
                } else if (_source110.is_Multiset) {
                  DAST._IType _1533___mcc_h349 = _source110.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1534_recursiveGen;
                    bool _1535_recOwned;
                    bool _1536_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1537_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out297;
                    bool _out298;
                    bool _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out297, out _out298, out _out299, out _out300);
                    _1534_recursiveGen = _out297;
                    _1535_recOwned = _out298;
                    _1536_recErased = _out299;
                    _1537_recIdents = _out300;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1534_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1535_recOwned;
                    isErased = _1536_recErased;
                    readIdents = _1537_recIdents;
                  }
                } else if (_source110.is_Map) {
                  DAST._IType _1538___mcc_h351 = _source110.dtor_key;
                  DAST._IType _1539___mcc_h352 = _source110.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1540_recursiveGen;
                    bool _1541_recOwned;
                    bool _1542_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1543_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out301;
                    bool _out302;
                    bool _out303;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out304;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out301, out _out302, out _out303, out _out304);
                    _1540_recursiveGen = _out301;
                    _1541_recOwned = _out302;
                    _1542_recErased = _out303;
                    _1543_recIdents = _out304;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1540_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1541_recOwned;
                    isErased = _1542_recErased;
                    readIdents = _1543_recIdents;
                  }
                } else if (_source110.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1544___mcc_h355 = _source110.dtor_args;
                  DAST._IType _1545___mcc_h356 = _source110.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1546_recursiveGen;
                    bool _1547_recOwned;
                    bool _1548_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1549_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out305;
                    bool _out306;
                    bool _out307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out305, out _out306, out _out307, out _out308);
                    _1546_recursiveGen = _out305;
                    _1547_recOwned = _out306;
                    _1548_recErased = _out307;
                    _1549_recIdents = _out308;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1546_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1547_recOwned;
                    isErased = _1548_recErased;
                    readIdents = _1549_recIdents;
                  }
                } else if (_source110.is_Primitive) {
                  DAST._IPrimitive _1550___mcc_h359 = _source110.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1551_recursiveGen;
                    bool _1552_recOwned;
                    bool _1553_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1554_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out309;
                    bool _out310;
                    bool _out311;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out309, out _out310, out _out311, out _out312);
                    _1551_recursiveGen = _out309;
                    _1552_recOwned = _out310;
                    _1553_recErased = _out311;
                    _1554_recIdents = _out312;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1551_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1552_recOwned;
                    isErased = _1553_recErased;
                    readIdents = _1554_recIdents;
                  }
                } else if (_source110.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1555___mcc_h361 = _source110.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1556_recursiveGen;
                    bool _1557_recOwned;
                    bool _1558_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1559_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out313;
                    bool _out314;
                    bool _out315;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out313, out _out314, out _out315, out _out316);
                    _1556_recursiveGen = _out313;
                    _1557_recOwned = _out314;
                    _1558_recErased = _out315;
                    _1559_recIdents = _out316;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1556_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1557_recOwned;
                    isErased = _1558_recErased;
                    readIdents = _1559_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1560___mcc_h363 = _source110.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1561_recursiveGen;
                    bool _1562_recOwned;
                    bool _1563_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1564_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out317;
                    bool _out318;
                    bool _out319;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out317, out _out318, out _out319, out _out320);
                    _1561_recursiveGen = _out317;
                    _1562_recOwned = _out318;
                    _1563_recErased = _out319;
                    _1564_recIdents = _out320;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1561_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1562_recOwned;
                    isErased = _1563_recErased;
                    readIdents = _1564_recIdents;
                  }
                }
              } else if (_source109.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1565___mcc_h365 = _source109.dtor_path;
                DAST._IType _source112 = _1481___mcc_h306;
                if (_source112.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1566___mcc_h369 = _source112.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1567___mcc_h370 = _source112.dtor_typeArgs;
                  DAST._IResolvedType _1568___mcc_h371 = _source112.dtor_resolved;
                  DAST._IResolvedType _source113 = _1568___mcc_h371;
                  if (_source113.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1569___mcc_h375 = _source113.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1570_recursiveGen;
                      bool _1571_recOwned;
                      bool _1572_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1573_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out321;
                      bool _out322;
                      bool _out323;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out321, out _out322, out _out323, out _out324);
                      _1570_recursiveGen = _out321;
                      _1571_recOwned = _out322;
                      _1572_recErased = _out323;
                      _1573_recIdents = _out324;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1570_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1571_recOwned;
                      isErased = _1572_recErased;
                      readIdents = _1573_recIdents;
                    }
                  } else if (_source113.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1574___mcc_h377 = _source113.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1575_recursiveGen;
                      bool _1576_recOwned;
                      bool _1577_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1578_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out325;
                      bool _out326;
                      bool _out327;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out325, out _out326, out _out327, out _out328);
                      _1575_recursiveGen = _out325;
                      _1576_recOwned = _out326;
                      _1577_recErased = _out327;
                      _1578_recIdents = _out328;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1575_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1576_recOwned;
                      isErased = _1577_recErased;
                      readIdents = _1578_recIdents;
                    }
                  } else {
                    DAST._IType _1579___mcc_h379 = _source113.dtor_Newtype_a0;
                    DAST._IType _1580_b = _1579___mcc_h379;
                    {
                      if (object.Equals(_1474_fromTpe, _1580_b)) {
                        Dafny.ISequence<Dafny.Rune> _1581_recursiveGen;
                        bool _1582_recOwned;
                        bool _1583_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1584_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out329;
                        bool _out330;
                        bool _out331;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out332;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out329, out _out330, out _out331, out _out332);
                        _1581_recursiveGen = _out329;
                        _1582_recOwned = _out330;
                        _1583_recErased = _out331;
                        _1584_recIdents = _out332;
                        Dafny.ISequence<Dafny.Rune> _1585_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out333;
                        _out333 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                        _1585_rhsType = _out333;
                        Dafny.ISequence<Dafny.Rune> _1586_uneraseFn;
                        _1586_uneraseFn = ((_1582_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1585_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1586_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1581_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1582_recOwned;
                        isErased = false;
                        readIdents = _1584_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out334;
                        bool _out335;
                        bool _out336;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out337;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1580_b), _1580_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out334, out _out335, out _out336, out _out337);
                        s = _out334;
                        isOwned = _out335;
                        isErased = _out336;
                        readIdents = _out337;
                      }
                    }
                  }
                } else if (_source112.is_Nullable) {
                  DAST._IType _1587___mcc_h381 = _source112.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1588_recursiveGen;
                    bool _1589_recOwned;
                    bool _1590_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1591_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out338;
                    bool _out339;
                    bool _out340;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out338, out _out339, out _out340, out _out341);
                    _1588_recursiveGen = _out338;
                    _1589_recOwned = _out339;
                    _1590_recErased = _out340;
                    _1591_recIdents = _out341;
                    if (!(_1589_recOwned)) {
                      _1588_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1588_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1588_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1590_recErased;
                    readIdents = _1591_recIdents;
                  }
                } else if (_source112.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1592___mcc_h383 = _source112.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1593_recursiveGen;
                    bool _1594_recOwned;
                    bool _1595_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1596_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out342;
                    bool _out343;
                    bool _out344;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out345;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out342, out _out343, out _out344, out _out345);
                    _1593_recursiveGen = _out342;
                    _1594_recOwned = _out343;
                    _1595_recErased = _out344;
                    _1596_recIdents = _out345;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1593_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1594_recOwned;
                    isErased = _1595_recErased;
                    readIdents = _1596_recIdents;
                  }
                } else if (_source112.is_Array) {
                  DAST._IType _1597___mcc_h385 = _source112.dtor_element;
                  BigInteger _1598___mcc_h386 = _source112.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1599_recursiveGen;
                    bool _1600_recOwned;
                    bool _1601_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1602_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out346;
                    bool _out347;
                    bool _out348;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out349;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out346, out _out347, out _out348, out _out349);
                    _1599_recursiveGen = _out346;
                    _1600_recOwned = _out347;
                    _1601_recErased = _out348;
                    _1602_recIdents = _out349;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1599_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1600_recOwned;
                    isErased = _1601_recErased;
                    readIdents = _1602_recIdents;
                  }
                } else if (_source112.is_Seq) {
                  DAST._IType _1603___mcc_h389 = _source112.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1604_recursiveGen;
                    bool _1605_recOwned;
                    bool _1606_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1607_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out350;
                    bool _out351;
                    bool _out352;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out353;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out350, out _out351, out _out352, out _out353);
                    _1604_recursiveGen = _out350;
                    _1605_recOwned = _out351;
                    _1606_recErased = _out352;
                    _1607_recIdents = _out353;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1604_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1605_recOwned;
                    isErased = _1606_recErased;
                    readIdents = _1607_recIdents;
                  }
                } else if (_source112.is_Set) {
                  DAST._IType _1608___mcc_h391 = _source112.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1609_recursiveGen;
                    bool _1610_recOwned;
                    bool _1611_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1612_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out354;
                    bool _out355;
                    bool _out356;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out357;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out354, out _out355, out _out356, out _out357);
                    _1609_recursiveGen = _out354;
                    _1610_recOwned = _out355;
                    _1611_recErased = _out356;
                    _1612_recIdents = _out357;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1609_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1610_recOwned;
                    isErased = _1611_recErased;
                    readIdents = _1612_recIdents;
                  }
                } else if (_source112.is_Multiset) {
                  DAST._IType _1613___mcc_h393 = _source112.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1614_recursiveGen;
                    bool _1615_recOwned;
                    bool _1616_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1617_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out358;
                    bool _out359;
                    bool _out360;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out358, out _out359, out _out360, out _out361);
                    _1614_recursiveGen = _out358;
                    _1615_recOwned = _out359;
                    _1616_recErased = _out360;
                    _1617_recIdents = _out361;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1614_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1615_recOwned;
                    isErased = _1616_recErased;
                    readIdents = _1617_recIdents;
                  }
                } else if (_source112.is_Map) {
                  DAST._IType _1618___mcc_h395 = _source112.dtor_key;
                  DAST._IType _1619___mcc_h396 = _source112.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1620_recursiveGen;
                    bool _1621_recOwned;
                    bool _1622_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1623_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out362;
                    bool _out363;
                    bool _out364;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out365;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out362, out _out363, out _out364, out _out365);
                    _1620_recursiveGen = _out362;
                    _1621_recOwned = _out363;
                    _1622_recErased = _out364;
                    _1623_recIdents = _out365;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1620_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1621_recOwned;
                    isErased = _1622_recErased;
                    readIdents = _1623_recIdents;
                  }
                } else if (_source112.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1624___mcc_h399 = _source112.dtor_args;
                  DAST._IType _1625___mcc_h400 = _source112.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1626_recursiveGen;
                    bool _1627_recOwned;
                    bool _1628_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1629_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out366;
                    bool _out367;
                    bool _out368;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out369;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out366, out _out367, out _out368, out _out369);
                    _1626_recursiveGen = _out366;
                    _1627_recOwned = _out367;
                    _1628_recErased = _out368;
                    _1629_recIdents = _out369;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1626_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1627_recOwned;
                    isErased = _1628_recErased;
                    readIdents = _1629_recIdents;
                  }
                } else if (_source112.is_Primitive) {
                  DAST._IPrimitive _1630___mcc_h403 = _source112.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1631_recursiveGen;
                    bool _1632_recOwned;
                    bool _1633_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1634_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out370;
                    bool _out371;
                    bool _out372;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out370, out _out371, out _out372, out _out373);
                    _1631_recursiveGen = _out370;
                    _1632_recOwned = _out371;
                    _1633_recErased = _out372;
                    _1634_recIdents = _out373;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1631_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1632_recOwned;
                    isErased = _1633_recErased;
                    readIdents = _1634_recIdents;
                  }
                } else if (_source112.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1635___mcc_h405 = _source112.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1636_recursiveGen;
                    bool _1637_recOwned;
                    bool _1638_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1639_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out374;
                    bool _out375;
                    bool _out376;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out377;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out374, out _out375, out _out376, out _out377);
                    _1636_recursiveGen = _out374;
                    _1637_recOwned = _out375;
                    _1638_recErased = _out376;
                    _1639_recIdents = _out377;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1636_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1637_recOwned;
                    isErased = _1638_recErased;
                    readIdents = _1639_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1640___mcc_h407 = _source112.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1641_recursiveGen;
                    bool _1642_recOwned;
                    bool _1643_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1644_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out378;
                    bool _out379;
                    bool _out380;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out378, out _out379, out _out380, out _out381);
                    _1641_recursiveGen = _out378;
                    _1642_recOwned = _out379;
                    _1643_recErased = _out380;
                    _1644_recIdents = _out381;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1641_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1642_recOwned;
                    isErased = _1643_recErased;
                    readIdents = _1644_recIdents;
                  }
                }
              } else {
                DAST._IType _1645___mcc_h409 = _source109.dtor_Newtype_a0;
                DAST._IType _source114 = _1481___mcc_h306;
                if (_source114.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1646___mcc_h413 = _source114.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1647___mcc_h414 = _source114.dtor_typeArgs;
                  DAST._IResolvedType _1648___mcc_h415 = _source114.dtor_resolved;
                  DAST._IResolvedType _source115 = _1648___mcc_h415;
                  if (_source115.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1649___mcc_h422 = _source115.dtor_path;
                    DAST._IType _1650_b = _1645___mcc_h409;
                    {
                      if (object.Equals(_1650_b, _1473_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1651_recursiveGen;
                        bool _1652_recOwned;
                        bool _1653_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1654_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out382;
                        bool _out383;
                        bool _out384;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out382, out _out383, out _out384, out _out385);
                        _1651_recursiveGen = _out382;
                        _1652_recOwned = _out383;
                        _1653_recErased = _out384;
                        _1654_recIdents = _out385;
                        Dafny.ISequence<Dafny.Rune> _1655_uneraseFn;
                        _1655_uneraseFn = ((_1652_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1655_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1651_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1652_recOwned;
                        isErased = true;
                        readIdents = _1654_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out386;
                        bool _out387;
                        bool _out388;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1650_b), _1650_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out386, out _out387, out _out388, out _out389);
                        s = _out386;
                        isOwned = _out387;
                        isErased = _out388;
                        readIdents = _out389;
                      }
                    }
                  } else if (_source115.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1656___mcc_h425 = _source115.dtor_path;
                    DAST._IType _1657_b = _1645___mcc_h409;
                    {
                      if (object.Equals(_1657_b, _1473_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1658_recursiveGen;
                        bool _1659_recOwned;
                        bool _1660_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1661_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out390;
                        bool _out391;
                        bool _out392;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out390, out _out391, out _out392, out _out393);
                        _1658_recursiveGen = _out390;
                        _1659_recOwned = _out391;
                        _1660_recErased = _out392;
                        _1661_recIdents = _out393;
                        Dafny.ISequence<Dafny.Rune> _1662_uneraseFn;
                        _1662_uneraseFn = ((_1659_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1662_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1659_recOwned;
                        isErased = true;
                        readIdents = _1661_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out394;
                        bool _out395;
                        bool _out396;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1657_b), _1657_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out394, out _out395, out _out396, out _out397);
                        s = _out394;
                        isOwned = _out395;
                        isErased = _out396;
                        readIdents = _out397;
                      }
                    }
                  } else {
                    DAST._IType _1663___mcc_h428 = _source115.dtor_Newtype_a0;
                    DAST._IType _1664_b = _1663___mcc_h428;
                    {
                      if (object.Equals(_1474_fromTpe, _1664_b)) {
                        Dafny.ISequence<Dafny.Rune> _1665_recursiveGen;
                        bool _1666_recOwned;
                        bool _1667_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1668_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out398;
                        bool _out399;
                        bool _out400;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out401;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out398, out _out399, out _out400, out _out401);
                        _1665_recursiveGen = _out398;
                        _1666_recOwned = _out399;
                        _1667_recErased = _out400;
                        _1668_recIdents = _out401;
                        Dafny.ISequence<Dafny.Rune> _1669_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out402;
                        _out402 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                        _1669_rhsType = _out402;
                        Dafny.ISequence<Dafny.Rune> _1670_uneraseFn;
                        _1670_uneraseFn = ((_1666_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1669_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1670_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1665_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1666_recOwned;
                        isErased = false;
                        readIdents = _1668_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out403;
                        bool _out404;
                        bool _out405;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out406;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1664_b), _1664_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out403, out _out404, out _out405, out _out406);
                        s = _out403;
                        isOwned = _out404;
                        isErased = _out405;
                        readIdents = _out406;
                      }
                    }
                  }
                } else if (_source114.is_Nullable) {
                  DAST._IType _1671___mcc_h431 = _source114.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1672_recursiveGen;
                    bool _1673_recOwned;
                    bool _1674_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1675_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out407;
                    bool _out408;
                    bool _out409;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out410;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out407, out _out408, out _out409, out _out410);
                    _1672_recursiveGen = _out407;
                    _1673_recOwned = _out408;
                    _1674_recErased = _out409;
                    _1675_recIdents = _out410;
                    if (!(_1673_recOwned)) {
                      _1672_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1672_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1672_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1674_recErased;
                    readIdents = _1675_recIdents;
                  }
                } else if (_source114.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1676___mcc_h434 = _source114.dtor_Tuple_a0;
                  DAST._IType _1677_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1677_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1678_recursiveGen;
                      bool _1679_recOwned;
                      bool _1680_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1681_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out411;
                      bool _out412;
                      bool _out413;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out414;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out411, out _out412, out _out413, out _out414);
                      _1678_recursiveGen = _out411;
                      _1679_recOwned = _out412;
                      _1680_recErased = _out413;
                      _1681_recIdents = _out414;
                      Dafny.ISequence<Dafny.Rune> _1682_uneraseFn;
                      _1682_uneraseFn = ((_1679_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1682_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1678_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1679_recOwned;
                      isErased = true;
                      readIdents = _1681_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out415;
                      bool _out416;
                      bool _out417;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out418;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1677_b), _1677_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out415, out _out416, out _out417, out _out418);
                      s = _out415;
                      isOwned = _out416;
                      isErased = _out417;
                      readIdents = _out418;
                    }
                  }
                } else if (_source114.is_Array) {
                  DAST._IType _1683___mcc_h437 = _source114.dtor_element;
                  BigInteger _1684___mcc_h438 = _source114.dtor_dims;
                  DAST._IType _1685_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1685_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1686_recursiveGen;
                      bool _1687_recOwned;
                      bool _1688_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1689_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out419;
                      bool _out420;
                      bool _out421;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out422;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out419, out _out420, out _out421, out _out422);
                      _1686_recursiveGen = _out419;
                      _1687_recOwned = _out420;
                      _1688_recErased = _out421;
                      _1689_recIdents = _out422;
                      Dafny.ISequence<Dafny.Rune> _1690_uneraseFn;
                      _1690_uneraseFn = ((_1687_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1690_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1686_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1687_recOwned;
                      isErased = true;
                      readIdents = _1689_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out423;
                      bool _out424;
                      bool _out425;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out426;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1685_b), _1685_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out423, out _out424, out _out425, out _out426);
                      s = _out423;
                      isOwned = _out424;
                      isErased = _out425;
                      readIdents = _out426;
                    }
                  }
                } else if (_source114.is_Seq) {
                  DAST._IType _1691___mcc_h443 = _source114.dtor_element;
                  DAST._IType _1692_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1692_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1693_recursiveGen;
                      bool _1694_recOwned;
                      bool _1695_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1696_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out427;
                      bool _out428;
                      bool _out429;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out430;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out427, out _out428, out _out429, out _out430);
                      _1693_recursiveGen = _out427;
                      _1694_recOwned = _out428;
                      _1695_recErased = _out429;
                      _1696_recIdents = _out430;
                      Dafny.ISequence<Dafny.Rune> _1697_uneraseFn;
                      _1697_uneraseFn = ((_1694_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1697_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1693_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1694_recOwned;
                      isErased = true;
                      readIdents = _1696_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out431;
                      bool _out432;
                      bool _out433;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out434;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1692_b), _1692_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out431, out _out432, out _out433, out _out434);
                      s = _out431;
                      isOwned = _out432;
                      isErased = _out433;
                      readIdents = _out434;
                    }
                  }
                } else if (_source114.is_Set) {
                  DAST._IType _1698___mcc_h446 = _source114.dtor_element;
                  DAST._IType _1699_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1699_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1700_recursiveGen;
                      bool _1701_recOwned;
                      bool _1702_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1703_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out435;
                      bool _out436;
                      bool _out437;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out438;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out435, out _out436, out _out437, out _out438);
                      _1700_recursiveGen = _out435;
                      _1701_recOwned = _out436;
                      _1702_recErased = _out437;
                      _1703_recIdents = _out438;
                      Dafny.ISequence<Dafny.Rune> _1704_uneraseFn;
                      _1704_uneraseFn = ((_1701_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1704_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1700_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1701_recOwned;
                      isErased = true;
                      readIdents = _1703_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out439;
                      bool _out440;
                      bool _out441;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out442;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1699_b), _1699_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out439, out _out440, out _out441, out _out442);
                      s = _out439;
                      isOwned = _out440;
                      isErased = _out441;
                      readIdents = _out442;
                    }
                  }
                } else if (_source114.is_Multiset) {
                  DAST._IType _1705___mcc_h449 = _source114.dtor_element;
                  DAST._IType _1706_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1706_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1707_recursiveGen;
                      bool _1708_recOwned;
                      bool _1709_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1710_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out443;
                      bool _out444;
                      bool _out445;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out446;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out443, out _out444, out _out445, out _out446);
                      _1707_recursiveGen = _out443;
                      _1708_recOwned = _out444;
                      _1709_recErased = _out445;
                      _1710_recIdents = _out446;
                      Dafny.ISequence<Dafny.Rune> _1711_uneraseFn;
                      _1711_uneraseFn = ((_1708_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1711_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1707_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1708_recOwned;
                      isErased = true;
                      readIdents = _1710_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out447;
                      bool _out448;
                      bool _out449;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out450;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1706_b), _1706_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out447, out _out448, out _out449, out _out450);
                      s = _out447;
                      isOwned = _out448;
                      isErased = _out449;
                      readIdents = _out450;
                    }
                  }
                } else if (_source114.is_Map) {
                  DAST._IType _1712___mcc_h452 = _source114.dtor_key;
                  DAST._IType _1713___mcc_h453 = _source114.dtor_value;
                  DAST._IType _1714_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1714_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1715_recursiveGen;
                      bool _1716_recOwned;
                      bool _1717_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1718_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out451;
                      bool _out452;
                      bool _out453;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out454;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out451, out _out452, out _out453, out _out454);
                      _1715_recursiveGen = _out451;
                      _1716_recOwned = _out452;
                      _1717_recErased = _out453;
                      _1718_recIdents = _out454;
                      Dafny.ISequence<Dafny.Rune> _1719_uneraseFn;
                      _1719_uneraseFn = ((_1716_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1719_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1715_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1716_recOwned;
                      isErased = true;
                      readIdents = _1718_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out455;
                      bool _out456;
                      bool _out457;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out458;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1714_b), _1714_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out455, out _out456, out _out457, out _out458);
                      s = _out455;
                      isOwned = _out456;
                      isErased = _out457;
                      readIdents = _out458;
                    }
                  }
                } else if (_source114.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1720___mcc_h458 = _source114.dtor_args;
                  DAST._IType _1721___mcc_h459 = _source114.dtor_result;
                  DAST._IType _1722_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1722_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1723_recursiveGen;
                      bool _1724_recOwned;
                      bool _1725_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1726_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out459;
                      bool _out460;
                      bool _out461;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out462;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out459, out _out460, out _out461, out _out462);
                      _1723_recursiveGen = _out459;
                      _1724_recOwned = _out460;
                      _1725_recErased = _out461;
                      _1726_recIdents = _out462;
                      Dafny.ISequence<Dafny.Rune> _1727_uneraseFn;
                      _1727_uneraseFn = ((_1724_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1727_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1723_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1724_recOwned;
                      isErased = true;
                      readIdents = _1726_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out463;
                      bool _out464;
                      bool _out465;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out466;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1722_b), _1722_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out463, out _out464, out _out465, out _out466);
                      s = _out463;
                      isOwned = _out464;
                      isErased = _out465;
                      readIdents = _out466;
                    }
                  }
                } else if (_source114.is_Primitive) {
                  DAST._IPrimitive _1728___mcc_h464 = _source114.dtor_Primitive_a0;
                  DAST._IType _1729_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1729_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1730_recursiveGen;
                      bool _1731_recOwned;
                      bool _1732_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1733_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out467;
                      bool _out468;
                      bool _out469;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out470;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out467, out _out468, out _out469, out _out470);
                      _1730_recursiveGen = _out467;
                      _1731_recOwned = _out468;
                      _1732_recErased = _out469;
                      _1733_recIdents = _out470;
                      Dafny.ISequence<Dafny.Rune> _1734_uneraseFn;
                      _1734_uneraseFn = ((_1731_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1734_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1730_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1731_recOwned;
                      isErased = true;
                      readIdents = _1733_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out471;
                      bool _out472;
                      bool _out473;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out474;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1729_b), _1729_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out471, out _out472, out _out473, out _out474);
                      s = _out471;
                      isOwned = _out472;
                      isErased = _out473;
                      readIdents = _out474;
                    }
                  }
                } else if (_source114.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1735___mcc_h467 = _source114.dtor_Passthrough_a0;
                  DAST._IType _1736_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1736_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1737_recursiveGen;
                      bool _1738_recOwned;
                      bool _1739_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1740_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out475;
                      bool _out476;
                      bool _out477;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out478;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out475, out _out476, out _out477, out _out478);
                      _1737_recursiveGen = _out475;
                      _1738_recOwned = _out476;
                      _1739_recErased = _out477;
                      _1740_recIdents = _out478;
                      Dafny.ISequence<Dafny.Rune> _1741_uneraseFn;
                      _1741_uneraseFn = ((_1738_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1741_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1737_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1738_recOwned;
                      isErased = true;
                      readIdents = _1740_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out479;
                      bool _out480;
                      bool _out481;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out482;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1736_b), _1736_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out479, out _out480, out _out481, out _out482);
                      s = _out479;
                      isOwned = _out480;
                      isErased = _out481;
                      readIdents = _out482;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1742___mcc_h470 = _source114.dtor_TypeArg_a0;
                  DAST._IType _1743_b = _1645___mcc_h409;
                  {
                    if (object.Equals(_1743_b, _1473_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1744_recursiveGen;
                      bool _1745_recOwned;
                      bool _1746_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1747_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out483;
                      bool _out484;
                      bool _out485;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out486;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out483, out _out484, out _out485, out _out486);
                      _1744_recursiveGen = _out483;
                      _1745_recOwned = _out484;
                      _1746_recErased = _out485;
                      _1747_recIdents = _out486;
                      Dafny.ISequence<Dafny.Rune> _1748_uneraseFn;
                      _1748_uneraseFn = ((_1745_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1748_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1744_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1745_recOwned;
                      isErased = true;
                      readIdents = _1747_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out487;
                      bool _out488;
                      bool _out489;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out490;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1743_b), _1743_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out487, out _out488, out _out489, out _out490);
                      s = _out487;
                      isOwned = _out488;
                      isErased = _out489;
                      readIdents = _out490;
                    }
                  }
                }
              }
            } else if (_source108.is_Nullable) {
              DAST._IType _1749___mcc_h473 = _source108.dtor_Nullable_a0;
              DAST._IType _source116 = _1481___mcc_h306;
              if (_source116.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1750___mcc_h477 = _source116.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1751___mcc_h478 = _source116.dtor_typeArgs;
                DAST._IResolvedType _1752___mcc_h479 = _source116.dtor_resolved;
                DAST._IResolvedType _source117 = _1752___mcc_h479;
                if (_source117.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1753___mcc_h486 = _source117.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1754_recursiveGen;
                    bool _1755_recOwned;
                    bool _1756_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1757_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out491;
                    bool _out492;
                    bool _out493;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out494;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out491, out _out492, out _out493, out _out494);
                    _1754_recursiveGen = _out491;
                    _1755_recOwned = _out492;
                    _1756_recErased = _out493;
                    _1757_recIdents = _out494;
                    if (!(_1755_recOwned)) {
                      _1754_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1754_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1754_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1755_recOwned;
                    isErased = _1756_recErased;
                    readIdents = _1757_recIdents;
                  }
                } else if (_source117.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1758___mcc_h489 = _source117.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1759_recursiveGen;
                    bool _1760_recOwned;
                    bool _1761_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1762_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out495;
                    bool _out496;
                    bool _out497;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out498;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out495, out _out496, out _out497, out _out498);
                    _1759_recursiveGen = _out495;
                    _1760_recOwned = _out496;
                    _1761_recErased = _out497;
                    _1762_recIdents = _out498;
                    if (!(_1760_recOwned)) {
                      _1759_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1759_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1759_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1760_recOwned;
                    isErased = _1761_recErased;
                    readIdents = _1762_recIdents;
                  }
                } else {
                  DAST._IType _1763___mcc_h492 = _source117.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1764_recursiveGen;
                    bool _1765_recOwned;
                    bool _1766_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1767_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out499;
                    bool _out500;
                    bool _out501;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out502;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out499, out _out500, out _out501, out _out502);
                    _1764_recursiveGen = _out499;
                    _1765_recOwned = _out500;
                    _1766_recErased = _out501;
                    _1767_recIdents = _out502;
                    if (!(_1765_recOwned)) {
                      _1764_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1764_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1764_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1765_recOwned;
                    isErased = _1766_recErased;
                    readIdents = _1767_recIdents;
                  }
                }
              } else if (_source116.is_Nullable) {
                DAST._IType _1768___mcc_h495 = _source116.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1769_recursiveGen;
                  bool _1770_recOwned;
                  bool _1771_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1772_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out503;
                  bool _out504;
                  bool _out505;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out506;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out503, out _out504, out _out505, out _out506);
                  _1769_recursiveGen = _out503;
                  _1770_recOwned = _out504;
                  _1771_recErased = _out505;
                  _1772_recIdents = _out506;
                  if (!(_1770_recOwned)) {
                    _1769_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1769_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1769_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1770_recOwned;
                  isErased = _1771_recErased;
                  readIdents = _1772_recIdents;
                }
              } else if (_source116.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1773___mcc_h498 = _source116.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1774_recursiveGen;
                  bool _1775_recOwned;
                  bool _1776_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1777_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out507;
                  bool _out508;
                  bool _out509;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out510;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out507, out _out508, out _out509, out _out510);
                  _1774_recursiveGen = _out507;
                  _1775_recOwned = _out508;
                  _1776_recErased = _out509;
                  _1777_recIdents = _out510;
                  if (!(_1775_recOwned)) {
                    _1774_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1774_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1774_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1775_recOwned;
                  isErased = _1776_recErased;
                  readIdents = _1777_recIdents;
                }
              } else if (_source116.is_Array) {
                DAST._IType _1778___mcc_h501 = _source116.dtor_element;
                BigInteger _1779___mcc_h502 = _source116.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1780_recursiveGen;
                  bool _1781_recOwned;
                  bool _1782_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1783_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out511;
                  bool _out512;
                  bool _out513;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out514;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out511, out _out512, out _out513, out _out514);
                  _1780_recursiveGen = _out511;
                  _1781_recOwned = _out512;
                  _1782_recErased = _out513;
                  _1783_recIdents = _out514;
                  if (!(_1781_recOwned)) {
                    _1780_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1780_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1780_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1781_recOwned;
                  isErased = _1782_recErased;
                  readIdents = _1783_recIdents;
                }
              } else if (_source116.is_Seq) {
                DAST._IType _1784___mcc_h507 = _source116.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1785_recursiveGen;
                  bool _1786_recOwned;
                  bool _1787_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1788_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out515;
                  bool _out516;
                  bool _out517;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out518;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out515, out _out516, out _out517, out _out518);
                  _1785_recursiveGen = _out515;
                  _1786_recOwned = _out516;
                  _1787_recErased = _out517;
                  _1788_recIdents = _out518;
                  if (!(_1786_recOwned)) {
                    _1785_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1785_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1785_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1786_recOwned;
                  isErased = _1787_recErased;
                  readIdents = _1788_recIdents;
                }
              } else if (_source116.is_Set) {
                DAST._IType _1789___mcc_h510 = _source116.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1790_recursiveGen;
                  bool _1791_recOwned;
                  bool _1792_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1793_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out519;
                  bool _out520;
                  bool _out521;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out519, out _out520, out _out521, out _out522);
                  _1790_recursiveGen = _out519;
                  _1791_recOwned = _out520;
                  _1792_recErased = _out521;
                  _1793_recIdents = _out522;
                  if (!(_1791_recOwned)) {
                    _1790_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1790_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1790_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1791_recOwned;
                  isErased = _1792_recErased;
                  readIdents = _1793_recIdents;
                }
              } else if (_source116.is_Multiset) {
                DAST._IType _1794___mcc_h513 = _source116.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1795_recursiveGen;
                  bool _1796_recOwned;
                  bool _1797_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1798_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out523;
                  bool _out524;
                  bool _out525;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out523, out _out524, out _out525, out _out526);
                  _1795_recursiveGen = _out523;
                  _1796_recOwned = _out524;
                  _1797_recErased = _out525;
                  _1798_recIdents = _out526;
                  if (!(_1796_recOwned)) {
                    _1795_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1795_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1795_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1796_recOwned;
                  isErased = _1797_recErased;
                  readIdents = _1798_recIdents;
                }
              } else if (_source116.is_Map) {
                DAST._IType _1799___mcc_h516 = _source116.dtor_key;
                DAST._IType _1800___mcc_h517 = _source116.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1801_recursiveGen;
                  bool _1802_recOwned;
                  bool _1803_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1804_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out527;
                  bool _out528;
                  bool _out529;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out530;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out527, out _out528, out _out529, out _out530);
                  _1801_recursiveGen = _out527;
                  _1802_recOwned = _out528;
                  _1803_recErased = _out529;
                  _1804_recIdents = _out530;
                  if (!(_1802_recOwned)) {
                    _1801_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1801_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1801_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1802_recOwned;
                  isErased = _1803_recErased;
                  readIdents = _1804_recIdents;
                }
              } else if (_source116.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1805___mcc_h522 = _source116.dtor_args;
                DAST._IType _1806___mcc_h523 = _source116.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1807_recursiveGen;
                  bool _1808_recOwned;
                  bool _1809_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1810_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out531;
                  bool _out532;
                  bool _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out531, out _out532, out _out533, out _out534);
                  _1807_recursiveGen = _out531;
                  _1808_recOwned = _out532;
                  _1809_recErased = _out533;
                  _1810_recIdents = _out534;
                  if (!(_1808_recOwned)) {
                    _1807_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1807_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1807_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1808_recOwned;
                  isErased = _1809_recErased;
                  readIdents = _1810_recIdents;
                }
              } else if (_source116.is_Primitive) {
                DAST._IPrimitive _1811___mcc_h528 = _source116.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1812_recursiveGen;
                  bool _1813_recOwned;
                  bool _1814_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1815_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out535;
                  bool _out536;
                  bool _out537;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out538;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out535, out _out536, out _out537, out _out538);
                  _1812_recursiveGen = _out535;
                  _1813_recOwned = _out536;
                  _1814_recErased = _out537;
                  _1815_recIdents = _out538;
                  if (!(_1813_recOwned)) {
                    _1812_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1812_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1812_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1813_recOwned;
                  isErased = _1814_recErased;
                  readIdents = _1815_recIdents;
                }
              } else if (_source116.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1816___mcc_h531 = _source116.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1817_recursiveGen;
                  bool _1818_recOwned;
                  bool _1819_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1820_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out539;
                  bool _out540;
                  bool _out541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out539, out _out540, out _out541, out _out542);
                  _1817_recursiveGen = _out539;
                  _1818_recOwned = _out540;
                  _1819_recErased = _out541;
                  _1820_recIdents = _out542;
                  if (!(_1818_recOwned)) {
                    _1817_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1817_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1817_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1818_recOwned;
                  isErased = _1819_recErased;
                  readIdents = _1820_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1821___mcc_h534 = _source116.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1822_recursiveGen;
                  bool _1823_recOwned;
                  bool _1824_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1825_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out543;
                  bool _out544;
                  bool _out545;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out543, out _out544, out _out545, out _out546);
                  _1822_recursiveGen = _out543;
                  _1823_recOwned = _out544;
                  _1824_recErased = _out545;
                  _1825_recIdents = _out546;
                  if (!(_1823_recOwned)) {
                    _1822_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1822_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1822_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1823_recOwned;
                  isErased = _1824_recErased;
                  readIdents = _1825_recIdents;
                }
              }
            } else if (_source108.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1826___mcc_h537 = _source108.dtor_Tuple_a0;
              DAST._IType _source118 = _1481___mcc_h306;
              if (_source118.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1827___mcc_h541 = _source118.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1828___mcc_h542 = _source118.dtor_typeArgs;
                DAST._IResolvedType _1829___mcc_h543 = _source118.dtor_resolved;
                DAST._IResolvedType _source119 = _1829___mcc_h543;
                if (_source119.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1830___mcc_h547 = _source119.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1831_recursiveGen;
                    bool _1832_recOwned;
                    bool _1833_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1834_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out547;
                    bool _out548;
                    bool _out549;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549, out _out550);
                    _1831_recursiveGen = _out547;
                    _1832_recOwned = _out548;
                    _1833_recErased = _out549;
                    _1834_recIdents = _out550;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1831_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1832_recOwned;
                    isErased = _1833_recErased;
                    readIdents = _1834_recIdents;
                  }
                } else if (_source119.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1835___mcc_h549 = _source119.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1836_recursiveGen;
                    bool _1837_recOwned;
                    bool _1838_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1839_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out551;
                    bool _out552;
                    bool _out553;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out551, out _out552, out _out553, out _out554);
                    _1836_recursiveGen = _out551;
                    _1837_recOwned = _out552;
                    _1838_recErased = _out553;
                    _1839_recIdents = _out554;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1836_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1837_recOwned;
                    isErased = _1838_recErased;
                    readIdents = _1839_recIdents;
                  }
                } else {
                  DAST._IType _1840___mcc_h551 = _source119.dtor_Newtype_a0;
                  DAST._IType _1841_b = _1840___mcc_h551;
                  {
                    if (object.Equals(_1474_fromTpe, _1841_b)) {
                      Dafny.ISequence<Dafny.Rune> _1842_recursiveGen;
                      bool _1843_recOwned;
                      bool _1844_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1845_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out555;
                      bool _out556;
                      bool _out557;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out555, out _out556, out _out557, out _out558);
                      _1842_recursiveGen = _out555;
                      _1843_recOwned = _out556;
                      _1844_recErased = _out557;
                      _1845_recIdents = _out558;
                      Dafny.ISequence<Dafny.Rune> _1846_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out559;
                      _out559 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _1846_rhsType = _out559;
                      Dafny.ISequence<Dafny.Rune> _1847_uneraseFn;
                      _1847_uneraseFn = ((_1843_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1846_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1847_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1842_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1843_recOwned;
                      isErased = false;
                      readIdents = _1845_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out560;
                      bool _out561;
                      bool _out562;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out563;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1841_b), _1841_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out560, out _out561, out _out562, out _out563);
                      s = _out560;
                      isOwned = _out561;
                      isErased = _out562;
                      readIdents = _out563;
                    }
                  }
                }
              } else if (_source118.is_Nullable) {
                DAST._IType _1848___mcc_h553 = _source118.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1849_recursiveGen;
                  bool _1850_recOwned;
                  bool _1851_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1852_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out564;
                  bool _out565;
                  bool _out566;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out567;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out564, out _out565, out _out566, out _out567);
                  _1849_recursiveGen = _out564;
                  _1850_recOwned = _out565;
                  _1851_recErased = _out566;
                  _1852_recIdents = _out567;
                  if (!(_1850_recOwned)) {
                    _1849_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1849_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1849_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1851_recErased;
                  readIdents = _1852_recIdents;
                }
              } else if (_source118.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1853___mcc_h555 = _source118.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1854_recursiveGen;
                  bool _1855_recOwned;
                  bool _1856_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1857_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out568;
                  bool _out569;
                  bool _out570;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out571;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out568, out _out569, out _out570, out _out571);
                  _1854_recursiveGen = _out568;
                  _1855_recOwned = _out569;
                  _1856_recErased = _out570;
                  _1857_recIdents = _out571;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1854_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1855_recOwned;
                  isErased = _1856_recErased;
                  readIdents = _1857_recIdents;
                }
              } else if (_source118.is_Array) {
                DAST._IType _1858___mcc_h557 = _source118.dtor_element;
                BigInteger _1859___mcc_h558 = _source118.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1860_recursiveGen;
                  bool _1861_recOwned;
                  bool _1862_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1863_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out572;
                  bool _out573;
                  bool _out574;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out575;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out572, out _out573, out _out574, out _out575);
                  _1860_recursiveGen = _out572;
                  _1861_recOwned = _out573;
                  _1862_recErased = _out574;
                  _1863_recIdents = _out575;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1860_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1861_recOwned;
                  isErased = _1862_recErased;
                  readIdents = _1863_recIdents;
                }
              } else if (_source118.is_Seq) {
                DAST._IType _1864___mcc_h561 = _source118.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1865_recursiveGen;
                  bool _1866_recOwned;
                  bool _1867_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1868_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out576;
                  bool _out577;
                  bool _out578;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out579;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out576, out _out577, out _out578, out _out579);
                  _1865_recursiveGen = _out576;
                  _1866_recOwned = _out577;
                  _1867_recErased = _out578;
                  _1868_recIdents = _out579;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1865_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1866_recOwned;
                  isErased = _1867_recErased;
                  readIdents = _1868_recIdents;
                }
              } else if (_source118.is_Set) {
                DAST._IType _1869___mcc_h563 = _source118.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1870_recursiveGen;
                  bool _1871_recOwned;
                  bool _1872_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1873_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out580;
                  bool _out581;
                  bool _out582;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out580, out _out581, out _out582, out _out583);
                  _1870_recursiveGen = _out580;
                  _1871_recOwned = _out581;
                  _1872_recErased = _out582;
                  _1873_recIdents = _out583;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1870_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1871_recOwned;
                  isErased = _1872_recErased;
                  readIdents = _1873_recIdents;
                }
              } else if (_source118.is_Multiset) {
                DAST._IType _1874___mcc_h565 = _source118.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1875_recursiveGen;
                  bool _1876_recOwned;
                  bool _1877_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1878_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out584;
                  bool _out585;
                  bool _out586;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out587;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out584, out _out585, out _out586, out _out587);
                  _1875_recursiveGen = _out584;
                  _1876_recOwned = _out585;
                  _1877_recErased = _out586;
                  _1878_recIdents = _out587;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1875_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1876_recOwned;
                  isErased = _1877_recErased;
                  readIdents = _1878_recIdents;
                }
              } else if (_source118.is_Map) {
                DAST._IType _1879___mcc_h567 = _source118.dtor_key;
                DAST._IType _1880___mcc_h568 = _source118.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1881_recursiveGen;
                  bool _1882_recOwned;
                  bool _1883_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1884_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out588;
                  bool _out589;
                  bool _out590;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out591;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out588, out _out589, out _out590, out _out591);
                  _1881_recursiveGen = _out588;
                  _1882_recOwned = _out589;
                  _1883_recErased = _out590;
                  _1884_recIdents = _out591;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1881_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1882_recOwned;
                  isErased = _1883_recErased;
                  readIdents = _1884_recIdents;
                }
              } else if (_source118.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1885___mcc_h571 = _source118.dtor_args;
                DAST._IType _1886___mcc_h572 = _source118.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1887_recursiveGen;
                  bool _1888_recOwned;
                  bool _1889_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1890_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out592;
                  bool _out593;
                  bool _out594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out592, out _out593, out _out594, out _out595);
                  _1887_recursiveGen = _out592;
                  _1888_recOwned = _out593;
                  _1889_recErased = _out594;
                  _1890_recIdents = _out595;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1887_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1888_recOwned;
                  isErased = _1889_recErased;
                  readIdents = _1890_recIdents;
                }
              } else if (_source118.is_Primitive) {
                DAST._IPrimitive _1891___mcc_h575 = _source118.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1892_recursiveGen;
                  bool _1893_recOwned;
                  bool _1894_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1895_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out596;
                  bool _out597;
                  bool _out598;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out599;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out596, out _out597, out _out598, out _out599);
                  _1892_recursiveGen = _out596;
                  _1893_recOwned = _out597;
                  _1894_recErased = _out598;
                  _1895_recIdents = _out599;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1892_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1893_recOwned;
                  isErased = _1894_recErased;
                  readIdents = _1895_recIdents;
                }
              } else if (_source118.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1896___mcc_h577 = _source118.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1897_recursiveGen;
                  bool _1898_recOwned;
                  bool _1899_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1900_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out600;
                  bool _out601;
                  bool _out602;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out603;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out600, out _out601, out _out602, out _out603);
                  _1897_recursiveGen = _out600;
                  _1898_recOwned = _out601;
                  _1899_recErased = _out602;
                  _1900_recIdents = _out603;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1897_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1898_recOwned;
                  isErased = _1899_recErased;
                  readIdents = _1900_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1901___mcc_h579 = _source118.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1902_recursiveGen;
                  bool _1903_recOwned;
                  bool _1904_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1905_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out604;
                  bool _out605;
                  bool _out606;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out604, out _out605, out _out606, out _out607);
                  _1902_recursiveGen = _out604;
                  _1903_recOwned = _out605;
                  _1904_recErased = _out606;
                  _1905_recIdents = _out607;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1902_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1903_recOwned;
                  isErased = _1904_recErased;
                  readIdents = _1905_recIdents;
                }
              }
            } else if (_source108.is_Array) {
              DAST._IType _1906___mcc_h581 = _source108.dtor_element;
              BigInteger _1907___mcc_h582 = _source108.dtor_dims;
              DAST._IType _source120 = _1481___mcc_h306;
              if (_source120.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1908___mcc_h589 = _source120.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1909___mcc_h590 = _source120.dtor_typeArgs;
                DAST._IResolvedType _1910___mcc_h591 = _source120.dtor_resolved;
                DAST._IResolvedType _source121 = _1910___mcc_h591;
                if (_source121.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1911___mcc_h595 = _source121.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1912_recursiveGen;
                    bool _1913_recOwned;
                    bool _1914_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1915_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out608;
                    bool _out609;
                    bool _out610;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out608, out _out609, out _out610, out _out611);
                    _1912_recursiveGen = _out608;
                    _1913_recOwned = _out609;
                    _1914_recErased = _out610;
                    _1915_recIdents = _out611;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1912_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1913_recOwned;
                    isErased = _1914_recErased;
                    readIdents = _1915_recIdents;
                  }
                } else if (_source121.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1916___mcc_h597 = _source121.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1917_recursiveGen;
                    bool _1918_recOwned;
                    bool _1919_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1920_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out612;
                    bool _out613;
                    bool _out614;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614, out _out615);
                    _1917_recursiveGen = _out612;
                    _1918_recOwned = _out613;
                    _1919_recErased = _out614;
                    _1920_recIdents = _out615;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1917_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1918_recOwned;
                    isErased = _1919_recErased;
                    readIdents = _1920_recIdents;
                  }
                } else {
                  DAST._IType _1921___mcc_h599 = _source121.dtor_Newtype_a0;
                  DAST._IType _1922_b = _1921___mcc_h599;
                  {
                    if (object.Equals(_1474_fromTpe, _1922_b)) {
                      Dafny.ISequence<Dafny.Rune> _1923_recursiveGen;
                      bool _1924_recOwned;
                      bool _1925_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1926_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out616;
                      bool _out617;
                      bool _out618;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out616, out _out617, out _out618, out _out619);
                      _1923_recursiveGen = _out616;
                      _1924_recOwned = _out617;
                      _1925_recErased = _out618;
                      _1926_recIdents = _out619;
                      Dafny.ISequence<Dafny.Rune> _1927_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out620;
                      _out620 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _1927_rhsType = _out620;
                      Dafny.ISequence<Dafny.Rune> _1928_uneraseFn;
                      _1928_uneraseFn = ((_1924_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1927_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1928_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1923_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1924_recOwned;
                      isErased = false;
                      readIdents = _1926_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out621;
                      bool _out622;
                      bool _out623;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out624;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _1922_b), _1922_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out621, out _out622, out _out623, out _out624);
                      s = _out621;
                      isOwned = _out622;
                      isErased = _out623;
                      readIdents = _out624;
                    }
                  }
                }
              } else if (_source120.is_Nullable) {
                DAST._IType _1929___mcc_h601 = _source120.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1930_recursiveGen;
                  bool _1931_recOwned;
                  bool _1932_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1933_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out625;
                  bool _out626;
                  bool _out627;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out628;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out625, out _out626, out _out627, out _out628);
                  _1930_recursiveGen = _out625;
                  _1931_recOwned = _out626;
                  _1932_recErased = _out627;
                  _1933_recIdents = _out628;
                  if (!(_1931_recOwned)) {
                    _1930_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1930_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1932_recErased;
                  readIdents = _1933_recIdents;
                }
              } else if (_source120.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1934___mcc_h603 = _source120.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1935_recursiveGen;
                  bool _1936_recOwned;
                  bool _1937_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1938_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out629;
                  bool _out630;
                  bool _out631;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out632;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out629, out _out630, out _out631, out _out632);
                  _1935_recursiveGen = _out629;
                  _1936_recOwned = _out630;
                  _1937_recErased = _out631;
                  _1938_recIdents = _out632;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1936_recOwned;
                  isErased = _1937_recErased;
                  readIdents = _1938_recIdents;
                }
              } else if (_source120.is_Array) {
                DAST._IType _1939___mcc_h605 = _source120.dtor_element;
                BigInteger _1940___mcc_h606 = _source120.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1941_recursiveGen;
                  bool _1942_recOwned;
                  bool _1943_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1944_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out633;
                  bool _out634;
                  bool _out635;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out636;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out633, out _out634, out _out635, out _out636);
                  _1941_recursiveGen = _out633;
                  _1942_recOwned = _out634;
                  _1943_recErased = _out635;
                  _1944_recIdents = _out636;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1941_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1942_recOwned;
                  isErased = _1943_recErased;
                  readIdents = _1944_recIdents;
                }
              } else if (_source120.is_Seq) {
                DAST._IType _1945___mcc_h609 = _source120.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1946_recursiveGen;
                  bool _1947_recOwned;
                  bool _1948_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1949_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out637;
                  bool _out638;
                  bool _out639;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out640;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out637, out _out638, out _out639, out _out640);
                  _1946_recursiveGen = _out637;
                  _1947_recOwned = _out638;
                  _1948_recErased = _out639;
                  _1949_recIdents = _out640;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1947_recOwned;
                  isErased = _1948_recErased;
                  readIdents = _1949_recIdents;
                }
              } else if (_source120.is_Set) {
                DAST._IType _1950___mcc_h611 = _source120.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1951_recursiveGen;
                  bool _1952_recOwned;
                  bool _1953_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1954_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out641;
                  bool _out642;
                  bool _out643;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out641, out _out642, out _out643, out _out644);
                  _1951_recursiveGen = _out641;
                  _1952_recOwned = _out642;
                  _1953_recErased = _out643;
                  _1954_recIdents = _out644;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1952_recOwned;
                  isErased = _1953_recErased;
                  readIdents = _1954_recIdents;
                }
              } else if (_source120.is_Multiset) {
                DAST._IType _1955___mcc_h613 = _source120.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1956_recursiveGen;
                  bool _1957_recOwned;
                  bool _1958_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1959_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out645;
                  bool _out646;
                  bool _out647;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out648;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out645, out _out646, out _out647, out _out648);
                  _1956_recursiveGen = _out645;
                  _1957_recOwned = _out646;
                  _1958_recErased = _out647;
                  _1959_recIdents = _out648;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1957_recOwned;
                  isErased = _1958_recErased;
                  readIdents = _1959_recIdents;
                }
              } else if (_source120.is_Map) {
                DAST._IType _1960___mcc_h615 = _source120.dtor_key;
                DAST._IType _1961___mcc_h616 = _source120.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1962_recursiveGen;
                  bool _1963_recOwned;
                  bool _1964_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1965_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out649;
                  bool _out650;
                  bool _out651;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out652;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out649, out _out650, out _out651, out _out652);
                  _1962_recursiveGen = _out649;
                  _1963_recOwned = _out650;
                  _1964_recErased = _out651;
                  _1965_recIdents = _out652;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1963_recOwned;
                  isErased = _1964_recErased;
                  readIdents = _1965_recIdents;
                }
              } else if (_source120.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1966___mcc_h619 = _source120.dtor_args;
                DAST._IType _1967___mcc_h620 = _source120.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1968_recursiveGen;
                  bool _1969_recOwned;
                  bool _1970_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1971_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out653;
                  bool _out654;
                  bool _out655;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out653, out _out654, out _out655, out _out656);
                  _1968_recursiveGen = _out653;
                  _1969_recOwned = _out654;
                  _1970_recErased = _out655;
                  _1971_recIdents = _out656;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1968_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1969_recOwned;
                  isErased = _1970_recErased;
                  readIdents = _1971_recIdents;
                }
              } else if (_source120.is_Primitive) {
                DAST._IPrimitive _1972___mcc_h623 = _source120.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1973_recursiveGen;
                  bool _1974_recOwned;
                  bool _1975_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1976_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out657;
                  bool _out658;
                  bool _out659;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out657, out _out658, out _out659, out _out660);
                  _1973_recursiveGen = _out657;
                  _1974_recOwned = _out658;
                  _1975_recErased = _out659;
                  _1976_recIdents = _out660;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1973_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1974_recOwned;
                  isErased = _1975_recErased;
                  readIdents = _1976_recIdents;
                }
              } else if (_source120.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1977___mcc_h625 = _source120.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1978_recursiveGen;
                  bool _1979_recOwned;
                  bool _1980_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1981_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out661;
                  bool _out662;
                  bool _out663;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out664;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out661, out _out662, out _out663, out _out664);
                  _1978_recursiveGen = _out661;
                  _1979_recOwned = _out662;
                  _1980_recErased = _out663;
                  _1981_recIdents = _out664;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1979_recOwned;
                  isErased = _1980_recErased;
                  readIdents = _1981_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1982___mcc_h627 = _source120.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1983_recursiveGen;
                  bool _1984_recOwned;
                  bool _1985_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1986_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out665;
                  bool _out666;
                  bool _out667;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out668;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out665, out _out666, out _out667, out _out668);
                  _1983_recursiveGen = _out665;
                  _1984_recOwned = _out666;
                  _1985_recErased = _out667;
                  _1986_recIdents = _out668;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1983_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1984_recOwned;
                  isErased = _1985_recErased;
                  readIdents = _1986_recIdents;
                }
              }
            } else if (_source108.is_Seq) {
              DAST._IType _1987___mcc_h629 = _source108.dtor_element;
              DAST._IType _source122 = _1481___mcc_h306;
              if (_source122.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1988___mcc_h633 = _source122.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1989___mcc_h634 = _source122.dtor_typeArgs;
                DAST._IResolvedType _1990___mcc_h635 = _source122.dtor_resolved;
                DAST._IResolvedType _source123 = _1990___mcc_h635;
                if (_source123.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1991___mcc_h639 = _source123.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1992_recursiveGen;
                    bool _1993_recOwned;
                    bool _1994_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1995_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out669;
                    bool _out670;
                    bool _out671;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out669, out _out670, out _out671, out _out672);
                    _1992_recursiveGen = _out669;
                    _1993_recOwned = _out670;
                    _1994_recErased = _out671;
                    _1995_recIdents = _out672;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1992_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1993_recOwned;
                    isErased = _1994_recErased;
                    readIdents = _1995_recIdents;
                  }
                } else if (_source123.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1996___mcc_h641 = _source123.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1997_recursiveGen;
                    bool _1998_recOwned;
                    bool _1999_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2000_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out673;
                    bool _out674;
                    bool _out675;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675, out _out676);
                    _1997_recursiveGen = _out673;
                    _1998_recOwned = _out674;
                    _1999_recErased = _out675;
                    _2000_recIdents = _out676;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1997_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1998_recOwned;
                    isErased = _1999_recErased;
                    readIdents = _2000_recIdents;
                  }
                } else {
                  DAST._IType _2001___mcc_h643 = _source123.dtor_Newtype_a0;
                  DAST._IType _2002_b = _2001___mcc_h643;
                  {
                    if (object.Equals(_1474_fromTpe, _2002_b)) {
                      Dafny.ISequence<Dafny.Rune> _2003_recursiveGen;
                      bool _2004_recOwned;
                      bool _2005_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2006_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out677;
                      bool _out678;
                      bool _out679;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out677, out _out678, out _out679, out _out680);
                      _2003_recursiveGen = _out677;
                      _2004_recOwned = _out678;
                      _2005_recErased = _out679;
                      _2006_recIdents = _out680;
                      Dafny.ISequence<Dafny.Rune> _2007_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out681;
                      _out681 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _2007_rhsType = _out681;
                      Dafny.ISequence<Dafny.Rune> _2008_uneraseFn;
                      _2008_uneraseFn = ((_2004_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2007_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2008_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2003_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2004_recOwned;
                      isErased = false;
                      readIdents = _2006_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out682;
                      bool _out683;
                      bool _out684;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out685;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2002_b), _2002_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out682, out _out683, out _out684, out _out685);
                      s = _out682;
                      isOwned = _out683;
                      isErased = _out684;
                      readIdents = _out685;
                    }
                  }
                }
              } else if (_source122.is_Nullable) {
                DAST._IType _2009___mcc_h645 = _source122.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2010_recursiveGen;
                  bool _2011_recOwned;
                  bool _2012_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2013_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out686;
                  bool _out687;
                  bool _out688;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out689;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out686, out _out687, out _out688, out _out689);
                  _2010_recursiveGen = _out686;
                  _2011_recOwned = _out687;
                  _2012_recErased = _out688;
                  _2013_recIdents = _out689;
                  if (!(_2011_recOwned)) {
                    _2010_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2010_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2010_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2012_recErased;
                  readIdents = _2013_recIdents;
                }
              } else if (_source122.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2014___mcc_h647 = _source122.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2015_recursiveGen;
                  bool _2016_recOwned;
                  bool _2017_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2018_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out690;
                  bool _out691;
                  bool _out692;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out693;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out690, out _out691, out _out692, out _out693);
                  _2015_recursiveGen = _out690;
                  _2016_recOwned = _out691;
                  _2017_recErased = _out692;
                  _2018_recIdents = _out693;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2015_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2016_recOwned;
                  isErased = _2017_recErased;
                  readIdents = _2018_recIdents;
                }
              } else if (_source122.is_Array) {
                DAST._IType _2019___mcc_h649 = _source122.dtor_element;
                BigInteger _2020___mcc_h650 = _source122.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2021_recursiveGen;
                  bool _2022_recOwned;
                  bool _2023_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2024_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out694;
                  bool _out695;
                  bool _out696;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out697;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out694, out _out695, out _out696, out _out697);
                  _2021_recursiveGen = _out694;
                  _2022_recOwned = _out695;
                  _2023_recErased = _out696;
                  _2024_recIdents = _out697;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2021_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2022_recOwned;
                  isErased = _2023_recErased;
                  readIdents = _2024_recIdents;
                }
              } else if (_source122.is_Seq) {
                DAST._IType _2025___mcc_h653 = _source122.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2026_recursiveGen;
                  bool _2027_recOwned;
                  bool _2028_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2029_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out698;
                  bool _out699;
                  bool _out700;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out698, out _out699, out _out700, out _out701);
                  _2026_recursiveGen = _out698;
                  _2027_recOwned = _out699;
                  _2028_recErased = _out700;
                  _2029_recIdents = _out701;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2026_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2027_recOwned;
                  isErased = _2028_recErased;
                  readIdents = _2029_recIdents;
                }
              } else if (_source122.is_Set) {
                DAST._IType _2030___mcc_h655 = _source122.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2031_recursiveGen;
                  bool _2032_recOwned;
                  bool _2033_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2034_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out702;
                  bool _out703;
                  bool _out704;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out705;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out702, out _out703, out _out704, out _out705);
                  _2031_recursiveGen = _out702;
                  _2032_recOwned = _out703;
                  _2033_recErased = _out704;
                  _2034_recIdents = _out705;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2031_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2032_recOwned;
                  isErased = _2033_recErased;
                  readIdents = _2034_recIdents;
                }
              } else if (_source122.is_Multiset) {
                DAST._IType _2035___mcc_h657 = _source122.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2036_recursiveGen;
                  bool _2037_recOwned;
                  bool _2038_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2039_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out706;
                  bool _out707;
                  bool _out708;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out706, out _out707, out _out708, out _out709);
                  _2036_recursiveGen = _out706;
                  _2037_recOwned = _out707;
                  _2038_recErased = _out708;
                  _2039_recIdents = _out709;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2036_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2037_recOwned;
                  isErased = _2038_recErased;
                  readIdents = _2039_recIdents;
                }
              } else if (_source122.is_Map) {
                DAST._IType _2040___mcc_h659 = _source122.dtor_key;
                DAST._IType _2041___mcc_h660 = _source122.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2042_recursiveGen;
                  bool _2043_recOwned;
                  bool _2044_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2045_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out710;
                  bool _out711;
                  bool _out712;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out713;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out710, out _out711, out _out712, out _out713);
                  _2042_recursiveGen = _out710;
                  _2043_recOwned = _out711;
                  _2044_recErased = _out712;
                  _2045_recIdents = _out713;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2042_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2043_recOwned;
                  isErased = _2044_recErased;
                  readIdents = _2045_recIdents;
                }
              } else if (_source122.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2046___mcc_h663 = _source122.dtor_args;
                DAST._IType _2047___mcc_h664 = _source122.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2048_recursiveGen;
                  bool _2049_recOwned;
                  bool _2050_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2051_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out714;
                  bool _out715;
                  bool _out716;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out717;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out714, out _out715, out _out716, out _out717);
                  _2048_recursiveGen = _out714;
                  _2049_recOwned = _out715;
                  _2050_recErased = _out716;
                  _2051_recIdents = _out717;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2048_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2049_recOwned;
                  isErased = _2050_recErased;
                  readIdents = _2051_recIdents;
                }
              } else if (_source122.is_Primitive) {
                DAST._IPrimitive _2052___mcc_h667 = _source122.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2053_recursiveGen;
                  bool _2054_recOwned;
                  bool _2055_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2056_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out718;
                  bool _out719;
                  bool _out720;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out718, out _out719, out _out720, out _out721);
                  _2053_recursiveGen = _out718;
                  _2054_recOwned = _out719;
                  _2055_recErased = _out720;
                  _2056_recIdents = _out721;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2053_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2054_recOwned;
                  isErased = _2055_recErased;
                  readIdents = _2056_recIdents;
                }
              } else if (_source122.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2057___mcc_h669 = _source122.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2058_recursiveGen;
                  bool _2059_recOwned;
                  bool _2060_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2061_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out722;
                  bool _out723;
                  bool _out724;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out725;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out722, out _out723, out _out724, out _out725);
                  _2058_recursiveGen = _out722;
                  _2059_recOwned = _out723;
                  _2060_recErased = _out724;
                  _2061_recIdents = _out725;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2058_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2059_recOwned;
                  isErased = _2060_recErased;
                  readIdents = _2061_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2062___mcc_h671 = _source122.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2063_recursiveGen;
                  bool _2064_recOwned;
                  bool _2065_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2066_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out726;
                  bool _out727;
                  bool _out728;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out729;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out726, out _out727, out _out728, out _out729);
                  _2063_recursiveGen = _out726;
                  _2064_recOwned = _out727;
                  _2065_recErased = _out728;
                  _2066_recIdents = _out729;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2063_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2064_recOwned;
                  isErased = _2065_recErased;
                  readIdents = _2066_recIdents;
                }
              }
            } else if (_source108.is_Set) {
              DAST._IType _2067___mcc_h673 = _source108.dtor_element;
              DAST._IType _source124 = _1481___mcc_h306;
              if (_source124.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2068___mcc_h677 = _source124.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2069___mcc_h678 = _source124.dtor_typeArgs;
                DAST._IResolvedType _2070___mcc_h679 = _source124.dtor_resolved;
                DAST._IResolvedType _source125 = _2070___mcc_h679;
                if (_source125.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2071___mcc_h683 = _source125.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2072_recursiveGen;
                    bool _2073_recOwned;
                    bool _2074_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2075_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out730;
                    bool _out731;
                    bool _out732;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out730, out _out731, out _out732, out _out733);
                    _2072_recursiveGen = _out730;
                    _2073_recOwned = _out731;
                    _2074_recErased = _out732;
                    _2075_recIdents = _out733;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2072_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2073_recOwned;
                    isErased = _2074_recErased;
                    readIdents = _2075_recIdents;
                  }
                } else if (_source125.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2076___mcc_h685 = _source125.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2077_recursiveGen;
                    bool _2078_recOwned;
                    bool _2079_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2080_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out734;
                    bool _out735;
                    bool _out736;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out737;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736, out _out737);
                    _2077_recursiveGen = _out734;
                    _2078_recOwned = _out735;
                    _2079_recErased = _out736;
                    _2080_recIdents = _out737;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2077_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2078_recOwned;
                    isErased = _2079_recErased;
                    readIdents = _2080_recIdents;
                  }
                } else {
                  DAST._IType _2081___mcc_h687 = _source125.dtor_Newtype_a0;
                  DAST._IType _2082_b = _2081___mcc_h687;
                  {
                    if (object.Equals(_1474_fromTpe, _2082_b)) {
                      Dafny.ISequence<Dafny.Rune> _2083_recursiveGen;
                      bool _2084_recOwned;
                      bool _2085_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2086_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out738;
                      bool _out739;
                      bool _out740;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out738, out _out739, out _out740, out _out741);
                      _2083_recursiveGen = _out738;
                      _2084_recOwned = _out739;
                      _2085_recErased = _out740;
                      _2086_recIdents = _out741;
                      Dafny.ISequence<Dafny.Rune> _2087_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out742;
                      _out742 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _2087_rhsType = _out742;
                      Dafny.ISequence<Dafny.Rune> _2088_uneraseFn;
                      _2088_uneraseFn = ((_2084_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2087_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2088_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2083_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2084_recOwned;
                      isErased = false;
                      readIdents = _2086_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out743;
                      bool _out744;
                      bool _out745;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out746;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2082_b), _2082_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out743, out _out744, out _out745, out _out746);
                      s = _out743;
                      isOwned = _out744;
                      isErased = _out745;
                      readIdents = _out746;
                    }
                  }
                }
              } else if (_source124.is_Nullable) {
                DAST._IType _2089___mcc_h689 = _source124.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2090_recursiveGen;
                  bool _2091_recOwned;
                  bool _2092_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2093_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out747;
                  bool _out748;
                  bool _out749;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out750;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out747, out _out748, out _out749, out _out750);
                  _2090_recursiveGen = _out747;
                  _2091_recOwned = _out748;
                  _2092_recErased = _out749;
                  _2093_recIdents = _out750;
                  if (!(_2091_recOwned)) {
                    _2090_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2090_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2090_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2092_recErased;
                  readIdents = _2093_recIdents;
                }
              } else if (_source124.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2094___mcc_h691 = _source124.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2095_recursiveGen;
                  bool _2096_recOwned;
                  bool _2097_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2098_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out751;
                  bool _out752;
                  bool _out753;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out754;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out751, out _out752, out _out753, out _out754);
                  _2095_recursiveGen = _out751;
                  _2096_recOwned = _out752;
                  _2097_recErased = _out753;
                  _2098_recIdents = _out754;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2095_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2096_recOwned;
                  isErased = _2097_recErased;
                  readIdents = _2098_recIdents;
                }
              } else if (_source124.is_Array) {
                DAST._IType _2099___mcc_h693 = _source124.dtor_element;
                BigInteger _2100___mcc_h694 = _source124.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2101_recursiveGen;
                  bool _2102_recOwned;
                  bool _2103_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2104_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out755;
                  bool _out756;
                  bool _out757;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out758;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out755, out _out756, out _out757, out _out758);
                  _2101_recursiveGen = _out755;
                  _2102_recOwned = _out756;
                  _2103_recErased = _out757;
                  _2104_recIdents = _out758;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2101_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2102_recOwned;
                  isErased = _2103_recErased;
                  readIdents = _2104_recIdents;
                }
              } else if (_source124.is_Seq) {
                DAST._IType _2105___mcc_h697 = _source124.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2106_recursiveGen;
                  bool _2107_recOwned;
                  bool _2108_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2109_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out759;
                  bool _out760;
                  bool _out761;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out762;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out759, out _out760, out _out761, out _out762);
                  _2106_recursiveGen = _out759;
                  _2107_recOwned = _out760;
                  _2108_recErased = _out761;
                  _2109_recIdents = _out762;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2106_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2107_recOwned;
                  isErased = _2108_recErased;
                  readIdents = _2109_recIdents;
                }
              } else if (_source124.is_Set) {
                DAST._IType _2110___mcc_h699 = _source124.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2111_recursiveGen;
                  bool _2112_recOwned;
                  bool _2113_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2114_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out763;
                  bool _out764;
                  bool _out765;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out763, out _out764, out _out765, out _out766);
                  _2111_recursiveGen = _out763;
                  _2112_recOwned = _out764;
                  _2113_recErased = _out765;
                  _2114_recIdents = _out766;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2111_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2112_recOwned;
                  isErased = _2113_recErased;
                  readIdents = _2114_recIdents;
                }
              } else if (_source124.is_Multiset) {
                DAST._IType _2115___mcc_h701 = _source124.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2116_recursiveGen;
                  bool _2117_recOwned;
                  bool _2118_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2119_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out767;
                  bool _out768;
                  bool _out769;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out767, out _out768, out _out769, out _out770);
                  _2116_recursiveGen = _out767;
                  _2117_recOwned = _out768;
                  _2118_recErased = _out769;
                  _2119_recIdents = _out770;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2116_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2117_recOwned;
                  isErased = _2118_recErased;
                  readIdents = _2119_recIdents;
                }
              } else if (_source124.is_Map) {
                DAST._IType _2120___mcc_h703 = _source124.dtor_key;
                DAST._IType _2121___mcc_h704 = _source124.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2122_recursiveGen;
                  bool _2123_recOwned;
                  bool _2124_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2125_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out771;
                  bool _out772;
                  bool _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out771, out _out772, out _out773, out _out774);
                  _2122_recursiveGen = _out771;
                  _2123_recOwned = _out772;
                  _2124_recErased = _out773;
                  _2125_recIdents = _out774;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2122_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2123_recOwned;
                  isErased = _2124_recErased;
                  readIdents = _2125_recIdents;
                }
              } else if (_source124.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2126___mcc_h707 = _source124.dtor_args;
                DAST._IType _2127___mcc_h708 = _source124.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2128_recursiveGen;
                  bool _2129_recOwned;
                  bool _2130_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2131_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out775;
                  bool _out776;
                  bool _out777;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out778;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out775, out _out776, out _out777, out _out778);
                  _2128_recursiveGen = _out775;
                  _2129_recOwned = _out776;
                  _2130_recErased = _out777;
                  _2131_recIdents = _out778;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2128_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2129_recOwned;
                  isErased = _2130_recErased;
                  readIdents = _2131_recIdents;
                }
              } else if (_source124.is_Primitive) {
                DAST._IPrimitive _2132___mcc_h711 = _source124.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2133_recursiveGen;
                  bool _2134_recOwned;
                  bool _2135_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2136_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out779;
                  bool _out780;
                  bool _out781;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out779, out _out780, out _out781, out _out782);
                  _2133_recursiveGen = _out779;
                  _2134_recOwned = _out780;
                  _2135_recErased = _out781;
                  _2136_recIdents = _out782;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2133_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2134_recOwned;
                  isErased = _2135_recErased;
                  readIdents = _2136_recIdents;
                }
              } else if (_source124.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2137___mcc_h713 = _source124.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2138_recursiveGen;
                  bool _2139_recOwned;
                  bool _2140_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2141_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out783;
                  bool _out784;
                  bool _out785;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out786;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out783, out _out784, out _out785, out _out786);
                  _2138_recursiveGen = _out783;
                  _2139_recOwned = _out784;
                  _2140_recErased = _out785;
                  _2141_recIdents = _out786;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2138_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2139_recOwned;
                  isErased = _2140_recErased;
                  readIdents = _2141_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2142___mcc_h715 = _source124.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2143_recursiveGen;
                  bool _2144_recOwned;
                  bool _2145_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2146_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out787;
                  bool _out788;
                  bool _out789;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out787, out _out788, out _out789, out _out790);
                  _2143_recursiveGen = _out787;
                  _2144_recOwned = _out788;
                  _2145_recErased = _out789;
                  _2146_recIdents = _out790;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2143_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2144_recOwned;
                  isErased = _2145_recErased;
                  readIdents = _2146_recIdents;
                }
              }
            } else if (_source108.is_Multiset) {
              DAST._IType _2147___mcc_h717 = _source108.dtor_element;
              DAST._IType _source126 = _1481___mcc_h306;
              if (_source126.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2148___mcc_h721 = _source126.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2149___mcc_h722 = _source126.dtor_typeArgs;
                DAST._IResolvedType _2150___mcc_h723 = _source126.dtor_resolved;
                DAST._IResolvedType _source127 = _2150___mcc_h723;
                if (_source127.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2151___mcc_h727 = _source127.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2152_recursiveGen;
                    bool _2153_recOwned;
                    bool _2154_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2155_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out791;
                    bool _out792;
                    bool _out793;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793, out _out794);
                    _2152_recursiveGen = _out791;
                    _2153_recOwned = _out792;
                    _2154_recErased = _out793;
                    _2155_recIdents = _out794;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2152_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2153_recOwned;
                    isErased = _2154_recErased;
                    readIdents = _2155_recIdents;
                  }
                } else if (_source127.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2156___mcc_h729 = _source127.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2157_recursiveGen;
                    bool _2158_recOwned;
                    bool _2159_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2160_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out795;
                    bool _out796;
                    bool _out797;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out798;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out795, out _out796, out _out797, out _out798);
                    _2157_recursiveGen = _out795;
                    _2158_recOwned = _out796;
                    _2159_recErased = _out797;
                    _2160_recIdents = _out798;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2157_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2158_recOwned;
                    isErased = _2159_recErased;
                    readIdents = _2160_recIdents;
                  }
                } else {
                  DAST._IType _2161___mcc_h731 = _source127.dtor_Newtype_a0;
                  DAST._IType _2162_b = _2161___mcc_h731;
                  {
                    if (object.Equals(_1474_fromTpe, _2162_b)) {
                      Dafny.ISequence<Dafny.Rune> _2163_recursiveGen;
                      bool _2164_recOwned;
                      bool _2165_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2166_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out799;
                      bool _out800;
                      bool _out801;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out799, out _out800, out _out801, out _out802);
                      _2163_recursiveGen = _out799;
                      _2164_recOwned = _out800;
                      _2165_recErased = _out801;
                      _2166_recIdents = _out802;
                      Dafny.ISequence<Dafny.Rune> _2167_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out803;
                      _out803 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _2167_rhsType = _out803;
                      Dafny.ISequence<Dafny.Rune> _2168_uneraseFn;
                      _2168_uneraseFn = ((_2164_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2167_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2168_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2163_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2164_recOwned;
                      isErased = false;
                      readIdents = _2166_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out804;
                      bool _out805;
                      bool _out806;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out807;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2162_b), _2162_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out804, out _out805, out _out806, out _out807);
                      s = _out804;
                      isOwned = _out805;
                      isErased = _out806;
                      readIdents = _out807;
                    }
                  }
                }
              } else if (_source126.is_Nullable) {
                DAST._IType _2169___mcc_h733 = _source126.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2170_recursiveGen;
                  bool _2171_recOwned;
                  bool _2172_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2173_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out808;
                  bool _out809;
                  bool _out810;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out811;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out808, out _out809, out _out810, out _out811);
                  _2170_recursiveGen = _out808;
                  _2171_recOwned = _out809;
                  _2172_recErased = _out810;
                  _2173_recIdents = _out811;
                  if (!(_2171_recOwned)) {
                    _2170_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2170_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2170_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2172_recErased;
                  readIdents = _2173_recIdents;
                }
              } else if (_source126.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2174___mcc_h735 = _source126.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2175_recursiveGen;
                  bool _2176_recOwned;
                  bool _2177_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2178_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out812;
                  bool _out813;
                  bool _out814;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out815;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out812, out _out813, out _out814, out _out815);
                  _2175_recursiveGen = _out812;
                  _2176_recOwned = _out813;
                  _2177_recErased = _out814;
                  _2178_recIdents = _out815;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2175_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2176_recOwned;
                  isErased = _2177_recErased;
                  readIdents = _2178_recIdents;
                }
              } else if (_source126.is_Array) {
                DAST._IType _2179___mcc_h737 = _source126.dtor_element;
                BigInteger _2180___mcc_h738 = _source126.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2181_recursiveGen;
                  bool _2182_recOwned;
                  bool _2183_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2184_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out816;
                  bool _out817;
                  bool _out818;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out819;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out816, out _out817, out _out818, out _out819);
                  _2181_recursiveGen = _out816;
                  _2182_recOwned = _out817;
                  _2183_recErased = _out818;
                  _2184_recIdents = _out819;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2181_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2182_recOwned;
                  isErased = _2183_recErased;
                  readIdents = _2184_recIdents;
                }
              } else if (_source126.is_Seq) {
                DAST._IType _2185___mcc_h741 = _source126.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2186_recursiveGen;
                  bool _2187_recOwned;
                  bool _2188_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2189_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out820;
                  bool _out821;
                  bool _out822;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out823;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out820, out _out821, out _out822, out _out823);
                  _2186_recursiveGen = _out820;
                  _2187_recOwned = _out821;
                  _2188_recErased = _out822;
                  _2189_recIdents = _out823;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2186_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2187_recOwned;
                  isErased = _2188_recErased;
                  readIdents = _2189_recIdents;
                }
              } else if (_source126.is_Set) {
                DAST._IType _2190___mcc_h743 = _source126.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2191_recursiveGen;
                  bool _2192_recOwned;
                  bool _2193_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2194_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out824;
                  bool _out825;
                  bool _out826;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out824, out _out825, out _out826, out _out827);
                  _2191_recursiveGen = _out824;
                  _2192_recOwned = _out825;
                  _2193_recErased = _out826;
                  _2194_recIdents = _out827;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2191_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2192_recOwned;
                  isErased = _2193_recErased;
                  readIdents = _2194_recIdents;
                }
              } else if (_source126.is_Multiset) {
                DAST._IType _2195___mcc_h745 = _source126.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2196_recursiveGen;
                  bool _2197_recOwned;
                  bool _2198_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2199_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out828;
                  bool _out829;
                  bool _out830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out831;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out828, out _out829, out _out830, out _out831);
                  _2196_recursiveGen = _out828;
                  _2197_recOwned = _out829;
                  _2198_recErased = _out830;
                  _2199_recIdents = _out831;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2196_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2197_recOwned;
                  isErased = _2198_recErased;
                  readIdents = _2199_recIdents;
                }
              } else if (_source126.is_Map) {
                DAST._IType _2200___mcc_h747 = _source126.dtor_key;
                DAST._IType _2201___mcc_h748 = _source126.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2202_recursiveGen;
                  bool _2203_recOwned;
                  bool _2204_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2205_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out832;
                  bool _out833;
                  bool _out834;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out835;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out832, out _out833, out _out834, out _out835);
                  _2202_recursiveGen = _out832;
                  _2203_recOwned = _out833;
                  _2204_recErased = _out834;
                  _2205_recIdents = _out835;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2202_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2203_recOwned;
                  isErased = _2204_recErased;
                  readIdents = _2205_recIdents;
                }
              } else if (_source126.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2206___mcc_h751 = _source126.dtor_args;
                DAST._IType _2207___mcc_h752 = _source126.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2208_recursiveGen;
                  bool _2209_recOwned;
                  bool _2210_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2211_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out836;
                  bool _out837;
                  bool _out838;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out836, out _out837, out _out838, out _out839);
                  _2208_recursiveGen = _out836;
                  _2209_recOwned = _out837;
                  _2210_recErased = _out838;
                  _2211_recIdents = _out839;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2208_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2209_recOwned;
                  isErased = _2210_recErased;
                  readIdents = _2211_recIdents;
                }
              } else if (_source126.is_Primitive) {
                DAST._IPrimitive _2212___mcc_h755 = _source126.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2213_recursiveGen;
                  bool _2214_recOwned;
                  bool _2215_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2216_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out840;
                  bool _out841;
                  bool _out842;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out843;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out840, out _out841, out _out842, out _out843);
                  _2213_recursiveGen = _out840;
                  _2214_recOwned = _out841;
                  _2215_recErased = _out842;
                  _2216_recIdents = _out843;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2213_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2214_recOwned;
                  isErased = _2215_recErased;
                  readIdents = _2216_recIdents;
                }
              } else if (_source126.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2217___mcc_h757 = _source126.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2218_recursiveGen;
                  bool _2219_recOwned;
                  bool _2220_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2221_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out844;
                  bool _out845;
                  bool _out846;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out844, out _out845, out _out846, out _out847);
                  _2218_recursiveGen = _out844;
                  _2219_recOwned = _out845;
                  _2220_recErased = _out846;
                  _2221_recIdents = _out847;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2218_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2219_recOwned;
                  isErased = _2220_recErased;
                  readIdents = _2221_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2222___mcc_h759 = _source126.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2223_recursiveGen;
                  bool _2224_recOwned;
                  bool _2225_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2226_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out848;
                  bool _out849;
                  bool _out850;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out848, out _out849, out _out850, out _out851);
                  _2223_recursiveGen = _out848;
                  _2224_recOwned = _out849;
                  _2225_recErased = _out850;
                  _2226_recIdents = _out851;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2223_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2224_recOwned;
                  isErased = _2225_recErased;
                  readIdents = _2226_recIdents;
                }
              }
            } else if (_source108.is_Map) {
              DAST._IType _2227___mcc_h761 = _source108.dtor_key;
              DAST._IType _2228___mcc_h762 = _source108.dtor_value;
              DAST._IType _source128 = _1481___mcc_h306;
              if (_source128.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2229___mcc_h769 = _source128.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2230___mcc_h770 = _source128.dtor_typeArgs;
                DAST._IResolvedType _2231___mcc_h771 = _source128.dtor_resolved;
                DAST._IResolvedType _source129 = _2231___mcc_h771;
                if (_source129.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2232___mcc_h775 = _source129.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2233_recursiveGen;
                    bool _2234_recOwned;
                    bool _2235_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2236_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out852;
                    bool _out853;
                    bool _out854;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out855;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854, out _out855);
                    _2233_recursiveGen = _out852;
                    _2234_recOwned = _out853;
                    _2235_recErased = _out854;
                    _2236_recIdents = _out855;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2233_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2234_recOwned;
                    isErased = _2235_recErased;
                    readIdents = _2236_recIdents;
                  }
                } else if (_source129.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2237___mcc_h777 = _source129.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2238_recursiveGen;
                    bool _2239_recOwned;
                    bool _2240_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2241_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out856;
                    bool _out857;
                    bool _out858;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out856, out _out857, out _out858, out _out859);
                    _2238_recursiveGen = _out856;
                    _2239_recOwned = _out857;
                    _2240_recErased = _out858;
                    _2241_recIdents = _out859;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2238_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2239_recOwned;
                    isErased = _2240_recErased;
                    readIdents = _2241_recIdents;
                  }
                } else {
                  DAST._IType _2242___mcc_h779 = _source129.dtor_Newtype_a0;
                  DAST._IType _2243_b = _2242___mcc_h779;
                  {
                    if (object.Equals(_1474_fromTpe, _2243_b)) {
                      Dafny.ISequence<Dafny.Rune> _2244_recursiveGen;
                      bool _2245_recOwned;
                      bool _2246_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2247_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out860;
                      bool _out861;
                      bool _out862;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out860, out _out861, out _out862, out _out863);
                      _2244_recursiveGen = _out860;
                      _2245_recOwned = _out861;
                      _2246_recErased = _out862;
                      _2247_recIdents = _out863;
                      Dafny.ISequence<Dafny.Rune> _2248_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out864;
                      _out864 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _2248_rhsType = _out864;
                      Dafny.ISequence<Dafny.Rune> _2249_uneraseFn;
                      _2249_uneraseFn = ((_2245_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2248_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2249_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2244_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2245_recOwned;
                      isErased = false;
                      readIdents = _2247_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out865;
                      bool _out866;
                      bool _out867;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2243_b), _2243_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out865, out _out866, out _out867, out _out868);
                      s = _out865;
                      isOwned = _out866;
                      isErased = _out867;
                      readIdents = _out868;
                    }
                  }
                }
              } else if (_source128.is_Nullable) {
                DAST._IType _2250___mcc_h781 = _source128.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2251_recursiveGen;
                  bool _2252_recOwned;
                  bool _2253_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2254_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out869;
                  bool _out870;
                  bool _out871;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out872;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out869, out _out870, out _out871, out _out872);
                  _2251_recursiveGen = _out869;
                  _2252_recOwned = _out870;
                  _2253_recErased = _out871;
                  _2254_recIdents = _out872;
                  if (!(_2252_recOwned)) {
                    _2251_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2251_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2251_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2253_recErased;
                  readIdents = _2254_recIdents;
                }
              } else if (_source128.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2255___mcc_h783 = _source128.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2256_recursiveGen;
                  bool _2257_recOwned;
                  bool _2258_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2259_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out873;
                  bool _out874;
                  bool _out875;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out876;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out873, out _out874, out _out875, out _out876);
                  _2256_recursiveGen = _out873;
                  _2257_recOwned = _out874;
                  _2258_recErased = _out875;
                  _2259_recIdents = _out876;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2256_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2257_recOwned;
                  isErased = _2258_recErased;
                  readIdents = _2259_recIdents;
                }
              } else if (_source128.is_Array) {
                DAST._IType _2260___mcc_h785 = _source128.dtor_element;
                BigInteger _2261___mcc_h786 = _source128.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2262_recursiveGen;
                  bool _2263_recOwned;
                  bool _2264_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2265_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out877;
                  bool _out878;
                  bool _out879;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out880;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out877, out _out878, out _out879, out _out880);
                  _2262_recursiveGen = _out877;
                  _2263_recOwned = _out878;
                  _2264_recErased = _out879;
                  _2265_recIdents = _out880;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2262_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2263_recOwned;
                  isErased = _2264_recErased;
                  readIdents = _2265_recIdents;
                }
              } else if (_source128.is_Seq) {
                DAST._IType _2266___mcc_h789 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2267_recursiveGen;
                  bool _2268_recOwned;
                  bool _2269_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2270_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out881;
                  bool _out882;
                  bool _out883;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out884;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out881, out _out882, out _out883, out _out884);
                  _2267_recursiveGen = _out881;
                  _2268_recOwned = _out882;
                  _2269_recErased = _out883;
                  _2270_recIdents = _out884;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2268_recOwned;
                  isErased = _2269_recErased;
                  readIdents = _2270_recIdents;
                }
              } else if (_source128.is_Set) {
                DAST._IType _2271___mcc_h791 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2272_recursiveGen;
                  bool _2273_recOwned;
                  bool _2274_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2275_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out885;
                  bool _out886;
                  bool _out887;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out885, out _out886, out _out887, out _out888);
                  _2272_recursiveGen = _out885;
                  _2273_recOwned = _out886;
                  _2274_recErased = _out887;
                  _2275_recIdents = _out888;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2272_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2273_recOwned;
                  isErased = _2274_recErased;
                  readIdents = _2275_recIdents;
                }
              } else if (_source128.is_Multiset) {
                DAST._IType _2276___mcc_h793 = _source128.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2277_recursiveGen;
                  bool _2278_recOwned;
                  bool _2279_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2280_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out889;
                  bool _out890;
                  bool _out891;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out889, out _out890, out _out891, out _out892);
                  _2277_recursiveGen = _out889;
                  _2278_recOwned = _out890;
                  _2279_recErased = _out891;
                  _2280_recIdents = _out892;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2278_recOwned;
                  isErased = _2279_recErased;
                  readIdents = _2280_recIdents;
                }
              } else if (_source128.is_Map) {
                DAST._IType _2281___mcc_h795 = _source128.dtor_key;
                DAST._IType _2282___mcc_h796 = _source128.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2283_recursiveGen;
                  bool _2284_recOwned;
                  bool _2285_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2286_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out893;
                  bool _out894;
                  bool _out895;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out896;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out893, out _out894, out _out895, out _out896);
                  _2283_recursiveGen = _out893;
                  _2284_recOwned = _out894;
                  _2285_recErased = _out895;
                  _2286_recIdents = _out896;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2283_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2284_recOwned;
                  isErased = _2285_recErased;
                  readIdents = _2286_recIdents;
                }
              } else if (_source128.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2287___mcc_h799 = _source128.dtor_args;
                DAST._IType _2288___mcc_h800 = _source128.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2289_recursiveGen;
                  bool _2290_recOwned;
                  bool _2291_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2292_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out897;
                  bool _out898;
                  bool _out899;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out900;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out897, out _out898, out _out899, out _out900);
                  _2289_recursiveGen = _out897;
                  _2290_recOwned = _out898;
                  _2291_recErased = _out899;
                  _2292_recIdents = _out900;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2289_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2290_recOwned;
                  isErased = _2291_recErased;
                  readIdents = _2292_recIdents;
                }
              } else if (_source128.is_Primitive) {
                DAST._IPrimitive _2293___mcc_h803 = _source128.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2294_recursiveGen;
                  bool _2295_recOwned;
                  bool _2296_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2297_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out901;
                  bool _out902;
                  bool _out903;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out901, out _out902, out _out903, out _out904);
                  _2294_recursiveGen = _out901;
                  _2295_recOwned = _out902;
                  _2296_recErased = _out903;
                  _2297_recIdents = _out904;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2294_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2295_recOwned;
                  isErased = _2296_recErased;
                  readIdents = _2297_recIdents;
                }
              } else if (_source128.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2298___mcc_h805 = _source128.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2299_recursiveGen;
                  bool _2300_recOwned;
                  bool _2301_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2302_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out905;
                  bool _out906;
                  bool _out907;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out905, out _out906, out _out907, out _out908);
                  _2299_recursiveGen = _out905;
                  _2300_recOwned = _out906;
                  _2301_recErased = _out907;
                  _2302_recIdents = _out908;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2299_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2300_recOwned;
                  isErased = _2301_recErased;
                  readIdents = _2302_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2303___mcc_h807 = _source128.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2304_recursiveGen;
                  bool _2305_recOwned;
                  bool _2306_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2307_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out909;
                  bool _out910;
                  bool _out911;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out912;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out909, out _out910, out _out911, out _out912);
                  _2304_recursiveGen = _out909;
                  _2305_recOwned = _out910;
                  _2306_recErased = _out911;
                  _2307_recIdents = _out912;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2304_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2305_recOwned;
                  isErased = _2306_recErased;
                  readIdents = _2307_recIdents;
                }
              }
            } else if (_source108.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2308___mcc_h809 = _source108.dtor_args;
              DAST._IType _2309___mcc_h810 = _source108.dtor_result;
              DAST._IType _source130 = _1481___mcc_h306;
              if (_source130.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2310___mcc_h817 = _source130.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2311___mcc_h818 = _source130.dtor_typeArgs;
                DAST._IResolvedType _2312___mcc_h819 = _source130.dtor_resolved;
                DAST._IResolvedType _source131 = _2312___mcc_h819;
                if (_source131.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2313___mcc_h823 = _source131.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2314_recursiveGen;
                    bool _2315_recOwned;
                    bool _2316_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2317_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out913;
                    bool _out914;
                    bool _out915;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out913, out _out914, out _out915, out _out916);
                    _2314_recursiveGen = _out913;
                    _2315_recOwned = _out914;
                    _2316_recErased = _out915;
                    _2317_recIdents = _out916;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2314_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2315_recOwned;
                    isErased = _2316_recErased;
                    readIdents = _2317_recIdents;
                  }
                } else if (_source131.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2318___mcc_h825 = _source131.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2319_recursiveGen;
                    bool _2320_recOwned;
                    bool _2321_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2322_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out917;
                    bool _out918;
                    bool _out919;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out920;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919, out _out920);
                    _2319_recursiveGen = _out917;
                    _2320_recOwned = _out918;
                    _2321_recErased = _out919;
                    _2322_recIdents = _out920;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2319_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2320_recOwned;
                    isErased = _2321_recErased;
                    readIdents = _2322_recIdents;
                  }
                } else {
                  DAST._IType _2323___mcc_h827 = _source131.dtor_Newtype_a0;
                  DAST._IType _2324_b = _2323___mcc_h827;
                  {
                    if (object.Equals(_1474_fromTpe, _2324_b)) {
                      Dafny.ISequence<Dafny.Rune> _2325_recursiveGen;
                      bool _2326_recOwned;
                      bool _2327_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2328_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out921;
                      bool _out922;
                      bool _out923;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out924;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out921, out _out922, out _out923, out _out924);
                      _2325_recursiveGen = _out921;
                      _2326_recOwned = _out922;
                      _2327_recErased = _out923;
                      _2328_recIdents = _out924;
                      Dafny.ISequence<Dafny.Rune> _2329_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out925;
                      _out925 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _2329_rhsType = _out925;
                      Dafny.ISequence<Dafny.Rune> _2330_uneraseFn;
                      _2330_uneraseFn = ((_2326_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2329_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2330_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2325_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2326_recOwned;
                      isErased = false;
                      readIdents = _2328_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out926;
                      bool _out927;
                      bool _out928;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out929;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2324_b), _2324_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out926, out _out927, out _out928, out _out929);
                      s = _out926;
                      isOwned = _out927;
                      isErased = _out928;
                      readIdents = _out929;
                    }
                  }
                }
              } else if (_source130.is_Nullable) {
                DAST._IType _2331___mcc_h829 = _source130.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2332_recursiveGen;
                  bool _2333_recOwned;
                  bool _2334_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2335_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out930;
                  bool _out931;
                  bool _out932;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out933;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out930, out _out931, out _out932, out _out933);
                  _2332_recursiveGen = _out930;
                  _2333_recOwned = _out931;
                  _2334_recErased = _out932;
                  _2335_recIdents = _out933;
                  if (!(_2333_recOwned)) {
                    _2332_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2332_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2332_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2334_recErased;
                  readIdents = _2335_recIdents;
                }
              } else if (_source130.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2336___mcc_h831 = _source130.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2337_recursiveGen;
                  bool _2338_recOwned;
                  bool _2339_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2340_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out934;
                  bool _out935;
                  bool _out936;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out937;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out934, out _out935, out _out936, out _out937);
                  _2337_recursiveGen = _out934;
                  _2338_recOwned = _out935;
                  _2339_recErased = _out936;
                  _2340_recIdents = _out937;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2337_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2338_recOwned;
                  isErased = _2339_recErased;
                  readIdents = _2340_recIdents;
                }
              } else if (_source130.is_Array) {
                DAST._IType _2341___mcc_h833 = _source130.dtor_element;
                BigInteger _2342___mcc_h834 = _source130.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2343_recursiveGen;
                  bool _2344_recOwned;
                  bool _2345_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2346_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out938;
                  bool _out939;
                  bool _out940;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out941;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out938, out _out939, out _out940, out _out941);
                  _2343_recursiveGen = _out938;
                  _2344_recOwned = _out939;
                  _2345_recErased = _out940;
                  _2346_recIdents = _out941;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2343_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2344_recOwned;
                  isErased = _2345_recErased;
                  readIdents = _2346_recIdents;
                }
              } else if (_source130.is_Seq) {
                DAST._IType _2347___mcc_h837 = _source130.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2348_recursiveGen;
                  bool _2349_recOwned;
                  bool _2350_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2351_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out942;
                  bool _out943;
                  bool _out944;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out945;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out942, out _out943, out _out944, out _out945);
                  _2348_recursiveGen = _out942;
                  _2349_recOwned = _out943;
                  _2350_recErased = _out944;
                  _2351_recIdents = _out945;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2348_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2349_recOwned;
                  isErased = _2350_recErased;
                  readIdents = _2351_recIdents;
                }
              } else if (_source130.is_Set) {
                DAST._IType _2352___mcc_h839 = _source130.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2353_recursiveGen;
                  bool _2354_recOwned;
                  bool _2355_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2356_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out946;
                  bool _out947;
                  bool _out948;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out946, out _out947, out _out948, out _out949);
                  _2353_recursiveGen = _out946;
                  _2354_recOwned = _out947;
                  _2355_recErased = _out948;
                  _2356_recIdents = _out949;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2353_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2354_recOwned;
                  isErased = _2355_recErased;
                  readIdents = _2356_recIdents;
                }
              } else if (_source130.is_Multiset) {
                DAST._IType _2357___mcc_h841 = _source130.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2358_recursiveGen;
                  bool _2359_recOwned;
                  bool _2360_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2361_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out950;
                  bool _out951;
                  bool _out952;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out950, out _out951, out _out952, out _out953);
                  _2358_recursiveGen = _out950;
                  _2359_recOwned = _out951;
                  _2360_recErased = _out952;
                  _2361_recIdents = _out953;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2359_recOwned;
                  isErased = _2360_recErased;
                  readIdents = _2361_recIdents;
                }
              } else if (_source130.is_Map) {
                DAST._IType _2362___mcc_h843 = _source130.dtor_key;
                DAST._IType _2363___mcc_h844 = _source130.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2364_recursiveGen;
                  bool _2365_recOwned;
                  bool _2366_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2367_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out954;
                  bool _out955;
                  bool _out956;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out957;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out954, out _out955, out _out956, out _out957);
                  _2364_recursiveGen = _out954;
                  _2365_recOwned = _out955;
                  _2366_recErased = _out956;
                  _2367_recIdents = _out957;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2364_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2365_recOwned;
                  isErased = _2366_recErased;
                  readIdents = _2367_recIdents;
                }
              } else if (_source130.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2368___mcc_h847 = _source130.dtor_args;
                DAST._IType _2369___mcc_h848 = _source130.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2370_recursiveGen;
                  bool _2371_recOwned;
                  bool _2372_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2373_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out958;
                  bool _out959;
                  bool _out960;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out961;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out958, out _out959, out _out960, out _out961);
                  _2370_recursiveGen = _out958;
                  _2371_recOwned = _out959;
                  _2372_recErased = _out960;
                  _2373_recIdents = _out961;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2370_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2371_recOwned;
                  isErased = _2372_recErased;
                  readIdents = _2373_recIdents;
                }
              } else if (_source130.is_Primitive) {
                DAST._IPrimitive _2374___mcc_h851 = _source130.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2375_recursiveGen;
                  bool _2376_recOwned;
                  bool _2377_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2378_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out962;
                  bool _out963;
                  bool _out964;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out962, out _out963, out _out964, out _out965);
                  _2375_recursiveGen = _out962;
                  _2376_recOwned = _out963;
                  _2377_recErased = _out964;
                  _2378_recIdents = _out965;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2375_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2376_recOwned;
                  isErased = _2377_recErased;
                  readIdents = _2378_recIdents;
                }
              } else if (_source130.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2379___mcc_h853 = _source130.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2380_recursiveGen;
                  bool _2381_recOwned;
                  bool _2382_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2383_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out966;
                  bool _out967;
                  bool _out968;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out966, out _out967, out _out968, out _out969);
                  _2380_recursiveGen = _out966;
                  _2381_recOwned = _out967;
                  _2382_recErased = _out968;
                  _2383_recIdents = _out969;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2380_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2381_recOwned;
                  isErased = _2382_recErased;
                  readIdents = _2383_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2384___mcc_h855 = _source130.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2385_recursiveGen;
                  bool _2386_recOwned;
                  bool _2387_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2388_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out970;
                  bool _out971;
                  bool _out972;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out970, out _out971, out _out972, out _out973);
                  _2385_recursiveGen = _out970;
                  _2386_recOwned = _out971;
                  _2387_recErased = _out972;
                  _2388_recIdents = _out973;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2385_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2386_recOwned;
                  isErased = _2387_recErased;
                  readIdents = _2388_recIdents;
                }
              }
            } else if (_source108.is_Primitive) {
              DAST._IPrimitive _2389___mcc_h857 = _source108.dtor_Primitive_a0;
              DAST._IPrimitive _source132 = _2389___mcc_h857;
              if (_source132.is_Int) {
                DAST._IType _source133 = _1481___mcc_h306;
                if (_source133.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2390___mcc_h861 = _source133.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2391___mcc_h862 = _source133.dtor_typeArgs;
                  DAST._IResolvedType _2392___mcc_h863 = _source133.dtor_resolved;
                  DAST._IResolvedType _source134 = _2392___mcc_h863;
                  if (_source134.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2393___mcc_h867 = _source134.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2394_recursiveGen;
                      bool _2395_recOwned;
                      bool _2396_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2397_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out974;
                      bool _out975;
                      bool _out976;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out974, out _out975, out _out976, out _out977);
                      _2394_recursiveGen = _out974;
                      _2395_recOwned = _out975;
                      _2396_recErased = _out976;
                      _2397_recIdents = _out977;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2394_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2395_recOwned;
                      isErased = _2396_recErased;
                      readIdents = _2397_recIdents;
                    }
                  } else if (_source134.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2398___mcc_h869 = _source134.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2399_recursiveGen;
                      bool _2400_recOwned;
                      bool _2401_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2402_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out978;
                      bool _out979;
                      bool _out980;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out978, out _out979, out _out980, out _out981);
                      _2399_recursiveGen = _out978;
                      _2400_recOwned = _out979;
                      _2401_recErased = _out980;
                      _2402_recIdents = _out981;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2399_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2400_recOwned;
                      isErased = _2401_recErased;
                      readIdents = _2402_recIdents;
                    }
                  } else {
                    DAST._IType _2403___mcc_h871 = _source134.dtor_Newtype_a0;
                    DAST._IType _2404_b = _2403___mcc_h871;
                    {
                      if (object.Equals(_1474_fromTpe, _2404_b)) {
                        Dafny.ISequence<Dafny.Rune> _2405_recursiveGen;
                        bool _2406_recOwned;
                        bool _2407_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2408_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out982;
                        bool _out983;
                        bool _out984;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out982, out _out983, out _out984, out _out985);
                        _2405_recursiveGen = _out982;
                        _2406_recOwned = _out983;
                        _2407_recErased = _out984;
                        _2408_recIdents = _out985;
                        Dafny.ISequence<Dafny.Rune> _2409_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out986;
                        _out986 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                        _2409_rhsType = _out986;
                        Dafny.ISequence<Dafny.Rune> _2410_uneraseFn;
                        _2410_uneraseFn = ((_2406_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2409_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2410_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2405_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2406_recOwned;
                        isErased = false;
                        readIdents = _2408_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out987;
                        bool _out988;
                        bool _out989;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out990;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2404_b), _2404_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out987, out _out988, out _out989, out _out990);
                        s = _out987;
                        isOwned = _out988;
                        isErased = _out989;
                        readIdents = _out990;
                      }
                    }
                  }
                } else if (_source133.is_Nullable) {
                  DAST._IType _2411___mcc_h873 = _source133.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2412_recursiveGen;
                    bool _2413_recOwned;
                    bool _2414_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2415_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out991;
                    bool _out992;
                    bool _out993;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out991, out _out992, out _out993, out _out994);
                    _2412_recursiveGen = _out991;
                    _2413_recOwned = _out992;
                    _2414_recErased = _out993;
                    _2415_recIdents = _out994;
                    if (!(_2413_recOwned)) {
                      _2412_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2412_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2414_recErased;
                    readIdents = _2415_recIdents;
                  }
                } else if (_source133.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2416___mcc_h875 = _source133.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2417_recursiveGen;
                    bool _2418_recOwned;
                    bool _2419_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2420_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out995;
                    bool _out996;
                    bool _out997;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out998;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out995, out _out996, out _out997, out _out998);
                    _2417_recursiveGen = _out995;
                    _2418_recOwned = _out996;
                    _2419_recErased = _out997;
                    _2420_recIdents = _out998;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2417_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2418_recOwned;
                    isErased = _2419_recErased;
                    readIdents = _2420_recIdents;
                  }
                } else if (_source133.is_Array) {
                  DAST._IType _2421___mcc_h877 = _source133.dtor_element;
                  BigInteger _2422___mcc_h878 = _source133.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2423_recursiveGen;
                    bool _2424_recOwned;
                    bool _2425_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2426_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out999;
                    bool _out1000;
                    bool _out1001;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out999, out _out1000, out _out1001, out _out1002);
                    _2423_recursiveGen = _out999;
                    _2424_recOwned = _out1000;
                    _2425_recErased = _out1001;
                    _2426_recIdents = _out1002;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2423_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2424_recOwned;
                    isErased = _2425_recErased;
                    readIdents = _2426_recIdents;
                  }
                } else if (_source133.is_Seq) {
                  DAST._IType _2427___mcc_h881 = _source133.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2428_recursiveGen;
                    bool _2429_recOwned;
                    bool _2430_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2431_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1003;
                    bool _out1004;
                    bool _out1005;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1006;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1003, out _out1004, out _out1005, out _out1006);
                    _2428_recursiveGen = _out1003;
                    _2429_recOwned = _out1004;
                    _2430_recErased = _out1005;
                    _2431_recIdents = _out1006;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2428_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2429_recOwned;
                    isErased = _2430_recErased;
                    readIdents = _2431_recIdents;
                  }
                } else if (_source133.is_Set) {
                  DAST._IType _2432___mcc_h883 = _source133.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2433_recursiveGen;
                    bool _2434_recOwned;
                    bool _2435_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2436_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1007;
                    bool _out1008;
                    bool _out1009;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1010;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1007, out _out1008, out _out1009, out _out1010);
                    _2433_recursiveGen = _out1007;
                    _2434_recOwned = _out1008;
                    _2435_recErased = _out1009;
                    _2436_recIdents = _out1010;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2433_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2434_recOwned;
                    isErased = _2435_recErased;
                    readIdents = _2436_recIdents;
                  }
                } else if (_source133.is_Multiset) {
                  DAST._IType _2437___mcc_h885 = _source133.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2438_recursiveGen;
                    bool _2439_recOwned;
                    bool _2440_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2441_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1011;
                    bool _out1012;
                    bool _out1013;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1014;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1011, out _out1012, out _out1013, out _out1014);
                    _2438_recursiveGen = _out1011;
                    _2439_recOwned = _out1012;
                    _2440_recErased = _out1013;
                    _2441_recIdents = _out1014;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2438_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2439_recOwned;
                    isErased = _2440_recErased;
                    readIdents = _2441_recIdents;
                  }
                } else if (_source133.is_Map) {
                  DAST._IType _2442___mcc_h887 = _source133.dtor_key;
                  DAST._IType _2443___mcc_h888 = _source133.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2444_recursiveGen;
                    bool _2445_recOwned;
                    bool _2446_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2447_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1015;
                    bool _out1016;
                    bool _out1017;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1018;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1015, out _out1016, out _out1017, out _out1018);
                    _2444_recursiveGen = _out1015;
                    _2445_recOwned = _out1016;
                    _2446_recErased = _out1017;
                    _2447_recIdents = _out1018;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2444_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2445_recOwned;
                    isErased = _2446_recErased;
                    readIdents = _2447_recIdents;
                  }
                } else if (_source133.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2448___mcc_h891 = _source133.dtor_args;
                  DAST._IType _2449___mcc_h892 = _source133.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2450_recursiveGen;
                    bool _2451_recOwned;
                    bool _2452_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2453_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1019;
                    bool _out1020;
                    bool _out1021;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1022;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1019, out _out1020, out _out1021, out _out1022);
                    _2450_recursiveGen = _out1019;
                    _2451_recOwned = _out1020;
                    _2452_recErased = _out1021;
                    _2453_recIdents = _out1022;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2450_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2451_recOwned;
                    isErased = _2452_recErased;
                    readIdents = _2453_recIdents;
                  }
                } else if (_source133.is_Primitive) {
                  DAST._IPrimitive _2454___mcc_h895 = _source133.dtor_Primitive_a0;
                  DAST._IPrimitive _source135 = _2454___mcc_h895;
                  if (_source135.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2455_recursiveGen;
                      bool _2456_recOwned;
                      bool _2457_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2458_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1023;
                      bool _out1024;
                      bool _out1025;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1026;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1023, out _out1024, out _out1025, out _out1026);
                      _2455_recursiveGen = _out1023;
                      _2456_recOwned = _out1024;
                      _2457_recErased = _out1025;
                      _2458_recIdents = _out1026;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2455_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2456_recOwned;
                      isErased = _2457_recErased;
                      readIdents = _2458_recIdents;
                    }
                  } else if (_source135.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2459_recursiveGen;
                      bool _2460___v46;
                      bool _2461___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2462_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1027;
                      bool _out1028;
                      bool _out1029;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1030;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, true, out _out1027, out _out1028, out _out1029, out _out1030);
                      _2459_recursiveGen = _out1027;
                      _2460___v46 = _out1028;
                      _2461___v47 = _out1029;
                      _2462_recIdents = _out1030;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2459_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2462_recIdents;
                    }
                  } else if (_source135.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2463_recursiveGen;
                      bool _2464_recOwned;
                      bool _2465_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2466_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1031;
                      bool _out1032;
                      bool _out1033;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1034;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1031, out _out1032, out _out1033, out _out1034);
                      _2463_recursiveGen = _out1031;
                      _2464_recOwned = _out1032;
                      _2465_recErased = _out1033;
                      _2466_recIdents = _out1034;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2463_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2464_recOwned;
                      isErased = _2465_recErased;
                      readIdents = _2466_recIdents;
                    }
                  } else if (_source135.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2467_recursiveGen;
                      bool _2468_recOwned;
                      bool _2469_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2470_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1035;
                      bool _out1036;
                      bool _out1037;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1038;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1035, out _out1036, out _out1037, out _out1038);
                      _2467_recursiveGen = _out1035;
                      _2468_recOwned = _out1036;
                      _2469_recErased = _out1037;
                      _2470_recIdents = _out1038;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2467_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2468_recOwned;
                      isErased = _2469_recErased;
                      readIdents = _2470_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2471_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1039;
                      _out1039 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _2471_rhsType = _out1039;
                      Dafny.ISequence<Dafny.Rune> _2472_recursiveGen;
                      bool _2473___v56;
                      bool _2474___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2475_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1040;
                      bool _out1041;
                      bool _out1042;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1043;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, true, out _out1040, out _out1041, out _out1042, out _out1043);
                      _2472_recursiveGen = _out1040;
                      _2473___v56 = _out1041;
                      _2474___v57 = _out1042;
                      _2475_recIdents = _out1043;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2472_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2475_recIdents;
                    }
                  }
                } else if (_source133.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2476___mcc_h897 = _source133.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2477_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1044;
                    _out1044 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                    _2477_rhsType = _out1044;
                    Dafny.ISequence<Dafny.Rune> _2478_recursiveGen;
                    bool _2479___v51;
                    bool _2480___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2481_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1045;
                    bool _out1046;
                    bool _out1047;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1048;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, true, out _out1045, out _out1046, out _out1047, out _out1048);
                    _2478_recursiveGen = _out1045;
                    _2479___v51 = _out1046;
                    _2480___v52 = _out1047;
                    _2481_recIdents = _out1048;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2477_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2478_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2481_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2482___mcc_h899 = _source133.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2483_recursiveGen;
                    bool _2484_recOwned;
                    bool _2485_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2486_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1049;
                    bool _out1050;
                    bool _out1051;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1049, out _out1050, out _out1051, out _out1052);
                    _2483_recursiveGen = _out1049;
                    _2484_recOwned = _out1050;
                    _2485_recErased = _out1051;
                    _2486_recIdents = _out1052;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2483_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2484_recOwned;
                    isErased = _2485_recErased;
                    readIdents = _2486_recIdents;
                  }
                }
              } else if (_source132.is_Real) {
                DAST._IType _source136 = _1481___mcc_h306;
                if (_source136.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2487___mcc_h901 = _source136.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2488___mcc_h902 = _source136.dtor_typeArgs;
                  DAST._IResolvedType _2489___mcc_h903 = _source136.dtor_resolved;
                  DAST._IResolvedType _source137 = _2489___mcc_h903;
                  if (_source137.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2490___mcc_h907 = _source137.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2491_recursiveGen;
                      bool _2492_recOwned;
                      bool _2493_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2494_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1053;
                      bool _out1054;
                      bool _out1055;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1053, out _out1054, out _out1055, out _out1056);
                      _2491_recursiveGen = _out1053;
                      _2492_recOwned = _out1054;
                      _2493_recErased = _out1055;
                      _2494_recIdents = _out1056;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2491_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2492_recOwned;
                      isErased = _2493_recErased;
                      readIdents = _2494_recIdents;
                    }
                  } else if (_source137.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2495___mcc_h909 = _source137.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2496_recursiveGen;
                      bool _2497_recOwned;
                      bool _2498_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2499_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1057;
                      bool _out1058;
                      bool _out1059;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1057, out _out1058, out _out1059, out _out1060);
                      _2496_recursiveGen = _out1057;
                      _2497_recOwned = _out1058;
                      _2498_recErased = _out1059;
                      _2499_recIdents = _out1060;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2496_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2497_recOwned;
                      isErased = _2498_recErased;
                      readIdents = _2499_recIdents;
                    }
                  } else {
                    DAST._IType _2500___mcc_h911 = _source137.dtor_Newtype_a0;
                    DAST._IType _2501_b = _2500___mcc_h911;
                    {
                      if (object.Equals(_1474_fromTpe, _2501_b)) {
                        Dafny.ISequence<Dafny.Rune> _2502_recursiveGen;
                        bool _2503_recOwned;
                        bool _2504_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2505_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1061;
                        bool _out1062;
                        bool _out1063;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1064;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1061, out _out1062, out _out1063, out _out1064);
                        _2502_recursiveGen = _out1061;
                        _2503_recOwned = _out1062;
                        _2504_recErased = _out1063;
                        _2505_recIdents = _out1064;
                        Dafny.ISequence<Dafny.Rune> _2506_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1065;
                        _out1065 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                        _2506_rhsType = _out1065;
                        Dafny.ISequence<Dafny.Rune> _2507_uneraseFn;
                        _2507_uneraseFn = ((_2503_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2506_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2507_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2502_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2503_recOwned;
                        isErased = false;
                        readIdents = _2505_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1066;
                        bool _out1067;
                        bool _out1068;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1069;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2501_b), _2501_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out1066, out _out1067, out _out1068, out _out1069);
                        s = _out1066;
                        isOwned = _out1067;
                        isErased = _out1068;
                        readIdents = _out1069;
                      }
                    }
                  }
                } else if (_source136.is_Nullable) {
                  DAST._IType _2508___mcc_h913 = _source136.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2509_recursiveGen;
                    bool _2510_recOwned;
                    bool _2511_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2512_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1070;
                    bool _out1071;
                    bool _out1072;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1073;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1070, out _out1071, out _out1072, out _out1073);
                    _2509_recursiveGen = _out1070;
                    _2510_recOwned = _out1071;
                    _2511_recErased = _out1072;
                    _2512_recIdents = _out1073;
                    if (!(_2510_recOwned)) {
                      _2509_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2509_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2509_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2511_recErased;
                    readIdents = _2512_recIdents;
                  }
                } else if (_source136.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2513___mcc_h915 = _source136.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2514_recursiveGen;
                    bool _2515_recOwned;
                    bool _2516_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2517_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1074;
                    bool _out1075;
                    bool _out1076;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1077;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1074, out _out1075, out _out1076, out _out1077);
                    _2514_recursiveGen = _out1074;
                    _2515_recOwned = _out1075;
                    _2516_recErased = _out1076;
                    _2517_recIdents = _out1077;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2514_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2515_recOwned;
                    isErased = _2516_recErased;
                    readIdents = _2517_recIdents;
                  }
                } else if (_source136.is_Array) {
                  DAST._IType _2518___mcc_h917 = _source136.dtor_element;
                  BigInteger _2519___mcc_h918 = _source136.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2520_recursiveGen;
                    bool _2521_recOwned;
                    bool _2522_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2523_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1078;
                    bool _out1079;
                    bool _out1080;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1081;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1078, out _out1079, out _out1080, out _out1081);
                    _2520_recursiveGen = _out1078;
                    _2521_recOwned = _out1079;
                    _2522_recErased = _out1080;
                    _2523_recIdents = _out1081;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2520_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2521_recOwned;
                    isErased = _2522_recErased;
                    readIdents = _2523_recIdents;
                  }
                } else if (_source136.is_Seq) {
                  DAST._IType _2524___mcc_h921 = _source136.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2525_recursiveGen;
                    bool _2526_recOwned;
                    bool _2527_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2528_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1082;
                    bool _out1083;
                    bool _out1084;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1085;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1082, out _out1083, out _out1084, out _out1085);
                    _2525_recursiveGen = _out1082;
                    _2526_recOwned = _out1083;
                    _2527_recErased = _out1084;
                    _2528_recIdents = _out1085;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2525_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2526_recOwned;
                    isErased = _2527_recErased;
                    readIdents = _2528_recIdents;
                  }
                } else if (_source136.is_Set) {
                  DAST._IType _2529___mcc_h923 = _source136.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2530_recursiveGen;
                    bool _2531_recOwned;
                    bool _2532_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2533_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1086;
                    bool _out1087;
                    bool _out1088;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1089;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1086, out _out1087, out _out1088, out _out1089);
                    _2530_recursiveGen = _out1086;
                    _2531_recOwned = _out1087;
                    _2532_recErased = _out1088;
                    _2533_recIdents = _out1089;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2530_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2531_recOwned;
                    isErased = _2532_recErased;
                    readIdents = _2533_recIdents;
                  }
                } else if (_source136.is_Multiset) {
                  DAST._IType _2534___mcc_h925 = _source136.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2535_recursiveGen;
                    bool _2536_recOwned;
                    bool _2537_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2538_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1090;
                    bool _out1091;
                    bool _out1092;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1093;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1090, out _out1091, out _out1092, out _out1093);
                    _2535_recursiveGen = _out1090;
                    _2536_recOwned = _out1091;
                    _2537_recErased = _out1092;
                    _2538_recIdents = _out1093;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2535_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2536_recOwned;
                    isErased = _2537_recErased;
                    readIdents = _2538_recIdents;
                  }
                } else if (_source136.is_Map) {
                  DAST._IType _2539___mcc_h927 = _source136.dtor_key;
                  DAST._IType _2540___mcc_h928 = _source136.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2541_recursiveGen;
                    bool _2542_recOwned;
                    bool _2543_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2544_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1094;
                    bool _out1095;
                    bool _out1096;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1097;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1094, out _out1095, out _out1096, out _out1097);
                    _2541_recursiveGen = _out1094;
                    _2542_recOwned = _out1095;
                    _2543_recErased = _out1096;
                    _2544_recIdents = _out1097;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2541_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2542_recOwned;
                    isErased = _2543_recErased;
                    readIdents = _2544_recIdents;
                  }
                } else if (_source136.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2545___mcc_h931 = _source136.dtor_args;
                  DAST._IType _2546___mcc_h932 = _source136.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2547_recursiveGen;
                    bool _2548_recOwned;
                    bool _2549_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2550_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1098;
                    bool _out1099;
                    bool _out1100;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1101;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1098, out _out1099, out _out1100, out _out1101);
                    _2547_recursiveGen = _out1098;
                    _2548_recOwned = _out1099;
                    _2549_recErased = _out1100;
                    _2550_recIdents = _out1101;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2547_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2548_recOwned;
                    isErased = _2549_recErased;
                    readIdents = _2550_recIdents;
                  }
                } else if (_source136.is_Primitive) {
                  DAST._IPrimitive _2551___mcc_h935 = _source136.dtor_Primitive_a0;
                  DAST._IPrimitive _source138 = _2551___mcc_h935;
                  if (_source138.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2552_recursiveGen;
                      bool _2553___v48;
                      bool _2554___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2555_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1102;
                      bool _out1103;
                      bool _out1104;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, false, out _out1102, out _out1103, out _out1104, out _out1105);
                      _2552_recursiveGen = _out1102;
                      _2553___v48 = _out1103;
                      _2554___v49 = _out1104;
                      _2555_recIdents = _out1105;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2552_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2555_recIdents;
                    }
                  } else if (_source138.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2556_recursiveGen;
                      bool _2557_recOwned;
                      bool _2558_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2559_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1106;
                      bool _out1107;
                      bool _out1108;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1109;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1106, out _out1107, out _out1108, out _out1109);
                      _2556_recursiveGen = _out1106;
                      _2557_recOwned = _out1107;
                      _2558_recErased = _out1108;
                      _2559_recIdents = _out1109;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2556_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2557_recOwned;
                      isErased = _2558_recErased;
                      readIdents = _2559_recIdents;
                    }
                  } else if (_source138.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2560_recursiveGen;
                      bool _2561_recOwned;
                      bool _2562_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2563_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1110;
                      bool _out1111;
                      bool _out1112;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1113;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1110, out _out1111, out _out1112, out _out1113);
                      _2560_recursiveGen = _out1110;
                      _2561_recOwned = _out1111;
                      _2562_recErased = _out1112;
                      _2563_recIdents = _out1113;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2560_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2561_recOwned;
                      isErased = _2562_recErased;
                      readIdents = _2563_recIdents;
                    }
                  } else if (_source138.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2564_recursiveGen;
                      bool _2565_recOwned;
                      bool _2566_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2567_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1114;
                      bool _out1115;
                      bool _out1116;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1117;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1114, out _out1115, out _out1116, out _out1117);
                      _2564_recursiveGen = _out1114;
                      _2565_recOwned = _out1115;
                      _2566_recErased = _out1116;
                      _2567_recIdents = _out1117;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2564_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2565_recOwned;
                      isErased = _2566_recErased;
                      readIdents = _2567_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2568_recursiveGen;
                      bool _2569_recOwned;
                      bool _2570_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2571_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1118;
                      bool _out1119;
                      bool _out1120;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1118, out _out1119, out _out1120, out _out1121);
                      _2568_recursiveGen = _out1118;
                      _2569_recOwned = _out1119;
                      _2570_recErased = _out1120;
                      _2571_recIdents = _out1121;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2568_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2569_recOwned;
                      isErased = _2570_recErased;
                      readIdents = _2571_recIdents;
                    }
                  }
                } else if (_source136.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2572___mcc_h937 = _source136.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2573_recursiveGen;
                    bool _2574_recOwned;
                    bool _2575_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2576_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1122;
                    bool _out1123;
                    bool _out1124;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1125;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1122, out _out1123, out _out1124, out _out1125);
                    _2573_recursiveGen = _out1122;
                    _2574_recOwned = _out1123;
                    _2575_recErased = _out1124;
                    _2576_recIdents = _out1125;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2573_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2574_recOwned;
                    isErased = _2575_recErased;
                    readIdents = _2576_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2577___mcc_h939 = _source136.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2578_recursiveGen;
                    bool _2579_recOwned;
                    bool _2580_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2581_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1126;
                    bool _out1127;
                    bool _out1128;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1126, out _out1127, out _out1128, out _out1129);
                    _2578_recursiveGen = _out1126;
                    _2579_recOwned = _out1127;
                    _2580_recErased = _out1128;
                    _2581_recIdents = _out1129;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2578_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2579_recOwned;
                    isErased = _2580_recErased;
                    readIdents = _2581_recIdents;
                  }
                }
              } else if (_source132.is_String) {
                DAST._IType _source139 = _1481___mcc_h306;
                if (_source139.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2582___mcc_h941 = _source139.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2583___mcc_h942 = _source139.dtor_typeArgs;
                  DAST._IResolvedType _2584___mcc_h943 = _source139.dtor_resolved;
                  DAST._IResolvedType _source140 = _2584___mcc_h943;
                  if (_source140.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2585___mcc_h947 = _source140.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2586_recursiveGen;
                      bool _2587_recOwned;
                      bool _2588_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2589_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1130;
                      bool _out1131;
                      bool _out1132;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1130, out _out1131, out _out1132, out _out1133);
                      _2586_recursiveGen = _out1130;
                      _2587_recOwned = _out1131;
                      _2588_recErased = _out1132;
                      _2589_recIdents = _out1133;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2586_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2587_recOwned;
                      isErased = _2588_recErased;
                      readIdents = _2589_recIdents;
                    }
                  } else if (_source140.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2590___mcc_h949 = _source140.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2591_recursiveGen;
                      bool _2592_recOwned;
                      bool _2593_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2594_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1134;
                      bool _out1135;
                      bool _out1136;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1134, out _out1135, out _out1136, out _out1137);
                      _2591_recursiveGen = _out1134;
                      _2592_recOwned = _out1135;
                      _2593_recErased = _out1136;
                      _2594_recIdents = _out1137;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2591_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2592_recOwned;
                      isErased = _2593_recErased;
                      readIdents = _2594_recIdents;
                    }
                  } else {
                    DAST._IType _2595___mcc_h951 = _source140.dtor_Newtype_a0;
                    DAST._IType _2596_b = _2595___mcc_h951;
                    {
                      if (object.Equals(_1474_fromTpe, _2596_b)) {
                        Dafny.ISequence<Dafny.Rune> _2597_recursiveGen;
                        bool _2598_recOwned;
                        bool _2599_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2600_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1138;
                        bool _out1139;
                        bool _out1140;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1138, out _out1139, out _out1140, out _out1141);
                        _2597_recursiveGen = _out1138;
                        _2598_recOwned = _out1139;
                        _2599_recErased = _out1140;
                        _2600_recIdents = _out1141;
                        Dafny.ISequence<Dafny.Rune> _2601_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1142;
                        _out1142 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                        _2601_rhsType = _out1142;
                        Dafny.ISequence<Dafny.Rune> _2602_uneraseFn;
                        _2602_uneraseFn = ((_2598_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2601_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2602_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2597_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2598_recOwned;
                        isErased = false;
                        readIdents = _2600_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1143;
                        bool _out1144;
                        bool _out1145;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2596_b), _2596_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out1143, out _out1144, out _out1145, out _out1146);
                        s = _out1143;
                        isOwned = _out1144;
                        isErased = _out1145;
                        readIdents = _out1146;
                      }
                    }
                  }
                } else if (_source139.is_Nullable) {
                  DAST._IType _2603___mcc_h953 = _source139.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2604_recursiveGen;
                    bool _2605_recOwned;
                    bool _2606_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2607_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1147;
                    bool _out1148;
                    bool _out1149;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1150;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1147, out _out1148, out _out1149, out _out1150);
                    _2604_recursiveGen = _out1147;
                    _2605_recOwned = _out1148;
                    _2606_recErased = _out1149;
                    _2607_recIdents = _out1150;
                    if (!(_2605_recOwned)) {
                      _2604_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2604_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2604_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2606_recErased;
                    readIdents = _2607_recIdents;
                  }
                } else if (_source139.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2608___mcc_h955 = _source139.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2609_recursiveGen;
                    bool _2610_recOwned;
                    bool _2611_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2612_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1151;
                    bool _out1152;
                    bool _out1153;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1154;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1151, out _out1152, out _out1153, out _out1154);
                    _2609_recursiveGen = _out1151;
                    _2610_recOwned = _out1152;
                    _2611_recErased = _out1153;
                    _2612_recIdents = _out1154;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2609_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2610_recOwned;
                    isErased = _2611_recErased;
                    readIdents = _2612_recIdents;
                  }
                } else if (_source139.is_Array) {
                  DAST._IType _2613___mcc_h957 = _source139.dtor_element;
                  BigInteger _2614___mcc_h958 = _source139.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2615_recursiveGen;
                    bool _2616_recOwned;
                    bool _2617_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2618_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1155;
                    bool _out1156;
                    bool _out1157;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1158;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1155, out _out1156, out _out1157, out _out1158);
                    _2615_recursiveGen = _out1155;
                    _2616_recOwned = _out1156;
                    _2617_recErased = _out1157;
                    _2618_recIdents = _out1158;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2615_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2616_recOwned;
                    isErased = _2617_recErased;
                    readIdents = _2618_recIdents;
                  }
                } else if (_source139.is_Seq) {
                  DAST._IType _2619___mcc_h961 = _source139.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2620_recursiveGen;
                    bool _2621_recOwned;
                    bool _2622_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2623_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1159;
                    bool _out1160;
                    bool _out1161;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1162;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1159, out _out1160, out _out1161, out _out1162);
                    _2620_recursiveGen = _out1159;
                    _2621_recOwned = _out1160;
                    _2622_recErased = _out1161;
                    _2623_recIdents = _out1162;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2620_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2621_recOwned;
                    isErased = _2622_recErased;
                    readIdents = _2623_recIdents;
                  }
                } else if (_source139.is_Set) {
                  DAST._IType _2624___mcc_h963 = _source139.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2625_recursiveGen;
                    bool _2626_recOwned;
                    bool _2627_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2628_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1163;
                    bool _out1164;
                    bool _out1165;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1163, out _out1164, out _out1165, out _out1166);
                    _2625_recursiveGen = _out1163;
                    _2626_recOwned = _out1164;
                    _2627_recErased = _out1165;
                    _2628_recIdents = _out1166;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2625_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2626_recOwned;
                    isErased = _2627_recErased;
                    readIdents = _2628_recIdents;
                  }
                } else if (_source139.is_Multiset) {
                  DAST._IType _2629___mcc_h965 = _source139.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2630_recursiveGen;
                    bool _2631_recOwned;
                    bool _2632_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2633_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1167;
                    bool _out1168;
                    bool _out1169;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1170;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1167, out _out1168, out _out1169, out _out1170);
                    _2630_recursiveGen = _out1167;
                    _2631_recOwned = _out1168;
                    _2632_recErased = _out1169;
                    _2633_recIdents = _out1170;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2630_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2631_recOwned;
                    isErased = _2632_recErased;
                    readIdents = _2633_recIdents;
                  }
                } else if (_source139.is_Map) {
                  DAST._IType _2634___mcc_h967 = _source139.dtor_key;
                  DAST._IType _2635___mcc_h968 = _source139.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2636_recursiveGen;
                    bool _2637_recOwned;
                    bool _2638_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2639_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1171;
                    bool _out1172;
                    bool _out1173;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1174;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1171, out _out1172, out _out1173, out _out1174);
                    _2636_recursiveGen = _out1171;
                    _2637_recOwned = _out1172;
                    _2638_recErased = _out1173;
                    _2639_recIdents = _out1174;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2636_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2637_recOwned;
                    isErased = _2638_recErased;
                    readIdents = _2639_recIdents;
                  }
                } else if (_source139.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2640___mcc_h971 = _source139.dtor_args;
                  DAST._IType _2641___mcc_h972 = _source139.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2642_recursiveGen;
                    bool _2643_recOwned;
                    bool _2644_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2645_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1175;
                    bool _out1176;
                    bool _out1177;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1175, out _out1176, out _out1177, out _out1178);
                    _2642_recursiveGen = _out1175;
                    _2643_recOwned = _out1176;
                    _2644_recErased = _out1177;
                    _2645_recIdents = _out1178;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2642_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2643_recOwned;
                    isErased = _2644_recErased;
                    readIdents = _2645_recIdents;
                  }
                } else if (_source139.is_Primitive) {
                  DAST._IPrimitive _2646___mcc_h975 = _source139.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2647_recursiveGen;
                    bool _2648_recOwned;
                    bool _2649_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2650_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1179;
                    bool _out1180;
                    bool _out1181;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1182;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1179, out _out1180, out _out1181, out _out1182);
                    _2647_recursiveGen = _out1179;
                    _2648_recOwned = _out1180;
                    _2649_recErased = _out1181;
                    _2650_recIdents = _out1182;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2647_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2648_recOwned;
                    isErased = _2649_recErased;
                    readIdents = _2650_recIdents;
                  }
                } else if (_source139.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2651___mcc_h977 = _source139.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2652_recursiveGen;
                    bool _2653_recOwned;
                    bool _2654_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2655_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1183;
                    bool _out1184;
                    bool _out1185;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1183, out _out1184, out _out1185, out _out1186);
                    _2652_recursiveGen = _out1183;
                    _2653_recOwned = _out1184;
                    _2654_recErased = _out1185;
                    _2655_recIdents = _out1186;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2652_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2653_recOwned;
                    isErased = _2654_recErased;
                    readIdents = _2655_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2656___mcc_h979 = _source139.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2657_recursiveGen;
                    bool _2658_recOwned;
                    bool _2659_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2660_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1187;
                    bool _out1188;
                    bool _out1189;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1187, out _out1188, out _out1189, out _out1190);
                    _2657_recursiveGen = _out1187;
                    _2658_recOwned = _out1188;
                    _2659_recErased = _out1189;
                    _2660_recIdents = _out1190;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2657_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2658_recOwned;
                    isErased = _2659_recErased;
                    readIdents = _2660_recIdents;
                  }
                }
              } else if (_source132.is_Bool) {
                DAST._IType _source141 = _1481___mcc_h306;
                if (_source141.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2661___mcc_h981 = _source141.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2662___mcc_h982 = _source141.dtor_typeArgs;
                  DAST._IResolvedType _2663___mcc_h983 = _source141.dtor_resolved;
                  DAST._IResolvedType _source142 = _2663___mcc_h983;
                  if (_source142.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2664___mcc_h987 = _source142.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2665_recursiveGen;
                      bool _2666_recOwned;
                      bool _2667_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2668_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1191;
                      bool _out1192;
                      bool _out1193;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1191, out _out1192, out _out1193, out _out1194);
                      _2665_recursiveGen = _out1191;
                      _2666_recOwned = _out1192;
                      _2667_recErased = _out1193;
                      _2668_recIdents = _out1194;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2665_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2666_recOwned;
                      isErased = _2667_recErased;
                      readIdents = _2668_recIdents;
                    }
                  } else if (_source142.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2669___mcc_h989 = _source142.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2670_recursiveGen;
                      bool _2671_recOwned;
                      bool _2672_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2673_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1195;
                      bool _out1196;
                      bool _out1197;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1198;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1195, out _out1196, out _out1197, out _out1198);
                      _2670_recursiveGen = _out1195;
                      _2671_recOwned = _out1196;
                      _2672_recErased = _out1197;
                      _2673_recIdents = _out1198;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2670_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2671_recOwned;
                      isErased = _2672_recErased;
                      readIdents = _2673_recIdents;
                    }
                  } else {
                    DAST._IType _2674___mcc_h991 = _source142.dtor_Newtype_a0;
                    DAST._IType _2675_b = _2674___mcc_h991;
                    {
                      if (object.Equals(_1474_fromTpe, _2675_b)) {
                        Dafny.ISequence<Dafny.Rune> _2676_recursiveGen;
                        bool _2677_recOwned;
                        bool _2678_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2679_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1199;
                        bool _out1200;
                        bool _out1201;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1199, out _out1200, out _out1201, out _out1202);
                        _2676_recursiveGen = _out1199;
                        _2677_recOwned = _out1200;
                        _2678_recErased = _out1201;
                        _2679_recIdents = _out1202;
                        Dafny.ISequence<Dafny.Rune> _2680_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1203;
                        _out1203 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                        _2680_rhsType = _out1203;
                        Dafny.ISequence<Dafny.Rune> _2681_uneraseFn;
                        _2681_uneraseFn = ((_2677_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2680_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2681_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2676_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2677_recOwned;
                        isErased = false;
                        readIdents = _2679_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1204;
                        bool _out1205;
                        bool _out1206;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1207;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2675_b), _2675_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out1204, out _out1205, out _out1206, out _out1207);
                        s = _out1204;
                        isOwned = _out1205;
                        isErased = _out1206;
                        readIdents = _out1207;
                      }
                    }
                  }
                } else if (_source141.is_Nullable) {
                  DAST._IType _2682___mcc_h993 = _source141.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2683_recursiveGen;
                    bool _2684_recOwned;
                    bool _2685_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2686_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1208;
                    bool _out1209;
                    bool _out1210;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1211;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1208, out _out1209, out _out1210, out _out1211);
                    _2683_recursiveGen = _out1208;
                    _2684_recOwned = _out1209;
                    _2685_recErased = _out1210;
                    _2686_recIdents = _out1211;
                    if (!(_2684_recOwned)) {
                      _2683_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2683_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2683_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2685_recErased;
                    readIdents = _2686_recIdents;
                  }
                } else if (_source141.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2687___mcc_h995 = _source141.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2688_recursiveGen;
                    bool _2689_recOwned;
                    bool _2690_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2691_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1212;
                    bool _out1213;
                    bool _out1214;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1215;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1212, out _out1213, out _out1214, out _out1215);
                    _2688_recursiveGen = _out1212;
                    _2689_recOwned = _out1213;
                    _2690_recErased = _out1214;
                    _2691_recIdents = _out1215;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2688_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2689_recOwned;
                    isErased = _2690_recErased;
                    readIdents = _2691_recIdents;
                  }
                } else if (_source141.is_Array) {
                  DAST._IType _2692___mcc_h997 = _source141.dtor_element;
                  BigInteger _2693___mcc_h998 = _source141.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2694_recursiveGen;
                    bool _2695_recOwned;
                    bool _2696_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2697_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1216;
                    bool _out1217;
                    bool _out1218;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1219;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1216, out _out1217, out _out1218, out _out1219);
                    _2694_recursiveGen = _out1216;
                    _2695_recOwned = _out1217;
                    _2696_recErased = _out1218;
                    _2697_recIdents = _out1219;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2694_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2695_recOwned;
                    isErased = _2696_recErased;
                    readIdents = _2697_recIdents;
                  }
                } else if (_source141.is_Seq) {
                  DAST._IType _2698___mcc_h1001 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2699_recursiveGen;
                    bool _2700_recOwned;
                    bool _2701_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2702_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1220;
                    bool _out1221;
                    bool _out1222;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1223;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1220, out _out1221, out _out1222, out _out1223);
                    _2699_recursiveGen = _out1220;
                    _2700_recOwned = _out1221;
                    _2701_recErased = _out1222;
                    _2702_recIdents = _out1223;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2699_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2700_recOwned;
                    isErased = _2701_recErased;
                    readIdents = _2702_recIdents;
                  }
                } else if (_source141.is_Set) {
                  DAST._IType _2703___mcc_h1003 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2704_recursiveGen;
                    bool _2705_recOwned;
                    bool _2706_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2707_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1224;
                    bool _out1225;
                    bool _out1226;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1224, out _out1225, out _out1226, out _out1227);
                    _2704_recursiveGen = _out1224;
                    _2705_recOwned = _out1225;
                    _2706_recErased = _out1226;
                    _2707_recIdents = _out1227;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2704_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2705_recOwned;
                    isErased = _2706_recErased;
                    readIdents = _2707_recIdents;
                  }
                } else if (_source141.is_Multiset) {
                  DAST._IType _2708___mcc_h1005 = _source141.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2709_recursiveGen;
                    bool _2710_recOwned;
                    bool _2711_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2712_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1228;
                    bool _out1229;
                    bool _out1230;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1231;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1228, out _out1229, out _out1230, out _out1231);
                    _2709_recursiveGen = _out1228;
                    _2710_recOwned = _out1229;
                    _2711_recErased = _out1230;
                    _2712_recIdents = _out1231;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2709_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2710_recOwned;
                    isErased = _2711_recErased;
                    readIdents = _2712_recIdents;
                  }
                } else if (_source141.is_Map) {
                  DAST._IType _2713___mcc_h1007 = _source141.dtor_key;
                  DAST._IType _2714___mcc_h1008 = _source141.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2715_recursiveGen;
                    bool _2716_recOwned;
                    bool _2717_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2718_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1232;
                    bool _out1233;
                    bool _out1234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1232, out _out1233, out _out1234, out _out1235);
                    _2715_recursiveGen = _out1232;
                    _2716_recOwned = _out1233;
                    _2717_recErased = _out1234;
                    _2718_recIdents = _out1235;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2715_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2716_recOwned;
                    isErased = _2717_recErased;
                    readIdents = _2718_recIdents;
                  }
                } else if (_source141.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2719___mcc_h1011 = _source141.dtor_args;
                  DAST._IType _2720___mcc_h1012 = _source141.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2721_recursiveGen;
                    bool _2722_recOwned;
                    bool _2723_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2724_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1236;
                    bool _out1237;
                    bool _out1238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1239;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1236, out _out1237, out _out1238, out _out1239);
                    _2721_recursiveGen = _out1236;
                    _2722_recOwned = _out1237;
                    _2723_recErased = _out1238;
                    _2724_recIdents = _out1239;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2721_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2722_recOwned;
                    isErased = _2723_recErased;
                    readIdents = _2724_recIdents;
                  }
                } else if (_source141.is_Primitive) {
                  DAST._IPrimitive _2725___mcc_h1015 = _source141.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2726_recursiveGen;
                    bool _2727_recOwned;
                    bool _2728_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2729_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1240;
                    bool _out1241;
                    bool _out1242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1243;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1240, out _out1241, out _out1242, out _out1243);
                    _2726_recursiveGen = _out1240;
                    _2727_recOwned = _out1241;
                    _2728_recErased = _out1242;
                    _2729_recIdents = _out1243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2726_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2727_recOwned;
                    isErased = _2728_recErased;
                    readIdents = _2729_recIdents;
                  }
                } else if (_source141.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2730___mcc_h1017 = _source141.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2731_recursiveGen;
                    bool _2732_recOwned;
                    bool _2733_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2734_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1244;
                    bool _out1245;
                    bool _out1246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1244, out _out1245, out _out1246, out _out1247);
                    _2731_recursiveGen = _out1244;
                    _2732_recOwned = _out1245;
                    _2733_recErased = _out1246;
                    _2734_recIdents = _out1247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2731_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2732_recOwned;
                    isErased = _2733_recErased;
                    readIdents = _2734_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2735___mcc_h1019 = _source141.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2736_recursiveGen;
                    bool _2737_recOwned;
                    bool _2738_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2739_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1248;
                    bool _out1249;
                    bool _out1250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1248, out _out1249, out _out1250, out _out1251);
                    _2736_recursiveGen = _out1248;
                    _2737_recOwned = _out1249;
                    _2738_recErased = _out1250;
                    _2739_recIdents = _out1251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2736_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2737_recOwned;
                    isErased = _2738_recErased;
                    readIdents = _2739_recIdents;
                  }
                }
              } else {
                DAST._IType _source143 = _1481___mcc_h306;
                if (_source143.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2740___mcc_h1021 = _source143.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2741___mcc_h1022 = _source143.dtor_typeArgs;
                  DAST._IResolvedType _2742___mcc_h1023 = _source143.dtor_resolved;
                  DAST._IResolvedType _source144 = _2742___mcc_h1023;
                  if (_source144.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2743___mcc_h1027 = _source144.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2744_recursiveGen;
                      bool _2745_recOwned;
                      bool _2746_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2747_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1252;
                      bool _out1253;
                      bool _out1254;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                      _2744_recursiveGen = _out1252;
                      _2745_recOwned = _out1253;
                      _2746_recErased = _out1254;
                      _2747_recIdents = _out1255;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2744_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2745_recOwned;
                      isErased = _2746_recErased;
                      readIdents = _2747_recIdents;
                    }
                  } else if (_source144.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2748___mcc_h1029 = _source144.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2749_recursiveGen;
                      bool _2750_recOwned;
                      bool _2751_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2752_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1256;
                      bool _out1257;
                      bool _out1258;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                      _2749_recursiveGen = _out1256;
                      _2750_recOwned = _out1257;
                      _2751_recErased = _out1258;
                      _2752_recIdents = _out1259;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2749_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2750_recOwned;
                      isErased = _2751_recErased;
                      readIdents = _2752_recIdents;
                    }
                  } else {
                    DAST._IType _2753___mcc_h1031 = _source144.dtor_Newtype_a0;
                    DAST._IType _2754_b = _2753___mcc_h1031;
                    {
                      if (object.Equals(_1474_fromTpe, _2754_b)) {
                        Dafny.ISequence<Dafny.Rune> _2755_recursiveGen;
                        bool _2756_recOwned;
                        bool _2757_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2758_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1260;
                        bool _out1261;
                        bool _out1262;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1263;
                        DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1260, out _out1261, out _out1262, out _out1263);
                        _2755_recursiveGen = _out1260;
                        _2756_recOwned = _out1261;
                        _2757_recErased = _out1262;
                        _2758_recIdents = _out1263;
                        Dafny.ISequence<Dafny.Rune> _2759_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1264;
                        _out1264 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                        _2759_rhsType = _out1264;
                        Dafny.ISequence<Dafny.Rune> _2760_uneraseFn;
                        _2760_uneraseFn = ((_2756_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2759_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2760_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2755_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2756_recOwned;
                        isErased = false;
                        readIdents = _2758_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1265;
                        bool _out1266;
                        bool _out1267;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2754_b), _2754_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out1265, out _out1266, out _out1267, out _out1268);
                        s = _out1265;
                        isOwned = _out1266;
                        isErased = _out1267;
                        readIdents = _out1268;
                      }
                    }
                  }
                } else if (_source143.is_Nullable) {
                  DAST._IType _2761___mcc_h1033 = _source143.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2762_recursiveGen;
                    bool _2763_recOwned;
                    bool _2764_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2765_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1269;
                    bool _out1270;
                    bool _out1271;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1269, out _out1270, out _out1271, out _out1272);
                    _2762_recursiveGen = _out1269;
                    _2763_recOwned = _out1270;
                    _2764_recErased = _out1271;
                    _2765_recIdents = _out1272;
                    if (!(_2763_recOwned)) {
                      _2762_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2762_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2762_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2764_recErased;
                    readIdents = _2765_recIdents;
                  }
                } else if (_source143.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2766___mcc_h1035 = _source143.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2767_recursiveGen;
                    bool _2768_recOwned;
                    bool _2769_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2770_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1273;
                    bool _out1274;
                    bool _out1275;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1276;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1273, out _out1274, out _out1275, out _out1276);
                    _2767_recursiveGen = _out1273;
                    _2768_recOwned = _out1274;
                    _2769_recErased = _out1275;
                    _2770_recIdents = _out1276;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2767_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2768_recOwned;
                    isErased = _2769_recErased;
                    readIdents = _2770_recIdents;
                  }
                } else if (_source143.is_Array) {
                  DAST._IType _2771___mcc_h1037 = _source143.dtor_element;
                  BigInteger _2772___mcc_h1038 = _source143.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2773_recursiveGen;
                    bool _2774_recOwned;
                    bool _2775_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2776_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1277;
                    bool _out1278;
                    bool _out1279;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1280;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1277, out _out1278, out _out1279, out _out1280);
                    _2773_recursiveGen = _out1277;
                    _2774_recOwned = _out1278;
                    _2775_recErased = _out1279;
                    _2776_recIdents = _out1280;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2773_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2774_recOwned;
                    isErased = _2775_recErased;
                    readIdents = _2776_recIdents;
                  }
                } else if (_source143.is_Seq) {
                  DAST._IType _2777___mcc_h1041 = _source143.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2778_recursiveGen;
                    bool _2779_recOwned;
                    bool _2780_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2781_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1281;
                    bool _out1282;
                    bool _out1283;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1281, out _out1282, out _out1283, out _out1284);
                    _2778_recursiveGen = _out1281;
                    _2779_recOwned = _out1282;
                    _2780_recErased = _out1283;
                    _2781_recIdents = _out1284;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2778_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2779_recOwned;
                    isErased = _2780_recErased;
                    readIdents = _2781_recIdents;
                  }
                } else if (_source143.is_Set) {
                  DAST._IType _2782___mcc_h1043 = _source143.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2783_recursiveGen;
                    bool _2784_recOwned;
                    bool _2785_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2786_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1285;
                    bool _out1286;
                    bool _out1287;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1288;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1285, out _out1286, out _out1287, out _out1288);
                    _2783_recursiveGen = _out1285;
                    _2784_recOwned = _out1286;
                    _2785_recErased = _out1287;
                    _2786_recIdents = _out1288;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2783_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2784_recOwned;
                    isErased = _2785_recErased;
                    readIdents = _2786_recIdents;
                  }
                } else if (_source143.is_Multiset) {
                  DAST._IType _2787___mcc_h1045 = _source143.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2788_recursiveGen;
                    bool _2789_recOwned;
                    bool _2790_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2791_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1289;
                    bool _out1290;
                    bool _out1291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                    _2788_recursiveGen = _out1289;
                    _2789_recOwned = _out1290;
                    _2790_recErased = _out1291;
                    _2791_recIdents = _out1292;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2788_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2789_recOwned;
                    isErased = _2790_recErased;
                    readIdents = _2791_recIdents;
                  }
                } else if (_source143.is_Map) {
                  DAST._IType _2792___mcc_h1047 = _source143.dtor_key;
                  DAST._IType _2793___mcc_h1048 = _source143.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2794_recursiveGen;
                    bool _2795_recOwned;
                    bool _2796_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2797_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1293;
                    bool _out1294;
                    bool _out1295;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                    _2794_recursiveGen = _out1293;
                    _2795_recOwned = _out1294;
                    _2796_recErased = _out1295;
                    _2797_recIdents = _out1296;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2794_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2795_recOwned;
                    isErased = _2796_recErased;
                    readIdents = _2797_recIdents;
                  }
                } else if (_source143.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2798___mcc_h1051 = _source143.dtor_args;
                  DAST._IType _2799___mcc_h1052 = _source143.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2800_recursiveGen;
                    bool _2801_recOwned;
                    bool _2802_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2803_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1297;
                    bool _out1298;
                    bool _out1299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                    _2800_recursiveGen = _out1297;
                    _2801_recOwned = _out1298;
                    _2802_recErased = _out1299;
                    _2803_recIdents = _out1300;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2800_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2801_recOwned;
                    isErased = _2802_recErased;
                    readIdents = _2803_recIdents;
                  }
                } else if (_source143.is_Primitive) {
                  DAST._IPrimitive _2804___mcc_h1055 = _source143.dtor_Primitive_a0;
                  DAST._IPrimitive _source145 = _2804___mcc_h1055;
                  if (_source145.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2805_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1301;
                      _out1301 = DCOMP.COMP.GenType(_1474_fromTpe, true, false);
                      _2805_rhsType = _out1301;
                      Dafny.ISequence<Dafny.Rune> _2806_recursiveGen;
                      bool _2807___v58;
                      bool _2808___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2809_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1302;
                      bool _out1303;
                      bool _out1304;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, true, out _out1302, out _out1303, out _out1304, out _out1305);
                      _2806_recursiveGen = _out1302;
                      _2807___v58 = _out1303;
                      _2808___v59 = _out1304;
                      _2809_recIdents = _out1305;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2806_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2809_recIdents;
                    }
                  } else if (_source145.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2810_recursiveGen;
                      bool _2811_recOwned;
                      bool _2812_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2813_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1306;
                      bool _out1307;
                      bool _out1308;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1309;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1306, out _out1307, out _out1308, out _out1309);
                      _2810_recursiveGen = _out1306;
                      _2811_recOwned = _out1307;
                      _2812_recErased = _out1308;
                      _2813_recIdents = _out1309;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2810_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2811_recOwned;
                      isErased = _2812_recErased;
                      readIdents = _2813_recIdents;
                    }
                  } else if (_source145.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2814_recursiveGen;
                      bool _2815_recOwned;
                      bool _2816_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2817_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1310;
                      bool _out1311;
                      bool _out1312;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1310, out _out1311, out _out1312, out _out1313);
                      _2814_recursiveGen = _out1310;
                      _2815_recOwned = _out1311;
                      _2816_recErased = _out1312;
                      _2817_recIdents = _out1313;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2814_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2815_recOwned;
                      isErased = _2816_recErased;
                      readIdents = _2817_recIdents;
                    }
                  } else if (_source145.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2818_recursiveGen;
                      bool _2819_recOwned;
                      bool _2820_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2821_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1314;
                      bool _out1315;
                      bool _out1316;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1317;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1314, out _out1315, out _out1316, out _out1317);
                      _2818_recursiveGen = _out1314;
                      _2819_recOwned = _out1315;
                      _2820_recErased = _out1316;
                      _2821_recIdents = _out1317;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2818_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2819_recOwned;
                      isErased = _2820_recErased;
                      readIdents = _2821_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2822_recursiveGen;
                      bool _2823_recOwned;
                      bool _2824_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2825_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1318;
                      bool _out1319;
                      bool _out1320;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1321;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1318, out _out1319, out _out1320, out _out1321);
                      _2822_recursiveGen = _out1318;
                      _2823_recOwned = _out1319;
                      _2824_recErased = _out1320;
                      _2825_recIdents = _out1321;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2822_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2823_recOwned;
                      isErased = _2824_recErased;
                      readIdents = _2825_recIdents;
                    }
                  }
                } else if (_source143.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2826___mcc_h1057 = _source143.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2827_recursiveGen;
                    bool _2828_recOwned;
                    bool _2829_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2830_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1322;
                    bool _out1323;
                    bool _out1324;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1322, out _out1323, out _out1324, out _out1325);
                    _2827_recursiveGen = _out1322;
                    _2828_recOwned = _out1323;
                    _2829_recErased = _out1324;
                    _2830_recIdents = _out1325;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2828_recOwned;
                    isErased = _2829_recErased;
                    readIdents = _2830_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2831___mcc_h1059 = _source143.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2832_recursiveGen;
                    bool _2833_recOwned;
                    bool _2834_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2835_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1326;
                    bool _out1327;
                    bool _out1328;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1326, out _out1327, out _out1328, out _out1329);
                    _2832_recursiveGen = _out1326;
                    _2833_recOwned = _out1327;
                    _2834_recErased = _out1328;
                    _2835_recIdents = _out1329;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2833_recOwned;
                    isErased = _2834_recErased;
                    readIdents = _2835_recIdents;
                  }
                }
              }
            } else if (_source108.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2836___mcc_h1061 = _source108.dtor_Passthrough_a0;
              DAST._IType _source146 = _1481___mcc_h306;
              if (_source146.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2837___mcc_h1065 = _source146.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2838___mcc_h1066 = _source146.dtor_typeArgs;
                DAST._IResolvedType _2839___mcc_h1067 = _source146.dtor_resolved;
                DAST._IResolvedType _source147 = _2839___mcc_h1067;
                if (_source147.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2840___mcc_h1071 = _source147.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2841_recursiveGen;
                    bool _2842_recOwned;
                    bool _2843_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2844_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1330;
                    bool _out1331;
                    bool _out1332;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                    _2841_recursiveGen = _out1330;
                    _2842_recOwned = _out1331;
                    _2843_recErased = _out1332;
                    _2844_recIdents = _out1333;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2841_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2842_recOwned;
                    isErased = _2843_recErased;
                    readIdents = _2844_recIdents;
                  }
                } else if (_source147.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2845___mcc_h1073 = _source147.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2846_recursiveGen;
                    bool _2847_recOwned;
                    bool _2848_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2849_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1334;
                    bool _out1335;
                    bool _out1336;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                    _2846_recursiveGen = _out1334;
                    _2847_recOwned = _out1335;
                    _2848_recErased = _out1336;
                    _2849_recIdents = _out1337;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2846_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2847_recOwned;
                    isErased = _2848_recErased;
                    readIdents = _2849_recIdents;
                  }
                } else {
                  DAST._IType _2850___mcc_h1075 = _source147.dtor_Newtype_a0;
                  DAST._IType _2851_b = _2850___mcc_h1075;
                  {
                    if (object.Equals(_1474_fromTpe, _2851_b)) {
                      Dafny.ISequence<Dafny.Rune> _2852_recursiveGen;
                      bool _2853_recOwned;
                      bool _2854_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2855_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1338;
                      bool _out1339;
                      bool _out1340;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1341;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1338, out _out1339, out _out1340, out _out1341);
                      _2852_recursiveGen = _out1338;
                      _2853_recOwned = _out1339;
                      _2854_recErased = _out1340;
                      _2855_recIdents = _out1341;
                      Dafny.ISequence<Dafny.Rune> _2856_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1342;
                      _out1342 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _2856_rhsType = _out1342;
                      Dafny.ISequence<Dafny.Rune> _2857_uneraseFn;
                      _2857_uneraseFn = ((_2853_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2856_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2857_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2852_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2853_recOwned;
                      isErased = false;
                      readIdents = _2855_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1343;
                      bool _out1344;
                      bool _out1345;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1346;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2851_b), _2851_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out1343, out _out1344, out _out1345, out _out1346);
                      s = _out1343;
                      isOwned = _out1344;
                      isErased = _out1345;
                      readIdents = _out1346;
                    }
                  }
                }
              } else if (_source146.is_Nullable) {
                DAST._IType _2858___mcc_h1077 = _source146.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2859_recursiveGen;
                  bool _2860_recOwned;
                  bool _2861_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2862_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1347;
                  bool _out1348;
                  bool _out1349;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1350;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1347, out _out1348, out _out1349, out _out1350);
                  _2859_recursiveGen = _out1347;
                  _2860_recOwned = _out1348;
                  _2861_recErased = _out1349;
                  _2862_recIdents = _out1350;
                  if (!(_2860_recOwned)) {
                    _2859_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2859_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2859_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2861_recErased;
                  readIdents = _2862_recIdents;
                }
              } else if (_source146.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2863___mcc_h1079 = _source146.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2864_recursiveGen;
                  bool _2865_recOwned;
                  bool _2866_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2867_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1351;
                  bool _out1352;
                  bool _out1353;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                  _2864_recursiveGen = _out1351;
                  _2865_recOwned = _out1352;
                  _2866_recErased = _out1353;
                  _2867_recIdents = _out1354;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2864_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2865_recOwned;
                  isErased = _2866_recErased;
                  readIdents = _2867_recIdents;
                }
              } else if (_source146.is_Array) {
                DAST._IType _2868___mcc_h1081 = _source146.dtor_element;
                BigInteger _2869___mcc_h1082 = _source146.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2870_recursiveGen;
                  bool _2871_recOwned;
                  bool _2872_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2873_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1355;
                  bool _out1356;
                  bool _out1357;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                  _2870_recursiveGen = _out1355;
                  _2871_recOwned = _out1356;
                  _2872_recErased = _out1357;
                  _2873_recIdents = _out1358;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2870_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2871_recOwned;
                  isErased = _2872_recErased;
                  readIdents = _2873_recIdents;
                }
              } else if (_source146.is_Seq) {
                DAST._IType _2874___mcc_h1085 = _source146.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2875_recursiveGen;
                  bool _2876_recOwned;
                  bool _2877_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2878_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1359;
                  bool _out1360;
                  bool _out1361;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1359, out _out1360, out _out1361, out _out1362);
                  _2875_recursiveGen = _out1359;
                  _2876_recOwned = _out1360;
                  _2877_recErased = _out1361;
                  _2878_recIdents = _out1362;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2875_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2876_recOwned;
                  isErased = _2877_recErased;
                  readIdents = _2878_recIdents;
                }
              } else if (_source146.is_Set) {
                DAST._IType _2879___mcc_h1087 = _source146.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2880_recursiveGen;
                  bool _2881_recOwned;
                  bool _2882_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2883_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1363;
                  bool _out1364;
                  bool _out1365;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1366;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1363, out _out1364, out _out1365, out _out1366);
                  _2880_recursiveGen = _out1363;
                  _2881_recOwned = _out1364;
                  _2882_recErased = _out1365;
                  _2883_recIdents = _out1366;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2880_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2881_recOwned;
                  isErased = _2882_recErased;
                  readIdents = _2883_recIdents;
                }
              } else if (_source146.is_Multiset) {
                DAST._IType _2884___mcc_h1089 = _source146.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2885_recursiveGen;
                  bool _2886_recOwned;
                  bool _2887_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2888_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1367;
                  bool _out1368;
                  bool _out1369;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1370;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1367, out _out1368, out _out1369, out _out1370);
                  _2885_recursiveGen = _out1367;
                  _2886_recOwned = _out1368;
                  _2887_recErased = _out1369;
                  _2888_recIdents = _out1370;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2885_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2886_recOwned;
                  isErased = _2887_recErased;
                  readIdents = _2888_recIdents;
                }
              } else if (_source146.is_Map) {
                DAST._IType _2889___mcc_h1091 = _source146.dtor_key;
                DAST._IType _2890___mcc_h1092 = _source146.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2891_recursiveGen;
                  bool _2892_recOwned;
                  bool _2893_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2894_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1371;
                  bool _out1372;
                  bool _out1373;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1374;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1371, out _out1372, out _out1373, out _out1374);
                  _2891_recursiveGen = _out1371;
                  _2892_recOwned = _out1372;
                  _2893_recErased = _out1373;
                  _2894_recIdents = _out1374;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2891_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2892_recOwned;
                  isErased = _2893_recErased;
                  readIdents = _2894_recIdents;
                }
              } else if (_source146.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2895___mcc_h1095 = _source146.dtor_args;
                DAST._IType _2896___mcc_h1096 = _source146.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2897_recursiveGen;
                  bool _2898_recOwned;
                  bool _2899_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2900_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1375;
                  bool _out1376;
                  bool _out1377;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1378;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1375, out _out1376, out _out1377, out _out1378);
                  _2897_recursiveGen = _out1375;
                  _2898_recOwned = _out1376;
                  _2899_recErased = _out1377;
                  _2900_recIdents = _out1378;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2897_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2898_recOwned;
                  isErased = _2899_recErased;
                  readIdents = _2900_recIdents;
                }
              } else if (_source146.is_Primitive) {
                DAST._IPrimitive _2901___mcc_h1099 = _source146.dtor_Primitive_a0;
                DAST._IPrimitive _source148 = _2901___mcc_h1099;
                if (_source148.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2902_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1379;
                    _out1379 = DCOMP.COMP.GenType(_1474_fromTpe, true, false);
                    _2902_rhsType = _out1379;
                    Dafny.ISequence<Dafny.Rune> _2903_recursiveGen;
                    bool _2904___v54;
                    bool _2905___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2906_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1380;
                    bool _out1381;
                    bool _out1382;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1383;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, true, out _out1380, out _out1381, out _out1382, out _out1383);
                    _2903_recursiveGen = _out1380;
                    _2904___v54 = _out1381;
                    _2905___v55 = _out1382;
                    _2906_recIdents = _out1383;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2903_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2906_recIdents;
                  }
                } else if (_source148.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2907_recursiveGen;
                    bool _2908_recOwned;
                    bool _2909_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2910_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1384;
                    bool _out1385;
                    bool _out1386;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1387;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1384, out _out1385, out _out1386, out _out1387);
                    _2907_recursiveGen = _out1384;
                    _2908_recOwned = _out1385;
                    _2909_recErased = _out1386;
                    _2910_recIdents = _out1387;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2907_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2908_recOwned;
                    isErased = _2909_recErased;
                    readIdents = _2910_recIdents;
                  }
                } else if (_source148.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2911_recursiveGen;
                    bool _2912_recOwned;
                    bool _2913_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2914_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1388;
                    bool _out1389;
                    bool _out1390;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1391;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1388, out _out1389, out _out1390, out _out1391);
                    _2911_recursiveGen = _out1388;
                    _2912_recOwned = _out1389;
                    _2913_recErased = _out1390;
                    _2914_recIdents = _out1391;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2911_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2912_recOwned;
                    isErased = _2913_recErased;
                    readIdents = _2914_recIdents;
                  }
                } else if (_source148.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2915_recursiveGen;
                    bool _2916_recOwned;
                    bool _2917_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2918_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1392;
                    bool _out1393;
                    bool _out1394;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1395;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1392, out _out1393, out _out1394, out _out1395);
                    _2915_recursiveGen = _out1392;
                    _2916_recOwned = _out1393;
                    _2917_recErased = _out1394;
                    _2918_recIdents = _out1395;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2915_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2916_recOwned;
                    isErased = _2917_recErased;
                    readIdents = _2918_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2919_recursiveGen;
                    bool _2920_recOwned;
                    bool _2921_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2922_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1396;
                    bool _out1397;
                    bool _out1398;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1396, out _out1397, out _out1398, out _out1399);
                    _2919_recursiveGen = _out1396;
                    _2920_recOwned = _out1397;
                    _2921_recErased = _out1398;
                    _2922_recIdents = _out1399;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2920_recOwned;
                    isErased = _2921_recErased;
                    readIdents = _2922_recIdents;
                  }
                }
              } else if (_source146.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2923___mcc_h1101 = _source146.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2924_recursiveGen;
                  bool _2925___v62;
                  bool _2926___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2927_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1400;
                  bool _out1401;
                  bool _out1402;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, true, out _out1400, out _out1401, out _out1402, out _out1403);
                  _2924_recursiveGen = _out1400;
                  _2925___v62 = _out1401;
                  _2926___v63 = _out1402;
                  _2927_recIdents = _out1403;
                  Dafny.ISequence<Dafny.Rune> _2928_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1404;
                  _out1404 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                  _2928_toTpeGen = _out1404;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2928_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2927_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2929___mcc_h1103 = _source146.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2930_recursiveGen;
                  bool _2931_recOwned;
                  bool _2932_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2933_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1405;
                  bool _out1406;
                  bool _out1407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1405, out _out1406, out _out1407, out _out1408);
                  _2930_recursiveGen = _out1405;
                  _2931_recOwned = _out1406;
                  _2932_recErased = _out1407;
                  _2933_recIdents = _out1408;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2930_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2931_recOwned;
                  isErased = _2932_recErased;
                  readIdents = _2933_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2934___mcc_h1105 = _source108.dtor_TypeArg_a0;
              DAST._IType _source149 = _1481___mcc_h306;
              if (_source149.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2935___mcc_h1109 = _source149.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2936___mcc_h1110 = _source149.dtor_typeArgs;
                DAST._IResolvedType _2937___mcc_h1111 = _source149.dtor_resolved;
                DAST._IResolvedType _source150 = _2937___mcc_h1111;
                if (_source150.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2938___mcc_h1115 = _source150.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2939_recursiveGen;
                    bool _2940_recOwned;
                    bool _2941_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2942_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1409;
                    bool _out1410;
                    bool _out1411;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1409, out _out1410, out _out1411, out _out1412);
                    _2939_recursiveGen = _out1409;
                    _2940_recOwned = _out1410;
                    _2941_recErased = _out1411;
                    _2942_recIdents = _out1412;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2940_recOwned;
                    isErased = _2941_recErased;
                    readIdents = _2942_recIdents;
                  }
                } else if (_source150.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2943___mcc_h1117 = _source150.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2944_recursiveGen;
                    bool _2945_recOwned;
                    bool _2946_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2947_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1413;
                    bool _out1414;
                    bool _out1415;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                    DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1413, out _out1414, out _out1415, out _out1416);
                    _2944_recursiveGen = _out1413;
                    _2945_recOwned = _out1414;
                    _2946_recErased = _out1415;
                    _2947_recIdents = _out1416;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2944_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2945_recOwned;
                    isErased = _2946_recErased;
                    readIdents = _2947_recIdents;
                  }
                } else {
                  DAST._IType _2948___mcc_h1119 = _source150.dtor_Newtype_a0;
                  DAST._IType _2949_b = _2948___mcc_h1119;
                  {
                    if (object.Equals(_1474_fromTpe, _2949_b)) {
                      Dafny.ISequence<Dafny.Rune> _2950_recursiveGen;
                      bool _2951_recOwned;
                      bool _2952_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2953_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1417;
                      bool _out1418;
                      bool _out1419;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1420;
                      DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1417, out _out1418, out _out1419, out _out1420);
                      _2950_recursiveGen = _out1417;
                      _2951_recOwned = _out1418;
                      _2952_recErased = _out1419;
                      _2953_recIdents = _out1420;
                      Dafny.ISequence<Dafny.Rune> _2954_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1421;
                      _out1421 = DCOMP.COMP.GenType(_1473_toTpe, true, false);
                      _2954_rhsType = _out1421;
                      Dafny.ISequence<Dafny.Rune> _2955_uneraseFn;
                      _2955_uneraseFn = ((_2951_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2954_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2955_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2950_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2951_recOwned;
                      isErased = false;
                      readIdents = _2953_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1422;
                      bool _out1423;
                      bool _out1424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1425;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1475_expr, _1474_fromTpe, _2949_b), _2949_b, _1473_toTpe), selfIdent, @params, mustOwn, out _out1422, out _out1423, out _out1424, out _out1425);
                      s = _out1422;
                      isOwned = _out1423;
                      isErased = _out1424;
                      readIdents = _out1425;
                    }
                  }
                }
              } else if (_source149.is_Nullable) {
                DAST._IType _2956___mcc_h1121 = _source149.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2957_recursiveGen;
                  bool _2958_recOwned;
                  bool _2959_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2960_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1426;
                  bool _out1427;
                  bool _out1428;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1429;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1426, out _out1427, out _out1428, out _out1429);
                  _2957_recursiveGen = _out1426;
                  _2958_recOwned = _out1427;
                  _2959_recErased = _out1428;
                  _2960_recIdents = _out1429;
                  if (!(_2958_recOwned)) {
                    _2957_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2957_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2959_recErased;
                  readIdents = _2960_recIdents;
                }
              } else if (_source149.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2961___mcc_h1123 = _source149.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2962_recursiveGen;
                  bool _2963_recOwned;
                  bool _2964_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2965_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1430;
                  bool _out1431;
                  bool _out1432;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1433;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1430, out _out1431, out _out1432, out _out1433);
                  _2962_recursiveGen = _out1430;
                  _2963_recOwned = _out1431;
                  _2964_recErased = _out1432;
                  _2965_recIdents = _out1433;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2962_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2963_recOwned;
                  isErased = _2964_recErased;
                  readIdents = _2965_recIdents;
                }
              } else if (_source149.is_Array) {
                DAST._IType _2966___mcc_h1125 = _source149.dtor_element;
                BigInteger _2967___mcc_h1126 = _source149.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2968_recursiveGen;
                  bool _2969_recOwned;
                  bool _2970_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2971_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1434;
                  bool _out1435;
                  bool _out1436;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1437;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1434, out _out1435, out _out1436, out _out1437);
                  _2968_recursiveGen = _out1434;
                  _2969_recOwned = _out1435;
                  _2970_recErased = _out1436;
                  _2971_recIdents = _out1437;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2968_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2969_recOwned;
                  isErased = _2970_recErased;
                  readIdents = _2971_recIdents;
                }
              } else if (_source149.is_Seq) {
                DAST._IType _2972___mcc_h1129 = _source149.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2973_recursiveGen;
                  bool _2974_recOwned;
                  bool _2975_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2976_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1438;
                  bool _out1439;
                  bool _out1440;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1441;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1438, out _out1439, out _out1440, out _out1441);
                  _2973_recursiveGen = _out1438;
                  _2974_recOwned = _out1439;
                  _2975_recErased = _out1440;
                  _2976_recIdents = _out1441;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2973_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2974_recOwned;
                  isErased = _2975_recErased;
                  readIdents = _2976_recIdents;
                }
              } else if (_source149.is_Set) {
                DAST._IType _2977___mcc_h1131 = _source149.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2978_recursiveGen;
                  bool _2979_recOwned;
                  bool _2980_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2981_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1442;
                  bool _out1443;
                  bool _out1444;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1445;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1442, out _out1443, out _out1444, out _out1445);
                  _2978_recursiveGen = _out1442;
                  _2979_recOwned = _out1443;
                  _2980_recErased = _out1444;
                  _2981_recIdents = _out1445;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2979_recOwned;
                  isErased = _2980_recErased;
                  readIdents = _2981_recIdents;
                }
              } else if (_source149.is_Multiset) {
                DAST._IType _2982___mcc_h1133 = _source149.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2983_recursiveGen;
                  bool _2984_recOwned;
                  bool _2985_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2986_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1446;
                  bool _out1447;
                  bool _out1448;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1446, out _out1447, out _out1448, out _out1449);
                  _2983_recursiveGen = _out1446;
                  _2984_recOwned = _out1447;
                  _2985_recErased = _out1448;
                  _2986_recIdents = _out1449;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2983_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2984_recOwned;
                  isErased = _2985_recErased;
                  readIdents = _2986_recIdents;
                }
              } else if (_source149.is_Map) {
                DAST._IType _2987___mcc_h1135 = _source149.dtor_key;
                DAST._IType _2988___mcc_h1136 = _source149.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2989_recursiveGen;
                  bool _2990_recOwned;
                  bool _2991_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2992_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1450;
                  bool _out1451;
                  bool _out1452;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1453;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1450, out _out1451, out _out1452, out _out1453);
                  _2989_recursiveGen = _out1450;
                  _2990_recOwned = _out1451;
                  _2991_recErased = _out1452;
                  _2992_recIdents = _out1453;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2989_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2990_recOwned;
                  isErased = _2991_recErased;
                  readIdents = _2992_recIdents;
                }
              } else if (_source149.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2993___mcc_h1139 = _source149.dtor_args;
                DAST._IType _2994___mcc_h1140 = _source149.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2995_recursiveGen;
                  bool _2996_recOwned;
                  bool _2997_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2998_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1454;
                  bool _out1455;
                  bool _out1456;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1454, out _out1455, out _out1456, out _out1457);
                  _2995_recursiveGen = _out1454;
                  _2996_recOwned = _out1455;
                  _2997_recErased = _out1456;
                  _2998_recIdents = _out1457;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2995_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2996_recOwned;
                  isErased = _2997_recErased;
                  readIdents = _2998_recIdents;
                }
              } else if (_source149.is_Primitive) {
                DAST._IPrimitive _2999___mcc_h1143 = _source149.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3000_recursiveGen;
                  bool _3001_recOwned;
                  bool _3002_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3003_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1458;
                  bool _out1459;
                  bool _out1460;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1458, out _out1459, out _out1460, out _out1461);
                  _3000_recursiveGen = _out1458;
                  _3001_recOwned = _out1459;
                  _3002_recErased = _out1460;
                  _3003_recIdents = _out1461;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3000_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3001_recOwned;
                  isErased = _3002_recErased;
                  readIdents = _3003_recIdents;
                }
              } else if (_source149.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3004___mcc_h1145 = _source149.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3005_recursiveGen;
                  bool _3006_recOwned;
                  bool _3007_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3008_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1462;
                  bool _out1463;
                  bool _out1464;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1465;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1462, out _out1463, out _out1464, out _out1465);
                  _3005_recursiveGen = _out1462;
                  _3006_recOwned = _out1463;
                  _3007_recErased = _out1464;
                  _3008_recIdents = _out1465;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3005_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3006_recOwned;
                  isErased = _3007_recErased;
                  readIdents = _3008_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3009___mcc_h1147 = _source149.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3010_recursiveGen;
                  bool _3011_recOwned;
                  bool _3012_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3013_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1466;
                  bool _out1467;
                  bool _out1468;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
                  DCOMP.COMP.GenExpr(_1475_expr, selfIdent, @params, mustOwn, out _out1466, out _out1467, out _out1468, out _out1469);
                  _3010_recursiveGen = _out1466;
                  _3011_recOwned = _out1467;
                  _3012_recErased = _out1468;
                  _3013_recIdents = _out1469;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3010_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3011_recOwned;
                  isErased = _3012_recErased;
                  readIdents = _3013_recIdents;
                }
              }
            }
          }
        }
      } else if (_source101.is_SeqConstruct) {
        DAST._IExpression _3014___mcc_h26 = _source101.dtor_length;
        DAST._IExpression _3015___mcc_h27 = _source101.dtor_elem;
        DAST._IExpression _3016_expr = _3015___mcc_h27;
        DAST._IExpression _3017_length = _3014___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _3018_recursiveGen;
          bool _3019___v65;
          bool _3020_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3021_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1470;
          bool _out1471;
          bool _out1472;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1473;
          DCOMP.COMP.GenExpr(_3016_expr, selfIdent, @params, true, out _out1470, out _out1471, out _out1472, out _out1473);
          _3018_recursiveGen = _out1470;
          _3019___v65 = _out1471;
          _3020_eErased = _out1472;
          _3021_recIdents = _out1473;
          Dafny.ISequence<Dafny.Rune> _3022_lengthGen;
          bool _3023___v66;
          bool _3024_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3025_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1474;
          bool _out1475;
          bool _out1476;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1477;
          DCOMP.COMP.GenExpr(_3017_length, selfIdent, @params, true, out _out1474, out _out1475, out _out1476, out _out1477);
          _3022_lengthGen = _out1474;
          _3023___v66 = _out1475;
          _3024_lengthErased = _out1476;
          _3025_lengthIdents = _out1477;
          if (!(_3024_lengthErased)) {
            _3022_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3022_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _3018_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _3022_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3021_recIdents, _3025_lengthIdents);
          isOwned = true;
          isErased = _3020_eErased;
        }
      } else if (_source101.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3026___mcc_h28 = _source101.dtor_elements;
        DAST._IType _3027___mcc_h29 = _source101.dtor_typ;
        DAST._IType _3028_typ = _3027___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3029_exprs = _3026___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3030_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1478;
          _out1478 = DCOMP.COMP.GenType(_3028_typ, false, false);
          _3030_genTpe = _out1478;
          BigInteger _3031_i;
          _3031_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3031_i = BigInteger.Zero;
          while ((_3031_i) < (new BigInteger((_3029_exprs).Count))) {
            if ((_3031_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3032_recursiveGen;
            bool _3033___v67;
            bool _3034_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3035_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1479;
            bool _out1480;
            bool _out1481;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1482;
            DCOMP.COMP.GenExpr((_3029_exprs).Select(_3031_i), selfIdent, @params, true, out _out1479, out _out1480, out _out1481, out _out1482);
            _3032_recursiveGen = _out1479;
            _3033___v67 = _out1480;
            _3034_isErased = _out1481;
            _3035_recIdents = _out1482;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3035_recIdents);
            if (_3034_isErased) {
              _3032_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3032_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3032_recursiveGen);
            _3031_i = (_3031_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _3030_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source101.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3036___mcc_h30 = _source101.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3037_exprs = _3036___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _3038_generatedValues;
          _3038_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3039_i;
          _3039_i = BigInteger.Zero;
          bool _3040_allErased;
          _3040_allErased = true;
          while ((_3039_i) < (new BigInteger((_3037_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _3041_recursiveGen;
            bool _3042___v68;
            bool _3043_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3044_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1483;
            bool _out1484;
            bool _out1485;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1486;
            DCOMP.COMP.GenExpr((_3037_exprs).Select(_3039_i), selfIdent, @params, true, out _out1483, out _out1484, out _out1485, out _out1486);
            _3041_recursiveGen = _out1483;
            _3042___v68 = _out1484;
            _3043_isErased = _out1485;
            _3044_recIdents = _out1486;
            _3040_allErased = (_3040_allErased) && (_3043_isErased);
            _3038_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_3038_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_3041_recursiveGen, _3043_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3044_recIdents);
            _3039_i = (_3039_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3039_i = BigInteger.Zero;
          while ((_3039_i) < (new BigInteger((_3038_generatedValues).Count))) {
            if ((_3039_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3045_gen;
            _3045_gen = ((_3038_generatedValues).Select(_3039_i)).dtor__0;
            if ((((_3038_generatedValues).Select(_3039_i)).dtor__1) && (!(_3040_allErased))) {
              _3045_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3045_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3045_gen);
            _3039_i = (_3039_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _3040_allErased;
        }
      } else if (_source101.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3046___mcc_h31 = _source101.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3047_mapElems = _3046___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _3048_generatedValues;
          _3048_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3049_i;
          _3049_i = BigInteger.Zero;
          bool _3050_allErased;
          _3050_allErased = true;
          while ((_3049_i) < (new BigInteger((_3047_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _3051_recursiveGenKey;
            bool _3052___v69;
            bool _3053_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3054_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1487;
            bool _out1488;
            bool _out1489;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1490;
            DCOMP.COMP.GenExpr(((_3047_mapElems).Select(_3049_i)).dtor__0, selfIdent, @params, true, out _out1487, out _out1488, out _out1489, out _out1490);
            _3051_recursiveGenKey = _out1487;
            _3052___v69 = _out1488;
            _3053_isErasedKey = _out1489;
            _3054_recIdentsKey = _out1490;
            Dafny.ISequence<Dafny.Rune> _3055_recursiveGenValue;
            bool _3056___v70;
            bool _3057_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3058_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1491;
            bool _out1492;
            bool _out1493;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1494;
            DCOMP.COMP.GenExpr(((_3047_mapElems).Select(_3049_i)).dtor__1, selfIdent, @params, true, out _out1491, out _out1492, out _out1493, out _out1494);
            _3055_recursiveGenValue = _out1491;
            _3056___v70 = _out1492;
            _3057_isErasedValue = _out1493;
            _3058_recIdentsValue = _out1494;
            _3050_allErased = ((_3050_allErased) && (_3053_isErasedKey)) && (_3057_isErasedValue);
            _3048_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_3048_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_3051_recursiveGenKey, _3055_recursiveGenValue, _3053_isErasedKey, _3057_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3054_recIdentsKey), _3058_recIdentsValue);
            _3049_i = (_3049_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3049_i = BigInteger.Zero;
          while ((_3049_i) < (new BigInteger((_3048_generatedValues).Count))) {
            if ((_3049_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3059_genKey;
            _3059_genKey = ((_3048_generatedValues).Select(_3049_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _3060_genValue;
            _3060_genValue = ((_3048_generatedValues).Select(_3049_i)).dtor__1;
            if ((((_3048_generatedValues).Select(_3049_i)).dtor__2) && (!(_3050_allErased))) {
              _3059_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3059_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_3048_generatedValues).Select(_3049_i)).dtor__3) && (!(_3050_allErased))) {
              _3060_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3060_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3059_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3060_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3049_i = (_3049_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _3050_allErased;
        }
      } else if (_source101.is_This) {
        {
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _source151 = selfIdent;
          if (_source151.is_Some) {
            Dafny.ISequence<Dafny.Rune> _3061___mcc_h1149 = _source151.dtor_Some_a0;
            Dafny.ISequence<Dafny.Rune> _3062_id = _3061___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_3062_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_3062_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3062_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3062_id);
              isErased = false;
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          }
        }
      } else if (_source101.is_Ite) {
        DAST._IExpression _3063___mcc_h32 = _source101.dtor_cond;
        DAST._IExpression _3064___mcc_h33 = _source101.dtor_thn;
        DAST._IExpression _3065___mcc_h34 = _source101.dtor_els;
        DAST._IExpression _3066_f = _3065___mcc_h34;
        DAST._IExpression _3067_t = _3064___mcc_h33;
        DAST._IExpression _3068_cond = _3063___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _3069_condString;
          bool _3070___v71;
          bool _3071_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3072_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1495;
          bool _out1496;
          bool _out1497;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1498;
          DCOMP.COMP.GenExpr(_3068_cond, selfIdent, @params, true, out _out1495, out _out1496, out _out1497, out _out1498);
          _3069_condString = _out1495;
          _3070___v71 = _out1496;
          _3071_condErased = _out1497;
          _3072_recIdentsCond = _out1498;
          if (!(_3071_condErased)) {
            _3069_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3069_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _3073___v72;
          bool _3074_tHasToBeOwned;
          bool _3075___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3076___v74;
          Dafny.ISequence<Dafny.Rune> _out1499;
          bool _out1500;
          bool _out1501;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1502;
          DCOMP.COMP.GenExpr(_3067_t, selfIdent, @params, mustOwn, out _out1499, out _out1500, out _out1501, out _out1502);
          _3073___v72 = _out1499;
          _3074_tHasToBeOwned = _out1500;
          _3075___v73 = _out1501;
          _3076___v74 = _out1502;
          Dafny.ISequence<Dafny.Rune> _3077_fString;
          bool _3078_fOwned;
          bool _3079_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3080_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1503;
          bool _out1504;
          bool _out1505;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1506;
          DCOMP.COMP.GenExpr(_3066_f, selfIdent, @params, _3074_tHasToBeOwned, out _out1503, out _out1504, out _out1505, out _out1506);
          _3077_fString = _out1503;
          _3078_fOwned = _out1504;
          _3079_fErased = _out1505;
          _3080_recIdentsF = _out1506;
          Dafny.ISequence<Dafny.Rune> _3081_tString;
          bool _3082___v75;
          bool _3083_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3084_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1507;
          bool _out1508;
          bool _out1509;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1510;
          DCOMP.COMP.GenExpr(_3067_t, selfIdent, @params, _3078_fOwned, out _out1507, out _out1508, out _out1509, out _out1510);
          _3081_tString = _out1507;
          _3082___v75 = _out1508;
          _3083_tErased = _out1509;
          _3084_recIdentsT = _out1510;
          if ((!(_3079_fErased)) || (!(_3083_tErased))) {
            if (_3079_fErased) {
              _3077_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3077_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_3083_tErased) {
              _3081_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3081_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3069_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3081_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3077_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _3078_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3072_recIdentsCond, _3084_recIdentsT), _3080_recIdentsF);
          isErased = (_3079_fErased) || (_3083_tErased);
        }
      } else if (_source101.is_UnOp) {
        DAST._IUnaryOp _3085___mcc_h35 = _source101.dtor_unOp;
        DAST._IExpression _3086___mcc_h36 = _source101.dtor_expr;
        DAST._IUnaryOp _source152 = _3085___mcc_h35;
        if (_source152.is_Not) {
          DAST._IExpression _3087_e = _3086___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3088_recursiveGen;
            bool _3089___v76;
            bool _3090_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3091_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1511;
            bool _out1512;
            bool _out1513;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1514;
            DCOMP.COMP.GenExpr(_3087_e, selfIdent, @params, true, out _out1511, out _out1512, out _out1513, out _out1514);
            _3088_recursiveGen = _out1511;
            _3089___v76 = _out1512;
            _3090_recErased = _out1513;
            _3091_recIdents = _out1514;
            if (!(_3090_recErased)) {
              _3088_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3088_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3088_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3091_recIdents;
            isErased = true;
          }
        } else if (_source152.is_BitwiseNot) {
          DAST._IExpression _3092_e = _3086___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3093_recursiveGen;
            bool _3094___v77;
            bool _3095_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3096_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1515;
            bool _out1516;
            bool _out1517;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1518;
            DCOMP.COMP.GenExpr(_3092_e, selfIdent, @params, true, out _out1515, out _out1516, out _out1517, out _out1518);
            _3093_recursiveGen = _out1515;
            _3094___v77 = _out1516;
            _3095_recErased = _out1517;
            _3096_recIdents = _out1518;
            if (!(_3095_recErased)) {
              _3093_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3093_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _3093_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3096_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _3097_e = _3086___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3098_recursiveGen;
            bool _3099_recOwned;
            bool _3100_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3101_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1519;
            bool _out1520;
            bool _out1521;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1522;
            DCOMP.COMP.GenExpr(_3097_e, selfIdent, @params, false, out _out1519, out _out1520, out _out1521, out _out1522);
            _3098_recursiveGen = _out1519;
            _3099_recOwned = _out1520;
            _3100_recErased = _out1521;
            _3101_recIdents = _out1522;
            if (!(_3100_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3102_eraseFn;
              _3102_eraseFn = ((_3099_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3098_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3102_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3098_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3098_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3101_recIdents;
            isErased = true;
          }
        }
      } else if (_source101.is_BinOp) {
        DAST._IBinOp _3103___mcc_h37 = _source101.dtor_op;
        DAST._IExpression _3104___mcc_h38 = _source101.dtor_left;
        DAST._IExpression _3105___mcc_h39 = _source101.dtor_right;
        DAST._IExpression _3106_r = _3105___mcc_h39;
        DAST._IExpression _3107_l = _3104___mcc_h38;
        DAST._IBinOp _3108_op = _3103___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _3109_left;
          bool _3110___v78;
          bool _3111_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3112_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1523;
          bool _out1524;
          bool _out1525;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1526;
          DCOMP.COMP.GenExpr(_3107_l, selfIdent, @params, true, out _out1523, out _out1524, out _out1525, out _out1526);
          _3109_left = _out1523;
          _3110___v78 = _out1524;
          _3111_leftErased = _out1525;
          _3112_recIdentsL = _out1526;
          Dafny.ISequence<Dafny.Rune> _3113_right;
          bool _3114___v79;
          bool _3115_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3116_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1527;
          bool _out1528;
          bool _out1529;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1530;
          DCOMP.COMP.GenExpr(_3106_r, selfIdent, @params, true, out _out1527, out _out1528, out _out1529, out _out1530);
          _3113_right = _out1527;
          _3114___v79 = _out1528;
          _3115_rightErased = _out1529;
          _3116_recIdentsR = _out1530;
          DAST._IBinOp _source153 = _3108_op;
          if (_source153.is_Eq) {
            bool _3117___mcc_h1150 = _source153.dtor_referential;
            bool _3118___mcc_h1151 = _source153.dtor_nullable;
            {
              if (!(_3111_leftErased)) {
                _3109_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3115_rightErased)) {
                _3113_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source154 = _3108_op;
              if (_source154.is_Eq) {
                bool _3119___mcc_h1160 = _source154.dtor_referential;
                bool _3120___mcc_h1161 = _source154.dtor_nullable;
                bool _3121_nullable = _3120___mcc_h1161;
                bool _3122_referential = _3119___mcc_h1160;
                {
                  if (_3122_referential) {
                    if (_3121_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3113_right);
                  }
                }
              } else if (_source154.is_Neq) {
                bool _3123___mcc_h1162 = _source154.dtor_referential;
                bool _3124___mcc_h1163 = _source154.dtor_nullable;
                bool _3125_nullable = _3124___mcc_h1163;
                bool _3126_referential = _3123___mcc_h1162;
                {
                  if (_3126_referential) {
                    if (_3125_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3113_right);
                  }
                }
              } else if (_source154.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source154.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source154.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source154.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3127___mcc_h1164 = _source154.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3128_op = _3127___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3128_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source153.is_Neq) {
            bool _3129___mcc_h1154 = _source153.dtor_referential;
            bool _3130___mcc_h1155 = _source153.dtor_nullable;
            {
              if (!(_3111_leftErased)) {
                _3109_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3115_rightErased)) {
                _3113_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source155 = _3108_op;
              if (_source155.is_Eq) {
                bool _3131___mcc_h1165 = _source155.dtor_referential;
                bool _3132___mcc_h1166 = _source155.dtor_nullable;
                bool _3133_nullable = _3132___mcc_h1166;
                bool _3134_referential = _3131___mcc_h1165;
                {
                  if (_3134_referential) {
                    if (_3133_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3113_right);
                  }
                }
              } else if (_source155.is_Neq) {
                bool _3135___mcc_h1167 = _source155.dtor_referential;
                bool _3136___mcc_h1168 = _source155.dtor_nullable;
                bool _3137_nullable = _3136___mcc_h1168;
                bool _3138_referential = _3135___mcc_h1167;
                {
                  if (_3138_referential) {
                    if (_3137_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3113_right);
                  }
                }
              } else if (_source155.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source155.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source155.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source155.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3139___mcc_h1169 = _source155.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3140_op = _3139___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3140_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source153.is_Div) {
            {
              if (!(_3111_leftErased)) {
                _3109_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3115_rightErased)) {
                _3113_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source156 = _3108_op;
              if (_source156.is_Eq) {
                bool _3141___mcc_h1170 = _source156.dtor_referential;
                bool _3142___mcc_h1171 = _source156.dtor_nullable;
                bool _3143_nullable = _3142___mcc_h1171;
                bool _3144_referential = _3141___mcc_h1170;
                {
                  if (_3144_referential) {
                    if (_3143_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3113_right);
                  }
                }
              } else if (_source156.is_Neq) {
                bool _3145___mcc_h1172 = _source156.dtor_referential;
                bool _3146___mcc_h1173 = _source156.dtor_nullable;
                bool _3147_nullable = _3146___mcc_h1173;
                bool _3148_referential = _3145___mcc_h1172;
                {
                  if (_3148_referential) {
                    if (_3147_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3113_right);
                  }
                }
              } else if (_source156.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source156.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source156.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source156.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3149___mcc_h1174 = _source156.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3150_op = _3149___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3150_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source153.is_EuclidianDiv) {
            {
              if (!(_3111_leftErased)) {
                _3109_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3115_rightErased)) {
                _3113_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source157 = _3108_op;
              if (_source157.is_Eq) {
                bool _3151___mcc_h1175 = _source157.dtor_referential;
                bool _3152___mcc_h1176 = _source157.dtor_nullable;
                bool _3153_nullable = _3152___mcc_h1176;
                bool _3154_referential = _3151___mcc_h1175;
                {
                  if (_3154_referential) {
                    if (_3153_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3113_right);
                  }
                }
              } else if (_source157.is_Neq) {
                bool _3155___mcc_h1177 = _source157.dtor_referential;
                bool _3156___mcc_h1178 = _source157.dtor_nullable;
                bool _3157_nullable = _3156___mcc_h1178;
                bool _3158_referential = _3155___mcc_h1177;
                {
                  if (_3158_referential) {
                    if (_3157_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3113_right);
                  }
                }
              } else if (_source157.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source157.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source157.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source157.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3159___mcc_h1179 = _source157.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3160_op = _3159___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3160_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source153.is_Mod) {
            {
              if (!(_3111_leftErased)) {
                _3109_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3115_rightErased)) {
                _3113_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source158 = _3108_op;
              if (_source158.is_Eq) {
                bool _3161___mcc_h1180 = _source158.dtor_referential;
                bool _3162___mcc_h1181 = _source158.dtor_nullable;
                bool _3163_nullable = _3162___mcc_h1181;
                bool _3164_referential = _3161___mcc_h1180;
                {
                  if (_3164_referential) {
                    if (_3163_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3113_right);
                  }
                }
              } else if (_source158.is_Neq) {
                bool _3165___mcc_h1182 = _source158.dtor_referential;
                bool _3166___mcc_h1183 = _source158.dtor_nullable;
                bool _3167_nullable = _3166___mcc_h1183;
                bool _3168_referential = _3165___mcc_h1182;
                {
                  if (_3168_referential) {
                    if (_3167_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3113_right);
                  }
                }
              } else if (_source158.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source158.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source158.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source158.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3169___mcc_h1184 = _source158.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3170_op = _3169___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3170_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source153.is_EuclidianMod) {
            {
              if (!(_3111_leftErased)) {
                _3109_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3115_rightErased)) {
                _3113_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source159 = _3108_op;
              if (_source159.is_Eq) {
                bool _3171___mcc_h1185 = _source159.dtor_referential;
                bool _3172___mcc_h1186 = _source159.dtor_nullable;
                bool _3173_nullable = _3172___mcc_h1186;
                bool _3174_referential = _3171___mcc_h1185;
                {
                  if (_3174_referential) {
                    if (_3173_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3113_right);
                  }
                }
              } else if (_source159.is_Neq) {
                bool _3175___mcc_h1187 = _source159.dtor_referential;
                bool _3176___mcc_h1188 = _source159.dtor_nullable;
                bool _3177_nullable = _3176___mcc_h1188;
                bool _3178_referential = _3175___mcc_h1187;
                {
                  if (_3178_referential) {
                    if (_3177_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3113_right);
                  }
                }
              } else if (_source159.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source159.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source159.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source159.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3179___mcc_h1189 = _source159.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3180_op = _3179___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3180_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source153.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _3113_right);
            }
          } else if (_source153.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3113_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source153.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source153.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source153.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3181___mcc_h1158 = _source153.dtor_Passthrough_a0;
            {
              if (!(_3111_leftErased)) {
                _3109_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3115_rightErased)) {
                _3113_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source160 = _3108_op;
              if (_source160.is_Eq) {
                bool _3182___mcc_h1190 = _source160.dtor_referential;
                bool _3183___mcc_h1191 = _source160.dtor_nullable;
                bool _3184_nullable = _3183___mcc_h1191;
                bool _3185_referential = _3182___mcc_h1190;
                {
                  if (_3185_referential) {
                    if (_3184_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3113_right);
                  }
                }
              } else if (_source160.is_Neq) {
                bool _3186___mcc_h1192 = _source160.dtor_referential;
                bool _3187___mcc_h1193 = _source160.dtor_nullable;
                bool _3188_nullable = _3187___mcc_h1193;
                bool _3189_referential = _3186___mcc_h1192;
                {
                  if (_3189_referential) {
                    if (_3188_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3109_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3113_right);
                  }
                }
              } else if (_source160.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source160.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3190___mcc_h1194 = _source160.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3191_op = _3190___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3109_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3191_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3113_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3112_recIdentsL, _3116_recIdentsR);
          isErased = true;
        }
      } else if (_source101.is_ArrayLen) {
        DAST._IExpression _3192___mcc_h40 = _source101.dtor_expr;
        BigInteger _3193___mcc_h41 = _source101.dtor_dim;
        BigInteger _3194_dim = _3193___mcc_h41;
        DAST._IExpression _3195_expr = _3192___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _3196_recursiveGen;
          bool _3197___v81;
          bool _3198_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3199_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1531;
          bool _out1532;
          bool _out1533;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1534;
          DCOMP.COMP.GenExpr(_3195_expr, selfIdent, @params, true, out _out1531, out _out1532, out _out1533, out _out1534);
          _3196_recursiveGen = _out1531;
          _3197___v81 = _out1532;
          _3198_recErased = _out1533;
          _3199_recIdents = _out1534;
          if ((_3194_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3196_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _3200_i;
            _3200_i = BigInteger.One;
            while ((_3200_i) < (_3194_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3200_i = (_3200_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3196_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _3199_recIdents;
          isErased = true;
        }
      } else if (_source101.is_Select) {
        DAST._IExpression _3201___mcc_h42 = _source101.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3202___mcc_h43 = _source101.dtor_field;
        bool _3203___mcc_h44 = _source101.dtor_isConstant;
        bool _3204___mcc_h45 = _source101.dtor_onDatatype;
        DAST._IExpression _source161 = _3201___mcc_h42;
        if (_source161.is_Literal) {
          DAST._ILiteral _3205___mcc_h46 = _source161.dtor_Literal_a0;
          bool _3206_isDatatype = _3204___mcc_h45;
          bool _3207_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3208_field = _3202___mcc_h43;
          DAST._IExpression _3209_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3210_onString;
            bool _3211_onOwned;
            bool _3212_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3213_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1535;
            bool _out1536;
            bool _out1537;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1538;
            DCOMP.COMP.GenExpr(_3209_on, selfIdent, @params, false, out _out1535, out _out1536, out _out1537, out _out1538);
            _3210_onString = _out1535;
            _3211_onOwned = _out1536;
            _3212_onErased = _out1537;
            _3213_recIdents = _out1538;
            if ((_3206_isDatatype) || (_3207_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3210_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3208_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3207_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3210_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3208_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3213_recIdents;
          }
        } else if (_source161.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3214___mcc_h48 = _source161.dtor_Ident_a0;
          bool _3215_isDatatype = _3204___mcc_h45;
          bool _3216_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3217_field = _3202___mcc_h43;
          DAST._IExpression _3218_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3219_onString;
            bool _3220_onOwned;
            bool _3221_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3222_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1539;
            bool _out1540;
            bool _out1541;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1542;
            DCOMP.COMP.GenExpr(_3218_on, selfIdent, @params, false, out _out1539, out _out1540, out _out1541, out _out1542);
            _3219_onString = _out1539;
            _3220_onOwned = _out1540;
            _3221_onErased = _out1541;
            _3222_recIdents = _out1542;
            if ((_3215_isDatatype) || (_3216_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3219_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3217_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3216_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3219_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3217_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3222_recIdents;
          }
        } else if (_source161.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3223___mcc_h50 = _source161.dtor_Companion_a0;
          bool _3224_isDatatype = _3204___mcc_h45;
          bool _3225_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3226_field = _3202___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3227_c = _3223___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _3228_onString;
            bool _3229_onOwned;
            bool _3230_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3231_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1543;
            bool _out1544;
            bool _out1545;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1546;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3227_c), selfIdent, @params, false, out _out1543, out _out1544, out _out1545, out _out1546);
            _3228_onString = _out1543;
            _3229_onOwned = _out1544;
            _3230_onErased = _out1545;
            _3231_recIdents = _out1546;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3228_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3226_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3231_recIdents;
          }
        } else if (_source161.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3232___mcc_h52 = _source161.dtor_Tuple_a0;
          bool _3233_isDatatype = _3204___mcc_h45;
          bool _3234_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3235_field = _3202___mcc_h43;
          DAST._IExpression _3236_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3237_onString;
            bool _3238_onOwned;
            bool _3239_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3240_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1547;
            bool _out1548;
            bool _out1549;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1550;
            DCOMP.COMP.GenExpr(_3236_on, selfIdent, @params, false, out _out1547, out _out1548, out _out1549, out _out1550);
            _3237_onString = _out1547;
            _3238_onOwned = _out1548;
            _3239_onErased = _out1549;
            _3240_recIdents = _out1550;
            if ((_3233_isDatatype) || (_3234_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3237_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3235_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3234_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3237_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3235_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3240_recIdents;
          }
        } else if (_source161.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3241___mcc_h54 = _source161.dtor_path;
          Dafny.ISequence<DAST._IType> _3242___mcc_h55 = _source161.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3243___mcc_h56 = _source161.dtor_args;
          bool _3244_isDatatype = _3204___mcc_h45;
          bool _3245_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3246_field = _3202___mcc_h43;
          DAST._IExpression _3247_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3248_onString;
            bool _3249_onOwned;
            bool _3250_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3251_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1551;
            bool _out1552;
            bool _out1553;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1554;
            DCOMP.COMP.GenExpr(_3247_on, selfIdent, @params, false, out _out1551, out _out1552, out _out1553, out _out1554);
            _3248_onString = _out1551;
            _3249_onOwned = _out1552;
            _3250_onErased = _out1553;
            _3251_recIdents = _out1554;
            if ((_3244_isDatatype) || (_3245_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3248_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3246_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3245_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3248_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3246_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3251_recIdents;
          }
        } else if (_source161.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3252___mcc_h60 = _source161.dtor_dims;
          DAST._IType _3253___mcc_h61 = _source161.dtor_typ;
          bool _3254_isDatatype = _3204___mcc_h45;
          bool _3255_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3256_field = _3202___mcc_h43;
          DAST._IExpression _3257_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3258_onString;
            bool _3259_onOwned;
            bool _3260_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3261_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1555;
            bool _out1556;
            bool _out1557;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1558;
            DCOMP.COMP.GenExpr(_3257_on, selfIdent, @params, false, out _out1555, out _out1556, out _out1557, out _out1558);
            _3258_onString = _out1555;
            _3259_onOwned = _out1556;
            _3260_onErased = _out1557;
            _3261_recIdents = _out1558;
            if ((_3254_isDatatype) || (_3255_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3258_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3256_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3255_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3258_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3256_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3261_recIdents;
          }
        } else if (_source161.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3262___mcc_h64 = _source161.dtor_path;
          Dafny.ISequence<DAST._IType> _3263___mcc_h65 = _source161.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3264___mcc_h66 = _source161.dtor_variant;
          bool _3265___mcc_h67 = _source161.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3266___mcc_h68 = _source161.dtor_contents;
          bool _3267_isDatatype = _3204___mcc_h45;
          bool _3268_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3269_field = _3202___mcc_h43;
          DAST._IExpression _3270_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3271_onString;
            bool _3272_onOwned;
            bool _3273_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3274_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1559;
            bool _out1560;
            bool _out1561;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1562;
            DCOMP.COMP.GenExpr(_3270_on, selfIdent, @params, false, out _out1559, out _out1560, out _out1561, out _out1562);
            _3271_onString = _out1559;
            _3272_onOwned = _out1560;
            _3273_onErased = _out1561;
            _3274_recIdents = _out1562;
            if ((_3267_isDatatype) || (_3268_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3271_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3269_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3268_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3271_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3269_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3274_recIdents;
          }
        } else if (_source161.is_Convert) {
          DAST._IExpression _3275___mcc_h74 = _source161.dtor_value;
          DAST._IType _3276___mcc_h75 = _source161.dtor_from;
          DAST._IType _3277___mcc_h76 = _source161.dtor_typ;
          bool _3278_isDatatype = _3204___mcc_h45;
          bool _3279_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3280_field = _3202___mcc_h43;
          DAST._IExpression _3281_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3282_onString;
            bool _3283_onOwned;
            bool _3284_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3285_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1563;
            bool _out1564;
            bool _out1565;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1566;
            DCOMP.COMP.GenExpr(_3281_on, selfIdent, @params, false, out _out1563, out _out1564, out _out1565, out _out1566);
            _3282_onString = _out1563;
            _3283_onOwned = _out1564;
            _3284_onErased = _out1565;
            _3285_recIdents = _out1566;
            if ((_3278_isDatatype) || (_3279_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3282_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3280_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3279_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3282_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3280_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3285_recIdents;
          }
        } else if (_source161.is_SeqConstruct) {
          DAST._IExpression _3286___mcc_h80 = _source161.dtor_length;
          DAST._IExpression _3287___mcc_h81 = _source161.dtor_elem;
          bool _3288_isDatatype = _3204___mcc_h45;
          bool _3289_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3290_field = _3202___mcc_h43;
          DAST._IExpression _3291_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3292_onString;
            bool _3293_onOwned;
            bool _3294_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3295_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1567;
            bool _out1568;
            bool _out1569;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1570;
            DCOMP.COMP.GenExpr(_3291_on, selfIdent, @params, false, out _out1567, out _out1568, out _out1569, out _out1570);
            _3292_onString = _out1567;
            _3293_onOwned = _out1568;
            _3294_onErased = _out1569;
            _3295_recIdents = _out1570;
            if ((_3288_isDatatype) || (_3289_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3292_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3290_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3289_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3292_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3290_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3295_recIdents;
          }
        } else if (_source161.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3296___mcc_h84 = _source161.dtor_elements;
          DAST._IType _3297___mcc_h85 = _source161.dtor_typ;
          bool _3298_isDatatype = _3204___mcc_h45;
          bool _3299_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3300_field = _3202___mcc_h43;
          DAST._IExpression _3301_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3302_onString;
            bool _3303_onOwned;
            bool _3304_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3305_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1571;
            bool _out1572;
            bool _out1573;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1574;
            DCOMP.COMP.GenExpr(_3301_on, selfIdent, @params, false, out _out1571, out _out1572, out _out1573, out _out1574);
            _3302_onString = _out1571;
            _3303_onOwned = _out1572;
            _3304_onErased = _out1573;
            _3305_recIdents = _out1574;
            if ((_3298_isDatatype) || (_3299_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3299_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3305_recIdents;
          }
        } else if (_source161.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3306___mcc_h88 = _source161.dtor_elements;
          bool _3307_isDatatype = _3204___mcc_h45;
          bool _3308_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3309_field = _3202___mcc_h43;
          DAST._IExpression _3310_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3311_onString;
            bool _3312_onOwned;
            bool _3313_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3314_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1575;
            bool _out1576;
            bool _out1577;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1578;
            DCOMP.COMP.GenExpr(_3310_on, selfIdent, @params, false, out _out1575, out _out1576, out _out1577, out _out1578);
            _3311_onString = _out1575;
            _3312_onOwned = _out1576;
            _3313_onErased = _out1577;
            _3314_recIdents = _out1578;
            if ((_3307_isDatatype) || (_3308_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3311_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3309_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3308_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3311_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3309_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3314_recIdents;
          }
        } else if (_source161.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3315___mcc_h90 = _source161.dtor_mapElems;
          bool _3316_isDatatype = _3204___mcc_h45;
          bool _3317_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3318_field = _3202___mcc_h43;
          DAST._IExpression _3319_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3320_onString;
            bool _3321_onOwned;
            bool _3322_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3323_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1579;
            bool _out1580;
            bool _out1581;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1582;
            DCOMP.COMP.GenExpr(_3319_on, selfIdent, @params, false, out _out1579, out _out1580, out _out1581, out _out1582);
            _3320_onString = _out1579;
            _3321_onOwned = _out1580;
            _3322_onErased = _out1581;
            _3323_recIdents = _out1582;
            if ((_3316_isDatatype) || (_3317_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3320_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3318_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3317_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3320_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3318_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3323_recIdents;
          }
        } else if (_source161.is_This) {
          bool _3324_isDatatype = _3204___mcc_h45;
          bool _3325_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3326_field = _3202___mcc_h43;
          DAST._IExpression _3327_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3328_onString;
            bool _3329_onOwned;
            bool _3330_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3331_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1583;
            bool _out1584;
            bool _out1585;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1586;
            DCOMP.COMP.GenExpr(_3327_on, selfIdent, @params, false, out _out1583, out _out1584, out _out1585, out _out1586);
            _3328_onString = _out1583;
            _3329_onOwned = _out1584;
            _3330_onErased = _out1585;
            _3331_recIdents = _out1586;
            if ((_3324_isDatatype) || (_3325_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3328_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3326_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3325_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3328_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3326_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3331_recIdents;
          }
        } else if (_source161.is_Ite) {
          DAST._IExpression _3332___mcc_h92 = _source161.dtor_cond;
          DAST._IExpression _3333___mcc_h93 = _source161.dtor_thn;
          DAST._IExpression _3334___mcc_h94 = _source161.dtor_els;
          bool _3335_isDatatype = _3204___mcc_h45;
          bool _3336_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3337_field = _3202___mcc_h43;
          DAST._IExpression _3338_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3339_onString;
            bool _3340_onOwned;
            bool _3341_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3342_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1587;
            bool _out1588;
            bool _out1589;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
            DCOMP.COMP.GenExpr(_3338_on, selfIdent, @params, false, out _out1587, out _out1588, out _out1589, out _out1590);
            _3339_onString = _out1587;
            _3340_onOwned = _out1588;
            _3341_onErased = _out1589;
            _3342_recIdents = _out1590;
            if ((_3335_isDatatype) || (_3336_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3339_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3337_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3336_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3339_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3337_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3342_recIdents;
          }
        } else if (_source161.is_UnOp) {
          DAST._IUnaryOp _3343___mcc_h98 = _source161.dtor_unOp;
          DAST._IExpression _3344___mcc_h99 = _source161.dtor_expr;
          bool _3345_isDatatype = _3204___mcc_h45;
          bool _3346_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3347_field = _3202___mcc_h43;
          DAST._IExpression _3348_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3349_onString;
            bool _3350_onOwned;
            bool _3351_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3352_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1591;
            bool _out1592;
            bool _out1593;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1594;
            DCOMP.COMP.GenExpr(_3348_on, selfIdent, @params, false, out _out1591, out _out1592, out _out1593, out _out1594);
            _3349_onString = _out1591;
            _3350_onOwned = _out1592;
            _3351_onErased = _out1593;
            _3352_recIdents = _out1594;
            if ((_3345_isDatatype) || (_3346_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3349_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3347_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3346_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3349_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3347_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3352_recIdents;
          }
        } else if (_source161.is_BinOp) {
          DAST._IBinOp _3353___mcc_h102 = _source161.dtor_op;
          DAST._IExpression _3354___mcc_h103 = _source161.dtor_left;
          DAST._IExpression _3355___mcc_h104 = _source161.dtor_right;
          bool _3356_isDatatype = _3204___mcc_h45;
          bool _3357_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3358_field = _3202___mcc_h43;
          DAST._IExpression _3359_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3360_onString;
            bool _3361_onOwned;
            bool _3362_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3363_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1595;
            bool _out1596;
            bool _out1597;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1598;
            DCOMP.COMP.GenExpr(_3359_on, selfIdent, @params, false, out _out1595, out _out1596, out _out1597, out _out1598);
            _3360_onString = _out1595;
            _3361_onOwned = _out1596;
            _3362_onErased = _out1597;
            _3363_recIdents = _out1598;
            if ((_3356_isDatatype) || (_3357_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3360_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3358_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3357_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3360_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3358_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3363_recIdents;
          }
        } else if (_source161.is_ArrayLen) {
          DAST._IExpression _3364___mcc_h108 = _source161.dtor_expr;
          BigInteger _3365___mcc_h109 = _source161.dtor_dim;
          bool _3366_isDatatype = _3204___mcc_h45;
          bool _3367_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3368_field = _3202___mcc_h43;
          DAST._IExpression _3369_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3370_onString;
            bool _3371_onOwned;
            bool _3372_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3373_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1599;
            bool _out1600;
            bool _out1601;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1602;
            DCOMP.COMP.GenExpr(_3369_on, selfIdent, @params, false, out _out1599, out _out1600, out _out1601, out _out1602);
            _3370_onString = _out1599;
            _3371_onOwned = _out1600;
            _3372_onErased = _out1601;
            _3373_recIdents = _out1602;
            if ((_3366_isDatatype) || (_3367_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3370_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3368_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3367_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3370_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3368_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3373_recIdents;
          }
        } else if (_source161.is_Select) {
          DAST._IExpression _3374___mcc_h112 = _source161.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3375___mcc_h113 = _source161.dtor_field;
          bool _3376___mcc_h114 = _source161.dtor_isConstant;
          bool _3377___mcc_h115 = _source161.dtor_onDatatype;
          bool _3378_isDatatype = _3204___mcc_h45;
          bool _3379_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3380_field = _3202___mcc_h43;
          DAST._IExpression _3381_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3382_onString;
            bool _3383_onOwned;
            bool _3384_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3385_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1603;
            bool _out1604;
            bool _out1605;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1606;
            DCOMP.COMP.GenExpr(_3381_on, selfIdent, @params, false, out _out1603, out _out1604, out _out1605, out _out1606);
            _3382_onString = _out1603;
            _3383_onOwned = _out1604;
            _3384_onErased = _out1605;
            _3385_recIdents = _out1606;
            if ((_3378_isDatatype) || (_3379_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3382_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3380_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3379_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3382_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3380_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3385_recIdents;
          }
        } else if (_source161.is_SelectFn) {
          DAST._IExpression _3386___mcc_h120 = _source161.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3387___mcc_h121 = _source161.dtor_field;
          bool _3388___mcc_h122 = _source161.dtor_onDatatype;
          bool _3389___mcc_h123 = _source161.dtor_isStatic;
          BigInteger _3390___mcc_h124 = _source161.dtor_arity;
          bool _3391_isDatatype = _3204___mcc_h45;
          bool _3392_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3393_field = _3202___mcc_h43;
          DAST._IExpression _3394_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3395_onString;
            bool _3396_onOwned;
            bool _3397_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3398_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1607;
            bool _out1608;
            bool _out1609;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1610;
            DCOMP.COMP.GenExpr(_3394_on, selfIdent, @params, false, out _out1607, out _out1608, out _out1609, out _out1610);
            _3395_onString = _out1607;
            _3396_onOwned = _out1608;
            _3397_onErased = _out1609;
            _3398_recIdents = _out1610;
            if ((_3391_isDatatype) || (_3392_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3395_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3393_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3392_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3395_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3393_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3398_recIdents;
          }
        } else if (_source161.is_Index) {
          DAST._IExpression _3399___mcc_h130 = _source161.dtor_expr;
          DAST._ICollKind _3400___mcc_h131 = _source161.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3401___mcc_h132 = _source161.dtor_indices;
          bool _3402_isDatatype = _3204___mcc_h45;
          bool _3403_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3404_field = _3202___mcc_h43;
          DAST._IExpression _3405_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3406_onString;
            bool _3407_onOwned;
            bool _3408_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3409_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1611;
            bool _out1612;
            bool _out1613;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1614;
            DCOMP.COMP.GenExpr(_3405_on, selfIdent, @params, false, out _out1611, out _out1612, out _out1613, out _out1614);
            _3406_onString = _out1611;
            _3407_onOwned = _out1612;
            _3408_onErased = _out1613;
            _3409_recIdents = _out1614;
            if ((_3402_isDatatype) || (_3403_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3406_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3404_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3403_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3406_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3404_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3409_recIdents;
          }
        } else if (_source161.is_IndexRange) {
          DAST._IExpression _3410___mcc_h136 = _source161.dtor_expr;
          bool _3411___mcc_h137 = _source161.dtor_isArray;
          DAST._IOptional<DAST._IExpression> _3412___mcc_h138 = _source161.dtor_low;
          DAST._IOptional<DAST._IExpression> _3413___mcc_h139 = _source161.dtor_high;
          bool _3414_isDatatype = _3204___mcc_h45;
          bool _3415_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3416_field = _3202___mcc_h43;
          DAST._IExpression _3417_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3418_onString;
            bool _3419_onOwned;
            bool _3420_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3421_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1615;
            bool _out1616;
            bool _out1617;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
            DCOMP.COMP.GenExpr(_3417_on, selfIdent, @params, false, out _out1615, out _out1616, out _out1617, out _out1618);
            _3418_onString = _out1615;
            _3419_onOwned = _out1616;
            _3420_onErased = _out1617;
            _3421_recIdents = _out1618;
            if ((_3414_isDatatype) || (_3415_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3418_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3416_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3415_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3418_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3416_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3421_recIdents;
          }
        } else if (_source161.is_TupleSelect) {
          DAST._IExpression _3422___mcc_h144 = _source161.dtor_expr;
          BigInteger _3423___mcc_h145 = _source161.dtor_index;
          bool _3424_isDatatype = _3204___mcc_h45;
          bool _3425_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3426_field = _3202___mcc_h43;
          DAST._IExpression _3427_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3428_onString;
            bool _3429_onOwned;
            bool _3430_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3431_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1619;
            bool _out1620;
            bool _out1621;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1622;
            DCOMP.COMP.GenExpr(_3427_on, selfIdent, @params, false, out _out1619, out _out1620, out _out1621, out _out1622);
            _3428_onString = _out1619;
            _3429_onOwned = _out1620;
            _3430_onErased = _out1621;
            _3431_recIdents = _out1622;
            if ((_3424_isDatatype) || (_3425_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3428_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3426_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3425_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3428_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3426_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3431_recIdents;
          }
        } else if (_source161.is_Call) {
          DAST._IExpression _3432___mcc_h148 = _source161.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3433___mcc_h149 = _source161.dtor_name;
          Dafny.ISequence<DAST._IType> _3434___mcc_h150 = _source161.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3435___mcc_h151 = _source161.dtor_args;
          bool _3436_isDatatype = _3204___mcc_h45;
          bool _3437_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3438_field = _3202___mcc_h43;
          DAST._IExpression _3439_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3440_onString;
            bool _3441_onOwned;
            bool _3442_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3443_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1623;
            bool _out1624;
            bool _out1625;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1626;
            DCOMP.COMP.GenExpr(_3439_on, selfIdent, @params, false, out _out1623, out _out1624, out _out1625, out _out1626);
            _3440_onString = _out1623;
            _3441_onOwned = _out1624;
            _3442_onErased = _out1625;
            _3443_recIdents = _out1626;
            if ((_3436_isDatatype) || (_3437_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3440_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3438_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3437_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3440_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3438_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3443_recIdents;
          }
        } else if (_source161.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3444___mcc_h156 = _source161.dtor_params;
          DAST._IType _3445___mcc_h157 = _source161.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3446___mcc_h158 = _source161.dtor_body;
          bool _3447_isDatatype = _3204___mcc_h45;
          bool _3448_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3449_field = _3202___mcc_h43;
          DAST._IExpression _3450_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3451_onString;
            bool _3452_onOwned;
            bool _3453_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3454_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1627;
            bool _out1628;
            bool _out1629;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1630;
            DCOMP.COMP.GenExpr(_3450_on, selfIdent, @params, false, out _out1627, out _out1628, out _out1629, out _out1630);
            _3451_onString = _out1627;
            _3452_onOwned = _out1628;
            _3453_onErased = _out1629;
            _3454_recIdents = _out1630;
            if ((_3447_isDatatype) || (_3448_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3451_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3449_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3448_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3451_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3449_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3454_recIdents;
          }
        } else if (_source161.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3455___mcc_h162 = _source161.dtor_values;
          DAST._IType _3456___mcc_h163 = _source161.dtor_retType;
          DAST._IExpression _3457___mcc_h164 = _source161.dtor_expr;
          bool _3458_isDatatype = _3204___mcc_h45;
          bool _3459_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3460_field = _3202___mcc_h43;
          DAST._IExpression _3461_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3462_onString;
            bool _3463_onOwned;
            bool _3464_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3465_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1631;
            bool _out1632;
            bool _out1633;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1634;
            DCOMP.COMP.GenExpr(_3461_on, selfIdent, @params, false, out _out1631, out _out1632, out _out1633, out _out1634);
            _3462_onString = _out1631;
            _3463_onOwned = _out1632;
            _3464_onErased = _out1633;
            _3465_recIdents = _out1634;
            if ((_3458_isDatatype) || (_3459_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3462_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3460_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3459_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3462_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3460_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3465_recIdents;
          }
        } else if (_source161.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3466___mcc_h168 = _source161.dtor_name;
          DAST._IType _3467___mcc_h169 = _source161.dtor_typ;
          DAST._IExpression _3468___mcc_h170 = _source161.dtor_value;
          DAST._IExpression _3469___mcc_h171 = _source161.dtor_iifeBody;
          bool _3470_isDatatype = _3204___mcc_h45;
          bool _3471_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3472_field = _3202___mcc_h43;
          DAST._IExpression _3473_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3474_onString;
            bool _3475_onOwned;
            bool _3476_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3477_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1635;
            bool _out1636;
            bool _out1637;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1638;
            DCOMP.COMP.GenExpr(_3473_on, selfIdent, @params, false, out _out1635, out _out1636, out _out1637, out _out1638);
            _3474_onString = _out1635;
            _3475_onOwned = _out1636;
            _3476_onErased = _out1637;
            _3477_recIdents = _out1638;
            if ((_3470_isDatatype) || (_3471_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3474_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3472_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3471_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3474_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3472_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3477_recIdents;
          }
        } else if (_source161.is_Apply) {
          DAST._IExpression _3478___mcc_h176 = _source161.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3479___mcc_h177 = _source161.dtor_args;
          bool _3480_isDatatype = _3204___mcc_h45;
          bool _3481_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3482_field = _3202___mcc_h43;
          DAST._IExpression _3483_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3484_onString;
            bool _3485_onOwned;
            bool _3486_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3487_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1639;
            bool _out1640;
            bool _out1641;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1642;
            DCOMP.COMP.GenExpr(_3483_on, selfIdent, @params, false, out _out1639, out _out1640, out _out1641, out _out1642);
            _3484_onString = _out1639;
            _3485_onOwned = _out1640;
            _3486_onErased = _out1641;
            _3487_recIdents = _out1642;
            if ((_3480_isDatatype) || (_3481_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3484_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3482_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3481_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3484_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3482_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3487_recIdents;
          }
        } else if (_source161.is_TypeTest) {
          DAST._IExpression _3488___mcc_h180 = _source161.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3489___mcc_h181 = _source161.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3490___mcc_h182 = _source161.dtor_variant;
          bool _3491_isDatatype = _3204___mcc_h45;
          bool _3492_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3493_field = _3202___mcc_h43;
          DAST._IExpression _3494_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3495_onString;
            bool _3496_onOwned;
            bool _3497_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3498_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1643;
            bool _out1644;
            bool _out1645;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1646;
            DCOMP.COMP.GenExpr(_3494_on, selfIdent, @params, false, out _out1643, out _out1644, out _out1645, out _out1646);
            _3495_onString = _out1643;
            _3496_onOwned = _out1644;
            _3497_onErased = _out1645;
            _3498_recIdents = _out1646;
            if ((_3491_isDatatype) || (_3492_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3495_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3493_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3492_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3495_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3493_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3498_recIdents;
          }
        } else if (_source161.is_InitializationValue) {
          DAST._IType _3499___mcc_h186 = _source161.dtor_typ;
          bool _3500_isDatatype = _3204___mcc_h45;
          bool _3501_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3502_field = _3202___mcc_h43;
          DAST._IExpression _3503_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3504_onString;
            bool _3505_onOwned;
            bool _3506_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3507_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1647;
            bool _out1648;
            bool _out1649;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1650;
            DCOMP.COMP.GenExpr(_3503_on, selfIdent, @params, false, out _out1647, out _out1648, out _out1649, out _out1650);
            _3504_onString = _out1647;
            _3505_onOwned = _out1648;
            _3506_onErased = _out1649;
            _3507_recIdents = _out1650;
            if ((_3500_isDatatype) || (_3501_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3504_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3502_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3501_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3504_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3502_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3507_recIdents;
          }
        } else if (_source161.is_BoolBoundedPool) {
          bool _3508_isDatatype = _3204___mcc_h45;
          bool _3509_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3510_field = _3202___mcc_h43;
          DAST._IExpression _3511_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3512_onString;
            bool _3513_onOwned;
            bool _3514_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3515_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1651;
            bool _out1652;
            bool _out1653;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1654;
            DCOMP.COMP.GenExpr(_3511_on, selfIdent, @params, false, out _out1651, out _out1652, out _out1653, out _out1654);
            _3512_onString = _out1651;
            _3513_onOwned = _out1652;
            _3514_onErased = _out1653;
            _3515_recIdents = _out1654;
            if ((_3508_isDatatype) || (_3509_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3512_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3510_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3509_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3512_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3510_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3515_recIdents;
          }
        } else if (_source161.is_SetBoundedPool) {
          DAST._IExpression _3516___mcc_h188 = _source161.dtor_of;
          bool _3517_isDatatype = _3204___mcc_h45;
          bool _3518_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3519_field = _3202___mcc_h43;
          DAST._IExpression _3520_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3521_onString;
            bool _3522_onOwned;
            bool _3523_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3524_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1655;
            bool _out1656;
            bool _out1657;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1658;
            DCOMP.COMP.GenExpr(_3520_on, selfIdent, @params, false, out _out1655, out _out1656, out _out1657, out _out1658);
            _3521_onString = _out1655;
            _3522_onOwned = _out1656;
            _3523_onErased = _out1657;
            _3524_recIdents = _out1658;
            if ((_3517_isDatatype) || (_3518_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3521_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3519_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3518_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3521_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3519_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3524_recIdents;
          }
        } else if (_source161.is_SeqBoundedPool) {
          DAST._IExpression _3525___mcc_h190 = _source161.dtor_of;
          bool _3526___mcc_h191 = _source161.dtor_includeDuplicates;
          bool _3527_isDatatype = _3204___mcc_h45;
          bool _3528_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3529_field = _3202___mcc_h43;
          DAST._IExpression _3530_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3531_onString;
            bool _3532_onOwned;
            bool _3533_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3534_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1659;
            bool _out1660;
            bool _out1661;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
            DCOMP.COMP.GenExpr(_3530_on, selfIdent, @params, false, out _out1659, out _out1660, out _out1661, out _out1662);
            _3531_onString = _out1659;
            _3532_onOwned = _out1660;
            _3533_onErased = _out1661;
            _3534_recIdents = _out1662;
            if ((_3527_isDatatype) || (_3528_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3531_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3529_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3528_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3531_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3529_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3534_recIdents;
          }
        } else {
          DAST._IExpression _3535___mcc_h194 = _source161.dtor_lo;
          DAST._IExpression _3536___mcc_h195 = _source161.dtor_hi;
          bool _3537_isDatatype = _3204___mcc_h45;
          bool _3538_isConstant = _3203___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3539_field = _3202___mcc_h43;
          DAST._IExpression _3540_on = _3201___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3541_onString;
            bool _3542_onOwned;
            bool _3543_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3544_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1663;
            bool _out1664;
            bool _out1665;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
            DCOMP.COMP.GenExpr(_3540_on, selfIdent, @params, false, out _out1663, out _out1664, out _out1665, out _out1666);
            _3541_onString = _out1663;
            _3542_onOwned = _out1664;
            _3543_onErased = _out1665;
            _3544_recIdents = _out1666;
            if ((_3537_isDatatype) || (_3538_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3541_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3539_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3538_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3541_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3539_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3544_recIdents;
          }
        }
      } else if (_source101.is_SelectFn) {
        DAST._IExpression _3545___mcc_h198 = _source101.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3546___mcc_h199 = _source101.dtor_field;
        bool _3547___mcc_h200 = _source101.dtor_onDatatype;
        bool _3548___mcc_h201 = _source101.dtor_isStatic;
        BigInteger _3549___mcc_h202 = _source101.dtor_arity;
        BigInteger _3550_arity = _3549___mcc_h202;
        bool _3551_isStatic = _3548___mcc_h201;
        bool _3552_isDatatype = _3547___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3553_field = _3546___mcc_h199;
        DAST._IExpression _3554_on = _3545___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3555_onString;
          bool _3556_onOwned;
          bool _3557___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3558_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          bool _out1668;
          bool _out1669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1670;
          DCOMP.COMP.GenExpr(_3554_on, selfIdent, @params, false, out _out1667, out _out1668, out _out1669, out _out1670);
          _3555_onString = _out1667;
          _3556_onOwned = _out1668;
          _3557___v82 = _out1669;
          _3558_recIdents = _out1670;
          if (_3551_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3555_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3553_field);
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3555_onString), ((_3556_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3559_args;
            _3559_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3560_i;
            _3560_i = BigInteger.Zero;
            while ((_3560_i) < (_3550_arity)) {
              if ((_3560_i).Sign == 1) {
                _3559_args = Dafny.Sequence<Dafny.Rune>.Concat(_3559_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3559_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3559_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), DCOMP.__default.natToString(_3560_i));
              _3560_i = (_3560_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3559_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3553_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3559_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3561_typeShape;
          _3561_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3562_i;
          _3562_i = BigInteger.Zero;
          while ((_3562_i) < (_3550_arity)) {
            if ((_3562_i).Sign == 1) {
              _3561_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3561_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3561_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3561_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3562_i = (_3562_i) + (BigInteger.One);
          }
          _3561_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3561_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3561_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3558_recIdents;
        }
      } else if (_source101.is_Index) {
        DAST._IExpression _3563___mcc_h203 = _source101.dtor_expr;
        DAST._ICollKind _3564___mcc_h204 = _source101.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3565___mcc_h205 = _source101.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3566_indices = _3565___mcc_h205;
        DAST._ICollKind _3567_collKind = _3564___mcc_h204;
        DAST._IExpression _3568_on = _3563___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3569_onString;
          bool _3570_onOwned;
          bool _3571_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3572_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1671;
          bool _out1672;
          bool _out1673;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1674;
          DCOMP.COMP.GenExpr(_3568_on, selfIdent, @params, false, out _out1671, out _out1672, out _out1673, out _out1674);
          _3569_onString = _out1671;
          _3570_onOwned = _out1672;
          _3571_onErased = _out1673;
          _3572_recIdents = _out1674;
          readIdents = _3572_recIdents;
          s = _3569_onString;
          BigInteger _3573_i;
          _3573_i = BigInteger.Zero;
          while ((_3573_i) < (new BigInteger((_3566_indices).Count))) {
            if (object.Equals(_3567_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3567_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3574_idx;
              bool _3575_idxOwned;
              bool _3576_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3577_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1675;
              bool _out1676;
              bool _out1677;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1678;
              DCOMP.COMP.GenExpr((_3566_indices).Select(_3573_i), selfIdent, @params, false, out _out1675, out _out1676, out _out1677, out _out1678);
              _3574_idx = _out1675;
              _3575_idxOwned = _out1676;
              _3576_idxErased = _out1677;
              _3577_recIdentsIdx = _out1678;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3575_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3574_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3577_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3578_idx;
              bool _3579___v83;
              bool _3580_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3581_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1679;
              bool _out1680;
              bool _out1681;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1682;
              DCOMP.COMP.GenExpr((_3566_indices).Select(_3573_i), selfIdent, @params, true, out _out1679, out _out1680, out _out1681, out _out1682);
              _3578_idx = _out1679;
              _3579___v83 = _out1680;
              _3580_idxErased = _out1681;
              _3581_recIdentsIdx = _out1682;
              if (!(_3580_idxErased)) {
                _3578_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3578_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3578_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3581_recIdentsIdx);
            }
            _3573_i = (_3573_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3571_onErased;
        }
      } else if (_source101.is_IndexRange) {
        DAST._IExpression _3582___mcc_h206 = _source101.dtor_expr;
        bool _3583___mcc_h207 = _source101.dtor_isArray;
        DAST._IOptional<DAST._IExpression> _3584___mcc_h208 = _source101.dtor_low;
        DAST._IOptional<DAST._IExpression> _3585___mcc_h209 = _source101.dtor_high;
        DAST._IOptional<DAST._IExpression> _3586_high = _3585___mcc_h209;
        DAST._IOptional<DAST._IExpression> _3587_low = _3584___mcc_h208;
        bool _3588_isArray = _3583___mcc_h207;
        DAST._IExpression _3589_on = _3582___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3590_onString;
          bool _3591_onOwned;
          bool _3592_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3593_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1683;
          bool _out1684;
          bool _out1685;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1686;
          DCOMP.COMP.GenExpr(_3589_on, selfIdent, @params, false, out _out1683, out _out1684, out _out1685, out _out1686);
          _3590_onString = _out1683;
          _3591_onOwned = _out1684;
          _3592_onErased = _out1685;
          _3593_recIdents = _out1686;
          readIdents = _3593_recIdents;
          s = _3590_onString;
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3594_lowString;
          _3594_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source162 = _3587_low;
          if (_source162.is_Some) {
            DAST._IExpression _3595___mcc_h1195 = _source162.dtor_Some_a0;
            DAST._IExpression _3596_l = _3595___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3597_lString;
              bool _3598___v84;
              bool _3599_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3600_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1687;
              bool _out1688;
              bool _out1689;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1690;
              DCOMP.COMP.GenExpr(_3596_l, selfIdent, @params, true, out _out1687, out _out1688, out _out1689, out _out1690);
              _3597_lString = _out1687;
              _3598___v84 = _out1688;
              _3599_lErased = _out1689;
              _3600_recIdentsL = _out1690;
              if (!(_3599_lErased)) {
                _3597_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3597_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3594_lowString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3597_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3600_recIdentsL);
            }
          } else {
          }
          DAST._IOptional<Dafny.ISequence<Dafny.Rune>> _3601_highString;
          _3601_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None();
          DAST._IOptional<DAST._IExpression> _source163 = _3586_high;
          if (_source163.is_Some) {
            DAST._IExpression _3602___mcc_h1196 = _source163.dtor_Some_a0;
            DAST._IExpression _3603_h = _3602___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3604_hString;
              bool _3605___v85;
              bool _3606_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3607_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1691;
              bool _out1692;
              bool _out1693;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1694;
              DCOMP.COMP.GenExpr(_3603_h, selfIdent, @params, true, out _out1691, out _out1692, out _out1693, out _out1694);
              _3604_hString = _out1691;
              _3605___v85 = _out1692;
              _3606_hErased = _out1693;
              _3607_recIdentsH = _out1694;
              if (!(_3606_hErased)) {
                _3604_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3604_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3601_highString = DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(_3604_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3607_recIdentsH);
            }
          } else {
          }
          if (_3588_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source164) => {
            if (_source164.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3608___mcc_h1197 = _source164.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3609_l = _3608___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3609_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3594_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<DAST._IOptional<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source165) => {
            if (_source165.is_Some) {
              Dafny.ISequence<Dafny.Rune> _3610___mcc_h1198 = _source165.dtor_Some_a0;
              Dafny.ISequence<Dafny.Rune> _3611_h = _3610___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3611_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            }
          }))(_3601_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3592_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source101.is_TupleSelect) {
        DAST._IExpression _3612___mcc_h210 = _source101.dtor_expr;
        BigInteger _3613___mcc_h211 = _source101.dtor_index;
        BigInteger _3614_idx = _3613___mcc_h211;
        DAST._IExpression _3615_on = _3612___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3616_onString;
          bool _3617___v86;
          bool _3618_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3619_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1695;
          bool _out1696;
          bool _out1697;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1698;
          DCOMP.COMP.GenExpr(_3615_on, selfIdent, @params, false, out _out1695, out _out1696, out _out1697, out _out1698);
          _3616_onString = _out1695;
          _3617___v86 = _out1696;
          _3618_tupErased = _out1697;
          _3619_recIdents = _out1698;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3616_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.natToString(_3614_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3618_tupErased;
          readIdents = _3619_recIdents;
        }
      } else if (_source101.is_Call) {
        DAST._IExpression _3620___mcc_h212 = _source101.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3621___mcc_h213 = _source101.dtor_name;
        Dafny.ISequence<DAST._IType> _3622___mcc_h214 = _source101.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3623___mcc_h215 = _source101.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3624_args = _3623___mcc_h215;
        Dafny.ISequence<DAST._IType> _3625_typeArgs = _3622___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3626_name = _3621___mcc_h213;
        DAST._IExpression _3627_on = _3620___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3628_typeArgString;
          _3628_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3625_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3629_typeI;
            _3629_typeI = BigInteger.Zero;
            _3628_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3629_typeI) < (new BigInteger((_3625_typeArgs).Count))) {
              if ((_3629_typeI).Sign == 1) {
                _3628_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3628_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3630_typeString;
              Dafny.ISequence<Dafny.Rune> _out1699;
              _out1699 = DCOMP.COMP.GenType((_3625_typeArgs).Select(_3629_typeI), false, false);
              _3630_typeString = _out1699;
              _3628_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3628_typeArgString, _3630_typeString);
              _3629_typeI = (_3629_typeI) + (BigInteger.One);
            }
            _3628_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3628_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3631_argString;
          _3631_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3632_i;
          _3632_i = BigInteger.Zero;
          while ((_3632_i) < (new BigInteger((_3624_args).Count))) {
            if ((_3632_i).Sign == 1) {
              _3631_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3631_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3633_argExpr;
            bool _3634_isOwned;
            bool _3635_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3636_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1700;
            bool _out1701;
            bool _out1702;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1703;
            DCOMP.COMP.GenExpr((_3624_args).Select(_3632_i), selfIdent, @params, false, out _out1700, out _out1701, out _out1702, out _out1703);
            _3633_argExpr = _out1700;
            _3634_isOwned = _out1701;
            _3635_argErased = _out1702;
            _3636_argIdents = _out1703;
            if (_3634_isOwned) {
              _3633_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3633_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3635_argErased)) {
              _3633_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3633_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3633_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3633_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3631_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3631_argString, _3633_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3636_argIdents);
            _3632_i = (_3632_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3637_enclosingString;
          bool _3638___v87;
          bool _3639___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3640_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1704;
          bool _out1705;
          bool _out1706;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1707;
          DCOMP.COMP.GenExpr(_3627_on, selfIdent, @params, false, out _out1704, out _out1705, out _out1706, out _out1707);
          _3637_enclosingString = _out1704;
          _3638___v87 = _out1705;
          _3639___v88 = _out1706;
          _3640_recIdents = _out1707;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3640_recIdents);
          DAST._IExpression _source166 = _3627_on;
          if (_source166.is_Literal) {
            DAST._ILiteral _3641___mcc_h1199 = _source166.dtor_Literal_a0;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3642___mcc_h1201 = _source166.dtor_Ident_a0;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3643___mcc_h1203 = _source166.dtor_Companion_a0;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3637_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3644___mcc_h1205 = _source166.dtor_Tuple_a0;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3645___mcc_h1207 = _source166.dtor_path;
            Dafny.ISequence<DAST._IType> _3646___mcc_h1208 = _source166.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3647___mcc_h1209 = _source166.dtor_args;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3648___mcc_h1213 = _source166.dtor_dims;
            DAST._IType _3649___mcc_h1214 = _source166.dtor_typ;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3650___mcc_h1217 = _source166.dtor_path;
            Dafny.ISequence<DAST._IType> _3651___mcc_h1218 = _source166.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3652___mcc_h1219 = _source166.dtor_variant;
            bool _3653___mcc_h1220 = _source166.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3654___mcc_h1221 = _source166.dtor_contents;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Convert) {
            DAST._IExpression _3655___mcc_h1227 = _source166.dtor_value;
            DAST._IType _3656___mcc_h1228 = _source166.dtor_from;
            DAST._IType _3657___mcc_h1229 = _source166.dtor_typ;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_SeqConstruct) {
            DAST._IExpression _3658___mcc_h1233 = _source166.dtor_length;
            DAST._IExpression _3659___mcc_h1234 = _source166.dtor_elem;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3660___mcc_h1237 = _source166.dtor_elements;
            DAST._IType _3661___mcc_h1238 = _source166.dtor_typ;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3662___mcc_h1241 = _source166.dtor_elements;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3663___mcc_h1243 = _source166.dtor_mapElems;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_This) {
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Ite) {
            DAST._IExpression _3664___mcc_h1245 = _source166.dtor_cond;
            DAST._IExpression _3665___mcc_h1246 = _source166.dtor_thn;
            DAST._IExpression _3666___mcc_h1247 = _source166.dtor_els;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_UnOp) {
            DAST._IUnaryOp _3667___mcc_h1251 = _source166.dtor_unOp;
            DAST._IExpression _3668___mcc_h1252 = _source166.dtor_expr;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_BinOp) {
            DAST._IBinOp _3669___mcc_h1255 = _source166.dtor_op;
            DAST._IExpression _3670___mcc_h1256 = _source166.dtor_left;
            DAST._IExpression _3671___mcc_h1257 = _source166.dtor_right;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_ArrayLen) {
            DAST._IExpression _3672___mcc_h1261 = _source166.dtor_expr;
            BigInteger _3673___mcc_h1262 = _source166.dtor_dim;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Select) {
            DAST._IExpression _3674___mcc_h1265 = _source166.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3675___mcc_h1266 = _source166.dtor_field;
            bool _3676___mcc_h1267 = _source166.dtor_isConstant;
            bool _3677___mcc_h1268 = _source166.dtor_onDatatype;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_SelectFn) {
            DAST._IExpression _3678___mcc_h1273 = _source166.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3679___mcc_h1274 = _source166.dtor_field;
            bool _3680___mcc_h1275 = _source166.dtor_onDatatype;
            bool _3681___mcc_h1276 = _source166.dtor_isStatic;
            BigInteger _3682___mcc_h1277 = _source166.dtor_arity;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Index) {
            DAST._IExpression _3683___mcc_h1283 = _source166.dtor_expr;
            DAST._ICollKind _3684___mcc_h1284 = _source166.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3685___mcc_h1285 = _source166.dtor_indices;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_IndexRange) {
            DAST._IExpression _3686___mcc_h1289 = _source166.dtor_expr;
            bool _3687___mcc_h1290 = _source166.dtor_isArray;
            DAST._IOptional<DAST._IExpression> _3688___mcc_h1291 = _source166.dtor_low;
            DAST._IOptional<DAST._IExpression> _3689___mcc_h1292 = _source166.dtor_high;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_TupleSelect) {
            DAST._IExpression _3690___mcc_h1297 = _source166.dtor_expr;
            BigInteger _3691___mcc_h1298 = _source166.dtor_index;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Call) {
            DAST._IExpression _3692___mcc_h1301 = _source166.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3693___mcc_h1302 = _source166.dtor_name;
            Dafny.ISequence<DAST._IType> _3694___mcc_h1303 = _source166.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3695___mcc_h1304 = _source166.dtor_args;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3696___mcc_h1309 = _source166.dtor_params;
            DAST._IType _3697___mcc_h1310 = _source166.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3698___mcc_h1311 = _source166.dtor_body;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3699___mcc_h1315 = _source166.dtor_values;
            DAST._IType _3700___mcc_h1316 = _source166.dtor_retType;
            DAST._IExpression _3701___mcc_h1317 = _source166.dtor_expr;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3702___mcc_h1321 = _source166.dtor_name;
            DAST._IType _3703___mcc_h1322 = _source166.dtor_typ;
            DAST._IExpression _3704___mcc_h1323 = _source166.dtor_value;
            DAST._IExpression _3705___mcc_h1324 = _source166.dtor_iifeBody;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_Apply) {
            DAST._IExpression _3706___mcc_h1329 = _source166.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3707___mcc_h1330 = _source166.dtor_args;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_TypeTest) {
            DAST._IExpression _3708___mcc_h1333 = _source166.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3709___mcc_h1334 = _source166.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3710___mcc_h1335 = _source166.dtor_variant;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_InitializationValue) {
            DAST._IType _3711___mcc_h1339 = _source166.dtor_typ;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_BoolBoundedPool) {
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_SetBoundedPool) {
            DAST._IExpression _3712___mcc_h1341 = _source166.dtor_of;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else if (_source166.is_SeqBoundedPool) {
            DAST._IExpression _3713___mcc_h1343 = _source166.dtor_of;
            bool _3714___mcc_h1344 = _source166.dtor_includeDuplicates;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          } else {
            DAST._IExpression _3715___mcc_h1347 = _source166.dtor_lo;
            DAST._IExpression _3716___mcc_h1348 = _source166.dtor_hi;
            {
              _3637_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3637_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3626_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3637_enclosingString, _3628_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3631_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source101.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3717___mcc_h216 = _source101.dtor_params;
        DAST._IType _3718___mcc_h217 = _source101.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3719___mcc_h218 = _source101.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3720_body = _3719___mcc_h218;
        DAST._IType _3721_retType = _3718___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3722_params = _3717___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3723_paramNames;
          _3723_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3724_i;
          _3724_i = BigInteger.Zero;
          while ((_3724_i) < (new BigInteger((_3722_params).Count))) {
            _3723_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3723_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3722_params).Select(_3724_i)).dtor_name));
            _3724_i = (_3724_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3725_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3726_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1708;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1709;
          DCOMP.COMP.GenStmts(_3720_body, ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())), _3723_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1708, out _out1709);
          _3725_recursiveGen = _out1708;
          _3726_recIdents = _out1709;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3727_allReadCloned;
          _3727_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3726_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3728_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_1 in (_3726_recIdents).Elements) {
              _3728_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_1;
              if ((_3726_recIdents).Contains(_3728_next)) {
                goto after__ASSIGN_SUCH_THAT_1;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 1933)");
          after__ASSIGN_SUCH_THAT_1:;
            if ((!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3728_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, DAST.Optional<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3727_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3727_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3723_paramNames).Contains(_3728_next))) {
              _3727_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3727_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3728_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3728_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3728_next));
            }
            _3726_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3726_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3728_next));
          }
          Dafny.ISequence<Dafny.Rune> _3729_paramsString;
          _3729_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3730_paramTypes;
          _3730_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3724_i = BigInteger.Zero;
          while ((_3724_i) < (new BigInteger((_3722_params).Count))) {
            if ((_3724_i).Sign == 1) {
              _3729_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3729_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3730_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3730_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3731_typStr;
            Dafny.ISequence<Dafny.Rune> _out1710;
            _out1710 = DCOMP.COMP.GenType(((_3722_params).Select(_3724_i)).dtor_typ, false, true);
            _3731_typStr = _out1710;
            _3729_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3729_paramsString, ((_3722_params).Select(_3724_i)).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3731_typStr);
            _3730_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3730_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3731_typStr);
            _3724_i = (_3724_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3732_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1711;
          _out1711 = DCOMP.COMP.GenType(_3721_retType, false, true);
          _3732_retTypeGen = _out1711;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3730_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3732_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3727_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3729_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3732_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3725_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source101.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3733___mcc_h219 = _source101.dtor_values;
        DAST._IType _3734___mcc_h220 = _source101.dtor_retType;
        DAST._IExpression _3735___mcc_h221 = _source101.dtor_expr;
        DAST._IExpression _3736_expr = _3735___mcc_h221;
        DAST._IType _3737_retType = _3734___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3738_values = _3733___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3739_paramNames;
          _3739_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3740_paramNamesSet;
          _3740_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3741_i;
          _3741_i = BigInteger.Zero;
          while ((_3741_i) < (new BigInteger((_3738_values).Count))) {
            _3739_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3739_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3738_values).Select(_3741_i)).dtor__0).dtor_name));
            _3740_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3740_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3738_values).Select(_3741_i)).dtor__0).dtor_name));
            _3741_i = (_3741_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3742_paramsString;
          _3742_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3741_i = BigInteger.Zero;
          while ((_3741_i) < (new BigInteger((_3738_values).Count))) {
            if ((_3741_i).Sign == 1) {
              _3742_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3742_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3743_typStr;
            Dafny.ISequence<Dafny.Rune> _out1712;
            _out1712 = DCOMP.COMP.GenType((((_3738_values).Select(_3741_i)).dtor__0).dtor_typ, false, true);
            _3743_typStr = _out1712;
            Dafny.ISequence<Dafny.Rune> _3744_valueGen;
            bool _3745___v91;
            bool _3746_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3747_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1713;
            bool _out1714;
            bool _out1715;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1716;
            DCOMP.COMP.GenExpr(((_3738_values).Select(_3741_i)).dtor__1, selfIdent, @params, true, out _out1713, out _out1714, out _out1715, out _out1716);
            _3744_valueGen = _out1713;
            _3745___v91 = _out1714;
            _3746_valueErased = _out1715;
            _3747_recIdents = _out1716;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3738_values).Select(_3741_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3743_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3747_recIdents);
            if (_3746_valueErased) {
              _3744_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3744_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3744_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3741_i = (_3741_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3748_recGen;
          bool _3749_recOwned;
          bool _3750_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3751_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1717;
          bool _out1718;
          bool _out1719;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1720;
          DCOMP.COMP.GenExpr(_3736_expr, selfIdent, _3739_paramNames, mustOwn, out _out1717, out _out1718, out _out1719, out _out1720);
          _3748_recGen = _out1717;
          _3749_recOwned = _out1718;
          _3750_recErased = _out1719;
          _3751_recIdents = _out1720;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3751_recIdents, _3740_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3748_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3749_recOwned;
          isErased = _3750_recErased;
        }
      } else if (_source101.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3752___mcc_h222 = _source101.dtor_name;
        DAST._IType _3753___mcc_h223 = _source101.dtor_typ;
        DAST._IExpression _3754___mcc_h224 = _source101.dtor_value;
        DAST._IExpression _3755___mcc_h225 = _source101.dtor_iifeBody;
        DAST._IExpression _3756_iifeBody = _3755___mcc_h225;
        DAST._IExpression _3757_value = _3754___mcc_h224;
        DAST._IType _3758_tpe = _3753___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3759_name = _3752___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3760_valueGen;
          bool _3761___v92;
          bool _3762_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3763_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1721;
          bool _out1722;
          bool _out1723;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1724;
          DCOMP.COMP.GenExpr(_3757_value, selfIdent, @params, true, out _out1721, out _out1722, out _out1723, out _out1724);
          _3760_valueGen = _out1721;
          _3761___v92 = _out1722;
          _3762_valueErased = _out1723;
          _3763_recIdents = _out1724;
          if (_3762_valueErased) {
            _3760_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3760_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3763_recIdents;
          Dafny.ISequence<Dafny.Rune> _3764_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1725;
          _out1725 = DCOMP.COMP.GenType(_3758_tpe, false, true);
          _3764_valueTypeGen = _out1725;
          Dafny.ISequence<Dafny.Rune> _3765_bodyGen;
          bool _3766___v93;
          bool _3767_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3768_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1726;
          bool _out1727;
          bool _out1728;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1729;
          DCOMP.COMP.GenExpr(_3756_iifeBody, selfIdent, @params, true, out _out1726, out _out1727, out _out1728, out _out1729);
          _3765_bodyGen = _out1726;
          _3766___v93 = _out1727;
          _3767_bodyErased = _out1728;
          _3768_bodyIdents = _out1729;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3768_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3759_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3759_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3764_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3760_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3765_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3767_bodyErased;
        }
      } else if (_source101.is_Apply) {
        DAST._IExpression _3769___mcc_h226 = _source101.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3770___mcc_h227 = _source101.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3771_args = _3770___mcc_h227;
        DAST._IExpression _3772_func = _3769___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3773_funcString;
          bool _3774___v94;
          bool _3775_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3776_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1730;
          bool _out1731;
          bool _out1732;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1733;
          DCOMP.COMP.GenExpr(_3772_func, selfIdent, @params, false, out _out1730, out _out1731, out _out1732, out _out1733);
          _3773_funcString = _out1730;
          _3774___v94 = _out1731;
          _3775_funcErased = _out1732;
          _3776_recIdents = _out1733;
          readIdents = _3776_recIdents;
          Dafny.ISequence<Dafny.Rune> _3777_argString;
          _3777_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3778_i;
          _3778_i = BigInteger.Zero;
          while ((_3778_i) < (new BigInteger((_3771_args).Count))) {
            if ((_3778_i).Sign == 1) {
              _3777_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3777_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3779_argExpr;
            bool _3780_isOwned;
            bool _3781_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3782_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1734;
            bool _out1735;
            bool _out1736;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1737;
            DCOMP.COMP.GenExpr((_3771_args).Select(_3778_i), selfIdent, @params, false, out _out1734, out _out1735, out _out1736, out _out1737);
            _3779_argExpr = _out1734;
            _3780_isOwned = _out1735;
            _3781_argErased = _out1736;
            _3782_argIdents = _out1737;
            if (_3780_isOwned) {
              _3779_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3779_argExpr);
            }
            _3777_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3777_argString, _3779_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3782_argIdents);
            _3778_i = (_3778_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3773_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3777_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source101.is_TypeTest) {
        DAST._IExpression _3783___mcc_h228 = _source101.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3784___mcc_h229 = _source101.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3785___mcc_h230 = _source101.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3786_variant = _3785___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3787_dType = _3784___mcc_h229;
        DAST._IExpression _3788_on = _3783___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3789_exprGen;
          bool _3790___v95;
          bool _3791_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3792_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1738;
          bool _out1739;
          bool _out1740;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1741;
          DCOMP.COMP.GenExpr(_3788_on, selfIdent, @params, false, out _out1738, out _out1739, out _out1740, out _out1741);
          _3789_exprGen = _out1738;
          _3790___v95 = _out1739;
          _3791_exprErased = _out1740;
          _3792_recIdents = _out1741;
          Dafny.ISequence<Dafny.Rune> _3793_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1742;
          _out1742 = DCOMP.COMP.GenPath(_3787_dType);
          _3793_dTypePath = _out1742;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3789_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3793_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3786_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3792_recIdents;
        }
      } else if (_source101.is_InitializationValue) {
        DAST._IType _3794___mcc_h231 = _source101.dtor_typ;
        DAST._IType _3795_typ = _3794___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3796_typString;
          Dafny.ISequence<Dafny.Rune> _out1743;
          _out1743 = DCOMP.COMP.GenType(_3795_typ, false, false);
          _3796_typString = _out1743;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3796_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source101.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source101.is_SetBoundedPool) {
        DAST._IExpression _3797___mcc_h232 = _source101.dtor_of;
        DAST._IExpression _3798_of = _3797___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3799_exprGen;
          bool _3800___v96;
          bool _3801_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3802_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1744;
          bool _out1745;
          bool _out1746;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1747;
          DCOMP.COMP.GenExpr(_3798_of, selfIdent, @params, false, out _out1744, out _out1745, out _out1746, out _out1747);
          _3799_exprGen = _out1744;
          _3800___v96 = _out1745;
          _3801_exprErased = _out1746;
          _3802_recIdents = _out1747;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3799_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3801_exprErased;
          readIdents = _3802_recIdents;
        }
      } else if (_source101.is_SeqBoundedPool) {
        DAST._IExpression _3803___mcc_h233 = _source101.dtor_of;
        bool _3804___mcc_h234 = _source101.dtor_includeDuplicates;
        bool _3805_includeDuplicates = _3804___mcc_h234;
        DAST._IExpression _3806_of = _3803___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3807_exprGen;
          bool _3808___v97;
          bool _3809_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3810_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1748;
          bool _out1749;
          bool _out1750;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1751;
          DCOMP.COMP.GenExpr(_3806_of, selfIdent, @params, false, out _out1748, out _out1749, out _out1750, out _out1751);
          _3807_exprGen = _out1748;
          _3808___v97 = _out1749;
          _3809_exprErased = _out1750;
          _3810_recIdents = _out1751;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3807_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3805_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3809_exprErased;
          readIdents = _3810_recIdents;
        }
      } else {
        DAST._IExpression _3811___mcc_h235 = _source101.dtor_lo;
        DAST._IExpression _3812___mcc_h236 = _source101.dtor_hi;
        DAST._IExpression _3813_hi = _3812___mcc_h236;
        DAST._IExpression _3814_lo = _3811___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3815_loString;
          bool _3816___v98;
          bool _3817_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3818_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1752;
          bool _out1753;
          bool _out1754;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1755;
          DCOMP.COMP.GenExpr(_3814_lo, selfIdent, @params, true, out _out1752, out _out1753, out _out1754, out _out1755);
          _3815_loString = _out1752;
          _3816___v98 = _out1753;
          _3817_loErased = _out1754;
          _3818_recIdentsLo = _out1755;
          Dafny.ISequence<Dafny.Rune> _3819_hiString;
          bool _3820___v99;
          bool _3821_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3822_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1756;
          bool _out1757;
          bool _out1758;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1759;
          DCOMP.COMP.GenExpr(_3813_hi, selfIdent, @params, true, out _out1756, out _out1757, out _out1758, out _out1759);
          _3819_hiString = _out1756;
          _3820___v99 = _out1757;
          _3821_hiErased = _out1758;
          _3822_recIdentsHi = _out1759;
          if (!(_3817_loErased)) {
            _3815_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3815_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3821_hiErased)) {
            _3819_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3819_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3815_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3819_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3818_recIdentsLo, _3822_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3823_i;
      _3823_i = BigInteger.Zero;
      while ((_3823_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3824_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        Dafny.ISequence<Dafny.Rune> _out1760;
        _out1760 = DCOMP.COMP.GenModule((p).Select(_3823_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3824_generated = _out1760;
        if ((_3823_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3824_generated);
        _3823_i = (_3823_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3825_i;
      _3825_i = BigInteger.Zero;
      while ((_3825_i) < (new BigInteger((fullName).Count))) {
        if ((_3825_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, (fullName).Select(_3825_i));
        _3825_i = (_3825_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

